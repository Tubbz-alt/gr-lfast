# Copyright 2011,2012,2016,2018,2019 Free Software Foundation, Inc.
#
# This file was generated by gr_modtool, a tool from the GNU Radio framework
# This file is a part of gr-lfast
#
# GNU Radio is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# GNU Radio is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU Radio; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.

# Setup FMA Capabilities Flag
IF(UNIX)
    MESSAGE(STATUS "Checking for FMA support...")
    IF(APPLE)
        EXEC_PROGRAM("/usr/sbin/sysctl -n machdep.cpu.features" OUTPUT_VARIABLE CPUINFO)
    ELSE(APPLE)
        if(EXISTS "/proc/cpuinfo")
            EXEC_PROGRAM(cat ARGS "/proc/cpuinfo" OUTPUT_VARIABLE CPUINFO)
        ELSE()
            # If for any reason /proc/cpuinfo does not exist, default to no FMA.
            set(CPUINFO "")
        ENDIF()
    ENDIF(APPLE)

    STRING(REGEX REPLACE "^.*(fma).*$" "fma" FMA_THERE ${CPUINFO})
    STRING(COMPARE EQUAL "fma" "${FMA_THERE}" FMA_TRUE)
    IF (FMA_TRUE)
                MESSAGE(STATUS "Found FMA support.  Setting fma compile flag.")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mfma")
    ELSE (FMA_TRUE)
                MESSAGE(STATUS "FMA support not found.  Not setting fma flag.")
    ENDIF (FMA_TRUE)
ENDIF()

IF(CMAKE_BUILD_TYPE MATCHES DEBUG)
	MESSAGE(STATUS "building for debug...")
ELSE(CMAKE_BUILD_TYPE MATCHES RELEASE)
	MESSAGE(STATUS "Release mode: increasing compiler optimizations...")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")
ENDIF(CMAKE_BUILD_TYPE MATCHES DEBUG)

########################################################################
# Setup library
########################################################################
include(GrPlatform) #define LIB_SUFFIX

list(APPEND lfast_sources
    costas2_impl.cc
    costas4_impl.cc
    agc_fast_impl.cc
    agc_fast_ff_impl.cc
    CC2F2ByteVector_impl.cc
    nlog10volk_impl.cc
    quad_demod_volk_impl.cc
    MTFIRFilterCCF_impl.cc
    MTFIRFilterFF_impl.cc
    fir_filter_lfast.cc
    MTFIRFilterCCC_impl.cc
)

set(lfast_sources "${lfast_sources}" PARENT_SCOPE)
if(NOT lfast_sources)
    MESSAGE(STATUS "No C++ sources... skipping lib/")
    return()
endif(NOT lfast_sources)

add_library(gnuradio-lfast SHARED ${lfast_sources})
target_link_libraries(gnuradio-lfast gnuradio::gnuradio-runtime ${Boost_LIBRARIES} boost_thread gnuradio-blocks gnuradio-filter volk)
target_include_directories(gnuradio-lfast
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>
    PUBLIC $<INSTALL_INTERFACE:include>
  )
set_target_properties(gnuradio-lfast PROPERTIES DEFINE_SYMBOL "gnuradio_lfast_EXPORTS")

if(APPLE)
    set_target_properties(gnuradio-lfast PROPERTIES
        INSTALL_NAME_DIR "${CMAKE_INSTALL_PREFIX}/lib"
    )
endif(APPLE)

########################################################################
# Install built library files
########################################################################
include(GrMiscUtils)
GR_LIBRARY_FOO(gnuradio-lfast)

########################################################################
# Print summary
########################################################################
message(STATUS "Using install prefix: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "Building for version: ${VERSION} / ${LIBVER}")

########################################################################
# Build test command-line tool
########################################################################
include(GrTest)

include_directories(${CPPUNIT_INCLUDE_DIRS})

list(APPEND test_lfast_sources
    ${CMAKE_CURRENT_SOURCE_DIR}/test_lfast.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/costas2_impl.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/costas4_impl.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/agc_fast_impl.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/CC2F2ByteVector_impl.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/nlog10volk_impl.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/quad_demod_volk_impl.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/MTFIRFilterCCF_impl.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/fir_filter_lfast.cc
)

add_executable(test-lfast ${test_lfast_sources})

target_link_libraries(
  test-lfast
  ${GNURADIO_RUNTIME_LIBRARIES}
  ${Boost_LIBRARIES}
  boost_thread
  ${CPPUNIT_LIBRARIES}
  gnuradio-blocks
  gnuradio-filter
  volk
  gnuradio-lfast
  pthread
)

install(TARGETS test-lfast DESTINATION "${CMAKE_INSTALL_PREFIX}/bin" RUNTIME)

