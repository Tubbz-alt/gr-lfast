GAS LISTING /tmp/ccvmoMuv.s 			page 1


   1              		.file	"costas2_impl.cc"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text._ZN5boost6detail15sp_counted_base7destroyEv,"axG",@progbits,_ZN5boost6detail15sp_co
   5              		.align 2
   6              		.p2align 4,,15
   7              		.weak	_ZN5boost6detail15sp_counted_base7destroyEv
   9              	_ZN5boost6detail15sp_counted_base7destroyEv:
  10              	.LFB2046:
  11              		.file 1 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp"
   1:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** #ifndef BOOST_SMART_PTR_DETAIL_SP_COUNTED_BASE_GCC_X86_HPP_INCLUDED
   2:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** #define BOOST_SMART_PTR_DETAIL_SP_COUNTED_BASE_GCC_X86_HPP_INCLUDED
   3:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
   4:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** // MS compatible compilers support #pragma once
   5:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
   6:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** #if defined(_MSC_VER) && (_MSC_VER >= 1020)
   7:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** # pragma once
   8:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** #endif
   9:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
  10:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** //
  11:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** //  detail/sp_counted_base_gcc_x86.hpp - g++ on 486+ or AMD64
  12:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** //
  13:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** //  Copyright (c) 2001, 2002, 2003 Peter Dimov and Multi Media Ltd.
  14:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** //  Copyright 2004-2005 Peter Dimov
  15:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** //
  16:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** //  Distributed under the Boost Software License, Version 1.0. (See
  17:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** //  accompanying file LICENSE_1_0.txt or copy at
  18:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** //  http://www.boost.org/LICENSE_1_0.txt)
  19:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** //
  20:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** //
  21:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** //  Lock-free algorithm by Alexander Terekhov
  22:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** //
  23:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** //  Thanks to Ben Hitchings for the #weak + (#shared != 0)
  24:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** //  formulation
  25:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** //
  26:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
  27:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** #include <boost/detail/sp_typeinfo.hpp>
  28:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
  29:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** namespace boost
  30:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** {
  31:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
  32:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** namespace detail
  33:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** {
  34:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
  35:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** inline int atomic_exchange_and_add( int * pw, int dv )
  36:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** {
  37:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     // int r = *pw;
  38:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     // *pw += dv;
  39:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     // return r;
  40:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
  41:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     int r;
  42:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
  43:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     __asm__ __volatile__
  44:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     (
  45:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         "lock\n\t"
  46:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         "xadd %1, %0":
  47:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         "=m"( *pw ), "=r"( r ): // outputs (%0, %1)
GAS LISTING /tmp/ccvmoMuv.s 			page 2


  48:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         "m"( *pw ), "1"( dv ): // inputs (%2, %3 == %1)
  49:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         "memory", "cc" // clobbers
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     );
  51:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
  52:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     return r;
  53:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** }
  54:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
  55:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** inline void atomic_increment( int * pw )
  56:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** {
  57:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     //atomic_exchange_and_add( pw, 1 );
  58:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
  59:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     __asm__
  60:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     (
  61:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         "lock\n\t"
  62:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         "incl %0":
  63:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         "=m"( *pw ): // output (%0)
  64:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         "m"( *pw ): // input (%1)
  65:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         "cc" // clobbers
  66:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     );
  67:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** }
  68:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
  69:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** inline int atomic_conditional_increment( int * pw )
  70:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** {
  71:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     // int rv = *pw;
  72:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     // if( rv != 0 ) ++*pw;
  73:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     // return rv;
  74:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
  75:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     int rv, tmp;
  76:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
  77:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     __asm__
  78:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     (
  79:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         "movl %0, %%eax\n\t"
  80:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         "0:\n\t"
  81:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         "test %%eax, %%eax\n\t"
  82:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         "je 1f\n\t"
  83:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         "movl %%eax, %2\n\t"
  84:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         "incl %2\n\t"
  85:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         "lock\n\t"
  86:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         "cmpxchgl %2, %0\n\t"
  87:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         "jne 0b\n\t"
  88:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         "1:":
  89:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         "=m"( *pw ), "=&a"( rv ), "=&r"( tmp ): // outputs (%0, %1, %2)
  90:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         "m"( *pw ): // input (%3)
  91:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         "cc" // clobbers
  92:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     );
  93:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
  94:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     return rv;
  95:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** }
  96:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
  97:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** class sp_counted_base
  98:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** {
  99:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** private:
 100:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 101:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     sp_counted_base( sp_counted_base const & );
 102:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     sp_counted_base & operator= ( sp_counted_base const & );
 103:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 104:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     int use_count_;        // #shared
GAS LISTING /tmp/ccvmoMuv.s 			page 3


 105:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     int weak_count_;       // #weak + (#shared != 0)
 106:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 107:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** public:
 108:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 109:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     sp_counted_base(): use_count_( 1 ), weak_count_( 1 )
 110:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     {
 111:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     }
 112:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 113:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     virtual ~sp_counted_base() // nothrow
 114:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     {
 115:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     }
 116:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 117:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     // dispose() is called when use_count_ drops to zero, to release
 118:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     // the resources managed by *this.
 119:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 120:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     virtual void dispose() = 0; // nothrow
 121:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 122:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     // destroy() is called when weak_count_ drops to zero.
 123:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 124:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     virtual void destroy() // nothrow
  12              		.loc 1 124 0
  13              		.cfi_startproc
  14              	.LVL0:
 125:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     {
 126:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         delete this;
  15              		.loc 1 126 0
  16 0000 488B07   		movq	(%rdi), %rax
  17 0003 FF6008   		jmp	*8(%rax)
  18              	.LVL1:
  19              		.cfi_endproc
  20              	.LFE2046:
  22              		.section	.text._ZN2gr11basic_block20message_port_is_hierEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE,
  23              		.align 2
  24              		.p2align 4,,15
  25              		.weak	_ZN2gr11basic_block20message_port_is_hierEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE
  27              	_ZN2gr11basic_block20message_port_is_hierEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE:
  28              	.LFB8690:
  29              		.file 2 "/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h"
   1:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** /* -*- c++ -*- */
   2:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** /*
   3:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****  * Copyright 2006,2008,2009,2011,2013 Free Software Foundation, Inc.
   4:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****  *
   5:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****  * This file is part of GNU Radio
   6:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****  *
   7:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****  * GNU Radio is free software; you can redistribute it and/or modify
   8:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****  * it under the terms of the GNU General Public License as published by
   9:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****  * the Free Software Foundation; either version 3, or (at your option)
  10:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****  * any later version.
  11:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****  *
  12:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****  * GNU Radio is distributed in the hope that it will be useful,
  13:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****  * GNU General Public License for more details.
  16:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****  *
  17:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****  * You should have received a copy of the GNU General Public License
  18:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****  * along with GNU Radio; see the file COPYING.  If not, write to
  19:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****  * the Free Software Foundation, Inc., 51 Franklin Street,
GAS LISTING /tmp/ccvmoMuv.s 			page 4


  20:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****  * Boston, MA 02110-1301, USA.
  21:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****  */
  22:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
  23:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** #ifndef INCLUDED_GR_BASIC_BLOCK_H
  24:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** #define INCLUDED_GR_BASIC_BLOCK_H
  25:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
  26:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** #include <gnuradio/api.h>
  27:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** #include <gnuradio/sptr_magic.h>
  28:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** #include <gnuradio/msg_accepter.h>
  29:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** #include <gnuradio/runtime_types.h>
  30:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** #include <gnuradio/io_signature.h>
  31:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** #include <gnuradio/thread/thread.h>
  32:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** #include <boost/enable_shared_from_this.hpp>
  33:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** #include <boost/function.hpp>
  34:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** #include <boost/foreach.hpp>
  35:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** #include <boost/thread/condition_variable.hpp>
  36:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** #include <iostream>
  37:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** #include <string>
  38:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** #include <deque>
  39:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** #include <map>
  40:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
  41:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** #ifdef GR_CTRLPORT
  42:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** #include <gnuradio/rpcregisterhelpers.h>
  43:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** #endif
  44:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
  45:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** namespace gr {
  46:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
  47:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****   /*!
  48:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****    * \brief The abstract base class for all signal processing blocks.
  49:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****    * \ingroup internal
  50:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****    *
  51:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****    * Basic blocks are the bare abstraction of an entity that has a
  52:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****    * name, a set of inputs and outputs, and a message queue.  These
  53:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****    * are never instantiated directly; rather, this is the abstract
  54:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****    * parent class of both gr_hier_block, which is a recursive
  55:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****    * container, and block, which implements actual signal
  56:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****    * processing functions.
  57:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****    */
  58:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****   class GR_RUNTIME_API basic_block : public msg_accepter,
  59:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****                                      public boost::enable_shared_from_this<basic_block>
  60:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****   {
  61:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     typedef boost::function<void(pmt::pmt_t)> msg_handler_t;
  62:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
  63:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****   private:
  64:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     typedef std::map<pmt::pmt_t , msg_handler_t, pmt::comparator> d_msg_handlers_t;
  65:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     d_msg_handlers_t d_msg_handlers;
  66:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
  67:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     typedef std::deque<pmt::pmt_t> msg_queue_t;
  68:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     typedef std::map<pmt::pmt_t, msg_queue_t, pmt::comparator> msg_queue_map_t;
  69:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     typedef std::map<pmt::pmt_t, msg_queue_t, pmt::comparator>::iterator msg_queue_map_itr;
  70:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     std::map<pmt::pmt_t, boost::shared_ptr<boost::condition_variable>, pmt::comparator> msg_queue_r
  71:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
  72:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     gr::thread::mutex mutex;          //< protects all vars
  73:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
  74:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****   protected:
  75:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     friend class flowgraph;
  76:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     friend class flat_flowgraph; // TODO: will be redundant
GAS LISTING /tmp/ccvmoMuv.s 			page 5


  77:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     friend class tpb_thread_body;
  78:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
  79:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     enum vcolor { WHITE, GREY, BLACK };
  80:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
  81:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     std::string       d_name;
  82:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     gr::io_signature::sptr d_input_signature;
  83:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     gr::io_signature::sptr d_output_signature;
  84:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     long              d_unique_id;
  85:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     long              d_symbolic_id;
  86:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     std::string       d_symbol_name;
  87:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     std::string       d_symbol_alias;
  88:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     vcolor            d_color;
  89:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     bool              d_rpc_set;
  90:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
  91:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     msg_queue_map_t msg_queue;
  92:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     std::vector<boost::any> d_rpc_vars; // container for all RPC variables
  93:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
  94:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     basic_block(void) {} // allows pure virtual interface sub-classes
  95:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
  96:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     //! Protected constructor prevents instantiation by non-derived classes
  97:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     basic_block(const std::string &name,
  98:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****                 gr::io_signature::sptr input_signature,
  99:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****                 gr::io_signature::sptr output_signature);
 100:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 101:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     //! may only be called during constructor
 102:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     void set_input_signature(gr::io_signature::sptr iosig) {
 103:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       d_input_signature = iosig;
 104:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     }
 105:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 106:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     //! may only be called during constructor
 107:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     void set_output_signature(gr::io_signature::sptr iosig) {
 108:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       d_output_signature = iosig;
 109:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     }
 110:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 111:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     /*!
 112:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * \brief Allow the flowgraph to set for sorting and partitioning
 113:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      */
 114:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     void set_color(vcolor color) { d_color = color; }
 115:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     vcolor color() const { return d_color; }
 116:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 117:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     /*!
 118:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * \brief Tests if there is a handler attached to port \p which_port
 119:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      */
 120:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     virtual bool has_msg_handler(pmt::pmt_t which_port) {
 121:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       return (d_msg_handlers.find(which_port) != d_msg_handlers.end());
 122:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     }
 123:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 124:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     /*
 125:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * This function is called by the runtime system to dispatch messages.
 126:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      *
 127:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * The thread-safety guarantees mentioned in set_msg_handler are
 128:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * implemented by the callers of this method.
 129:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      */
 130:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     virtual void dispatch_msg(pmt::pmt_t which_port, pmt::pmt_t msg)
 131:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     {
 132:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       // AA Update this
 133:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       if(has_msg_handler(which_port)) {  // Is there a handler?
GAS LISTING /tmp/ccvmoMuv.s 			page 6


 134:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****         d_msg_handlers[which_port](msg); // Yes, invoke it.
 135:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       }
 136:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     }
 137:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 138:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     // Message passing interface
 139:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     pmt::pmt_t d_message_subscribers;
 140:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 141:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****   public:
 142:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     pmt::pmt_t message_subscribers(pmt::pmt_t port);
 143:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     virtual ~basic_block();
 144:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     long unique_id() const { return d_unique_id; }
 145:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     long symbolic_id() const { return d_symbolic_id; }
 146:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 147:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     /*! The name of the block */
 148:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     std::string name() const { return d_name; }
 149:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 150:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     /*!
 151:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * The sybolic name of the block, which is used in the
 152:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * block_registry. The name is assigned by the block's constructor
 153:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * and never changes during the life of the block.
 154:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      */
 155:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     std::string symbol_name() const { return d_symbol_name; }
 156:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 157:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     gr::io_signature::sptr input_signature() const  { return d_input_signature; }
 158:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     gr::io_signature::sptr output_signature() const { return d_output_signature; }
 159:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     basic_block_sptr to_basic_block(); // Needed for Python type coercion
 160:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 161:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     /*!
 162:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * True if the block has an alias (see set_block_alias).
 163:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      */
 164:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     bool alias_set() { return !d_symbol_alias.empty(); }
 165:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 166:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     /*!
 167:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * Returns the block's alias as a string.
 168:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      */
 169:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     std::string alias(){ return alias_set()?d_symbol_alias:symbol_name(); }
 170:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 171:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     /*!
 172:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * Returns the block's alias as PMT.
 173:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      */
 174:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     pmt::pmt_t alias_pmt(){ return pmt::intern(alias()); }
 175:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 176:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     /*!
 177:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * Set's a new alias for the block; also adds an entry into the
 178:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * block_registry to get the block using either the alias or the
 179:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * original symbol name.
 180:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      */
 181:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     void set_block_alias(std::string name);
 182:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 183:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     // ** Message passing interface **
 184:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     void message_port_register_in(pmt::pmt_t port_id);
 185:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     void message_port_register_out(pmt::pmt_t port_id);
 186:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     void message_port_pub(pmt::pmt_t port_id, pmt::pmt_t msg);
 187:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     void message_port_sub(pmt::pmt_t port_id, pmt::pmt_t target);
 188:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     void message_port_unsub(pmt::pmt_t port_id, pmt::pmt_t target);
 189:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 190:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     virtual bool message_port_is_hier(pmt::pmt_t port_id) { (void) port_id; return false; }
GAS LISTING /tmp/ccvmoMuv.s 			page 7


  30              		.loc 2 190 0
  31              		.cfi_startproc
  32              	.LVL2:
  33              		.loc 2 190 0
  34 0000 31C0     		xorl	%eax, %eax
  35 0002 C3       		ret
  36              		.cfi_endproc
  37              	.LFE8690:
  39              		.section	.text._ZN2gr11basic_block23message_port_is_hier_inEN5boost13intrusive_ptrIN3pmt8pmt_baseE
  40              		.align 2
  41              		.p2align 4,,15
  42              		.weak	_ZN2gr11basic_block23message_port_is_hier_inEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE
  44              	_ZN2gr11basic_block23message_port_is_hier_inEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE:
  45              	.LFB8691:
 191:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     virtual bool message_port_is_hier_in(pmt::pmt_t port_id) { (void) port_id; return false; }
  46              		.loc 2 191 0
  47              		.cfi_startproc
  48              	.LVL3:
  49              		.loc 2 191 0
  50 0000 31C0     		xorl	%eax, %eax
  51 0002 C3       		ret
  52              		.cfi_endproc
  53              	.LFE8691:
  55              		.section	.text._ZN2gr11basic_block24message_port_is_hier_outEN5boost13intrusive_ptrIN3pmt8pmt_base
  56              		.align 2
  57              		.p2align 4,,15
  58              		.weak	_ZN2gr11basic_block24message_port_is_hier_outEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE
  60              	_ZN2gr11basic_block24message_port_is_hier_outEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE:
  61              	.LFB8692:
 192:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     virtual bool message_port_is_hier_out(pmt::pmt_t port_id) { (void) port_id; return false; }
  62              		.loc 2 192 0
  63              		.cfi_startproc
  64              	.LVL4:
  65              		.loc 2 192 0
  66 0000 31C0     		xorl	%eax, %eax
  67 0002 C3       		ret
  68              		.cfi_endproc
  69              	.LFE8692:
  71              		.section	.text._ZN2gr11basic_block9setup_rpcEv,"axG",@progbits,_ZN2gr11basic_block9setup_rpcEv,com
  72              		.align 2
  73              		.p2align 4,,15
  74              		.weak	_ZN2gr11basic_block9setup_rpcEv
  76              	_ZN2gr11basic_block9setup_rpcEv:
  77              	.LFB8702:
 193:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 194:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     /*!
 195:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * \brief Get input message port names.
 196:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      *
 197:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * Returns the available input message ports for a block. The
 198:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * return object is a PMT vector that is filled with PMT symbols.
 199:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      */
 200:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     pmt::pmt_t message_ports_in();
 201:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 202:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     /*!
 203:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * \brief Get output message port names.
 204:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      *
 205:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * Returns the available output message ports for a block. The
GAS LISTING /tmp/ccvmoMuv.s 			page 8


 206:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * return object is a PMT vector that is filled with PMT symbols.
 207:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      */
 208:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     pmt::pmt_t message_ports_out();
 209:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 210:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     /*!
 211:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * Accept msg, place in queue, arrange for thread to be awakened if it's not already.
 212:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      */
 213:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     void _post(pmt::pmt_t which_port, pmt::pmt_t msg);
 214:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 215:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     //! is the queue empty?
 216:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     bool empty_p(pmt::pmt_t which_port) {
 217:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       if(msg_queue.find(which_port) == msg_queue.end())
 218:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****         throw std::runtime_error("port does not exist!");
 219:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       return msg_queue[which_port].empty();
 220:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     }
 221:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     bool empty_p() {
 222:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       bool rv = true;
 223:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       BOOST_FOREACH(msg_queue_map_t::value_type &i, msg_queue) {
 224:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****         rv &= msg_queue[i.first].empty();
 225:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       }
 226:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       return rv;
 227:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     }
 228:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 229:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     //! are all msg ports with handlers empty?
 230:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     bool empty_handled_p(pmt::pmt_t which_port){
 231:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****         return (empty_p(which_port) || !has_msg_handler(which_port));
 232:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     }
 233:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     bool empty_handled_p() {
 234:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       bool rv = true;
 235:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       BOOST_FOREACH(msg_queue_map_t::value_type &i, msg_queue) {
 236:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****         rv &= empty_handled_p(i.first);
 237:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       }
 238:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       return rv;
 239:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     }
 240:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 241:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     //! How many messages in the queue?
 242:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     size_t nmsgs(pmt::pmt_t which_port) {
 243:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       if(msg_queue.find(which_port) == msg_queue.end())
 244:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****         throw std::runtime_error("port does not exist!");
 245:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       return msg_queue[which_port].size();
 246:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     }
 247:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 248:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     //| Acquires and release the mutex
 249:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     void insert_tail( pmt::pmt_t which_port, pmt::pmt_t msg);
 250:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     /*!
 251:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * \returns returns pmt at head of queue or pmt::pmt_t() if empty.
 252:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      */
 253:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     pmt::pmt_t delete_head_nowait( pmt::pmt_t which_port);
 254:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 255:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     /*!
 256:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * \param[in] which_port The message port from which to get the message.
 257:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * \param[in] millisec Optional timeout value (0=no timeout).
 258:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * \returns returns pmt at head of queue or pmt::pmt_t() if empty.
 259:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      */
 260:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     pmt::pmt_t delete_head_blocking(pmt::pmt_t which_port, unsigned int millisec = 0);
 261:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 262:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     msg_queue_t::iterator get_iterator(pmt::pmt_t which_port) {
GAS LISTING /tmp/ccvmoMuv.s 			page 9


 263:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       return msg_queue[which_port].begin();
 264:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     }
 265:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 266:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     void erase_msg(pmt::pmt_t which_port, msg_queue_t::iterator it) {
 267:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       msg_queue[which_port].erase(it);
 268:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     }
 269:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 270:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     virtual bool has_msg_port(pmt::pmt_t which_port) {
 271:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       if(msg_queue.find(which_port) != msg_queue.end()) {
 272:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****         return true;
 273:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       }
 274:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       if(pmt::dict_has_key(d_message_subscribers, which_port)) {
 275:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****         return true;
 276:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       }
 277:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       return false;
 278:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     }
 279:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 280:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     const msg_queue_map_t& get_msg_map(void) const {
 281:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       return msg_queue;
 282:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     }
 283:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 284:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** #ifdef GR_CTRLPORT
 285:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     /*!
 286:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * \brief Add an RPC variable (get or set).
 287:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      *
 288:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * Using controlport, we create new getters/setters and need to
 289:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * store them. Each block has a vector to do this, and these never
 290:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * need to be accessed again once they are registered with the RPC
 291:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * backend. This function takes a
 292:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * boost::shared_sptr<rpcbasic_base> so that when the block is
 293:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * deleted, all RPC registered variables are cleaned up.
 294:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      *
 295:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * \param s an rpcbasic_sptr of the new RPC variable register to store.
 296:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      */
 297:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     void add_rpc_variable(rpcbasic_sptr s)
 298:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     {
 299:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       d_rpc_vars.push_back(s);
 300:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     }
 301:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** #endif /* GR_CTRLPORT */
 302:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 303:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     /*!
 304:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * \brief Set up the RPC registered variables.
 305:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      *
 306:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * This must be overloaded by a block that wants to use
 307:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * controlport. This is where rpcbasic_register_{get,set} pointers
 308:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * are created, which then get wrapped as shared pointers
 309:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * (rpcbasic_sptr(...)) and stored using add_rpc_variable.
 310:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      */
 311:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     virtual void setup_rpc() {};
  78              		.loc 2 311 0
  79              		.cfi_startproc
  80              	.LVL5:
  81 0000 F3C3     		rep ret
  82              		.cfi_endproc
  83              	.LFE8702:
  85              		.section	.text._ZN2gr11basic_block14check_topologyEii,"axG",@progbits,_ZN2gr11basic_block14check_t
  86              		.align 2
GAS LISTING /tmp/ccvmoMuv.s 			page 10


  87              		.p2align 4,,15
  88              		.weak	_ZN2gr11basic_block14check_topologyEii
  90              	_ZN2gr11basic_block14check_topologyEii:
  91              	.LFB8705:
 312:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 313:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     /*!
 314:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * \brief Ask if this block has been registered to the RPC.
 315:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      *
 316:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * We can only register a block once, so we use this to protect us
 317:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * from calling it multiple times.
 318:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      */
 319:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     bool is_rpc_set() { return d_rpc_set; }
 320:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 321:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     /*!
 322:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * \brief When the block is registered with the RPC, set this.
 323:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      */
 324:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     void rpc_set() { d_rpc_set = true; }
 325:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 326:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     /*!
 327:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * \brief Confirm that ninputs and noutputs is an acceptable combination.
 328:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      *
 329:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * \param ninputs	number of input streams connected
 330:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * \param noutputs	number of output streams connected
 331:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      *
 332:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * \returns true if this is a valid configuration for this block.
 333:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      *
 334:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * This function is called by the runtime system whenever the
 335:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * topology changes. Most classes do not need to override this.
 336:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * This check is in addition to the constraints specified by the
 337:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      * input and output gr::io_signatures.
 338:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****      */
 339:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     virtual bool check_topology(int ninputs, int noutputs) {
  92              		.loc 2 339 0
  93              		.cfi_startproc
  94              	.LVL6:
 340:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       (void)ninputs;
 341:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       (void)noutputs;
 342:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       return true;
 343:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     }
  95              		.loc 2 343 0
  96 0000 B8010000 		movl	$1, %eax
  96      00
  97 0005 C3       		ret
  98              		.cfi_endproc
  99              	.LFE8705:
 101              		.section	.text._ZNK5boost16exception_detail25error_info_container_impl7add_refEv,"axG",@progbits,_
 102              		.align 2
 103              		.p2align 4,,15
 104              		.weak	_ZNK5boost16exception_detail25error_info_container_impl7add_refEv
 106              	_ZNK5boost16exception_detail25error_info_container_impl7add_refEv:
 107              	.LFB9852:
 108              		.file 3 "/usr/include/boost/exception/info.hpp"
   1:/usr/include/boost/exception/info.hpp **** //Copyright (c) 2006-2010 Emil Dotchevski and Reverge Studios, Inc.
   2:/usr/include/boost/exception/info.hpp **** 
   3:/usr/include/boost/exception/info.hpp **** //Distributed under the Boost Software License, Version 1.0. (See accompanying
   4:/usr/include/boost/exception/info.hpp **** //file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
   5:/usr/include/boost/exception/info.hpp **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 11


   6:/usr/include/boost/exception/info.hpp **** #ifndef UUID_8D22C4CA9CC811DCAA9133D256D89593
   7:/usr/include/boost/exception/info.hpp **** #define UUID_8D22C4CA9CC811DCAA9133D256D89593
   8:/usr/include/boost/exception/info.hpp **** #if (__GNUC__*100+__GNUC_MINOR__>301) && !defined(BOOST_EXCEPTION_ENABLE_WARNINGS)
   9:/usr/include/boost/exception/info.hpp **** #pragma GCC system_header
  10:/usr/include/boost/exception/info.hpp **** #endif
  11:/usr/include/boost/exception/info.hpp **** #if defined(_MSC_VER) && !defined(BOOST_EXCEPTION_ENABLE_WARNINGS)
  12:/usr/include/boost/exception/info.hpp **** #pragma warning(push,1)
  13:/usr/include/boost/exception/info.hpp **** #endif
  14:/usr/include/boost/exception/info.hpp **** 
  15:/usr/include/boost/exception/info.hpp **** #include <boost/exception/exception.hpp>
  16:/usr/include/boost/exception/info.hpp **** #include <boost/exception/to_string_stub.hpp>
  17:/usr/include/boost/exception/info.hpp **** #include <boost/exception/detail/error_info_impl.hpp>
  18:/usr/include/boost/exception/info.hpp **** #include <boost/shared_ptr.hpp>
  19:/usr/include/boost/exception/info.hpp **** #include <boost/config.hpp>
  20:/usr/include/boost/exception/info.hpp **** #include <map>
  21:/usr/include/boost/exception/info.hpp **** 
  22:/usr/include/boost/exception/info.hpp **** namespace
  23:/usr/include/boost/exception/info.hpp **** boost
  24:/usr/include/boost/exception/info.hpp ****     {
  25:/usr/include/boost/exception/info.hpp ****     template <class Tag,class T>
  26:/usr/include/boost/exception/info.hpp ****     inline
  27:/usr/include/boost/exception/info.hpp ****     std::string
  28:/usr/include/boost/exception/info.hpp ****     error_info_name( error_info<Tag,T> const & x )
  29:/usr/include/boost/exception/info.hpp ****         {
  30:/usr/include/boost/exception/info.hpp ****         return tag_type_name<Tag>();
  31:/usr/include/boost/exception/info.hpp ****         }
  32:/usr/include/boost/exception/info.hpp **** 
  33:/usr/include/boost/exception/info.hpp ****     template <class Tag,class T>
  34:/usr/include/boost/exception/info.hpp ****     inline
  35:/usr/include/boost/exception/info.hpp ****     std::string
  36:/usr/include/boost/exception/info.hpp ****     to_string( error_info<Tag,T> const & x )
  37:/usr/include/boost/exception/info.hpp ****         {
  38:/usr/include/boost/exception/info.hpp ****         return '[' + error_info_name(x) + "] = " + to_string_stub(x.value()) + '\n';
  39:/usr/include/boost/exception/info.hpp ****         }
  40:/usr/include/boost/exception/info.hpp **** 
  41:/usr/include/boost/exception/info.hpp ****     template <class Tag,class T>
  42:/usr/include/boost/exception/info.hpp ****     inline
  43:/usr/include/boost/exception/info.hpp ****     error_info<Tag,T>::
  44:/usr/include/boost/exception/info.hpp ****     error_info( value_type const & value ):
  45:/usr/include/boost/exception/info.hpp ****         value_(value)
  46:/usr/include/boost/exception/info.hpp ****         {
  47:/usr/include/boost/exception/info.hpp ****         }
  48:/usr/include/boost/exception/info.hpp **** 
  49:/usr/include/boost/exception/info.hpp **** #ifndef BOOST_NO_CXX11_RVALUE_REFERENCES
  50:/usr/include/boost/exception/info.hpp **** 	template <class Tag,class T>
  51:/usr/include/boost/exception/info.hpp ****     inline
  52:/usr/include/boost/exception/info.hpp ****     error_info<Tag,T>::
  53:/usr/include/boost/exception/info.hpp **** 	error_info( error_info const & x ):
  54:/usr/include/boost/exception/info.hpp **** 		value_(x.value_)
  55:/usr/include/boost/exception/info.hpp **** 		{
  56:/usr/include/boost/exception/info.hpp **** 		}
  57:/usr/include/boost/exception/info.hpp ****     template <class Tag,class T>
  58:/usr/include/boost/exception/info.hpp ****     inline
  59:/usr/include/boost/exception/info.hpp ****     error_info<Tag,T>::
  60:/usr/include/boost/exception/info.hpp **** 	error_info( value_type && value ) BOOST_NOEXCEPT_IF(BOOST_NOEXCEPT_EXPR(value_type(std::move(value
  61:/usr/include/boost/exception/info.hpp **** 		value_(std::move(value))
  62:/usr/include/boost/exception/info.hpp **** 		{
GAS LISTING /tmp/ccvmoMuv.s 			page 12


  63:/usr/include/boost/exception/info.hpp **** 		}
  64:/usr/include/boost/exception/info.hpp **** 	template <class Tag,class T>
  65:/usr/include/boost/exception/info.hpp ****     inline
  66:/usr/include/boost/exception/info.hpp ****     error_info<Tag,T>::
  67:/usr/include/boost/exception/info.hpp **** 	error_info( error_info && x ) BOOST_NOEXCEPT_IF(BOOST_NOEXCEPT_EXPR(value_type(std::move(x.value_)
  68:/usr/include/boost/exception/info.hpp **** 		value_(std::move(x.value_))
  69:/usr/include/boost/exception/info.hpp **** 		{
  70:/usr/include/boost/exception/info.hpp **** 		}
  71:/usr/include/boost/exception/info.hpp **** #endif
  72:/usr/include/boost/exception/info.hpp **** 
  73:/usr/include/boost/exception/info.hpp ****     template <class Tag,class T>
  74:/usr/include/boost/exception/info.hpp ****     inline
  75:/usr/include/boost/exception/info.hpp ****     error_info<Tag,T>::
  76:/usr/include/boost/exception/info.hpp ****     ~error_info() throw()
  77:/usr/include/boost/exception/info.hpp ****         {
  78:/usr/include/boost/exception/info.hpp ****         }
  79:/usr/include/boost/exception/info.hpp **** 
  80:/usr/include/boost/exception/info.hpp ****     template <class Tag,class T>
  81:/usr/include/boost/exception/info.hpp ****     inline
  82:/usr/include/boost/exception/info.hpp ****     std::string
  83:/usr/include/boost/exception/info.hpp ****     error_info<Tag,T>::
  84:/usr/include/boost/exception/info.hpp ****     name_value_string() const
  85:/usr/include/boost/exception/info.hpp ****         {
  86:/usr/include/boost/exception/info.hpp ****         return to_string_stub(*this);
  87:/usr/include/boost/exception/info.hpp ****         }
  88:/usr/include/boost/exception/info.hpp **** 
  89:/usr/include/boost/exception/info.hpp ****     namespace
  90:/usr/include/boost/exception/info.hpp ****     exception_detail
  91:/usr/include/boost/exception/info.hpp ****         {
  92:/usr/include/boost/exception/info.hpp ****         class
  93:/usr/include/boost/exception/info.hpp ****         error_info_container_impl:
  94:/usr/include/boost/exception/info.hpp ****             public error_info_container
  95:/usr/include/boost/exception/info.hpp ****             {
  96:/usr/include/boost/exception/info.hpp ****             public:
  97:/usr/include/boost/exception/info.hpp **** 
  98:/usr/include/boost/exception/info.hpp ****             error_info_container_impl():
  99:/usr/include/boost/exception/info.hpp ****                 count_(0)
 100:/usr/include/boost/exception/info.hpp ****                 {
 101:/usr/include/boost/exception/info.hpp ****                 }
 102:/usr/include/boost/exception/info.hpp **** 
 103:/usr/include/boost/exception/info.hpp ****             ~error_info_container_impl() throw()
 104:/usr/include/boost/exception/info.hpp ****                 {
 105:/usr/include/boost/exception/info.hpp ****                 }
 106:/usr/include/boost/exception/info.hpp **** 
 107:/usr/include/boost/exception/info.hpp ****             void
 108:/usr/include/boost/exception/info.hpp ****             set( shared_ptr<error_info_base> const & x, type_info_ const & typeid_ )
 109:/usr/include/boost/exception/info.hpp ****                 {
 110:/usr/include/boost/exception/info.hpp ****                 BOOST_ASSERT(x);
 111:/usr/include/boost/exception/info.hpp ****                 info_[typeid_] = x;
 112:/usr/include/boost/exception/info.hpp ****                 diagnostic_info_str_.clear();
 113:/usr/include/boost/exception/info.hpp ****                 }
 114:/usr/include/boost/exception/info.hpp **** 
 115:/usr/include/boost/exception/info.hpp ****             shared_ptr<error_info_base>
 116:/usr/include/boost/exception/info.hpp ****             get( type_info_ const & ti ) const
 117:/usr/include/boost/exception/info.hpp ****                 {
 118:/usr/include/boost/exception/info.hpp ****                 error_info_map::const_iterator i=info_.find(ti);
 119:/usr/include/boost/exception/info.hpp ****                 if( info_.end()!=i )
GAS LISTING /tmp/ccvmoMuv.s 			page 13


 120:/usr/include/boost/exception/info.hpp ****                     {
 121:/usr/include/boost/exception/info.hpp ****                     shared_ptr<error_info_base> const & p = i->second;
 122:/usr/include/boost/exception/info.hpp **** #ifndef BOOST_NO_RTTI
 123:/usr/include/boost/exception/info.hpp ****                     BOOST_ASSERT( *BOOST_EXCEPTION_DYNAMIC_TYPEID(*p).type_==*ti.type_ );
 124:/usr/include/boost/exception/info.hpp **** #endif
 125:/usr/include/boost/exception/info.hpp ****                     return p;
 126:/usr/include/boost/exception/info.hpp ****                     }
 127:/usr/include/boost/exception/info.hpp ****                 return shared_ptr<error_info_base>();
 128:/usr/include/boost/exception/info.hpp ****                 }
 129:/usr/include/boost/exception/info.hpp **** 
 130:/usr/include/boost/exception/info.hpp ****             char const *
 131:/usr/include/boost/exception/info.hpp ****             diagnostic_information( char const * header ) const
 132:/usr/include/boost/exception/info.hpp ****                 {
 133:/usr/include/boost/exception/info.hpp ****                 if( header )
 134:/usr/include/boost/exception/info.hpp ****                     {
 135:/usr/include/boost/exception/info.hpp ****                     std::ostringstream tmp;
 136:/usr/include/boost/exception/info.hpp ****                     tmp << header;
 137:/usr/include/boost/exception/info.hpp ****                     for( error_info_map::const_iterator i=info_.begin(),end=info_.end(); i!=end; ++
 138:/usr/include/boost/exception/info.hpp ****                         {
 139:/usr/include/boost/exception/info.hpp ****                         error_info_base const & x = *i->second;
 140:/usr/include/boost/exception/info.hpp ****                         tmp << x.name_value_string();
 141:/usr/include/boost/exception/info.hpp ****                         }
 142:/usr/include/boost/exception/info.hpp ****                     tmp.str().swap(diagnostic_info_str_);
 143:/usr/include/boost/exception/info.hpp ****                     }
 144:/usr/include/boost/exception/info.hpp ****                 return diagnostic_info_str_.c_str();
 145:/usr/include/boost/exception/info.hpp ****                 }
 146:/usr/include/boost/exception/info.hpp **** 
 147:/usr/include/boost/exception/info.hpp ****             private:
 148:/usr/include/boost/exception/info.hpp **** 
 149:/usr/include/boost/exception/info.hpp ****             friend class boost::exception;
 150:/usr/include/boost/exception/info.hpp **** 
 151:/usr/include/boost/exception/info.hpp ****             typedef std::map< type_info_, shared_ptr<error_info_base> > error_info_map;
 152:/usr/include/boost/exception/info.hpp ****             error_info_map info_;
 153:/usr/include/boost/exception/info.hpp ****             mutable std::string diagnostic_info_str_;
 154:/usr/include/boost/exception/info.hpp ****             mutable int count_;
 155:/usr/include/boost/exception/info.hpp **** 
 156:/usr/include/boost/exception/info.hpp ****             error_info_container_impl( error_info_container_impl const & );
 157:/usr/include/boost/exception/info.hpp ****             error_info_container_impl & operator=( error_info_container const & );
 158:/usr/include/boost/exception/info.hpp **** 
 159:/usr/include/boost/exception/info.hpp ****             void
 160:/usr/include/boost/exception/info.hpp ****             add_ref() const
 109              		.loc 3 160 0
 110              		.cfi_startproc
 111              	.LVL7:
 161:/usr/include/boost/exception/info.hpp ****                 {
 162:/usr/include/boost/exception/info.hpp ****                 ++count_;
 112              		.loc 3 162 0
 113 0000 83475801 		addl	$1, 88(%rdi)
 114 0004 C3       		ret
 115              		.cfi_endproc
 116              	.LFE9852:
 118              		.section	.text._ZNK2gr5lfast12costas2_impl16phase_detector_2ESt7complexIfE,"axG",@progbits,_ZNK2gr
 119              		.align 2
 120              		.p2align 4,,15
 121              		.weak	_ZNK2gr5lfast12costas2_impl16phase_detector_2ESt7complexIfE
 123              	_ZNK2gr5lfast12costas2_impl16phase_detector_2ESt7complexIfE:
 124              	.LFB10982:
GAS LISTING /tmp/ccvmoMuv.s 			page 14


 125              		.file 4 "costas2_impl.h"
   1:costas2_impl.h **** /* -*- c++ -*- */
   2:costas2_impl.h **** /* 
   3:costas2_impl.h ****  * Copyright 2017 ghostop14.
   4:costas2_impl.h ****  * 
   5:costas2_impl.h ****  * This is free software; you can redistribute it and/or modify
   6:costas2_impl.h ****  * it under the terms of the GNU General Public License as published by
   7:costas2_impl.h ****  * the Free Software Foundation; either version 3, or (at your option)
   8:costas2_impl.h ****  * any later version.
   9:costas2_impl.h ****  * 
  10:costas2_impl.h ****  * This software is distributed in the hope that it will be useful,
  11:costas2_impl.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:costas2_impl.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:costas2_impl.h ****  * GNU General Public License for more details.
  14:costas2_impl.h ****  * 
  15:costas2_impl.h ****  * You should have received a copy of the GNU General Public License
  16:costas2_impl.h ****  * along with this software; see the file COPYING.  If not, write to
  17:costas2_impl.h ****  * the Free Software Foundation, Inc., 51 Franklin Street,
  18:costas2_impl.h ****  * Boston, MA 02110-1301, USA.
  19:costas2_impl.h ****  */
  20:costas2_impl.h **** 
  21:costas2_impl.h **** #ifndef INCLUDED_LFAST_COSTAS2_IMPL_H
  22:costas2_impl.h **** #define INCLUDED_LFAST_COSTAS2_IMPL_H
  23:costas2_impl.h **** 
  24:costas2_impl.h **** #include <lfast/costas2.h>
  25:costas2_impl.h **** 
  26:costas2_impl.h **** namespace gr {
  27:costas2_impl.h ****   namespace lfast {
  28:costas2_impl.h **** 
  29:costas2_impl.h ****     class costas2_impl : public costas2
  30:costas2_impl.h ****     {
  31:costas2_impl.h ****      private:
  32:costas2_impl.h ****        int d_order;
  33:costas2_impl.h ****        float d_error;
  34:costas2_impl.h ****        float d_noise;
  35:costas2_impl.h **** 
  36:costas2_impl.h ****        float
  37:costas2_impl.h ****        phase_detector_2(gr_complex sample) const
 126              		.loc 4 37 0
 127              		.cfi_startproc
 128              	.LVL8:
 129              		.loc 4 37 0
 130 0000 660FD644 		movq	%xmm0, -8(%rsp)
 130      24F8
  38:costas2_impl.h ****        {
  39:costas2_impl.h ****          return (sample.real()*sample.imag());
 131              		.loc 4 39 0
 132 0006 F30F1044 		movss	-4(%rsp), %xmm0
 132      24FC
 133              	.LVL9:
 134 000c F30F5944 		mulss	-8(%rsp), %xmm0
 134      24F8
  40:costas2_impl.h ****        }
 135              		.loc 4 40 0
 136 0012 C3       		ret
 137              		.cfi_endproc
 138              	.LFE10982:
GAS LISTING /tmp/ccvmoMuv.s 			page 15


 140              		.text
 141              		.align 2
 142              		.p2align 4,,15
 143              		.globl	_ZNK2gr5lfast12costas2_impl5errorEv
 145              	_ZNK2gr5lfast12costas2_impl5errorEv:
 146              	.LFB11027:
 147              		.file 5 "costas2_impl.cc"
   1:costas2_impl.cc **** /* -*- c++ -*- */
   2:costas2_impl.cc **** /* 
   3:costas2_impl.cc ****  * Copyright 2017 ghostop14.
   4:costas2_impl.cc ****  * 
   5:costas2_impl.cc ****  * This is free software; you can redistribute it and/or modify
   6:costas2_impl.cc ****  * it under the terms of the GNU General Public License as published by
   7:costas2_impl.cc ****  * the Free Software Foundation; either version 3, or (at your option)
   8:costas2_impl.cc ****  * any later version.
   9:costas2_impl.cc ****  * 
  10:costas2_impl.cc ****  * This software is distributed in the hope that it will be useful,
  11:costas2_impl.cc ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:costas2_impl.cc ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:costas2_impl.cc ****  * GNU General Public License for more details.
  14:costas2_impl.cc ****  * 
  15:costas2_impl.cc ****  * You should have received a copy of the GNU General Public License
  16:costas2_impl.cc ****  * along with this software; see the file COPYING.  If not, write to
  17:costas2_impl.cc ****  * the Free Software Foundation, Inc., 51 Franklin Street,
  18:costas2_impl.cc ****  * Boston, MA 02110-1301, USA.
  19:costas2_impl.cc ****  */
  20:costas2_impl.cc **** 
  21:costas2_impl.cc **** 
  22:costas2_impl.cc **** //  Note:  To compile and generate intermingled assembly, use this command:
  23:costas2_impl.cc **** // gcc -I $Gnuradio_DIR/include -c -g -Wa,-a,-ad costas2_impl.cc > costas2_impl.s
  24:costas2_impl.cc **** // You can add the -mfma  switch to force fma compilation
  25:costas2_impl.cc **** 
  26:costas2_impl.cc **** #ifdef HAVE_CONFIG_H
  27:costas2_impl.cc **** #include "config.h"
  28:costas2_impl.cc **** #endif
  29:costas2_impl.cc **** 
  30:costas2_impl.cc **** #include <gnuradio/io_signature.h>
  31:costas2_impl.cc **** #include "costas2_impl.h"
  32:costas2_impl.cc **** #include <gnuradio/sincos.h>
  33:costas2_impl.cc **** #include <gnuradio/expj.h>
  34:costas2_impl.cc **** #include <gnuradio/math.h>
  35:costas2_impl.cc **** #include "clSComplex.h"
  36:costas2_impl.cc **** 
  37:costas2_impl.cc **** #define CL_TWO_PI 6.28318530717958647692
  38:costas2_impl.cc **** #define CL_MINUS_TWO_PI -6.28318530717958647692
  39:costas2_impl.cc **** 
  40:costas2_impl.cc **** // assisted detection of Fused Multiply Add (FMA) functionality
  41:costas2_impl.cc **** #if !defined(__FMA__) && defined(__AVX2__)
  42:costas2_impl.cc **** #define __FMA__ 1
  43:costas2_impl.cc **** #endif
  44:costas2_impl.cc **** 
  45:costas2_impl.cc **** #if defined(FP_FAST_FMA)
  46:costas2_impl.cc **** #define __FMA__ 1
  47:costas2_impl.cc **** #endif
  48:costas2_impl.cc **** 
  49:costas2_impl.cc **** #if defined(__FMA__)
  50:costas2_impl.cc **** #pragma message "FMA support detected.  Compiling for Fused Multiply/Add support."
GAS LISTING /tmp/ccvmoMuv.s 			page 16


  51:costas2_impl.cc **** #else
  52:costas2_impl.cc **** #pragma message "No FMA support detected.  Compiling for normal math."
  53:costas2_impl.cc **** #endif
  54:costas2_impl.cc **** 
  55:costas2_impl.cc **** namespace gr {
  56:costas2_impl.cc ****   namespace lfast {
  57:costas2_impl.cc **** 
  58:costas2_impl.cc ****     costas2::sptr
  59:costas2_impl.cc ****     costas2::make(float loop_bw, int order)
  60:costas2_impl.cc ****     {
  61:costas2_impl.cc ****       return gnuradio::get_initial_sptr
  62:costas2_impl.cc ****         (new costas2_impl(loop_bw, order));
  63:costas2_impl.cc ****     }
  64:costas2_impl.cc **** 
  65:costas2_impl.cc ****     /*
  66:costas2_impl.cc ****      * The private constructor
  67:costas2_impl.cc ****      */
  68:costas2_impl.cc ****     costas2_impl::costas2_impl(float loop_bw, int order)
  69:costas2_impl.cc ****       : gr::sync_block("costas2",
  70:costas2_impl.cc ****               gr::io_signature::make(1, 1, sizeof(gr_complex)),
  71:costas2_impl.cc ****               gr::io_signature::make(1, 1, sizeof(gr_complex))),
  72:costas2_impl.cc **** 			  blocks::control_loop(loop_bw, 1.0, -1.0),
  73:costas2_impl.cc **** 			  d_order(order), d_error(0), d_noise(1.0), d_phase_detector(NULL)
  74:costas2_impl.cc ****     {
  75:costas2_impl.cc ****     	// Only set up for 2nd order right now.
  76:costas2_impl.cc ****         d_phase_detector = &costas2_impl::phase_detector_2;
  77:costas2_impl.cc **** /*
  78:costas2_impl.cc ****         message_port_register_in(pmt::mp("noise"));
  79:costas2_impl.cc ****         set_msg_handler(
  80:costas2_impl.cc ****           pmt::mp("noise"),
  81:costas2_impl.cc ****           boost::bind(&costas2_impl::handle_set_noise,
  82:costas2_impl.cc ****                       this, _1));
  83:costas2_impl.cc **** */
  84:costas2_impl.cc ****     }
  85:costas2_impl.cc **** 
  86:costas2_impl.cc ****     /*
  87:costas2_impl.cc ****      * Our virtual destructor.
  88:costas2_impl.cc ****      */
  89:costas2_impl.cc ****     costas2_impl::~costas2_impl()
  90:costas2_impl.cc ****     {
  91:costas2_impl.cc ****     }
  92:costas2_impl.cc **** 
  93:costas2_impl.cc ****     float
  94:costas2_impl.cc ****     costas2_impl::error() const
  95:costas2_impl.cc ****     {
 148              		.loc 5 95 0
 149              		.cfi_startproc
 150              	.LVL10:
  96:costas2_impl.cc ****       return d_error;
 151              		.loc 5 96 0
 152 0000 F30F1047 		movss	12(%rdi), %xmm0
 152      0C
  97:costas2_impl.cc ****     }
 153              		.loc 5 97 0
 154 0005 C3       		ret
 155              		.cfi_endproc
 156              	.LFE11027:
GAS LISTING /tmp/ccvmoMuv.s 			page 17


 158              		.align 2
 159 0006 662E0F1F 		.p2align 4,,15
 159      84000000 
 159      0000
 160              		.globl	_ZN2gr5lfast12costas2_impl9setup_rpcEv
 162              	_ZN2gr5lfast12costas2_impl9setup_rpcEv:
 163              	.LFB11032:
  98:costas2_impl.cc **** 
  99:costas2_impl.cc ****     void
 100:costas2_impl.cc ****     costas2_impl::handle_set_noise(pmt::pmt_t msg)
 101:costas2_impl.cc ****     {
 102:costas2_impl.cc ****       if(pmt::is_real(msg)) {
 103:costas2_impl.cc ****         d_noise = pmt::to_double(msg);
 104:costas2_impl.cc ****         d_noise = powf(10.0f, d_noise/10.0f);
 105:costas2_impl.cc ****       }
 106:costas2_impl.cc ****     }
 107:costas2_impl.cc **** 
 108:costas2_impl.cc ****     int
 109:costas2_impl.cc ****     costas2_impl::work_original(int noutput_items,
 110:costas2_impl.cc **** 			      gr_vector_const_void_star &input_items,
 111:costas2_impl.cc **** 			      gr_vector_void_star &output_items)
 112:costas2_impl.cc ****     {
 113:costas2_impl.cc ****       const gr_complex *iptr = (gr_complex *) input_items[0];
 114:costas2_impl.cc ****       gr_complex *optr = (gr_complex *) output_items[0];
 115:costas2_impl.cc ****       float *foptr = (float *) output_items[1];
 116:costas2_impl.cc **** 
 117:costas2_impl.cc ****       bool write_foptr = output_items.size() >= 2;
 118:costas2_impl.cc **** 
 119:costas2_impl.cc ****       gr_complex nco_out;
 120:costas2_impl.cc ****       float i_r,i_i,n_r,n_i;
 121:costas2_impl.cc **** 
 122:costas2_impl.cc ****       std::vector<tag_t> tags;
 123:costas2_impl.cc ****       /*
 124:costas2_impl.cc ****       get_tags_in_range(tags, 0, nitems_read(0),
 125:costas2_impl.cc ****                         nitems_read(0)+noutput_items,
 126:costas2_impl.cc ****                         pmt::intern("phase_est"));
 127:costas2_impl.cc **** 		*/
 128:costas2_impl.cc ****       if(write_foptr) {
 129:costas2_impl.cc ****         for(int i = 0; i < noutput_items; i++) {
 130:costas2_impl.cc ****           if(tags.size() > 0) {
 131:costas2_impl.cc ****             if(tags[0].offset-nitems_read(0) == (size_t)i) {
 132:costas2_impl.cc ****               d_phase = (float)pmt::to_double(tags[0].value);
 133:costas2_impl.cc ****               tags.erase(tags.begin());
 134:costas2_impl.cc ****             }
 135:costas2_impl.cc ****           }
 136:costas2_impl.cc ****           nco_out = gr_expj(-d_phase);
 137:costas2_impl.cc **** 
 138:costas2_impl.cc ****           optr[i] = iptr[i] * nco_out;
 139:costas2_impl.cc **** 
 140:costas2_impl.cc ****           d_error = phase_detector_2(optr[i]);
 141:costas2_impl.cc ****           d_error = gr::branchless_clip(d_error, 1.0);
 142:costas2_impl.cc **** 
 143:costas2_impl.cc ****           advance_loop(d_error);
 144:costas2_impl.cc ****           phase_wrap();
 145:costas2_impl.cc ****           frequency_limit();
 146:costas2_impl.cc **** 
 147:costas2_impl.cc ****           foptr[i] = d_freq;
GAS LISTING /tmp/ccvmoMuv.s 			page 18


 148:costas2_impl.cc ****         }
 149:costas2_impl.cc ****       }
 150:costas2_impl.cc ****       else {
 151:costas2_impl.cc ****         for(int i = 0; i < noutput_items; i++) {
 152:costas2_impl.cc ****           if(tags.size() > 0) {
 153:costas2_impl.cc ****             if(tags[0].offset-nitems_read(0) == (size_t)i) {
 154:costas2_impl.cc ****               d_phase = (float)pmt::to_double(tags[0].value);
 155:costas2_impl.cc ****               tags.erase(tags.begin());
 156:costas2_impl.cc ****             }
 157:costas2_impl.cc ****           }
 158:costas2_impl.cc ****           // gr_expj does a sine/cosine
 159:costas2_impl.cc ****           // EXPENSIVE LINE
 160:costas2_impl.cc ****           nco_out = gr_expj(-d_phase);
 161:costas2_impl.cc **** 
 162:costas2_impl.cc ****           optr[i] = iptr[i] * nco_out;
 163:costas2_impl.cc **** 
 164:costas2_impl.cc ****           // EXPENSIVE LINE
 165:costas2_impl.cc ****           d_error = (*this.*d_phase_detector)(optr[i]);
 166:costas2_impl.cc ****           d_error = gr::branchless_clip(d_error, 1.0);
 167:costas2_impl.cc **** 
 168:costas2_impl.cc ****           advance_loop(d_error);
 169:costas2_impl.cc ****           phase_wrap();
 170:costas2_impl.cc ****           frequency_limit();
 171:costas2_impl.cc ****         }
 172:costas2_impl.cc ****       }
 173:costas2_impl.cc **** 
 174:costas2_impl.cc ****       return noutput_items;
 175:costas2_impl.cc ****     }
 176:costas2_impl.cc **** 
 177:costas2_impl.cc ****     int
 178:costas2_impl.cc ****     costas2_impl::work_test(int noutput_items,
 179:costas2_impl.cc ****         gr_vector_const_void_star &input_items,
 180:costas2_impl.cc ****         gr_vector_void_star &output_items)
 181:costas2_impl.cc ****     {
 182:costas2_impl.cc ****         // const gr_complex *iptr = (gr_complex *) input_items[0];
 183:costas2_impl.cc ****         // gr_complex *optr = (gr_complex *) output_items[0];
 184:costas2_impl.cc ****         const SComplex *iptr = (SComplex *) input_items[0];
 185:costas2_impl.cc ****         SComplex *optr = (SComplex *) output_items[0];
 186:costas2_impl.cc ****         // gr_complex nco_out;
 187:costas2_impl.cc ****         float i_r,i_i,n_r,n_i,o_r,o_i;
 188:costas2_impl.cc ****         // float x1,x2;
 189:costas2_impl.cc ****         int i;
 190:costas2_impl.cc ****         // float angle_rad,sin,cos;
 191:costas2_impl.cc **** 
 192:costas2_impl.cc ****         // gr_complex nco_out;
 193:costas2_impl.cc **** 
 194:costas2_impl.cc ****         for(i = 0; i < noutput_items; i++) {
 195:costas2_impl.cc ****           // nco_out = gr_expj(-d_phase);
 196:costas2_impl.cc ****       	  // returns this:  nco_out.real = n_r, nco_out.imag = n_i
 197:costas2_impl.cc ****          // Trig functions killing performance.  Tried a number of replacement options but no luck:
 198:costas2_impl.cc ****         	// gnuradio lookup functions - expensive with float_to_fixed in each iteration
 199:costas2_impl.cc ****         	// Tried rolling our own lookup tables - Same performance as straight trig
 200:costas2_impl.cc ****         	// Tried quadratic curve inline approximation - Tiny bit faster
 201:costas2_impl.cc ****        	 // gr::sincosf(-d_phase, &n_i, &n_r);
 202:costas2_impl.cc **** 			n_i = sinf(-d_phase);
 203:costas2_impl.cc **** 			n_r = cosf(-d_phase);
 204:costas2_impl.cc **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 19


 205:costas2_impl.cc ****           //optr[i] = iptr[i] * nco_out;
 206:costas2_impl.cc **** 
 207:costas2_impl.cc ****           // FMA stands for fused multiply-add operations where FMA(a,b,c)=(a*b)+c and it does it a
 208:costas2_impl.cc **** #if defined(__FMA__)
 209:costas2_impl.cc ****           o_r = __builtin_fmaf(iptr[i].real,n_r,-iptr[i].imag*n_i);
 210:costas2_impl.cc ****           o_i = __builtin_fmaf(iptr[i].real,n_i,iptr[i].imag*n_r);
 211:costas2_impl.cc **** #else
 212:costas2_impl.cc ****           i_r = iptr[i].real;
 213:costas2_impl.cc ****           i_i = iptr[i].imag;
 214:costas2_impl.cc ****           o_r = (i_r * n_r) - (i_i*n_i);
 215:costas2_impl.cc ****           o_i = (i_r * n_i) + (i_i * n_r);
 216:costas2_impl.cc **** #endif
 217:costas2_impl.cc **** 
 218:costas2_impl.cc ****           optr[i].real = o_r;
 219:costas2_impl.cc ****           optr[i].imag = o_i;
 220:costas2_impl.cc **** 
 221:costas2_impl.cc ****           //d_error = (*this.*d_phase_detector)(optr[i]);
 222:costas2_impl.cc ****           // 2nd order in-place
 223:costas2_impl.cc ****           d_error = o_r*o_i;
 224:costas2_impl.cc **** 
 225:costas2_impl.cc ****           // d_error = gr::branchless_clip(d_error, 1.0);
 226:costas2_impl.cc ****           /*  Taken out for speed and consolidated
 227:costas2_impl.cc ****           x1 = fabsf(d_error+1);
 228:costas2_impl.cc ****           x2 = fabsf(d_error-1);
 229:costas2_impl.cc ****           x1 -= x2;
 230:costas2_impl.cc ****           d_error = 0.5*x1;
 231:costas2_impl.cc **** 		  */
 232:costas2_impl.cc ****           d_error = 0.5 * (fabsf(d_error+1) - fabsf(d_error-1));
 233:costas2_impl.cc **** 
 234:costas2_impl.cc ****           //advance_loop(d_error);
 235:costas2_impl.cc **** #if defined(__FMA__)
 236:costas2_impl.cc ****           d_freq = __builtin_fmaf(d_beta,d_error,d_freq);
 237:costas2_impl.cc **** #else
 238:costas2_impl.cc ****           d_freq = d_beta * d_error + d_freq;
 239:costas2_impl.cc **** #endif
 240:costas2_impl.cc ****           //d_freq = __builtin_fmaf(d_beta,d_error,d_freq);
 241:costas2_impl.cc ****           // This line is causing one of the greatest performance drops!  100 Msps -> 33 Msps!
 242:costas2_impl.cc **** #if defined(__FMA__)
 243:costas2_impl.cc ****           d_phase += __builtin_fmaf(d_alpha,d_error,d_freq);
 244:costas2_impl.cc **** #else
 245:costas2_impl.cc ****           d_phase = d_alpha * d_error + d_phase + d_freq;
 246:costas2_impl.cc **** #endif
 247:costas2_impl.cc ****           // d_phase = d_phase + d_freq + d_alpha * d_error;
 248:costas2_impl.cc ****           // d_phase = d_phase + __builtin_fmaf(d_alpha,d_error,d_freq);
 249:costas2_impl.cc **** 
 250:costas2_impl.cc ****           //phase_wrap();
 251:costas2_impl.cc ****           if (d_phase > CL_TWO_PI) {
 252:costas2_impl.cc ****   			while(d_phase>CL_TWO_PI) {
 253:costas2_impl.cc ****   			  d_phase -= CL_TWO_PI;
 254:costas2_impl.cc ****   			}
 255:costas2_impl.cc ****           }
 256:costas2_impl.cc ****           else if (d_phase < CL_MINUS_TWO_PI) {
 257:costas2_impl.cc ****   			while(d_phase < CL_MINUS_TWO_PI) {
 258:costas2_impl.cc ****   			  d_phase += CL_TWO_PI;
 259:costas2_impl.cc ****   			}
 260:costas2_impl.cc ****           }
 261:costas2_impl.cc **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 20


 262:costas2_impl.cc ****           //frequency_limit();
 263:costas2_impl.cc ****           if(d_freq > d_max_freq)
 264:costas2_impl.cc ****             d_freq = d_max_freq;
 265:costas2_impl.cc ****           else if(d_freq < d_min_freq)
 266:costas2_impl.cc ****             d_freq = d_min_freq;
 267:costas2_impl.cc **** 
 268:costas2_impl.cc ****         /*
 269:costas2_impl.cc ****          * original code
 270:costas2_impl.cc **** 		nco_out = gr_expj(-d_phase);
 271:costas2_impl.cc **** 		optr[i] = iptr[i] * nco_out;
 272:costas2_impl.cc **** 
 273:costas2_impl.cc **** 		d_error = (*this.*d_phase_detector)(optr[i]);
 274:costas2_impl.cc **** 		d_error = gr::branchless_clip(d_error, 1.0);
 275:costas2_impl.cc **** 
 276:costas2_impl.cc **** 		advance_loop(d_error);
 277:costas2_impl.cc **** 		phase_wrap();
 278:costas2_impl.cc **** 		frequency_limit();
 279:costas2_impl.cc ****          */
 280:costas2_impl.cc **** 
 281:costas2_impl.cc ****         }
 282:costas2_impl.cc **** 
 283:costas2_impl.cc ****         return noutput_items;
 284:costas2_impl.cc ****     }
 285:costas2_impl.cc **** 
 286:costas2_impl.cc ****     int
 287:costas2_impl.cc ****     costas2_impl::work(int noutput_items,
 288:costas2_impl.cc ****         gr_vector_const_void_star &input_items,
 289:costas2_impl.cc ****         gr_vector_void_star &output_items)
 290:costas2_impl.cc ****     {
 291:costas2_impl.cc ****         // const gr_complex *iptr = (gr_complex *) input_items[0];
 292:costas2_impl.cc ****         // gr_complex *optr = (gr_complex *) output_items[0];
 293:costas2_impl.cc ****         const SComplex *iptr = (SComplex *) input_items[0];
 294:costas2_impl.cc ****         SComplex *optr = (SComplex *) output_items[0];
 295:costas2_impl.cc ****         // gr_complex nco_out;
 296:costas2_impl.cc ****         float i_r,i_i,n_r,n_i,o_r,o_i;
 297:costas2_impl.cc ****         // float x1,x2;
 298:costas2_impl.cc ****         int i;
 299:costas2_impl.cc ****         // float angle_rad,sin,cos;
 300:costas2_impl.cc **** 
 301:costas2_impl.cc ****         // gr_complex nco_out;
 302:costas2_impl.cc **** 
 303:costas2_impl.cc ****         for(i = 0; i < noutput_items; i++) {
 304:costas2_impl.cc ****           // nco_out = gr_expj(-d_phase);
 305:costas2_impl.cc ****       	  // returns this:  nco_out.real = n_r, nco_out.imag = n_i
 306:costas2_impl.cc ****          // Trig functions killing performance.  Tried a number of replacement options but no luck:
 307:costas2_impl.cc ****         	// gnuradio lookup functions - expensive with float_to_fixed in each iteration
 308:costas2_impl.cc ****         	// Tried rolling our own lookup tables - Same performance as straight trig
 309:costas2_impl.cc ****         	// Tried quadratic curve inline approximation - Tiny bit faster
 310:costas2_impl.cc ****        	 // gr::sincosf(-d_phase, &n_i, &n_r);
 311:costas2_impl.cc **** 			n_i = sinf(-d_phase);
 312:costas2_impl.cc **** 			n_r = cosf(-d_phase);
 313:costas2_impl.cc **** 
 314:costas2_impl.cc ****           //optr[i] = iptr[i] * nco_out;
 315:costas2_impl.cc **** 
 316:costas2_impl.cc ****           // FMA stands for fused multiply-add operations where FMA(a,b,c)=(a*b)+c and it does it a
 317:costas2_impl.cc **** #if defined(__FMA__)
 318:costas2_impl.cc ****           o_r = __builtin_fmaf(iptr[i].real,n_r,-iptr[i].imag*n_i);
GAS LISTING /tmp/ccvmoMuv.s 			page 21


 319:costas2_impl.cc ****           o_i = __builtin_fmaf(iptr[i].real,n_i,iptr[i].imag*n_r);
 320:costas2_impl.cc **** #else
 321:costas2_impl.cc ****           i_r = iptr[i].real;
 322:costas2_impl.cc ****           i_i = iptr[i].imag;
 323:costas2_impl.cc ****           o_r = (i_r * n_r) - (i_i*n_i);
 324:costas2_impl.cc ****           o_i = (i_r * n_i) + (i_i * n_r);
 325:costas2_impl.cc **** #endif
 326:costas2_impl.cc **** 
 327:costas2_impl.cc ****           optr[i].real = o_r;
 328:costas2_impl.cc ****           optr[i].imag = o_i;
 329:costas2_impl.cc **** 
 330:costas2_impl.cc ****           //d_error = (*this.*d_phase_detector)(optr[i]);
 331:costas2_impl.cc ****           // 2nd order in-place
 332:costas2_impl.cc ****           d_error = o_r*o_i;
 333:costas2_impl.cc **** 
 334:costas2_impl.cc ****           // d_error = gr::branchless_clip(d_error, 1.0);
 335:costas2_impl.cc ****           /*  Taken out for speed and consolidated
 336:costas2_impl.cc ****           x1 = fabsf(d_error+1);
 337:costas2_impl.cc ****           x2 = fabsf(d_error-1);
 338:costas2_impl.cc ****           x1 -= x2;
 339:costas2_impl.cc ****           d_error = 0.5*x1;
 340:costas2_impl.cc **** 		  */
 341:costas2_impl.cc **** 
 342:costas2_impl.cc ****           // d_error = 0.5 * (fabsf(d_error+1) - fabsf(d_error-1));
 343:costas2_impl.cc **** 
 344:costas2_impl.cc ****           // See http://stackoverflow.com/questions/23474796/is-there-a-fast-fabsf-replacement-for-
 345:costas2_impl.cc ****           // for some notes on fabs performance
 346:costas2_impl.cc ****           d_error = 0.5 * (std::abs(d_error+1) - std::abs(d_error-1));
 347:costas2_impl.cc **** 
 348:costas2_impl.cc **** 
 349:costas2_impl.cc ****           //advance_loop(d_error);
 350:costas2_impl.cc **** #if defined(__FMA__)
 351:costas2_impl.cc ****           d_freq = __builtin_fmaf(d_beta,d_error,d_freq);
 352:costas2_impl.cc **** #else
 353:costas2_impl.cc ****           d_freq = d_beta * d_error + d_freq;
 354:costas2_impl.cc **** #endif
 355:costas2_impl.cc ****           //d_freq = __builtin_fmaf(d_beta,d_error,d_freq);
 356:costas2_impl.cc ****           // This line is causing one of the greatest performance drops!  100 Msps -> 33 Msps!
 357:costas2_impl.cc **** #if defined(__FMA__)
 358:costas2_impl.cc ****           d_phase += __builtin_fmaf(d_alpha,d_error,d_freq);
 359:costas2_impl.cc **** #else
 360:costas2_impl.cc ****           d_phase = d_alpha * d_error + d_phase + d_freq;
 361:costas2_impl.cc **** #endif
 362:costas2_impl.cc ****           // d_phase = d_phase + d_freq + d_alpha * d_error;
 363:costas2_impl.cc ****           // d_phase = d_phase + __builtin_fmaf(d_alpha,d_error,d_freq);
 364:costas2_impl.cc **** 
 365:costas2_impl.cc ****           //phase_wrap();
 366:costas2_impl.cc ****           if (d_phase > CL_TWO_PI) {
 367:costas2_impl.cc ****   			while(d_phase>CL_TWO_PI) {
 368:costas2_impl.cc ****   			  d_phase -= CL_TWO_PI;
 369:costas2_impl.cc ****   			}
 370:costas2_impl.cc ****           }
 371:costas2_impl.cc ****           else if (d_phase < CL_MINUS_TWO_PI) {
 372:costas2_impl.cc ****   			while(d_phase < CL_MINUS_TWO_PI) {
 373:costas2_impl.cc ****   			  d_phase += CL_TWO_PI;
 374:costas2_impl.cc ****   			}
 375:costas2_impl.cc ****           }
GAS LISTING /tmp/ccvmoMuv.s 			page 22


 376:costas2_impl.cc **** 
 377:costas2_impl.cc ****           //frequency_limit();
 378:costas2_impl.cc ****           if(d_freq > d_max_freq)
 379:costas2_impl.cc ****             d_freq = d_max_freq;
 380:costas2_impl.cc ****           else if(d_freq < d_min_freq)
 381:costas2_impl.cc ****             d_freq = d_min_freq;
 382:costas2_impl.cc **** 
 383:costas2_impl.cc ****         /*
 384:costas2_impl.cc ****          * original code
 385:costas2_impl.cc **** 		nco_out = gr_expj(-d_phase);
 386:costas2_impl.cc **** 		optr[i] = iptr[i] * nco_out;
 387:costas2_impl.cc **** 
 388:costas2_impl.cc **** 		d_error = (*this.*d_phase_detector)(optr[i]);
 389:costas2_impl.cc **** 		d_error = gr::branchless_clip(d_error, 1.0);
 390:costas2_impl.cc **** 
 391:costas2_impl.cc **** 		advance_loop(d_error);
 392:costas2_impl.cc **** 		phase_wrap();
 393:costas2_impl.cc **** 		frequency_limit();
 394:costas2_impl.cc ****          */
 395:costas2_impl.cc **** 
 396:costas2_impl.cc ****         }
 397:costas2_impl.cc **** 
 398:costas2_impl.cc ****         return noutput_items;
 399:costas2_impl.cc ****     }
 400:costas2_impl.cc **** 
 401:costas2_impl.cc ****     void
 402:costas2_impl.cc ****     costas2_impl::setup_rpc()
 403:costas2_impl.cc ****     {
 164              		.loc 5 403 0
 165              		.cfi_startproc
 166              	.LVL11:
 167 0010 F3C3     		rep ret
 168              		.cfi_endproc
 169              	.LFE11032:
 171              		.set	.LTHUNK11,_ZN2gr5lfast12costas2_impl9setup_rpcEv
 172 0012 0F1F4000 		.p2align 4,,15
 172      662E0F1F 
 172      84000000 
 172      0000
 173              		.globl	_ZTv0_n88_N2gr5lfast12costas2_impl9setup_rpcEv
 175              	_ZTv0_n88_N2gr5lfast12costas2_impl9setup_rpcEv:
 176              	.LFB15998:
  41:costas2_impl.h **** 
  42:costas2_impl.h ****        float (costas2_impl::*d_phase_detector)(gr_complex sample) const;
  43:costas2_impl.h **** 
  44:costas2_impl.h ****      public:
  45:costas2_impl.h ****       costas2_impl(float loop_bw, int order);
  46:costas2_impl.h ****       ~costas2_impl();
  47:costas2_impl.h **** 
  48:costas2_impl.h ****       float error() const;
  49:costas2_impl.h **** 
  50:costas2_impl.h ****       // void printSineError();
  51:costas2_impl.h **** 
  52:costas2_impl.h ****       void handle_set_noise(pmt::pmt_t msg);
  53:costas2_impl.h **** 
  54:costas2_impl.h ****       void setup_rpc();
 177              		.loc 4 54 0
GAS LISTING /tmp/ccvmoMuv.s 			page 23


 178              		.cfi_startproc
 179              		.loc 4 54 0
 180 0020 4C8B17   		movq	(%rdi), %r10
 181 0023 49037AA8 		addq	-88(%r10), %rdi
 182 0027 EBE7     		jmp	.LTHUNK11
 183              		.cfi_endproc
 184              	.LFE15998:
 186              		.section	.text._ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exc
 187              		.align 2
 188              		.p2align 4,,15
 189              		.weak	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EE
 191              	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEED2Ev:
 192              	.LFB15390:
 193              		.file 6 "/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp"
   1:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** #ifndef BOOST_SMART_PTR_DETAIL_SP_COUNTED_IMPL_HPP_INCLUDED
   2:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** #define BOOST_SMART_PTR_DETAIL_SP_COUNTED_IMPL_HPP_INCLUDED
   3:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
   4:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** // MS compatible compilers support #pragma once
   5:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
   6:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** #if defined(_MSC_VER) && (_MSC_VER >= 1020)
   7:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** # pragma once
   8:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** #endif
   9:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
  10:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** //
  11:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** //  detail/sp_counted_impl.hpp
  12:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** //
  13:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** //  Copyright (c) 2001, 2002, 2003 Peter Dimov and Multi Media Ltd.
  14:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** //  Copyright 2004-2005 Peter Dimov
  15:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** //
  16:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** // Distributed under the Boost Software License, Version 1.0. (See
  17:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** // accompanying file LICENSE_1_0.txt or copy at
  18:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** // http://www.boost.org/LICENSE_1_0.txt)
  19:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** //
  20:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
  21:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** #include <boost/config.hpp>
  22:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
  23:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** #if defined(BOOST_SP_USE_STD_ALLOCATOR) && defined(BOOST_SP_USE_QUICK_ALLOCATOR)
  24:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** # error BOOST_SP_USE_STD_ALLOCATOR and BOOST_SP_USE_QUICK_ALLOCATOR are incompatible.
  25:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** #endif
  26:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
  27:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** #include <boost/checked_delete.hpp>
  28:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** #include <boost/smart_ptr/detail/sp_counted_base.hpp>
  29:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
  30:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** #if defined(BOOST_SP_USE_QUICK_ALLOCATOR)
  31:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** #include <boost/smart_ptr/detail/quick_allocator.hpp>
  32:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** #endif
  33:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
  34:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** #if defined(BOOST_SP_USE_STD_ALLOCATOR)
  35:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** #include <memory>           // std::allocator
  36:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** #endif
  37:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
  38:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** #include <cstddef>          // std::size_t
  39:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
  40:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** namespace boost
  41:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** {
  42:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
  43:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
GAS LISTING /tmp/ccvmoMuv.s 			page 24


  44:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
  45:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** void sp_scalar_constructor_hook( void * px, std::size_t size, void * pn );
  46:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** void sp_scalar_destructor_hook( void * px, std::size_t size, void * pn );
  47:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
  48:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** #endif
  49:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
  50:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** namespace detail
  51:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** {
  52:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
  53:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** template<class X> class sp_counted_impl_p: public sp_counted_base
 194              		.loc 6 53 0
 195              		.cfi_startproc
 196              	.LVL12:
 197 0000 F3C3     		rep ret
 198              		.cfi_endproc
 199              	.LFE15390:
 201              		.weak	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EE
 202              		.set	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEE
 203              		.section	.text._ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_all
 204              		.align 2
 205              		.p2align 4,,15
 206              		.weak	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEED2
 208              	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEED2Ev:
 209              	.LFB15394:
 210              		.loc 6 53 0
 211              		.cfi_startproc
 212              	.LVL13:
 213 0000 F3C3     		rep ret
 214              		.cfi_endproc
 215              	.LFE15394:
 217              		.weak	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEED1
 218              		.set	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEED1E
 219              		.section	.text._ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exc
 220              		.align 2
 221              		.p2align 4,,15
 222              		.weak	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EE
 224              	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEE11get
 225              	.LFB15506:
  54:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** {
  55:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** private:
  56:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
  57:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     X * px_;
  58:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
  59:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     sp_counted_impl_p( sp_counted_impl_p const & );
  60:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     sp_counted_impl_p & operator= ( sp_counted_impl_p const & );
  61:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
  62:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     typedef sp_counted_impl_p<X> this_type;
  63:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
  64:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** public:
  65:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
  66:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     explicit sp_counted_impl_p( X * px ): px_( px )
  67:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     {
  68:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
  69:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****         boost::sp_scalar_constructor_hook( px, sizeof(X), this );
  70:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** #endif
  71:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     }
  72:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 25


  73:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     virtual void dispose() // nothrow
  74:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     {
  75:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
  76:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****         boost::sp_scalar_destructor_hook( px_, sizeof(X), this );
  77:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** #endif
  78:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****         boost::checked_delete( px_ );
  79:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     }
  80:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
  81:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     virtual void * get_deleter( sp_typeinfo const & )
 226              		.loc 6 81 0
 227              		.cfi_startproc
 228              	.LVL14:
  82:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     {
  83:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****         return 0;
  84:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     }
 229              		.loc 6 84 0
 230 0000 31C0     		xorl	%eax, %eax
 231 0002 C3       		ret
 232              		.cfi_endproc
 233              	.LFE15506:
 235              		.section	.text._ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exc
 236              		.align 2
 237              		.p2align 4,,15
 238              		.weak	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EE
 240              	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEE19get
 241              	.LFB15507:
  85:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
  86:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     virtual void * get_untyped_deleter()
 242              		.loc 6 86 0
 243              		.cfi_startproc
 244              	.LVL15:
  87:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     {
  88:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****         return 0;
  89:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     }
 245              		.loc 6 89 0
 246 0000 31C0     		xorl	%eax, %eax
 247 0002 C3       		ret
 248              		.cfi_endproc
 249              	.LFE15507:
 251              		.section	.text._ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_all
 252              		.align 2
 253              		.p2align 4,,15
 254              		.weak	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEE11
 256              	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEE11get_del
 257              	.LFB15509:
  81:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     {
 258              		.loc 6 81 0
 259              		.cfi_startproc
 260              	.LVL16:
  84:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
 261              		.loc 6 84 0
 262 0000 31C0     		xorl	%eax, %eax
 263 0002 C3       		ret
 264              		.cfi_endproc
 265              	.LFE15509:
 267              		.section	.text._ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_all
 268              		.align 2
GAS LISTING /tmp/ccvmoMuv.s 			page 26


 269              		.p2align 4,,15
 270              		.weak	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEE19
 272              	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEE19get_unt
 273              	.LFB15510:
  86:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     {
 274              		.loc 6 86 0
 275              		.cfi_startproc
 276              	.LVL17:
 277              		.loc 6 89 0
 278 0000 31C0     		xorl	%eax, %eax
 279 0002 C3       		ret
 280              		.cfi_endproc
 281              	.LFE15510:
 283              		.section	.text._ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exc
 284              		.align 2
 285              		.p2align 4,,15
 286              		.weak	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EE
 288              	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEED0Ev:
 289              	.LFB15392:
  53:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** {
 290              		.loc 6 53 0
 291              		.cfi_startproc
 292              	.LVL18:
  53:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** {
 293              		.loc 6 53 0
 294 0000 BE180000 		movl	$24, %esi
 294      00
 295 0005 E9000000 		jmp	_ZdlPvm@PLT
 295      00
 296              	.LVL19:
 297              		.cfi_endproc
 298              	.LFE15392:
 300              		.section	.text._ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_all
 301              		.align 2
 302              		.p2align 4,,15
 303              		.weak	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEED0
 305              	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEED0Ev:
 306              	.LFB15396:
  53:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** {
 307              		.loc 6 53 0
 308              		.cfi_startproc
 309              	.LVL20:
  53:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** {
 310              		.loc 6 53 0
 311 0000 BE180000 		movl	$24, %esi
 311      00
 312 0005 E9000000 		jmp	_ZdlPvm@PLT
 312      00
 313              	.LVL21:
 314              		.cfi_endproc
 315              	.LFE15396:
 317              		.section	.text._ZNK5boost16exception_detail10clone_implINS0_14bad_exception_EE7rethrowEv,"axG",@pr
 318              		.align 2
 319              		.p2align 4,,15
 320              		.weak	_ZNK5boost16exception_detail10clone_implINS0_14bad_exception_EE7rethrowEv
 322              	_ZNK5boost16exception_detail10clone_implINS0_14bad_exception_EE7rethrowEv:
 323              	.LFB15593:
GAS LISTING /tmp/ccvmoMuv.s 			page 27


 324              		.file 7 "/usr/include/boost/exception/exception.hpp"
   1:/usr/include/boost/exception/exception.hpp **** //Copyright (c) 2006-2009 Emil Dotchevski and Reverge Studios, Inc.
   2:/usr/include/boost/exception/exception.hpp **** 
   3:/usr/include/boost/exception/exception.hpp **** //Distributed under the Boost Software License, Version 1.0. (See accompanying
   4:/usr/include/boost/exception/exception.hpp **** //file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
   5:/usr/include/boost/exception/exception.hpp **** 
   6:/usr/include/boost/exception/exception.hpp **** #ifndef UUID_274DA366004E11DCB1DDFE2E56D89593
   7:/usr/include/boost/exception/exception.hpp **** #define UUID_274DA366004E11DCB1DDFE2E56D89593
   8:/usr/include/boost/exception/exception.hpp **** #if (__GNUC__*100+__GNUC_MINOR__>301) && !defined(BOOST_EXCEPTION_ENABLE_WARNINGS)
   9:/usr/include/boost/exception/exception.hpp **** #pragma GCC system_header
  10:/usr/include/boost/exception/exception.hpp **** #endif
  11:/usr/include/boost/exception/exception.hpp **** #if defined(_MSC_VER) && !defined(BOOST_EXCEPTION_ENABLE_WARNINGS)
  12:/usr/include/boost/exception/exception.hpp **** #pragma warning(push,1)
  13:/usr/include/boost/exception/exception.hpp **** #endif
  14:/usr/include/boost/exception/exception.hpp **** 
  15:/usr/include/boost/exception/exception.hpp **** namespace
  16:/usr/include/boost/exception/exception.hpp **** boost
  17:/usr/include/boost/exception/exception.hpp ****     {
  18:/usr/include/boost/exception/exception.hpp ****     namespace
  19:/usr/include/boost/exception/exception.hpp ****     exception_detail
  20:/usr/include/boost/exception/exception.hpp ****         {
  21:/usr/include/boost/exception/exception.hpp ****         template <class T>
  22:/usr/include/boost/exception/exception.hpp ****         class
  23:/usr/include/boost/exception/exception.hpp ****         refcount_ptr
  24:/usr/include/boost/exception/exception.hpp ****             {
  25:/usr/include/boost/exception/exception.hpp ****             public:
  26:/usr/include/boost/exception/exception.hpp **** 
  27:/usr/include/boost/exception/exception.hpp ****             refcount_ptr():
  28:/usr/include/boost/exception/exception.hpp ****                 px_(0)
  29:/usr/include/boost/exception/exception.hpp ****                 {
  30:/usr/include/boost/exception/exception.hpp ****                 }
  31:/usr/include/boost/exception/exception.hpp **** 
  32:/usr/include/boost/exception/exception.hpp ****             ~refcount_ptr()
  33:/usr/include/boost/exception/exception.hpp ****                 {
  34:/usr/include/boost/exception/exception.hpp ****                 release();
  35:/usr/include/boost/exception/exception.hpp ****                 }
  36:/usr/include/boost/exception/exception.hpp **** 
  37:/usr/include/boost/exception/exception.hpp ****             refcount_ptr( refcount_ptr const & x ):
  38:/usr/include/boost/exception/exception.hpp ****                 px_(x.px_)
  39:/usr/include/boost/exception/exception.hpp ****                 {
  40:/usr/include/boost/exception/exception.hpp ****                 add_ref();
  41:/usr/include/boost/exception/exception.hpp ****                 }
  42:/usr/include/boost/exception/exception.hpp **** 
  43:/usr/include/boost/exception/exception.hpp ****             refcount_ptr &
  44:/usr/include/boost/exception/exception.hpp ****             operator=( refcount_ptr const & x )
  45:/usr/include/boost/exception/exception.hpp ****                 {
  46:/usr/include/boost/exception/exception.hpp ****                 adopt(x.px_);
  47:/usr/include/boost/exception/exception.hpp ****                 return *this;
  48:/usr/include/boost/exception/exception.hpp ****                 }
  49:/usr/include/boost/exception/exception.hpp **** 
  50:/usr/include/boost/exception/exception.hpp ****             void
  51:/usr/include/boost/exception/exception.hpp ****             adopt( T * px )
  52:/usr/include/boost/exception/exception.hpp ****                 {
  53:/usr/include/boost/exception/exception.hpp ****                 release();
  54:/usr/include/boost/exception/exception.hpp ****                 px_=px;
  55:/usr/include/boost/exception/exception.hpp ****                 add_ref();
  56:/usr/include/boost/exception/exception.hpp ****                 }
GAS LISTING /tmp/ccvmoMuv.s 			page 28


  57:/usr/include/boost/exception/exception.hpp **** 
  58:/usr/include/boost/exception/exception.hpp ****             T *
  59:/usr/include/boost/exception/exception.hpp ****             get() const
  60:/usr/include/boost/exception/exception.hpp ****                 {
  61:/usr/include/boost/exception/exception.hpp ****                 return px_;
  62:/usr/include/boost/exception/exception.hpp ****                 }
  63:/usr/include/boost/exception/exception.hpp **** 
  64:/usr/include/boost/exception/exception.hpp ****             private:
  65:/usr/include/boost/exception/exception.hpp **** 
  66:/usr/include/boost/exception/exception.hpp ****             T * px_;
  67:/usr/include/boost/exception/exception.hpp **** 
  68:/usr/include/boost/exception/exception.hpp ****             void
  69:/usr/include/boost/exception/exception.hpp ****             add_ref()
  70:/usr/include/boost/exception/exception.hpp ****                 {
  71:/usr/include/boost/exception/exception.hpp ****                 if( px_ )
  72:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
  73:/usr/include/boost/exception/exception.hpp ****                 }
  74:/usr/include/boost/exception/exception.hpp **** 
  75:/usr/include/boost/exception/exception.hpp ****             void
  76:/usr/include/boost/exception/exception.hpp ****             release()
  77:/usr/include/boost/exception/exception.hpp ****                 {
  78:/usr/include/boost/exception/exception.hpp ****                 if( px_ && px_->release() )
  79:/usr/include/boost/exception/exception.hpp ****                     px_=0;
  80:/usr/include/boost/exception/exception.hpp ****                 }
  81:/usr/include/boost/exception/exception.hpp ****             };
  82:/usr/include/boost/exception/exception.hpp ****         }
  83:/usr/include/boost/exception/exception.hpp **** 
  84:/usr/include/boost/exception/exception.hpp ****     ////////////////////////////////////////////////////////////////////////
  85:/usr/include/boost/exception/exception.hpp **** 
  86:/usr/include/boost/exception/exception.hpp ****     template <class Tag,class T>
  87:/usr/include/boost/exception/exception.hpp ****     class error_info;
  88:/usr/include/boost/exception/exception.hpp **** 
  89:/usr/include/boost/exception/exception.hpp ****     typedef error_info<struct throw_function_,char const *> throw_function;
  90:/usr/include/boost/exception/exception.hpp ****     typedef error_info<struct throw_file_,char const *> throw_file;
  91:/usr/include/boost/exception/exception.hpp ****     typedef error_info<struct throw_line_,int> throw_line;
  92:/usr/include/boost/exception/exception.hpp **** 
  93:/usr/include/boost/exception/exception.hpp ****     template <>
  94:/usr/include/boost/exception/exception.hpp ****     class
  95:/usr/include/boost/exception/exception.hpp ****     error_info<throw_function_,char const *>
  96:/usr/include/boost/exception/exception.hpp ****         {
  97:/usr/include/boost/exception/exception.hpp ****         public:
  98:/usr/include/boost/exception/exception.hpp ****         typedef char const * value_type;
  99:/usr/include/boost/exception/exception.hpp ****         value_type v_;
 100:/usr/include/boost/exception/exception.hpp ****         explicit
 101:/usr/include/boost/exception/exception.hpp ****         error_info( value_type v ):
 102:/usr/include/boost/exception/exception.hpp ****             v_(v)
 103:/usr/include/boost/exception/exception.hpp ****             {
 104:/usr/include/boost/exception/exception.hpp ****             }
 105:/usr/include/boost/exception/exception.hpp ****         };
 106:/usr/include/boost/exception/exception.hpp **** 
 107:/usr/include/boost/exception/exception.hpp ****     template <>
 108:/usr/include/boost/exception/exception.hpp ****     class
 109:/usr/include/boost/exception/exception.hpp ****     error_info<throw_file_,char const *>
 110:/usr/include/boost/exception/exception.hpp ****         {
 111:/usr/include/boost/exception/exception.hpp ****         public:
 112:/usr/include/boost/exception/exception.hpp ****         typedef char const * value_type;
 113:/usr/include/boost/exception/exception.hpp ****         value_type v_;
GAS LISTING /tmp/ccvmoMuv.s 			page 29


 114:/usr/include/boost/exception/exception.hpp ****         explicit
 115:/usr/include/boost/exception/exception.hpp ****         error_info( value_type v ):
 116:/usr/include/boost/exception/exception.hpp ****             v_(v)
 117:/usr/include/boost/exception/exception.hpp ****             {
 118:/usr/include/boost/exception/exception.hpp ****             }
 119:/usr/include/boost/exception/exception.hpp ****         };
 120:/usr/include/boost/exception/exception.hpp **** 
 121:/usr/include/boost/exception/exception.hpp ****     template <>
 122:/usr/include/boost/exception/exception.hpp ****     class
 123:/usr/include/boost/exception/exception.hpp ****     error_info<throw_line_,int>
 124:/usr/include/boost/exception/exception.hpp ****         {
 125:/usr/include/boost/exception/exception.hpp ****         public:
 126:/usr/include/boost/exception/exception.hpp ****         typedef int value_type;
 127:/usr/include/boost/exception/exception.hpp ****         value_type v_;
 128:/usr/include/boost/exception/exception.hpp ****         explicit
 129:/usr/include/boost/exception/exception.hpp ****         error_info( value_type v ):
 130:/usr/include/boost/exception/exception.hpp ****             v_(v)
 131:/usr/include/boost/exception/exception.hpp ****             {
 132:/usr/include/boost/exception/exception.hpp ****             }
 133:/usr/include/boost/exception/exception.hpp ****         };
 134:/usr/include/boost/exception/exception.hpp **** 
 135:/usr/include/boost/exception/exception.hpp **** #if defined(__GNUC__)
 136:/usr/include/boost/exception/exception.hpp **** # if (__GNUC__ == 4 && __GNUC_MINOR__ >= 1) || (__GNUC__ > 4)
 137:/usr/include/boost/exception/exception.hpp **** #  pragma GCC visibility push (default)
 138:/usr/include/boost/exception/exception.hpp **** # endif
 139:/usr/include/boost/exception/exception.hpp **** #endif
 140:/usr/include/boost/exception/exception.hpp ****     class exception;
 141:/usr/include/boost/exception/exception.hpp **** #if defined(__GNUC__)
 142:/usr/include/boost/exception/exception.hpp **** # if (__GNUC__ == 4 && __GNUC_MINOR__ >= 1) || (__GNUC__ > 4)
 143:/usr/include/boost/exception/exception.hpp **** #  pragma GCC visibility pop
 144:/usr/include/boost/exception/exception.hpp **** # endif
 145:/usr/include/boost/exception/exception.hpp **** #endif
 146:/usr/include/boost/exception/exception.hpp **** 
 147:/usr/include/boost/exception/exception.hpp ****     template <class T>
 148:/usr/include/boost/exception/exception.hpp ****     class shared_ptr;
 149:/usr/include/boost/exception/exception.hpp **** 
 150:/usr/include/boost/exception/exception.hpp ****     namespace
 151:/usr/include/boost/exception/exception.hpp ****     exception_detail
 152:/usr/include/boost/exception/exception.hpp ****         {
 153:/usr/include/boost/exception/exception.hpp ****         class error_info_base;
 154:/usr/include/boost/exception/exception.hpp ****         struct type_info_;
 155:/usr/include/boost/exception/exception.hpp **** 
 156:/usr/include/boost/exception/exception.hpp ****         struct
 157:/usr/include/boost/exception/exception.hpp ****         error_info_container
 158:/usr/include/boost/exception/exception.hpp ****             {
 159:/usr/include/boost/exception/exception.hpp ****             virtual char const * diagnostic_information( char const * ) const = 0;
 160:/usr/include/boost/exception/exception.hpp ****             virtual shared_ptr<error_info_base> get( type_info_ const & ) const = 0;
 161:/usr/include/boost/exception/exception.hpp ****             virtual void set( shared_ptr<error_info_base> const &, type_info_ const & ) = 0;
 162:/usr/include/boost/exception/exception.hpp ****             virtual void add_ref() const = 0;
 163:/usr/include/boost/exception/exception.hpp ****             virtual bool release() const = 0;
 164:/usr/include/boost/exception/exception.hpp ****             virtual refcount_ptr<exception_detail::error_info_container> clone() const = 0;
 165:/usr/include/boost/exception/exception.hpp **** 
 166:/usr/include/boost/exception/exception.hpp ****             protected:
 167:/usr/include/boost/exception/exception.hpp **** 
 168:/usr/include/boost/exception/exception.hpp ****             ~error_info_container() throw()
 169:/usr/include/boost/exception/exception.hpp ****                 {
 170:/usr/include/boost/exception/exception.hpp ****                 }
GAS LISTING /tmp/ccvmoMuv.s 			page 30


 171:/usr/include/boost/exception/exception.hpp ****             };
 172:/usr/include/boost/exception/exception.hpp **** 
 173:/usr/include/boost/exception/exception.hpp ****         template <class>
 174:/usr/include/boost/exception/exception.hpp ****         struct get_info;
 175:/usr/include/boost/exception/exception.hpp **** 
 176:/usr/include/boost/exception/exception.hpp ****         template <>
 177:/usr/include/boost/exception/exception.hpp ****         struct get_info<throw_function>;
 178:/usr/include/boost/exception/exception.hpp **** 
 179:/usr/include/boost/exception/exception.hpp ****         template <>
 180:/usr/include/boost/exception/exception.hpp ****         struct get_info<throw_file>;
 181:/usr/include/boost/exception/exception.hpp **** 
 182:/usr/include/boost/exception/exception.hpp ****         template <>
 183:/usr/include/boost/exception/exception.hpp ****         struct get_info<throw_line>;
 184:/usr/include/boost/exception/exception.hpp **** 
 185:/usr/include/boost/exception/exception.hpp ****         template <class>
 186:/usr/include/boost/exception/exception.hpp ****         struct set_info_rv;
 187:/usr/include/boost/exception/exception.hpp **** 
 188:/usr/include/boost/exception/exception.hpp ****         template <>
 189:/usr/include/boost/exception/exception.hpp ****         struct set_info_rv<throw_function>;
 190:/usr/include/boost/exception/exception.hpp **** 
 191:/usr/include/boost/exception/exception.hpp ****         template <>
 192:/usr/include/boost/exception/exception.hpp ****         struct set_info_rv<throw_file>;
 193:/usr/include/boost/exception/exception.hpp **** 
 194:/usr/include/boost/exception/exception.hpp ****         template <>
 195:/usr/include/boost/exception/exception.hpp ****         struct set_info_rv<throw_line>;
 196:/usr/include/boost/exception/exception.hpp **** 
 197:/usr/include/boost/exception/exception.hpp ****         char const * get_diagnostic_information( exception const &, char const * );
 198:/usr/include/boost/exception/exception.hpp **** 
 199:/usr/include/boost/exception/exception.hpp ****         void copy_boost_exception( exception *, exception const * );
 200:/usr/include/boost/exception/exception.hpp **** 
 201:/usr/include/boost/exception/exception.hpp ****         template <class E,class Tag,class T>
 202:/usr/include/boost/exception/exception.hpp ****         E const & set_info( E const &, error_info<Tag,T> const & );
 203:/usr/include/boost/exception/exception.hpp **** 
 204:/usr/include/boost/exception/exception.hpp ****         template <class E>
 205:/usr/include/boost/exception/exception.hpp ****         E const & set_info( E const &, throw_function const & );
 206:/usr/include/boost/exception/exception.hpp **** 
 207:/usr/include/boost/exception/exception.hpp ****         template <class E>
 208:/usr/include/boost/exception/exception.hpp ****         E const & set_info( E const &, throw_file const & );
 209:/usr/include/boost/exception/exception.hpp **** 
 210:/usr/include/boost/exception/exception.hpp ****         template <class E>
 211:/usr/include/boost/exception/exception.hpp ****         E const & set_info( E const &, throw_line const & );
 212:/usr/include/boost/exception/exception.hpp ****         }
 213:/usr/include/boost/exception/exception.hpp **** 
 214:/usr/include/boost/exception/exception.hpp **** #if defined(__GNUC__)
 215:/usr/include/boost/exception/exception.hpp **** # if (__GNUC__ == 4 && __GNUC_MINOR__ >= 1) || (__GNUC__ > 4)
 216:/usr/include/boost/exception/exception.hpp **** #  pragma GCC visibility push (default)
 217:/usr/include/boost/exception/exception.hpp **** # endif
 218:/usr/include/boost/exception/exception.hpp **** #endif
 219:/usr/include/boost/exception/exception.hpp ****     class
 220:/usr/include/boost/exception/exception.hpp ****     exception
 221:/usr/include/boost/exception/exception.hpp ****         {
 222:/usr/include/boost/exception/exception.hpp ****         //<N3757>
 223:/usr/include/boost/exception/exception.hpp ****         public:
 224:/usr/include/boost/exception/exception.hpp ****         template <class Tag> void set( typename Tag::type const & );
 225:/usr/include/boost/exception/exception.hpp ****         template <class Tag> typename Tag::type const * get() const;
 226:/usr/include/boost/exception/exception.hpp ****         //</N3757>
 227:/usr/include/boost/exception/exception.hpp **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 31


 228:/usr/include/boost/exception/exception.hpp ****         protected:
 229:/usr/include/boost/exception/exception.hpp **** 
 230:/usr/include/boost/exception/exception.hpp ****         exception():
 231:/usr/include/boost/exception/exception.hpp ****             throw_function_(0),
 232:/usr/include/boost/exception/exception.hpp ****             throw_file_(0),
 233:/usr/include/boost/exception/exception.hpp ****             throw_line_(-1)
 234:/usr/include/boost/exception/exception.hpp ****             {
 235:/usr/include/boost/exception/exception.hpp ****             }
 236:/usr/include/boost/exception/exception.hpp **** 
 237:/usr/include/boost/exception/exception.hpp **** #ifdef __HP_aCC
 238:/usr/include/boost/exception/exception.hpp ****         //On HP aCC, this protected copy constructor prevents throwing boost::exception.
 239:/usr/include/boost/exception/exception.hpp ****         //On all other platforms, the same effect is achieved by the pure virtual destructor.
 240:/usr/include/boost/exception/exception.hpp ****         exception( exception const & x ) throw():
 241:/usr/include/boost/exception/exception.hpp ****             data_(x.data_),
 242:/usr/include/boost/exception/exception.hpp ****             throw_function_(x.throw_function_),
 243:/usr/include/boost/exception/exception.hpp ****             throw_file_(x.throw_file_),
 244:/usr/include/boost/exception/exception.hpp ****             throw_line_(x.throw_line_)
 245:/usr/include/boost/exception/exception.hpp ****             {
 246:/usr/include/boost/exception/exception.hpp ****             }
 247:/usr/include/boost/exception/exception.hpp **** #endif
 248:/usr/include/boost/exception/exception.hpp **** 
 249:/usr/include/boost/exception/exception.hpp ****         virtual ~exception() throw()
 250:/usr/include/boost/exception/exception.hpp **** #ifndef __HP_aCC
 251:/usr/include/boost/exception/exception.hpp ****             = 0 //Workaround for HP aCC, =0 incorrectly leads to link errors.
 252:/usr/include/boost/exception/exception.hpp **** #endif
 253:/usr/include/boost/exception/exception.hpp ****             ;
 254:/usr/include/boost/exception/exception.hpp **** 
 255:/usr/include/boost/exception/exception.hpp **** #if (defined(__MWERKS__) && __MWERKS__<=0x3207) || (defined(_MSC_VER) && _MSC_VER<=1310)
 256:/usr/include/boost/exception/exception.hpp ****         public:
 257:/usr/include/boost/exception/exception.hpp **** #else
 258:/usr/include/boost/exception/exception.hpp ****         private:
 259:/usr/include/boost/exception/exception.hpp **** 
 260:/usr/include/boost/exception/exception.hpp ****         template <class E>
 261:/usr/include/boost/exception/exception.hpp ****         friend E const & exception_detail::set_info( E const &, throw_function const & );
 262:/usr/include/boost/exception/exception.hpp **** 
 263:/usr/include/boost/exception/exception.hpp ****         template <class E>
 264:/usr/include/boost/exception/exception.hpp ****         friend E const & exception_detail::set_info( E const &, throw_file const & );
 265:/usr/include/boost/exception/exception.hpp **** 
 266:/usr/include/boost/exception/exception.hpp ****         template <class E>
 267:/usr/include/boost/exception/exception.hpp ****         friend E const & exception_detail::set_info( E const &, throw_line const & );
 268:/usr/include/boost/exception/exception.hpp **** 
 269:/usr/include/boost/exception/exception.hpp ****         template <class E,class Tag,class T>
 270:/usr/include/boost/exception/exception.hpp ****         friend E const & exception_detail::set_info( E const &, error_info<Tag,T> const & );
 271:/usr/include/boost/exception/exception.hpp **** 
 272:/usr/include/boost/exception/exception.hpp ****         friend char const * exception_detail::get_diagnostic_information( exception const &, char c
 273:/usr/include/boost/exception/exception.hpp **** 
 274:/usr/include/boost/exception/exception.hpp ****         template <class>
 275:/usr/include/boost/exception/exception.hpp ****         friend struct exception_detail::get_info;
 276:/usr/include/boost/exception/exception.hpp ****         friend struct exception_detail::get_info<throw_function>;
 277:/usr/include/boost/exception/exception.hpp ****         friend struct exception_detail::get_info<throw_file>;
 278:/usr/include/boost/exception/exception.hpp ****         friend struct exception_detail::get_info<throw_line>;
 279:/usr/include/boost/exception/exception.hpp ****         template <class>
 280:/usr/include/boost/exception/exception.hpp ****         friend struct exception_detail::set_info_rv;
 281:/usr/include/boost/exception/exception.hpp ****         friend struct exception_detail::set_info_rv<throw_function>;
 282:/usr/include/boost/exception/exception.hpp ****         friend struct exception_detail::set_info_rv<throw_file>;
 283:/usr/include/boost/exception/exception.hpp ****         friend struct exception_detail::set_info_rv<throw_line>;
 284:/usr/include/boost/exception/exception.hpp ****         friend void exception_detail::copy_boost_exception( exception *, exception const * );
GAS LISTING /tmp/ccvmoMuv.s 			page 32


 285:/usr/include/boost/exception/exception.hpp **** #endif
 286:/usr/include/boost/exception/exception.hpp ****         mutable exception_detail::refcount_ptr<exception_detail::error_info_container> data_;
 287:/usr/include/boost/exception/exception.hpp ****         mutable char const * throw_function_;
 288:/usr/include/boost/exception/exception.hpp ****         mutable char const * throw_file_;
 289:/usr/include/boost/exception/exception.hpp ****         mutable int throw_line_;
 290:/usr/include/boost/exception/exception.hpp ****         };
 291:/usr/include/boost/exception/exception.hpp **** #if defined(__GNUC__)
 292:/usr/include/boost/exception/exception.hpp **** # if (__GNUC__ == 4 && __GNUC_MINOR__ >= 1) || (__GNUC__ > 4)
 293:/usr/include/boost/exception/exception.hpp **** #  pragma GCC visibility pop
 294:/usr/include/boost/exception/exception.hpp **** # endif
 295:/usr/include/boost/exception/exception.hpp **** #endif
 296:/usr/include/boost/exception/exception.hpp **** 
 297:/usr/include/boost/exception/exception.hpp ****     inline
 298:/usr/include/boost/exception/exception.hpp ****     exception::
 299:/usr/include/boost/exception/exception.hpp ****     ~exception() throw()
 300:/usr/include/boost/exception/exception.hpp ****         {
 301:/usr/include/boost/exception/exception.hpp ****         }
 302:/usr/include/boost/exception/exception.hpp **** 
 303:/usr/include/boost/exception/exception.hpp ****     namespace
 304:/usr/include/boost/exception/exception.hpp ****     exception_detail
 305:/usr/include/boost/exception/exception.hpp ****         {
 306:/usr/include/boost/exception/exception.hpp ****         template <class E>
 307:/usr/include/boost/exception/exception.hpp ****         E const &
 308:/usr/include/boost/exception/exception.hpp ****         set_info( E const & x, throw_function const & y )
 309:/usr/include/boost/exception/exception.hpp ****             {
 310:/usr/include/boost/exception/exception.hpp ****             x.throw_function_=y.v_;
 311:/usr/include/boost/exception/exception.hpp ****             return x;
 312:/usr/include/boost/exception/exception.hpp ****             }
 313:/usr/include/boost/exception/exception.hpp **** 
 314:/usr/include/boost/exception/exception.hpp ****         template <class E>
 315:/usr/include/boost/exception/exception.hpp ****         E const &
 316:/usr/include/boost/exception/exception.hpp ****         set_info( E const & x, throw_file const & y )
 317:/usr/include/boost/exception/exception.hpp ****             {
 318:/usr/include/boost/exception/exception.hpp ****             x.throw_file_=y.v_;
 319:/usr/include/boost/exception/exception.hpp ****             return x;
 320:/usr/include/boost/exception/exception.hpp ****             }
 321:/usr/include/boost/exception/exception.hpp **** 
 322:/usr/include/boost/exception/exception.hpp ****         template <class E>
 323:/usr/include/boost/exception/exception.hpp ****         E const &
 324:/usr/include/boost/exception/exception.hpp ****         set_info( E const & x, throw_line const & y )
 325:/usr/include/boost/exception/exception.hpp ****             {
 326:/usr/include/boost/exception/exception.hpp ****             x.throw_line_=y.v_;
 327:/usr/include/boost/exception/exception.hpp ****             return x;
 328:/usr/include/boost/exception/exception.hpp ****             }
 329:/usr/include/boost/exception/exception.hpp ****         }
 330:/usr/include/boost/exception/exception.hpp **** 
 331:/usr/include/boost/exception/exception.hpp ****     ////////////////////////////////////////////////////////////////////////
 332:/usr/include/boost/exception/exception.hpp **** 
 333:/usr/include/boost/exception/exception.hpp ****     namespace
 334:/usr/include/boost/exception/exception.hpp ****     exception_detail
 335:/usr/include/boost/exception/exception.hpp ****         {
 336:/usr/include/boost/exception/exception.hpp **** #if defined(__GNUC__)
 337:/usr/include/boost/exception/exception.hpp **** # if (__GNUC__ == 4 && __GNUC_MINOR__ >= 1) || (__GNUC__ > 4)
 338:/usr/include/boost/exception/exception.hpp **** #  pragma GCC visibility push (default)
 339:/usr/include/boost/exception/exception.hpp **** # endif
 340:/usr/include/boost/exception/exception.hpp **** #endif
 341:/usr/include/boost/exception/exception.hpp ****         template <class T>
GAS LISTING /tmp/ccvmoMuv.s 			page 33


 342:/usr/include/boost/exception/exception.hpp ****         struct
 343:/usr/include/boost/exception/exception.hpp ****         error_info_injector:
 344:/usr/include/boost/exception/exception.hpp ****             public T,
 345:/usr/include/boost/exception/exception.hpp ****             public exception
 346:/usr/include/boost/exception/exception.hpp ****             {
 347:/usr/include/boost/exception/exception.hpp ****             explicit
 348:/usr/include/boost/exception/exception.hpp ****             error_info_injector( T const & x ):
 349:/usr/include/boost/exception/exception.hpp ****                 T(x)
 350:/usr/include/boost/exception/exception.hpp ****                 {
 351:/usr/include/boost/exception/exception.hpp ****                 }
 352:/usr/include/boost/exception/exception.hpp **** 
 353:/usr/include/boost/exception/exception.hpp ****             ~error_info_injector() throw()
 354:/usr/include/boost/exception/exception.hpp ****                 {
 355:/usr/include/boost/exception/exception.hpp ****                 }
 356:/usr/include/boost/exception/exception.hpp ****             };
 357:/usr/include/boost/exception/exception.hpp **** #if defined(__GNUC__)
 358:/usr/include/boost/exception/exception.hpp **** # if (__GNUC__ == 4 && __GNUC_MINOR__ >= 1) || (__GNUC__ > 4)
 359:/usr/include/boost/exception/exception.hpp **** #  pragma GCC visibility pop
 360:/usr/include/boost/exception/exception.hpp **** # endif
 361:/usr/include/boost/exception/exception.hpp **** #endif
 362:/usr/include/boost/exception/exception.hpp **** 
 363:/usr/include/boost/exception/exception.hpp ****         struct large_size { char c[256]; };
 364:/usr/include/boost/exception/exception.hpp ****         large_size dispatch_boost_exception( exception const * );
 365:/usr/include/boost/exception/exception.hpp **** 
 366:/usr/include/boost/exception/exception.hpp ****         struct small_size { };
 367:/usr/include/boost/exception/exception.hpp ****         small_size dispatch_boost_exception( void const * );
 368:/usr/include/boost/exception/exception.hpp **** 
 369:/usr/include/boost/exception/exception.hpp ****         template <class,int>
 370:/usr/include/boost/exception/exception.hpp ****         struct enable_error_info_helper;
 371:/usr/include/boost/exception/exception.hpp **** 
 372:/usr/include/boost/exception/exception.hpp ****         template <class T>
 373:/usr/include/boost/exception/exception.hpp ****         struct
 374:/usr/include/boost/exception/exception.hpp ****         enable_error_info_helper<T,sizeof(large_size)>
 375:/usr/include/boost/exception/exception.hpp ****             {
 376:/usr/include/boost/exception/exception.hpp ****             typedef T type;
 377:/usr/include/boost/exception/exception.hpp ****             };
 378:/usr/include/boost/exception/exception.hpp **** 
 379:/usr/include/boost/exception/exception.hpp ****         template <class T>
 380:/usr/include/boost/exception/exception.hpp ****         struct
 381:/usr/include/boost/exception/exception.hpp ****         enable_error_info_helper<T,sizeof(small_size)>
 382:/usr/include/boost/exception/exception.hpp ****             {
 383:/usr/include/boost/exception/exception.hpp ****             typedef error_info_injector<T> type;
 384:/usr/include/boost/exception/exception.hpp ****             };
 385:/usr/include/boost/exception/exception.hpp **** 
 386:/usr/include/boost/exception/exception.hpp ****         template <class T>
 387:/usr/include/boost/exception/exception.hpp ****         struct
 388:/usr/include/boost/exception/exception.hpp ****         enable_error_info_return_type
 389:/usr/include/boost/exception/exception.hpp ****             {
 390:/usr/include/boost/exception/exception.hpp ****             typedef typename enable_error_info_helper<T,sizeof(exception_detail::dispatch_boost_exc
 391:/usr/include/boost/exception/exception.hpp ****             };
 392:/usr/include/boost/exception/exception.hpp ****         }
 393:/usr/include/boost/exception/exception.hpp **** 
 394:/usr/include/boost/exception/exception.hpp ****     template <class T>
 395:/usr/include/boost/exception/exception.hpp ****     inline
 396:/usr/include/boost/exception/exception.hpp ****     typename
 397:/usr/include/boost/exception/exception.hpp ****     exception_detail::enable_error_info_return_type<T>::type
 398:/usr/include/boost/exception/exception.hpp ****     enable_error_info( T const & x )
GAS LISTING /tmp/ccvmoMuv.s 			page 34


 399:/usr/include/boost/exception/exception.hpp ****         {
 400:/usr/include/boost/exception/exception.hpp ****         typedef typename exception_detail::enable_error_info_return_type<T>::type rt;
 401:/usr/include/boost/exception/exception.hpp ****         return rt(x);
 402:/usr/include/boost/exception/exception.hpp ****         }
 403:/usr/include/boost/exception/exception.hpp **** 
 404:/usr/include/boost/exception/exception.hpp ****     ////////////////////////////////////////////////////////////////////////
 405:/usr/include/boost/exception/exception.hpp **** 
 406:/usr/include/boost/exception/exception.hpp ****     namespace
 407:/usr/include/boost/exception/exception.hpp ****     exception_detail
 408:/usr/include/boost/exception/exception.hpp ****         {
 409:/usr/include/boost/exception/exception.hpp **** #if defined(__GNUC__)
 410:/usr/include/boost/exception/exception.hpp **** # if (__GNUC__ == 4 && __GNUC_MINOR__ >= 1) || (__GNUC__ > 4)
 411:/usr/include/boost/exception/exception.hpp **** #  pragma GCC visibility push (default)
 412:/usr/include/boost/exception/exception.hpp **** # endif
 413:/usr/include/boost/exception/exception.hpp **** #endif
 414:/usr/include/boost/exception/exception.hpp ****         class
 415:/usr/include/boost/exception/exception.hpp ****         clone_base
 416:/usr/include/boost/exception/exception.hpp ****             {
 417:/usr/include/boost/exception/exception.hpp ****             public:
 418:/usr/include/boost/exception/exception.hpp **** 
 419:/usr/include/boost/exception/exception.hpp ****             virtual clone_base const * clone() const = 0;
 420:/usr/include/boost/exception/exception.hpp ****             virtual void rethrow() const = 0;
 421:/usr/include/boost/exception/exception.hpp **** 
 422:/usr/include/boost/exception/exception.hpp ****             virtual
 423:/usr/include/boost/exception/exception.hpp ****             ~clone_base() throw()
 424:/usr/include/boost/exception/exception.hpp ****                 {
 425:/usr/include/boost/exception/exception.hpp ****                 }
 426:/usr/include/boost/exception/exception.hpp ****             };
 427:/usr/include/boost/exception/exception.hpp **** #if defined(__GNUC__)
 428:/usr/include/boost/exception/exception.hpp **** # if (__GNUC__ == 4 && __GNUC_MINOR__ >= 1) || (__GNUC__ > 4)
 429:/usr/include/boost/exception/exception.hpp **** #  pragma GCC visibility pop
 430:/usr/include/boost/exception/exception.hpp **** # endif
 431:/usr/include/boost/exception/exception.hpp **** #endif
 432:/usr/include/boost/exception/exception.hpp **** 
 433:/usr/include/boost/exception/exception.hpp ****         inline
 434:/usr/include/boost/exception/exception.hpp ****         void
 435:/usr/include/boost/exception/exception.hpp ****         copy_boost_exception( exception * a, exception const * b )
 436:/usr/include/boost/exception/exception.hpp ****             {
 437:/usr/include/boost/exception/exception.hpp ****             refcount_ptr<error_info_container> data;
 438:/usr/include/boost/exception/exception.hpp ****             if( error_info_container * d=b->data_.get() )
 439:/usr/include/boost/exception/exception.hpp ****                 data = d->clone();
 440:/usr/include/boost/exception/exception.hpp ****             a->throw_file_ = b->throw_file_;
 441:/usr/include/boost/exception/exception.hpp ****             a->throw_line_ = b->throw_line_;
 442:/usr/include/boost/exception/exception.hpp ****             a->throw_function_ = b->throw_function_;
 443:/usr/include/boost/exception/exception.hpp ****             a->data_ = data;
 444:/usr/include/boost/exception/exception.hpp ****             }
 445:/usr/include/boost/exception/exception.hpp **** 
 446:/usr/include/boost/exception/exception.hpp ****         inline
 447:/usr/include/boost/exception/exception.hpp ****         void
 448:/usr/include/boost/exception/exception.hpp ****         copy_boost_exception( void *, void const * )
 449:/usr/include/boost/exception/exception.hpp ****             {
 450:/usr/include/boost/exception/exception.hpp ****             }
 451:/usr/include/boost/exception/exception.hpp **** 
 452:/usr/include/boost/exception/exception.hpp **** #if defined(__GNUC__)
 453:/usr/include/boost/exception/exception.hpp **** # if (__GNUC__ == 4 && __GNUC_MINOR__ >= 1) || (__GNUC__ > 4)
 454:/usr/include/boost/exception/exception.hpp **** #  pragma GCC visibility push (default)
 455:/usr/include/boost/exception/exception.hpp **** # endif
GAS LISTING /tmp/ccvmoMuv.s 			page 35


 456:/usr/include/boost/exception/exception.hpp **** #endif
 457:/usr/include/boost/exception/exception.hpp ****         template <class T>
 458:/usr/include/boost/exception/exception.hpp ****         class
 459:/usr/include/boost/exception/exception.hpp ****         clone_impl:
 460:/usr/include/boost/exception/exception.hpp ****             public T,
 461:/usr/include/boost/exception/exception.hpp ****             public virtual clone_base
 462:/usr/include/boost/exception/exception.hpp ****             {
 463:/usr/include/boost/exception/exception.hpp ****             struct clone_tag { };
 464:/usr/include/boost/exception/exception.hpp ****             clone_impl( clone_impl const & x, clone_tag ):
 465:/usr/include/boost/exception/exception.hpp ****                 T(x)
 466:/usr/include/boost/exception/exception.hpp ****                 {
 467:/usr/include/boost/exception/exception.hpp ****                 copy_boost_exception(this,&x);
 468:/usr/include/boost/exception/exception.hpp ****                 }
 469:/usr/include/boost/exception/exception.hpp **** 
 470:/usr/include/boost/exception/exception.hpp ****             public:
 471:/usr/include/boost/exception/exception.hpp **** 
 472:/usr/include/boost/exception/exception.hpp ****             explicit
 473:/usr/include/boost/exception/exception.hpp ****             clone_impl( T const & x ):
 474:/usr/include/boost/exception/exception.hpp ****                 T(x)
 475:/usr/include/boost/exception/exception.hpp ****                 {
 476:/usr/include/boost/exception/exception.hpp ****                 copy_boost_exception(this,&x);
 477:/usr/include/boost/exception/exception.hpp ****                 }
 478:/usr/include/boost/exception/exception.hpp **** 
 479:/usr/include/boost/exception/exception.hpp ****             ~clone_impl() throw()
 480:/usr/include/boost/exception/exception.hpp ****                 {
 481:/usr/include/boost/exception/exception.hpp ****                 }
 482:/usr/include/boost/exception/exception.hpp **** 
 483:/usr/include/boost/exception/exception.hpp ****             private:
 484:/usr/include/boost/exception/exception.hpp **** 
 485:/usr/include/boost/exception/exception.hpp ****             clone_base const *
 486:/usr/include/boost/exception/exception.hpp ****             clone() const
 487:/usr/include/boost/exception/exception.hpp ****                 {
 488:/usr/include/boost/exception/exception.hpp ****                 return new clone_impl(*this,clone_tag());
 489:/usr/include/boost/exception/exception.hpp ****                 }
 490:/usr/include/boost/exception/exception.hpp **** 
 491:/usr/include/boost/exception/exception.hpp ****             void
 492:/usr/include/boost/exception/exception.hpp ****             rethrow() const
 325              		.loc 7 492 0
 326              		.cfi_startproc
 327              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 328              		.cfi_lsda 0x1b,.LLSDA15593
 329              	.LVL22:
 330 0000 55       		pushq	%rbp
 331              		.cfi_def_cfa_offset 16
 332              		.cfi_offset 6, -16
 333 0001 53       		pushq	%rbx
 334              		.cfi_def_cfa_offset 24
 335              		.cfi_offset 3, -24
 336 0002 4889FD   		movq	%rdi, %rbp
 493:/usr/include/boost/exception/exception.hpp ****                 {
 494:/usr/include/boost/exception/exception.hpp ****                 throw*this;
 337              		.loc 7 494 0
 338 0005 BF380000 		movl	$56, %edi
 338      00
 339              	.LVL23:
 492:/usr/include/boost/exception/exception.hpp ****                 {
 340              		.loc 7 492 0
GAS LISTING /tmp/ccvmoMuv.s 			page 36


 341 000a 4883EC08 		subq	$8, %rsp
 342              		.cfi_def_cfa_offset 32
 343              		.loc 7 494 0
 344 000e E8000000 		call	__cxa_allocate_exception@PLT
 344      00
 345              	.LVL24:
 346              	.LBB12810:
 347              	.LBB12811:
 348              	.LBB12812:
 349              	.LBB12813:
 350              	.LBB12814:
 351              	.LBB12815:
 352              	.LBB12816:
  38:/usr/include/boost/exception/exception.hpp ****                 {
 353              		.loc 7 38 0
 354 0013 488B7D08 		movq	8(%rbp), %rdi
 355              	.LBE12816:
 356              	.LBE12815:
 357              	.LBE12814:
 358              	.LBE12813:
 359              	.LBE12812:
 360              	.LBE12811:
 361              	.LBE12810:
 362              		.loc 7 494 0
 363 0017 4889C3   		movq	%rax, %rbx
 364              	.LVL25:
 365              	.LBB12835:
 366              	.LBB12833:
 367              	.LBB12829:
 368              	.LBB12830:
 415:/usr/include/boost/exception/exception.hpp ****             {
 369              		.loc 7 415 0
 370 001a 488D0500 		leaq	16+_ZTVN5boost16exception_detail10clone_baseE(%rip), %rax
 370      000000
 371              	.LVL26:
 372 0021 48894330 		movq	%rax, 48(%rbx)
 373              	.LVL27:
 374              	.LBE12830:
 375              	.LBE12829:
 376              	.LBB12831:
 377              	.LBB12827:
 378              	.LBB12825:
 220:/usr/include/boost/exception/exception.hpp ****         {
 379              		.loc 7 220 0
 380 0025 488D0500 		leaq	16+_ZTVN5boost9exceptionE(%rip), %rax
 380      000000
 381              	.LBB12823:
 382              	.LBB12821:
 383              	.LBB12817:
 384              	.LBB12818:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 385              		.loc 7 71 0
 386 002c 4885FF   		testq	%rdi, %rdi
 387              	.LBE12818:
 388              	.LBE12817:
  38:/usr/include/boost/exception/exception.hpp ****                 {
 389              		.loc 7 38 0
GAS LISTING /tmp/ccvmoMuv.s 			page 37


 390 002f 48897B08 		movq	%rdi, 8(%rbx)
 391              	.LBE12821:
 392              	.LBE12823:
 220:/usr/include/boost/exception/exception.hpp ****         {
 393              		.loc 7 220 0
 394 0033 488903   		movq	%rax, (%rbx)
 395              	.LVL28:
 396              	.LBB12824:
 397              	.LBB12822:
 398              	.LBB12820:
 399              	.LBB12819:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 400              		.loc 7 71 0
 401 0036 7406     		je	.L21
  72:/usr/include/boost/exception/exception.hpp ****                 }
 402              		.loc 7 72 0
 403 0038 488B07   		movq	(%rdi), %rax
 404              	.LEHB0:
 405 003b FF5018   		call	*24(%rax)
 406              	.LVL29:
 407              	.LEHE0:
 408              	.L21:
 409              	.LBE12819:
 410              	.LBE12820:
 411              	.LBE12822:
 412              	.LBE12824:
 220:/usr/include/boost/exception/exception.hpp ****         {
 413              		.loc 7 220 0
 414 003e 488B4510 		movq	16(%rbp), %rax
 415              	.LBE12825:
 416              	.LBE12827:
 417              	.LBE12831:
 418              	.LBE12833:
 419              	.LBE12835:
 420              		.loc 7 494 0
 421 0042 488D1500 		leaq	_ZN5boost16exception_detail10clone_implINS0_14bad_exception_EED1Ev(%rip), %rdx
 421      000000
 422 0049 488D3500 		leaq	_ZTIN5boost16exception_detail10clone_implINS0_14bad_exception_EEE(%rip), %rsi
 422      000000
 423 0050 4889DF   		movq	%rbx, %rdi
 424              	.LBB12836:
 425              	.LBB12834:
 426              	.LBB12832:
 427              	.LBB12828:
 428              	.LBB12826:
 220:/usr/include/boost/exception/exception.hpp ****         {
 429              		.loc 7 220 0
 430 0053 48894310 		movq	%rax, 16(%rbx)
 431 0057 488B4518 		movq	24(%rbp), %rax
 432 005b 48894318 		movq	%rax, 24(%rbx)
 433 005f 8B4520   		movl	32(%rbp), %eax
 434 0062 894320   		movl	%eax, 32(%rbx)
 435              	.LVL30:
 436              	.LBE12826:
 437              	.LBE12828:
 438              	.LBE12832:
 459:/usr/include/boost/exception/exception.hpp ****             public T,
GAS LISTING /tmp/ccvmoMuv.s 			page 38


 439              		.loc 7 459 0
 440 0065 488D0500 		leaq	24+_ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE(%rip), %rax
 440      000000
 441 006c 488903   		movq	%rax, (%rbx)
 442 006f 488D0500 		leaq	72+_ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE(%rip), %rax
 442      000000
 443 0076 48894328 		movq	%rax, 40(%rbx)
 444 007a 488D0500 		leaq	136+_ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE(%rip), %rax
 444      000000
 445 0081 48894330 		movq	%rax, 48(%rbx)
 446              	.LVL31:
 447              	.LEHB1:
 448              	.LBE12834:
 449              	.LBE12836:
 450              		.loc 7 494 0
 451 0085 E8000000 		call	__cxa_throw@PLT
 451      00
 452              	.LVL32:
 453              	.L23:
 454 008a 4889C5   		movq	%rax, %rbp
 455              	.LVL33:
 456 008d 4889DF   		movq	%rbx, %rdi
 457 0090 E8000000 		call	__cxa_free_exception@PLT
 457      00
 458              	.LVL34:
 459 0095 4889EF   		movq	%rbp, %rdi
 460 0098 E8000000 		call	_Unwind_Resume@PLT
 460      00
 461              	.LVL35:
 462              	.LEHE1:
 463              		.cfi_endproc
 464              	.LFE15593:
 465              		.globl	__gxx_personality_v0
 466              		.section	.gcc_except_table._ZNK5boost16exception_detail10clone_implINS0_14bad_exception_EE7rethrow
 467              	.LLSDA15593:
 468 0000 FF       		.byte	0xff
 469 0001 FF       		.byte	0xff
 470 0002 01       		.byte	0x1
 471 0003 0A       		.uleb128 .LLSDACSE15593-.LLSDACSB15593
 472              	.LLSDACSB15593:
 473 0004 3B       		.uleb128 .LEHB0-.LFB15593
 474 0005 03       		.uleb128 .LEHE0-.LEHB0
 475 0006 8A01     		.uleb128 .L23-.LFB15593
 476 0008 00       		.uleb128 0
 477 0009 8501     		.uleb128 .LEHB1-.LFB15593
 478 000b 18       		.uleb128 .LEHE1-.LEHB1
 479 000c 00       		.uleb128 0
 480 000d 00       		.uleb128 0
 481              	.LLSDACSE15593:
 482              		.section	.text._ZNK5boost16exception_detail10clone_implINS0_14bad_exception_EE7rethrowEv,"axG",@pr
 484              		.set	.LTHUNK265,_ZNK5boost16exception_detail10clone_implINS0_14bad_exception_EE7rethrowEv
 485 009d 0F1F00   		.p2align 4,,15
 486              		.weak	_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_14bad_exception_EE7rethrowEv
 488              	_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_14bad_exception_EE7rethrowEv:
 489              	.LFB15999:
 492:/usr/include/boost/exception/exception.hpp ****                 {
 490              		.loc 7 492 0
GAS LISTING /tmp/ccvmoMuv.s 			page 39


 491              		.cfi_startproc
 492 00a0 4C8B17   		movq	(%rdi), %r10
 493 00a3 49037AE0 		addq	-32(%r10), %rdi
 494 00a7 E954FFFF 		jmp	.LTHUNK265
 494      FF
 495              		.cfi_endproc
 496              	.LFE15999:
 498              		.section	.text._ZNK5boost16exception_detail10clone_implINS0_10bad_alloc_EE7rethrowEv,"axG",@progbi
 499              		.align 2
 500              		.p2align 4,,15
 501              		.weak	_ZNK5boost16exception_detail10clone_implINS0_10bad_alloc_EE7rethrowEv
 503              	_ZNK5boost16exception_detail10clone_implINS0_10bad_alloc_EE7rethrowEv:
 504              	.LFB15595:
 492:/usr/include/boost/exception/exception.hpp ****                 {
 505              		.loc 7 492 0
 506              		.cfi_startproc
 507              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 508              		.cfi_lsda 0x1b,.LLSDA15595
 509              	.LVL36:
 510 0000 55       		pushq	%rbp
 511              		.cfi_def_cfa_offset 16
 512              		.cfi_offset 6, -16
 513 0001 53       		pushq	%rbx
 514              		.cfi_def_cfa_offset 24
 515              		.cfi_offset 3, -24
 516 0002 4889FD   		movq	%rdi, %rbp
 517              		.loc 7 494 0
 518 0005 BF380000 		movl	$56, %edi
 518      00
 519              	.LVL37:
 492:/usr/include/boost/exception/exception.hpp ****                 {
 520              		.loc 7 492 0
 521 000a 4883EC08 		subq	$8, %rsp
 522              		.cfi_def_cfa_offset 32
 523              		.loc 7 494 0
 524 000e E8000000 		call	__cxa_allocate_exception@PLT
 524      00
 525              	.LVL38:
 526              	.LBB12837:
 527              	.LBB12838:
 528              	.LBB12839:
 529              	.LBB12840:
 530              	.LBB12841:
 531              	.LBB12842:
 532              	.LBB12843:
  38:/usr/include/boost/exception/exception.hpp ****                 {
 533              		.loc 7 38 0
 534 0013 488B7D08 		movq	8(%rbp), %rdi
 535              	.LBE12843:
 536              	.LBE12842:
 537              	.LBE12841:
 538              	.LBE12840:
 539              	.LBE12839:
 540              	.LBE12838:
 541              	.LBE12837:
 542              		.loc 7 494 0
 543 0017 4889C3   		movq	%rax, %rbx
GAS LISTING /tmp/ccvmoMuv.s 			page 40


 544              	.LVL39:
 545              	.LBB12862:
 546              	.LBB12860:
 547              	.LBB12856:
 548              	.LBB12857:
 415:/usr/include/boost/exception/exception.hpp ****             {
 549              		.loc 7 415 0
 550 001a 488D0500 		leaq	16+_ZTVN5boost16exception_detail10clone_baseE(%rip), %rax
 550      000000
 551              	.LVL40:
 552 0021 48894330 		movq	%rax, 48(%rbx)
 553              	.LVL41:
 554              	.LBE12857:
 555              	.LBE12856:
 556              	.LBB12858:
 557              	.LBB12854:
 558              	.LBB12852:
 220:/usr/include/boost/exception/exception.hpp ****         {
 559              		.loc 7 220 0
 560 0025 488D0500 		leaq	16+_ZTVN5boost9exceptionE(%rip), %rax
 560      000000
 561              	.LBB12850:
 562              	.LBB12848:
 563              	.LBB12844:
 564              	.LBB12845:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 565              		.loc 7 71 0
 566 002c 4885FF   		testq	%rdi, %rdi
 567              	.LBE12845:
 568              	.LBE12844:
  38:/usr/include/boost/exception/exception.hpp ****                 {
 569              		.loc 7 38 0
 570 002f 48897B08 		movq	%rdi, 8(%rbx)
 571              	.LBE12848:
 572              	.LBE12850:
 220:/usr/include/boost/exception/exception.hpp ****         {
 573              		.loc 7 220 0
 574 0033 488903   		movq	%rax, (%rbx)
 575              	.LVL42:
 576              	.LBB12851:
 577              	.LBB12849:
 578              	.LBB12847:
 579              	.LBB12846:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 580              		.loc 7 71 0
 581 0036 7406     		je	.L28
  72:/usr/include/boost/exception/exception.hpp ****                 }
 582              		.loc 7 72 0
 583 0038 488B07   		movq	(%rdi), %rax
 584              	.LEHB2:
 585 003b FF5018   		call	*24(%rax)
 586              	.LVL43:
 587              	.LEHE2:
 588              	.L28:
 589              	.LBE12846:
 590              	.LBE12847:
 591              	.LBE12849:
GAS LISTING /tmp/ccvmoMuv.s 			page 41


 592              	.LBE12851:
 220:/usr/include/boost/exception/exception.hpp ****         {
 593              		.loc 7 220 0
 594 003e 488B4510 		movq	16(%rbp), %rax
 595              	.LBE12852:
 596              	.LBE12854:
 597              	.LBE12858:
 598              	.LBE12860:
 599              	.LBE12862:
 600              		.loc 7 494 0
 601 0042 488D1500 		leaq	_ZN5boost16exception_detail10clone_implINS0_10bad_alloc_EED1Ev(%rip), %rdx
 601      000000
 602 0049 488D3500 		leaq	_ZTIN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE(%rip), %rsi
 602      000000
 603 0050 4889DF   		movq	%rbx, %rdi
 604              	.LBB12863:
 605              	.LBB12861:
 606              	.LBB12859:
 607              	.LBB12855:
 608              	.LBB12853:
 220:/usr/include/boost/exception/exception.hpp ****         {
 609              		.loc 7 220 0
 610 0053 48894310 		movq	%rax, 16(%rbx)
 611 0057 488B4518 		movq	24(%rbp), %rax
 612 005b 48894318 		movq	%rax, 24(%rbx)
 613 005f 8B4520   		movl	32(%rbp), %eax
 614 0062 894320   		movl	%eax, 32(%rbx)
 615              	.LVL44:
 616              	.LBE12853:
 617              	.LBE12855:
 618              	.LBE12859:
 459:/usr/include/boost/exception/exception.hpp ****             public T,
 619              		.loc 7 459 0
 620 0065 488D0500 		leaq	24+_ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE(%rip), %rax
 620      000000
 621 006c 488903   		movq	%rax, (%rbx)
 622 006f 488D0500 		leaq	72+_ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE(%rip), %rax
 622      000000
 623 0076 48894328 		movq	%rax, 40(%rbx)
 624 007a 488D0500 		leaq	136+_ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE(%rip), %rax
 624      000000
 625 0081 48894330 		movq	%rax, 48(%rbx)
 626              	.LVL45:
 627              	.LEHB3:
 628              	.LBE12861:
 629              	.LBE12863:
 630              		.loc 7 494 0
 631 0085 E8000000 		call	__cxa_throw@PLT
 631      00
 632              	.LVL46:
 633              	.L30:
 634 008a 4889C5   		movq	%rax, %rbp
 635              	.LVL47:
 636 008d 4889DF   		movq	%rbx, %rdi
 637 0090 E8000000 		call	__cxa_free_exception@PLT
 637      00
 638              	.LVL48:
GAS LISTING /tmp/ccvmoMuv.s 			page 42


 639 0095 4889EF   		movq	%rbp, %rdi
 640 0098 E8000000 		call	_Unwind_Resume@PLT
 640      00
 641              	.LVL49:
 642              	.LEHE3:
 643              		.cfi_endproc
 644              	.LFE15595:
 645              		.section	.gcc_except_table._ZNK5boost16exception_detail10clone_implINS0_10bad_alloc_EE7rethrowEv,"
 646              	.LLSDA15595:
 647 0000 FF       		.byte	0xff
 648 0001 FF       		.byte	0xff
 649 0002 01       		.byte	0x1
 650 0003 0A       		.uleb128 .LLSDACSE15595-.LLSDACSB15595
 651              	.LLSDACSB15595:
 652 0004 3B       		.uleb128 .LEHB2-.LFB15595
 653 0005 03       		.uleb128 .LEHE2-.LEHB2
 654 0006 8A01     		.uleb128 .L30-.LFB15595
 655 0008 00       		.uleb128 0
 656 0009 8501     		.uleb128 .LEHB3-.LFB15595
 657 000b 18       		.uleb128 .LEHE3-.LEHB3
 658 000c 00       		.uleb128 0
 659 000d 00       		.uleb128 0
 660              	.LLSDACSE15595:
 661              		.section	.text._ZNK5boost16exception_detail10clone_implINS0_10bad_alloc_EE7rethrowEv,"axG",@progbi
 663              		.set	.LTHUNK267,_ZNK5boost16exception_detail10clone_implINS0_10bad_alloc_EE7rethrowEv
 664 009d 0F1F00   		.p2align 4,,15
 665              		.weak	_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_10bad_alloc_EE7rethrowEv
 667              	_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_10bad_alloc_EE7rethrowEv:
 668              	.LFB16000:
 492:/usr/include/boost/exception/exception.hpp ****                 {
 669              		.loc 7 492 0
 670              		.cfi_startproc
 671 00a0 4C8B17   		movq	(%rdi), %r10
 672 00a3 49037AE0 		addq	-32(%r10), %rdi
 673 00a7 E954FFFF 		jmp	.LTHUNK267
 673      FF
 674              		.cfi_endproc
 675              	.LFE16000:
 677              		.section	.rodata._ZNK5boost6system12system_error4whatEv.str1.1,"aMS",@progbits,1
 678              	.LC0:
 679 0000 62617369 		.string	"basic_string::append"
 679      635F7374 
 679      72696E67 
 679      3A3A6170 
 679      70656E64 
 680              	.LC1:
 681 0015 3A2000   		.string	": "
 682              		.section	.text._ZNK5boost6system12system_error4whatEv,"axG",@progbits,_ZNK5boost6system12system_er
 683              		.align 2
 684              		.p2align 4,,15
 685              		.weak	_ZNK5boost6system12system_error4whatEv
 687              	_ZNK5boost6system12system_error4whatEv:
 688              	.LFB4246:
 689              		.file 8 "/usr/include/boost/system/system_error.hpp"
   1:/usr/include/boost/system/system_error.hpp **** //  Boost system_error.hpp  --------------------------------------------------//
   2:/usr/include/boost/system/system_error.hpp **** 
   3:/usr/include/boost/system/system_error.hpp **** //  Copyright Beman Dawes 2006
GAS LISTING /tmp/ccvmoMuv.s 			page 43


   4:/usr/include/boost/system/system_error.hpp **** 
   5:/usr/include/boost/system/system_error.hpp **** //  Distributed under the Boost Software License, Version 1.0. (See accompanying
   6:/usr/include/boost/system/system_error.hpp **** //  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
   7:/usr/include/boost/system/system_error.hpp **** 
   8:/usr/include/boost/system/system_error.hpp **** #ifndef BOOST_SYSTEM_ERROR_HPP
   9:/usr/include/boost/system/system_error.hpp **** #define BOOST_SYSTEM_ERROR_HPP
  10:/usr/include/boost/system/system_error.hpp **** 
  11:/usr/include/boost/system/system_error.hpp **** #include <string>
  12:/usr/include/boost/system/system_error.hpp **** #include <stdexcept>
  13:/usr/include/boost/system/system_error.hpp **** #include <cassert>
  14:/usr/include/boost/system/system_error.hpp **** #include <boost/system/error_code.hpp>
  15:/usr/include/boost/system/system_error.hpp **** 
  16:/usr/include/boost/system/system_error.hpp **** namespace boost
  17:/usr/include/boost/system/system_error.hpp **** {
  18:/usr/include/boost/system/system_error.hpp ****   namespace system
  19:/usr/include/boost/system/system_error.hpp ****   {
  20:/usr/include/boost/system/system_error.hpp ****     //  class system_error  ------------------------------------------------------------//
  21:/usr/include/boost/system/system_error.hpp **** 
  22:/usr/include/boost/system/system_error.hpp ****     class BOOST_SYMBOL_VISIBLE system_error : public std::runtime_error
  23:/usr/include/boost/system/system_error.hpp ****     // BOOST_SYMBOL_VISIBLE is needed by GCC to ensure system_error thrown from a shared
  24:/usr/include/boost/system/system_error.hpp ****     // library can be caught. See svn.boost.org/trac/boost/ticket/3697
  25:/usr/include/boost/system/system_error.hpp ****     {
  26:/usr/include/boost/system/system_error.hpp ****     public:
  27:/usr/include/boost/system/system_error.hpp ****       system_error( error_code ec )
  28:/usr/include/boost/system/system_error.hpp ****           : std::runtime_error(""), m_error_code(ec) {}
  29:/usr/include/boost/system/system_error.hpp **** 
  30:/usr/include/boost/system/system_error.hpp ****       system_error( error_code ec, const std::string & what_arg )
  31:/usr/include/boost/system/system_error.hpp ****           : std::runtime_error(what_arg), m_error_code(ec) {}
  32:/usr/include/boost/system/system_error.hpp **** 
  33:/usr/include/boost/system/system_error.hpp ****       system_error( error_code ec, const char* what_arg )
  34:/usr/include/boost/system/system_error.hpp ****           : std::runtime_error(what_arg), m_error_code(ec) {}
  35:/usr/include/boost/system/system_error.hpp **** 
  36:/usr/include/boost/system/system_error.hpp ****       system_error( int ev, const error_category & ecat )
  37:/usr/include/boost/system/system_error.hpp ****           : std::runtime_error(""), m_error_code(ev,ecat) {}
  38:/usr/include/boost/system/system_error.hpp **** 
  39:/usr/include/boost/system/system_error.hpp ****       system_error( int ev, const error_category & ecat,
  40:/usr/include/boost/system/system_error.hpp ****         const std::string & what_arg )
  41:/usr/include/boost/system/system_error.hpp ****           : std::runtime_error(what_arg), m_error_code(ev,ecat) {}
  42:/usr/include/boost/system/system_error.hpp **** 
  43:/usr/include/boost/system/system_error.hpp ****       system_error( int ev, const error_category & ecat,
  44:/usr/include/boost/system/system_error.hpp ****         const char * what_arg )
  45:/usr/include/boost/system/system_error.hpp ****           : std::runtime_error(what_arg), m_error_code(ev,ecat) {}
  46:/usr/include/boost/system/system_error.hpp **** 
  47:/usr/include/boost/system/system_error.hpp ****       virtual ~system_error() throw() {}
  48:/usr/include/boost/system/system_error.hpp **** 
  49:/usr/include/boost/system/system_error.hpp ****       const error_code &  code() const throw() { return m_error_code; }
  50:/usr/include/boost/system/system_error.hpp ****       const char *        what() const throw();
  51:/usr/include/boost/system/system_error.hpp **** 
  52:/usr/include/boost/system/system_error.hpp ****     private:
  53:/usr/include/boost/system/system_error.hpp ****       error_code           m_error_code;
  54:/usr/include/boost/system/system_error.hpp ****       mutable std::string  m_what;
  55:/usr/include/boost/system/system_error.hpp ****     };
  56:/usr/include/boost/system/system_error.hpp **** 
  57:/usr/include/boost/system/system_error.hpp ****     //  implementation  ------------------------------------------------------//
  58:/usr/include/boost/system/system_error.hpp **** 
  59:/usr/include/boost/system/system_error.hpp ****     inline const char * system_error::what() const throw()
  60:/usr/include/boost/system/system_error.hpp ****     // see http://www.boost.org/more/error_handling.html for lazy build rationale
GAS LISTING /tmp/ccvmoMuv.s 			page 44


  61:/usr/include/boost/system/system_error.hpp ****     {
 690              		.loc 8 61 0
 691              		.cfi_startproc
 692              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 693              		.cfi_lsda 0x1b,.LLSDA4246
 694              	.LVL50:
 695 0000 4154     		pushq	%r12
 696              		.cfi_def_cfa_offset 16
 697              		.cfi_offset 12, -16
 698 0002 55       		pushq	%rbp
 699              		.cfi_def_cfa_offset 24
 700              		.cfi_offset 6, -24
 701 0003 53       		pushq	%rbx
 702              		.cfi_def_cfa_offset 32
 703              		.cfi_offset 3, -32
 704 0004 4889FB   		movq	%rdi, %rbx
 705 0007 4883EC20 		subq	$32, %rsp
 706              		.cfi_def_cfa_offset 64
  62:/usr/include/boost/system/system_error.hpp ****       if ( m_what.empty() )
 707              		.loc 8 62 0
 708 000b 48837F28 		cmpq	$0, 40(%rdi)
 708      00
 709 0010 7416     		je	.L51
 710              	.LVL51:
 711              	.L33:
 712 0012 488B5B20 		movq	32(%rbx), %rbx
 713              	.LVL52:
 714              	.L32:
  63:/usr/include/boost/system/system_error.hpp ****       {
  64:/usr/include/boost/system/system_error.hpp **** #ifndef BOOST_NO_EXCEPTIONS
  65:/usr/include/boost/system/system_error.hpp ****         try
  66:/usr/include/boost/system/system_error.hpp **** #endif
  67:/usr/include/boost/system/system_error.hpp ****         {
  68:/usr/include/boost/system/system_error.hpp ****           m_what = this->std::runtime_error::what();
  69:/usr/include/boost/system/system_error.hpp ****           if ( !m_what.empty() ) m_what += ": ";
  70:/usr/include/boost/system/system_error.hpp ****           m_what += m_error_code.message();
  71:/usr/include/boost/system/system_error.hpp ****         }
  72:/usr/include/boost/system/system_error.hpp **** #ifndef BOOST_NO_EXCEPTIONS
  73:/usr/include/boost/system/system_error.hpp ****         catch (...) { return std::runtime_error::what(); }
  74:/usr/include/boost/system/system_error.hpp **** #endif
  75:/usr/include/boost/system/system_error.hpp ****       }
  76:/usr/include/boost/system/system_error.hpp ****       return m_what.c_str();
  77:/usr/include/boost/system/system_error.hpp ****     }
 715              		.loc 8 77 0
 716 0016 4883C420 		addq	$32, %rsp
 717              		.cfi_remember_state
 718              		.cfi_def_cfa_offset 32
 719 001a 4889D8   		movq	%rbx, %rax
 720 001d 5B       		popq	%rbx
 721              		.cfi_def_cfa_offset 24
 722 001e 5D       		popq	%rbp
 723              		.cfi_def_cfa_offset 16
 724 001f 415C     		popq	%r12
 725              		.cfi_def_cfa_offset 8
 726 0021 C3       		ret
 727              	.LVL53:
 728              		.p2align 4,,10
GAS LISTING /tmp/ccvmoMuv.s 			page 45


 729 0022 660F1F44 		.p2align 3
 729      0000
 730              	.L51:
 731              		.cfi_restore_state
  68:/usr/include/boost/system/system_error.hpp ****           if ( !m_what.empty() ) m_what += ": ";
 732              		.loc 8 68 0
 733 0028 E8000000 		call	_ZNKSt13runtime_error4whatEv@PLT
 733      00
 734              	.LVL54:
 735              	.LBB12907:
 736              	.LBB12908:
 737              	.LBB12909:
 738              	.LBB12910:
 739              	.LBB12911:
 740              		.file 9 "/usr/include/c++/6/bits/char_traits.h"
   1:/usr/include/c++/6/bits/char_traits.h **** // Character Traits for use by standard string and iostream -*- C++ -*-
   2:/usr/include/c++/6/bits/char_traits.h **** 
   3:/usr/include/c++/6/bits/char_traits.h **** // Copyright (C) 1997-2016 Free Software Foundation, Inc.
   4:/usr/include/c++/6/bits/char_traits.h **** //
   5:/usr/include/c++/6/bits/char_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/6/bits/char_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/6/bits/char_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/6/bits/char_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/6/bits/char_traits.h **** // any later version.
  10:/usr/include/c++/6/bits/char_traits.h **** 
  11:/usr/include/c++/6/bits/char_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/6/bits/char_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/6/bits/char_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/6/bits/char_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/6/bits/char_traits.h **** 
  16:/usr/include/c++/6/bits/char_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/6/bits/char_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/6/bits/char_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/6/bits/char_traits.h **** 
  20:/usr/include/c++/6/bits/char_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/6/bits/char_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/6/bits/char_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/6/bits/char_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/6/bits/char_traits.h **** 
  25:/usr/include/c++/6/bits/char_traits.h **** /** @file bits/char_traits.h
  26:/usr/include/c++/6/bits/char_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/6/bits/char_traits.h ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/c++/6/bits/char_traits.h ****  */
  29:/usr/include/c++/6/bits/char_traits.h **** 
  30:/usr/include/c++/6/bits/char_traits.h **** //
  31:/usr/include/c++/6/bits/char_traits.h **** // ISO C++ 14882: 21  Strings library
  32:/usr/include/c++/6/bits/char_traits.h **** //
  33:/usr/include/c++/6/bits/char_traits.h **** 
  34:/usr/include/c++/6/bits/char_traits.h **** #ifndef _CHAR_TRAITS_H
  35:/usr/include/c++/6/bits/char_traits.h **** #define _CHAR_TRAITS_H 1
  36:/usr/include/c++/6/bits/char_traits.h **** 
  37:/usr/include/c++/6/bits/char_traits.h **** #pragma GCC system_header
  38:/usr/include/c++/6/bits/char_traits.h **** 
  39:/usr/include/c++/6/bits/char_traits.h **** #include <bits/stl_algobase.h>  // std::copy, std::fill_n
  40:/usr/include/c++/6/bits/char_traits.h **** #include <bits/postypes.h>      // For streampos
  41:/usr/include/c++/6/bits/char_traits.h **** #include <cwchar>               // For WEOF, wmemmove, wmemset, etc.
  42:/usr/include/c++/6/bits/char_traits.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 46


  43:/usr/include/c++/6/bits/char_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  44:/usr/include/c++/6/bits/char_traits.h **** {
  45:/usr/include/c++/6/bits/char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  46:/usr/include/c++/6/bits/char_traits.h **** 
  47:/usr/include/c++/6/bits/char_traits.h ****   /**
  48:/usr/include/c++/6/bits/char_traits.h ****    *  @brief  Mapping from character type to associated types.
  49:/usr/include/c++/6/bits/char_traits.h ****    *
  50:/usr/include/c++/6/bits/char_traits.h ****    *  @note This is an implementation class for the generic version
  51:/usr/include/c++/6/bits/char_traits.h ****    *  of char_traits.  It defines int_type, off_type, pos_type, and
  52:/usr/include/c++/6/bits/char_traits.h ****    *  state_type.  By default these are unsigned long, streamoff,
  53:/usr/include/c++/6/bits/char_traits.h ****    *  streampos, and mbstate_t.  Users who need a different set of
  54:/usr/include/c++/6/bits/char_traits.h ****    *  types, but who don't need to change the definitions of any function
  55:/usr/include/c++/6/bits/char_traits.h ****    *  defined in char_traits, can specialize __gnu_cxx::_Char_types
  56:/usr/include/c++/6/bits/char_traits.h ****    *  while leaving __gnu_cxx::char_traits alone. */
  57:/usr/include/c++/6/bits/char_traits.h ****   template<typename _CharT>
  58:/usr/include/c++/6/bits/char_traits.h ****     struct _Char_types
  59:/usr/include/c++/6/bits/char_traits.h ****     {
  60:/usr/include/c++/6/bits/char_traits.h ****       typedef unsigned long   int_type;
  61:/usr/include/c++/6/bits/char_traits.h ****       typedef std::streampos  pos_type;
  62:/usr/include/c++/6/bits/char_traits.h ****       typedef std::streamoff  off_type;
  63:/usr/include/c++/6/bits/char_traits.h ****       typedef std::mbstate_t  state_type;
  64:/usr/include/c++/6/bits/char_traits.h ****     };
  65:/usr/include/c++/6/bits/char_traits.h **** 
  66:/usr/include/c++/6/bits/char_traits.h **** 
  67:/usr/include/c++/6/bits/char_traits.h ****   /**
  68:/usr/include/c++/6/bits/char_traits.h ****    *  @brief  Base class used to implement std::char_traits.
  69:/usr/include/c++/6/bits/char_traits.h ****    *
  70:/usr/include/c++/6/bits/char_traits.h ****    *  @note For any given actual character type, this definition is
  71:/usr/include/c++/6/bits/char_traits.h ****    *  probably wrong.  (Most of the member functions are likely to be
  72:/usr/include/c++/6/bits/char_traits.h ****    *  right, but the int_type and state_type typedefs, and the eof()
  73:/usr/include/c++/6/bits/char_traits.h ****    *  member function, are likely to be wrong.)  The reason this class
  74:/usr/include/c++/6/bits/char_traits.h ****    *  exists is so users can specialize it.  Classes in namespace std
  75:/usr/include/c++/6/bits/char_traits.h ****    *  may not be specialized for fundamental types, but classes in
  76:/usr/include/c++/6/bits/char_traits.h ****    *  namespace __gnu_cxx may be.
  77:/usr/include/c++/6/bits/char_traits.h ****    *
  78:/usr/include/c++/6/bits/char_traits.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_typ
  79:/usr/include/c++/6/bits/char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
  80:/usr/include/c++/6/bits/char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.  
  81:/usr/include/c++/6/bits/char_traits.h ****    */
  82:/usr/include/c++/6/bits/char_traits.h ****   template<typename _CharT>
  83:/usr/include/c++/6/bits/char_traits.h ****     struct char_traits
  84:/usr/include/c++/6/bits/char_traits.h ****     {
  85:/usr/include/c++/6/bits/char_traits.h ****       typedef _CharT                                    char_type;
  86:/usr/include/c++/6/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::int_type    int_type;
  87:/usr/include/c++/6/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::pos_type    pos_type;
  88:/usr/include/c++/6/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::off_type    off_type;
  89:/usr/include/c++/6/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::state_type  state_type;
  90:/usr/include/c++/6/bits/char_traits.h **** 
  91:/usr/include/c++/6/bits/char_traits.h ****       static void
  92:/usr/include/c++/6/bits/char_traits.h ****       assign(char_type& __c1, const char_type& __c2)
  93:/usr/include/c++/6/bits/char_traits.h ****       { __c1 = __c2; }
  94:/usr/include/c++/6/bits/char_traits.h **** 
  95:/usr/include/c++/6/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
  96:/usr/include/c++/6/bits/char_traits.h ****       eq(const char_type& __c1, const char_type& __c2)
  97:/usr/include/c++/6/bits/char_traits.h ****       { return __c1 == __c2; }
  98:/usr/include/c++/6/bits/char_traits.h **** 
  99:/usr/include/c++/6/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
GAS LISTING /tmp/ccvmoMuv.s 			page 47


 100:/usr/include/c++/6/bits/char_traits.h ****       lt(const char_type& __c1, const char_type& __c2)
 101:/usr/include/c++/6/bits/char_traits.h ****       { return __c1 < __c2; }
 102:/usr/include/c++/6/bits/char_traits.h **** 
 103:/usr/include/c++/6/bits/char_traits.h ****       static int
 104:/usr/include/c++/6/bits/char_traits.h ****       compare(const char_type* __s1, const char_type* __s2, std::size_t __n);
 105:/usr/include/c++/6/bits/char_traits.h **** 
 106:/usr/include/c++/6/bits/char_traits.h ****       static std::size_t
 107:/usr/include/c++/6/bits/char_traits.h ****       length(const char_type* __s);
 108:/usr/include/c++/6/bits/char_traits.h **** 
 109:/usr/include/c++/6/bits/char_traits.h ****       static const char_type*
 110:/usr/include/c++/6/bits/char_traits.h ****       find(const char_type* __s, std::size_t __n, const char_type& __a);
 111:/usr/include/c++/6/bits/char_traits.h **** 
 112:/usr/include/c++/6/bits/char_traits.h ****       static char_type*
 113:/usr/include/c++/6/bits/char_traits.h ****       move(char_type* __s1, const char_type* __s2, std::size_t __n);
 114:/usr/include/c++/6/bits/char_traits.h **** 
 115:/usr/include/c++/6/bits/char_traits.h ****       static char_type*
 116:/usr/include/c++/6/bits/char_traits.h ****       copy(char_type* __s1, const char_type* __s2, std::size_t __n);
 117:/usr/include/c++/6/bits/char_traits.h **** 
 118:/usr/include/c++/6/bits/char_traits.h ****       static char_type*
 119:/usr/include/c++/6/bits/char_traits.h ****       assign(char_type* __s, std::size_t __n, char_type __a);
 120:/usr/include/c++/6/bits/char_traits.h **** 
 121:/usr/include/c++/6/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR char_type
 122:/usr/include/c++/6/bits/char_traits.h ****       to_char_type(const int_type& __c)
 123:/usr/include/c++/6/bits/char_traits.h ****       { return static_cast<char_type>(__c); }
 124:/usr/include/c++/6/bits/char_traits.h **** 
 125:/usr/include/c++/6/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 126:/usr/include/c++/6/bits/char_traits.h ****       to_int_type(const char_type& __c)
 127:/usr/include/c++/6/bits/char_traits.h ****       { return static_cast<int_type>(__c); }
 128:/usr/include/c++/6/bits/char_traits.h **** 
 129:/usr/include/c++/6/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 130:/usr/include/c++/6/bits/char_traits.h ****       eq_int_type(const int_type& __c1, const int_type& __c2)
 131:/usr/include/c++/6/bits/char_traits.h ****       { return __c1 == __c2; }
 132:/usr/include/c++/6/bits/char_traits.h **** 
 133:/usr/include/c++/6/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 134:/usr/include/c++/6/bits/char_traits.h ****       eof()
 135:/usr/include/c++/6/bits/char_traits.h ****       { return static_cast<int_type>(_GLIBCXX_STDIO_EOF); }
 136:/usr/include/c++/6/bits/char_traits.h **** 
 137:/usr/include/c++/6/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 138:/usr/include/c++/6/bits/char_traits.h ****       not_eof(const int_type& __c)
 139:/usr/include/c++/6/bits/char_traits.h ****       { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
 140:/usr/include/c++/6/bits/char_traits.h ****     };
 141:/usr/include/c++/6/bits/char_traits.h **** 
 142:/usr/include/c++/6/bits/char_traits.h ****   template<typename _CharT>
 143:/usr/include/c++/6/bits/char_traits.h ****     int
 144:/usr/include/c++/6/bits/char_traits.h ****     char_traits<_CharT>::
 145:/usr/include/c++/6/bits/char_traits.h ****     compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
 146:/usr/include/c++/6/bits/char_traits.h ****     {
 147:/usr/include/c++/6/bits/char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
 148:/usr/include/c++/6/bits/char_traits.h **** 	if (lt(__s1[__i], __s2[__i]))
 149:/usr/include/c++/6/bits/char_traits.h **** 	  return -1;
 150:/usr/include/c++/6/bits/char_traits.h **** 	else if (lt(__s2[__i], __s1[__i]))
 151:/usr/include/c++/6/bits/char_traits.h **** 	  return 1;
 152:/usr/include/c++/6/bits/char_traits.h ****       return 0;
 153:/usr/include/c++/6/bits/char_traits.h ****     }
 154:/usr/include/c++/6/bits/char_traits.h **** 
 155:/usr/include/c++/6/bits/char_traits.h ****   template<typename _CharT>
 156:/usr/include/c++/6/bits/char_traits.h ****     std::size_t
GAS LISTING /tmp/ccvmoMuv.s 			page 48


 157:/usr/include/c++/6/bits/char_traits.h ****     char_traits<_CharT>::
 158:/usr/include/c++/6/bits/char_traits.h ****     length(const char_type* __p)
 159:/usr/include/c++/6/bits/char_traits.h ****     {
 160:/usr/include/c++/6/bits/char_traits.h ****       std::size_t __i = 0;
 161:/usr/include/c++/6/bits/char_traits.h ****       while (!eq(__p[__i], char_type()))
 162:/usr/include/c++/6/bits/char_traits.h ****         ++__i;
 163:/usr/include/c++/6/bits/char_traits.h ****       return __i;
 164:/usr/include/c++/6/bits/char_traits.h ****     }
 165:/usr/include/c++/6/bits/char_traits.h **** 
 166:/usr/include/c++/6/bits/char_traits.h ****   template<typename _CharT>
 167:/usr/include/c++/6/bits/char_traits.h ****     const typename char_traits<_CharT>::char_type*
 168:/usr/include/c++/6/bits/char_traits.h ****     char_traits<_CharT>::
 169:/usr/include/c++/6/bits/char_traits.h ****     find(const char_type* __s, std::size_t __n, const char_type& __a)
 170:/usr/include/c++/6/bits/char_traits.h ****     {
 171:/usr/include/c++/6/bits/char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
 172:/usr/include/c++/6/bits/char_traits.h ****         if (eq(__s[__i], __a))
 173:/usr/include/c++/6/bits/char_traits.h ****           return __s + __i;
 174:/usr/include/c++/6/bits/char_traits.h ****       return 0;
 175:/usr/include/c++/6/bits/char_traits.h ****     }
 176:/usr/include/c++/6/bits/char_traits.h **** 
 177:/usr/include/c++/6/bits/char_traits.h ****   template<typename _CharT>
 178:/usr/include/c++/6/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 179:/usr/include/c++/6/bits/char_traits.h ****     char_traits<_CharT>::
 180:/usr/include/c++/6/bits/char_traits.h ****     move(char_type* __s1, const char_type* __s2, std::size_t __n)
 181:/usr/include/c++/6/bits/char_traits.h ****     {
 182:/usr/include/c++/6/bits/char_traits.h ****       return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
 183:/usr/include/c++/6/bits/char_traits.h **** 						    __n * sizeof(char_type)));
 184:/usr/include/c++/6/bits/char_traits.h ****     }
 185:/usr/include/c++/6/bits/char_traits.h **** 
 186:/usr/include/c++/6/bits/char_traits.h ****   template<typename _CharT>
 187:/usr/include/c++/6/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 188:/usr/include/c++/6/bits/char_traits.h ****     char_traits<_CharT>::
 189:/usr/include/c++/6/bits/char_traits.h ****     copy(char_type* __s1, const char_type* __s2, std::size_t __n)
 190:/usr/include/c++/6/bits/char_traits.h ****     {
 191:/usr/include/c++/6/bits/char_traits.h ****       // NB: Inline std::copy so no recursive dependencies.
 192:/usr/include/c++/6/bits/char_traits.h ****       std::copy(__s2, __s2 + __n, __s1);
 193:/usr/include/c++/6/bits/char_traits.h ****       return __s1;
 194:/usr/include/c++/6/bits/char_traits.h ****     }
 195:/usr/include/c++/6/bits/char_traits.h **** 
 196:/usr/include/c++/6/bits/char_traits.h ****   template<typename _CharT>
 197:/usr/include/c++/6/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 198:/usr/include/c++/6/bits/char_traits.h ****     char_traits<_CharT>::
 199:/usr/include/c++/6/bits/char_traits.h ****     assign(char_type* __s, std::size_t __n, char_type __a)
 200:/usr/include/c++/6/bits/char_traits.h ****     {
 201:/usr/include/c++/6/bits/char_traits.h ****       // NB: Inline std::fill_n so no recursive dependencies.
 202:/usr/include/c++/6/bits/char_traits.h ****       std::fill_n(__s, __n, __a);
 203:/usr/include/c++/6/bits/char_traits.h ****       return __s;
 204:/usr/include/c++/6/bits/char_traits.h ****     }
 205:/usr/include/c++/6/bits/char_traits.h **** 
 206:/usr/include/c++/6/bits/char_traits.h **** _GLIBCXX_END_NAMESPACE_VERSION
 207:/usr/include/c++/6/bits/char_traits.h **** } // namespace
 208:/usr/include/c++/6/bits/char_traits.h **** 
 209:/usr/include/c++/6/bits/char_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
 210:/usr/include/c++/6/bits/char_traits.h **** {
 211:/usr/include/c++/6/bits/char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 212:/usr/include/c++/6/bits/char_traits.h **** 
 213:/usr/include/c++/6/bits/char_traits.h ****   // 21.1
GAS LISTING /tmp/ccvmoMuv.s 			page 49


 214:/usr/include/c++/6/bits/char_traits.h ****   /**
 215:/usr/include/c++/6/bits/char_traits.h ****    *  @brief  Basis for explicit traits specializations.
 216:/usr/include/c++/6/bits/char_traits.h ****    *
 217:/usr/include/c++/6/bits/char_traits.h ****    *  @note  For any given actual character type, this definition is
 218:/usr/include/c++/6/bits/char_traits.h ****    *  probably wrong.  Since this is just a thin wrapper around
 219:/usr/include/c++/6/bits/char_traits.h ****    *  __gnu_cxx::char_traits, it is possible to achieve a more
 220:/usr/include/c++/6/bits/char_traits.h ****    *  appropriate definition by specializing __gnu_cxx::char_traits.
 221:/usr/include/c++/6/bits/char_traits.h ****    *
 222:/usr/include/c++/6/bits/char_traits.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_typ
 223:/usr/include/c++/6/bits/char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
 224:/usr/include/c++/6/bits/char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.
 225:/usr/include/c++/6/bits/char_traits.h ****   */
 226:/usr/include/c++/6/bits/char_traits.h ****   template<class _CharT>
 227:/usr/include/c++/6/bits/char_traits.h ****     struct char_traits : public __gnu_cxx::char_traits<_CharT>
 228:/usr/include/c++/6/bits/char_traits.h ****     { };
 229:/usr/include/c++/6/bits/char_traits.h **** 
 230:/usr/include/c++/6/bits/char_traits.h **** 
 231:/usr/include/c++/6/bits/char_traits.h ****   /// 21.1.3.1  char_traits specializations
 232:/usr/include/c++/6/bits/char_traits.h ****   template<>
 233:/usr/include/c++/6/bits/char_traits.h ****     struct char_traits<char>
 234:/usr/include/c++/6/bits/char_traits.h ****     {
 235:/usr/include/c++/6/bits/char_traits.h ****       typedef char              char_type;
 236:/usr/include/c++/6/bits/char_traits.h ****       typedef int               int_type;
 237:/usr/include/c++/6/bits/char_traits.h ****       typedef streampos         pos_type;
 238:/usr/include/c++/6/bits/char_traits.h ****       typedef streamoff         off_type;
 239:/usr/include/c++/6/bits/char_traits.h ****       typedef mbstate_t         state_type;
 240:/usr/include/c++/6/bits/char_traits.h **** 
 241:/usr/include/c++/6/bits/char_traits.h ****       static void
 242:/usr/include/c++/6/bits/char_traits.h ****       assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 243:/usr/include/c++/6/bits/char_traits.h ****       { __c1 = __c2; }
 244:/usr/include/c++/6/bits/char_traits.h **** 
 245:/usr/include/c++/6/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 246:/usr/include/c++/6/bits/char_traits.h ****       eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 247:/usr/include/c++/6/bits/char_traits.h ****       { return __c1 == __c2; }
 248:/usr/include/c++/6/bits/char_traits.h **** 
 249:/usr/include/c++/6/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 250:/usr/include/c++/6/bits/char_traits.h ****       lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 251:/usr/include/c++/6/bits/char_traits.h ****       {
 252:/usr/include/c++/6/bits/char_traits.h **** 	// LWG 467.
 253:/usr/include/c++/6/bits/char_traits.h **** 	return (static_cast<unsigned char>(__c1)
 254:/usr/include/c++/6/bits/char_traits.h **** 		< static_cast<unsigned char>(__c2));
 255:/usr/include/c++/6/bits/char_traits.h ****       }
 256:/usr/include/c++/6/bits/char_traits.h **** 
 257:/usr/include/c++/6/bits/char_traits.h ****       static int
 258:/usr/include/c++/6/bits/char_traits.h ****       compare(const char_type* __s1, const char_type* __s2, size_t __n)
 259:/usr/include/c++/6/bits/char_traits.h ****       {
 260:/usr/include/c++/6/bits/char_traits.h **** 	if (__n == 0)
 261:/usr/include/c++/6/bits/char_traits.h **** 	  return 0;
 262:/usr/include/c++/6/bits/char_traits.h **** 	return __builtin_memcmp(__s1, __s2, __n);
 263:/usr/include/c++/6/bits/char_traits.h ****       }
 264:/usr/include/c++/6/bits/char_traits.h **** 
 265:/usr/include/c++/6/bits/char_traits.h ****       static size_t
 266:/usr/include/c++/6/bits/char_traits.h ****       length(const char_type* __s)
 267:/usr/include/c++/6/bits/char_traits.h ****       { return __builtin_strlen(__s); }
 741              		.loc 9 267 0
 742 002d 4889C7   		movq	%rax, %rdi
 743              	.LBE12911:
GAS LISTING /tmp/ccvmoMuv.s 			page 50


 744              	.LBE12910:
 745              	.LBE12909:
 746              	.LBE12908:
 747              	.LBE12907:
  68:/usr/include/boost/system/system_error.hpp ****           if ( !m_what.empty() ) m_what += ": ";
 748              		.loc 8 68 0
 749 0030 4889C5   		movq	%rax, %rbp
 750 0033 4C8D6320 		leaq	32(%rbx), %r12
 751              	.LVL55:
 752              	.LBB12918:
 753              	.LBB12917:
 754              	.LBB12916:
 755              	.LBB12914:
 756              	.LBB12912:
 757              		.loc 9 267 0
 758 0037 E8000000 		call	strlen@PLT
 758      00
 759              	.LVL56:
 760              	.LBE12912:
 761              	.LBE12914:
 762              		.file 10 "/usr/include/c++/6/bits/basic_string.h"
   1:/usr/include/c++/6/bits/basic_string.h **** // Components for manipulating sequences of characters -*- C++ -*-
   2:/usr/include/c++/6/bits/basic_string.h **** 
   3:/usr/include/c++/6/bits/basic_string.h **** // Copyright (C) 1997-2016 Free Software Foundation, Inc.
   4:/usr/include/c++/6/bits/basic_string.h **** //
   5:/usr/include/c++/6/bits/basic_string.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/6/bits/basic_string.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/6/bits/basic_string.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/6/bits/basic_string.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/6/bits/basic_string.h **** // any later version.
  10:/usr/include/c++/6/bits/basic_string.h **** 
  11:/usr/include/c++/6/bits/basic_string.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/6/bits/basic_string.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/6/bits/basic_string.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/6/bits/basic_string.h **** // GNU General Public License for more details.
  15:/usr/include/c++/6/bits/basic_string.h **** 
  16:/usr/include/c++/6/bits/basic_string.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/6/bits/basic_string.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/6/bits/basic_string.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/6/bits/basic_string.h **** 
  20:/usr/include/c++/6/bits/basic_string.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/6/bits/basic_string.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/6/bits/basic_string.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/6/bits/basic_string.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/6/bits/basic_string.h **** 
  25:/usr/include/c++/6/bits/basic_string.h **** /** @file bits/basic_string.h
  26:/usr/include/c++/6/bits/basic_string.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/6/bits/basic_string.h ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/c++/6/bits/basic_string.h ****  */
  29:/usr/include/c++/6/bits/basic_string.h **** 
  30:/usr/include/c++/6/bits/basic_string.h **** //
  31:/usr/include/c++/6/bits/basic_string.h **** // ISO C++ 14882: 21 Strings library
  32:/usr/include/c++/6/bits/basic_string.h **** //
  33:/usr/include/c++/6/bits/basic_string.h **** 
  34:/usr/include/c++/6/bits/basic_string.h **** #ifndef _BASIC_STRING_H
  35:/usr/include/c++/6/bits/basic_string.h **** #define _BASIC_STRING_H 1
  36:/usr/include/c++/6/bits/basic_string.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 51


  37:/usr/include/c++/6/bits/basic_string.h **** #pragma GCC system_header
  38:/usr/include/c++/6/bits/basic_string.h **** 
  39:/usr/include/c++/6/bits/basic_string.h **** #include <ext/atomicity.h>
  40:/usr/include/c++/6/bits/basic_string.h **** #include <ext/alloc_traits.h>
  41:/usr/include/c++/6/bits/basic_string.h **** #include <debug/debug.h>
  42:/usr/include/c++/6/bits/basic_string.h **** 
  43:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
  44:/usr/include/c++/6/bits/basic_string.h **** #include <initializer_list>
  45:/usr/include/c++/6/bits/basic_string.h **** #endif
  46:/usr/include/c++/6/bits/basic_string.h **** 
  47:/usr/include/c++/6/bits/basic_string.h **** namespace std _GLIBCXX_VISIBILITY(default)
  48:/usr/include/c++/6/bits/basic_string.h **** {
  49:/usr/include/c++/6/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  50:/usr/include/c++/6/bits/basic_string.h **** 
  51:/usr/include/c++/6/bits/basic_string.h **** #if _GLIBCXX_USE_CXX11_ABI
  52:/usr/include/c++/6/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_CXX11
  53:/usr/include/c++/6/bits/basic_string.h ****   /**
  54:/usr/include/c++/6/bits/basic_string.h ****    *  @class basic_string basic_string.h <string>
  55:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Managing sequences of characters and character-like objects.
  56:/usr/include/c++/6/bits/basic_string.h ****    *
  57:/usr/include/c++/6/bits/basic_string.h ****    *  @ingroup strings
  58:/usr/include/c++/6/bits/basic_string.h ****    *  @ingroup sequences
  59:/usr/include/c++/6/bits/basic_string.h ****    *
  60:/usr/include/c++/6/bits/basic_string.h ****    *  @tparam _CharT  Type of character
  61:/usr/include/c++/6/bits/basic_string.h ****    *  @tparam _Traits  Traits for character type, defaults to
  62:/usr/include/c++/6/bits/basic_string.h ****    *                   char_traits<_CharT>.
  63:/usr/include/c++/6/bits/basic_string.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
  64:/usr/include/c++/6/bits/basic_string.h ****    *
  65:/usr/include/c++/6/bits/basic_string.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  66:/usr/include/c++/6/bits/basic_string.h ****    *  <a href="tables.html#66">reversible container</a>, and a
  67:/usr/include/c++/6/bits/basic_string.h ****    *  <a href="tables.html#67">sequence</a>.  Of the
  68:/usr/include/c++/6/bits/basic_string.h ****    *  <a href="tables.html#68">optional sequence requirements</a>, only
  69:/usr/include/c++/6/bits/basic_string.h ****    *  @c push_back, @c at, and @c %array access are supported.
  70:/usr/include/c++/6/bits/basic_string.h ****    */
  71:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
  72:/usr/include/c++/6/bits/basic_string.h ****     class basic_string
  73:/usr/include/c++/6/bits/basic_string.h ****     {
  74:/usr/include/c++/6/bits/basic_string.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  75:/usr/include/c++/6/bits/basic_string.h **** 	rebind<_CharT>::other _Char_alloc_type;
  76:/usr/include/c++/6/bits/basic_string.h ****       typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
  77:/usr/include/c++/6/bits/basic_string.h **** 
  78:/usr/include/c++/6/bits/basic_string.h ****       // Types:
  79:/usr/include/c++/6/bits/basic_string.h ****     public:
  80:/usr/include/c++/6/bits/basic_string.h ****       typedef _Traits					traits_type;
  81:/usr/include/c++/6/bits/basic_string.h ****       typedef typename _Traits::char_type		value_type;
  82:/usr/include/c++/6/bits/basic_string.h ****       typedef _Char_alloc_type				allocator_type;
  83:/usr/include/c++/6/bits/basic_string.h ****       typedef typename _Alloc_traits::size_type		size_type;
  84:/usr/include/c++/6/bits/basic_string.h ****       typedef typename _Alloc_traits::difference_type	difference_type;
  85:/usr/include/c++/6/bits/basic_string.h ****       typedef typename _Alloc_traits::reference		reference;
  86:/usr/include/c++/6/bits/basic_string.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
  87:/usr/include/c++/6/bits/basic_string.h ****       typedef typename _Alloc_traits::pointer		pointer;
  88:/usr/include/c++/6/bits/basic_string.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
  89:/usr/include/c++/6/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;
  90:/usr/include/c++/6/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
  91:/usr/include/c++/6/bits/basic_string.h **** 							const_iterator;
  92:/usr/include/c++/6/bits/basic_string.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
  93:/usr/include/c++/6/bits/basic_string.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
GAS LISTING /tmp/ccvmoMuv.s 			page 52


  94:/usr/include/c++/6/bits/basic_string.h **** 
  95:/usr/include/c++/6/bits/basic_string.h ****       ///  Value returned by various member functions when they fail.
  96:/usr/include/c++/6/bits/basic_string.h ****       static const size_type	npos = static_cast<size_type>(-1);
  97:/usr/include/c++/6/bits/basic_string.h **** 
  98:/usr/include/c++/6/bits/basic_string.h ****     private:
  99:/usr/include/c++/6/bits/basic_string.h ****       // type used for positions in insert, erase etc.
 100:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus < 201103L
 101:/usr/include/c++/6/bits/basic_string.h ****       typedef iterator __const_iterator;
 102:/usr/include/c++/6/bits/basic_string.h **** #else
 103:/usr/include/c++/6/bits/basic_string.h ****       typedef const_iterator __const_iterator;
 104:/usr/include/c++/6/bits/basic_string.h **** #endif
 105:/usr/include/c++/6/bits/basic_string.h **** 
 106:/usr/include/c++/6/bits/basic_string.h ****       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
 107:/usr/include/c++/6/bits/basic_string.h ****       struct _Alloc_hider : allocator_type // TODO check __is_final
 108:/usr/include/c++/6/bits/basic_string.h ****       {
 109:/usr/include/c++/6/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
 110:/usr/include/c++/6/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 111:/usr/include/c++/6/bits/basic_string.h **** 
 112:/usr/include/c++/6/bits/basic_string.h **** 	pointer _M_p; // The actual data.
 113:/usr/include/c++/6/bits/basic_string.h ****       };
 114:/usr/include/c++/6/bits/basic_string.h **** 
 115:/usr/include/c++/6/bits/basic_string.h ****       _Alloc_hider	_M_dataplus;
 116:/usr/include/c++/6/bits/basic_string.h ****       size_type		_M_string_length;
 117:/usr/include/c++/6/bits/basic_string.h **** 
 118:/usr/include/c++/6/bits/basic_string.h ****       enum { _S_local_capacity = 15 / sizeof(_CharT) };
 119:/usr/include/c++/6/bits/basic_string.h **** 
 120:/usr/include/c++/6/bits/basic_string.h ****       union
 121:/usr/include/c++/6/bits/basic_string.h ****       {
 122:/usr/include/c++/6/bits/basic_string.h **** 	_CharT           _M_local_buf[_S_local_capacity + 1];
 123:/usr/include/c++/6/bits/basic_string.h **** 	size_type        _M_allocated_capacity;
 124:/usr/include/c++/6/bits/basic_string.h ****       };
 125:/usr/include/c++/6/bits/basic_string.h **** 
 126:/usr/include/c++/6/bits/basic_string.h ****       void
 127:/usr/include/c++/6/bits/basic_string.h ****       _M_data(pointer __p)
 128:/usr/include/c++/6/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 129:/usr/include/c++/6/bits/basic_string.h **** 
 130:/usr/include/c++/6/bits/basic_string.h ****       void
 131:/usr/include/c++/6/bits/basic_string.h ****       _M_length(size_type __length)
 132:/usr/include/c++/6/bits/basic_string.h ****       { _M_string_length = __length; }
 133:/usr/include/c++/6/bits/basic_string.h **** 
 134:/usr/include/c++/6/bits/basic_string.h ****       pointer
 135:/usr/include/c++/6/bits/basic_string.h ****       _M_data() const
 136:/usr/include/c++/6/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 137:/usr/include/c++/6/bits/basic_string.h **** 
 138:/usr/include/c++/6/bits/basic_string.h ****       pointer
 139:/usr/include/c++/6/bits/basic_string.h ****       _M_local_data()
 140:/usr/include/c++/6/bits/basic_string.h ****       {
 141:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
 142:/usr/include/c++/6/bits/basic_string.h **** 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 143:/usr/include/c++/6/bits/basic_string.h **** #else
 144:/usr/include/c++/6/bits/basic_string.h **** 	return pointer(_M_local_buf);
 145:/usr/include/c++/6/bits/basic_string.h **** #endif
 146:/usr/include/c++/6/bits/basic_string.h ****       }
 147:/usr/include/c++/6/bits/basic_string.h **** 
 148:/usr/include/c++/6/bits/basic_string.h ****       const_pointer
 149:/usr/include/c++/6/bits/basic_string.h ****       _M_local_data() const
 150:/usr/include/c++/6/bits/basic_string.h ****       {
GAS LISTING /tmp/ccvmoMuv.s 			page 53


 151:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
 152:/usr/include/c++/6/bits/basic_string.h **** 	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 153:/usr/include/c++/6/bits/basic_string.h **** #else
 154:/usr/include/c++/6/bits/basic_string.h **** 	return const_pointer(_M_local_buf);
 155:/usr/include/c++/6/bits/basic_string.h **** #endif
 156:/usr/include/c++/6/bits/basic_string.h ****       }
 157:/usr/include/c++/6/bits/basic_string.h **** 
 158:/usr/include/c++/6/bits/basic_string.h ****       void
 159:/usr/include/c++/6/bits/basic_string.h ****       _M_capacity(size_type __capacity)
 160:/usr/include/c++/6/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 161:/usr/include/c++/6/bits/basic_string.h **** 
 162:/usr/include/c++/6/bits/basic_string.h ****       void
 163:/usr/include/c++/6/bits/basic_string.h ****       _M_set_length(size_type __n)
 164:/usr/include/c++/6/bits/basic_string.h ****       {
 165:/usr/include/c++/6/bits/basic_string.h **** 	_M_length(__n);
 166:/usr/include/c++/6/bits/basic_string.h **** 	traits_type::assign(_M_data()[__n], _CharT());
 167:/usr/include/c++/6/bits/basic_string.h ****       }
 168:/usr/include/c++/6/bits/basic_string.h **** 
 169:/usr/include/c++/6/bits/basic_string.h ****       bool
 170:/usr/include/c++/6/bits/basic_string.h ****       _M_is_local() const
 171:/usr/include/c++/6/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 172:/usr/include/c++/6/bits/basic_string.h **** 
 173:/usr/include/c++/6/bits/basic_string.h ****       // Create & Destroy
 174:/usr/include/c++/6/bits/basic_string.h ****       pointer
 175:/usr/include/c++/6/bits/basic_string.h ****       _M_create(size_type&, size_type);
 176:/usr/include/c++/6/bits/basic_string.h **** 
 177:/usr/include/c++/6/bits/basic_string.h ****       void
 178:/usr/include/c++/6/bits/basic_string.h ****       _M_dispose()
 179:/usr/include/c++/6/bits/basic_string.h ****       {
 180:/usr/include/c++/6/bits/basic_string.h **** 	if (!_M_is_local())
 181:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 182:/usr/include/c++/6/bits/basic_string.h ****       }
 183:/usr/include/c++/6/bits/basic_string.h **** 
 184:/usr/include/c++/6/bits/basic_string.h ****       void
 185:/usr/include/c++/6/bits/basic_string.h ****       _M_destroy(size_type __size) throw()
 186:/usr/include/c++/6/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 187:/usr/include/c++/6/bits/basic_string.h **** 
 188:/usr/include/c++/6/bits/basic_string.h ****       // _M_construct_aux is used to implement the 21.3.1 para 15 which
 189:/usr/include/c++/6/bits/basic_string.h ****       // requires special behaviour if _InIterator is an integral type
 190:/usr/include/c++/6/bits/basic_string.h ****       template<typename _InIterator>
 191:/usr/include/c++/6/bits/basic_string.h ****         void
 192:/usr/include/c++/6/bits/basic_string.h ****         _M_construct_aux(_InIterator __beg, _InIterator __end,
 193:/usr/include/c++/6/bits/basic_string.h **** 			 std::__false_type)
 194:/usr/include/c++/6/bits/basic_string.h **** 	{
 195:/usr/include/c++/6/bits/basic_string.h ****           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
 196:/usr/include/c++/6/bits/basic_string.h ****           _M_construct(__beg, __end, _Tag());
 197:/usr/include/c++/6/bits/basic_string.h **** 	}
 198:/usr/include/c++/6/bits/basic_string.h **** 
 199:/usr/include/c++/6/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 200:/usr/include/c++/6/bits/basic_string.h ****       // 438. Ambiguity in the "do the right thing" clause
 201:/usr/include/c++/6/bits/basic_string.h ****       template<typename _Integer>
 202:/usr/include/c++/6/bits/basic_string.h ****         void
 203:/usr/include/c++/6/bits/basic_string.h ****         _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 204:/usr/include/c++/6/bits/basic_string.h **** 	{ _M_construct_aux_2(static_cast<size_type>(__beg), __end); }
 205:/usr/include/c++/6/bits/basic_string.h **** 
 206:/usr/include/c++/6/bits/basic_string.h ****       void
 207:/usr/include/c++/6/bits/basic_string.h ****       _M_construct_aux_2(size_type __req, _CharT __c)
GAS LISTING /tmp/ccvmoMuv.s 			page 54


 208:/usr/include/c++/6/bits/basic_string.h ****       { _M_construct(__req, __c); }
 209:/usr/include/c++/6/bits/basic_string.h **** 
 210:/usr/include/c++/6/bits/basic_string.h ****       template<typename _InIterator>
 211:/usr/include/c++/6/bits/basic_string.h ****         void
 212:/usr/include/c++/6/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end)
 213:/usr/include/c++/6/bits/basic_string.h **** 	{
 214:/usr/include/c++/6/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
 215:/usr/include/c++/6/bits/basic_string.h **** 	  _M_construct_aux(__beg, __end, _Integral());
 216:/usr/include/c++/6/bits/basic_string.h ****         }
 217:/usr/include/c++/6/bits/basic_string.h **** 
 218:/usr/include/c++/6/bits/basic_string.h ****       // For Input Iterators, used in istreambuf_iterators, etc.
 219:/usr/include/c++/6/bits/basic_string.h ****       template<typename _InIterator>
 220:/usr/include/c++/6/bits/basic_string.h ****         void
 221:/usr/include/c++/6/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end,
 222:/usr/include/c++/6/bits/basic_string.h **** 		     std::input_iterator_tag);
 223:/usr/include/c++/6/bits/basic_string.h **** 
 224:/usr/include/c++/6/bits/basic_string.h ****       // For forward_iterators up to random_access_iterators, used for
 225:/usr/include/c++/6/bits/basic_string.h ****       // string::iterator, _CharT*, etc.
 226:/usr/include/c++/6/bits/basic_string.h ****       template<typename _FwdIterator>
 227:/usr/include/c++/6/bits/basic_string.h ****         void
 228:/usr/include/c++/6/bits/basic_string.h ****         _M_construct(_FwdIterator __beg, _FwdIterator __end,
 229:/usr/include/c++/6/bits/basic_string.h **** 		     std::forward_iterator_tag);
 230:/usr/include/c++/6/bits/basic_string.h **** 
 231:/usr/include/c++/6/bits/basic_string.h ****       void
 232:/usr/include/c++/6/bits/basic_string.h ****       _M_construct(size_type __req, _CharT __c);
 233:/usr/include/c++/6/bits/basic_string.h **** 
 234:/usr/include/c++/6/bits/basic_string.h ****       allocator_type&
 235:/usr/include/c++/6/bits/basic_string.h ****       _M_get_allocator()
 236:/usr/include/c++/6/bits/basic_string.h ****       { return _M_dataplus; }
 237:/usr/include/c++/6/bits/basic_string.h **** 
 238:/usr/include/c++/6/bits/basic_string.h ****       const allocator_type&
 239:/usr/include/c++/6/bits/basic_string.h ****       _M_get_allocator() const
 240:/usr/include/c++/6/bits/basic_string.h ****       { return _M_dataplus; }
 241:/usr/include/c++/6/bits/basic_string.h **** 
 242:/usr/include/c++/6/bits/basic_string.h ****     private:
 243:/usr/include/c++/6/bits/basic_string.h **** 
 244:/usr/include/c++/6/bits/basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
 245:/usr/include/c++/6/bits/basic_string.h ****       // The explicit instantiations in misc-inst.cc require this due to
 246:/usr/include/c++/6/bits/basic_string.h ****       // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64063
 247:/usr/include/c++/6/bits/basic_string.h ****       template<typename _Tp, bool _Requires =
 248:/usr/include/c++/6/bits/basic_string.h **** 	       !__are_same<_Tp, _CharT*>::__value
 249:/usr/include/c++/6/bits/basic_string.h **** 	       && !__are_same<_Tp, const _CharT*>::__value
 250:/usr/include/c++/6/bits/basic_string.h **** 	       && !__are_same<_Tp, iterator>::__value
 251:/usr/include/c++/6/bits/basic_string.h **** 	       && !__are_same<_Tp, const_iterator>::__value>
 252:/usr/include/c++/6/bits/basic_string.h **** 	struct __enable_if_not_native_iterator
 253:/usr/include/c++/6/bits/basic_string.h **** 	{ typedef basic_string& __type; };
 254:/usr/include/c++/6/bits/basic_string.h ****       template<typename _Tp>
 255:/usr/include/c++/6/bits/basic_string.h **** 	struct __enable_if_not_native_iterator<_Tp, false> { };
 256:/usr/include/c++/6/bits/basic_string.h **** #endif
 257:/usr/include/c++/6/bits/basic_string.h **** 
 258:/usr/include/c++/6/bits/basic_string.h ****       size_type
 259:/usr/include/c++/6/bits/basic_string.h ****       _M_check(size_type __pos, const char* __s) const
 260:/usr/include/c++/6/bits/basic_string.h ****       {
 261:/usr/include/c++/6/bits/basic_string.h **** 	if (__pos > this->size())
 262:/usr/include/c++/6/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
 263:/usr/include/c++/6/bits/basic_string.h **** 				       "this->size() (which is %zu)"),
 264:/usr/include/c++/6/bits/basic_string.h **** 				   __s, __pos, this->size());
GAS LISTING /tmp/ccvmoMuv.s 			page 55


 265:/usr/include/c++/6/bits/basic_string.h **** 	return __pos;
 266:/usr/include/c++/6/bits/basic_string.h ****       }
 267:/usr/include/c++/6/bits/basic_string.h **** 
 268:/usr/include/c++/6/bits/basic_string.h ****       void
 269:/usr/include/c++/6/bits/basic_string.h ****       _M_check_length(size_type __n1, size_type __n2, const char* __s) const
 270:/usr/include/c++/6/bits/basic_string.h ****       {
 271:/usr/include/c++/6/bits/basic_string.h **** 	if (this->max_size() - (this->size() - __n1) < __n2)
 272:/usr/include/c++/6/bits/basic_string.h **** 	  __throw_length_error(__N(__s));
 273:/usr/include/c++/6/bits/basic_string.h ****       }
 274:/usr/include/c++/6/bits/basic_string.h **** 
 275:/usr/include/c++/6/bits/basic_string.h **** 
 276:/usr/include/c++/6/bits/basic_string.h ****       // NB: _M_limit doesn't check for a bad __pos value.
 277:/usr/include/c++/6/bits/basic_string.h ****       size_type
 278:/usr/include/c++/6/bits/basic_string.h ****       _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
 279:/usr/include/c++/6/bits/basic_string.h ****       {
 280:/usr/include/c++/6/bits/basic_string.h **** 	const bool __testoff =  __off < this->size() - __pos;
 281:/usr/include/c++/6/bits/basic_string.h **** 	return __testoff ? __off : this->size() - __pos;
 282:/usr/include/c++/6/bits/basic_string.h ****       }
 283:/usr/include/c++/6/bits/basic_string.h **** 
 284:/usr/include/c++/6/bits/basic_string.h ****       // True if _Rep and source do not overlap.
 285:/usr/include/c++/6/bits/basic_string.h ****       bool
 286:/usr/include/c++/6/bits/basic_string.h ****       _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
 287:/usr/include/c++/6/bits/basic_string.h ****       {
 288:/usr/include/c++/6/bits/basic_string.h **** 	return (less<const _CharT*>()(__s, _M_data())
 289:/usr/include/c++/6/bits/basic_string.h **** 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
 290:/usr/include/c++/6/bits/basic_string.h ****       }
 291:/usr/include/c++/6/bits/basic_string.h **** 
 292:/usr/include/c++/6/bits/basic_string.h ****       // When __n = 1 way faster than the general multichar
 293:/usr/include/c++/6/bits/basic_string.h ****       // traits_type::copy/move/assign.
 294:/usr/include/c++/6/bits/basic_string.h ****       static void
 295:/usr/include/c++/6/bits/basic_string.h ****       _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
 296:/usr/include/c++/6/bits/basic_string.h ****       {
 297:/usr/include/c++/6/bits/basic_string.h **** 	if (__n == 1)
 298:/usr/include/c++/6/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 299:/usr/include/c++/6/bits/basic_string.h **** 	else
 300:/usr/include/c++/6/bits/basic_string.h **** 	  traits_type::copy(__d, __s, __n);
 301:/usr/include/c++/6/bits/basic_string.h ****       }
 302:/usr/include/c++/6/bits/basic_string.h **** 
 303:/usr/include/c++/6/bits/basic_string.h ****       static void
 304:/usr/include/c++/6/bits/basic_string.h ****       _S_move(_CharT* __d, const _CharT* __s, size_type __n)
 305:/usr/include/c++/6/bits/basic_string.h ****       {
 306:/usr/include/c++/6/bits/basic_string.h **** 	if (__n == 1)
 307:/usr/include/c++/6/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 308:/usr/include/c++/6/bits/basic_string.h **** 	else
 309:/usr/include/c++/6/bits/basic_string.h **** 	  traits_type::move(__d, __s, __n);
 310:/usr/include/c++/6/bits/basic_string.h ****       }
 311:/usr/include/c++/6/bits/basic_string.h **** 
 312:/usr/include/c++/6/bits/basic_string.h ****       static void
 313:/usr/include/c++/6/bits/basic_string.h ****       _S_assign(_CharT* __d, size_type __n, _CharT __c)
 314:/usr/include/c++/6/bits/basic_string.h ****       {
 315:/usr/include/c++/6/bits/basic_string.h **** 	if (__n == 1)
 316:/usr/include/c++/6/bits/basic_string.h **** 	  traits_type::assign(*__d, __c);
 317:/usr/include/c++/6/bits/basic_string.h **** 	else
 318:/usr/include/c++/6/bits/basic_string.h **** 	  traits_type::assign(__d, __n, __c);
 319:/usr/include/c++/6/bits/basic_string.h ****       }
 320:/usr/include/c++/6/bits/basic_string.h **** 
 321:/usr/include/c++/6/bits/basic_string.h ****       // _S_copy_chars is a separate template to permit specialization
GAS LISTING /tmp/ccvmoMuv.s 			page 56


 322:/usr/include/c++/6/bits/basic_string.h ****       // to optimize for the common case of pointers as iterators.
 323:/usr/include/c++/6/bits/basic_string.h ****       template<class _Iterator>
 324:/usr/include/c++/6/bits/basic_string.h ****         static void
 325:/usr/include/c++/6/bits/basic_string.h ****         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 326:/usr/include/c++/6/bits/basic_string.h ****         {
 327:/usr/include/c++/6/bits/basic_string.h **** 	  for (; __k1 != __k2; ++__k1, (void)++__p)
 328:/usr/include/c++/6/bits/basic_string.h **** 	    traits_type::assign(*__p, *__k1); // These types are off.
 329:/usr/include/c++/6/bits/basic_string.h **** 	}
 330:/usr/include/c++/6/bits/basic_string.h **** 
 331:/usr/include/c++/6/bits/basic_string.h ****       static void
 332:/usr/include/c++/6/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT
 333:/usr/include/c++/6/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 334:/usr/include/c++/6/bits/basic_string.h **** 
 335:/usr/include/c++/6/bits/basic_string.h ****       static void
 336:/usr/include/c++/6/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
 337:/usr/include/c++/6/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 338:/usr/include/c++/6/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 339:/usr/include/c++/6/bits/basic_string.h **** 
 340:/usr/include/c++/6/bits/basic_string.h ****       static void
 341:/usr/include/c++/6/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
 342:/usr/include/c++/6/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 343:/usr/include/c++/6/bits/basic_string.h **** 
 344:/usr/include/c++/6/bits/basic_string.h ****       static void
 345:/usr/include/c++/6/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
 346:/usr/include/c++/6/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 347:/usr/include/c++/6/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 348:/usr/include/c++/6/bits/basic_string.h **** 
 349:/usr/include/c++/6/bits/basic_string.h ****       static int
 350:/usr/include/c++/6/bits/basic_string.h ****       _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
 351:/usr/include/c++/6/bits/basic_string.h ****       {
 352:/usr/include/c++/6/bits/basic_string.h **** 	const difference_type __d = difference_type(__n1 - __n2);
 353:/usr/include/c++/6/bits/basic_string.h **** 
 354:/usr/include/c++/6/bits/basic_string.h **** 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
 355:/usr/include/c++/6/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__max;
 356:/usr/include/c++/6/bits/basic_string.h **** 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
 357:/usr/include/c++/6/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__min;
 358:/usr/include/c++/6/bits/basic_string.h **** 	else
 359:/usr/include/c++/6/bits/basic_string.h **** 	  return int(__d);
 360:/usr/include/c++/6/bits/basic_string.h ****       }
 361:/usr/include/c++/6/bits/basic_string.h **** 
 362:/usr/include/c++/6/bits/basic_string.h ****       void
 363:/usr/include/c++/6/bits/basic_string.h ****       _M_assign(const basic_string& __rcs);
 364:/usr/include/c++/6/bits/basic_string.h **** 
 365:/usr/include/c++/6/bits/basic_string.h ****       void
 366:/usr/include/c++/6/bits/basic_string.h ****       _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
 367:/usr/include/c++/6/bits/basic_string.h **** 		size_type __len2);
 368:/usr/include/c++/6/bits/basic_string.h **** 
 369:/usr/include/c++/6/bits/basic_string.h ****       void
 370:/usr/include/c++/6/bits/basic_string.h ****       _M_erase(size_type __pos, size_type __n);
 371:/usr/include/c++/6/bits/basic_string.h **** 
 372:/usr/include/c++/6/bits/basic_string.h ****     public:
 373:/usr/include/c++/6/bits/basic_string.h ****       // Construct/copy/destroy:
 374:/usr/include/c++/6/bits/basic_string.h ****       // NB: We overload ctors in some cases instead of using default
 375:/usr/include/c++/6/bits/basic_string.h ****       // arguments, per 17.4.4.4 para. 2 item 2.
 376:/usr/include/c++/6/bits/basic_string.h **** 
 377:/usr/include/c++/6/bits/basic_string.h ****       /**
 378:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Default constructor creates an empty string.
GAS LISTING /tmp/ccvmoMuv.s 			page 57


 379:/usr/include/c++/6/bits/basic_string.h ****        */
 380:/usr/include/c++/6/bits/basic_string.h ****       basic_string()
 381:/usr/include/c++/6/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
 382:/usr/include/c++/6/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
 383:/usr/include/c++/6/bits/basic_string.h ****       { _M_set_length(0); }
 384:/usr/include/c++/6/bits/basic_string.h **** 
 385:/usr/include/c++/6/bits/basic_string.h ****       /**
 386:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Construct an empty string using allocator @a a.
 387:/usr/include/c++/6/bits/basic_string.h ****        */
 388:/usr/include/c++/6/bits/basic_string.h ****       explicit
 389:/usr/include/c++/6/bits/basic_string.h ****       basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT
 390:/usr/include/c++/6/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 391:/usr/include/c++/6/bits/basic_string.h ****       { _M_set_length(0); }
 392:/usr/include/c++/6/bits/basic_string.h **** 
 393:/usr/include/c++/6/bits/basic_string.h ****       /**
 394:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Construct string with copy of value of @a __str.
 395:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __str  Source string.
 396:/usr/include/c++/6/bits/basic_string.h ****        */
 397:/usr/include/c++/6/bits/basic_string.h ****       basic_string(const basic_string& __str)
 398:/usr/include/c++/6/bits/basic_string.h ****       : _M_dataplus(_M_local_data(),
 399:/usr/include/c++/6/bits/basic_string.h **** 		    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
 400:/usr/include/c++/6/bits/basic_string.h ****       { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
 401:/usr/include/c++/6/bits/basic_string.h **** 
 402:/usr/include/c++/6/bits/basic_string.h ****       /**
 403:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 404:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __str  Source string.
 405:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 406:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __n  Number of characters to copy (default remainder).
 407:/usr/include/c++/6/bits/basic_string.h ****        */
 408:/usr/include/c++/6/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 409:/usr/include/c++/6/bits/basic_string.h ****       // 2402. [this constructor] shouldn't use Allocator()
 410:/usr/include/c++/6/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 411:/usr/include/c++/6/bits/basic_string.h **** 		   size_type __n = npos)
 412:/usr/include/c++/6/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
 413:/usr/include/c++/6/bits/basic_string.h ****       {
 414:/usr/include/c++/6/bits/basic_string.h **** 	const _CharT* __start = __str._M_data()
 415:/usr/include/c++/6/bits/basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 416:/usr/include/c++/6/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 417:/usr/include/c++/6/bits/basic_string.h ****       }
 418:/usr/include/c++/6/bits/basic_string.h **** 
 419:/usr/include/c++/6/bits/basic_string.h ****       /**
 420:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 421:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __str  Source string.
 422:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 423:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __n  Number of characters to copy (default remainder).
 424:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 425:/usr/include/c++/6/bits/basic_string.h ****        */
 426:/usr/include/c++/6/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 427:/usr/include/c++/6/bits/basic_string.h **** 		   size_type __n, const _Alloc& __a)
 428:/usr/include/c++/6/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 429:/usr/include/c++/6/bits/basic_string.h ****       {
 430:/usr/include/c++/6/bits/basic_string.h **** 	const _CharT* __start
 431:/usr/include/c++/6/bits/basic_string.h **** 	  = __str._M_data() + __str._M_check(__pos, "string::string");
 432:/usr/include/c++/6/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 433:/usr/include/c++/6/bits/basic_string.h ****       }
 434:/usr/include/c++/6/bits/basic_string.h **** 
 435:/usr/include/c++/6/bits/basic_string.h ****       /**
GAS LISTING /tmp/ccvmoMuv.s 			page 58


 436:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Construct string initialized by a character %array.
 437:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __s  Source character %array.
 438:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 439:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 440:/usr/include/c++/6/bits/basic_string.h ****        *
 441:/usr/include/c++/6/bits/basic_string.h ****        *  NB: @a __s must have at least @a __n characters, &apos;\\0&apos;
 442:/usr/include/c++/6/bits/basic_string.h ****        *  has no special meaning.
 443:/usr/include/c++/6/bits/basic_string.h ****        */
 444:/usr/include/c++/6/bits/basic_string.h ****       basic_string(const _CharT* __s, size_type __n,
 445:/usr/include/c++/6/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc())
 446:/usr/include/c++/6/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 447:/usr/include/c++/6/bits/basic_string.h ****       { _M_construct(__s, __s + __n); }
 448:/usr/include/c++/6/bits/basic_string.h **** 
 449:/usr/include/c++/6/bits/basic_string.h ****       /**
 450:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Construct string as copy of a C string.
 451:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __s  Source C string.
 452:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 453:/usr/include/c++/6/bits/basic_string.h ****        */
 454:/usr/include/c++/6/bits/basic_string.h ****       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 455:/usr/include/c++/6/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 456:/usr/include/c++/6/bits/basic_string.h ****       { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 457:/usr/include/c++/6/bits/basic_string.h **** 
 458:/usr/include/c++/6/bits/basic_string.h ****       /**
 459:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Construct string as multiple characters.
 460:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __n  Number of characters.
 461:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __c  Character to use.
 462:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 463:/usr/include/c++/6/bits/basic_string.h ****        */
 464:/usr/include/c++/6/bits/basic_string.h ****       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
 465:/usr/include/c++/6/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 466:/usr/include/c++/6/bits/basic_string.h ****       { _M_construct(__n, __c); }
 467:/usr/include/c++/6/bits/basic_string.h **** 
 468:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
 469:/usr/include/c++/6/bits/basic_string.h ****       /**
 470:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Move construct string.
 471:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __str  Source string.
 472:/usr/include/c++/6/bits/basic_string.h ****        *
 473:/usr/include/c++/6/bits/basic_string.h ****        *  The newly-created string contains the exact contents of @a __str.
 474:/usr/include/c++/6/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
 475:/usr/include/c++/6/bits/basic_string.h ****        **/
 476:/usr/include/c++/6/bits/basic_string.h ****       basic_string(basic_string&& __str) noexcept
 477:/usr/include/c++/6/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
 478:/usr/include/c++/6/bits/basic_string.h ****       {
 479:/usr/include/c++/6/bits/basic_string.h **** 	if (__str._M_is_local())
 480:/usr/include/c++/6/bits/basic_string.h **** 	  {
 481:/usr/include/c++/6/bits/basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 482:/usr/include/c++/6/bits/basic_string.h **** 			      _S_local_capacity + 1);
 483:/usr/include/c++/6/bits/basic_string.h **** 	  }
 484:/usr/include/c++/6/bits/basic_string.h **** 	else
 485:/usr/include/c++/6/bits/basic_string.h **** 	  {
 486:/usr/include/c++/6/bits/basic_string.h **** 	    _M_data(__str._M_data());
 487:/usr/include/c++/6/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 488:/usr/include/c++/6/bits/basic_string.h **** 	  }
 489:/usr/include/c++/6/bits/basic_string.h **** 
 490:/usr/include/c++/6/bits/basic_string.h **** 	// Must use _M_length() here not _M_set_length() because
 491:/usr/include/c++/6/bits/basic_string.h **** 	// basic_stringbuf relies on writing into unallocated capacity so
 492:/usr/include/c++/6/bits/basic_string.h **** 	// we mess up the contents if we put a '\0' in the string.
GAS LISTING /tmp/ccvmoMuv.s 			page 59


 493:/usr/include/c++/6/bits/basic_string.h **** 	_M_length(__str.length());
 494:/usr/include/c++/6/bits/basic_string.h **** 	__str._M_data(__str._M_local_data());
 495:/usr/include/c++/6/bits/basic_string.h **** 	__str._M_set_length(0);
 496:/usr/include/c++/6/bits/basic_string.h ****       }
 497:/usr/include/c++/6/bits/basic_string.h **** 
 498:/usr/include/c++/6/bits/basic_string.h ****       /**
 499:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Construct string from an initializer %list.
 500:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __l  std::initializer_list of characters.
 501:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 502:/usr/include/c++/6/bits/basic_string.h ****        */
 503:/usr/include/c++/6/bits/basic_string.h ****       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
 504:/usr/include/c++/6/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 505:/usr/include/c++/6/bits/basic_string.h ****       { _M_construct(__l.begin(), __l.end()); }
 506:/usr/include/c++/6/bits/basic_string.h **** 
 507:/usr/include/c++/6/bits/basic_string.h ****       basic_string(const basic_string& __str, const _Alloc& __a)
 508:/usr/include/c++/6/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 509:/usr/include/c++/6/bits/basic_string.h ****       { _M_construct(__str.begin(), __str.end()); }
 510:/usr/include/c++/6/bits/basic_string.h **** 
 511:/usr/include/c++/6/bits/basic_string.h ****       basic_string(basic_string&& __str, const _Alloc& __a)
 512:/usr/include/c++/6/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_always_equal())
 513:/usr/include/c++/6/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 514:/usr/include/c++/6/bits/basic_string.h ****       {
 515:/usr/include/c++/6/bits/basic_string.h **** 	if (__str._M_is_local())
 516:/usr/include/c++/6/bits/basic_string.h **** 	  {
 517:/usr/include/c++/6/bits/basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 518:/usr/include/c++/6/bits/basic_string.h **** 			      _S_local_capacity + 1);
 519:/usr/include/c++/6/bits/basic_string.h **** 	    _M_length(__str.length());
 520:/usr/include/c++/6/bits/basic_string.h **** 	    __str._M_set_length(0);
 521:/usr/include/c++/6/bits/basic_string.h **** 	  }
 522:/usr/include/c++/6/bits/basic_string.h **** 	else if (_Alloc_traits::_S_always_equal()
 523:/usr/include/c++/6/bits/basic_string.h **** 	    || __str.get_allocator() == __a)
 524:/usr/include/c++/6/bits/basic_string.h **** 	  {
 525:/usr/include/c++/6/bits/basic_string.h **** 	    _M_data(__str._M_data());
 526:/usr/include/c++/6/bits/basic_string.h **** 	    _M_length(__str.length());
 527:/usr/include/c++/6/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 528:/usr/include/c++/6/bits/basic_string.h **** 	    __str._M_data(__str._M_local_buf);
 529:/usr/include/c++/6/bits/basic_string.h **** 	    __str._M_set_length(0);
 530:/usr/include/c++/6/bits/basic_string.h **** 	  }
 531:/usr/include/c++/6/bits/basic_string.h **** 	else
 532:/usr/include/c++/6/bits/basic_string.h **** 	  _M_construct(__str.begin(), __str.end());
 533:/usr/include/c++/6/bits/basic_string.h ****       }
 534:/usr/include/c++/6/bits/basic_string.h **** 
 535:/usr/include/c++/6/bits/basic_string.h **** #endif // C++11
 536:/usr/include/c++/6/bits/basic_string.h **** 
 537:/usr/include/c++/6/bits/basic_string.h ****       /**
 538:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Construct string as copy of a range.
 539:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __beg  Start of range.
 540:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __end  End of range.
 541:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 542:/usr/include/c++/6/bits/basic_string.h ****        */
 543:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
 544:/usr/include/c++/6/bits/basic_string.h ****       template<typename _InputIterator,
 545:/usr/include/c++/6/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 546:/usr/include/c++/6/bits/basic_string.h **** #else
 547:/usr/include/c++/6/bits/basic_string.h ****       template<typename _InputIterator>
 548:/usr/include/c++/6/bits/basic_string.h **** #endif
 549:/usr/include/c++/6/bits/basic_string.h ****         basic_string(_InputIterator __beg, _InputIterator __end,
GAS LISTING /tmp/ccvmoMuv.s 			page 60


 550:/usr/include/c++/6/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
 551:/usr/include/c++/6/bits/basic_string.h **** 	: _M_dataplus(_M_local_data(), __a)
 552:/usr/include/c++/6/bits/basic_string.h **** 	{ _M_construct(__beg, __end); }
 553:/usr/include/c++/6/bits/basic_string.h **** 
 554:/usr/include/c++/6/bits/basic_string.h ****       /**
 555:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Destroy the string instance.
 556:/usr/include/c++/6/bits/basic_string.h ****        */
 557:/usr/include/c++/6/bits/basic_string.h ****       ~basic_string()
 558:/usr/include/c++/6/bits/basic_string.h ****       { _M_dispose(); }
 559:/usr/include/c++/6/bits/basic_string.h **** 
 560:/usr/include/c++/6/bits/basic_string.h ****       /**
 561:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Assign the value of @a str to this string.
 562:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __str  Source string.
 563:/usr/include/c++/6/bits/basic_string.h ****        */
 564:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
 565:/usr/include/c++/6/bits/basic_string.h ****       operator=(const basic_string& __str)
 566:/usr/include/c++/6/bits/basic_string.h ****       {
 567:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
 568:/usr/include/c++/6/bits/basic_string.h **** 	if (_Alloc_traits::_S_propagate_on_copy_assign())
 569:/usr/include/c++/6/bits/basic_string.h **** 	  {
 570:/usr/include/c++/6/bits/basic_string.h **** 	    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
 571:/usr/include/c++/6/bits/basic_string.h **** 		&& _M_get_allocator() != __str._M_get_allocator())
 572:/usr/include/c++/6/bits/basic_string.h **** 	      {
 573:/usr/include/c++/6/bits/basic_string.h **** 		// Propagating allocator cannot free existing storage so must
 574:/usr/include/c++/6/bits/basic_string.h **** 		// deallocate it before replacing current allocator.
 575:/usr/include/c++/6/bits/basic_string.h **** 		if (__str.size() <= _S_local_capacity)
 576:/usr/include/c++/6/bits/basic_string.h **** 		  {
 577:/usr/include/c++/6/bits/basic_string.h **** 		    _M_destroy(_M_allocated_capacity);
 578:/usr/include/c++/6/bits/basic_string.h **** 		    _M_data(_M_local_data());
 579:/usr/include/c++/6/bits/basic_string.h **** 		    _M_set_length(0);
 580:/usr/include/c++/6/bits/basic_string.h **** 		  }
 581:/usr/include/c++/6/bits/basic_string.h **** 		else
 582:/usr/include/c++/6/bits/basic_string.h **** 		  {
 583:/usr/include/c++/6/bits/basic_string.h **** 		    const auto __len = __str.size();
 584:/usr/include/c++/6/bits/basic_string.h **** 		    auto __alloc = __str._M_get_allocator();
 585:/usr/include/c++/6/bits/basic_string.h **** 		    // If this allocation throws there are no effects:
 586:/usr/include/c++/6/bits/basic_string.h **** 		    auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);
 587:/usr/include/c++/6/bits/basic_string.h **** 		    _M_destroy(_M_allocated_capacity);
 588:/usr/include/c++/6/bits/basic_string.h **** 		    _M_data(__ptr);
 589:/usr/include/c++/6/bits/basic_string.h **** 		    _M_capacity(__len);
 590:/usr/include/c++/6/bits/basic_string.h **** 		    _M_set_length(__len);
 591:/usr/include/c++/6/bits/basic_string.h **** 		  }
 592:/usr/include/c++/6/bits/basic_string.h **** 	      }
 593:/usr/include/c++/6/bits/basic_string.h **** 	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
 594:/usr/include/c++/6/bits/basic_string.h **** 	  }
 595:/usr/include/c++/6/bits/basic_string.h **** #endif
 596:/usr/include/c++/6/bits/basic_string.h **** 	return this->assign(__str);
 597:/usr/include/c++/6/bits/basic_string.h ****       }
 598:/usr/include/c++/6/bits/basic_string.h **** 
 599:/usr/include/c++/6/bits/basic_string.h ****       /**
 600:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Copy contents of @a s into this string.
 601:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __s  Source null-terminated string.
 602:/usr/include/c++/6/bits/basic_string.h ****        */
 603:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
 604:/usr/include/c++/6/bits/basic_string.h ****       operator=(const _CharT* __s)
 605:/usr/include/c++/6/bits/basic_string.h ****       { return this->assign(__s); }
 606:/usr/include/c++/6/bits/basic_string.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 61


 607:/usr/include/c++/6/bits/basic_string.h ****       /**
 608:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Set value to string of length 1.
 609:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __c  Source character.
 610:/usr/include/c++/6/bits/basic_string.h ****        *
 611:/usr/include/c++/6/bits/basic_string.h ****        *  Assigning to a character makes this string length 1 and
 612:/usr/include/c++/6/bits/basic_string.h ****        *  (*this)[0] == @a c.
 613:/usr/include/c++/6/bits/basic_string.h ****        */
 614:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
 615:/usr/include/c++/6/bits/basic_string.h ****       operator=(_CharT __c)
 616:/usr/include/c++/6/bits/basic_string.h ****       {
 617:/usr/include/c++/6/bits/basic_string.h **** 	this->assign(1, __c);
 618:/usr/include/c++/6/bits/basic_string.h **** 	return *this;
 619:/usr/include/c++/6/bits/basic_string.h ****       }
 620:/usr/include/c++/6/bits/basic_string.h **** 
 621:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
 622:/usr/include/c++/6/bits/basic_string.h ****       /**
 623:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Move assign the value of @a str to this string.
 624:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __str  Source string.
 625:/usr/include/c++/6/bits/basic_string.h ****        *
 626:/usr/include/c++/6/bits/basic_string.h ****        *  The contents of @a str are moved into this string (without copying).
 627:/usr/include/c++/6/bits/basic_string.h ****        *  @a str is a valid, but unspecified string.
 628:/usr/include/c++/6/bits/basic_string.h ****        **/
 629:/usr/include/c++/6/bits/basic_string.h ****       // PR 58265, this should be noexcept.
 630:/usr/include/c++/6/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 631:/usr/include/c++/6/bits/basic_string.h ****       // 2063. Contradictory requirements for string move assignment
 632:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
 633:/usr/include/c++/6/bits/basic_string.h ****       operator=(basic_string&& __str)
 634:/usr/include/c++/6/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
 635:/usr/include/c++/6/bits/basic_string.h ****       {
 636:/usr/include/c++/6/bits/basic_string.h **** 	if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
 637:/usr/include/c++/6/bits/basic_string.h **** 	    && !_Alloc_traits::_S_always_equal()
 638:/usr/include/c++/6/bits/basic_string.h **** 	    && _M_get_allocator() != __str._M_get_allocator())
 639:/usr/include/c++/6/bits/basic_string.h **** 	  {
 640:/usr/include/c++/6/bits/basic_string.h **** 	    // Destroy existing storage before replacing allocator.
 641:/usr/include/c++/6/bits/basic_string.h **** 	    _M_destroy(_M_allocated_capacity);
 642:/usr/include/c++/6/bits/basic_string.h **** 	    _M_data(_M_local_data());
 643:/usr/include/c++/6/bits/basic_string.h **** 	    _M_set_length(0);
 644:/usr/include/c++/6/bits/basic_string.h **** 	  }
 645:/usr/include/c++/6/bits/basic_string.h **** 	// Replace allocator if POCMA is true.
 646:/usr/include/c++/6/bits/basic_string.h **** 	std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());
 647:/usr/include/c++/6/bits/basic_string.h **** 
 648:/usr/include/c++/6/bits/basic_string.h **** 	if (!__str._M_is_local()
 649:/usr/include/c++/6/bits/basic_string.h **** 	    && (_Alloc_traits::_S_propagate_on_move_assign()
 650:/usr/include/c++/6/bits/basic_string.h **** 	      || _Alloc_traits::_S_always_equal()))
 651:/usr/include/c++/6/bits/basic_string.h **** 	  {
 652:/usr/include/c++/6/bits/basic_string.h **** 	    pointer __data = nullptr;
 653:/usr/include/c++/6/bits/basic_string.h **** 	    size_type __capacity;
 654:/usr/include/c++/6/bits/basic_string.h **** 	    if (!_M_is_local())
 655:/usr/include/c++/6/bits/basic_string.h **** 	      {
 656:/usr/include/c++/6/bits/basic_string.h **** 		if (_Alloc_traits::_S_always_equal())
 657:/usr/include/c++/6/bits/basic_string.h **** 		  {
 658:/usr/include/c++/6/bits/basic_string.h **** 		    __data = _M_data();
 659:/usr/include/c++/6/bits/basic_string.h **** 		    __capacity = _M_allocated_capacity;
 660:/usr/include/c++/6/bits/basic_string.h **** 		  }
 661:/usr/include/c++/6/bits/basic_string.h **** 		else
 662:/usr/include/c++/6/bits/basic_string.h **** 		  _M_destroy(_M_allocated_capacity);
 663:/usr/include/c++/6/bits/basic_string.h **** 	      }
GAS LISTING /tmp/ccvmoMuv.s 			page 62


 664:/usr/include/c++/6/bits/basic_string.h **** 
 665:/usr/include/c++/6/bits/basic_string.h **** 	    _M_data(__str._M_data());
 666:/usr/include/c++/6/bits/basic_string.h **** 	    _M_length(__str.length());
 667:/usr/include/c++/6/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 668:/usr/include/c++/6/bits/basic_string.h **** 	    if (__data)
 669:/usr/include/c++/6/bits/basic_string.h **** 	      {
 670:/usr/include/c++/6/bits/basic_string.h **** 		__str._M_data(__data);
 671:/usr/include/c++/6/bits/basic_string.h **** 		__str._M_capacity(__capacity);
 672:/usr/include/c++/6/bits/basic_string.h **** 	      }
 673:/usr/include/c++/6/bits/basic_string.h **** 	    else
 674:/usr/include/c++/6/bits/basic_string.h **** 	      __str._M_data(__str._M_local_buf);
 675:/usr/include/c++/6/bits/basic_string.h **** 	  }
 676:/usr/include/c++/6/bits/basic_string.h **** 	else
 677:/usr/include/c++/6/bits/basic_string.h **** 	    assign(__str);
 678:/usr/include/c++/6/bits/basic_string.h **** 	__str.clear();
 679:/usr/include/c++/6/bits/basic_string.h **** 	return *this;
 680:/usr/include/c++/6/bits/basic_string.h ****       }
 681:/usr/include/c++/6/bits/basic_string.h **** 
 682:/usr/include/c++/6/bits/basic_string.h ****       /**
 683:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Set value to string constructed from initializer %list.
 684:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __l  std::initializer_list.
 685:/usr/include/c++/6/bits/basic_string.h ****        */
 686:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
 687:/usr/include/c++/6/bits/basic_string.h ****       operator=(initializer_list<_CharT> __l)
 688:/usr/include/c++/6/bits/basic_string.h ****       {
 689:/usr/include/c++/6/bits/basic_string.h **** 	this->assign(__l.begin(), __l.size());
 690:/usr/include/c++/6/bits/basic_string.h **** 	return *this;
 691:/usr/include/c++/6/bits/basic_string.h ****       }
 692:/usr/include/c++/6/bits/basic_string.h **** #endif // C++11
 693:/usr/include/c++/6/bits/basic_string.h **** 
 694:/usr/include/c++/6/bits/basic_string.h ****       // Iterators:
 695:/usr/include/c++/6/bits/basic_string.h ****       /**
 696:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read/write iterator that points to the first character in
 697:/usr/include/c++/6/bits/basic_string.h ****        *  the %string.
 698:/usr/include/c++/6/bits/basic_string.h ****        */
 699:/usr/include/c++/6/bits/basic_string.h ****       iterator
 700:/usr/include/c++/6/bits/basic_string.h ****       begin() _GLIBCXX_NOEXCEPT
 701:/usr/include/c++/6/bits/basic_string.h ****       { return iterator(_M_data()); }
 702:/usr/include/c++/6/bits/basic_string.h **** 
 703:/usr/include/c++/6/bits/basic_string.h ****       /**
 704:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 705:/usr/include/c++/6/bits/basic_string.h ****        *  character in the %string.
 706:/usr/include/c++/6/bits/basic_string.h ****        */
 707:/usr/include/c++/6/bits/basic_string.h ****       const_iterator
 708:/usr/include/c++/6/bits/basic_string.h ****       begin() const _GLIBCXX_NOEXCEPT
 709:/usr/include/c++/6/bits/basic_string.h ****       { return const_iterator(_M_data()); }
 710:/usr/include/c++/6/bits/basic_string.h **** 
 711:/usr/include/c++/6/bits/basic_string.h ****       /**
 712:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read/write iterator that points one past the last
 713:/usr/include/c++/6/bits/basic_string.h ****        *  character in the %string.
 714:/usr/include/c++/6/bits/basic_string.h ****        */
 715:/usr/include/c++/6/bits/basic_string.h ****       iterator
 716:/usr/include/c++/6/bits/basic_string.h ****       end() _GLIBCXX_NOEXCEPT
 717:/usr/include/c++/6/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
 718:/usr/include/c++/6/bits/basic_string.h **** 
 719:/usr/include/c++/6/bits/basic_string.h ****       /**
 720:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
GAS LISTING /tmp/ccvmoMuv.s 			page 63


 721:/usr/include/c++/6/bits/basic_string.h ****        *  last character in the %string.
 722:/usr/include/c++/6/bits/basic_string.h ****        */
 723:/usr/include/c++/6/bits/basic_string.h ****       const_iterator
 724:/usr/include/c++/6/bits/basic_string.h ****       end() const _GLIBCXX_NOEXCEPT
 725:/usr/include/c++/6/bits/basic_string.h ****       { return const_iterator(_M_data() + this->size()); }
 726:/usr/include/c++/6/bits/basic_string.h **** 
 727:/usr/include/c++/6/bits/basic_string.h ****       /**
 728:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to the last
 729:/usr/include/c++/6/bits/basic_string.h ****        *  character in the %string.  Iteration is done in reverse element
 730:/usr/include/c++/6/bits/basic_string.h ****        *  order.
 731:/usr/include/c++/6/bits/basic_string.h ****        */
 732:/usr/include/c++/6/bits/basic_string.h ****       reverse_iterator
 733:/usr/include/c++/6/bits/basic_string.h ****       rbegin() _GLIBCXX_NOEXCEPT
 734:/usr/include/c++/6/bits/basic_string.h ****       { return reverse_iterator(this->end()); }
 735:/usr/include/c++/6/bits/basic_string.h **** 
 736:/usr/include/c++/6/bits/basic_string.h ****       /**
 737:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 738:/usr/include/c++/6/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 739:/usr/include/c++/6/bits/basic_string.h ****        *  reverse element order.
 740:/usr/include/c++/6/bits/basic_string.h ****        */
 741:/usr/include/c++/6/bits/basic_string.h ****       const_reverse_iterator
 742:/usr/include/c++/6/bits/basic_string.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 743:/usr/include/c++/6/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 744:/usr/include/c++/6/bits/basic_string.h **** 
 745:/usr/include/c++/6/bits/basic_string.h ****       /**
 746:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to one before the
 747:/usr/include/c++/6/bits/basic_string.h ****        *  first character in the %string.  Iteration is done in reverse
 748:/usr/include/c++/6/bits/basic_string.h ****        *  element order.
 749:/usr/include/c++/6/bits/basic_string.h ****        */
 750:/usr/include/c++/6/bits/basic_string.h ****       reverse_iterator
 751:/usr/include/c++/6/bits/basic_string.h ****       rend() _GLIBCXX_NOEXCEPT
 752:/usr/include/c++/6/bits/basic_string.h ****       { return reverse_iterator(this->begin()); }
 753:/usr/include/c++/6/bits/basic_string.h **** 
 754:/usr/include/c++/6/bits/basic_string.h ****       /**
 755:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 756:/usr/include/c++/6/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
 757:/usr/include/c++/6/bits/basic_string.h ****        *  is done in reverse element order.
 758:/usr/include/c++/6/bits/basic_string.h ****        */
 759:/usr/include/c++/6/bits/basic_string.h ****       const_reverse_iterator
 760:/usr/include/c++/6/bits/basic_string.h ****       rend() const _GLIBCXX_NOEXCEPT
 761:/usr/include/c++/6/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 762:/usr/include/c++/6/bits/basic_string.h **** 
 763:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
 764:/usr/include/c++/6/bits/basic_string.h ****       /**
 765:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 766:/usr/include/c++/6/bits/basic_string.h ****        *  character in the %string.
 767:/usr/include/c++/6/bits/basic_string.h ****        */
 768:/usr/include/c++/6/bits/basic_string.h ****       const_iterator
 769:/usr/include/c++/6/bits/basic_string.h ****       cbegin() const noexcept
 770:/usr/include/c++/6/bits/basic_string.h ****       { return const_iterator(this->_M_data()); }
 771:/usr/include/c++/6/bits/basic_string.h **** 
 772:/usr/include/c++/6/bits/basic_string.h ****       /**
 773:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 774:/usr/include/c++/6/bits/basic_string.h ****        *  last character in the %string.
 775:/usr/include/c++/6/bits/basic_string.h ****        */
 776:/usr/include/c++/6/bits/basic_string.h ****       const_iterator
 777:/usr/include/c++/6/bits/basic_string.h ****       cend() const noexcept
GAS LISTING /tmp/ccvmoMuv.s 			page 64


 778:/usr/include/c++/6/bits/basic_string.h ****       { return const_iterator(this->_M_data() + this->size()); }
 779:/usr/include/c++/6/bits/basic_string.h **** 
 780:/usr/include/c++/6/bits/basic_string.h ****       /**
 781:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 782:/usr/include/c++/6/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 783:/usr/include/c++/6/bits/basic_string.h ****        *  reverse element order.
 784:/usr/include/c++/6/bits/basic_string.h ****        */
 785:/usr/include/c++/6/bits/basic_string.h ****       const_reverse_iterator
 786:/usr/include/c++/6/bits/basic_string.h ****       crbegin() const noexcept
 787:/usr/include/c++/6/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 788:/usr/include/c++/6/bits/basic_string.h **** 
 789:/usr/include/c++/6/bits/basic_string.h ****       /**
 790:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 791:/usr/include/c++/6/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
 792:/usr/include/c++/6/bits/basic_string.h ****        *  is done in reverse element order.
 793:/usr/include/c++/6/bits/basic_string.h ****        */
 794:/usr/include/c++/6/bits/basic_string.h ****       const_reverse_iterator
 795:/usr/include/c++/6/bits/basic_string.h ****       crend() const noexcept
 796:/usr/include/c++/6/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 797:/usr/include/c++/6/bits/basic_string.h **** #endif
 798:/usr/include/c++/6/bits/basic_string.h **** 
 799:/usr/include/c++/6/bits/basic_string.h ****     public:
 800:/usr/include/c++/6/bits/basic_string.h ****       // Capacity:
 801:/usr/include/c++/6/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 802:/usr/include/c++/6/bits/basic_string.h ****       ///  null-termination.
 803:/usr/include/c++/6/bits/basic_string.h ****       size_type
 804:/usr/include/c++/6/bits/basic_string.h ****       size() const _GLIBCXX_NOEXCEPT
 805:/usr/include/c++/6/bits/basic_string.h ****       { return _M_string_length; }
 806:/usr/include/c++/6/bits/basic_string.h **** 
 807:/usr/include/c++/6/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 808:/usr/include/c++/6/bits/basic_string.h ****       ///  null-termination.
 809:/usr/include/c++/6/bits/basic_string.h ****       size_type
 810:/usr/include/c++/6/bits/basic_string.h ****       length() const _GLIBCXX_NOEXCEPT
 811:/usr/include/c++/6/bits/basic_string.h ****       { return _M_string_length; }
 812:/usr/include/c++/6/bits/basic_string.h **** 
 813:/usr/include/c++/6/bits/basic_string.h ****       ///  Returns the size() of the largest possible %string.
 814:/usr/include/c++/6/bits/basic_string.h ****       size_type
 815:/usr/include/c++/6/bits/basic_string.h ****       max_size() const _GLIBCXX_NOEXCEPT
 816:/usr/include/c++/6/bits/basic_string.h ****       { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
 817:/usr/include/c++/6/bits/basic_string.h **** 
 818:/usr/include/c++/6/bits/basic_string.h ****       /**
 819:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 820:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 821:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __c  Character to fill any new elements.
 822:/usr/include/c++/6/bits/basic_string.h ****        *
 823:/usr/include/c++/6/bits/basic_string.h ****        *  This function will %resize the %string to the specified
 824:/usr/include/c++/6/bits/basic_string.h ****        *  number of characters.  If the number is smaller than the
 825:/usr/include/c++/6/bits/basic_string.h ****        *  %string's current size the %string is truncated, otherwise
 826:/usr/include/c++/6/bits/basic_string.h ****        *  the %string is extended and new elements are %set to @a __c.
 827:/usr/include/c++/6/bits/basic_string.h ****        */
 828:/usr/include/c++/6/bits/basic_string.h ****       void
 829:/usr/include/c++/6/bits/basic_string.h ****       resize(size_type __n, _CharT __c);
 830:/usr/include/c++/6/bits/basic_string.h **** 
 831:/usr/include/c++/6/bits/basic_string.h ****       /**
 832:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 833:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 834:/usr/include/c++/6/bits/basic_string.h ****        *
GAS LISTING /tmp/ccvmoMuv.s 			page 65


 835:/usr/include/c++/6/bits/basic_string.h ****        *  This function will resize the %string to the specified length.  If
 836:/usr/include/c++/6/bits/basic_string.h ****        *  the new size is smaller than the %string's current size the %string
 837:/usr/include/c++/6/bits/basic_string.h ****        *  is truncated, otherwise the %string is extended and new characters
 838:/usr/include/c++/6/bits/basic_string.h ****        *  are default-constructed.  For basic types such as char, this means
 839:/usr/include/c++/6/bits/basic_string.h ****        *  setting them to 0.
 840:/usr/include/c++/6/bits/basic_string.h ****        */
 841:/usr/include/c++/6/bits/basic_string.h ****       void
 842:/usr/include/c++/6/bits/basic_string.h ****       resize(size_type __n)
 843:/usr/include/c++/6/bits/basic_string.h ****       { this->resize(__n, _CharT()); }
 844:/usr/include/c++/6/bits/basic_string.h **** 
 845:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
 846:/usr/include/c++/6/bits/basic_string.h ****       ///  A non-binding request to reduce capacity() to size().
 847:/usr/include/c++/6/bits/basic_string.h ****       void
 848:/usr/include/c++/6/bits/basic_string.h ****       shrink_to_fit() noexcept
 849:/usr/include/c++/6/bits/basic_string.h ****       {
 850:/usr/include/c++/6/bits/basic_string.h **** #if __cpp_exceptions
 851:/usr/include/c++/6/bits/basic_string.h **** 	if (capacity() > size())
 852:/usr/include/c++/6/bits/basic_string.h **** 	  {
 853:/usr/include/c++/6/bits/basic_string.h **** 	    try
 854:/usr/include/c++/6/bits/basic_string.h **** 	      { reserve(0); }
 855:/usr/include/c++/6/bits/basic_string.h **** 	    catch(...)
 856:/usr/include/c++/6/bits/basic_string.h **** 	      { }
 857:/usr/include/c++/6/bits/basic_string.h **** 	  }
 858:/usr/include/c++/6/bits/basic_string.h **** #endif
 859:/usr/include/c++/6/bits/basic_string.h ****       }
 860:/usr/include/c++/6/bits/basic_string.h **** #endif
 861:/usr/include/c++/6/bits/basic_string.h **** 
 862:/usr/include/c++/6/bits/basic_string.h ****       /**
 863:/usr/include/c++/6/bits/basic_string.h ****        *  Returns the total number of characters that the %string can hold
 864:/usr/include/c++/6/bits/basic_string.h ****        *  before needing to allocate more memory.
 865:/usr/include/c++/6/bits/basic_string.h ****        */
 866:/usr/include/c++/6/bits/basic_string.h ****       size_type
 867:/usr/include/c++/6/bits/basic_string.h ****       capacity() const _GLIBCXX_NOEXCEPT
 868:/usr/include/c++/6/bits/basic_string.h ****       {
 869:/usr/include/c++/6/bits/basic_string.h **** 	return _M_is_local() ? size_type(_S_local_capacity)
 870:/usr/include/c++/6/bits/basic_string.h **** 	                     : _M_allocated_capacity;
 871:/usr/include/c++/6/bits/basic_string.h ****       }
 872:/usr/include/c++/6/bits/basic_string.h **** 
 873:/usr/include/c++/6/bits/basic_string.h ****       /**
 874:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
 875:/usr/include/c++/6/bits/basic_string.h ****        *          characters.
 876:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __res_arg  Number of characters required.
 877:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If @a __res_arg exceeds @c max_size().
 878:/usr/include/c++/6/bits/basic_string.h ****        *
 879:/usr/include/c++/6/bits/basic_string.h ****        *  This function attempts to reserve enough memory for the
 880:/usr/include/c++/6/bits/basic_string.h ****        *  %string to hold the specified number of characters.  If the
 881:/usr/include/c++/6/bits/basic_string.h ****        *  number requested is more than max_size(), length_error is
 882:/usr/include/c++/6/bits/basic_string.h ****        *  thrown.
 883:/usr/include/c++/6/bits/basic_string.h ****        *
 884:/usr/include/c++/6/bits/basic_string.h ****        *  The advantage of this function is that if optimal code is a
 885:/usr/include/c++/6/bits/basic_string.h ****        *  necessity and the user can determine the string length that will be
 886:/usr/include/c++/6/bits/basic_string.h ****        *  required, the user can reserve the memory in %advance, and thus
 887:/usr/include/c++/6/bits/basic_string.h ****        *  prevent a possible reallocation of memory and copying of %string
 888:/usr/include/c++/6/bits/basic_string.h ****        *  data.
 889:/usr/include/c++/6/bits/basic_string.h ****        */
 890:/usr/include/c++/6/bits/basic_string.h ****       void
 891:/usr/include/c++/6/bits/basic_string.h ****       reserve(size_type __res_arg = 0);
GAS LISTING /tmp/ccvmoMuv.s 			page 66


 892:/usr/include/c++/6/bits/basic_string.h **** 
 893:/usr/include/c++/6/bits/basic_string.h ****       /**
 894:/usr/include/c++/6/bits/basic_string.h ****        *  Erases the string, making it empty.
 895:/usr/include/c++/6/bits/basic_string.h ****        */
 896:/usr/include/c++/6/bits/basic_string.h ****       void
 897:/usr/include/c++/6/bits/basic_string.h ****       clear() _GLIBCXX_NOEXCEPT
 898:/usr/include/c++/6/bits/basic_string.h ****       { _M_set_length(0); }
 899:/usr/include/c++/6/bits/basic_string.h **** 
 900:/usr/include/c++/6/bits/basic_string.h ****       /**
 901:/usr/include/c++/6/bits/basic_string.h ****        *  Returns true if the %string is empty.  Equivalent to 
 902:/usr/include/c++/6/bits/basic_string.h ****        *  <code>*this == ""</code>.
 903:/usr/include/c++/6/bits/basic_string.h ****        */
 904:/usr/include/c++/6/bits/basic_string.h ****       bool
 905:/usr/include/c++/6/bits/basic_string.h ****       empty() const _GLIBCXX_NOEXCEPT
 906:/usr/include/c++/6/bits/basic_string.h ****       { return this->size() == 0; }
 907:/usr/include/c++/6/bits/basic_string.h **** 
 908:/usr/include/c++/6/bits/basic_string.h ****       // Element access:
 909:/usr/include/c++/6/bits/basic_string.h ****       /**
 910:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
 911:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
 912:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Read-only (constant) reference to the character.
 913:/usr/include/c++/6/bits/basic_string.h ****        *
 914:/usr/include/c++/6/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
 915:/usr/include/c++/6/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
 916:/usr/include/c++/6/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
 917:/usr/include/c++/6/bits/basic_string.h ****        *  see at().)
 918:/usr/include/c++/6/bits/basic_string.h ****        */
 919:/usr/include/c++/6/bits/basic_string.h ****       const_reference
 920:/usr/include/c++/6/bits/basic_string.h ****       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
 921:/usr/include/c++/6/bits/basic_string.h ****       {
 922:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
 923:/usr/include/c++/6/bits/basic_string.h **** 	return _M_data()[__pos];
 924:/usr/include/c++/6/bits/basic_string.h ****       }
 925:/usr/include/c++/6/bits/basic_string.h **** 
 926:/usr/include/c++/6/bits/basic_string.h ****       /**
 927:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
 928:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
 929:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Read/write reference to the character.
 930:/usr/include/c++/6/bits/basic_string.h ****        *
 931:/usr/include/c++/6/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
 932:/usr/include/c++/6/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
 933:/usr/include/c++/6/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
 934:/usr/include/c++/6/bits/basic_string.h ****        *  see at().)
 935:/usr/include/c++/6/bits/basic_string.h ****        */
 936:/usr/include/c++/6/bits/basic_string.h ****       reference
 937:/usr/include/c++/6/bits/basic_string.h ****       operator[](size_type __pos)
 938:/usr/include/c++/6/bits/basic_string.h ****       {
 939:/usr/include/c++/6/bits/basic_string.h ****         // Allow pos == size() both in C++98 mode, as v3 extension,
 940:/usr/include/c++/6/bits/basic_string.h **** 	// and in C++11 mode.
 941:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
 942:/usr/include/c++/6/bits/basic_string.h ****         // In pedantic mode be strict in C++98 mode.
 943:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());
 944:/usr/include/c++/6/bits/basic_string.h **** 	return _M_data()[__pos];
 945:/usr/include/c++/6/bits/basic_string.h ****       }
 946:/usr/include/c++/6/bits/basic_string.h **** 
 947:/usr/include/c++/6/bits/basic_string.h ****       /**
 948:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
GAS LISTING /tmp/ccvmoMuv.s 			page 67


 949:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n The index of the character to access.
 950:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Read-only (const) reference to the character.
 951:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
 952:/usr/include/c++/6/bits/basic_string.h ****        *
 953:/usr/include/c++/6/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
 954:/usr/include/c++/6/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
 955:/usr/include/c++/6/bits/basic_string.h ****        *  throws out_of_range if the check fails.
 956:/usr/include/c++/6/bits/basic_string.h ****        */
 957:/usr/include/c++/6/bits/basic_string.h ****       const_reference
 958:/usr/include/c++/6/bits/basic_string.h ****       at(size_type __n) const
 959:/usr/include/c++/6/bits/basic_string.h ****       {
 960:/usr/include/c++/6/bits/basic_string.h **** 	if (__n >= this->size())
 961:/usr/include/c++/6/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
 962:/usr/include/c++/6/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
 963:/usr/include/c++/6/bits/basic_string.h **** 				       "(which is %zu)"),
 964:/usr/include/c++/6/bits/basic_string.h **** 				   __n, this->size());
 965:/usr/include/c++/6/bits/basic_string.h **** 	return _M_data()[__n];
 966:/usr/include/c++/6/bits/basic_string.h ****       }
 967:/usr/include/c++/6/bits/basic_string.h **** 
 968:/usr/include/c++/6/bits/basic_string.h ****       /**
 969:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
 970:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n The index of the character to access.
 971:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Read/write reference to the character.
 972:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
 973:/usr/include/c++/6/bits/basic_string.h ****        *
 974:/usr/include/c++/6/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
 975:/usr/include/c++/6/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
 976:/usr/include/c++/6/bits/basic_string.h ****        *  throws out_of_range if the check fails.
 977:/usr/include/c++/6/bits/basic_string.h ****        */
 978:/usr/include/c++/6/bits/basic_string.h ****       reference
 979:/usr/include/c++/6/bits/basic_string.h ****       at(size_type __n)
 980:/usr/include/c++/6/bits/basic_string.h ****       {
 981:/usr/include/c++/6/bits/basic_string.h **** 	if (__n >= size())
 982:/usr/include/c++/6/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
 983:/usr/include/c++/6/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
 984:/usr/include/c++/6/bits/basic_string.h **** 				       "(which is %zu)"),
 985:/usr/include/c++/6/bits/basic_string.h **** 				   __n, this->size());
 986:/usr/include/c++/6/bits/basic_string.h **** 	return _M_data()[__n];
 987:/usr/include/c++/6/bits/basic_string.h ****       }
 988:/usr/include/c++/6/bits/basic_string.h **** 
 989:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
 990:/usr/include/c++/6/bits/basic_string.h ****       /**
 991:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read/write reference to the data at the first
 992:/usr/include/c++/6/bits/basic_string.h ****        *  element of the %string.
 993:/usr/include/c++/6/bits/basic_string.h ****        */
 994:/usr/include/c++/6/bits/basic_string.h ****       reference
 995:/usr/include/c++/6/bits/basic_string.h ****       front() noexcept
 996:/usr/include/c++/6/bits/basic_string.h ****       {
 997:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_assert(!empty());
 998:/usr/include/c++/6/bits/basic_string.h **** 	return operator[](0);
 999:/usr/include/c++/6/bits/basic_string.h ****       }
1000:/usr/include/c++/6/bits/basic_string.h **** 
1001:/usr/include/c++/6/bits/basic_string.h ****       /**
1002:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the first
1003:/usr/include/c++/6/bits/basic_string.h ****        *  element of the %string.
1004:/usr/include/c++/6/bits/basic_string.h ****        */
1005:/usr/include/c++/6/bits/basic_string.h ****       const_reference
GAS LISTING /tmp/ccvmoMuv.s 			page 68


1006:/usr/include/c++/6/bits/basic_string.h ****       front() const noexcept
1007:/usr/include/c++/6/bits/basic_string.h ****       {
1008:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1009:/usr/include/c++/6/bits/basic_string.h **** 	return operator[](0);
1010:/usr/include/c++/6/bits/basic_string.h ****       }
1011:/usr/include/c++/6/bits/basic_string.h **** 
1012:/usr/include/c++/6/bits/basic_string.h ****       /**
1013:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read/write reference to the data at the last
1014:/usr/include/c++/6/bits/basic_string.h ****        *  element of the %string.
1015:/usr/include/c++/6/bits/basic_string.h ****        */
1016:/usr/include/c++/6/bits/basic_string.h ****       reference
1017:/usr/include/c++/6/bits/basic_string.h ****       back() noexcept
1018:/usr/include/c++/6/bits/basic_string.h ****       {
1019:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1020:/usr/include/c++/6/bits/basic_string.h **** 	return operator[](this->size() - 1);
1021:/usr/include/c++/6/bits/basic_string.h ****       }
1022:/usr/include/c++/6/bits/basic_string.h **** 
1023:/usr/include/c++/6/bits/basic_string.h ****       /**
1024:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the
1025:/usr/include/c++/6/bits/basic_string.h ****        *  last element of the %string.
1026:/usr/include/c++/6/bits/basic_string.h ****        */
1027:/usr/include/c++/6/bits/basic_string.h ****       const_reference
1028:/usr/include/c++/6/bits/basic_string.h ****       back() const noexcept
1029:/usr/include/c++/6/bits/basic_string.h ****       {
1030:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1031:/usr/include/c++/6/bits/basic_string.h **** 	return operator[](this->size() - 1);
1032:/usr/include/c++/6/bits/basic_string.h ****       }
1033:/usr/include/c++/6/bits/basic_string.h **** #endif
1034:/usr/include/c++/6/bits/basic_string.h **** 
1035:/usr/include/c++/6/bits/basic_string.h ****       // Modifiers:
1036:/usr/include/c++/6/bits/basic_string.h ****       /**
1037:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Append a string to this string.
1038:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  The string to append.
1039:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1040:/usr/include/c++/6/bits/basic_string.h ****        */
1041:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1042:/usr/include/c++/6/bits/basic_string.h ****       operator+=(const basic_string& __str)
1043:/usr/include/c++/6/bits/basic_string.h ****       { return this->append(__str); }
1044:/usr/include/c++/6/bits/basic_string.h **** 
1045:/usr/include/c++/6/bits/basic_string.h ****       /**
1046:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Append a C string.
1047:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  The C string to append.
1048:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1049:/usr/include/c++/6/bits/basic_string.h ****        */
1050:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1051:/usr/include/c++/6/bits/basic_string.h ****       operator+=(const _CharT* __s)
1052:/usr/include/c++/6/bits/basic_string.h ****       { return this->append(__s); }
1053:/usr/include/c++/6/bits/basic_string.h **** 
1054:/usr/include/c++/6/bits/basic_string.h ****       /**
1055:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Append a character.
1056:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  The character to append.
1057:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1058:/usr/include/c++/6/bits/basic_string.h ****        */
1059:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1060:/usr/include/c++/6/bits/basic_string.h ****       operator+=(_CharT __c)
1061:/usr/include/c++/6/bits/basic_string.h ****       {
1062:/usr/include/c++/6/bits/basic_string.h **** 	this->push_back(__c);
GAS LISTING /tmp/ccvmoMuv.s 			page 69


1063:/usr/include/c++/6/bits/basic_string.h **** 	return *this;
1064:/usr/include/c++/6/bits/basic_string.h ****       }
1065:/usr/include/c++/6/bits/basic_string.h **** 
1066:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
1067:/usr/include/c++/6/bits/basic_string.h ****       /**
1068:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
1069:/usr/include/c++/6/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to be appended.
1070:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1071:/usr/include/c++/6/bits/basic_string.h ****        */
1072:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1073:/usr/include/c++/6/bits/basic_string.h ****       operator+=(initializer_list<_CharT> __l)
1074:/usr/include/c++/6/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
1075:/usr/include/c++/6/bits/basic_string.h **** #endif // C++11
1076:/usr/include/c++/6/bits/basic_string.h **** 
1077:/usr/include/c++/6/bits/basic_string.h ****       /**
1078:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Append a string to this string.
1079:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  The string to append.
1080:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1081:/usr/include/c++/6/bits/basic_string.h ****        */
1082:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1083:/usr/include/c++/6/bits/basic_string.h ****       append(const basic_string& __str)
1084:/usr/include/c++/6/bits/basic_string.h ****       { return _M_append(__str._M_data(), __str.size()); }
1085:/usr/include/c++/6/bits/basic_string.h **** 
1086:/usr/include/c++/6/bits/basic_string.h ****       /**
1087:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Append a substring.
1088:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  The string to append.
1089:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of the first character of str to append.
1090:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1091:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1092:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range if @a __pos is not a valid index.
1093:/usr/include/c++/6/bits/basic_string.h ****        *
1094:/usr/include/c++/6/bits/basic_string.h ****        *  This function appends @a __n characters from @a __str
1095:/usr/include/c++/6/bits/basic_string.h ****        *  starting at @a __pos to this string.  If @a __n is is larger
1096:/usr/include/c++/6/bits/basic_string.h ****        *  than the number of available characters in @a __str, the
1097:/usr/include/c++/6/bits/basic_string.h ****        *  remainder of @a __str is appended.
1098:/usr/include/c++/6/bits/basic_string.h ****        */
1099:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1100:/usr/include/c++/6/bits/basic_string.h ****       append(const basic_string& __str, size_type __pos, size_type __n)
1101:/usr/include/c++/6/bits/basic_string.h ****       { return _M_append(__str._M_data()
1102:/usr/include/c++/6/bits/basic_string.h **** 			 + __str._M_check(__pos, "basic_string::append"),
1103:/usr/include/c++/6/bits/basic_string.h **** 			 __str._M_limit(__pos, __n)); }
1104:/usr/include/c++/6/bits/basic_string.h **** 
1105:/usr/include/c++/6/bits/basic_string.h ****       /**
1106:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Append a C substring.
1107:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  The C string to append.
1108:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1109:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1110:/usr/include/c++/6/bits/basic_string.h ****        */
1111:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1112:/usr/include/c++/6/bits/basic_string.h ****       append(const _CharT* __s, size_type __n)
1113:/usr/include/c++/6/bits/basic_string.h ****       {
1114:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1115:/usr/include/c++/6/bits/basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1116:/usr/include/c++/6/bits/basic_string.h **** 	return _M_append(__s, __n);
1117:/usr/include/c++/6/bits/basic_string.h ****       }
1118:/usr/include/c++/6/bits/basic_string.h **** 
1119:/usr/include/c++/6/bits/basic_string.h ****       /**
GAS LISTING /tmp/ccvmoMuv.s 			page 70


1120:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Append a C string.
1121:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  The C string to append.
1122:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1123:/usr/include/c++/6/bits/basic_string.h ****        */
1124:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1125:/usr/include/c++/6/bits/basic_string.h ****       append(const _CharT* __s)
1126:/usr/include/c++/6/bits/basic_string.h ****       {
1127:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1128:/usr/include/c++/6/bits/basic_string.h **** 	const size_type __n = traits_type::length(__s);
1129:/usr/include/c++/6/bits/basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1130:/usr/include/c++/6/bits/basic_string.h **** 	return _M_append(__s, __n);
1131:/usr/include/c++/6/bits/basic_string.h ****       }
1132:/usr/include/c++/6/bits/basic_string.h **** 
1133:/usr/include/c++/6/bits/basic_string.h ****       /**
1134:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Append multiple characters.
1135:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1136:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  The character to use.
1137:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1138:/usr/include/c++/6/bits/basic_string.h ****        *
1139:/usr/include/c++/6/bits/basic_string.h ****        *  Appends __n copies of __c to this string.
1140:/usr/include/c++/6/bits/basic_string.h ****        */
1141:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1142:/usr/include/c++/6/bits/basic_string.h ****       append(size_type __n, _CharT __c)
1143:/usr/include/c++/6/bits/basic_string.h ****       { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
1144:/usr/include/c++/6/bits/basic_string.h **** 
1145:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
1146:/usr/include/c++/6/bits/basic_string.h ****       /**
1147:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
1148:/usr/include/c++/6/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to append.
1149:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1150:/usr/include/c++/6/bits/basic_string.h ****        */
1151:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1152:/usr/include/c++/6/bits/basic_string.h ****       append(initializer_list<_CharT> __l)
1153:/usr/include/c++/6/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
1154:/usr/include/c++/6/bits/basic_string.h **** #endif // C++11
1155:/usr/include/c++/6/bits/basic_string.h **** 
1156:/usr/include/c++/6/bits/basic_string.h ****       /**
1157:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Append a range of characters.
1158:/usr/include/c++/6/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1159:/usr/include/c++/6/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1160:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1161:/usr/include/c++/6/bits/basic_string.h ****        *
1162:/usr/include/c++/6/bits/basic_string.h ****        *  Appends characters in the range [__first,__last) to this string.
1163:/usr/include/c++/6/bits/basic_string.h ****        */
1164:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
1165:/usr/include/c++/6/bits/basic_string.h ****       template<class _InputIterator,
1166:/usr/include/c++/6/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1167:/usr/include/c++/6/bits/basic_string.h **** #else
1168:/usr/include/c++/6/bits/basic_string.h ****       template<class _InputIterator>
1169:/usr/include/c++/6/bits/basic_string.h **** #endif
1170:/usr/include/c++/6/bits/basic_string.h ****         basic_string&
1171:/usr/include/c++/6/bits/basic_string.h ****         append(_InputIterator __first, _InputIterator __last)
1172:/usr/include/c++/6/bits/basic_string.h ****         { return this->replace(end(), end(), __first, __last); }
1173:/usr/include/c++/6/bits/basic_string.h **** 
1174:/usr/include/c++/6/bits/basic_string.h ****       /**
1175:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Append a single character.
1176:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  Character to append.
GAS LISTING /tmp/ccvmoMuv.s 			page 71


1177:/usr/include/c++/6/bits/basic_string.h ****        */
1178:/usr/include/c++/6/bits/basic_string.h ****       void
1179:/usr/include/c++/6/bits/basic_string.h ****       push_back(_CharT __c)
1180:/usr/include/c++/6/bits/basic_string.h ****       {
1181:/usr/include/c++/6/bits/basic_string.h **** 	const size_type __size = this->size();
1182:/usr/include/c++/6/bits/basic_string.h **** 	if (__size + 1 > this->capacity())
1183:/usr/include/c++/6/bits/basic_string.h **** 	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
1184:/usr/include/c++/6/bits/basic_string.h **** 	traits_type::assign(this->_M_data()[__size], __c);
1185:/usr/include/c++/6/bits/basic_string.h **** 	this->_M_set_length(__size + 1);
1186:/usr/include/c++/6/bits/basic_string.h ****       }
1187:/usr/include/c++/6/bits/basic_string.h **** 
1188:/usr/include/c++/6/bits/basic_string.h ****       /**
1189:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1190:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __str  Source string to use.
1191:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1192:/usr/include/c++/6/bits/basic_string.h ****        */
1193:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1194:/usr/include/c++/6/bits/basic_string.h ****       assign(const basic_string& __str)
1195:/usr/include/c++/6/bits/basic_string.h ****       {
1196:/usr/include/c++/6/bits/basic_string.h **** 	this->_M_assign(__str);
1197:/usr/include/c++/6/bits/basic_string.h **** 	return *this;
1198:/usr/include/c++/6/bits/basic_string.h ****       }
1199:/usr/include/c++/6/bits/basic_string.h **** 
1200:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
1201:/usr/include/c++/6/bits/basic_string.h ****       /**
1202:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1203:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __str  Source string to use.
1204:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1205:/usr/include/c++/6/bits/basic_string.h ****        *
1206:/usr/include/c++/6/bits/basic_string.h ****        *  This function sets this string to the exact contents of @a __str.
1207:/usr/include/c++/6/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
1208:/usr/include/c++/6/bits/basic_string.h ****        */
1209:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1210:/usr/include/c++/6/bits/basic_string.h ****       assign(basic_string&& __str)
1211:/usr/include/c++/6/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
1212:/usr/include/c++/6/bits/basic_string.h ****       {
1213:/usr/include/c++/6/bits/basic_string.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
1214:/usr/include/c++/6/bits/basic_string.h **** 	// 2063. Contradictory requirements for string move assignment
1215:/usr/include/c++/6/bits/basic_string.h **** 	return *this = std::move(__str);
1216:/usr/include/c++/6/bits/basic_string.h ****       }
1217:/usr/include/c++/6/bits/basic_string.h **** #endif // C++11
1218:/usr/include/c++/6/bits/basic_string.h **** 
1219:/usr/include/c++/6/bits/basic_string.h ****       /**
1220:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Set value to a substring of a string.
1221:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  The string to use.
1222:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of the first character of str.
1223:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters to use.
1224:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1225:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range if @a pos is not a valid index.
1226:/usr/include/c++/6/bits/basic_string.h ****        *
1227:/usr/include/c++/6/bits/basic_string.h ****        *  This function sets this string to the substring of @a __str
1228:/usr/include/c++/6/bits/basic_string.h ****        *  consisting of @a __n characters at @a __pos.  If @a __n is
1229:/usr/include/c++/6/bits/basic_string.h ****        *  is larger than the number of available characters in @a
1230:/usr/include/c++/6/bits/basic_string.h ****        *  __str, the remainder of @a __str is used.
1231:/usr/include/c++/6/bits/basic_string.h ****        */
1232:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1233:/usr/include/c++/6/bits/basic_string.h ****       assign(const basic_string& __str, size_type __pos, size_type __n)
GAS LISTING /tmp/ccvmoMuv.s 			page 72


1234:/usr/include/c++/6/bits/basic_string.h ****       { return _M_replace(size_type(0), this->size(), __str._M_data()
1235:/usr/include/c++/6/bits/basic_string.h **** 			  + __str._M_check(__pos, "basic_string::assign"),
1236:/usr/include/c++/6/bits/basic_string.h **** 			  __str._M_limit(__pos, __n)); }
1237:/usr/include/c++/6/bits/basic_string.h **** 
1238:/usr/include/c++/6/bits/basic_string.h ****       /**
1239:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Set value to a C substring.
1240:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  The C string to use.
1241:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters to use.
1242:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1243:/usr/include/c++/6/bits/basic_string.h ****        *
1244:/usr/include/c++/6/bits/basic_string.h ****        *  This function sets the value of this string to the first @a __n
1245:/usr/include/c++/6/bits/basic_string.h ****        *  characters of @a __s.  If @a __n is is larger than the number of
1246:/usr/include/c++/6/bits/basic_string.h ****        *  available characters in @a __s, the remainder of @a __s is used.
1247:/usr/include/c++/6/bits/basic_string.h ****        */
1248:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1249:/usr/include/c++/6/bits/basic_string.h ****       assign(const _CharT* __s, size_type __n)
1250:/usr/include/c++/6/bits/basic_string.h ****       {
1251:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1252:/usr/include/c++/6/bits/basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s, __n);
1253:/usr/include/c++/6/bits/basic_string.h ****       }
1254:/usr/include/c++/6/bits/basic_string.h **** 
1255:/usr/include/c++/6/bits/basic_string.h ****       /**
1256:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Set value to contents of a C string.
1257:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  The C string to use.
1258:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1259:/usr/include/c++/6/bits/basic_string.h ****        *
1260:/usr/include/c++/6/bits/basic_string.h ****        *  This function sets the value of this string to the value of @a __s.
1261:/usr/include/c++/6/bits/basic_string.h ****        *  The data is copied, so there is no dependence on @a __s once the
1262:/usr/include/c++/6/bits/basic_string.h ****        *  function returns.
1263:/usr/include/c++/6/bits/basic_string.h ****        */
1264:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1265:/usr/include/c++/6/bits/basic_string.h ****       assign(const _CharT* __s)
1266:/usr/include/c++/6/bits/basic_string.h ****       {
1267:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1268:/usr/include/c++/6/bits/basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s,
1269:/usr/include/c++/6/bits/basic_string.h **** 			  traits_type::length(__s));
 763              		.loc 10 1269 0
 764 003c 488B5328 		movq	40(%rbx), %rdx
 765              	.LBB12915:
 766              	.LBB12913:
 767              		.loc 9 267 0
 768 0040 4989C0   		movq	%rax, %r8
 769              	.LVL57:
 770              	.LBE12913:
 771              	.LBE12915:
 772              		.loc 10 1269 0
 773 0043 4889E9   		movq	%rbp, %rcx
 774 0046 31F6     		xorl	%esi, %esi
 775 0048 4C89E7   		movq	%r12, %rdi
 776              	.LEHB4:
 777 004b E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT
 777      00
 778              	.LVL58:
 779 0050 488B4328 		movq	40(%rbx), %rax
 780              	.LVL59:
 781              	.LBE12916:
 782              	.LBE12917:
GAS LISTING /tmp/ccvmoMuv.s 			page 73


 783              	.LBE12918:
  69:/usr/include/boost/system/system_error.hpp ****           m_what += m_error_code.message();
 784              		.loc 8 69 0
 785 0054 4885C0   		testq	%rax, %rax
 786 0057 753F     		jne	.L34
 787              	.LVL60:
 788              	.L37:
 789              	.LBB12919:
 790              	.LBB12920:
 791              		.file 11 "/usr/include/boost/system/error_code.hpp"
   1:/usr/include/boost/system/error_code.hpp **** //  boost/system/error_code.hpp  ---------------------------------------------//
   2:/usr/include/boost/system/error_code.hpp **** 
   3:/usr/include/boost/system/error_code.hpp **** //  Copyright Beman Dawes 2006, 2007
   4:/usr/include/boost/system/error_code.hpp **** //  Copyright Christoper Kohlhoff 2007
   5:/usr/include/boost/system/error_code.hpp **** 
   6:/usr/include/boost/system/error_code.hpp **** //  Distributed under the Boost Software License, Version 1.0. (See accompanying
   7:/usr/include/boost/system/error_code.hpp **** //  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
   8:/usr/include/boost/system/error_code.hpp **** 
   9:/usr/include/boost/system/error_code.hpp **** //  See library home page at http://www.boost.org/libs/system
  10:/usr/include/boost/system/error_code.hpp **** 
  11:/usr/include/boost/system/error_code.hpp **** #ifndef BOOST_ERROR_CODE_HPP
  12:/usr/include/boost/system/error_code.hpp **** #define BOOST_ERROR_CODE_HPP
  13:/usr/include/boost/system/error_code.hpp **** 
  14:/usr/include/boost/system/error_code.hpp **** #include <boost/system/config.hpp>
  15:/usr/include/boost/system/error_code.hpp **** #include <boost/cstdint.hpp>
  16:/usr/include/boost/system/error_code.hpp **** #include <boost/assert.hpp>
  17:/usr/include/boost/system/error_code.hpp **** #include <boost/noncopyable.hpp>
  18:/usr/include/boost/system/error_code.hpp **** #include <boost/utility/enable_if.hpp>
  19:/usr/include/boost/system/error_code.hpp **** #include <ostream>
  20:/usr/include/boost/system/error_code.hpp **** #include <string>
  21:/usr/include/boost/system/error_code.hpp **** #include <stdexcept>
  22:/usr/include/boost/system/error_code.hpp **** #include <functional>
  23:/usr/include/boost/system/error_code.hpp **** 
  24:/usr/include/boost/system/error_code.hpp **** // TODO: undef these macros if not already defined
  25:/usr/include/boost/system/error_code.hpp **** #include <boost/cerrno.hpp>
  26:/usr/include/boost/system/error_code.hpp **** 
  27:/usr/include/boost/system/error_code.hpp **** #if !defined(BOOST_POSIX_API) && !defined(BOOST_WINDOWS_API)
  28:/usr/include/boost/system/error_code.hpp **** #  error BOOST_POSIX_API or BOOST_WINDOWS_API must be defined
  29:/usr/include/boost/system/error_code.hpp **** #endif
  30:/usr/include/boost/system/error_code.hpp **** 
  31:/usr/include/boost/system/error_code.hpp **** #include <boost/config/abi_prefix.hpp> // must be the last #include
  32:/usr/include/boost/system/error_code.hpp **** 
  33:/usr/include/boost/system/error_code.hpp **** #ifndef BOOST_SYSTEM_NOEXCEPT
  34:/usr/include/boost/system/error_code.hpp **** #define BOOST_SYSTEM_NOEXCEPT BOOST_NOEXCEPT
  35:/usr/include/boost/system/error_code.hpp **** #endif
  36:/usr/include/boost/system/error_code.hpp **** 
  37:/usr/include/boost/system/error_code.hpp **** namespace boost
  38:/usr/include/boost/system/error_code.hpp **** {
  39:/usr/include/boost/system/error_code.hpp ****   namespace system
  40:/usr/include/boost/system/error_code.hpp ****   {
  41:/usr/include/boost/system/error_code.hpp **** 
  42:/usr/include/boost/system/error_code.hpp ****     class error_code;
  43:/usr/include/boost/system/error_code.hpp ****     class error_condition;
  44:/usr/include/boost/system/error_code.hpp **** 
  45:/usr/include/boost/system/error_code.hpp ****     //  "Concept" helpers  ---------------------------------------------------//
  46:/usr/include/boost/system/error_code.hpp **** 
  47:/usr/include/boost/system/error_code.hpp ****     template< class T >
GAS LISTING /tmp/ccvmoMuv.s 			page 74


  48:/usr/include/boost/system/error_code.hpp ****     struct is_error_code_enum { static const bool value = false; };
  49:/usr/include/boost/system/error_code.hpp **** 
  50:/usr/include/boost/system/error_code.hpp ****     template< class T >
  51:/usr/include/boost/system/error_code.hpp ****     struct is_error_condition_enum { static const bool value = false; };
  52:/usr/include/boost/system/error_code.hpp **** 
  53:/usr/include/boost/system/error_code.hpp ****     //  generic error_conditions  --------------------------------------------//
  54:/usr/include/boost/system/error_code.hpp **** 
  55:/usr/include/boost/system/error_code.hpp ****     namespace errc
  56:/usr/include/boost/system/error_code.hpp ****     {
  57:/usr/include/boost/system/error_code.hpp ****       enum errc_t
  58:/usr/include/boost/system/error_code.hpp ****       {
  59:/usr/include/boost/system/error_code.hpp ****         success = 0,
  60:/usr/include/boost/system/error_code.hpp ****         address_family_not_supported = EAFNOSUPPORT,
  61:/usr/include/boost/system/error_code.hpp ****         address_in_use = EADDRINUSE,
  62:/usr/include/boost/system/error_code.hpp ****         address_not_available = EADDRNOTAVAIL,
  63:/usr/include/boost/system/error_code.hpp ****         already_connected = EISCONN,
  64:/usr/include/boost/system/error_code.hpp ****         argument_list_too_long = E2BIG,
  65:/usr/include/boost/system/error_code.hpp ****         argument_out_of_domain = EDOM,
  66:/usr/include/boost/system/error_code.hpp ****         bad_address = EFAULT,
  67:/usr/include/boost/system/error_code.hpp ****         bad_file_descriptor = EBADF,
  68:/usr/include/boost/system/error_code.hpp ****         bad_message = EBADMSG,
  69:/usr/include/boost/system/error_code.hpp ****         broken_pipe = EPIPE,
  70:/usr/include/boost/system/error_code.hpp ****         connection_aborted = ECONNABORTED,
  71:/usr/include/boost/system/error_code.hpp ****         connection_already_in_progress = EALREADY,
  72:/usr/include/boost/system/error_code.hpp ****         connection_refused = ECONNREFUSED,
  73:/usr/include/boost/system/error_code.hpp ****         connection_reset = ECONNRESET,
  74:/usr/include/boost/system/error_code.hpp ****         cross_device_link = EXDEV,
  75:/usr/include/boost/system/error_code.hpp ****         destination_address_required = EDESTADDRREQ,
  76:/usr/include/boost/system/error_code.hpp ****         device_or_resource_busy = EBUSY,
  77:/usr/include/boost/system/error_code.hpp ****         directory_not_empty = ENOTEMPTY,
  78:/usr/include/boost/system/error_code.hpp ****         executable_format_error = ENOEXEC,
  79:/usr/include/boost/system/error_code.hpp ****         file_exists = EEXIST,
  80:/usr/include/boost/system/error_code.hpp ****         file_too_large = EFBIG,
  81:/usr/include/boost/system/error_code.hpp ****         filename_too_long = ENAMETOOLONG,
  82:/usr/include/boost/system/error_code.hpp ****         function_not_supported = ENOSYS,
  83:/usr/include/boost/system/error_code.hpp ****         host_unreachable = EHOSTUNREACH,
  84:/usr/include/boost/system/error_code.hpp ****         identifier_removed = EIDRM,
  85:/usr/include/boost/system/error_code.hpp ****         illegal_byte_sequence = EILSEQ,
  86:/usr/include/boost/system/error_code.hpp ****         inappropriate_io_control_operation = ENOTTY,
  87:/usr/include/boost/system/error_code.hpp ****         interrupted = EINTR,
  88:/usr/include/boost/system/error_code.hpp ****         invalid_argument = EINVAL,
  89:/usr/include/boost/system/error_code.hpp ****         invalid_seek = ESPIPE,
  90:/usr/include/boost/system/error_code.hpp ****         io_error = EIO,
  91:/usr/include/boost/system/error_code.hpp ****         is_a_directory = EISDIR,
  92:/usr/include/boost/system/error_code.hpp ****         message_size = EMSGSIZE,
  93:/usr/include/boost/system/error_code.hpp ****         network_down = ENETDOWN,
  94:/usr/include/boost/system/error_code.hpp ****         network_reset = ENETRESET,
  95:/usr/include/boost/system/error_code.hpp ****         network_unreachable = ENETUNREACH,
  96:/usr/include/boost/system/error_code.hpp ****         no_buffer_space = ENOBUFS,
  97:/usr/include/boost/system/error_code.hpp ****         no_child_process = ECHILD,
  98:/usr/include/boost/system/error_code.hpp ****         no_link = ENOLINK,
  99:/usr/include/boost/system/error_code.hpp ****         no_lock_available = ENOLCK,
 100:/usr/include/boost/system/error_code.hpp ****         no_message_available = ENODATA,
 101:/usr/include/boost/system/error_code.hpp ****         no_message = ENOMSG,
 102:/usr/include/boost/system/error_code.hpp ****         no_protocol_option = ENOPROTOOPT,
 103:/usr/include/boost/system/error_code.hpp ****         no_space_on_device = ENOSPC,
 104:/usr/include/boost/system/error_code.hpp ****         no_stream_resources = ENOSR,
GAS LISTING /tmp/ccvmoMuv.s 			page 75


 105:/usr/include/boost/system/error_code.hpp ****         no_such_device_or_address = ENXIO,
 106:/usr/include/boost/system/error_code.hpp ****         no_such_device = ENODEV,
 107:/usr/include/boost/system/error_code.hpp ****         no_such_file_or_directory = ENOENT,
 108:/usr/include/boost/system/error_code.hpp ****         no_such_process = ESRCH,
 109:/usr/include/boost/system/error_code.hpp ****         not_a_directory = ENOTDIR,
 110:/usr/include/boost/system/error_code.hpp ****         not_a_socket = ENOTSOCK,
 111:/usr/include/boost/system/error_code.hpp ****         not_a_stream = ENOSTR,
 112:/usr/include/boost/system/error_code.hpp ****         not_connected = ENOTCONN,
 113:/usr/include/boost/system/error_code.hpp ****         not_enough_memory = ENOMEM,
 114:/usr/include/boost/system/error_code.hpp ****         not_supported = ENOTSUP,
 115:/usr/include/boost/system/error_code.hpp ****         operation_canceled = ECANCELED,
 116:/usr/include/boost/system/error_code.hpp ****         operation_in_progress = EINPROGRESS,
 117:/usr/include/boost/system/error_code.hpp ****         operation_not_permitted = EPERM,
 118:/usr/include/boost/system/error_code.hpp ****         operation_not_supported = EOPNOTSUPP,
 119:/usr/include/boost/system/error_code.hpp ****         operation_would_block = EWOULDBLOCK,
 120:/usr/include/boost/system/error_code.hpp ****         owner_dead = EOWNERDEAD,
 121:/usr/include/boost/system/error_code.hpp ****         permission_denied = EACCES,
 122:/usr/include/boost/system/error_code.hpp ****         protocol_error = EPROTO,
 123:/usr/include/boost/system/error_code.hpp ****         protocol_not_supported = EPROTONOSUPPORT,
 124:/usr/include/boost/system/error_code.hpp ****         read_only_file_system = EROFS,
 125:/usr/include/boost/system/error_code.hpp ****         resource_deadlock_would_occur = EDEADLK,
 126:/usr/include/boost/system/error_code.hpp ****         resource_unavailable_try_again = EAGAIN,
 127:/usr/include/boost/system/error_code.hpp ****         result_out_of_range = ERANGE,
 128:/usr/include/boost/system/error_code.hpp ****         state_not_recoverable = ENOTRECOVERABLE,
 129:/usr/include/boost/system/error_code.hpp ****         stream_timeout = ETIME,
 130:/usr/include/boost/system/error_code.hpp ****         text_file_busy = ETXTBSY,
 131:/usr/include/boost/system/error_code.hpp ****         timed_out = ETIMEDOUT,
 132:/usr/include/boost/system/error_code.hpp ****         too_many_files_open_in_system = ENFILE,
 133:/usr/include/boost/system/error_code.hpp ****         too_many_files_open = EMFILE,
 134:/usr/include/boost/system/error_code.hpp ****         too_many_links = EMLINK,
 135:/usr/include/boost/system/error_code.hpp ****         too_many_symbolic_link_levels = ELOOP,
 136:/usr/include/boost/system/error_code.hpp ****         value_too_large = EOVERFLOW,
 137:/usr/include/boost/system/error_code.hpp ****         wrong_protocol_type = EPROTOTYPE
 138:/usr/include/boost/system/error_code.hpp ****       };
 139:/usr/include/boost/system/error_code.hpp **** 
 140:/usr/include/boost/system/error_code.hpp ****     } // namespace errc
 141:/usr/include/boost/system/error_code.hpp **** 
 142:/usr/include/boost/system/error_code.hpp **** # ifndef BOOST_SYSTEM_NO_DEPRECATED
 143:/usr/include/boost/system/error_code.hpp ****     namespace posix = errc;
 144:/usr/include/boost/system/error_code.hpp ****     namespace posix_error = errc;
 145:/usr/include/boost/system/error_code.hpp **** # endif
 146:/usr/include/boost/system/error_code.hpp **** 
 147:/usr/include/boost/system/error_code.hpp ****     template<> struct is_error_condition_enum<errc::errc_t>
 148:/usr/include/boost/system/error_code.hpp ****       { static const bool value = true; };
 149:/usr/include/boost/system/error_code.hpp **** 
 150:/usr/include/boost/system/error_code.hpp **** 
 151:/usr/include/boost/system/error_code.hpp ****     //  ----------------------------------------------------------------------//
 152:/usr/include/boost/system/error_code.hpp **** 
 153:/usr/include/boost/system/error_code.hpp ****     //  Operating system specific interfaces  --------------------------------//
 154:/usr/include/boost/system/error_code.hpp **** 
 155:/usr/include/boost/system/error_code.hpp **** 
 156:/usr/include/boost/system/error_code.hpp ****     //  The interface is divided into general and system-specific portions to
 157:/usr/include/boost/system/error_code.hpp ****     //  meet these requirements:
 158:/usr/include/boost/system/error_code.hpp ****     //
 159:/usr/include/boost/system/error_code.hpp ****     //  * Code calling an operating system API can create an error_code with
 160:/usr/include/boost/system/error_code.hpp ****     //    a single category (system_category), even for POSIX-like operating
 161:/usr/include/boost/system/error_code.hpp ****     //    systems that return some POSIX errno values and some native errno
GAS LISTING /tmp/ccvmoMuv.s 			page 76


 162:/usr/include/boost/system/error_code.hpp ****     //    values. This code should not have to pay the cost of distinguishing
 163:/usr/include/boost/system/error_code.hpp ****     //    between categories, since it is not yet known if that is needed.
 164:/usr/include/boost/system/error_code.hpp ****     //
 165:/usr/include/boost/system/error_code.hpp ****     //  * Users wishing to write system-specific code should be given enums for
 166:/usr/include/boost/system/error_code.hpp ****     //    at least the common error cases.
 167:/usr/include/boost/system/error_code.hpp ****     //
 168:/usr/include/boost/system/error_code.hpp ****     //  * System specific code should fail at compile time if moved to another
 169:/usr/include/boost/system/error_code.hpp ****     //    operating system.
 170:/usr/include/boost/system/error_code.hpp **** 
 171:/usr/include/boost/system/error_code.hpp ****     //  The system specific portions of the interface are located in headers
 172:/usr/include/boost/system/error_code.hpp ****     //  with names reflecting the operating system. For example,
 173:/usr/include/boost/system/error_code.hpp ****     //
 174:/usr/include/boost/system/error_code.hpp ****     //       <boost/system/cygwin_error.hpp>
 175:/usr/include/boost/system/error_code.hpp ****     //       <boost/system/linux_error.hpp>
 176:/usr/include/boost/system/error_code.hpp ****     //       <boost/system/windows_error.hpp>
 177:/usr/include/boost/system/error_code.hpp ****     //
 178:/usr/include/boost/system/error_code.hpp ****     //  These headers are effectively empty for compiles on operating systems
 179:/usr/include/boost/system/error_code.hpp ****     //  where they are not applicable.
 180:/usr/include/boost/system/error_code.hpp **** 
 181:/usr/include/boost/system/error_code.hpp ****     //  ----------------------------------------------------------------------//
 182:/usr/include/boost/system/error_code.hpp **** 
 183:/usr/include/boost/system/error_code.hpp ****     //  class error_category  ------------------------------------------------//
 184:/usr/include/boost/system/error_code.hpp **** 
 185:/usr/include/boost/system/error_code.hpp ****     class error_category : public noncopyable
 186:/usr/include/boost/system/error_code.hpp ****     {
 187:/usr/include/boost/system/error_code.hpp ****     public:
 188:/usr/include/boost/system/error_code.hpp ****       virtual ~error_category(){}
 189:/usr/include/boost/system/error_code.hpp **** 
 190:/usr/include/boost/system/error_code.hpp ****       virtual const char *     name() const BOOST_SYSTEM_NOEXCEPT = 0;
 191:/usr/include/boost/system/error_code.hpp ****       virtual std::string      message( int ev ) const = 0;
 192:/usr/include/boost/system/error_code.hpp ****       inline virtual error_condition  default_error_condition( int ev ) const  BOOST_SYSTEM_NOEXCEP
 193:/usr/include/boost/system/error_code.hpp ****       inline virtual bool             equivalent( int code,
 194:/usr/include/boost/system/error_code.hpp ****                                            const error_condition & condition ) const  BOOST_SYSTEM_
 195:/usr/include/boost/system/error_code.hpp ****       inline virtual bool             equivalent( const error_code & code,
 196:/usr/include/boost/system/error_code.hpp ****                                            int condition ) const  BOOST_SYSTEM_NOEXCEPT;
 197:/usr/include/boost/system/error_code.hpp **** 
 198:/usr/include/boost/system/error_code.hpp ****       bool operator==(const error_category & rhs) const BOOST_SYSTEM_NOEXCEPT { return this == &rhs
 199:/usr/include/boost/system/error_code.hpp ****       bool operator!=(const error_category & rhs) const BOOST_SYSTEM_NOEXCEPT { return this != &rhs
 200:/usr/include/boost/system/error_code.hpp ****       bool operator<( const error_category & rhs ) const BOOST_SYSTEM_NOEXCEPT
 201:/usr/include/boost/system/error_code.hpp ****       {
 202:/usr/include/boost/system/error_code.hpp ****         return std::less<const error_category*>()( this, &rhs );
 203:/usr/include/boost/system/error_code.hpp ****       }
 204:/usr/include/boost/system/error_code.hpp ****     };
 205:/usr/include/boost/system/error_code.hpp **** 
 206:/usr/include/boost/system/error_code.hpp ****     //  predefined error categories  -----------------------------------------//
 207:/usr/include/boost/system/error_code.hpp **** 
 208:/usr/include/boost/system/error_code.hpp **** # ifdef BOOST_ERROR_CODE_HEADER_ONLY
 209:/usr/include/boost/system/error_code.hpp ****     inline const error_category &  system_category() BOOST_SYSTEM_NOEXCEPT;
 210:/usr/include/boost/system/error_code.hpp ****     inline const error_category &  generic_category() BOOST_SYSTEM_NOEXCEPT;
 211:/usr/include/boost/system/error_code.hpp **** #else
 212:/usr/include/boost/system/error_code.hpp ****     BOOST_SYSTEM_DECL const error_category &  system_category() BOOST_SYSTEM_NOEXCEPT;
 213:/usr/include/boost/system/error_code.hpp ****     BOOST_SYSTEM_DECL const error_category &  generic_category() BOOST_SYSTEM_NOEXCEPT;
 214:/usr/include/boost/system/error_code.hpp **** #endif
 215:/usr/include/boost/system/error_code.hpp ****     //  deprecated synonyms --------------------------------------------------//
 216:/usr/include/boost/system/error_code.hpp **** 
 217:/usr/include/boost/system/error_code.hpp **** # ifndef BOOST_SYSTEM_NO_DEPRECATED
 218:/usr/include/boost/system/error_code.hpp ****     inline const error_category &  get_system_category() { return system_category(); }
GAS LISTING /tmp/ccvmoMuv.s 			page 77


 219:/usr/include/boost/system/error_code.hpp ****     inline const error_category &  get_generic_category() { return generic_category(); }
 220:/usr/include/boost/system/error_code.hpp ****     inline const error_category &  get_posix_category() { return generic_category(); }
 221:/usr/include/boost/system/error_code.hpp ****     static const error_category &  posix_category = generic_category();
 222:/usr/include/boost/system/error_code.hpp ****     static const error_category &  errno_ecat     = generic_category();
 223:/usr/include/boost/system/error_code.hpp ****     static const error_category &  native_ecat    = system_category();
 224:/usr/include/boost/system/error_code.hpp **** # endif
 225:/usr/include/boost/system/error_code.hpp **** 
 226:/usr/include/boost/system/error_code.hpp ****     //  class error_condition  -----------------------------------------------//
 227:/usr/include/boost/system/error_code.hpp **** 
 228:/usr/include/boost/system/error_code.hpp ****     //  error_conditions are portable, error_codes are system or library specific
 229:/usr/include/boost/system/error_code.hpp **** 
 230:/usr/include/boost/system/error_code.hpp ****     class error_condition
 231:/usr/include/boost/system/error_code.hpp ****     {
 232:/usr/include/boost/system/error_code.hpp ****     public:
 233:/usr/include/boost/system/error_code.hpp **** 
 234:/usr/include/boost/system/error_code.hpp ****       // constructors:
 235:/usr/include/boost/system/error_code.hpp ****       error_condition() BOOST_SYSTEM_NOEXCEPT : m_val(0), m_cat(&generic_category()) {}
 236:/usr/include/boost/system/error_code.hpp ****       error_condition( int val, const error_category & cat ) BOOST_SYSTEM_NOEXCEPT : m_val(val), m_
 237:/usr/include/boost/system/error_code.hpp **** 
 238:/usr/include/boost/system/error_code.hpp ****       template <class ErrorConditionEnum>
 239:/usr/include/boost/system/error_code.hpp ****         error_condition(ErrorConditionEnum e,
 240:/usr/include/boost/system/error_code.hpp ****           typename boost::enable_if<is_error_condition_enum<ErrorConditionEnum> >::type* = 0) BOOST
 241:/usr/include/boost/system/error_code.hpp ****       {
 242:/usr/include/boost/system/error_code.hpp ****         *this = make_error_condition(e);
 243:/usr/include/boost/system/error_code.hpp ****       }
 244:/usr/include/boost/system/error_code.hpp **** 
 245:/usr/include/boost/system/error_code.hpp ****       // modifiers:
 246:/usr/include/boost/system/error_code.hpp **** 
 247:/usr/include/boost/system/error_code.hpp ****       void assign( int val, const error_category & cat ) BOOST_SYSTEM_NOEXCEPT
 248:/usr/include/boost/system/error_code.hpp ****       {
 249:/usr/include/boost/system/error_code.hpp ****         m_val = val;
 250:/usr/include/boost/system/error_code.hpp ****         m_cat = &cat;
 251:/usr/include/boost/system/error_code.hpp ****       }
 252:/usr/include/boost/system/error_code.hpp **** 
 253:/usr/include/boost/system/error_code.hpp ****       template<typename ErrorConditionEnum>
 254:/usr/include/boost/system/error_code.hpp ****         typename boost::enable_if<is_error_condition_enum<ErrorConditionEnum>, error_condition>::ty
 255:/usr/include/boost/system/error_code.hpp ****           operator=( ErrorConditionEnum val ) BOOST_SYSTEM_NOEXCEPT
 256:/usr/include/boost/system/error_code.hpp ****       {
 257:/usr/include/boost/system/error_code.hpp ****         *this = make_error_condition(val);
 258:/usr/include/boost/system/error_code.hpp ****         return *this;
 259:/usr/include/boost/system/error_code.hpp ****       }
 260:/usr/include/boost/system/error_code.hpp **** 
 261:/usr/include/boost/system/error_code.hpp ****       void clear() BOOST_SYSTEM_NOEXCEPT
 262:/usr/include/boost/system/error_code.hpp ****       {
 263:/usr/include/boost/system/error_code.hpp ****         m_val = 0;
 264:/usr/include/boost/system/error_code.hpp ****         m_cat = &generic_category();
 265:/usr/include/boost/system/error_code.hpp ****       }
 266:/usr/include/boost/system/error_code.hpp **** 
 267:/usr/include/boost/system/error_code.hpp ****       // observers:
 268:/usr/include/boost/system/error_code.hpp ****       int                     value() const BOOST_SYSTEM_NOEXCEPT    { return m_val; }
 269:/usr/include/boost/system/error_code.hpp ****       const error_category &  category() const BOOST_SYSTEM_NOEXCEPT { return *m_cat; }
 270:/usr/include/boost/system/error_code.hpp ****       std::string             message() const  { return m_cat->message(value()); }
 271:/usr/include/boost/system/error_code.hpp **** 
 272:/usr/include/boost/system/error_code.hpp ****       typedef void (*unspecified_bool_type)();
 273:/usr/include/boost/system/error_code.hpp ****       static void unspecified_bool_true() {}
 274:/usr/include/boost/system/error_code.hpp **** 
 275:/usr/include/boost/system/error_code.hpp ****       operator unspecified_bool_type() const BOOST_SYSTEM_NOEXCEPT  // true if error
GAS LISTING /tmp/ccvmoMuv.s 			page 78


 276:/usr/include/boost/system/error_code.hpp ****       {
 277:/usr/include/boost/system/error_code.hpp ****         return m_val == 0 ? 0 : unspecified_bool_true;
 278:/usr/include/boost/system/error_code.hpp ****       }
 279:/usr/include/boost/system/error_code.hpp **** 
 280:/usr/include/boost/system/error_code.hpp ****       bool operator!() const BOOST_SYSTEM_NOEXCEPT  // true if no error
 281:/usr/include/boost/system/error_code.hpp ****       {
 282:/usr/include/boost/system/error_code.hpp ****         return m_val == 0;
 283:/usr/include/boost/system/error_code.hpp ****       }
 284:/usr/include/boost/system/error_code.hpp **** 
 285:/usr/include/boost/system/error_code.hpp ****       // relationals:
 286:/usr/include/boost/system/error_code.hpp ****       //  the more symmetrical non-member syntax allows enum
 287:/usr/include/boost/system/error_code.hpp ****       //  conversions work for both rhs and lhs.
 288:/usr/include/boost/system/error_code.hpp ****       inline friend bool operator==( const error_condition & lhs,
 289:/usr/include/boost/system/error_code.hpp ****                                      const error_condition & rhs ) BOOST_SYSTEM_NOEXCEPT
 290:/usr/include/boost/system/error_code.hpp ****       {
 291:/usr/include/boost/system/error_code.hpp ****         return lhs.m_cat == rhs.m_cat && lhs.m_val == rhs.m_val;
 292:/usr/include/boost/system/error_code.hpp ****       }
 293:/usr/include/boost/system/error_code.hpp **** 
 294:/usr/include/boost/system/error_code.hpp ****       inline friend bool operator<( const error_condition & lhs,
 295:/usr/include/boost/system/error_code.hpp ****                                     const error_condition & rhs ) BOOST_SYSTEM_NOEXCEPT
 296:/usr/include/boost/system/error_code.hpp ****         //  the more symmetrical non-member syntax allows enum
 297:/usr/include/boost/system/error_code.hpp ****         //  conversions work for both rhs and lhs.
 298:/usr/include/boost/system/error_code.hpp ****       {
 299:/usr/include/boost/system/error_code.hpp ****         return lhs.m_cat < rhs.m_cat
 300:/usr/include/boost/system/error_code.hpp ****           || (lhs.m_cat == rhs.m_cat && lhs.m_val < rhs.m_val);
 301:/usr/include/boost/system/error_code.hpp ****       }
 302:/usr/include/boost/system/error_code.hpp **** 
 303:/usr/include/boost/system/error_code.hpp ****     private:
 304:/usr/include/boost/system/error_code.hpp ****       int                     m_val;
 305:/usr/include/boost/system/error_code.hpp ****       const error_category *  m_cat;
 306:/usr/include/boost/system/error_code.hpp **** 
 307:/usr/include/boost/system/error_code.hpp ****     };
 308:/usr/include/boost/system/error_code.hpp **** 
 309:/usr/include/boost/system/error_code.hpp ****     //  class error_code  ----------------------------------------------------//
 310:/usr/include/boost/system/error_code.hpp **** 
 311:/usr/include/boost/system/error_code.hpp ****     //  We want error_code to be a value type that can be copied without slicing
 312:/usr/include/boost/system/error_code.hpp ****     //  and without requiring heap allocation, but we also want it to have
 313:/usr/include/boost/system/error_code.hpp ****     //  polymorphic behavior based on the error category. This is achieved by
 314:/usr/include/boost/system/error_code.hpp ****     //  abstract base class error_category supplying the polymorphic behavior,
 315:/usr/include/boost/system/error_code.hpp ****     //  and error_code containing a pointer to an object of a type derived
 316:/usr/include/boost/system/error_code.hpp ****     //  from error_category.
 317:/usr/include/boost/system/error_code.hpp ****     class error_code
 318:/usr/include/boost/system/error_code.hpp ****     {
 319:/usr/include/boost/system/error_code.hpp ****     public:
 320:/usr/include/boost/system/error_code.hpp **** 
 321:/usr/include/boost/system/error_code.hpp ****       // constructors:
 322:/usr/include/boost/system/error_code.hpp ****       error_code() BOOST_SYSTEM_NOEXCEPT : m_val(0), m_cat(&system_category()) {}
 323:/usr/include/boost/system/error_code.hpp ****       error_code( int val, const error_category & cat ) BOOST_SYSTEM_NOEXCEPT : m_val(val), m_cat(&
 324:/usr/include/boost/system/error_code.hpp **** 
 325:/usr/include/boost/system/error_code.hpp ****       template <class ErrorCodeEnum>
 326:/usr/include/boost/system/error_code.hpp ****         error_code(ErrorCodeEnum e,
 327:/usr/include/boost/system/error_code.hpp ****           typename boost::enable_if<is_error_code_enum<ErrorCodeEnum> >::type* = 0) BOOST_SYSTEM_NO
 328:/usr/include/boost/system/error_code.hpp ****       {
 329:/usr/include/boost/system/error_code.hpp ****         *this = make_error_code(e);
 330:/usr/include/boost/system/error_code.hpp ****       }
 331:/usr/include/boost/system/error_code.hpp **** 
 332:/usr/include/boost/system/error_code.hpp ****       // modifiers:
GAS LISTING /tmp/ccvmoMuv.s 			page 79


 333:/usr/include/boost/system/error_code.hpp ****       void assign( int val, const error_category & cat ) BOOST_SYSTEM_NOEXCEPT
 334:/usr/include/boost/system/error_code.hpp ****       {
 335:/usr/include/boost/system/error_code.hpp ****         m_val = val;
 336:/usr/include/boost/system/error_code.hpp ****         m_cat = &cat;
 337:/usr/include/boost/system/error_code.hpp ****       }
 338:/usr/include/boost/system/error_code.hpp **** 
 339:/usr/include/boost/system/error_code.hpp ****       template<typename ErrorCodeEnum>
 340:/usr/include/boost/system/error_code.hpp ****         typename boost::enable_if<is_error_code_enum<ErrorCodeEnum>, error_code>::type &
 341:/usr/include/boost/system/error_code.hpp ****           operator=( ErrorCodeEnum val ) BOOST_SYSTEM_NOEXCEPT
 342:/usr/include/boost/system/error_code.hpp ****       {
 343:/usr/include/boost/system/error_code.hpp ****         *this = make_error_code(val);
 344:/usr/include/boost/system/error_code.hpp ****         return *this;
 345:/usr/include/boost/system/error_code.hpp ****       }
 346:/usr/include/boost/system/error_code.hpp **** 
 347:/usr/include/boost/system/error_code.hpp ****       void clear() BOOST_SYSTEM_NOEXCEPT
 348:/usr/include/boost/system/error_code.hpp ****       {
 349:/usr/include/boost/system/error_code.hpp ****         m_val = 0;
 350:/usr/include/boost/system/error_code.hpp ****         m_cat = &system_category();
 351:/usr/include/boost/system/error_code.hpp ****       }
 352:/usr/include/boost/system/error_code.hpp **** 
 353:/usr/include/boost/system/error_code.hpp ****       // observers:
 354:/usr/include/boost/system/error_code.hpp ****       int                     value() const  BOOST_SYSTEM_NOEXCEPT   { return m_val; }
 355:/usr/include/boost/system/error_code.hpp ****       const error_category &  category() const BOOST_SYSTEM_NOEXCEPT { return *m_cat; }
 356:/usr/include/boost/system/error_code.hpp ****       error_condition         default_error_condition() const BOOST_SYSTEM_NOEXCEPT  { return m_cat
 357:/usr/include/boost/system/error_code.hpp ****       std::string             message() const  { return m_cat->message(value()); }
 792              		.loc 11 357 0
 793 0059 488B7318 		movq	24(%rbx), %rsi
 794              	.LVL61:
 795 005d 4889E5   		movq	%rsp, %rbp
 796 0060 8B5310   		movl	16(%rbx), %edx
 797 0063 4889E7   		movq	%rsp, %rdi
 798 0066 488B06   		movq	(%rsi), %rax
 799 0069 FF5018   		call	*24(%rax)
 800              	.LVL62:
 801              	.LEHE4:
 802              	.LBE12920:
 803              	.LBE12919:
 804              	.LBB12921:
 805              	.LBB12922:
 806              	.LBB12923:
1084:/usr/include/c++/6/bits/basic_string.h **** 
 807              		.loc 10 1084 0 discriminator 1
 808 006c 488B5424 		movq	8(%rsp), %rdx
 808      08
 809 0071 488B3424 		movq	(%rsp), %rsi
 810 0075 4C89E7   		movq	%r12, %rdi
 811              	.LEHB5:
 812 0078 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT
 812      00
 813              	.LVL63:
 814              	.LEHE5:
 815 007d 488B3C24 		movq	(%rsp), %rdi
 816              	.LVL64:
 817              	.LBE12923:
 818              	.LBE12922:
 819              	.LBE12921:
 820              	.LBB12924:
GAS LISTING /tmp/ccvmoMuv.s 			page 80


 821              	.LBB12925:
 822              	.LBB12926:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 823              		.loc 10 180 0
 824 0081 4883C510 		addq	$16, %rbp
 825              	.LVL65:
 826 0085 4839EF   		cmpq	%rbp, %rdi
 827 0088 7488     		je	.L33
 828              	.LVL66:
 829              	.LBB12927:
 830              	.LBB12928:
 831              	.LBB12929:
 832              	.LBB12930:
 833              		.file 12 "/usr/include/c++/6/ext/new_allocator.h"
   1:/usr/include/c++/6/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/c++/6/ext/new_allocator.h **** 
   3:/usr/include/c++/6/ext/new_allocator.h **** // Copyright (C) 2001-2016 Free Software Foundation, Inc.
   4:/usr/include/c++/6/ext/new_allocator.h **** //
   5:/usr/include/c++/6/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/6/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/6/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/6/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/6/ext/new_allocator.h **** // any later version.
  10:/usr/include/c++/6/ext/new_allocator.h **** 
  11:/usr/include/c++/6/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/6/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/6/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/6/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/6/ext/new_allocator.h **** 
  16:/usr/include/c++/6/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/6/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/6/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/6/ext/new_allocator.h **** 
  20:/usr/include/c++/6/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/6/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/6/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/6/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/6/ext/new_allocator.h **** 
  25:/usr/include/c++/6/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/usr/include/c++/6/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/6/ext/new_allocator.h ****  */
  28:/usr/include/c++/6/ext/new_allocator.h **** 
  29:/usr/include/c++/6/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/usr/include/c++/6/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/usr/include/c++/6/ext/new_allocator.h **** 
  32:/usr/include/c++/6/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/usr/include/c++/6/ext/new_allocator.h **** #include <new>
  34:/usr/include/c++/6/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/usr/include/c++/6/ext/new_allocator.h **** #include <bits/move.h>
  36:/usr/include/c++/6/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/usr/include/c++/6/ext/new_allocator.h **** #include <type_traits>
  38:/usr/include/c++/6/ext/new_allocator.h **** #endif
  39:/usr/include/c++/6/ext/new_allocator.h **** 
  40:/usr/include/c++/6/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/usr/include/c++/6/ext/new_allocator.h **** {
  42:/usr/include/c++/6/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/c++/6/ext/new_allocator.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 81


  44:/usr/include/c++/6/ext/new_allocator.h ****   using std::size_t;
  45:/usr/include/c++/6/ext/new_allocator.h ****   using std::ptrdiff_t;
  46:/usr/include/c++/6/ext/new_allocator.h **** 
  47:/usr/include/c++/6/ext/new_allocator.h ****   /**
  48:/usr/include/c++/6/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  49:/usr/include/c++/6/ext/new_allocator.h ****    *  @ingroup allocators
  50:/usr/include/c++/6/ext/new_allocator.h ****    *
  51:/usr/include/c++/6/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard. 
  52:/usr/include/c++/6/ext/new_allocator.h ****    *    - all allocation calls operator new
  53:/usr/include/c++/6/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  54:/usr/include/c++/6/ext/new_allocator.h ****    *
  55:/usr/include/c++/6/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  56:/usr/include/c++/6/ext/new_allocator.h ****    */
  57:/usr/include/c++/6/ext/new_allocator.h ****   template<typename _Tp>
  58:/usr/include/c++/6/ext/new_allocator.h ****     class new_allocator
  59:/usr/include/c++/6/ext/new_allocator.h ****     {
  60:/usr/include/c++/6/ext/new_allocator.h ****     public:
  61:/usr/include/c++/6/ext/new_allocator.h ****       typedef size_t     size_type;
  62:/usr/include/c++/6/ext/new_allocator.h ****       typedef ptrdiff_t  difference_type;
  63:/usr/include/c++/6/ext/new_allocator.h ****       typedef _Tp*       pointer;
  64:/usr/include/c++/6/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  65:/usr/include/c++/6/ext/new_allocator.h ****       typedef _Tp&       reference;
  66:/usr/include/c++/6/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  67:/usr/include/c++/6/ext/new_allocator.h ****       typedef _Tp        value_type;
  68:/usr/include/c++/6/ext/new_allocator.h **** 
  69:/usr/include/c++/6/ext/new_allocator.h ****       template<typename _Tp1>
  70:/usr/include/c++/6/ext/new_allocator.h ****         struct rebind
  71:/usr/include/c++/6/ext/new_allocator.h ****         { typedef new_allocator<_Tp1> other; };
  72:/usr/include/c++/6/ext/new_allocator.h **** 
  73:/usr/include/c++/6/ext/new_allocator.h **** #if __cplusplus >= 201103L
  74:/usr/include/c++/6/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  75:/usr/include/c++/6/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  76:/usr/include/c++/6/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  77:/usr/include/c++/6/ext/new_allocator.h **** #endif
  78:/usr/include/c++/6/ext/new_allocator.h **** 
  79:/usr/include/c++/6/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  80:/usr/include/c++/6/ext/new_allocator.h **** 
  81:/usr/include/c++/6/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  82:/usr/include/c++/6/ext/new_allocator.h **** 
  83:/usr/include/c++/6/ext/new_allocator.h ****       template<typename _Tp1>
  84:/usr/include/c++/6/ext/new_allocator.h ****         new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  85:/usr/include/c++/6/ext/new_allocator.h **** 
  86:/usr/include/c++/6/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  87:/usr/include/c++/6/ext/new_allocator.h **** 
  88:/usr/include/c++/6/ext/new_allocator.h ****       pointer
  89:/usr/include/c++/6/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  90:/usr/include/c++/6/ext/new_allocator.h ****       { return std::__addressof(__x); }
  91:/usr/include/c++/6/ext/new_allocator.h **** 
  92:/usr/include/c++/6/ext/new_allocator.h ****       const_pointer
  93:/usr/include/c++/6/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  94:/usr/include/c++/6/ext/new_allocator.h ****       { return std::__addressof(__x); }
  95:/usr/include/c++/6/ext/new_allocator.h **** 
  96:/usr/include/c++/6/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
  97:/usr/include/c++/6/ext/new_allocator.h ****       // about what the return value is when __n == 0.
  98:/usr/include/c++/6/ext/new_allocator.h ****       pointer
  99:/usr/include/c++/6/ext/new_allocator.h ****       allocate(size_type __n, const void* = 0)
 100:/usr/include/c++/6/ext/new_allocator.h ****       { 
GAS LISTING /tmp/ccvmoMuv.s 			page 82


 101:/usr/include/c++/6/ext/new_allocator.h **** 	if (__n > this->max_size())
 102:/usr/include/c++/6/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 103:/usr/include/c++/6/ext/new_allocator.h **** 
 104:/usr/include/c++/6/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 105:/usr/include/c++/6/ext/new_allocator.h ****       }
 106:/usr/include/c++/6/ext/new_allocator.h **** 
 107:/usr/include/c++/6/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 108:/usr/include/c++/6/ext/new_allocator.h ****       void
 109:/usr/include/c++/6/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 110:/usr/include/c++/6/ext/new_allocator.h ****       { ::operator delete(__p); }
 834              		.loc 12 110 0
 835 008a E8000000 		call	_ZdlPv@PLT
 835      00
 836              	.LVL67:
 837 008f EB81     		jmp	.L33
 838              	.LVL68:
 839              		.p2align 4,,10
 840 0091 0F1F8000 		.p2align 3
 840      000000
 841              	.L34:
 842              	.LBE12930:
 843              	.LBE12929:
 844              	.LBE12928:
 845              	.LBE12927:
 846              	.LBE12926:
 847              	.LBE12925:
 848              	.LBE12924:
 849              	.LBB12931:
 850              	.LBB12932:
 851              	.LBB12933:
 852              	.LBB12934:
 853              	.LBB12935:
 271:/usr/include/c++/6/bits/basic_string.h **** 	  __throw_length_error(__N(__s));
 854              		.loc 10 271 0
 855 0098 48BAFFFF 		movabsq	$9223372036854775807, %rdx
 855      FFFFFFFF 
 855      FF7F
 856 00a2 4829C2   		subq	%rax, %rdx
 857 00a5 4883FA01 		cmpq	$1, %rdx
 858 00a9 7616     		jbe	.L52
 859              	.LVL69:
 860              	.LBE12935:
 861              	.LBE12934:
1130:/usr/include/c++/6/bits/basic_string.h ****       }
 862              		.loc 10 1130 0
 863 00ab 488D3500 		leaq	.LC1(%rip), %rsi
 863      000000
 864 00b2 BA020000 		movl	$2, %edx
 864      00
 865 00b7 4C89E7   		movq	%r12, %rdi
 866              	.LEHB6:
 867 00ba E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT
 867      00
 868              	.LVL70:
 869 00bf EB98     		jmp	.L37
 870              	.LVL71:
 871              	.L52:
GAS LISTING /tmp/ccvmoMuv.s 			page 83


 872              	.LBB12937:
 873              	.LBB12936:
 272:/usr/include/c++/6/bits/basic_string.h ****       }
 874              		.loc 10 272 0
 875 00c1 488D3D00 		leaq	.LC0(%rip), %rdi
 875      000000
 876 00c8 E8000000 		call	_ZSt20__throw_length_errorPKc@PLT
 876      00
 877              	.LVL72:
 878              	.LEHE6:
 879              	.L45:
 880              	.L41:
 881              	.LBE12936:
 882              	.LBE12937:
 883              	.LBE12933:
 884              	.LBE12932:
 885              	.LBE12931:
  73:/usr/include/boost/system/system_error.hpp **** #endif
 886              		.loc 8 73 0
 887 00cd 4889C7   		movq	%rax, %rdi
 888 00d0 E8000000 		call	__cxa_begin_catch@PLT
 888      00
 889              	.LVL73:
 890 00d5 4889DF   		movq	%rbx, %rdi
 891 00d8 E8000000 		call	_ZNKSt13runtime_error4whatEv@PLT
 891      00
 892              	.LVL74:
 893 00dd 4889C3   		movq	%rax, %rbx
 894              	.LVL75:
 895              	.LEHB7:
 896 00e0 E8000000 		call	__cxa_end_catch@PLT
 896      00
 897              	.LVL76:
 898              	.LEHE7:
 899 00e5 E92CFFFF 		jmp	.L32
 899      FF
 900              	.LVL77:
 901              	.L46:
 902 00ea 488B3C24 		movq	(%rsp), %rdi
 903              	.LBB12938:
 904              	.LBB12939:
 905              	.LBB12940:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 906              		.loc 10 180 0
 907 00ee 4883C510 		addq	$16, %rbp
 908              	.LVL78:
 909 00f2 4989C4   		movq	%rax, %r12
 910              	.LVL79:
 911 00f5 4839EF   		cmpq	%rbp, %rdi
 912 00f8 7405     		je	.L40
 913              	.LVL80:
 914              	.LBB12941:
 915              	.LBB12942:
 916              	.LBB12943:
 917              	.LBB12944:
 918              		.loc 12 110 0
 919 00fa E8000000 		call	_ZdlPv@PLT
GAS LISTING /tmp/ccvmoMuv.s 			page 84


 919      00
 920              	.LVL81:
 921              	.L40:
 922 00ff 4C89E0   		movq	%r12, %rax
 923 0102 EBC9     		jmp	.L41
 924              	.LVL82:
 925              	.L47:
 926 0104 4883C201 		addq	$1, %rdx
 927 0108 4889C7   		movq	%rax, %rdi
 928 010b 7405     		je	.L44
 929              	.LEHB8:
 930 010d E8000000 		call	_Unwind_Resume@PLT
 930      00
 931              	.LVL83:
 932              	.L44:
 933              	.LBE12944:
 934              	.LBE12943:
 935              	.LBE12942:
 936              	.LBE12941:
 937              	.LBE12940:
 938              	.LBE12939:
 939              	.LBE12938:
  59:/usr/include/boost/system/system_error.hpp ****     // see http://www.boost.org/more/error_handling.html for lazy build rationale
 940              		.loc 8 59 0
 941 0112 E8000000 		call	__cxa_call_unexpected@PLT
 941      00
 942              	.LVL84:
 943              	.LEHE8:
 944              		.cfi_endproc
 945              	.LFE4246:
 946              		.section	.gcc_except_table._ZNK5boost6system12system_error4whatEv,"aG",@progbits,_ZNK5boost6system
 947              		.align 4
 948              	.LLSDA4246:
 949 0000 FF       		.byte	0xff
 950 0001 9B       		.byte	0x9b
 951 0002 29       		.uleb128 .LLSDATT4246-.LLSDATTD4246
 952              	.LLSDATTD4246:
 953 0003 01       		.byte	0x1
 954 0004 1B       		.uleb128 .LLSDACSE4246-.LLSDACSB4246
 955              	.LLSDACSB4246:
 956 0005 4B       		.uleb128 .LEHB4-.LFB4246
 957 0006 21       		.uleb128 .LEHE4-.LEHB4
 958 0007 CD01     		.uleb128 .L45-.LFB4246
 959 0009 01       		.uleb128 0x1
 960 000a 78       		.uleb128 .LEHB5-.LFB4246
 961 000b 05       		.uleb128 .LEHE5-.LEHB5
 962 000c EA01     		.uleb128 .L46-.LFB4246
 963 000e 03       		.uleb128 0x3
 964 000f BA01     		.uleb128 .LEHB6-.LFB4246
 965 0011 13       		.uleb128 .LEHE6-.LEHB6
 966 0012 CD01     		.uleb128 .L45-.LFB4246
 967 0014 01       		.uleb128 0x1
 968 0015 E001     		.uleb128 .LEHB7-.LFB4246
 969 0017 05       		.uleb128 .LEHE7-.LEHB7
 970 0018 8402     		.uleb128 .L47-.LFB4246
 971 001a 05       		.uleb128 0x5
 972 001b 8D02     		.uleb128 .LEHB8-.LFB4246
GAS LISTING /tmp/ccvmoMuv.s 			page 85


 973 001d 0A       		.uleb128 .LEHE8-.LEHB8
 974 001e 00       		.uleb128 0
 975 001f 00       		.uleb128 0
 976              	.LLSDACSE4246:
 977 0020 01       		.byte	0x1
 978 0021 00       		.byte	0
 979 0022 00       		.byte	0
 980 0023 7D       		.byte	0x7d
 981 0024 7F       		.byte	0x7f
 982 0025 00       		.byte	0
 983 0026 0000     		.align 4
 984 0028 00000000 		.long	0
 985              	
 986              	.LLSDATT4246:
 987 002c 00       		.byte	0
 988              		.section	.text._ZNK5boost6system12system_error4whatEv,"axG",@progbits,_ZNK5boost6system12system_er
 990              		.section	.text._ZN5boost17bad_function_callD2Ev,"axG",@progbits,_ZN5boost17bad_function_callD5Ev,c
 991              		.align 2
 992              		.p2align 4,,15
 993              		.weak	_ZN5boost17bad_function_callD2Ev
 995              	_ZN5boost17bad_function_callD2Ev:
 996              	.LFB11745:
 997              		.file 13 "/usr/include/boost/function/function_base.hpp"
   1:/usr/include/boost/function/function_base.hpp **** // Boost.Function library
   2:/usr/include/boost/function/function_base.hpp **** 
   3:/usr/include/boost/function/function_base.hpp **** //  Copyright Douglas Gregor 2001-2006
   4:/usr/include/boost/function/function_base.hpp **** //  Copyright Emil Dotchevski 2007
   5:/usr/include/boost/function/function_base.hpp **** //  Use, modification and distribution is subject to the Boost Software License, Version 1.0.
   6:/usr/include/boost/function/function_base.hpp **** //  (See accompanying file LICENSE_1_0.txt or copy at
   7:/usr/include/boost/function/function_base.hpp **** //  http://www.boost.org/LICENSE_1_0.txt)
   8:/usr/include/boost/function/function_base.hpp **** 
   9:/usr/include/boost/function/function_base.hpp **** // For more information, see http://www.boost.org
  10:/usr/include/boost/function/function_base.hpp **** 
  11:/usr/include/boost/function/function_base.hpp **** #ifndef BOOST_FUNCTION_BASE_HEADER
  12:/usr/include/boost/function/function_base.hpp **** #define BOOST_FUNCTION_BASE_HEADER
  13:/usr/include/boost/function/function_base.hpp **** 
  14:/usr/include/boost/function/function_base.hpp **** #include <stdexcept>
  15:/usr/include/boost/function/function_base.hpp **** #include <string>
  16:/usr/include/boost/function/function_base.hpp **** #include <memory>
  17:/usr/include/boost/function/function_base.hpp **** #include <new>
  18:/usr/include/boost/function/function_base.hpp **** #include <boost/config.hpp>
  19:/usr/include/boost/function/function_base.hpp **** #include <boost/assert.hpp>
  20:/usr/include/boost/function/function_base.hpp **** #include <boost/integer.hpp>
  21:/usr/include/boost/function/function_base.hpp **** #include <boost/type_index.hpp>
  22:/usr/include/boost/function/function_base.hpp **** #include <boost/type_traits/has_trivial_copy.hpp>
  23:/usr/include/boost/function/function_base.hpp **** #include <boost/type_traits/has_trivial_destructor.hpp>
  24:/usr/include/boost/function/function_base.hpp **** #include <boost/type_traits/is_const.hpp>
  25:/usr/include/boost/function/function_base.hpp **** #include <boost/type_traits/is_integral.hpp>
  26:/usr/include/boost/function/function_base.hpp **** #include <boost/type_traits/is_volatile.hpp>
  27:/usr/include/boost/function/function_base.hpp **** #include <boost/type_traits/composite_traits.hpp>
  28:/usr/include/boost/function/function_base.hpp **** #include <boost/ref.hpp>
  29:/usr/include/boost/function/function_base.hpp **** #include <boost/mpl/if.hpp>
  30:/usr/include/boost/function/function_base.hpp **** #include <boost/detail/workaround.hpp>
  31:/usr/include/boost/function/function_base.hpp **** #include <boost/type_traits/alignment_of.hpp>
  32:/usr/include/boost/function/function_base.hpp **** #ifndef BOOST_NO_SFINAE
  33:/usr/include/boost/function/function_base.hpp **** #  include "boost/utility/enable_if.hpp"
  34:/usr/include/boost/function/function_base.hpp **** #else
GAS LISTING /tmp/ccvmoMuv.s 			page 86


  35:/usr/include/boost/function/function_base.hpp **** #  include "boost/mpl/bool.hpp"
  36:/usr/include/boost/function/function_base.hpp **** #endif
  37:/usr/include/boost/function/function_base.hpp **** #include <boost/function_equal.hpp>
  38:/usr/include/boost/function/function_base.hpp **** #include <boost/function/function_fwd.hpp>
  39:/usr/include/boost/function/function_base.hpp **** 
  40:/usr/include/boost/function/function_base.hpp **** #if defined(BOOST_MSVC)
  41:/usr/include/boost/function/function_base.hpp **** #   pragma warning( push )
  42:/usr/include/boost/function/function_base.hpp **** #   pragma warning( disable : 4793 ) // complaint about native code generation
  43:/usr/include/boost/function/function_base.hpp **** #   pragma warning( disable : 4127 ) // "conditional expression is constant"
  44:/usr/include/boost/function/function_base.hpp **** #endif
  45:/usr/include/boost/function/function_base.hpp **** 
  46:/usr/include/boost/function/function_base.hpp **** #if defined(__ICL) && __ICL <= 600 || defined(__MWERKS__) && __MWERKS__ < 0x2406 && !defined(BOOST_
  47:/usr/include/boost/function/function_base.hpp **** #  define BOOST_FUNCTION_TARGET_FIX(x) x
  48:/usr/include/boost/function/function_base.hpp **** #else
  49:/usr/include/boost/function/function_base.hpp **** #  define BOOST_FUNCTION_TARGET_FIX(x)
  50:/usr/include/boost/function/function_base.hpp **** #endif // __ICL etc
  51:/usr/include/boost/function/function_base.hpp **** 
  52:/usr/include/boost/function/function_base.hpp **** #  define BOOST_FUNCTION_ENABLE_IF_NOT_INTEGRAL(Functor,Type)              \
  53:/usr/include/boost/function/function_base.hpp ****       typename ::boost::enable_if_c<          \
  54:/usr/include/boost/function/function_base.hpp ****                            !(::boost::is_integral<Functor>::value), \
  55:/usr/include/boost/function/function_base.hpp ****                            Type>::type
  56:/usr/include/boost/function/function_base.hpp **** 
  57:/usr/include/boost/function/function_base.hpp **** namespace boost {
  58:/usr/include/boost/function/function_base.hpp ****   namespace detail {
  59:/usr/include/boost/function/function_base.hpp ****     namespace function {
  60:/usr/include/boost/function/function_base.hpp ****       class X;
  61:/usr/include/boost/function/function_base.hpp **** 
  62:/usr/include/boost/function/function_base.hpp ****       /**
  63:/usr/include/boost/function/function_base.hpp ****        * A buffer used to store small function objects in
  64:/usr/include/boost/function/function_base.hpp ****        * boost::function. It is a union containing function pointers,
  65:/usr/include/boost/function/function_base.hpp ****        * object pointers, and a structure that resembles a bound
  66:/usr/include/boost/function/function_base.hpp ****        * member function pointer.
  67:/usr/include/boost/function/function_base.hpp ****        */
  68:/usr/include/boost/function/function_base.hpp ****       union function_buffer_members
  69:/usr/include/boost/function/function_base.hpp ****       {
  70:/usr/include/boost/function/function_base.hpp ****         // For pointers to function objects
  71:/usr/include/boost/function/function_base.hpp ****         typedef void* obj_ptr_t;
  72:/usr/include/boost/function/function_base.hpp ****         mutable obj_ptr_t obj_ptr;
  73:/usr/include/boost/function/function_base.hpp **** 
  74:/usr/include/boost/function/function_base.hpp ****         // For pointers to std::type_info objects
  75:/usr/include/boost/function/function_base.hpp ****         struct type_t {
  76:/usr/include/boost/function/function_base.hpp ****           // (get_functor_type_tag, check_functor_type_tag).
  77:/usr/include/boost/function/function_base.hpp ****           const boost::typeindex::type_info* type;
  78:/usr/include/boost/function/function_base.hpp **** 
  79:/usr/include/boost/function/function_base.hpp ****           // Whether the type is const-qualified.
  80:/usr/include/boost/function/function_base.hpp ****           bool const_qualified;
  81:/usr/include/boost/function/function_base.hpp ****           // Whether the type is volatile-qualified.
  82:/usr/include/boost/function/function_base.hpp ****           bool volatile_qualified;
  83:/usr/include/boost/function/function_base.hpp ****         } type;
  84:/usr/include/boost/function/function_base.hpp **** 
  85:/usr/include/boost/function/function_base.hpp ****         // For function pointers of all kinds
  86:/usr/include/boost/function/function_base.hpp ****         typedef void (*func_ptr_t)();
  87:/usr/include/boost/function/function_base.hpp ****         mutable func_ptr_t func_ptr;
  88:/usr/include/boost/function/function_base.hpp **** 
  89:/usr/include/boost/function/function_base.hpp ****         // For bound member pointers
  90:/usr/include/boost/function/function_base.hpp ****         struct bound_memfunc_ptr_t {
  91:/usr/include/boost/function/function_base.hpp ****           void (X::*memfunc_ptr)(int);
GAS LISTING /tmp/ccvmoMuv.s 			page 87


  92:/usr/include/boost/function/function_base.hpp ****           void* obj_ptr;
  93:/usr/include/boost/function/function_base.hpp ****         } bound_memfunc_ptr;
  94:/usr/include/boost/function/function_base.hpp **** 
  95:/usr/include/boost/function/function_base.hpp ****         // For references to function objects. We explicitly keep
  96:/usr/include/boost/function/function_base.hpp ****         // track of the cv-qualifiers on the object referenced.
  97:/usr/include/boost/function/function_base.hpp ****         struct obj_ref_t {
  98:/usr/include/boost/function/function_base.hpp ****           mutable void* obj_ptr;
  99:/usr/include/boost/function/function_base.hpp ****           bool is_const_qualified;
 100:/usr/include/boost/function/function_base.hpp ****           bool is_volatile_qualified;
 101:/usr/include/boost/function/function_base.hpp ****         } obj_ref;
 102:/usr/include/boost/function/function_base.hpp ****       };
 103:/usr/include/boost/function/function_base.hpp **** 
 104:/usr/include/boost/function/function_base.hpp ****       union function_buffer
 105:/usr/include/boost/function/function_base.hpp ****       {
 106:/usr/include/boost/function/function_base.hpp ****         // Type-specific union members
 107:/usr/include/boost/function/function_base.hpp ****         mutable function_buffer_members members;
 108:/usr/include/boost/function/function_base.hpp **** 
 109:/usr/include/boost/function/function_base.hpp ****         // To relax aliasing constraints
 110:/usr/include/boost/function/function_base.hpp ****         mutable char data[sizeof(function_buffer_members)];
 111:/usr/include/boost/function/function_base.hpp ****       };
 112:/usr/include/boost/function/function_base.hpp **** 
 113:/usr/include/boost/function/function_base.hpp ****       /**
 114:/usr/include/boost/function/function_base.hpp ****        * The unusable class is a placeholder for unused function arguments
 115:/usr/include/boost/function/function_base.hpp ****        * It is also completely unusable except that it constructable from
 116:/usr/include/boost/function/function_base.hpp ****        * anything. This helps compilers without partial specialization to
 117:/usr/include/boost/function/function_base.hpp ****        * handle Boost.Function objects returning void.
 118:/usr/include/boost/function/function_base.hpp ****        */
 119:/usr/include/boost/function/function_base.hpp ****       struct unusable
 120:/usr/include/boost/function/function_base.hpp ****       {
 121:/usr/include/boost/function/function_base.hpp ****         unusable() {}
 122:/usr/include/boost/function/function_base.hpp ****         template<typename T> unusable(const T&) {}
 123:/usr/include/boost/function/function_base.hpp ****       };
 124:/usr/include/boost/function/function_base.hpp **** 
 125:/usr/include/boost/function/function_base.hpp ****       /* Determine the return type. This supports compilers that do not support
 126:/usr/include/boost/function/function_base.hpp ****        * void returns or partial specialization by silently changing the return
 127:/usr/include/boost/function/function_base.hpp ****        * type to "unusable".
 128:/usr/include/boost/function/function_base.hpp ****        */
 129:/usr/include/boost/function/function_base.hpp ****       template<typename T> struct function_return_type { typedef T type; };
 130:/usr/include/boost/function/function_base.hpp **** 
 131:/usr/include/boost/function/function_base.hpp ****       template<>
 132:/usr/include/boost/function/function_base.hpp ****       struct function_return_type<void>
 133:/usr/include/boost/function/function_base.hpp ****       {
 134:/usr/include/boost/function/function_base.hpp ****         typedef unusable type;
 135:/usr/include/boost/function/function_base.hpp ****       };
 136:/usr/include/boost/function/function_base.hpp **** 
 137:/usr/include/boost/function/function_base.hpp ****       // The operation type to perform on the given functor/function pointer
 138:/usr/include/boost/function/function_base.hpp ****       enum functor_manager_operation_type {
 139:/usr/include/boost/function/function_base.hpp ****         clone_functor_tag,
 140:/usr/include/boost/function/function_base.hpp ****         move_functor_tag,
 141:/usr/include/boost/function/function_base.hpp ****         destroy_functor_tag,
 142:/usr/include/boost/function/function_base.hpp ****         check_functor_type_tag,
 143:/usr/include/boost/function/function_base.hpp ****         get_functor_type_tag
 144:/usr/include/boost/function/function_base.hpp ****       };
 145:/usr/include/boost/function/function_base.hpp **** 
 146:/usr/include/boost/function/function_base.hpp ****       // Tags used to decide between different types of functions
 147:/usr/include/boost/function/function_base.hpp ****       struct function_ptr_tag {};
 148:/usr/include/boost/function/function_base.hpp ****       struct function_obj_tag {};
GAS LISTING /tmp/ccvmoMuv.s 			page 88


 149:/usr/include/boost/function/function_base.hpp ****       struct member_ptr_tag {};
 150:/usr/include/boost/function/function_base.hpp ****       struct function_obj_ref_tag {};
 151:/usr/include/boost/function/function_base.hpp **** 
 152:/usr/include/boost/function/function_base.hpp ****       template<typename F>
 153:/usr/include/boost/function/function_base.hpp ****       class get_function_tag
 154:/usr/include/boost/function/function_base.hpp ****       {
 155:/usr/include/boost/function/function_base.hpp ****         typedef typename mpl::if_c<(is_pointer<F>::value),
 156:/usr/include/boost/function/function_base.hpp ****                                    function_ptr_tag,
 157:/usr/include/boost/function/function_base.hpp ****                                    function_obj_tag>::type ptr_or_obj_tag;
 158:/usr/include/boost/function/function_base.hpp **** 
 159:/usr/include/boost/function/function_base.hpp ****         typedef typename mpl::if_c<(is_member_pointer<F>::value),
 160:/usr/include/boost/function/function_base.hpp ****                                    member_ptr_tag,
 161:/usr/include/boost/function/function_base.hpp ****                                    ptr_or_obj_tag>::type ptr_or_obj_or_mem_tag;
 162:/usr/include/boost/function/function_base.hpp **** 
 163:/usr/include/boost/function/function_base.hpp ****         typedef typename mpl::if_c<(is_reference_wrapper<F>::value),
 164:/usr/include/boost/function/function_base.hpp ****                                    function_obj_ref_tag,
 165:/usr/include/boost/function/function_base.hpp ****                                    ptr_or_obj_or_mem_tag>::type or_ref_tag;
 166:/usr/include/boost/function/function_base.hpp **** 
 167:/usr/include/boost/function/function_base.hpp ****       public:
 168:/usr/include/boost/function/function_base.hpp ****         typedef or_ref_tag type;
 169:/usr/include/boost/function/function_base.hpp ****       };
 170:/usr/include/boost/function/function_base.hpp **** 
 171:/usr/include/boost/function/function_base.hpp ****       // The trivial manager does nothing but return the same pointer (if we
 172:/usr/include/boost/function/function_base.hpp ****       // are cloning) or return the null pointer (if we are deleting).
 173:/usr/include/boost/function/function_base.hpp ****       template<typename F>
 174:/usr/include/boost/function/function_base.hpp ****       struct reference_manager
 175:/usr/include/boost/function/function_base.hpp ****       {
 176:/usr/include/boost/function/function_base.hpp ****         static inline void
 177:/usr/include/boost/function/function_base.hpp ****         manage(const function_buffer& in_buffer, function_buffer& out_buffer,
 178:/usr/include/boost/function/function_base.hpp ****                functor_manager_operation_type op)
 179:/usr/include/boost/function/function_base.hpp ****         {
 180:/usr/include/boost/function/function_base.hpp ****           switch (op) {
 181:/usr/include/boost/function/function_base.hpp ****           case clone_functor_tag:
 182:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.obj_ref = in_buffer.members.obj_ref;
 183:/usr/include/boost/function/function_base.hpp ****             return;
 184:/usr/include/boost/function/function_base.hpp **** 
 185:/usr/include/boost/function/function_base.hpp ****           case move_functor_tag:
 186:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.obj_ref = in_buffer.members.obj_ref;
 187:/usr/include/boost/function/function_base.hpp ****             in_buffer.members.obj_ref.obj_ptr = 0;
 188:/usr/include/boost/function/function_base.hpp ****             return;
 189:/usr/include/boost/function/function_base.hpp **** 
 190:/usr/include/boost/function/function_base.hpp ****           case destroy_functor_tag:
 191:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.obj_ref.obj_ptr = 0;
 192:/usr/include/boost/function/function_base.hpp ****             return;
 193:/usr/include/boost/function/function_base.hpp **** 
 194:/usr/include/boost/function/function_base.hpp ****           case check_functor_type_tag:
 195:/usr/include/boost/function/function_base.hpp ****             {
 196:/usr/include/boost/function/function_base.hpp ****               // Check whether we have the same type. We can add
 197:/usr/include/boost/function/function_base.hpp ****               // cv-qualifiers, but we can't take them away.
 198:/usr/include/boost/function/function_base.hpp ****               if (*out_buffer.members.type.type == boost::typeindex::type_id<F>()
 199:/usr/include/boost/function/function_base.hpp ****                   && (!in_buffer.members.obj_ref.is_const_qualified
 200:/usr/include/boost/function/function_base.hpp ****                       || out_buffer.members.type.const_qualified)
 201:/usr/include/boost/function/function_base.hpp ****                   && (!in_buffer.members.obj_ref.is_volatile_qualified
 202:/usr/include/boost/function/function_base.hpp ****                       || out_buffer.members.type.volatile_qualified))
 203:/usr/include/boost/function/function_base.hpp ****                 out_buffer.members.obj_ptr = in_buffer.members.obj_ref.obj_ptr;
 204:/usr/include/boost/function/function_base.hpp ****               else
 205:/usr/include/boost/function/function_base.hpp ****                 out_buffer.members.obj_ptr = 0;
GAS LISTING /tmp/ccvmoMuv.s 			page 89


 206:/usr/include/boost/function/function_base.hpp ****             }
 207:/usr/include/boost/function/function_base.hpp ****             return;
 208:/usr/include/boost/function/function_base.hpp **** 
 209:/usr/include/boost/function/function_base.hpp ****           case get_functor_type_tag:
 210:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.type.type = &boost::typeindex::type_id<F>().type_info();
 211:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.type.const_qualified = in_buffer.members.obj_ref.is_const_qualified;
 212:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.type.volatile_qualified = in_buffer.members.obj_ref.is_volatile_qual
 213:/usr/include/boost/function/function_base.hpp ****             return;
 214:/usr/include/boost/function/function_base.hpp ****           }
 215:/usr/include/boost/function/function_base.hpp ****         }
 216:/usr/include/boost/function/function_base.hpp ****       };
 217:/usr/include/boost/function/function_base.hpp **** 
 218:/usr/include/boost/function/function_base.hpp ****       /**
 219:/usr/include/boost/function/function_base.hpp ****        * Determine if boost::function can use the small-object
 220:/usr/include/boost/function/function_base.hpp ****        * optimization with the function object type F.
 221:/usr/include/boost/function/function_base.hpp ****        */
 222:/usr/include/boost/function/function_base.hpp ****       template<typename F>
 223:/usr/include/boost/function/function_base.hpp ****       struct function_allows_small_object_optimization
 224:/usr/include/boost/function/function_base.hpp ****       {
 225:/usr/include/boost/function/function_base.hpp ****         BOOST_STATIC_CONSTANT
 226:/usr/include/boost/function/function_base.hpp ****           (bool,
 227:/usr/include/boost/function/function_base.hpp ****            value = ((sizeof(F) <= sizeof(function_buffer) &&
 228:/usr/include/boost/function/function_base.hpp ****                      (alignment_of<function_buffer>::value
 229:/usr/include/boost/function/function_base.hpp ****                       % alignment_of<F>::value == 0))));
 230:/usr/include/boost/function/function_base.hpp ****       };
 231:/usr/include/boost/function/function_base.hpp **** 
 232:/usr/include/boost/function/function_base.hpp ****       template <typename F,typename A>
 233:/usr/include/boost/function/function_base.hpp ****       struct functor_wrapper: public F, public A
 234:/usr/include/boost/function/function_base.hpp ****       {
 235:/usr/include/boost/function/function_base.hpp ****         functor_wrapper( F f, A a ):
 236:/usr/include/boost/function/function_base.hpp ****           F(f),
 237:/usr/include/boost/function/function_base.hpp ****           A(a)
 238:/usr/include/boost/function/function_base.hpp ****         {
 239:/usr/include/boost/function/function_base.hpp ****         }
 240:/usr/include/boost/function/function_base.hpp **** 
 241:/usr/include/boost/function/function_base.hpp ****         functor_wrapper(const functor_wrapper& f) :
 242:/usr/include/boost/function/function_base.hpp ****           F(static_cast<const F&>(f)),
 243:/usr/include/boost/function/function_base.hpp ****           A(static_cast<const A&>(f))
 244:/usr/include/boost/function/function_base.hpp ****         {
 245:/usr/include/boost/function/function_base.hpp ****         }
 246:/usr/include/boost/function/function_base.hpp ****       };
 247:/usr/include/boost/function/function_base.hpp **** 
 248:/usr/include/boost/function/function_base.hpp ****       /**
 249:/usr/include/boost/function/function_base.hpp ****        * The functor_manager class contains a static function "manage" which
 250:/usr/include/boost/function/function_base.hpp ****        * can clone or destroy the given function/function object pointer.
 251:/usr/include/boost/function/function_base.hpp ****        */
 252:/usr/include/boost/function/function_base.hpp ****       template<typename Functor>
 253:/usr/include/boost/function/function_base.hpp ****       struct functor_manager_common
 254:/usr/include/boost/function/function_base.hpp ****       {
 255:/usr/include/boost/function/function_base.hpp ****         typedef Functor functor_type;
 256:/usr/include/boost/function/function_base.hpp **** 
 257:/usr/include/boost/function/function_base.hpp ****         // Function pointers
 258:/usr/include/boost/function/function_base.hpp ****         static inline void
 259:/usr/include/boost/function/function_base.hpp ****         manage_ptr(const function_buffer& in_buffer, function_buffer& out_buffer,
 260:/usr/include/boost/function/function_base.hpp ****                 functor_manager_operation_type op)
 261:/usr/include/boost/function/function_base.hpp ****         {
 262:/usr/include/boost/function/function_base.hpp ****           if (op == clone_functor_tag)
GAS LISTING /tmp/ccvmoMuv.s 			page 90


 263:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.func_ptr = in_buffer.members.func_ptr;
 264:/usr/include/boost/function/function_base.hpp ****           else if (op == move_functor_tag) {
 265:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.func_ptr = in_buffer.members.func_ptr;
 266:/usr/include/boost/function/function_base.hpp ****             in_buffer.members.func_ptr = 0;
 267:/usr/include/boost/function/function_base.hpp ****           } else if (op == destroy_functor_tag)
 268:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.func_ptr = 0;
 269:/usr/include/boost/function/function_base.hpp ****           else if (op == check_functor_type_tag) {
 270:/usr/include/boost/function/function_base.hpp ****             if (*out_buffer.members.type.type == boost::typeindex::type_id<Functor>())
 271:/usr/include/boost/function/function_base.hpp ****               out_buffer.members.obj_ptr = &in_buffer.members.func_ptr;
 272:/usr/include/boost/function/function_base.hpp ****             else
 273:/usr/include/boost/function/function_base.hpp ****               out_buffer.members.obj_ptr = 0;
 274:/usr/include/boost/function/function_base.hpp ****           } else /* op == get_functor_type_tag */ {
 275:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.type.type = &boost::typeindex::type_id<Functor>().type_info();
 276:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.type.const_qualified = false;
 277:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.type.volatile_qualified = false;
 278:/usr/include/boost/function/function_base.hpp ****           }
 279:/usr/include/boost/function/function_base.hpp ****         }
 280:/usr/include/boost/function/function_base.hpp **** 
 281:/usr/include/boost/function/function_base.hpp ****         // Function objects that fit in the small-object buffer.
 282:/usr/include/boost/function/function_base.hpp ****         static inline void
 283:/usr/include/boost/function/function_base.hpp ****         manage_small(const function_buffer& in_buffer, function_buffer& out_buffer,
 284:/usr/include/boost/function/function_base.hpp ****                 functor_manager_operation_type op)
 285:/usr/include/boost/function/function_base.hpp ****         {
 286:/usr/include/boost/function/function_base.hpp ****           if (op == clone_functor_tag || op == move_functor_tag) {
 287:/usr/include/boost/function/function_base.hpp ****             const functor_type* in_functor =
 288:/usr/include/boost/function/function_base.hpp ****               reinterpret_cast<const functor_type*>(in_buffer.data);
 289:/usr/include/boost/function/function_base.hpp ****             new (reinterpret_cast<void*>(out_buffer.data)) functor_type(*in_functor);
 290:/usr/include/boost/function/function_base.hpp **** 
 291:/usr/include/boost/function/function_base.hpp ****             if (op == move_functor_tag) {
 292:/usr/include/boost/function/function_base.hpp ****               functor_type* f = reinterpret_cast<functor_type*>(in_buffer.data);
 293:/usr/include/boost/function/function_base.hpp ****               (void)f; // suppress warning about the value of f not being used (MSVC)
 294:/usr/include/boost/function/function_base.hpp ****               f->~Functor();
 295:/usr/include/boost/function/function_base.hpp ****             }
 296:/usr/include/boost/function/function_base.hpp ****           } else if (op == destroy_functor_tag) {
 297:/usr/include/boost/function/function_base.hpp ****             // Some compilers (Borland, vc6, ...) are unhappy with ~functor_type.
 298:/usr/include/boost/function/function_base.hpp ****              functor_type* f = reinterpret_cast<functor_type*>(out_buffer.data);
 299:/usr/include/boost/function/function_base.hpp ****              (void)f; // suppress warning about the value of f not being used (MSVC)
 300:/usr/include/boost/function/function_base.hpp ****              f->~Functor();
 301:/usr/include/boost/function/function_base.hpp ****           } else if (op == check_functor_type_tag) {
 302:/usr/include/boost/function/function_base.hpp ****              if (*out_buffer.members.type.type == boost::typeindex::type_id<Functor>())
 303:/usr/include/boost/function/function_base.hpp ****               out_buffer.members.obj_ptr = in_buffer.data;
 304:/usr/include/boost/function/function_base.hpp ****             else
 305:/usr/include/boost/function/function_base.hpp ****               out_buffer.members.obj_ptr = 0;
 306:/usr/include/boost/function/function_base.hpp ****           } else /* op == get_functor_type_tag */ {
 307:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.type.type = &boost::typeindex::type_id<Functor>().type_info();
 308:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.type.const_qualified = false;
 309:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.type.volatile_qualified = false;
 310:/usr/include/boost/function/function_base.hpp ****           }
 311:/usr/include/boost/function/function_base.hpp ****         }
 312:/usr/include/boost/function/function_base.hpp ****       };
 313:/usr/include/boost/function/function_base.hpp **** 
 314:/usr/include/boost/function/function_base.hpp ****       template<typename Functor>
 315:/usr/include/boost/function/function_base.hpp ****       struct functor_manager
 316:/usr/include/boost/function/function_base.hpp ****       {
 317:/usr/include/boost/function/function_base.hpp ****       private:
 318:/usr/include/boost/function/function_base.hpp ****         typedef Functor functor_type;
 319:/usr/include/boost/function/function_base.hpp **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 91


 320:/usr/include/boost/function/function_base.hpp ****         // Function pointers
 321:/usr/include/boost/function/function_base.hpp ****         static inline void
 322:/usr/include/boost/function/function_base.hpp ****         manager(const function_buffer& in_buffer, function_buffer& out_buffer,
 323:/usr/include/boost/function/function_base.hpp ****                 functor_manager_operation_type op, function_ptr_tag)
 324:/usr/include/boost/function/function_base.hpp ****         {
 325:/usr/include/boost/function/function_base.hpp ****           functor_manager_common<Functor>::manage_ptr(in_buffer,out_buffer,op);
 326:/usr/include/boost/function/function_base.hpp ****         }
 327:/usr/include/boost/function/function_base.hpp **** 
 328:/usr/include/boost/function/function_base.hpp ****         // Function objects that fit in the small-object buffer.
 329:/usr/include/boost/function/function_base.hpp ****         static inline void
 330:/usr/include/boost/function/function_base.hpp ****         manager(const function_buffer& in_buffer, function_buffer& out_buffer,
 331:/usr/include/boost/function/function_base.hpp ****                 functor_manager_operation_type op, mpl::true_)
 332:/usr/include/boost/function/function_base.hpp ****         {
 333:/usr/include/boost/function/function_base.hpp ****           functor_manager_common<Functor>::manage_small(in_buffer,out_buffer,op);
 334:/usr/include/boost/function/function_base.hpp ****         }
 335:/usr/include/boost/function/function_base.hpp **** 
 336:/usr/include/boost/function/function_base.hpp ****         // Function objects that require heap allocation
 337:/usr/include/boost/function/function_base.hpp ****         static inline void
 338:/usr/include/boost/function/function_base.hpp ****         manager(const function_buffer& in_buffer, function_buffer& out_buffer,
 339:/usr/include/boost/function/function_base.hpp ****                 functor_manager_operation_type op, mpl::false_)
 340:/usr/include/boost/function/function_base.hpp ****         {
 341:/usr/include/boost/function/function_base.hpp ****           if (op == clone_functor_tag) {
 342:/usr/include/boost/function/function_base.hpp ****             // Clone the functor
 343:/usr/include/boost/function/function_base.hpp ****             // GCC 2.95.3 gets the CV qualifiers wrong here, so we
 344:/usr/include/boost/function/function_base.hpp ****             // can't do the static_cast that we should do.
 345:/usr/include/boost/function/function_base.hpp ****             // jewillco: Changing this to static_cast because GCC 2.95.3 is
 346:/usr/include/boost/function/function_base.hpp ****             // obsolete.
 347:/usr/include/boost/function/function_base.hpp ****             const functor_type* f =
 348:/usr/include/boost/function/function_base.hpp ****               static_cast<const functor_type*>(in_buffer.members.obj_ptr);
 349:/usr/include/boost/function/function_base.hpp ****             functor_type* new_f = new functor_type(*f);
 350:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.obj_ptr = new_f;
 351:/usr/include/boost/function/function_base.hpp ****           } else if (op == move_functor_tag) {
 352:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.obj_ptr = in_buffer.members.obj_ptr;
 353:/usr/include/boost/function/function_base.hpp ****             in_buffer.members.obj_ptr = 0;
 354:/usr/include/boost/function/function_base.hpp ****           } else if (op == destroy_functor_tag) {
 355:/usr/include/boost/function/function_base.hpp ****             /* Cast from the void pointer to the functor pointer type */
 356:/usr/include/boost/function/function_base.hpp ****             functor_type* f =
 357:/usr/include/boost/function/function_base.hpp ****               static_cast<functor_type*>(out_buffer.members.obj_ptr);
 358:/usr/include/boost/function/function_base.hpp ****             delete f;
 359:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.obj_ptr = 0;
 360:/usr/include/boost/function/function_base.hpp ****           } else if (op == check_functor_type_tag) {
 361:/usr/include/boost/function/function_base.hpp ****             if (*out_buffer.members.type.type == boost::typeindex::type_id<Functor>())
 362:/usr/include/boost/function/function_base.hpp ****               out_buffer.members.obj_ptr = in_buffer.members.obj_ptr;
 363:/usr/include/boost/function/function_base.hpp ****             else
 364:/usr/include/boost/function/function_base.hpp ****               out_buffer.members.obj_ptr = 0;
 365:/usr/include/boost/function/function_base.hpp ****           } else /* op == get_functor_type_tag */ {
 366:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.type.type = &boost::typeindex::type_id<Functor>().type_info();
 367:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.type.const_qualified = false;
 368:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.type.volatile_qualified = false;
 369:/usr/include/boost/function/function_base.hpp ****           }
 370:/usr/include/boost/function/function_base.hpp ****         }
 371:/usr/include/boost/function/function_base.hpp **** 
 372:/usr/include/boost/function/function_base.hpp ****         // For function objects, we determine whether the function
 373:/usr/include/boost/function/function_base.hpp ****         // object can use the small-object optimization buffer or
 374:/usr/include/boost/function/function_base.hpp ****         // whether we need to allocate it on the heap.
 375:/usr/include/boost/function/function_base.hpp ****         static inline void
 376:/usr/include/boost/function/function_base.hpp ****         manager(const function_buffer& in_buffer, function_buffer& out_buffer,
GAS LISTING /tmp/ccvmoMuv.s 			page 92


 377:/usr/include/boost/function/function_base.hpp ****                 functor_manager_operation_type op, function_obj_tag)
 378:/usr/include/boost/function/function_base.hpp ****         {
 379:/usr/include/boost/function/function_base.hpp ****           manager(in_buffer, out_buffer, op,
 380:/usr/include/boost/function/function_base.hpp ****                   mpl::bool_<(function_allows_small_object_optimization<functor_type>::value)>());
 381:/usr/include/boost/function/function_base.hpp ****         }
 382:/usr/include/boost/function/function_base.hpp **** 
 383:/usr/include/boost/function/function_base.hpp ****         // For member pointers, we use the small-object optimization buffer.
 384:/usr/include/boost/function/function_base.hpp ****         static inline void
 385:/usr/include/boost/function/function_base.hpp ****         manager(const function_buffer& in_buffer, function_buffer& out_buffer,
 386:/usr/include/boost/function/function_base.hpp ****                 functor_manager_operation_type op, member_ptr_tag)
 387:/usr/include/boost/function/function_base.hpp ****         {
 388:/usr/include/boost/function/function_base.hpp ****           manager(in_buffer, out_buffer, op, mpl::true_());
 389:/usr/include/boost/function/function_base.hpp ****         }
 390:/usr/include/boost/function/function_base.hpp **** 
 391:/usr/include/boost/function/function_base.hpp ****       public:
 392:/usr/include/boost/function/function_base.hpp ****         /* Dispatch to an appropriate manager based on whether we have a
 393:/usr/include/boost/function/function_base.hpp ****            function pointer or a function object pointer. */
 394:/usr/include/boost/function/function_base.hpp ****         static inline void
 395:/usr/include/boost/function/function_base.hpp ****         manage(const function_buffer& in_buffer, function_buffer& out_buffer,
 396:/usr/include/boost/function/function_base.hpp ****                functor_manager_operation_type op)
 397:/usr/include/boost/function/function_base.hpp ****         {
 398:/usr/include/boost/function/function_base.hpp ****           typedef typename get_function_tag<functor_type>::type tag_type;
 399:/usr/include/boost/function/function_base.hpp ****           switch (op) {
 400:/usr/include/boost/function/function_base.hpp ****           case get_functor_type_tag:
 401:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.type.type = &boost::typeindex::type_id<functor_type>().type_info();
 402:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.type.const_qualified = false;
 403:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.type.volatile_qualified = false;
 404:/usr/include/boost/function/function_base.hpp ****             return;
 405:/usr/include/boost/function/function_base.hpp **** 
 406:/usr/include/boost/function/function_base.hpp ****           default:
 407:/usr/include/boost/function/function_base.hpp ****             manager(in_buffer, out_buffer, op, tag_type());
 408:/usr/include/boost/function/function_base.hpp ****             return;
 409:/usr/include/boost/function/function_base.hpp ****           }
 410:/usr/include/boost/function/function_base.hpp ****         }
 411:/usr/include/boost/function/function_base.hpp ****       };
 412:/usr/include/boost/function/function_base.hpp **** 
 413:/usr/include/boost/function/function_base.hpp ****       template<typename Functor, typename Allocator>
 414:/usr/include/boost/function/function_base.hpp ****       struct functor_manager_a
 415:/usr/include/boost/function/function_base.hpp ****       {
 416:/usr/include/boost/function/function_base.hpp ****       private:
 417:/usr/include/boost/function/function_base.hpp ****         typedef Functor functor_type;
 418:/usr/include/boost/function/function_base.hpp **** 
 419:/usr/include/boost/function/function_base.hpp ****         // Function pointers
 420:/usr/include/boost/function/function_base.hpp ****         static inline void
 421:/usr/include/boost/function/function_base.hpp ****         manager(const function_buffer& in_buffer, function_buffer& out_buffer,
 422:/usr/include/boost/function/function_base.hpp ****                 functor_manager_operation_type op, function_ptr_tag)
 423:/usr/include/boost/function/function_base.hpp ****         {
 424:/usr/include/boost/function/function_base.hpp ****           functor_manager_common<Functor>::manage_ptr(in_buffer,out_buffer,op);
 425:/usr/include/boost/function/function_base.hpp ****         }
 426:/usr/include/boost/function/function_base.hpp **** 
 427:/usr/include/boost/function/function_base.hpp ****         // Function objects that fit in the small-object buffer.
 428:/usr/include/boost/function/function_base.hpp ****         static inline void
 429:/usr/include/boost/function/function_base.hpp ****         manager(const function_buffer& in_buffer, function_buffer& out_buffer,
 430:/usr/include/boost/function/function_base.hpp ****                 functor_manager_operation_type op, mpl::true_)
 431:/usr/include/boost/function/function_base.hpp ****         {
 432:/usr/include/boost/function/function_base.hpp ****           functor_manager_common<Functor>::manage_small(in_buffer,out_buffer,op);
 433:/usr/include/boost/function/function_base.hpp ****         }
GAS LISTING /tmp/ccvmoMuv.s 			page 93


 434:/usr/include/boost/function/function_base.hpp **** 
 435:/usr/include/boost/function/function_base.hpp ****         // Function objects that require heap allocation
 436:/usr/include/boost/function/function_base.hpp ****         static inline void
 437:/usr/include/boost/function/function_base.hpp ****         manager(const function_buffer& in_buffer, function_buffer& out_buffer,
 438:/usr/include/boost/function/function_base.hpp ****                 functor_manager_operation_type op, mpl::false_)
 439:/usr/include/boost/function/function_base.hpp ****         {
 440:/usr/include/boost/function/function_base.hpp ****           typedef functor_wrapper<Functor,Allocator> functor_wrapper_type;
 441:/usr/include/boost/function/function_base.hpp ****           typedef typename Allocator::template rebind<functor_wrapper_type>::other
 442:/usr/include/boost/function/function_base.hpp ****             wrapper_allocator_type;
 443:/usr/include/boost/function/function_base.hpp ****           typedef typename wrapper_allocator_type::pointer wrapper_allocator_pointer_type;
 444:/usr/include/boost/function/function_base.hpp **** 
 445:/usr/include/boost/function/function_base.hpp ****           if (op == clone_functor_tag) {
 446:/usr/include/boost/function/function_base.hpp ****             // Clone the functor
 447:/usr/include/boost/function/function_base.hpp ****             // GCC 2.95.3 gets the CV qualifiers wrong here, so we
 448:/usr/include/boost/function/function_base.hpp ****             // can't do the static_cast that we should do.
 449:/usr/include/boost/function/function_base.hpp ****             const functor_wrapper_type* f =
 450:/usr/include/boost/function/function_base.hpp ****               static_cast<const functor_wrapper_type*>(in_buffer.members.obj_ptr);
 451:/usr/include/boost/function/function_base.hpp ****             wrapper_allocator_type wrapper_allocator(static_cast<Allocator const &>(*f));
 452:/usr/include/boost/function/function_base.hpp ****             wrapper_allocator_pointer_type copy = wrapper_allocator.allocate(1);
 453:/usr/include/boost/function/function_base.hpp ****             wrapper_allocator.construct(copy, *f);
 454:/usr/include/boost/function/function_base.hpp **** 
 455:/usr/include/boost/function/function_base.hpp ****             // Get back to the original pointer type
 456:/usr/include/boost/function/function_base.hpp ****             functor_wrapper_type* new_f = static_cast<functor_wrapper_type*>(copy);
 457:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.obj_ptr = new_f;
 458:/usr/include/boost/function/function_base.hpp ****           } else if (op == move_functor_tag) {
 459:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.obj_ptr = in_buffer.members.obj_ptr;
 460:/usr/include/boost/function/function_base.hpp ****             in_buffer.members.obj_ptr = 0;
 461:/usr/include/boost/function/function_base.hpp ****           } else if (op == destroy_functor_tag) {
 462:/usr/include/boost/function/function_base.hpp ****             /* Cast from the void pointer to the functor_wrapper_type */
 463:/usr/include/boost/function/function_base.hpp ****             functor_wrapper_type* victim =
 464:/usr/include/boost/function/function_base.hpp ****               static_cast<functor_wrapper_type*>(in_buffer.members.obj_ptr);
 465:/usr/include/boost/function/function_base.hpp ****             wrapper_allocator_type wrapper_allocator(static_cast<Allocator const &>(*victim));
 466:/usr/include/boost/function/function_base.hpp ****             wrapper_allocator.destroy(victim);
 467:/usr/include/boost/function/function_base.hpp ****             wrapper_allocator.deallocate(victim,1);
 468:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.obj_ptr = 0;
 469:/usr/include/boost/function/function_base.hpp ****           } else if (op == check_functor_type_tag) {
 470:/usr/include/boost/function/function_base.hpp ****             if (*out_buffer.members.type.type == boost::typeindex::type_id<Functor>())
 471:/usr/include/boost/function/function_base.hpp ****               out_buffer.members.obj_ptr = in_buffer.members.obj_ptr;
 472:/usr/include/boost/function/function_base.hpp ****             else
 473:/usr/include/boost/function/function_base.hpp ****               out_buffer.members.obj_ptr = 0;
 474:/usr/include/boost/function/function_base.hpp ****           } else /* op == get_functor_type_tag */ {
 475:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.type.type = &boost::typeindex::type_id<Functor>().type_info();
 476:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.type.const_qualified = false;
 477:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.type.volatile_qualified = false;
 478:/usr/include/boost/function/function_base.hpp ****           }
 479:/usr/include/boost/function/function_base.hpp ****         }
 480:/usr/include/boost/function/function_base.hpp **** 
 481:/usr/include/boost/function/function_base.hpp ****         // For function objects, we determine whether the function
 482:/usr/include/boost/function/function_base.hpp ****         // object can use the small-object optimization buffer or
 483:/usr/include/boost/function/function_base.hpp ****         // whether we need to allocate it on the heap.
 484:/usr/include/boost/function/function_base.hpp ****         static inline void
 485:/usr/include/boost/function/function_base.hpp ****         manager(const function_buffer& in_buffer, function_buffer& out_buffer,
 486:/usr/include/boost/function/function_base.hpp ****                 functor_manager_operation_type op, function_obj_tag)
 487:/usr/include/boost/function/function_base.hpp ****         {
 488:/usr/include/boost/function/function_base.hpp ****           manager(in_buffer, out_buffer, op,
 489:/usr/include/boost/function/function_base.hpp ****                   mpl::bool_<(function_allows_small_object_optimization<functor_type>::value)>());
 490:/usr/include/boost/function/function_base.hpp ****         }
GAS LISTING /tmp/ccvmoMuv.s 			page 94


 491:/usr/include/boost/function/function_base.hpp **** 
 492:/usr/include/boost/function/function_base.hpp ****       public:
 493:/usr/include/boost/function/function_base.hpp ****         /* Dispatch to an appropriate manager based on whether we have a
 494:/usr/include/boost/function/function_base.hpp ****            function pointer or a function object pointer. */
 495:/usr/include/boost/function/function_base.hpp ****         static inline void
 496:/usr/include/boost/function/function_base.hpp ****         manage(const function_buffer& in_buffer, function_buffer& out_buffer,
 497:/usr/include/boost/function/function_base.hpp ****                functor_manager_operation_type op)
 498:/usr/include/boost/function/function_base.hpp ****         {
 499:/usr/include/boost/function/function_base.hpp ****           typedef typename get_function_tag<functor_type>::type tag_type;
 500:/usr/include/boost/function/function_base.hpp ****           switch (op) {
 501:/usr/include/boost/function/function_base.hpp ****           case get_functor_type_tag:
 502:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.type.type = &boost::typeindex::type_id<functor_type>().type_info();
 503:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.type.const_qualified = false;
 504:/usr/include/boost/function/function_base.hpp ****             out_buffer.members.type.volatile_qualified = false;
 505:/usr/include/boost/function/function_base.hpp ****             return;
 506:/usr/include/boost/function/function_base.hpp **** 
 507:/usr/include/boost/function/function_base.hpp ****           default:
 508:/usr/include/boost/function/function_base.hpp ****             manager(in_buffer, out_buffer, op, tag_type());
 509:/usr/include/boost/function/function_base.hpp ****             return;
 510:/usr/include/boost/function/function_base.hpp ****           }
 511:/usr/include/boost/function/function_base.hpp ****         }
 512:/usr/include/boost/function/function_base.hpp ****       };
 513:/usr/include/boost/function/function_base.hpp **** 
 514:/usr/include/boost/function/function_base.hpp ****       // A type that is only used for comparisons against zero
 515:/usr/include/boost/function/function_base.hpp ****       struct useless_clear_type {};
 516:/usr/include/boost/function/function_base.hpp **** 
 517:/usr/include/boost/function/function_base.hpp **** #ifdef BOOST_NO_SFINAE
 518:/usr/include/boost/function/function_base.hpp ****       // These routines perform comparisons between a Boost.Function
 519:/usr/include/boost/function/function_base.hpp ****       // object and an arbitrary function object (when the last
 520:/usr/include/boost/function/function_base.hpp ****       // parameter is mpl::bool_<false>) or against zero (when the
 521:/usr/include/boost/function/function_base.hpp ****       // last parameter is mpl::bool_<true>). They are only necessary
 522:/usr/include/boost/function/function_base.hpp ****       // for compilers that don't support SFINAE.
 523:/usr/include/boost/function/function_base.hpp ****       template<typename Function, typename Functor>
 524:/usr/include/boost/function/function_base.hpp ****         bool
 525:/usr/include/boost/function/function_base.hpp ****         compare_equal(const Function& f, const Functor&, int, mpl::bool_<true>)
 526:/usr/include/boost/function/function_base.hpp ****         { return f.empty(); }
 527:/usr/include/boost/function/function_base.hpp **** 
 528:/usr/include/boost/function/function_base.hpp ****       template<typename Function, typename Functor>
 529:/usr/include/boost/function/function_base.hpp ****         bool
 530:/usr/include/boost/function/function_base.hpp ****         compare_not_equal(const Function& f, const Functor&, int,
 531:/usr/include/boost/function/function_base.hpp ****                           mpl::bool_<true>)
 532:/usr/include/boost/function/function_base.hpp ****         { return !f.empty(); }
 533:/usr/include/boost/function/function_base.hpp **** 
 534:/usr/include/boost/function/function_base.hpp ****       template<typename Function, typename Functor>
 535:/usr/include/boost/function/function_base.hpp ****         bool
 536:/usr/include/boost/function/function_base.hpp ****         compare_equal(const Function& f, const Functor& g, long,
 537:/usr/include/boost/function/function_base.hpp ****                       mpl::bool_<false>)
 538:/usr/include/boost/function/function_base.hpp ****         {
 539:/usr/include/boost/function/function_base.hpp ****           if (const Functor* fp = f.template target<Functor>())
 540:/usr/include/boost/function/function_base.hpp ****             return function_equal(*fp, g);
 541:/usr/include/boost/function/function_base.hpp ****           else return false;
 542:/usr/include/boost/function/function_base.hpp ****         }
 543:/usr/include/boost/function/function_base.hpp **** 
 544:/usr/include/boost/function/function_base.hpp ****       template<typename Function, typename Functor>
 545:/usr/include/boost/function/function_base.hpp ****         bool
 546:/usr/include/boost/function/function_base.hpp ****         compare_equal(const Function& f, const reference_wrapper<Functor>& g,
 547:/usr/include/boost/function/function_base.hpp ****                       int, mpl::bool_<false>)
GAS LISTING /tmp/ccvmoMuv.s 			page 95


 548:/usr/include/boost/function/function_base.hpp ****         {
 549:/usr/include/boost/function/function_base.hpp ****           if (const Functor* fp = f.template target<Functor>())
 550:/usr/include/boost/function/function_base.hpp ****             return fp == g.get_pointer();
 551:/usr/include/boost/function/function_base.hpp ****           else return false;
 552:/usr/include/boost/function/function_base.hpp ****         }
 553:/usr/include/boost/function/function_base.hpp **** 
 554:/usr/include/boost/function/function_base.hpp ****       template<typename Function, typename Functor>
 555:/usr/include/boost/function/function_base.hpp ****         bool
 556:/usr/include/boost/function/function_base.hpp ****         compare_not_equal(const Function& f, const Functor& g, long,
 557:/usr/include/boost/function/function_base.hpp ****                           mpl::bool_<false>)
 558:/usr/include/boost/function/function_base.hpp ****         {
 559:/usr/include/boost/function/function_base.hpp ****           if (const Functor* fp = f.template target<Functor>())
 560:/usr/include/boost/function/function_base.hpp ****             return !function_equal(*fp, g);
 561:/usr/include/boost/function/function_base.hpp ****           else return true;
 562:/usr/include/boost/function/function_base.hpp ****         }
 563:/usr/include/boost/function/function_base.hpp **** 
 564:/usr/include/boost/function/function_base.hpp ****       template<typename Function, typename Functor>
 565:/usr/include/boost/function/function_base.hpp ****         bool
 566:/usr/include/boost/function/function_base.hpp ****         compare_not_equal(const Function& f,
 567:/usr/include/boost/function/function_base.hpp ****                           const reference_wrapper<Functor>& g, int,
 568:/usr/include/boost/function/function_base.hpp ****                           mpl::bool_<false>)
 569:/usr/include/boost/function/function_base.hpp ****         {
 570:/usr/include/boost/function/function_base.hpp ****           if (const Functor* fp = f.template target<Functor>())
 571:/usr/include/boost/function/function_base.hpp ****             return fp != g.get_pointer();
 572:/usr/include/boost/function/function_base.hpp ****           else return true;
 573:/usr/include/boost/function/function_base.hpp ****         }
 574:/usr/include/boost/function/function_base.hpp **** #endif // BOOST_NO_SFINAE
 575:/usr/include/boost/function/function_base.hpp **** 
 576:/usr/include/boost/function/function_base.hpp ****       /**
 577:/usr/include/boost/function/function_base.hpp ****        * Stores the "manager" portion of the vtable for a
 578:/usr/include/boost/function/function_base.hpp ****        * boost::function object.
 579:/usr/include/boost/function/function_base.hpp ****        */
 580:/usr/include/boost/function/function_base.hpp ****       struct vtable_base
 581:/usr/include/boost/function/function_base.hpp ****       {
 582:/usr/include/boost/function/function_base.hpp ****         void (*manager)(const function_buffer& in_buffer,
 583:/usr/include/boost/function/function_base.hpp ****                         function_buffer& out_buffer,
 584:/usr/include/boost/function/function_base.hpp ****                         functor_manager_operation_type op);
 585:/usr/include/boost/function/function_base.hpp ****       };
 586:/usr/include/boost/function/function_base.hpp ****     } // end namespace function
 587:/usr/include/boost/function/function_base.hpp ****   } // end namespace detail
 588:/usr/include/boost/function/function_base.hpp **** 
 589:/usr/include/boost/function/function_base.hpp **** /**
 590:/usr/include/boost/function/function_base.hpp ****  * The function_base class contains the basic elements needed for the
 591:/usr/include/boost/function/function_base.hpp ****  * function1, function2, function3, etc. classes. It is common to all
 592:/usr/include/boost/function/function_base.hpp ****  * functions (and as such can be used to tell if we have one of the
 593:/usr/include/boost/function/function_base.hpp ****  * functionN objects).
 594:/usr/include/boost/function/function_base.hpp ****  */
 595:/usr/include/boost/function/function_base.hpp **** class function_base
 596:/usr/include/boost/function/function_base.hpp **** {
 597:/usr/include/boost/function/function_base.hpp **** public:
 598:/usr/include/boost/function/function_base.hpp ****   function_base() : vtable(0) { }
 599:/usr/include/boost/function/function_base.hpp **** 
 600:/usr/include/boost/function/function_base.hpp ****   /** Determine if the function is empty (i.e., has no target). */
 601:/usr/include/boost/function/function_base.hpp ****   bool empty() const { return !vtable; }
 602:/usr/include/boost/function/function_base.hpp **** 
 603:/usr/include/boost/function/function_base.hpp ****   /** Retrieve the type of the stored function object, or type_id<void>()
 604:/usr/include/boost/function/function_base.hpp ****       if this is empty. */
GAS LISTING /tmp/ccvmoMuv.s 			page 96


 605:/usr/include/boost/function/function_base.hpp ****   const boost::typeindex::type_info& target_type() const
 606:/usr/include/boost/function/function_base.hpp ****   {
 607:/usr/include/boost/function/function_base.hpp ****     if (!vtable) return boost::typeindex::type_id<void>().type_info();
 608:/usr/include/boost/function/function_base.hpp **** 
 609:/usr/include/boost/function/function_base.hpp ****     detail::function::function_buffer type;
 610:/usr/include/boost/function/function_base.hpp ****     get_vtable()->manager(functor, type, detail::function::get_functor_type_tag);
 611:/usr/include/boost/function/function_base.hpp ****     return *type.members.type.type;
 612:/usr/include/boost/function/function_base.hpp ****   }
 613:/usr/include/boost/function/function_base.hpp **** 
 614:/usr/include/boost/function/function_base.hpp ****   template<typename Functor>
 615:/usr/include/boost/function/function_base.hpp ****     Functor* target()
 616:/usr/include/boost/function/function_base.hpp ****     {
 617:/usr/include/boost/function/function_base.hpp ****       if (!vtable) return 0;
 618:/usr/include/boost/function/function_base.hpp **** 
 619:/usr/include/boost/function/function_base.hpp ****       detail::function::function_buffer type_result;
 620:/usr/include/boost/function/function_base.hpp ****       type_result.members.type.type = &boost::typeindex::type_id<Functor>().type_info();
 621:/usr/include/boost/function/function_base.hpp ****       type_result.members.type.const_qualified = is_const<Functor>::value;
 622:/usr/include/boost/function/function_base.hpp ****       type_result.members.type.volatile_qualified = is_volatile<Functor>::value;
 623:/usr/include/boost/function/function_base.hpp ****       get_vtable()->manager(functor, type_result,
 624:/usr/include/boost/function/function_base.hpp ****                       detail::function::check_functor_type_tag);
 625:/usr/include/boost/function/function_base.hpp ****       return static_cast<Functor*>(type_result.members.obj_ptr);
 626:/usr/include/boost/function/function_base.hpp ****     }
 627:/usr/include/boost/function/function_base.hpp **** 
 628:/usr/include/boost/function/function_base.hpp ****   template<typename Functor>
 629:/usr/include/boost/function/function_base.hpp ****     const Functor* target() const
 630:/usr/include/boost/function/function_base.hpp ****     {
 631:/usr/include/boost/function/function_base.hpp ****       if (!vtable) return 0;
 632:/usr/include/boost/function/function_base.hpp **** 
 633:/usr/include/boost/function/function_base.hpp ****       detail::function::function_buffer type_result;
 634:/usr/include/boost/function/function_base.hpp ****       type_result.members.type.type = &boost::typeindex::type_id<Functor>().type_info();
 635:/usr/include/boost/function/function_base.hpp ****       type_result.members.type.const_qualified = true;
 636:/usr/include/boost/function/function_base.hpp ****       type_result.members.type.volatile_qualified = is_volatile<Functor>::value;
 637:/usr/include/boost/function/function_base.hpp ****       get_vtable()->manager(functor, type_result,
 638:/usr/include/boost/function/function_base.hpp ****                       detail::function::check_functor_type_tag);
 639:/usr/include/boost/function/function_base.hpp ****       // GCC 2.95.3 gets the CV qualifiers wrong here, so we
 640:/usr/include/boost/function/function_base.hpp ****       // can't do the static_cast that we should do.
 641:/usr/include/boost/function/function_base.hpp ****       return static_cast<const Functor*>(type_result.members.obj_ptr);
 642:/usr/include/boost/function/function_base.hpp ****     }
 643:/usr/include/boost/function/function_base.hpp **** 
 644:/usr/include/boost/function/function_base.hpp ****   template<typename F>
 645:/usr/include/boost/function/function_base.hpp ****     bool contains(const F& f) const
 646:/usr/include/boost/function/function_base.hpp ****     {
 647:/usr/include/boost/function/function_base.hpp ****       if (const F* fp = this->template target<F>())
 648:/usr/include/boost/function/function_base.hpp ****       {
 649:/usr/include/boost/function/function_base.hpp ****         return function_equal(*fp, f);
 650:/usr/include/boost/function/function_base.hpp ****       } else {
 651:/usr/include/boost/function/function_base.hpp ****         return false;
 652:/usr/include/boost/function/function_base.hpp ****       }
 653:/usr/include/boost/function/function_base.hpp ****     }
 654:/usr/include/boost/function/function_base.hpp **** 
 655:/usr/include/boost/function/function_base.hpp **** #if defined(__GNUC__) && __GNUC__ == 3 && __GNUC_MINOR__ <= 3
 656:/usr/include/boost/function/function_base.hpp ****   // GCC 3.3 and newer cannot copy with the global operator==, due to
 657:/usr/include/boost/function/function_base.hpp ****   // problems with instantiation of function return types before it
 658:/usr/include/boost/function/function_base.hpp ****   // has been verified that the argument types match up.
 659:/usr/include/boost/function/function_base.hpp ****   template<typename Functor>
 660:/usr/include/boost/function/function_base.hpp ****     BOOST_FUNCTION_ENABLE_IF_NOT_INTEGRAL(Functor, bool)
 661:/usr/include/boost/function/function_base.hpp ****     operator==(Functor g) const
GAS LISTING /tmp/ccvmoMuv.s 			page 97


 662:/usr/include/boost/function/function_base.hpp ****     {
 663:/usr/include/boost/function/function_base.hpp ****       if (const Functor* fp = target<Functor>())
 664:/usr/include/boost/function/function_base.hpp ****         return function_equal(*fp, g);
 665:/usr/include/boost/function/function_base.hpp ****       else return false;
 666:/usr/include/boost/function/function_base.hpp ****     }
 667:/usr/include/boost/function/function_base.hpp **** 
 668:/usr/include/boost/function/function_base.hpp ****   template<typename Functor>
 669:/usr/include/boost/function/function_base.hpp ****     BOOST_FUNCTION_ENABLE_IF_NOT_INTEGRAL(Functor, bool)
 670:/usr/include/boost/function/function_base.hpp ****     operator!=(Functor g) const
 671:/usr/include/boost/function/function_base.hpp ****     {
 672:/usr/include/boost/function/function_base.hpp ****       if (const Functor* fp = target<Functor>())
 673:/usr/include/boost/function/function_base.hpp ****         return !function_equal(*fp, g);
 674:/usr/include/boost/function/function_base.hpp ****       else return true;
 675:/usr/include/boost/function/function_base.hpp ****     }
 676:/usr/include/boost/function/function_base.hpp **** #endif
 677:/usr/include/boost/function/function_base.hpp **** 
 678:/usr/include/boost/function/function_base.hpp **** public: // should be protected, but GCC 2.95.3 will fail to allow access
 679:/usr/include/boost/function/function_base.hpp ****   detail::function::vtable_base* get_vtable() const {
 680:/usr/include/boost/function/function_base.hpp ****     return reinterpret_cast<detail::function::vtable_base*>(
 681:/usr/include/boost/function/function_base.hpp ****              reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
 682:/usr/include/boost/function/function_base.hpp ****   }
 683:/usr/include/boost/function/function_base.hpp **** 
 684:/usr/include/boost/function/function_base.hpp ****   bool has_trivial_copy_and_destroy() const {
 685:/usr/include/boost/function/function_base.hpp ****     return reinterpret_cast<std::size_t>(vtable) & 0x01;
 686:/usr/include/boost/function/function_base.hpp ****   }
 687:/usr/include/boost/function/function_base.hpp **** 
 688:/usr/include/boost/function/function_base.hpp ****   detail::function::vtable_base* vtable;
 689:/usr/include/boost/function/function_base.hpp ****   mutable detail::function::function_buffer functor;
 690:/usr/include/boost/function/function_base.hpp **** };
 691:/usr/include/boost/function/function_base.hpp **** 
 692:/usr/include/boost/function/function_base.hpp **** /**
 693:/usr/include/boost/function/function_base.hpp ****  * The bad_function_call exception class is thrown when a boost::function
 694:/usr/include/boost/function/function_base.hpp ****  * object is invoked
 695:/usr/include/boost/function/function_base.hpp ****  */
 696:/usr/include/boost/function/function_base.hpp **** class bad_function_call : public std::runtime_error
 998              		.loc 13 696 0
 999              		.cfi_startproc
 1000              	.LVL85:
 1001              	.LBB12945:
 1002              		.loc 13 696 0
 1003 0000 488D0500 		leaq	16+_ZTVN5boost17bad_function_callE(%rip), %rax
 1003      000000
 1004 0007 488907   		movq	%rax, (%rdi)
 1005 000a E9000000 		jmp	_ZNSt13runtime_errorD2Ev@PLT
 1005      00
 1006              	.LVL86:
 1007              	.LBE12945:
 1008              		.cfi_endproc
 1009              	.LFE11745:
 1011              		.weak	_ZN5boost17bad_function_callD1Ev
 1012              		.set	_ZN5boost17bad_function_callD1Ev,_ZN5boost17bad_function_callD2Ev
 1013              		.section	.text._ZN5boost17bad_function_callD0Ev,"axG",@progbits,_ZN5boost17bad_function_callD5Ev,c
 1014              		.align 2
 1015              		.p2align 4,,15
 1016              		.weak	_ZN5boost17bad_function_callD0Ev
 1018              	_ZN5boost17bad_function_callD0Ev:
 1019              	.LFB11747:
GAS LISTING /tmp/ccvmoMuv.s 			page 98


 1020              		.loc 13 696 0
 1021              		.cfi_startproc
 1022              	.LVL87:
 1023              	.LBB12946:
 1024              	.LBB12947:
 1025 0000 488D0500 		leaq	16+_ZTVN5boost17bad_function_callE(%rip), %rax
 1025      000000
 1026              	.LBE12947:
 1027              	.LBE12946:
 1028 0007 53       		pushq	%rbx
 1029              		.cfi_def_cfa_offset 16
 1030              		.cfi_offset 3, -16
 1031              		.loc 13 696 0
 1032 0008 4889FB   		movq	%rdi, %rbx
 1033              	.LBB12949:
 1034              	.LBB12948:
 1035 000b 488907   		movq	%rax, (%rdi)
 1036 000e E8000000 		call	_ZNSt13runtime_errorD2Ev@PLT
 1036      00
 1037              	.LVL88:
 1038              	.LBE12948:
 1039              	.LBE12949:
 1040 0013 4889DF   		movq	%rbx, %rdi
 1041 0016 BE100000 		movl	$16, %esi
 1041      00
 1042 001b 5B       		popq	%rbx
 1043              		.cfi_def_cfa_offset 8
 1044              	.LVL89:
 1045 001c E9000000 		jmp	_ZdlPvm@PLT
 1045      00
 1046              	.LVL90:
 1047              		.cfi_endproc
 1048              	.LFE11747:
 1050              		.section	.text._ZN5boost6system12system_errorD2Ev,"axG",@progbits,_ZN5boost6system12system_errorD5
 1051              		.align 2
 1052              		.p2align 4,,15
 1053              		.weak	_ZN5boost6system12system_errorD2Ev
 1055              	_ZN5boost6system12system_errorD2Ev:
 1056              	.LFB4242:
  47:/usr/include/boost/system/system_error.hpp **** 
 1057              		.loc 8 47 0
 1058              		.cfi_startproc
 1059              	.LVL91:
 1060              	.LBB12965:
 1061 0000 488D0500 		leaq	16+_ZTVN5boost6system12system_errorE(%rip), %rax
 1061      000000
 1062              	.LBE12965:
 1063 0007 53       		pushq	%rbx
 1064              		.cfi_def_cfa_offset 16
 1065              		.cfi_offset 3, -16
  47:/usr/include/boost/system/system_error.hpp **** 
 1066              		.loc 8 47 0
 1067 0008 4889FB   		movq	%rdi, %rbx
 1068              	.LBB12976:
 1069 000b 488907   		movq	%rax, (%rdi)
 1070              	.LVL92:
 1071 000e 488B7F20 		movq	32(%rdi), %rdi
GAS LISTING /tmp/ccvmoMuv.s 			page 99


 1072              	.LVL93:
 1073              	.LBB12966:
 1074              	.LBB12967:
 1075              	.LBB12968:
 1076              	.LBB12969:
 1077              	.LBB12970:
 1078              	.LBB12971:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 1079              		.loc 10 152 0
 1080 0012 488D4330 		leaq	48(%rbx), %rax
 1081              	.LBE12971:
 1082              	.LBE12970:
 1083              	.LBE12969:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 1084              		.loc 10 180 0
 1085 0016 4839C7   		cmpq	%rax, %rdi
 1086 0019 7405     		je	.L57
 1087              	.LVL94:
 1088              	.LBB12972:
 1089              	.LBB12973:
 1090              	.LBB12974:
 1091              	.LBB12975:
 1092              		.loc 12 110 0
 1093 001b E8000000 		call	_ZdlPv@PLT
 1093      00
 1094              	.LVL95:
 1095              	.L57:
 1096              	.LBE12975:
 1097              	.LBE12974:
 1098              	.LBE12973:
 1099              	.LBE12972:
 1100              	.LBE12968:
 1101              	.LBE12967:
 1102              	.LBE12966:
  47:/usr/include/boost/system/system_error.hpp **** 
 1103              		.loc 8 47 0
 1104 0020 4889DF   		movq	%rbx, %rdi
 1105              	.LBE12976:
 1106 0023 5B       		popq	%rbx
 1107              		.cfi_def_cfa_offset 8
 1108              	.LVL96:
 1109              	.LBB12977:
 1110 0024 E9000000 		jmp	_ZNSt13runtime_errorD2Ev@PLT
 1110      00
 1111              	.LVL97:
 1112              	.LBE12977:
 1113              		.cfi_endproc
 1114              	.LFE4242:
 1116              		.weak	_ZN5boost6system12system_errorD1Ev
 1117              		.set	_ZN5boost6system12system_errorD1Ev,_ZN5boost6system12system_errorD2Ev
 1118              		.text
 1119 0029 90       		.align 2
 1120 002a 660F1F44 		.p2align 4,,15
 1120      0000
 1121              		.globl	_ZN2gr5lfast12costas2_implD1Ev
 1123              	_ZN2gr5lfast12costas2_implD1Ev:
 1124              	.LFB11025:
GAS LISTING /tmp/ccvmoMuv.s 			page 100


  89:costas2_impl.cc ****     {
 1125              		.loc 5 89 0
 1126              		.cfi_startproc
 1127              	.LVL98:
 1128              	.LBB12978:
 1129              	.LBB12979:
 1130              	.LBB12980:
 1131              		.file 14 "/home/mpiscopo/gnuradio/include/lfast/costas2.h"
   1:/home/mpiscopo/gnuradio/include/lfast/costas2.h **** /* -*- c++ -*- */
   2:/home/mpiscopo/gnuradio/include/lfast/costas2.h **** /* 
   3:/home/mpiscopo/gnuradio/include/lfast/costas2.h ****  * Copyright 2017 ghostop14.
   4:/home/mpiscopo/gnuradio/include/lfast/costas2.h ****  * 
   5:/home/mpiscopo/gnuradio/include/lfast/costas2.h ****  * This is free software; you can redistribute it and/or modify
   6:/home/mpiscopo/gnuradio/include/lfast/costas2.h ****  * it under the terms of the GNU General Public License as published by
   7:/home/mpiscopo/gnuradio/include/lfast/costas2.h ****  * the Free Software Foundation; either version 3, or (at your option)
   8:/home/mpiscopo/gnuradio/include/lfast/costas2.h ****  * any later version.
   9:/home/mpiscopo/gnuradio/include/lfast/costas2.h ****  * 
  10:/home/mpiscopo/gnuradio/include/lfast/costas2.h ****  * This software is distributed in the hope that it will be useful,
  11:/home/mpiscopo/gnuradio/include/lfast/costas2.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:/home/mpiscopo/gnuradio/include/lfast/costas2.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:/home/mpiscopo/gnuradio/include/lfast/costas2.h ****  * GNU General Public License for more details.
  14:/home/mpiscopo/gnuradio/include/lfast/costas2.h ****  * 
  15:/home/mpiscopo/gnuradio/include/lfast/costas2.h ****  * You should have received a copy of the GNU General Public License
  16:/home/mpiscopo/gnuradio/include/lfast/costas2.h ****  * along with this software; see the file COPYING.  If not, write to
  17:/home/mpiscopo/gnuradio/include/lfast/costas2.h ****  * the Free Software Foundation, Inc., 51 Franklin Street,
  18:/home/mpiscopo/gnuradio/include/lfast/costas2.h ****  * Boston, MA 02110-1301, USA.
  19:/home/mpiscopo/gnuradio/include/lfast/costas2.h ****  */
  20:/home/mpiscopo/gnuradio/include/lfast/costas2.h **** 
  21:/home/mpiscopo/gnuradio/include/lfast/costas2.h **** 
  22:/home/mpiscopo/gnuradio/include/lfast/costas2.h **** #ifndef INCLUDED_LFAST_COSTAS2_H
  23:/home/mpiscopo/gnuradio/include/lfast/costas2.h **** #define INCLUDED_LFAST_COSTAS2_H
  24:/home/mpiscopo/gnuradio/include/lfast/costas2.h **** 
  25:/home/mpiscopo/gnuradio/include/lfast/costas2.h **** #include <lfast/api.h>
  26:/home/mpiscopo/gnuradio/include/lfast/costas2.h **** #include <gnuradio/sync_block.h>
  27:/home/mpiscopo/gnuradio/include/lfast/costas2.h **** #include <gnuradio/blocks/control_loop.h>
  28:/home/mpiscopo/gnuradio/include/lfast/costas2.h **** 
  29:/home/mpiscopo/gnuradio/include/lfast/costas2.h **** namespace gr {
  30:/home/mpiscopo/gnuradio/include/lfast/costas2.h ****   namespace lfast {
  31:/home/mpiscopo/gnuradio/include/lfast/costas2.h **** 
  32:/home/mpiscopo/gnuradio/include/lfast/costas2.h ****     /*!
  33:/home/mpiscopo/gnuradio/include/lfast/costas2.h ****      * \brief <+description of block+>
  34:/home/mpiscopo/gnuradio/include/lfast/costas2.h ****      * \ingroup lfast
  35:/home/mpiscopo/gnuradio/include/lfast/costas2.h ****      *
  36:/home/mpiscopo/gnuradio/include/lfast/costas2.h ****      */
  37:/home/mpiscopo/gnuradio/include/lfast/costas2.h ****     class LFAST_API costas2
 1132              		.loc 14 37 0
 1133 0030 488D0500 		leaq	32+_ZTCN2gr5lfast12costas2_implE0_NS0_7costas2E(%rip), %rax
 1133      000000
 1134              	.LBE12980:
 1135              	.LBE12979:
 1136              	.LBE12978:
  89:costas2_impl.cc ****     {
 1137              		.loc 5 89 0
 1138 0037 53       		pushq	%rbx
 1139              		.cfi_def_cfa_offset 16
 1140              		.cfi_offset 3, -16
  89:costas2_impl.cc ****     {
GAS LISTING /tmp/ccvmoMuv.s 			page 101


 1141              		.loc 5 89 0
 1142 0038 4889FB   		movq	%rdi, %rbx
 1143              	.LBB12987:
 1144              	.LBB12982:
 1145              	.LBB12981:
 1146              		.loc 14 37 0
 1147 003b 488DBF78 		leaq	632(%rdi), %rdi
 1147      020000
 1148              	.LVL99:
 1149 0042 48898788 		movq	%rax, -632(%rdi)
 1149      FDFFFF
 1150 0049 488D0500 		leaq	232+_ZTCN2gr5lfast12costas2_implE0_NS0_7costas2E(%rip), %rax
 1150      000000
 1151 0050 488987B0 		movq	%rax, -592(%rdi)
 1151      FDFFFF
 1152 0057 488D0500 		leaq	432+_ZTCN2gr5lfast12costas2_implE0_NS0_7costas2E(%rip), %rax
 1152      000000
 1153 005e 488907   		movq	%rax, (%rdi)
 1154              	.LVL100:
 1155              	.LBE12981:
 1156              	.LBE12982:
  89:costas2_impl.cc ****     {
 1157              		.loc 5 89 0
 1158 0061 E8000000 		call	_ZN2gr6blocks12control_loopD2Ev@PLT
 1158      00
 1159              	.LVL101:
 1160              	.LBB12983:
 1161              	.LBB12984:
 1162              		.file 15 "/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h"
   1:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h **** /* -*- c++ -*- */
   2:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h **** /*
   3:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****  * Copyright 2004,2013 Free Software Foundation, Inc.
   4:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****  *
   5:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****  * This file is part of GNU Radio
   6:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****  *
   7:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****  * GNU Radio is free software; you can redistribute it and/or modify
   8:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****  * it under the terms of the GNU General Public License as published by
   9:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****  * the Free Software Foundation; either version 3, or (at your option)
  10:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****  * any later version.
  11:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****  *
  12:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****  * GNU Radio is distributed in the hope that it will be useful,
  13:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****  * GNU General Public License for more details.
  16:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****  *
  17:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****  * You should have received a copy of the GNU General Public License
  18:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****  * along with GNU Radio; see the file COPYING.  If not, write to
  19:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****  * the Free Software Foundation, Inc., 51 Franklin Street,
  20:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****  * Boston, MA 02110-1301, USA.
  21:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****  */
  22:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h **** 
  23:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h **** #ifndef INCLUDED_GR_RUNTIME_SYNC_BLOCK_H
  24:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h **** #define INCLUDED_GR_RUNTIME_SYNC_BLOCK_H
  25:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h **** 
  26:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h **** #include <gnuradio/api.h>
  27:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h **** #include <gnuradio/block.h>
  28:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 102


  29:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h **** namespace gr {
  30:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h **** 
  31:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****   /*!
  32:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****    * \brief synchronous 1:1 input to output with history
  33:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****    * \ingroup base_blk
  34:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****    *
  35:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****    * Override work to provide the signal processing implementation.
  36:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****    */
  37:/home/mpiscopo/gnuradio/include/gnuradio/sync_block.h ****   class GR_RUNTIME_API sync_block : public block
 1163              		.loc 15 37 0
 1164 0066 488D0500 		leaq	16+_ZTVN2gr10sync_blockE(%rip), %rax
 1164      000000
 1165 006d 488D7B28 		leaq	40(%rbx), %rdi
 1166 0071 48894328 		movq	%rax, 40(%rbx)
 1167              	.LBE12984:
 1168              	.LBE12983:
 1169              	.LBE12987:
  91:costas2_impl.cc **** 
 1170              		.loc 5 91 0
 1171 0075 5B       		popq	%rbx
 1172              		.cfi_def_cfa_offset 8
 1173              	.LVL102:
 1174              	.LBB12988:
 1175              	.LBB12986:
 1176              	.LBB12985:
 1177              		.loc 15 37 0
 1178 0076 E9000000 		jmp	_ZN2gr5blockD2Ev@PLT
 1178      00
 1179              	.LVL103:
 1180              	.LBE12985:
 1181              	.LBE12986:
 1182              	.LBE12988:
 1183              		.cfi_endproc
 1184              	.LFE11025:
 1186              		.set	.LTHUNK8,_ZN2gr5lfast12costas2_implD1Ev
 1187 007b 0F1F4400 		.p2align 4,,15
 1187      00
 1188              		.globl	_ZTv0_n24_N2gr5lfast12costas2_implD1Ev
 1190              	_ZTv0_n24_N2gr5lfast12costas2_implD1Ev:
 1191              	.LFB16002:
  46:costas2_impl.h **** 
 1192              		.loc 4 46 0
 1193              		.cfi_startproc
 1194 0080 4C8B17   		movq	(%rdi), %r10
 1195 0083 49037AE8 		addq	-24(%r10), %rdi
 1196 0087 EBA7     		jmp	.LTHUNK8
 1197              		.cfi_endproc
 1198              	.LFE16002:
 1200 0089 90       		.align 2
 1201 008a 660F1F44 		.p2align 4,,15
 1201      0000
 1202              		.globl	_ZN2gr5lfast12costas2_implD0Ev
 1204              	_ZN2gr5lfast12costas2_implD0Ev:
 1205              	.LFB11026:
  89:costas2_impl.cc ****     {
 1206              		.loc 5 89 0
 1207              		.cfi_startproc
GAS LISTING /tmp/ccvmoMuv.s 			page 103


 1208              	.LVL104:
 1209              	.LBB12989:
 1210              	.LBB12990:
 1211              	.LBB12991:
 1212              	.LBB12992:
 1213              		.loc 14 37 0
 1214 0090 488D0500 		leaq	32+_ZTCN2gr5lfast12costas2_implE0_NS0_7costas2E(%rip), %rax
 1214      000000
 1215              	.LBE12992:
 1216              	.LBE12991:
 1217              	.LBE12990:
 1218              	.LBE12989:
  89:costas2_impl.cc ****     {
 1219              		.loc 5 89 0
 1220 0097 53       		pushq	%rbx
 1221              		.cfi_def_cfa_offset 16
 1222              		.cfi_offset 3, -16
  89:costas2_impl.cc ****     {
 1223              		.loc 5 89 0
 1224 0098 4889FB   		movq	%rdi, %rbx
 1225              	.LBB12998:
 1226              	.LBB12997:
 1227              	.LBB12994:
 1228              	.LBB12993:
 1229              		.loc 14 37 0
 1230 009b 488DBF78 		leaq	632(%rdi), %rdi
 1230      020000
 1231              	.LVL105:
 1232 00a2 48898788 		movq	%rax, -632(%rdi)
 1232      FDFFFF
 1233 00a9 488D0500 		leaq	232+_ZTCN2gr5lfast12costas2_implE0_NS0_7costas2E(%rip), %rax
 1233      000000
 1234 00b0 488987B0 		movq	%rax, -592(%rdi)
 1234      FDFFFF
 1235 00b7 488D0500 		leaq	432+_ZTCN2gr5lfast12costas2_implE0_NS0_7costas2E(%rip), %rax
 1235      000000
 1236 00be 488907   		movq	%rax, (%rdi)
 1237              	.LVL106:
 1238              	.LBE12993:
 1239              	.LBE12994:
  89:costas2_impl.cc ****     {
 1240              		.loc 5 89 0
 1241 00c1 E8000000 		call	_ZN2gr6blocks12control_loopD2Ev@PLT
 1241      00
 1242              	.LVL107:
 1243              	.LBB12995:
 1244              	.LBB12996:
 1245              		.loc 15 37 0
 1246 00c6 488D0500 		leaq	16+_ZTVN2gr10sync_blockE(%rip), %rax
 1246      000000
 1247 00cd 488D7B28 		leaq	40(%rbx), %rdi
 1248 00d1 48894328 		movq	%rax, 40(%rbx)
 1249 00d5 E8000000 		call	_ZN2gr5blockD2Ev@PLT
 1249      00
 1250              	.LVL108:
 1251              	.LBE12996:
 1252              	.LBE12995:
GAS LISTING /tmp/ccvmoMuv.s 			page 104


 1253              	.LBE12997:
 1254              	.LBE12998:
  91:costas2_impl.cc **** 
 1255              		.loc 5 91 0
 1256 00da 4889DF   		movq	%rbx, %rdi
 1257 00dd BEA00200 		movl	$672, %esi
 1257      00
 1258 00e2 5B       		popq	%rbx
 1259              		.cfi_def_cfa_offset 8
 1260              	.LVL109:
 1261 00e3 E9000000 		jmp	_ZdlPvm@PLT
 1261      00
 1262              	.LVL110:
 1263              		.cfi_endproc
 1264              	.LFE11026:
 1266              		.set	.LTHUNK9,_ZN2gr5lfast12costas2_implD0Ev
 1267 00e8 0F1F8400 		.p2align 4,,15
 1267      00000000 
 1268              		.globl	_ZTv0_n24_N2gr5lfast12costas2_implD0Ev
 1270              	_ZTv0_n24_N2gr5lfast12costas2_implD0Ev:
 1271              	.LFB16003:
  46:costas2_impl.h **** 
 1272              		.loc 4 46 0
 1273              		.cfi_startproc
 1274 00f0 4C8B17   		movq	(%rdi), %r10
 1275 00f3 49037AE8 		addq	-24(%r10), %rdi
 1276 00f7 EB97     		jmp	.LTHUNK9
 1277              		.cfi_endproc
 1278              	.LFE16003:
 1280 00f9 90       		.align 2
 1281 00fa 660F1F44 		.p2align 4,,15
 1281      0000
 1282              		.globl	_ZN2gr5lfast12costas2_impl4workEiRSt6vectorIPKvSaIS4_EERS2_IPvSaIS8_EE
 1284              	_ZN2gr5lfast12costas2_impl4workEiRSt6vectorIPKvSaIS4_EERS2_IPvSaIS8_EE:
 1285              	.LFB11031:
 290:costas2_impl.cc ****         // const gr_complex *iptr = (gr_complex *) input_items[0];
 1286              		.loc 5 290 0
 1287              		.cfi_startproc
 1288              	.LVL111:
 1289 0100 4157     		pushq	%r15
 1290              		.cfi_def_cfa_offset 16
 1291              		.cfi_offset 15, -16
 1292 0102 4156     		pushq	%r14
 1293              		.cfi_def_cfa_offset 24
 1294              		.cfi_offset 14, -24
 1295 0104 4155     		pushq	%r13
 1296              		.cfi_def_cfa_offset 32
 1297              		.cfi_offset 13, -32
 1298 0106 4154     		pushq	%r12
 1299              		.cfi_def_cfa_offset 40
 1300              		.cfi_offset 12, -40
 1301 0108 4189F5   		movl	%esi, %r13d
 1302 010b 55       		pushq	%rbp
 1303              		.cfi_def_cfa_offset 48
 1304              		.cfi_offset 6, -48
 1305 010c 53       		pushq	%rbx
 1306              		.cfi_def_cfa_offset 56
GAS LISTING /tmp/ccvmoMuv.s 			page 105


 1307              		.cfi_offset 3, -56
 1308 010d 4883EC38 		subq	$56, %rsp
 1309              		.cfi_def_cfa_offset 112
 293:costas2_impl.cc ****         SComplex *optr = (SComplex *) output_items[0];
 1310              		.loc 5 293 0
 1311 0111 488B02   		movq	(%rdx), %rax
 294:costas2_impl.cc ****         // gr_complex nco_out;
 1312              		.loc 5 294 0
 1313 0114 488B11   		movq	(%rcx), %rdx
 1314              	.LVL112:
 303:costas2_impl.cc ****           // nco_out = gr_expj(-d_phase);
 1315              		.loc 5 303 0
 1316 0117 85F6     		testl	%esi, %esi
 293:costas2_impl.cc ****         SComplex *optr = (SComplex *) output_items[0];
 1317              		.loc 5 293 0
 1318 0119 488B00   		movq	(%rax), %rax
 1319              	.LVL113:
 294:costas2_impl.cc ****         // gr_complex nco_out;
 1320              		.loc 5 294 0
 1321 011c 488B2A   		movq	(%rdx), %rbp
 1322              	.LVL114:
 303:costas2_impl.cc ****           // nco_out = gr_expj(-d_phase);
 1323              		.loc 5 303 0
 1324 011f 0F8E0E02 		jle	.L83
 1324      0000
 1325 0125 488B17   		movq	(%rdi), %rdx
 1326 0128 4989FC   		movq	%rdi, %r12
 1327 012b 4989FE   		movq	%rdi, %r14
 1328 012e 488D5804 		leaq	4(%rax), %rbx
 1329 0132 4883C504 		addq	$4, %rbp
 1330              	.LVL115:
 1331 0136 F20F1035 		movsd	.LC6(%rip), %xmm6
 1331      00000000 
 1332 013e 4C0362E0 		addq	-32(%rdx), %r12
 1333 0142 8D56FF   		leal	-1(%rsi), %edx
 371:costas2_impl.cc ****   			while(d_phase < CL_MINUS_TWO_PI) {
 1334              		.loc 5 371 0
 1335 0145 F2440F10 		movsd	.LC7(%rip), %xmm8
 1335      05000000 
 1335      00
 1336 014e 4C8D7CD0 		leaq	12(%rax,%rdx,8), %r15
 1336      0C
 1337 0153 F3410F10 		movss	36(%r12), %xmm5
 1337      6C2424
 1338 015a F30F116C 		movss	%xmm5, 40(%rsp)
 1338      2428
 1339 0160 F3410F10 		movss	32(%r12), %xmm5
 1339      6C2420
 1340 0167 F30F116C 		movss	%xmm5, 44(%rsp)
 1340      242C
 1341 016d F3410F10 		movss	16(%r12), %xmm5
 1341      6C2410
 1342 0174 F30F116C 		movss	%xmm5, 36(%rsp)
 1342      2424
 1343 017a F3410F10 		movss	12(%r12), %xmm7
 1343      7C240C
 1344 0181 F3410F10 		movss	8(%r12), %xmm1
GAS LISTING /tmp/ccvmoMuv.s 			page 106


 1344      4C2408
 1345 0188 EB33     		jmp	.L74
 1346              	.LVL116:
 1347 018a 660F1F44 		.p2align 4,,10
 1347      0000
 1348              		.p2align 3
 1349              	.L84:
 1350 0190 66440F2E 		ucomisd	%xmm0, %xmm8
 1350      C0
 1351 0195 0F874501 		ja	.L72
 1351      0000
 1352              	.L70:
 378:costas2_impl.cc ****             d_freq = d_max_freq;
 1353              		.loc 5 378 0
 1354 019b 0F2E7C24 		ucomiss	36(%rsp), %xmm7
 1354      24
 1355 01a0 0F865A01 		jbe	.L88
 1355      0000
 1356 01a6 4883C308 		addq	$8, %rbx
 1357 01aa 4883C508 		addq	$8, %rbp
 1358              	.LVL117:
 303:costas2_impl.cc ****           // nco_out = gr_expj(-d_phase);
 1359              		.loc 5 303 0
 1360 01ae 4939DF   		cmpq	%rbx, %r15
 379:costas2_impl.cc ****           else if(d_freq < d_min_freq)
 1361              		.loc 5 379 0
 1362 01b1 F30F107C 		movss	36(%rsp), %xmm7
 1362      2424
 303:costas2_impl.cc ****           // nco_out = gr_expj(-d_phase);
 1363              		.loc 5 303 0
 1364 01b7 0F846201 		je	.L89
 1364      0000
 1365              	.LVL118:
 1366              	.L74:
 311:costas2_impl.cc **** 			n_r = cosf(-d_phase);
 1367              		.loc 5 311 0
 1368 01bd 0F28C1   		movaps	%xmm1, %xmm0
 1369 01c0 F30F117C 		movss	%xmm7, 32(%rsp)
 1369      2420
 1370 01c6 F2440F11 		movsd	%xmm8, 24(%rsp)
 1370      442418
 1371 01cd F20F1174 		movsd	%xmm6, 16(%rsp)
 1371      2410
 1372 01d3 F30F114C 		movss	%xmm1, 8(%rsp)
 1372      2408
 1373 01d9 0F570500 		xorps	.LC2(%rip), %xmm0
 1373      000000
 1374 01e0 E8000000 		call	sinf@PLT
 1374      00
 1375              	.LVL119:
 312:costas2_impl.cc **** 
 1376              		.loc 5 312 0
 1377 01e5 F30F104C 		movss	8(%rsp), %xmm1
 1377      2408
 311:costas2_impl.cc **** 			n_r = cosf(-d_phase);
 1378              		.loc 5 311 0
 1379 01eb F30F1144 		movss	%xmm0, 12(%rsp)
GAS LISTING /tmp/ccvmoMuv.s 			page 107


 1379      240C
 1380              	.LVL120:
 312:costas2_impl.cc **** 
 1381              		.loc 5 312 0
 1382 01f1 0F28C1   		movaps	%xmm1, %xmm0
 1383              	.LVL121:
 1384 01f4 E8000000 		call	cosf@PLT
 1384      00
 1385              	.LVL122:
 323:costas2_impl.cc ****           o_i = (i_r * n_i) + (i_i * n_r);
 1386              		.loc 5 323 0
 1387 01f9 F30F105C 		movss	12(%rsp), %xmm3
 1387      240C
 1388 01ff 0F28D0   		movaps	%xmm0, %xmm2
 1389 0202 440F28CB 		movaps	%xmm3, %xmm9
 321:costas2_impl.cc ****           i_i = iptr[i].imag;
 1390              		.loc 5 321 0
 1391 0206 F30F106B 		movss	-4(%rbx), %xmm5
 1391      FC
 1392              	.LVL123:
 322:costas2_impl.cc ****           o_r = (i_r * n_r) - (i_i*n_i);
 1393              		.loc 5 322 0
 1394 020b F30F1023 		movss	(%rbx), %xmm4
 1395              	.LVL124:
 323:costas2_impl.cc ****           o_i = (i_r * n_i) + (i_i * n_r);
 1396              		.loc 5 323 0
 1397 020f F30F59D5 		mulss	%xmm5, %xmm2
 1398 0213 F3440F59 		mulss	%xmm4, %xmm9
 1398      CC
 353:costas2_impl.cc **** #endif
 1399              		.loc 5 353 0
 1400 0218 F30F107C 		movss	32(%rsp), %xmm7
 1400      2420
 324:costas2_impl.cc **** #endif
 1401              		.loc 5 324 0
 1402 021e F30F59DD 		mulss	%xmm5, %xmm3
 360:costas2_impl.cc **** #endif
 1403              		.loc 5 360 0
 1404 0222 F30F104C 		movss	8(%rsp), %xmm1
 1404      2408
 324:costas2_impl.cc **** #endif
 1405              		.loc 5 324 0
 1406 0228 F30F59C4 		mulss	%xmm4, %xmm0
 1407              	.LVL125:
 366:costas2_impl.cc ****   			while(d_phase>CL_TWO_PI) {
 1408              		.loc 5 366 0
 1409 022c F20F1074 		movsd	16(%rsp), %xmm6
 1409      2410
 323:costas2_impl.cc ****           o_i = (i_r * n_i) + (i_i * n_r);
 1410              		.loc 5 323 0
 1411 0232 F3410F5C 		subss	%xmm9, %xmm2
 1411      D1
 1412              	.LVL126:
 366:costas2_impl.cc ****   			while(d_phase>CL_TWO_PI) {
 1413              		.loc 5 366 0
 1414 0237 F2440F10 		movsd	24(%rsp), %xmm8
 1414      442418
GAS LISTING /tmp/ccvmoMuv.s 			page 108


 324:costas2_impl.cc **** #endif
 1415              		.loc 5 324 0
 1416 023e F30F58C3 		addss	%xmm3, %xmm0
 1417              	.LVL127:
 327:costas2_impl.cc ****           optr[i].imag = o_i;
 1418              		.loc 5 327 0
 1419 0242 F30F1155 		movss	%xmm2, -4(%rbp)
 1419      FC
 328:costas2_impl.cc **** 
 1420              		.loc 5 328 0
 1421 0247 F30F1145 		movss	%xmm0, 0(%rbp)
 1421      00
 332:costas2_impl.cc **** 
 1422              		.loc 5 332 0
 1423 024c F30F59C2 		mulss	%xmm2, %xmm0
 1424              	.LVL128:
 346:costas2_impl.cc **** 
 1425              		.loc 5 346 0
 1426 0250 F30F1015 		movss	.LC3(%rip), %xmm2
 1426      00000000 
 1427              	.LVL129:
 1428 0258 F30F58D0 		addss	%xmm0, %xmm2
 1429 025c F30F5C05 		subss	.LC3(%rip), %xmm0
 1429      00000000 
 1430              	.LBB12999:
 1431              	.LBB13000:
 1432              		.file 16 "/usr/include/c++/6/cmath"
   1:/usr/include/c++/6/cmath **** // -*- C++ -*- C forwarding header.
   2:/usr/include/c++/6/cmath **** 
   3:/usr/include/c++/6/cmath **** // Copyright (C) 1997-2016 Free Software Foundation, Inc.
   4:/usr/include/c++/6/cmath **** //
   5:/usr/include/c++/6/cmath **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/6/cmath **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/6/cmath **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/6/cmath **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/6/cmath **** // any later version.
  10:/usr/include/c++/6/cmath **** 
  11:/usr/include/c++/6/cmath **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/6/cmath **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/6/cmath **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/6/cmath **** // GNU General Public License for more details.
  15:/usr/include/c++/6/cmath **** 
  16:/usr/include/c++/6/cmath **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/6/cmath **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/6/cmath **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/6/cmath **** 
  20:/usr/include/c++/6/cmath **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/6/cmath **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/6/cmath **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/6/cmath **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/6/cmath **** 
  25:/usr/include/c++/6/cmath **** /** @file include/cmath
  26:/usr/include/c++/6/cmath ****  *  This is a Standard C++ Library file.  You should @c \#include this file
  27:/usr/include/c++/6/cmath ****  *  in your programs, rather than any of the @a *.h implementation files.
  28:/usr/include/c++/6/cmath ****  *
  29:/usr/include/c++/6/cmath ****  *  This is the C++ version of the Standard C Library header @c math.h,
  30:/usr/include/c++/6/cmath ****  *  and its contents are (mostly) the same as that header, but are all
GAS LISTING /tmp/ccvmoMuv.s 			page 109


  31:/usr/include/c++/6/cmath ****  *  contained in the namespace @c std (except for names which are defined
  32:/usr/include/c++/6/cmath ****  *  as macros in C).
  33:/usr/include/c++/6/cmath ****  */
  34:/usr/include/c++/6/cmath **** 
  35:/usr/include/c++/6/cmath **** //
  36:/usr/include/c++/6/cmath **** // ISO C++ 14882: 26.5  C library
  37:/usr/include/c++/6/cmath **** //
  38:/usr/include/c++/6/cmath **** 
  39:/usr/include/c++/6/cmath **** #pragma GCC system_header
  40:/usr/include/c++/6/cmath **** 
  41:/usr/include/c++/6/cmath **** #include <bits/c++config.h>
  42:/usr/include/c++/6/cmath **** #include <bits/cpp_type_traits.h>
  43:/usr/include/c++/6/cmath **** #include <ext/type_traits.h>
  44:/usr/include/c++/6/cmath **** #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  45:/usr/include/c++/6/cmath **** #include_next <math.h>
  46:/usr/include/c++/6/cmath **** #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  47:/usr/include/c++/6/cmath **** 
  48:/usr/include/c++/6/cmath **** #ifndef _GLIBCXX_CMATH
  49:/usr/include/c++/6/cmath **** #define _GLIBCXX_CMATH 1
  50:/usr/include/c++/6/cmath **** 
  51:/usr/include/c++/6/cmath **** // Get rid of those macros defined in <math.h> in lieu of real functions.
  52:/usr/include/c++/6/cmath **** #undef abs
  53:/usr/include/c++/6/cmath **** #undef div
  54:/usr/include/c++/6/cmath **** #undef acos
  55:/usr/include/c++/6/cmath **** #undef asin
  56:/usr/include/c++/6/cmath **** #undef atan
  57:/usr/include/c++/6/cmath **** #undef atan2
  58:/usr/include/c++/6/cmath **** #undef ceil
  59:/usr/include/c++/6/cmath **** #undef cos
  60:/usr/include/c++/6/cmath **** #undef cosh
  61:/usr/include/c++/6/cmath **** #undef exp
  62:/usr/include/c++/6/cmath **** #undef fabs
  63:/usr/include/c++/6/cmath **** #undef floor
  64:/usr/include/c++/6/cmath **** #undef fmod
  65:/usr/include/c++/6/cmath **** #undef frexp
  66:/usr/include/c++/6/cmath **** #undef ldexp
  67:/usr/include/c++/6/cmath **** #undef log
  68:/usr/include/c++/6/cmath **** #undef log10
  69:/usr/include/c++/6/cmath **** #undef modf
  70:/usr/include/c++/6/cmath **** #undef pow
  71:/usr/include/c++/6/cmath **** #undef sin
  72:/usr/include/c++/6/cmath **** #undef sinh
  73:/usr/include/c++/6/cmath **** #undef sqrt
  74:/usr/include/c++/6/cmath **** #undef tan
  75:/usr/include/c++/6/cmath **** #undef tanh
  76:/usr/include/c++/6/cmath **** 
  77:/usr/include/c++/6/cmath **** extern "C++"
  78:/usr/include/c++/6/cmath **** {
  79:/usr/include/c++/6/cmath **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/usr/include/c++/6/cmath **** {
  81:/usr/include/c++/6/cmath **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/usr/include/c++/6/cmath **** 
  83:/usr/include/c++/6/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  84:/usr/include/c++/6/cmath ****   inline _GLIBCXX_CONSTEXPR double
  85:/usr/include/c++/6/cmath ****   abs(double __x)
  86:/usr/include/c++/6/cmath ****   { return __builtin_fabs(__x); }
  87:/usr/include/c++/6/cmath **** #endif
GAS LISTING /tmp/ccvmoMuv.s 			page 110


  88:/usr/include/c++/6/cmath **** 
  89:/usr/include/c++/6/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  90:/usr/include/c++/6/cmath ****   inline _GLIBCXX_CONSTEXPR float
  91:/usr/include/c++/6/cmath ****   abs(float __x)
  92:/usr/include/c++/6/cmath ****   { return __builtin_fabsf(__x); }
 1433              		.loc 16 92 0
 1434 0264 0F541500 		andps	.LC4(%rip), %xmm2
 1434      000000
 1435              	.LBE13000:
 1436              	.LBE12999:
 1437              	.LBB13001:
 1438              	.LBB13002:
 1439 026b 0F540500 		andps	.LC4(%rip), %xmm0
 1439      000000
 1440              	.LBE13002:
 1441              	.LBE13001:
 346:costas2_impl.cc **** 
 1442              		.loc 5 346 0
 1443 0272 F30F5CD0 		subss	%xmm0, %xmm2
 353:costas2_impl.cc **** #endif
 1444              		.loc 5 353 0
 1445 0276 F30F1044 		movss	40(%rsp), %xmm0
 1445      2428
 346:costas2_impl.cc **** 
 1446              		.loc 5 346 0
 1447 027c F30F5915 		mulss	.LC5(%rip), %xmm2
 1447      00000000 
 353:costas2_impl.cc **** #endif
 1448              		.loc 5 353 0
 1449 0284 F30F59C2 		mulss	%xmm2, %xmm0
 1450 0288 F30F58F8 		addss	%xmm0, %xmm7
 360:costas2_impl.cc **** #endif
 1451              		.loc 5 360 0
 1452 028c F30F1044 		movss	44(%rsp), %xmm0
 1452      242C
 1453 0292 F30F59C2 		mulss	%xmm2, %xmm0
 1454 0296 F30F58C1 		addss	%xmm1, %xmm0
 1455 029a 0F28C8   		movaps	%xmm0, %xmm1
 366:costas2_impl.cc ****   			while(d_phase>CL_TWO_PI) {
 1456              		.loc 5 366 0
 1457 029d 660FEFC0 		pxor	%xmm0, %xmm0
 360:costas2_impl.cc **** #endif
 1458              		.loc 5 360 0
 1459 02a1 F30F58CF 		addss	%xmm7, %xmm1
 366:costas2_impl.cc ****   			while(d_phase>CL_TWO_PI) {
 1460              		.loc 5 366 0
 1461 02a5 F30F5AC1 		cvtss2sd	%xmm1, %xmm0
 1462 02a9 660F2EC6 		ucomisd	%xmm6, %xmm0
 1463 02ad 0F86DDFE 		jbe	.L84
 1463      FFFF
 1464              		.p2align 4,,10
 1465 02b3 0F1F4400 		.p2align 3
 1465      00
 1466              	.L67:
 368:costas2_impl.cc ****   			}
 1467              		.loc 5 368 0
 1468 02b8 F20F5CC6 		subsd	%xmm6, %xmm0
GAS LISTING /tmp/ccvmoMuv.s 			page 111


 1469 02bc 660FEFC9 		pxor	%xmm1, %xmm1
 1470 02c0 F20F5AC8 		cvtsd2ss	%xmm0, %xmm1
 367:costas2_impl.cc ****   			  d_phase -= CL_TWO_PI;
 1471              		.loc 5 367 0
 1472 02c4 660FEFC0 		pxor	%xmm0, %xmm0
 1473 02c8 F30F5AC1 		cvtss2sd	%xmm1, %xmm0
 1474 02cc 660F2EC6 		ucomisd	%xmm6, %xmm0
 1475 02d0 77E6     		ja	.L67
 1476 02d2 E9C4FEFF 		jmp	.L70
 1476      FF
 1477 02d7 660F1F84 		.p2align 4,,10
 1477      00000000 
 1477      00
 1478              		.p2align 3
 1479              	.L72:
 373:costas2_impl.cc ****   			}
 1480              		.loc 5 373 0
 1481 02e0 F20F58C6 		addsd	%xmm6, %xmm0
 1482 02e4 660FEFC9 		pxor	%xmm1, %xmm1
 1483 02e8 F20F5AC8 		cvtsd2ss	%xmm0, %xmm1
 372:costas2_impl.cc ****   			  d_phase += CL_TWO_PI;
 1484              		.loc 5 372 0
 1485 02ec 660FEFC0 		pxor	%xmm0, %xmm0
 1486 02f0 F30F5AC1 		cvtss2sd	%xmm1, %xmm0
 1487 02f4 66440F2E 		ucomisd	%xmm0, %xmm8
 1487      C0
 1488 02f9 77E5     		ja	.L72
 1489 02fb E99BFEFF 		jmp	.L70
 1489      FF
 1490              		.p2align 4,,10
 1491              		.p2align 3
 1492              	.L88:
 380:costas2_impl.cc ****             d_freq = d_min_freq;
 1493              		.loc 5 380 0
 1494 0300 F3410F10 		movss	20(%r12), %xmm0
 1494      442414
 1495 0307 4883C308 		addq	$8, %rbx
 381:costas2_impl.cc **** 
 1496              		.loc 5 381 0
 1497 030b F30F5FC7 		maxss	%xmm7, %xmm0
 1498 030f 4883C508 		addq	$8, %rbp
 1499              	.LVL130:
 303:costas2_impl.cc ****           // nco_out = gr_expj(-d_phase);
 1500              		.loc 5 303 0
 1501 0313 4939DF   		cmpq	%rbx, %r15
 381:costas2_impl.cc **** 
 1502              		.loc 5 381 0
 1503 0316 0F28F8   		movaps	%xmm0, %xmm7
 303:costas2_impl.cc ****           // nco_out = gr_expj(-d_phase);
 1504              		.loc 5 303 0
 1505 0319 0F859EFE 		jne	.L74
 1505      FFFF
 1506              	.LVL131:
 1507              	.L89:
 1508 031f F3410F11 		movss	%xmm1, 8(%r12)
 1508      4C2408
 1509 0326 F3410F11 		movss	%xmm2, 12(%r14)
GAS LISTING /tmp/ccvmoMuv.s 			page 112


 1509      560C
 1510 032c F3410F11 		movss	%xmm7, 12(%r12)
 1510      7C240C
 1511              	.LVL132:
 1512              	.L83:
 399:costas2_impl.cc **** 
 1513              		.loc 5 399 0
 1514 0333 4883C438 		addq	$56, %rsp
 1515              		.cfi_def_cfa_offset 56
 1516 0337 4489E8   		movl	%r13d, %eax
 1517 033a 5B       		popq	%rbx
 1518              		.cfi_def_cfa_offset 48
 1519 033b 5D       		popq	%rbp
 1520              		.cfi_def_cfa_offset 40
 1521 033c 415C     		popq	%r12
 1522              		.cfi_def_cfa_offset 32
 1523 033e 415D     		popq	%r13
 1524              		.cfi_def_cfa_offset 24
 1525              	.LVL133:
 1526 0340 415E     		popq	%r14
 1527              		.cfi_def_cfa_offset 16
 1528 0342 415F     		popq	%r15
 1529              		.cfi_def_cfa_offset 8
 1530 0344 C3       		ret
 1531              		.cfi_endproc
 1532              	.LFE11031:
 1534              		.globl	_ZN2gr5lfast12costas2_impl9work_testEiRSt6vectorIPKvSaIS4_EERS2_IPvSaIS8_EE
 1535              		.set	_ZN2gr5lfast12costas2_impl9work_testEiRSt6vectorIPKvSaIS4_EERS2_IPvSaIS8_EE,_ZN2gr5lfast12cos
 1536              		.set	.LTHUNK10,_ZN2gr5lfast12costas2_impl4workEiRSt6vectorIPKvSaIS4_EERS2_IPvSaIS8_EE
 1537 0345 90662E0F 		.p2align 4,,15
 1537      1F840000 
 1537      000000
 1538              		.globl	_ZTv0_n176_N2gr5lfast12costas2_impl4workEiRSt6vectorIPKvSaIS4_EERS2_IPvSaIS8_EE
 1540              	_ZTv0_n176_N2gr5lfast12costas2_impl4workEiRSt6vectorIPKvSaIS4_EERS2_IPvSaIS8_EE:
 1541              	.LFB16004:
  55:costas2_impl.h **** 
  56:costas2_impl.h ****       // Where all the action really happens
  57:costas2_impl.h ****       int work(int noutput_items,
 1542              		.loc 4 57 0
 1543              		.cfi_startproc
 1544 0350 4C8B17   		movq	(%rdi), %r10
 1545 0353 4903BA50 		addq	-176(%r10), %rdi
 1545      FFFFFF
 1546 035a E9A1FDFF 		jmp	.LTHUNK10
 1546      FF
 1547              		.cfi_endproc
 1548              	.LFE16004:
 1550              		.section	.text.unlikely,"ax",@progbits
 1551              		.align 2
 1553              	_ZN5boost6detail15sp_counted_base7releaseEv.part.17:
 1554              	.LFB15758:
 127:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     }
 128:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 129:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     virtual void * get_deleter( sp_typeinfo const & ti ) = 0;
 130:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     virtual void * get_untyped_deleter() = 0;
 131:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 132:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     void add_ref_copy()
GAS LISTING /tmp/ccvmoMuv.s 			page 113


 133:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     {
 134:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         atomic_increment( &use_count_ );
 135:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     }
 136:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 137:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     bool add_ref_lock() // true on success
 138:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     {
 139:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         return atomic_conditional_increment( &use_count_ ) != 0;
 140:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     }
 141:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 142:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     void release() // nothrow
 1555              		.loc 1 142 0
 1556              		.cfi_startproc
 1557              	.LVL134:
 1558 0000 53       		pushq	%rbx
 1559              		.cfi_def_cfa_offset 16
 1560              		.cfi_offset 3, -16
 143:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     {
 144:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         if( atomic_exchange_and_add( &use_count_, -1 ) == 1 )
 145:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
 146:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****             dispose();
 1561              		.loc 1 146 0
 1562 0001 488B07   		movq	(%rdi), %rax
 142:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     {
 1563              		.loc 1 142 0
 1564 0004 4889FB   		movq	%rdi, %rbx
 1565              		.loc 1 146 0
 1566 0007 FF5010   		call	*16(%rax)
 1567              	.LVL135:
 1568              	.LBB13009:
 1569              	.LBB13010:
 1570              	.LBB13011:
 1571              	.LBB13012:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 1572              		.loc 1 50 0
 1573 000a 83C8FF   		orl	$-1, %eax
 1574              	#APP
 1575              	# 50 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 1576              		lock
 1577              		xadd %eax, 12(%rbx)
 1578              	# 0 "" 2
 1579              	.LVL136:
 1580              	#NO_APP
 1581              	.LBE13012:
 1582              	.LBE13011:
 147:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****             weak_release();
 148:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         }
 149:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     }
 150:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 151:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     void weak_add_ref() // nothrow
 152:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     {
 153:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         atomic_increment( &weak_count_ );
 154:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     }
 155:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 156:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     void weak_release() // nothrow
 157:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     {
 158:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         if( atomic_exchange_and_add( &weak_count_, -1 ) == 1 )
 1583              		.loc 1 158 0
GAS LISTING /tmp/ccvmoMuv.s 			page 114


 1584 0012 FFC8     		decl	%eax
 1585 0014 750D     		jne	.L90
 159:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
 160:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****             destroy();
 1586              		.loc 1 160 0
 1587 0016 488B03   		movq	(%rbx), %rax
 1588 0019 4889DF   		movq	%rbx, %rdi
 1589              	.LBE13010:
 1590              	.LBE13009:
 149:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 1591              		.loc 1 149 0
 1592 001c 5B       		popq	%rbx
 1593              		.cfi_remember_state
 1594              		.cfi_def_cfa_offset 8
 1595              	.LVL137:
 1596              	.LBB13014:
 1597              	.LBB13013:
 1598              		.loc 1 160 0
 1599 001d 488B4018 		movq	24(%rax), %rax
 1600 0021 FFE0     		jmp	*%rax
 1601              	.LVL138:
 1602              	.L90:
 1603              		.cfi_restore_state
 1604              	.LBE13013:
 1605              	.LBE13014:
 149:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 1606              		.loc 1 149 0
 1607 0023 5B       		popq	%rbx
 1608              		.cfi_def_cfa_offset 8
 1609              	.LVL139:
 1610 0024 C3       		ret
 1611              		.cfi_endproc
 1612              	.LFE15758:
 1614              		.section	.rodata.str1.8,"aMS",@progbits,1
 1615              		.align 8
 1616              	.LC8:
 1617 0000 62617369 		.string	"basic_string::_M_construct null not valid"
 1617      635F7374 
 1617      72696E67 
 1617      3A3A5F4D 
 1617      5F636F6E 
 1618              		.text
 1619 035f 90       		.align 2
 1620              		.p2align 4,,15
 1622              	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_
 1623              	.LFB15893:
 1624              		.file 17 "/usr/include/c++/6/bits/basic_string.tcc"
   1:/usr/include/c++/6/bits/basic_string.tcc **** // Components for manipulating sequences of characters -*- C++ -*-
   2:/usr/include/c++/6/bits/basic_string.tcc **** 
   3:/usr/include/c++/6/bits/basic_string.tcc **** // Copyright (C) 1997-2016 Free Software Foundation, Inc.
   4:/usr/include/c++/6/bits/basic_string.tcc **** //
   5:/usr/include/c++/6/bits/basic_string.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/6/bits/basic_string.tcc **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/6/bits/basic_string.tcc **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/6/bits/basic_string.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/6/bits/basic_string.tcc **** // any later version.
  10:/usr/include/c++/6/bits/basic_string.tcc **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 115


  11:/usr/include/c++/6/bits/basic_string.tcc **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/6/bits/basic_string.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/6/bits/basic_string.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/6/bits/basic_string.tcc **** // GNU General Public License for more details.
  15:/usr/include/c++/6/bits/basic_string.tcc **** 
  16:/usr/include/c++/6/bits/basic_string.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/6/bits/basic_string.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/6/bits/basic_string.tcc **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/6/bits/basic_string.tcc **** 
  20:/usr/include/c++/6/bits/basic_string.tcc **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/6/bits/basic_string.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/6/bits/basic_string.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/6/bits/basic_string.tcc **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/6/bits/basic_string.tcc **** 
  25:/usr/include/c++/6/bits/basic_string.tcc **** /** @file bits/basic_string.tcc
  26:/usr/include/c++/6/bits/basic_string.tcc ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/6/bits/basic_string.tcc ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/c++/6/bits/basic_string.tcc ****  */
  29:/usr/include/c++/6/bits/basic_string.tcc **** 
  30:/usr/include/c++/6/bits/basic_string.tcc **** //
  31:/usr/include/c++/6/bits/basic_string.tcc **** // ISO C++ 14882: 21  Strings library
  32:/usr/include/c++/6/bits/basic_string.tcc **** //
  33:/usr/include/c++/6/bits/basic_string.tcc **** 
  34:/usr/include/c++/6/bits/basic_string.tcc **** // Written by Jason Merrill based upon the specification by Takanori Adachi
  35:/usr/include/c++/6/bits/basic_string.tcc **** // in ANSI X3J16/94-0013R2.  Rewritten by Nathan Myers to ISO-14882.
  36:/usr/include/c++/6/bits/basic_string.tcc **** // Non-reference-counted implementation written by Paolo Carlini and
  37:/usr/include/c++/6/bits/basic_string.tcc **** // updated by Jonathan Wakely for ISO-14882-2011.
  38:/usr/include/c++/6/bits/basic_string.tcc **** 
  39:/usr/include/c++/6/bits/basic_string.tcc **** #ifndef _BASIC_STRING_TCC
  40:/usr/include/c++/6/bits/basic_string.tcc **** #define _BASIC_STRING_TCC 1
  41:/usr/include/c++/6/bits/basic_string.tcc **** 
  42:/usr/include/c++/6/bits/basic_string.tcc **** #pragma GCC system_header
  43:/usr/include/c++/6/bits/basic_string.tcc **** 
  44:/usr/include/c++/6/bits/basic_string.tcc **** #include <bits/cxxabi_forced.h>
  45:/usr/include/c++/6/bits/basic_string.tcc **** 
  46:/usr/include/c++/6/bits/basic_string.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  47:/usr/include/c++/6/bits/basic_string.tcc **** {
  48:/usr/include/c++/6/bits/basic_string.tcc **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  49:/usr/include/c++/6/bits/basic_string.tcc **** 
  50:/usr/include/c++/6/bits/basic_string.tcc **** #if _GLIBCXX_USE_CXX11_ABI
  51:/usr/include/c++/6/bits/basic_string.tcc **** 
  52:/usr/include/c++/6/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
  53:/usr/include/c++/6/bits/basic_string.tcc ****     const typename basic_string<_CharT, _Traits, _Alloc>::size_type
  54:/usr/include/c++/6/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::npos;
  55:/usr/include/c++/6/bits/basic_string.tcc **** 
  56:/usr/include/c++/6/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
  57:/usr/include/c++/6/bits/basic_string.tcc ****     void
  58:/usr/include/c++/6/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
  59:/usr/include/c++/6/bits/basic_string.tcc ****     swap(basic_string& __s) _GLIBCXX_NOEXCEPT
  60:/usr/include/c++/6/bits/basic_string.tcc ****     {
  61:/usr/include/c++/6/bits/basic_string.tcc ****       if (this == &__s)
  62:/usr/include/c++/6/bits/basic_string.tcc **** 	return;
  63:/usr/include/c++/6/bits/basic_string.tcc **** 
  64:/usr/include/c++/6/bits/basic_string.tcc ****       _Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator());
  65:/usr/include/c++/6/bits/basic_string.tcc **** 
  66:/usr/include/c++/6/bits/basic_string.tcc ****       if (_M_is_local())
  67:/usr/include/c++/6/bits/basic_string.tcc **** 	if (__s._M_is_local())
GAS LISTING /tmp/ccvmoMuv.s 			page 116


  68:/usr/include/c++/6/bits/basic_string.tcc **** 	  {
  69:/usr/include/c++/6/bits/basic_string.tcc **** 	    if (length() && __s.length())
  70:/usr/include/c++/6/bits/basic_string.tcc **** 	      {
  71:/usr/include/c++/6/bits/basic_string.tcc **** 		_CharT __tmp_data[_S_local_capacity + 1];
  72:/usr/include/c++/6/bits/basic_string.tcc **** 		traits_type::copy(__tmp_data, __s._M_local_buf,
  73:/usr/include/c++/6/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  74:/usr/include/c++/6/bits/basic_string.tcc **** 		traits_type::copy(__s._M_local_buf, _M_local_buf,
  75:/usr/include/c++/6/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  76:/usr/include/c++/6/bits/basic_string.tcc **** 		traits_type::copy(_M_local_buf, __tmp_data,
  77:/usr/include/c++/6/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  78:/usr/include/c++/6/bits/basic_string.tcc **** 	      }
  79:/usr/include/c++/6/bits/basic_string.tcc **** 	    else if (__s.length())
  80:/usr/include/c++/6/bits/basic_string.tcc **** 	      {
  81:/usr/include/c++/6/bits/basic_string.tcc **** 		traits_type::copy(_M_local_buf, __s._M_local_buf,
  82:/usr/include/c++/6/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  83:/usr/include/c++/6/bits/basic_string.tcc **** 		_M_length(__s.length());
  84:/usr/include/c++/6/bits/basic_string.tcc **** 		__s._M_set_length(0);
  85:/usr/include/c++/6/bits/basic_string.tcc **** 		return;
  86:/usr/include/c++/6/bits/basic_string.tcc **** 	      }
  87:/usr/include/c++/6/bits/basic_string.tcc **** 	    else if (length())
  88:/usr/include/c++/6/bits/basic_string.tcc **** 	      {
  89:/usr/include/c++/6/bits/basic_string.tcc **** 		traits_type::copy(__s._M_local_buf, _M_local_buf,
  90:/usr/include/c++/6/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  91:/usr/include/c++/6/bits/basic_string.tcc **** 		__s._M_length(length());
  92:/usr/include/c++/6/bits/basic_string.tcc **** 		_M_set_length(0);
  93:/usr/include/c++/6/bits/basic_string.tcc **** 		return;
  94:/usr/include/c++/6/bits/basic_string.tcc **** 	      }
  95:/usr/include/c++/6/bits/basic_string.tcc **** 	  }
  96:/usr/include/c++/6/bits/basic_string.tcc **** 	else
  97:/usr/include/c++/6/bits/basic_string.tcc **** 	  {
  98:/usr/include/c++/6/bits/basic_string.tcc **** 	    const size_type __tmp_capacity = __s._M_allocated_capacity;
  99:/usr/include/c++/6/bits/basic_string.tcc **** 	    traits_type::copy(__s._M_local_buf, _M_local_buf,
 100:/usr/include/c++/6/bits/basic_string.tcc **** 			      _S_local_capacity + 1);
 101:/usr/include/c++/6/bits/basic_string.tcc **** 	    _M_data(__s._M_data());
 102:/usr/include/c++/6/bits/basic_string.tcc **** 	    __s._M_data(__s._M_local_buf);
 103:/usr/include/c++/6/bits/basic_string.tcc **** 	    _M_capacity(__tmp_capacity);
 104:/usr/include/c++/6/bits/basic_string.tcc **** 	  }
 105:/usr/include/c++/6/bits/basic_string.tcc ****       else
 106:/usr/include/c++/6/bits/basic_string.tcc **** 	{
 107:/usr/include/c++/6/bits/basic_string.tcc **** 	  const size_type __tmp_capacity = _M_allocated_capacity;
 108:/usr/include/c++/6/bits/basic_string.tcc **** 	  if (__s._M_is_local())
 109:/usr/include/c++/6/bits/basic_string.tcc **** 	    {
 110:/usr/include/c++/6/bits/basic_string.tcc **** 	      traits_type::copy(_M_local_buf, __s._M_local_buf,
 111:/usr/include/c++/6/bits/basic_string.tcc **** 				_S_local_capacity + 1);
 112:/usr/include/c++/6/bits/basic_string.tcc **** 	      __s._M_data(_M_data());
 113:/usr/include/c++/6/bits/basic_string.tcc **** 	      _M_data(_M_local_buf);
 114:/usr/include/c++/6/bits/basic_string.tcc **** 	    }
 115:/usr/include/c++/6/bits/basic_string.tcc **** 	  else
 116:/usr/include/c++/6/bits/basic_string.tcc **** 	    {
 117:/usr/include/c++/6/bits/basic_string.tcc **** 	      pointer __tmp_ptr = _M_data();
 118:/usr/include/c++/6/bits/basic_string.tcc **** 	      _M_data(__s._M_data());
 119:/usr/include/c++/6/bits/basic_string.tcc **** 	      __s._M_data(__tmp_ptr);
 120:/usr/include/c++/6/bits/basic_string.tcc **** 	      _M_capacity(__s._M_allocated_capacity);
 121:/usr/include/c++/6/bits/basic_string.tcc **** 	    }
 122:/usr/include/c++/6/bits/basic_string.tcc **** 	  __s._M_capacity(__tmp_capacity);
 123:/usr/include/c++/6/bits/basic_string.tcc **** 	}
 124:/usr/include/c++/6/bits/basic_string.tcc **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 117


 125:/usr/include/c++/6/bits/basic_string.tcc ****       const size_type __tmp_length = length();
 126:/usr/include/c++/6/bits/basic_string.tcc ****       _M_length(__s.length());
 127:/usr/include/c++/6/bits/basic_string.tcc ****       __s._M_length(__tmp_length);
 128:/usr/include/c++/6/bits/basic_string.tcc ****     }
 129:/usr/include/c++/6/bits/basic_string.tcc **** 
 130:/usr/include/c++/6/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 131:/usr/include/c++/6/bits/basic_string.tcc ****     typename basic_string<_CharT, _Traits, _Alloc>::pointer
 132:/usr/include/c++/6/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 133:/usr/include/c++/6/bits/basic_string.tcc ****     _M_create(size_type& __capacity, size_type __old_capacity)
 134:/usr/include/c++/6/bits/basic_string.tcc ****     {
 135:/usr/include/c++/6/bits/basic_string.tcc ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 136:/usr/include/c++/6/bits/basic_string.tcc ****       // 83.  String::npos vs. string::max_size()
 137:/usr/include/c++/6/bits/basic_string.tcc ****       if (__capacity > max_size())
 138:/usr/include/c++/6/bits/basic_string.tcc **** 	std::__throw_length_error(__N("basic_string::_M_create"));
 139:/usr/include/c++/6/bits/basic_string.tcc **** 
 140:/usr/include/c++/6/bits/basic_string.tcc ****       // The below implements an exponential growth policy, necessary to
 141:/usr/include/c++/6/bits/basic_string.tcc ****       // meet amortized linear time requirements of the library: see
 142:/usr/include/c++/6/bits/basic_string.tcc ****       // http://gcc.gnu.org/ml/libstdc++/2001-07/msg00085.html.
 143:/usr/include/c++/6/bits/basic_string.tcc ****       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 144:/usr/include/c++/6/bits/basic_string.tcc **** 	{
 145:/usr/include/c++/6/bits/basic_string.tcc **** 	  __capacity = 2 * __old_capacity;
 146:/usr/include/c++/6/bits/basic_string.tcc **** 	  // Never allocate a string bigger than max_size.
 147:/usr/include/c++/6/bits/basic_string.tcc **** 	  if (__capacity > max_size())
 148:/usr/include/c++/6/bits/basic_string.tcc **** 	    __capacity = max_size();
 149:/usr/include/c++/6/bits/basic_string.tcc **** 	}
 150:/usr/include/c++/6/bits/basic_string.tcc **** 
 151:/usr/include/c++/6/bits/basic_string.tcc ****       // NB: Need an array of char_type[__capacity], plus a terminating
 152:/usr/include/c++/6/bits/basic_string.tcc ****       // null char_type() element.
 153:/usr/include/c++/6/bits/basic_string.tcc ****       return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
 154:/usr/include/c++/6/bits/basic_string.tcc ****     }
 155:/usr/include/c++/6/bits/basic_string.tcc **** 
 156:/usr/include/c++/6/bits/basic_string.tcc ****   // NB: This is the special case for Input Iterators, used in
 157:/usr/include/c++/6/bits/basic_string.tcc ****   // istreambuf_iterators, etc.
 158:/usr/include/c++/6/bits/basic_string.tcc ****   // Input Iterators have a cost structure very different from
 159:/usr/include/c++/6/bits/basic_string.tcc ****   // pointers, calling for a different coding style.
 160:/usr/include/c++/6/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 161:/usr/include/c++/6/bits/basic_string.tcc ****     template<typename _InIterator>
 162:/usr/include/c++/6/bits/basic_string.tcc ****       void
 163:/usr/include/c++/6/bits/basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>::
 164:/usr/include/c++/6/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 165:/usr/include/c++/6/bits/basic_string.tcc **** 		   std::input_iterator_tag)
 166:/usr/include/c++/6/bits/basic_string.tcc ****       {
 167:/usr/include/c++/6/bits/basic_string.tcc **** 	size_type __len = 0;
 168:/usr/include/c++/6/bits/basic_string.tcc **** 	size_type __capacity = size_type(_S_local_capacity);
 169:/usr/include/c++/6/bits/basic_string.tcc **** 
 170:/usr/include/c++/6/bits/basic_string.tcc **** 	while (__beg != __end && __len < __capacity)
 171:/usr/include/c++/6/bits/basic_string.tcc **** 	  {
 172:/usr/include/c++/6/bits/basic_string.tcc **** 	    _M_data()[__len++] = *__beg;
 173:/usr/include/c++/6/bits/basic_string.tcc **** 	    ++__beg;
 174:/usr/include/c++/6/bits/basic_string.tcc **** 	  }
 175:/usr/include/c++/6/bits/basic_string.tcc **** 
 176:/usr/include/c++/6/bits/basic_string.tcc **** 	__try
 177:/usr/include/c++/6/bits/basic_string.tcc **** 	  {
 178:/usr/include/c++/6/bits/basic_string.tcc **** 	    while (__beg != __end)
 179:/usr/include/c++/6/bits/basic_string.tcc **** 	      {
 180:/usr/include/c++/6/bits/basic_string.tcc **** 		if (__len == __capacity)
 181:/usr/include/c++/6/bits/basic_string.tcc **** 		  {
GAS LISTING /tmp/ccvmoMuv.s 			page 118


 182:/usr/include/c++/6/bits/basic_string.tcc **** 		    // Allocate more space.
 183:/usr/include/c++/6/bits/basic_string.tcc **** 		    __capacity = __len + 1;
 184:/usr/include/c++/6/bits/basic_string.tcc **** 		    pointer __another = _M_create(__capacity, __len);
 185:/usr/include/c++/6/bits/basic_string.tcc **** 		    this->_S_copy(__another, _M_data(), __len);
 186:/usr/include/c++/6/bits/basic_string.tcc **** 		    _M_dispose();
 187:/usr/include/c++/6/bits/basic_string.tcc **** 		    _M_data(__another);
 188:/usr/include/c++/6/bits/basic_string.tcc **** 		    _M_capacity(__capacity);
 189:/usr/include/c++/6/bits/basic_string.tcc **** 		  }
 190:/usr/include/c++/6/bits/basic_string.tcc **** 		_M_data()[__len++] = *__beg;
 191:/usr/include/c++/6/bits/basic_string.tcc **** 		++__beg;
 192:/usr/include/c++/6/bits/basic_string.tcc **** 	      }
 193:/usr/include/c++/6/bits/basic_string.tcc **** 	  }
 194:/usr/include/c++/6/bits/basic_string.tcc **** 	__catch(...)
 195:/usr/include/c++/6/bits/basic_string.tcc **** 	  {
 196:/usr/include/c++/6/bits/basic_string.tcc **** 	    _M_dispose();
 197:/usr/include/c++/6/bits/basic_string.tcc **** 	    __throw_exception_again;
 198:/usr/include/c++/6/bits/basic_string.tcc **** 	  }
 199:/usr/include/c++/6/bits/basic_string.tcc **** 
 200:/usr/include/c++/6/bits/basic_string.tcc **** 	_M_set_length(__len);
 201:/usr/include/c++/6/bits/basic_string.tcc ****       }
 202:/usr/include/c++/6/bits/basic_string.tcc **** 
 203:/usr/include/c++/6/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 204:/usr/include/c++/6/bits/basic_string.tcc ****     template<typename _InIterator>
 205:/usr/include/c++/6/bits/basic_string.tcc ****       void
 206:/usr/include/c++/6/bits/basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>::
 1625              		.loc 17 206 0
 1626              		.cfi_startproc
 1627              	.LVL140:
 1628 0360 4154     		pushq	%r12
 1629              		.cfi_def_cfa_offset 16
 1630              		.cfi_offset 12, -16
 1631 0362 55       		pushq	%rbp
 1632              		.cfi_def_cfa_offset 24
 1633              		.cfi_offset 6, -24
 1634 0363 4989F4   		movq	%rsi, %r12
 1635 0366 53       		pushq	%rbx
 1636              		.cfi_def_cfa_offset 32
 1637              		.cfi_offset 3, -32
 1638 0367 4889FD   		movq	%rdi, %rbp
 1639 036a 4883EC10 		subq	$16, %rsp
 1640              		.cfi_def_cfa_offset 48
 207:/usr/include/c++/6/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 208:/usr/include/c++/6/bits/basic_string.tcc **** 		   std::forward_iterator_tag)
 209:/usr/include/c++/6/bits/basic_string.tcc ****       {
 210:/usr/include/c++/6/bits/basic_string.tcc **** 	// NB: Not required, but considered best practice.
 211:/usr/include/c++/6/bits/basic_string.tcc **** 	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 1641              		.loc 17 211 0
 1642 036e 4885F6   		testq	%rsi, %rsi
 1643 0371 7515     		jne	.L96
 1644 0373 4885D2   		testq	%rdx, %rdx
 1645 0376 7410     		je	.L96
 212:/usr/include/c++/6/bits/basic_string.tcc **** 	  std::__throw_logic_error(__N("basic_string::"
 1646              		.loc 17 212 0
 1647 0378 488D3D00 		leaq	.LC8(%rip), %rdi
 1647      000000
 1648              	.LVL141:
 1649 037f E8000000 		call	_ZSt19__throw_logic_errorPKc@PLT
GAS LISTING /tmp/ccvmoMuv.s 			page 119


 1649      00
 1650              	.LVL142:
 1651              		.p2align 4,,10
 1652 0384 0F1F4000 		.p2align 3
 1653              	.L96:
 1654              	.LBB13015:
 1655              	.LBB13016:
 1656              	.LBB13017:
 1657              		.file 18 "/usr/include/c++/6/bits/stl_iterator_base_funcs.h"
   1:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** // Functions used by iterators -*- C++ -*-
   2:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** 
   3:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** // Copyright (C) 2001-2016 Free Software Foundation, Inc.
   4:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** //
   5:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** // any later version.
  10:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** 
  11:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** // GNU General Public License for more details.
  15:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** 
  16:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** 
  20:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** 
  25:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** /*
  26:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  *
  27:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  * Copyright (c) 1994
  28:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  *
  30:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  *
  38:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  *
  39:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  *
  42:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  * purpose.  It is provided "as is" without express or implied warranty.
GAS LISTING /tmp/ccvmoMuv.s 			page 120


  49:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  */
  50:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** 
  51:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** /** @file bits/stl_iterator_base_funcs.h
  52:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  *
  55:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  *  This file contains all of the general iterator-related utility
  56:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  *  functions, such as distance() and advance().
  57:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****  */
  58:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** 
  59:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** #ifndef _STL_ITERATOR_BASE_FUNCS_H
  60:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** #define _STL_ITERATOR_BASE_FUNCS_H 1
  61:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** 
  62:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** #pragma GCC system_header
  63:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** 
  64:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** #include <bits/concept_check.h>
  65:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** #include <debug/assertions.h>
  66:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** 
  67:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** namespace std _GLIBCXX_VISIBILITY(default)
  68:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** {
  69:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  70:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****   // Forward declaration for the overloads of __distance.
  71:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****   template <typename> struct _List_iterator;
  72:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****   template <typename> struct _List_const_iterator;
  73:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** _GLIBCXX_END_NAMESPACE_CONTAINER
  74:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** 
  75:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  76:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** 
  77:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****   template<typename _InputIterator>
  78:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****     inline typename iterator_traits<_InputIterator>::difference_type
  79:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****     __distance(_InputIterator __first, _InputIterator __last,
  80:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****                input_iterator_tag)
  81:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****     {
  82:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****       // concept requirements
  83:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
  84:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** 
  85:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****       typename iterator_traits<_InputIterator>::difference_type __n = 0;
  86:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****       while (__first != __last)
  87:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** 	{
  88:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** 	  ++__first;
  89:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** 	  ++__n;
  90:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** 	}
  91:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****       return __n;
  92:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****     }
  93:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** 
  94:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****   template<typename _RandomAccessIterator>
  95:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****     inline typename iterator_traits<_RandomAccessIterator>::difference_type
  96:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****     __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
  97:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****                random_access_iterator_tag)
  98:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****     {
  99:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****       // concept requirements
 100:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****       __glibcxx_function_requires(_RandomAccessIteratorConcept<
 101:/usr/include/c++/6/bits/stl_iterator_base_funcs.h **** 				  _RandomAccessIterator>)
 102:/usr/include/c++/6/bits/stl_iterator_base_funcs.h ****       return __last - __first;
 1658              		.loc 18 102 0
 1659 0388 4889D3   		movq	%rdx, %rbx
 1660 038b 4C29E3   		subq	%r12, %rbx
GAS LISTING /tmp/ccvmoMuv.s 			page 121


 1661              	.LBE13017:
 1662              	.LBE13016:
 1663              	.LBE13015:
 213:/usr/include/c++/6/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 214:/usr/include/c++/6/bits/basic_string.tcc **** 
 215:/usr/include/c++/6/bits/basic_string.tcc **** 	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 216:/usr/include/c++/6/bits/basic_string.tcc **** 
 217:/usr/include/c++/6/bits/basic_string.tcc **** 	if (__dnew > size_type(_S_local_capacity))
 1664              		.loc 17 217 0
 1665 038e 4883FB0F 		cmpq	$15, %rbx
 215:/usr/include/c++/6/bits/basic_string.tcc **** 
 1666              		.loc 17 215 0
 1667 0392 48895C24 		movq	%rbx, 8(%rsp)
 1667      08
 1668              		.loc 17 217 0
 1669 0397 772F     		ja	.L112
 1670 0399 488B5500 		movq	0(%rbp), %rdx
 1671              	.LVL143:
 1672              	.LBB13018:
 1673              	.LBB13019:
 1674              	.LBB13020:
 297:/usr/include/c++/6/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 1675              		.loc 10 297 0
 1676 039d 4883FB01 		cmpq	$1, %rbx
 1677 03a1 4889D7   		movq	%rdx, %rdi
 1678              	.LVL144:
 1679 03a4 745A     		je	.L113
 1680              	.LVL145:
 1681              	.LBB13021:
 1682              	.LBB13022:
 268:/usr/include/c++/6/bits/char_traits.h **** 
 269:/usr/include/c++/6/bits/char_traits.h ****       static const char_type*
 270:/usr/include/c++/6/bits/char_traits.h ****       find(const char_type* __s, size_t __n, const char_type& __a)
 271:/usr/include/c++/6/bits/char_traits.h ****       {
 272:/usr/include/c++/6/bits/char_traits.h **** 	if (__n == 0)
 273:/usr/include/c++/6/bits/char_traits.h **** 	  return 0;
 274:/usr/include/c++/6/bits/char_traits.h **** 	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
 275:/usr/include/c++/6/bits/char_traits.h ****       }
 276:/usr/include/c++/6/bits/char_traits.h **** 
 277:/usr/include/c++/6/bits/char_traits.h ****       static char_type*
 278:/usr/include/c++/6/bits/char_traits.h ****       move(char_type* __s1, const char_type* __s2, size_t __n)
 279:/usr/include/c++/6/bits/char_traits.h ****       {
 280:/usr/include/c++/6/bits/char_traits.h **** 	if (__n == 0)
 281:/usr/include/c++/6/bits/char_traits.h **** 	  return __s1;
 282:/usr/include/c++/6/bits/char_traits.h **** 	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
 283:/usr/include/c++/6/bits/char_traits.h ****       }
 284:/usr/include/c++/6/bits/char_traits.h **** 
 285:/usr/include/c++/6/bits/char_traits.h ****       static char_type*
 286:/usr/include/c++/6/bits/char_traits.h ****       copy(char_type* __s1, const char_type* __s2, size_t __n)
 287:/usr/include/c++/6/bits/char_traits.h ****       {
 288:/usr/include/c++/6/bits/char_traits.h **** 	if (__n == 0)
 1683              		.loc 9 288 0
 1684 03a6 4885DB   		testq	%rbx, %rbx
 1685 03a9 753C     		jne	.L97
 1686              	.LVL146:
 1687              	.L99:
 1688              	.LBE13022:
GAS LISTING /tmp/ccvmoMuv.s 			page 122


 1689              	.LBE13021:
 1690              	.LBE13020:
 1691              	.LBE13019:
 1692              	.LBE13018:
 218:/usr/include/c++/6/bits/basic_string.tcc **** 	  {
 219:/usr/include/c++/6/bits/basic_string.tcc **** 	    _M_data(_M_create(__dnew, size_type(0)));
 220:/usr/include/c++/6/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 221:/usr/include/c++/6/bits/basic_string.tcc **** 	  }
 222:/usr/include/c++/6/bits/basic_string.tcc **** 
 223:/usr/include/c++/6/bits/basic_string.tcc **** 	// Check for out_of_range and length_error exceptions.
 224:/usr/include/c++/6/bits/basic_string.tcc **** 	__try
 225:/usr/include/c++/6/bits/basic_string.tcc **** 	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 226:/usr/include/c++/6/bits/basic_string.tcc **** 	__catch(...)
 227:/usr/include/c++/6/bits/basic_string.tcc **** 	  {
 228:/usr/include/c++/6/bits/basic_string.tcc **** 	    _M_dispose();
 229:/usr/include/c++/6/bits/basic_string.tcc **** 	    __throw_exception_again;
 230:/usr/include/c++/6/bits/basic_string.tcc **** 	  }
 231:/usr/include/c++/6/bits/basic_string.tcc **** 
 232:/usr/include/c++/6/bits/basic_string.tcc **** 	_M_set_length(__dnew);
 1693              		.loc 17 232 0
 1694 03ab 488B4424 		movq	8(%rsp), %rax
 1694      08
 1695              	.LVL147:
 1696              	.LBB13029:
 1697              	.LBB13030:
 1698              	.LBB13031:
 1699              	.LBB13032:
 132:/usr/include/c++/6/bits/basic_string.h **** 
 1700              		.loc 10 132 0
 1701 03b0 48894508 		movq	%rax, 8(%rbp)
 1702              	.LVL148:
 1703              	.LBE13032:
 1704              	.LBE13031:
 1705              	.LBB13033:
 1706              	.LBB13034:
 243:/usr/include/c++/6/bits/char_traits.h **** 
 1707              		.loc 9 243 0
 1708 03b4 C6040200 		movb	$0, (%rdx,%rax)
 1709              	.LVL149:
 1710              	.LBE13034:
 1711              	.LBE13033:
 1712              	.LBE13030:
 1713              	.LBE13029:
 233:/usr/include/c++/6/bits/basic_string.tcc ****       }
 1714              		.loc 17 233 0
 1715 03b8 4883C410 		addq	$16, %rsp
 1716              		.cfi_remember_state
 1717              		.cfi_def_cfa_offset 32
 1718 03bc 5B       		popq	%rbx
 1719              		.cfi_def_cfa_offset 24
 1720 03bd 5D       		popq	%rbp
 1721              		.cfi_def_cfa_offset 16
 1722              	.LVL150:
 1723 03be 415C     		popq	%r12
 1724              		.cfi_def_cfa_offset 8
 1725              	.LVL151:
 1726 03c0 C3       		ret
GAS LISTING /tmp/ccvmoMuv.s 			page 123


 1727              	.LVL152:
 1728              		.p2align 4,,10
 1729 03c1 0F1F8000 		.p2align 3
 1729      000000
 1730              	.L112:
 1731              		.cfi_restore_state
 219:/usr/include/c++/6/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 1732              		.loc 17 219 0
 1733 03c8 488D7424 		leaq	8(%rsp), %rsi
 1733      08
 1734              	.LVL153:
 1735 03cd 4889EF   		movq	%rbp, %rdi
 1736              	.LVL154:
 1737 03d0 31D2     		xorl	%edx, %edx
 1738              	.LVL155:
 1739 03d2 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT
 1739      00
 1740              	.LVL156:
 1741 03d7 4889C7   		movq	%rax, %rdi
 1742              	.LVL157:
 1743              	.LBB13035:
 1744              	.LBB13036:
 128:/usr/include/c++/6/bits/basic_string.h **** 
 1745              		.loc 10 128 0
 1746 03da 48894500 		movq	%rax, 0(%rbp)
 1747              	.LVL158:
 1748              	.LBE13036:
 1749              	.LBE13035:
 1750              	.LBB13037:
 1751              	.LBB13038:
 160:/usr/include/c++/6/bits/basic_string.h **** 
 1752              		.loc 10 160 0
 1753 03de 488B4424 		movq	8(%rsp), %rax
 1753      08
 1754 03e3 48894510 		movq	%rax, 16(%rbp)
 1755              	.LVL159:
 1756              	.L97:
 1757              	.LBE13038:
 1758              	.LBE13037:
 1759              	.LBB13039:
 1760              	.LBB13028:
 1761              	.LBB13027:
 1762              	.LBB13024:
 1763              	.LBB13023:
 289:/usr/include/c++/6/bits/char_traits.h **** 	  return __s1;
 290:/usr/include/c++/6/bits/char_traits.h **** 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 1764              		.loc 9 290 0
 1765 03e7 4889DA   		movq	%rbx, %rdx
 1766 03ea 4C89E6   		movq	%r12, %rsi
 1767 03ed E8000000 		call	memcpy@PLT
 1767      00
 1768              	.LVL160:
 1769 03f2 488B5500 		movq	0(%rbp), %rdx
 1770 03f6 EBB3     		jmp	.L99
 1771              	.LVL161:
 1772 03f8 0F1F8400 		.p2align 4,,10
 1772      00000000 
GAS LISTING /tmp/ccvmoMuv.s 			page 124


 1773              		.p2align 3
 1774              	.L113:
 1775 0400 410FB604 		movzbl	(%r12), %eax
 1775      24
 1776              	.LVL162:
 1777              	.LBE13023:
 1778              	.LBE13024:
 1779              	.LBB13025:
 1780              	.LBB13026:
 243:/usr/include/c++/6/bits/char_traits.h **** 
 1781              		.loc 9 243 0
 1782 0405 8802     		movb	%al, (%rdx)
 1783 0407 488B5500 		movq	0(%rbp), %rdx
 1784              	.LVL163:
 1785 040b EB9E     		jmp	.L99
 1786              	.LBE13026:
 1787              	.LBE13025:
 1788              	.LBE13027:
 1789              	.LBE13028:
 1790              	.LBE13039:
 1791              		.cfi_endproc
 1792              	.LFE15893:
 1794              		.set	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_it
 1795 040d 90       		.align 2
 1796 040e 6690     		.p2align 4,,15
 1798              	_ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFvS4_EEEESt10_Sele
 1799              	.LFB15910:
 1800              		.file 19 "/usr/include/c++/6/bits/stl_tree.h"
   1:/usr/include/c++/6/bits/stl_tree.h **** // RB tree implementation -*- C++ -*-
   2:/usr/include/c++/6/bits/stl_tree.h **** 
   3:/usr/include/c++/6/bits/stl_tree.h **** // Copyright (C) 2001-2016 Free Software Foundation, Inc.
   4:/usr/include/c++/6/bits/stl_tree.h **** //
   5:/usr/include/c++/6/bits/stl_tree.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/6/bits/stl_tree.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/6/bits/stl_tree.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/6/bits/stl_tree.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/6/bits/stl_tree.h **** // any later version.
  10:/usr/include/c++/6/bits/stl_tree.h **** 
  11:/usr/include/c++/6/bits/stl_tree.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/6/bits/stl_tree.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/6/bits/stl_tree.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/6/bits/stl_tree.h **** // GNU General Public License for more details.
  15:/usr/include/c++/6/bits/stl_tree.h **** 
  16:/usr/include/c++/6/bits/stl_tree.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/6/bits/stl_tree.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/6/bits/stl_tree.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/6/bits/stl_tree.h **** 
  20:/usr/include/c++/6/bits/stl_tree.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/6/bits/stl_tree.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/6/bits/stl_tree.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/6/bits/stl_tree.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/6/bits/stl_tree.h **** 
  25:/usr/include/c++/6/bits/stl_tree.h **** /*
  26:/usr/include/c++/6/bits/stl_tree.h ****  *
  27:/usr/include/c++/6/bits/stl_tree.h ****  * Copyright (c) 1996,1997
  28:/usr/include/c++/6/bits/stl_tree.h ****  * Silicon Graphics Computer Systems, Inc.
  29:/usr/include/c++/6/bits/stl_tree.h ****  *
GAS LISTING /tmp/ccvmoMuv.s 			page 125


  30:/usr/include/c++/6/bits/stl_tree.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/6/bits/stl_tree.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/6/bits/stl_tree.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/6/bits/stl_tree.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/6/bits/stl_tree.h ****  * in supporting documentation.  Silicon Graphics makes no
  35:/usr/include/c++/6/bits/stl_tree.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/6/bits/stl_tree.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/6/bits/stl_tree.h ****  *
  38:/usr/include/c++/6/bits/stl_tree.h ****  *
  39:/usr/include/c++/6/bits/stl_tree.h ****  * Copyright (c) 1994
  40:/usr/include/c++/6/bits/stl_tree.h ****  * Hewlett-Packard Company
  41:/usr/include/c++/6/bits/stl_tree.h ****  *
  42:/usr/include/c++/6/bits/stl_tree.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/6/bits/stl_tree.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/6/bits/stl_tree.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/6/bits/stl_tree.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/6/bits/stl_tree.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  47:/usr/include/c++/6/bits/stl_tree.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/6/bits/stl_tree.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/6/bits/stl_tree.h ****  *
  50:/usr/include/c++/6/bits/stl_tree.h ****  *
  51:/usr/include/c++/6/bits/stl_tree.h ****  */
  52:/usr/include/c++/6/bits/stl_tree.h **** 
  53:/usr/include/c++/6/bits/stl_tree.h **** /** @file bits/stl_tree.h
  54:/usr/include/c++/6/bits/stl_tree.h ****  *  This is an internal header file, included by other library headers.
  55:/usr/include/c++/6/bits/stl_tree.h ****  *  Do not attempt to use it directly. @headername{map,set}
  56:/usr/include/c++/6/bits/stl_tree.h ****  */
  57:/usr/include/c++/6/bits/stl_tree.h **** 
  58:/usr/include/c++/6/bits/stl_tree.h **** #ifndef _STL_TREE_H
  59:/usr/include/c++/6/bits/stl_tree.h **** #define _STL_TREE_H 1
  60:/usr/include/c++/6/bits/stl_tree.h **** 
  61:/usr/include/c++/6/bits/stl_tree.h **** #pragma GCC system_header
  62:/usr/include/c++/6/bits/stl_tree.h **** 
  63:/usr/include/c++/6/bits/stl_tree.h **** #include <bits/stl_algobase.h>
  64:/usr/include/c++/6/bits/stl_tree.h **** #include <bits/allocator.h>
  65:/usr/include/c++/6/bits/stl_tree.h **** #include <bits/stl_function.h>
  66:/usr/include/c++/6/bits/stl_tree.h **** #include <bits/cpp_type_traits.h>
  67:/usr/include/c++/6/bits/stl_tree.h **** #include <ext/alloc_traits.h>
  68:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
  69:/usr/include/c++/6/bits/stl_tree.h **** #include <ext/aligned_buffer.h>
  70:/usr/include/c++/6/bits/stl_tree.h **** #endif
  71:/usr/include/c++/6/bits/stl_tree.h **** 
  72:/usr/include/c++/6/bits/stl_tree.h **** namespace std _GLIBCXX_VISIBILITY(default)
  73:/usr/include/c++/6/bits/stl_tree.h **** {
  74:/usr/include/c++/6/bits/stl_tree.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  75:/usr/include/c++/6/bits/stl_tree.h **** 
  76:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus > 201103L
  77:/usr/include/c++/6/bits/stl_tree.h **** # define __cpp_lib_generic_associative_lookup 201304
  78:/usr/include/c++/6/bits/stl_tree.h **** #endif
  79:/usr/include/c++/6/bits/stl_tree.h **** 
  80:/usr/include/c++/6/bits/stl_tree.h ****   // Red-black tree class, designed for use in implementing STL
  81:/usr/include/c++/6/bits/stl_tree.h ****   // associative containers (set, multiset, map, and multimap). The
  82:/usr/include/c++/6/bits/stl_tree.h ****   // insertion and deletion algorithms are based on those in Cormen,
  83:/usr/include/c++/6/bits/stl_tree.h ****   // Leiserson, and Rivest, Introduction to Algorithms (MIT Press,
  84:/usr/include/c++/6/bits/stl_tree.h ****   // 1990), except that
  85:/usr/include/c++/6/bits/stl_tree.h ****   //
  86:/usr/include/c++/6/bits/stl_tree.h ****   // (1) the header cell is maintained with links not only to the root
GAS LISTING /tmp/ccvmoMuv.s 			page 126


  87:/usr/include/c++/6/bits/stl_tree.h ****   // but also to the leftmost node of the tree, to enable constant
  88:/usr/include/c++/6/bits/stl_tree.h ****   // time begin(), and to the rightmost node of the tree, to enable
  89:/usr/include/c++/6/bits/stl_tree.h ****   // linear time performance when used with the generic set algorithms
  90:/usr/include/c++/6/bits/stl_tree.h ****   // (set_union, etc.)
  91:/usr/include/c++/6/bits/stl_tree.h ****   // 
  92:/usr/include/c++/6/bits/stl_tree.h ****   // (2) when a node being deleted has two children its successor node
  93:/usr/include/c++/6/bits/stl_tree.h ****   // is relinked into its place, rather than copied, so that the only
  94:/usr/include/c++/6/bits/stl_tree.h ****   // iterators invalidated are those referring to the deleted node.
  95:/usr/include/c++/6/bits/stl_tree.h **** 
  96:/usr/include/c++/6/bits/stl_tree.h ****   enum _Rb_tree_color { _S_red = false, _S_black = true };
  97:/usr/include/c++/6/bits/stl_tree.h **** 
  98:/usr/include/c++/6/bits/stl_tree.h ****   struct _Rb_tree_node_base
  99:/usr/include/c++/6/bits/stl_tree.h ****   {
 100:/usr/include/c++/6/bits/stl_tree.h ****     typedef _Rb_tree_node_base* _Base_ptr;
 101:/usr/include/c++/6/bits/stl_tree.h ****     typedef const _Rb_tree_node_base* _Const_Base_ptr;
 102:/usr/include/c++/6/bits/stl_tree.h **** 
 103:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree_color	_M_color;
 104:/usr/include/c++/6/bits/stl_tree.h ****     _Base_ptr		_M_parent;
 105:/usr/include/c++/6/bits/stl_tree.h ****     _Base_ptr		_M_left;
 106:/usr/include/c++/6/bits/stl_tree.h ****     _Base_ptr		_M_right;
 107:/usr/include/c++/6/bits/stl_tree.h **** 
 108:/usr/include/c++/6/bits/stl_tree.h ****     static _Base_ptr
 109:/usr/include/c++/6/bits/stl_tree.h ****     _S_minimum(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 110:/usr/include/c++/6/bits/stl_tree.h ****     {
 111:/usr/include/c++/6/bits/stl_tree.h ****       while (__x->_M_left != 0) __x = __x->_M_left;
 112:/usr/include/c++/6/bits/stl_tree.h ****       return __x;
 113:/usr/include/c++/6/bits/stl_tree.h ****     }
 114:/usr/include/c++/6/bits/stl_tree.h **** 
 115:/usr/include/c++/6/bits/stl_tree.h ****     static _Const_Base_ptr
 116:/usr/include/c++/6/bits/stl_tree.h ****     _S_minimum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 117:/usr/include/c++/6/bits/stl_tree.h ****     {
 118:/usr/include/c++/6/bits/stl_tree.h ****       while (__x->_M_left != 0) __x = __x->_M_left;
 119:/usr/include/c++/6/bits/stl_tree.h ****       return __x;
 120:/usr/include/c++/6/bits/stl_tree.h ****     }
 121:/usr/include/c++/6/bits/stl_tree.h **** 
 122:/usr/include/c++/6/bits/stl_tree.h ****     static _Base_ptr
 123:/usr/include/c++/6/bits/stl_tree.h ****     _S_maximum(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 124:/usr/include/c++/6/bits/stl_tree.h ****     {
 125:/usr/include/c++/6/bits/stl_tree.h ****       while (__x->_M_right != 0) __x = __x->_M_right;
 126:/usr/include/c++/6/bits/stl_tree.h ****       return __x;
 127:/usr/include/c++/6/bits/stl_tree.h ****     }
 128:/usr/include/c++/6/bits/stl_tree.h **** 
 129:/usr/include/c++/6/bits/stl_tree.h ****     static _Const_Base_ptr
 130:/usr/include/c++/6/bits/stl_tree.h ****     _S_maximum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 131:/usr/include/c++/6/bits/stl_tree.h ****     {
 132:/usr/include/c++/6/bits/stl_tree.h ****       while (__x->_M_right != 0) __x = __x->_M_right;
 133:/usr/include/c++/6/bits/stl_tree.h ****       return __x;
 134:/usr/include/c++/6/bits/stl_tree.h ****     }
 135:/usr/include/c++/6/bits/stl_tree.h ****   };
 136:/usr/include/c++/6/bits/stl_tree.h **** 
 137:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Val>
 138:/usr/include/c++/6/bits/stl_tree.h ****     struct _Rb_tree_node : public _Rb_tree_node_base
 139:/usr/include/c++/6/bits/stl_tree.h ****     {
 140:/usr/include/c++/6/bits/stl_tree.h ****       typedef _Rb_tree_node<_Val>* _Link_type;
 141:/usr/include/c++/6/bits/stl_tree.h **** 
 142:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus < 201103L
 143:/usr/include/c++/6/bits/stl_tree.h ****       _Val _M_value_field;
GAS LISTING /tmp/ccvmoMuv.s 			page 127


 144:/usr/include/c++/6/bits/stl_tree.h **** 
 145:/usr/include/c++/6/bits/stl_tree.h ****       _Val*
 146:/usr/include/c++/6/bits/stl_tree.h ****       _M_valptr()
 147:/usr/include/c++/6/bits/stl_tree.h ****       { return std::__addressof(_M_value_field); }
 148:/usr/include/c++/6/bits/stl_tree.h **** 
 149:/usr/include/c++/6/bits/stl_tree.h ****       const _Val*
 150:/usr/include/c++/6/bits/stl_tree.h ****       _M_valptr() const
 151:/usr/include/c++/6/bits/stl_tree.h ****       { return std::__addressof(_M_value_field); }
 152:/usr/include/c++/6/bits/stl_tree.h **** #else
 153:/usr/include/c++/6/bits/stl_tree.h ****       __gnu_cxx::__aligned_membuf<_Val> _M_storage;
 154:/usr/include/c++/6/bits/stl_tree.h **** 
 155:/usr/include/c++/6/bits/stl_tree.h ****       _Val*
 156:/usr/include/c++/6/bits/stl_tree.h ****       _M_valptr()
 157:/usr/include/c++/6/bits/stl_tree.h ****       { return _M_storage._M_ptr(); }
 158:/usr/include/c++/6/bits/stl_tree.h **** 
 159:/usr/include/c++/6/bits/stl_tree.h ****       const _Val*
 160:/usr/include/c++/6/bits/stl_tree.h ****       _M_valptr() const
 161:/usr/include/c++/6/bits/stl_tree.h ****       { return _M_storage._M_ptr(); }
 162:/usr/include/c++/6/bits/stl_tree.h **** #endif
 163:/usr/include/c++/6/bits/stl_tree.h ****     };
 164:/usr/include/c++/6/bits/stl_tree.h **** 
 165:/usr/include/c++/6/bits/stl_tree.h ****   _GLIBCXX_PURE _Rb_tree_node_base*
 166:/usr/include/c++/6/bits/stl_tree.h ****   _Rb_tree_increment(_Rb_tree_node_base* __x) throw ();
 167:/usr/include/c++/6/bits/stl_tree.h **** 
 168:/usr/include/c++/6/bits/stl_tree.h ****   _GLIBCXX_PURE const _Rb_tree_node_base*
 169:/usr/include/c++/6/bits/stl_tree.h ****   _Rb_tree_increment(const _Rb_tree_node_base* __x) throw ();
 170:/usr/include/c++/6/bits/stl_tree.h **** 
 171:/usr/include/c++/6/bits/stl_tree.h ****   _GLIBCXX_PURE _Rb_tree_node_base*
 172:/usr/include/c++/6/bits/stl_tree.h ****   _Rb_tree_decrement(_Rb_tree_node_base* __x) throw ();
 173:/usr/include/c++/6/bits/stl_tree.h **** 
 174:/usr/include/c++/6/bits/stl_tree.h ****   _GLIBCXX_PURE const _Rb_tree_node_base*
 175:/usr/include/c++/6/bits/stl_tree.h ****   _Rb_tree_decrement(const _Rb_tree_node_base* __x) throw ();
 176:/usr/include/c++/6/bits/stl_tree.h **** 
 177:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Tp>
 178:/usr/include/c++/6/bits/stl_tree.h ****     struct _Rb_tree_iterator
 179:/usr/include/c++/6/bits/stl_tree.h ****     {
 180:/usr/include/c++/6/bits/stl_tree.h ****       typedef _Tp  value_type;
 181:/usr/include/c++/6/bits/stl_tree.h ****       typedef _Tp& reference;
 182:/usr/include/c++/6/bits/stl_tree.h ****       typedef _Tp* pointer;
 183:/usr/include/c++/6/bits/stl_tree.h **** 
 184:/usr/include/c++/6/bits/stl_tree.h ****       typedef bidirectional_iterator_tag iterator_category;
 185:/usr/include/c++/6/bits/stl_tree.h ****       typedef ptrdiff_t                  difference_type;
 186:/usr/include/c++/6/bits/stl_tree.h **** 
 187:/usr/include/c++/6/bits/stl_tree.h ****       typedef _Rb_tree_iterator<_Tp>        _Self;
 188:/usr/include/c++/6/bits/stl_tree.h ****       typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;
 189:/usr/include/c++/6/bits/stl_tree.h ****       typedef _Rb_tree_node<_Tp>*           _Link_type;
 190:/usr/include/c++/6/bits/stl_tree.h **** 
 191:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree_iterator() _GLIBCXX_NOEXCEPT
 192:/usr/include/c++/6/bits/stl_tree.h ****       : _M_node() { }
 193:/usr/include/c++/6/bits/stl_tree.h **** 
 194:/usr/include/c++/6/bits/stl_tree.h ****       explicit
 195:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 196:/usr/include/c++/6/bits/stl_tree.h ****       : _M_node(__x) { }
 197:/usr/include/c++/6/bits/stl_tree.h **** 
 198:/usr/include/c++/6/bits/stl_tree.h ****       reference
 199:/usr/include/c++/6/bits/stl_tree.h ****       operator*() const _GLIBCXX_NOEXCEPT
 200:/usr/include/c++/6/bits/stl_tree.h ****       { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
GAS LISTING /tmp/ccvmoMuv.s 			page 128


 201:/usr/include/c++/6/bits/stl_tree.h **** 
 202:/usr/include/c++/6/bits/stl_tree.h ****       pointer
 203:/usr/include/c++/6/bits/stl_tree.h ****       operator->() const _GLIBCXX_NOEXCEPT
 204:/usr/include/c++/6/bits/stl_tree.h ****       { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
 205:/usr/include/c++/6/bits/stl_tree.h **** 
 206:/usr/include/c++/6/bits/stl_tree.h ****       _Self&
 207:/usr/include/c++/6/bits/stl_tree.h ****       operator++() _GLIBCXX_NOEXCEPT
 208:/usr/include/c++/6/bits/stl_tree.h ****       {
 209:/usr/include/c++/6/bits/stl_tree.h **** 	_M_node = _Rb_tree_increment(_M_node);
 210:/usr/include/c++/6/bits/stl_tree.h **** 	return *this;
 211:/usr/include/c++/6/bits/stl_tree.h ****       }
 212:/usr/include/c++/6/bits/stl_tree.h **** 
 213:/usr/include/c++/6/bits/stl_tree.h ****       _Self
 214:/usr/include/c++/6/bits/stl_tree.h ****       operator++(int) _GLIBCXX_NOEXCEPT
 215:/usr/include/c++/6/bits/stl_tree.h ****       {
 216:/usr/include/c++/6/bits/stl_tree.h **** 	_Self __tmp = *this;
 217:/usr/include/c++/6/bits/stl_tree.h **** 	_M_node = _Rb_tree_increment(_M_node);
 218:/usr/include/c++/6/bits/stl_tree.h **** 	return __tmp;
 219:/usr/include/c++/6/bits/stl_tree.h ****       }
 220:/usr/include/c++/6/bits/stl_tree.h **** 
 221:/usr/include/c++/6/bits/stl_tree.h ****       _Self&
 222:/usr/include/c++/6/bits/stl_tree.h ****       operator--() _GLIBCXX_NOEXCEPT
 223:/usr/include/c++/6/bits/stl_tree.h ****       {
 224:/usr/include/c++/6/bits/stl_tree.h **** 	_M_node = _Rb_tree_decrement(_M_node);
 225:/usr/include/c++/6/bits/stl_tree.h **** 	return *this;
 226:/usr/include/c++/6/bits/stl_tree.h ****       }
 227:/usr/include/c++/6/bits/stl_tree.h **** 
 228:/usr/include/c++/6/bits/stl_tree.h ****       _Self
 229:/usr/include/c++/6/bits/stl_tree.h ****       operator--(int) _GLIBCXX_NOEXCEPT
 230:/usr/include/c++/6/bits/stl_tree.h ****       {
 231:/usr/include/c++/6/bits/stl_tree.h **** 	_Self __tmp = *this;
 232:/usr/include/c++/6/bits/stl_tree.h **** 	_M_node = _Rb_tree_decrement(_M_node);
 233:/usr/include/c++/6/bits/stl_tree.h **** 	return __tmp;
 234:/usr/include/c++/6/bits/stl_tree.h ****       }
 235:/usr/include/c++/6/bits/stl_tree.h **** 
 236:/usr/include/c++/6/bits/stl_tree.h ****       bool
 237:/usr/include/c++/6/bits/stl_tree.h ****       operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT
 238:/usr/include/c++/6/bits/stl_tree.h ****       { return _M_node == __x._M_node; }
 239:/usr/include/c++/6/bits/stl_tree.h **** 
 240:/usr/include/c++/6/bits/stl_tree.h ****       bool
 241:/usr/include/c++/6/bits/stl_tree.h ****       operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT
 242:/usr/include/c++/6/bits/stl_tree.h ****       { return _M_node != __x._M_node; }
 243:/usr/include/c++/6/bits/stl_tree.h **** 
 244:/usr/include/c++/6/bits/stl_tree.h ****       _Base_ptr _M_node;
 245:/usr/include/c++/6/bits/stl_tree.h ****   };
 246:/usr/include/c++/6/bits/stl_tree.h **** 
 247:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Tp>
 248:/usr/include/c++/6/bits/stl_tree.h ****     struct _Rb_tree_const_iterator
 249:/usr/include/c++/6/bits/stl_tree.h ****     {
 250:/usr/include/c++/6/bits/stl_tree.h ****       typedef _Tp        value_type;
 251:/usr/include/c++/6/bits/stl_tree.h ****       typedef const _Tp& reference;
 252:/usr/include/c++/6/bits/stl_tree.h ****       typedef const _Tp* pointer;
 253:/usr/include/c++/6/bits/stl_tree.h **** 
 254:/usr/include/c++/6/bits/stl_tree.h ****       typedef _Rb_tree_iterator<_Tp> iterator;
 255:/usr/include/c++/6/bits/stl_tree.h **** 
 256:/usr/include/c++/6/bits/stl_tree.h ****       typedef bidirectional_iterator_tag iterator_category;
 257:/usr/include/c++/6/bits/stl_tree.h ****       typedef ptrdiff_t                  difference_type;
GAS LISTING /tmp/ccvmoMuv.s 			page 129


 258:/usr/include/c++/6/bits/stl_tree.h **** 
 259:/usr/include/c++/6/bits/stl_tree.h ****       typedef _Rb_tree_const_iterator<_Tp>        _Self;
 260:/usr/include/c++/6/bits/stl_tree.h ****       typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr;
 261:/usr/include/c++/6/bits/stl_tree.h ****       typedef const _Rb_tree_node<_Tp>*           _Link_type;
 262:/usr/include/c++/6/bits/stl_tree.h **** 
 263:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree_const_iterator() _GLIBCXX_NOEXCEPT
 264:/usr/include/c++/6/bits/stl_tree.h ****       : _M_node() { }
 265:/usr/include/c++/6/bits/stl_tree.h **** 
 266:/usr/include/c++/6/bits/stl_tree.h ****       explicit
 267:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 268:/usr/include/c++/6/bits/stl_tree.h ****       : _M_node(__x) { }
 269:/usr/include/c++/6/bits/stl_tree.h **** 
 270:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 271:/usr/include/c++/6/bits/stl_tree.h ****       : _M_node(__it._M_node) { }
 272:/usr/include/c++/6/bits/stl_tree.h **** 
 273:/usr/include/c++/6/bits/stl_tree.h ****       iterator
 274:/usr/include/c++/6/bits/stl_tree.h ****       _M_const_cast() const _GLIBCXX_NOEXCEPT
 275:/usr/include/c++/6/bits/stl_tree.h ****       { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 276:/usr/include/c++/6/bits/stl_tree.h **** 
 277:/usr/include/c++/6/bits/stl_tree.h ****       reference
 278:/usr/include/c++/6/bits/stl_tree.h ****       operator*() const _GLIBCXX_NOEXCEPT
 279:/usr/include/c++/6/bits/stl_tree.h ****       { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 280:/usr/include/c++/6/bits/stl_tree.h **** 
 281:/usr/include/c++/6/bits/stl_tree.h ****       pointer
 282:/usr/include/c++/6/bits/stl_tree.h ****       operator->() const _GLIBCXX_NOEXCEPT
 283:/usr/include/c++/6/bits/stl_tree.h ****       { return static_cast<_Link_type>(_M_node)->_M_valptr(); }
 284:/usr/include/c++/6/bits/stl_tree.h **** 
 285:/usr/include/c++/6/bits/stl_tree.h ****       _Self&
 286:/usr/include/c++/6/bits/stl_tree.h ****       operator++() _GLIBCXX_NOEXCEPT
 287:/usr/include/c++/6/bits/stl_tree.h ****       {
 288:/usr/include/c++/6/bits/stl_tree.h **** 	_M_node = _Rb_tree_increment(_M_node);
 289:/usr/include/c++/6/bits/stl_tree.h **** 	return *this;
 290:/usr/include/c++/6/bits/stl_tree.h ****       }
 291:/usr/include/c++/6/bits/stl_tree.h **** 
 292:/usr/include/c++/6/bits/stl_tree.h ****       _Self
 293:/usr/include/c++/6/bits/stl_tree.h ****       operator++(int) _GLIBCXX_NOEXCEPT
 294:/usr/include/c++/6/bits/stl_tree.h ****       {
 295:/usr/include/c++/6/bits/stl_tree.h **** 	_Self __tmp = *this;
 296:/usr/include/c++/6/bits/stl_tree.h **** 	_M_node = _Rb_tree_increment(_M_node);
 297:/usr/include/c++/6/bits/stl_tree.h **** 	return __tmp;
 298:/usr/include/c++/6/bits/stl_tree.h ****       }
 299:/usr/include/c++/6/bits/stl_tree.h **** 
 300:/usr/include/c++/6/bits/stl_tree.h ****       _Self&
 301:/usr/include/c++/6/bits/stl_tree.h ****       operator--() _GLIBCXX_NOEXCEPT
 302:/usr/include/c++/6/bits/stl_tree.h ****       {
 303:/usr/include/c++/6/bits/stl_tree.h **** 	_M_node = _Rb_tree_decrement(_M_node);
 304:/usr/include/c++/6/bits/stl_tree.h **** 	return *this;
 305:/usr/include/c++/6/bits/stl_tree.h ****       }
 306:/usr/include/c++/6/bits/stl_tree.h **** 
 307:/usr/include/c++/6/bits/stl_tree.h ****       _Self
 308:/usr/include/c++/6/bits/stl_tree.h ****       operator--(int) _GLIBCXX_NOEXCEPT
 309:/usr/include/c++/6/bits/stl_tree.h ****       {
 310:/usr/include/c++/6/bits/stl_tree.h **** 	_Self __tmp = *this;
 311:/usr/include/c++/6/bits/stl_tree.h **** 	_M_node = _Rb_tree_decrement(_M_node);
 312:/usr/include/c++/6/bits/stl_tree.h **** 	return __tmp;
 313:/usr/include/c++/6/bits/stl_tree.h ****       }
 314:/usr/include/c++/6/bits/stl_tree.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 130


 315:/usr/include/c++/6/bits/stl_tree.h ****       bool
 316:/usr/include/c++/6/bits/stl_tree.h ****       operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT
 317:/usr/include/c++/6/bits/stl_tree.h ****       { return _M_node == __x._M_node; }
 318:/usr/include/c++/6/bits/stl_tree.h **** 
 319:/usr/include/c++/6/bits/stl_tree.h ****       bool
 320:/usr/include/c++/6/bits/stl_tree.h ****       operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT
 321:/usr/include/c++/6/bits/stl_tree.h ****       { return _M_node != __x._M_node; }
 322:/usr/include/c++/6/bits/stl_tree.h **** 
 323:/usr/include/c++/6/bits/stl_tree.h ****       _Base_ptr _M_node;
 324:/usr/include/c++/6/bits/stl_tree.h ****     };
 325:/usr/include/c++/6/bits/stl_tree.h **** 
 326:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Val>
 327:/usr/include/c++/6/bits/stl_tree.h ****     inline bool
 328:/usr/include/c++/6/bits/stl_tree.h ****     operator==(const _Rb_tree_iterator<_Val>& __x,
 329:/usr/include/c++/6/bits/stl_tree.h ****                const _Rb_tree_const_iterator<_Val>& __y) _GLIBCXX_NOEXCEPT
 330:/usr/include/c++/6/bits/stl_tree.h ****     { return __x._M_node == __y._M_node; }
 331:/usr/include/c++/6/bits/stl_tree.h **** 
 332:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Val>
 333:/usr/include/c++/6/bits/stl_tree.h ****     inline bool
 334:/usr/include/c++/6/bits/stl_tree.h ****     operator!=(const _Rb_tree_iterator<_Val>& __x,
 335:/usr/include/c++/6/bits/stl_tree.h ****                const _Rb_tree_const_iterator<_Val>& __y) _GLIBCXX_NOEXCEPT
 336:/usr/include/c++/6/bits/stl_tree.h ****     { return __x._M_node != __y._M_node; }
 337:/usr/include/c++/6/bits/stl_tree.h **** 
 338:/usr/include/c++/6/bits/stl_tree.h ****   void
 339:/usr/include/c++/6/bits/stl_tree.h ****   _Rb_tree_insert_and_rebalance(const bool __insert_left,
 340:/usr/include/c++/6/bits/stl_tree.h ****                                 _Rb_tree_node_base* __x,
 341:/usr/include/c++/6/bits/stl_tree.h ****                                 _Rb_tree_node_base* __p,
 342:/usr/include/c++/6/bits/stl_tree.h ****                                 _Rb_tree_node_base& __header) throw ();
 343:/usr/include/c++/6/bits/stl_tree.h **** 
 344:/usr/include/c++/6/bits/stl_tree.h ****   _Rb_tree_node_base*
 345:/usr/include/c++/6/bits/stl_tree.h ****   _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,
 346:/usr/include/c++/6/bits/stl_tree.h **** 			       _Rb_tree_node_base& __header) throw ();
 347:/usr/include/c++/6/bits/stl_tree.h **** 
 348:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus > 201103L
 349:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Cmp, typename _SfinaeType, typename = __void_t<>>
 350:/usr/include/c++/6/bits/stl_tree.h ****     struct __has_is_transparent
 351:/usr/include/c++/6/bits/stl_tree.h ****     { };
 352:/usr/include/c++/6/bits/stl_tree.h **** 
 353:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Cmp, typename _SfinaeType>
 354:/usr/include/c++/6/bits/stl_tree.h ****     struct __has_is_transparent<_Cmp, _SfinaeType,
 355:/usr/include/c++/6/bits/stl_tree.h **** 				__void_t<typename _Cmp::is_transparent>>
 356:/usr/include/c++/6/bits/stl_tree.h ****     { typedef void type; };
 357:/usr/include/c++/6/bits/stl_tree.h **** #endif
 358:/usr/include/c++/6/bits/stl_tree.h **** 
 359:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
 360:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc = allocator<_Val> >
 361:/usr/include/c++/6/bits/stl_tree.h ****     class _Rb_tree
 362:/usr/include/c++/6/bits/stl_tree.h ****     {
 363:/usr/include/c++/6/bits/stl_tree.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 364:/usr/include/c++/6/bits/stl_tree.h ****         rebind<_Rb_tree_node<_Val> >::other _Node_allocator;
 365:/usr/include/c++/6/bits/stl_tree.h **** 
 366:/usr/include/c++/6/bits/stl_tree.h ****       typedef __gnu_cxx::__alloc_traits<_Node_allocator> _Alloc_traits;
 367:/usr/include/c++/6/bits/stl_tree.h **** 
 368:/usr/include/c++/6/bits/stl_tree.h ****     protected:
 369:/usr/include/c++/6/bits/stl_tree.h ****       typedef _Rb_tree_node_base* 		_Base_ptr;
 370:/usr/include/c++/6/bits/stl_tree.h ****       typedef const _Rb_tree_node_base* 	_Const_Base_ptr;
 371:/usr/include/c++/6/bits/stl_tree.h ****       typedef _Rb_tree_node<_Val>* 		_Link_type;
GAS LISTING /tmp/ccvmoMuv.s 			page 131


 372:/usr/include/c++/6/bits/stl_tree.h ****       typedef const _Rb_tree_node<_Val>*	_Const_Link_type;
 373:/usr/include/c++/6/bits/stl_tree.h **** 
 374:/usr/include/c++/6/bits/stl_tree.h ****     private:
 375:/usr/include/c++/6/bits/stl_tree.h ****       // Functor recycling a pool of nodes and using allocation once the pool
 376:/usr/include/c++/6/bits/stl_tree.h ****       // is empty.
 377:/usr/include/c++/6/bits/stl_tree.h ****       struct _Reuse_or_alloc_node
 378:/usr/include/c++/6/bits/stl_tree.h ****       {
 379:/usr/include/c++/6/bits/stl_tree.h **** 	_Reuse_or_alloc_node(_Rb_tree& __t)
 380:/usr/include/c++/6/bits/stl_tree.h **** 	  : _M_root(__t._M_root()), _M_nodes(__t._M_rightmost()), _M_t(__t)
 381:/usr/include/c++/6/bits/stl_tree.h **** 	{
 382:/usr/include/c++/6/bits/stl_tree.h **** 	  if (_M_root)
 383:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 384:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_root->_M_parent = 0;
 385:/usr/include/c++/6/bits/stl_tree.h **** 
 386:/usr/include/c++/6/bits/stl_tree.h **** 	      if (_M_nodes->_M_left)
 387:/usr/include/c++/6/bits/stl_tree.h **** 		_M_nodes = _M_nodes->_M_left;
 388:/usr/include/c++/6/bits/stl_tree.h **** 	    }
 389:/usr/include/c++/6/bits/stl_tree.h **** 	  else
 390:/usr/include/c++/6/bits/stl_tree.h **** 	    _M_nodes = 0;
 391:/usr/include/c++/6/bits/stl_tree.h **** 	}
 392:/usr/include/c++/6/bits/stl_tree.h **** 
 393:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
 394:/usr/include/c++/6/bits/stl_tree.h **** 	_Reuse_or_alloc_node(const _Reuse_or_alloc_node&) = delete;
 395:/usr/include/c++/6/bits/stl_tree.h **** #endif
 396:/usr/include/c++/6/bits/stl_tree.h **** 
 397:/usr/include/c++/6/bits/stl_tree.h **** 	~_Reuse_or_alloc_node()
 398:/usr/include/c++/6/bits/stl_tree.h **** 	{ _M_t._M_erase(static_cast<_Link_type>(_M_root)); }
 399:/usr/include/c++/6/bits/stl_tree.h **** 
 400:/usr/include/c++/6/bits/stl_tree.h **** 	template<typename _Arg>
 401:/usr/include/c++/6/bits/stl_tree.h **** 	  _Link_type
 402:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus < 201103L
 403:/usr/include/c++/6/bits/stl_tree.h **** 	  operator()(const _Arg& __arg)
 404:/usr/include/c++/6/bits/stl_tree.h **** #else
 405:/usr/include/c++/6/bits/stl_tree.h **** 	  operator()(_Arg&& __arg)
 406:/usr/include/c++/6/bits/stl_tree.h **** #endif
 407:/usr/include/c++/6/bits/stl_tree.h **** 	  {
 408:/usr/include/c++/6/bits/stl_tree.h **** 	    _Link_type __node = static_cast<_Link_type>(_M_extract());
 409:/usr/include/c++/6/bits/stl_tree.h **** 	    if (__node)
 410:/usr/include/c++/6/bits/stl_tree.h **** 	      {
 411:/usr/include/c++/6/bits/stl_tree.h **** 		_M_t._M_destroy_node(__node);
 412:/usr/include/c++/6/bits/stl_tree.h **** 		_M_t._M_construct_node(__node, _GLIBCXX_FORWARD(_Arg, __arg));
 413:/usr/include/c++/6/bits/stl_tree.h **** 		return __node;
 414:/usr/include/c++/6/bits/stl_tree.h **** 	      }
 415:/usr/include/c++/6/bits/stl_tree.h **** 
 416:/usr/include/c++/6/bits/stl_tree.h **** 	    return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg));
 417:/usr/include/c++/6/bits/stl_tree.h **** 	  }
 418:/usr/include/c++/6/bits/stl_tree.h **** 
 419:/usr/include/c++/6/bits/stl_tree.h ****       private:
 420:/usr/include/c++/6/bits/stl_tree.h **** 	_Base_ptr
 421:/usr/include/c++/6/bits/stl_tree.h **** 	_M_extract()
 422:/usr/include/c++/6/bits/stl_tree.h **** 	{
 423:/usr/include/c++/6/bits/stl_tree.h **** 	  if (!_M_nodes)
 424:/usr/include/c++/6/bits/stl_tree.h **** 	    return _M_nodes;
 425:/usr/include/c++/6/bits/stl_tree.h **** 
 426:/usr/include/c++/6/bits/stl_tree.h **** 	  _Base_ptr __node = _M_nodes;
 427:/usr/include/c++/6/bits/stl_tree.h **** 	  _M_nodes = _M_nodes->_M_parent;
 428:/usr/include/c++/6/bits/stl_tree.h **** 	  if (_M_nodes)
GAS LISTING /tmp/ccvmoMuv.s 			page 132


 429:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 430:/usr/include/c++/6/bits/stl_tree.h **** 	      if (_M_nodes->_M_right == __node)
 431:/usr/include/c++/6/bits/stl_tree.h **** 		{
 432:/usr/include/c++/6/bits/stl_tree.h **** 		  _M_nodes->_M_right = 0;
 433:/usr/include/c++/6/bits/stl_tree.h **** 
 434:/usr/include/c++/6/bits/stl_tree.h **** 		  if (_M_nodes->_M_left)
 435:/usr/include/c++/6/bits/stl_tree.h **** 		    {
 436:/usr/include/c++/6/bits/stl_tree.h **** 		      _M_nodes = _M_nodes->_M_left;
 437:/usr/include/c++/6/bits/stl_tree.h **** 
 438:/usr/include/c++/6/bits/stl_tree.h **** 		      while (_M_nodes->_M_right)
 439:/usr/include/c++/6/bits/stl_tree.h **** 			_M_nodes = _M_nodes->_M_right;
 440:/usr/include/c++/6/bits/stl_tree.h **** 
 441:/usr/include/c++/6/bits/stl_tree.h **** 		      if (_M_nodes->_M_left)
 442:/usr/include/c++/6/bits/stl_tree.h **** 			_M_nodes = _M_nodes->_M_left;
 443:/usr/include/c++/6/bits/stl_tree.h **** 		    }
 444:/usr/include/c++/6/bits/stl_tree.h **** 		}
 445:/usr/include/c++/6/bits/stl_tree.h **** 	      else // __node is on the left.
 446:/usr/include/c++/6/bits/stl_tree.h **** 		_M_nodes->_M_left = 0;
 447:/usr/include/c++/6/bits/stl_tree.h **** 	    }
 448:/usr/include/c++/6/bits/stl_tree.h **** 	  else
 449:/usr/include/c++/6/bits/stl_tree.h **** 	    _M_root = 0;
 450:/usr/include/c++/6/bits/stl_tree.h **** 
 451:/usr/include/c++/6/bits/stl_tree.h **** 	  return __node;
 452:/usr/include/c++/6/bits/stl_tree.h **** 	}
 453:/usr/include/c++/6/bits/stl_tree.h **** 
 454:/usr/include/c++/6/bits/stl_tree.h **** 	_Base_ptr _M_root;
 455:/usr/include/c++/6/bits/stl_tree.h **** 	_Base_ptr _M_nodes;
 456:/usr/include/c++/6/bits/stl_tree.h **** 	_Rb_tree& _M_t;
 457:/usr/include/c++/6/bits/stl_tree.h ****       };
 458:/usr/include/c++/6/bits/stl_tree.h **** 
 459:/usr/include/c++/6/bits/stl_tree.h ****       // Functor similar to the previous one but without any pool of nodes to
 460:/usr/include/c++/6/bits/stl_tree.h ****       // recycle.
 461:/usr/include/c++/6/bits/stl_tree.h ****       struct _Alloc_node
 462:/usr/include/c++/6/bits/stl_tree.h ****       {
 463:/usr/include/c++/6/bits/stl_tree.h **** 	_Alloc_node(_Rb_tree& __t)
 464:/usr/include/c++/6/bits/stl_tree.h **** 	  : _M_t(__t) { }
 465:/usr/include/c++/6/bits/stl_tree.h **** 
 466:/usr/include/c++/6/bits/stl_tree.h **** 	template<typename _Arg>
 467:/usr/include/c++/6/bits/stl_tree.h **** 	  _Link_type
 468:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus < 201103L
 469:/usr/include/c++/6/bits/stl_tree.h **** 	  operator()(const _Arg& __arg) const
 470:/usr/include/c++/6/bits/stl_tree.h **** #else
 471:/usr/include/c++/6/bits/stl_tree.h **** 	  operator()(_Arg&& __arg) const
 472:/usr/include/c++/6/bits/stl_tree.h **** #endif
 473:/usr/include/c++/6/bits/stl_tree.h **** 	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 474:/usr/include/c++/6/bits/stl_tree.h **** 
 475:/usr/include/c++/6/bits/stl_tree.h ****       private:
 476:/usr/include/c++/6/bits/stl_tree.h **** 	_Rb_tree& _M_t;
 477:/usr/include/c++/6/bits/stl_tree.h ****       };
 478:/usr/include/c++/6/bits/stl_tree.h **** 
 479:/usr/include/c++/6/bits/stl_tree.h ****     public:
 480:/usr/include/c++/6/bits/stl_tree.h ****       typedef _Key 				key_type;
 481:/usr/include/c++/6/bits/stl_tree.h ****       typedef _Val 				value_type;
 482:/usr/include/c++/6/bits/stl_tree.h ****       typedef value_type* 			pointer;
 483:/usr/include/c++/6/bits/stl_tree.h ****       typedef const value_type* 		const_pointer;
 484:/usr/include/c++/6/bits/stl_tree.h ****       typedef value_type& 			reference;
 485:/usr/include/c++/6/bits/stl_tree.h ****       typedef const value_type& 		const_reference;
GAS LISTING /tmp/ccvmoMuv.s 			page 133


 486:/usr/include/c++/6/bits/stl_tree.h ****       typedef size_t 				size_type;
 487:/usr/include/c++/6/bits/stl_tree.h ****       typedef ptrdiff_t 			difference_type;
 488:/usr/include/c++/6/bits/stl_tree.h ****       typedef _Alloc 				allocator_type;
 489:/usr/include/c++/6/bits/stl_tree.h **** 
 490:/usr/include/c++/6/bits/stl_tree.h ****       _Node_allocator&
 491:/usr/include/c++/6/bits/stl_tree.h ****       _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 492:/usr/include/c++/6/bits/stl_tree.h ****       { return *static_cast<_Node_allocator*>(&this->_M_impl); }
 493:/usr/include/c++/6/bits/stl_tree.h ****       
 494:/usr/include/c++/6/bits/stl_tree.h ****       const _Node_allocator&
 495:/usr/include/c++/6/bits/stl_tree.h ****       _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
 496:/usr/include/c++/6/bits/stl_tree.h ****       { return *static_cast<const _Node_allocator*>(&this->_M_impl); }
 497:/usr/include/c++/6/bits/stl_tree.h **** 
 498:/usr/include/c++/6/bits/stl_tree.h ****       allocator_type
 499:/usr/include/c++/6/bits/stl_tree.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 500:/usr/include/c++/6/bits/stl_tree.h ****       { return allocator_type(_M_get_Node_allocator()); }
 501:/usr/include/c++/6/bits/stl_tree.h **** 
 502:/usr/include/c++/6/bits/stl_tree.h ****     protected:
 503:/usr/include/c++/6/bits/stl_tree.h ****       _Link_type
 504:/usr/include/c++/6/bits/stl_tree.h ****       _M_get_node()
 505:/usr/include/c++/6/bits/stl_tree.h ****       { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 506:/usr/include/c++/6/bits/stl_tree.h **** 
 507:/usr/include/c++/6/bits/stl_tree.h ****       void
 508:/usr/include/c++/6/bits/stl_tree.h ****       _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 509:/usr/include/c++/6/bits/stl_tree.h ****       { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 510:/usr/include/c++/6/bits/stl_tree.h **** 
 511:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus < 201103L
 512:/usr/include/c++/6/bits/stl_tree.h ****       void
 513:/usr/include/c++/6/bits/stl_tree.h ****       _M_construct_node(_Link_type __node, const value_type& __x)
 514:/usr/include/c++/6/bits/stl_tree.h ****       {
 515:/usr/include/c++/6/bits/stl_tree.h **** 	__try
 516:/usr/include/c++/6/bits/stl_tree.h **** 	  { get_allocator().construct(__node->_M_valptr(), __x); }
 517:/usr/include/c++/6/bits/stl_tree.h **** 	__catch(...)
 518:/usr/include/c++/6/bits/stl_tree.h **** 	  {
 519:/usr/include/c++/6/bits/stl_tree.h **** 	    _M_put_node(__node);
 520:/usr/include/c++/6/bits/stl_tree.h **** 	    __throw_exception_again;
 521:/usr/include/c++/6/bits/stl_tree.h **** 	  }
 522:/usr/include/c++/6/bits/stl_tree.h ****       }
 523:/usr/include/c++/6/bits/stl_tree.h **** 
 524:/usr/include/c++/6/bits/stl_tree.h ****       _Link_type
 525:/usr/include/c++/6/bits/stl_tree.h ****       _M_create_node(const value_type& __x)
 526:/usr/include/c++/6/bits/stl_tree.h ****       {
 527:/usr/include/c++/6/bits/stl_tree.h **** 	_Link_type __tmp = _M_get_node();
 528:/usr/include/c++/6/bits/stl_tree.h **** 	_M_construct_node(__tmp, __x);
 529:/usr/include/c++/6/bits/stl_tree.h **** 	return __tmp;
 530:/usr/include/c++/6/bits/stl_tree.h ****       }
 531:/usr/include/c++/6/bits/stl_tree.h **** 
 532:/usr/include/c++/6/bits/stl_tree.h ****       void
 533:/usr/include/c++/6/bits/stl_tree.h ****       _M_destroy_node(_Link_type __p)
 534:/usr/include/c++/6/bits/stl_tree.h ****       { get_allocator().destroy(__p->_M_valptr()); }
 535:/usr/include/c++/6/bits/stl_tree.h **** #else
 536:/usr/include/c++/6/bits/stl_tree.h ****       template<typename... _Args>
 537:/usr/include/c++/6/bits/stl_tree.h **** 	void
 538:/usr/include/c++/6/bits/stl_tree.h **** 	_M_construct_node(_Link_type __node, _Args&&... __args)
 539:/usr/include/c++/6/bits/stl_tree.h **** 	{
 540:/usr/include/c++/6/bits/stl_tree.h **** 	  __try
 541:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 542:/usr/include/c++/6/bits/stl_tree.h **** 	      ::new(__node) _Rb_tree_node<_Val>;
GAS LISTING /tmp/ccvmoMuv.s 			page 134


 543:/usr/include/c++/6/bits/stl_tree.h **** 	      _Alloc_traits::construct(_M_get_Node_allocator(),
 544:/usr/include/c++/6/bits/stl_tree.h **** 				       __node->_M_valptr(),
 545:/usr/include/c++/6/bits/stl_tree.h **** 				       std::forward<_Args>(__args)...);
 546:/usr/include/c++/6/bits/stl_tree.h **** 	    }
 547:/usr/include/c++/6/bits/stl_tree.h **** 	  __catch(...)
 548:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 549:/usr/include/c++/6/bits/stl_tree.h **** 	      __node->~_Rb_tree_node<_Val>();
 550:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_put_node(__node);
 551:/usr/include/c++/6/bits/stl_tree.h **** 	      __throw_exception_again;
 552:/usr/include/c++/6/bits/stl_tree.h **** 	    }
 553:/usr/include/c++/6/bits/stl_tree.h **** 	}
 554:/usr/include/c++/6/bits/stl_tree.h **** 
 555:/usr/include/c++/6/bits/stl_tree.h ****       template<typename... _Args>
 556:/usr/include/c++/6/bits/stl_tree.h ****         _Link_type
 557:/usr/include/c++/6/bits/stl_tree.h ****         _M_create_node(_Args&&... __args)
 558:/usr/include/c++/6/bits/stl_tree.h **** 	{
 559:/usr/include/c++/6/bits/stl_tree.h **** 	  _Link_type __tmp = _M_get_node();
 560:/usr/include/c++/6/bits/stl_tree.h **** 	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 561:/usr/include/c++/6/bits/stl_tree.h **** 	  return __tmp;
 562:/usr/include/c++/6/bits/stl_tree.h **** 	}
 563:/usr/include/c++/6/bits/stl_tree.h **** 
 564:/usr/include/c++/6/bits/stl_tree.h ****       void
 565:/usr/include/c++/6/bits/stl_tree.h ****       _M_destroy_node(_Link_type __p) noexcept
 566:/usr/include/c++/6/bits/stl_tree.h ****       {
 567:/usr/include/c++/6/bits/stl_tree.h **** 	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 568:/usr/include/c++/6/bits/stl_tree.h **** 	__p->~_Rb_tree_node<_Val>();
 569:/usr/include/c++/6/bits/stl_tree.h ****       }
 570:/usr/include/c++/6/bits/stl_tree.h **** #endif
 571:/usr/include/c++/6/bits/stl_tree.h **** 
 572:/usr/include/c++/6/bits/stl_tree.h ****       void
 573:/usr/include/c++/6/bits/stl_tree.h ****       _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 574:/usr/include/c++/6/bits/stl_tree.h ****       {
 575:/usr/include/c++/6/bits/stl_tree.h **** 	_M_destroy_node(__p);
 576:/usr/include/c++/6/bits/stl_tree.h **** 	_M_put_node(__p);
 577:/usr/include/c++/6/bits/stl_tree.h ****       }
 578:/usr/include/c++/6/bits/stl_tree.h **** 
 579:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _NodeGen>
 580:/usr/include/c++/6/bits/stl_tree.h **** 	_Link_type
 581:/usr/include/c++/6/bits/stl_tree.h **** 	_M_clone_node(_Const_Link_type __x, _NodeGen& __node_gen)
 582:/usr/include/c++/6/bits/stl_tree.h **** 	{
 583:/usr/include/c++/6/bits/stl_tree.h **** 	  _Link_type __tmp = __node_gen(*__x->_M_valptr());
 584:/usr/include/c++/6/bits/stl_tree.h **** 	  __tmp->_M_color = __x->_M_color;
 585:/usr/include/c++/6/bits/stl_tree.h **** 	  __tmp->_M_left = 0;
 586:/usr/include/c++/6/bits/stl_tree.h **** 	  __tmp->_M_right = 0;
 587:/usr/include/c++/6/bits/stl_tree.h **** 	  return __tmp;
 588:/usr/include/c++/6/bits/stl_tree.h **** 	}
 589:/usr/include/c++/6/bits/stl_tree.h **** 
 590:/usr/include/c++/6/bits/stl_tree.h ****     protected:
 591:/usr/include/c++/6/bits/stl_tree.h ****       // Unused _Is_pod_comparator is kept as it is part of mangled name.
 592:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _Key_compare,
 593:/usr/include/c++/6/bits/stl_tree.h **** 	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
 594:/usr/include/c++/6/bits/stl_tree.h ****         struct _Rb_tree_impl : public _Node_allocator
 595:/usr/include/c++/6/bits/stl_tree.h ****         {
 596:/usr/include/c++/6/bits/stl_tree.h **** 	  _Key_compare		_M_key_compare;
 597:/usr/include/c++/6/bits/stl_tree.h **** 	  _Rb_tree_node_base 	_M_header;
 598:/usr/include/c++/6/bits/stl_tree.h **** 	  size_type 		_M_node_count; // Keeps track of size of tree.
 599:/usr/include/c++/6/bits/stl_tree.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 135


 600:/usr/include/c++/6/bits/stl_tree.h **** 	  _Rb_tree_impl()
 601:/usr/include/c++/6/bits/stl_tree.h **** 	  : _Node_allocator(), _M_key_compare(), _M_header(),
 602:/usr/include/c++/6/bits/stl_tree.h **** 	    _M_node_count(0)
 603:/usr/include/c++/6/bits/stl_tree.h **** 	  { _M_initialize(); }
 604:/usr/include/c++/6/bits/stl_tree.h **** 
 605:/usr/include/c++/6/bits/stl_tree.h **** 	  _Rb_tree_impl(const _Key_compare& __comp, const _Node_allocator& __a)
 606:/usr/include/c++/6/bits/stl_tree.h **** 	  : _Node_allocator(__a), _M_key_compare(__comp), _M_header(),
 607:/usr/include/c++/6/bits/stl_tree.h **** 	    _M_node_count(0)
 608:/usr/include/c++/6/bits/stl_tree.h **** 	  { _M_initialize(); }
 609:/usr/include/c++/6/bits/stl_tree.h **** 
 610:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
 611:/usr/include/c++/6/bits/stl_tree.h **** 	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 612:/usr/include/c++/6/bits/stl_tree.h **** 	  : _Node_allocator(std::move(__a)), _M_key_compare(__comp),
 613:/usr/include/c++/6/bits/stl_tree.h **** 	    _M_header(), _M_node_count(0)
 614:/usr/include/c++/6/bits/stl_tree.h **** 	  { _M_initialize(); }
 615:/usr/include/c++/6/bits/stl_tree.h **** #endif
 616:/usr/include/c++/6/bits/stl_tree.h **** 
 617:/usr/include/c++/6/bits/stl_tree.h **** 	  void
 618:/usr/include/c++/6/bits/stl_tree.h **** 	  _M_reset()
 619:/usr/include/c++/6/bits/stl_tree.h **** 	  {
 620:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_parent = 0;
 621:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_left = &this->_M_header;
 622:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_right = &this->_M_header;
 623:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_node_count = 0;
 624:/usr/include/c++/6/bits/stl_tree.h **** 	  }
 625:/usr/include/c++/6/bits/stl_tree.h **** 
 626:/usr/include/c++/6/bits/stl_tree.h **** 	private:
 627:/usr/include/c++/6/bits/stl_tree.h **** 	  void
 628:/usr/include/c++/6/bits/stl_tree.h **** 	  _M_initialize()
 629:/usr/include/c++/6/bits/stl_tree.h **** 	  {
 630:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_color = _S_red;
 631:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_parent = 0;
 632:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_left = &this->_M_header;
 633:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_right = &this->_M_header;
 634:/usr/include/c++/6/bits/stl_tree.h **** 	  }	    
 635:/usr/include/c++/6/bits/stl_tree.h **** 	};
 636:/usr/include/c++/6/bits/stl_tree.h **** 
 637:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree_impl<_Compare> _M_impl;
 638:/usr/include/c++/6/bits/stl_tree.h **** 
 639:/usr/include/c++/6/bits/stl_tree.h ****     protected:
 640:/usr/include/c++/6/bits/stl_tree.h ****       _Base_ptr&
 641:/usr/include/c++/6/bits/stl_tree.h ****       _M_root() _GLIBCXX_NOEXCEPT
 642:/usr/include/c++/6/bits/stl_tree.h ****       { return this->_M_impl._M_header._M_parent; }
 643:/usr/include/c++/6/bits/stl_tree.h **** 
 644:/usr/include/c++/6/bits/stl_tree.h ****       _Const_Base_ptr
 645:/usr/include/c++/6/bits/stl_tree.h ****       _M_root() const _GLIBCXX_NOEXCEPT
 646:/usr/include/c++/6/bits/stl_tree.h ****       { return this->_M_impl._M_header._M_parent; }
 647:/usr/include/c++/6/bits/stl_tree.h **** 
 648:/usr/include/c++/6/bits/stl_tree.h ****       _Base_ptr&
 649:/usr/include/c++/6/bits/stl_tree.h ****       _M_leftmost() _GLIBCXX_NOEXCEPT
 650:/usr/include/c++/6/bits/stl_tree.h ****       { return this->_M_impl._M_header._M_left; }
 651:/usr/include/c++/6/bits/stl_tree.h **** 
 652:/usr/include/c++/6/bits/stl_tree.h ****       _Const_Base_ptr
 653:/usr/include/c++/6/bits/stl_tree.h ****       _M_leftmost() const _GLIBCXX_NOEXCEPT
 654:/usr/include/c++/6/bits/stl_tree.h ****       { return this->_M_impl._M_header._M_left; }
 655:/usr/include/c++/6/bits/stl_tree.h **** 
 656:/usr/include/c++/6/bits/stl_tree.h ****       _Base_ptr&
GAS LISTING /tmp/ccvmoMuv.s 			page 136


 657:/usr/include/c++/6/bits/stl_tree.h ****       _M_rightmost() _GLIBCXX_NOEXCEPT
 658:/usr/include/c++/6/bits/stl_tree.h ****       { return this->_M_impl._M_header._M_right; }
 659:/usr/include/c++/6/bits/stl_tree.h **** 
 660:/usr/include/c++/6/bits/stl_tree.h ****       _Const_Base_ptr
 661:/usr/include/c++/6/bits/stl_tree.h ****       _M_rightmost() const _GLIBCXX_NOEXCEPT
 662:/usr/include/c++/6/bits/stl_tree.h ****       { return this->_M_impl._M_header._M_right; }
 663:/usr/include/c++/6/bits/stl_tree.h **** 
 664:/usr/include/c++/6/bits/stl_tree.h ****       _Link_type
 665:/usr/include/c++/6/bits/stl_tree.h ****       _M_begin() _GLIBCXX_NOEXCEPT
 666:/usr/include/c++/6/bits/stl_tree.h ****       { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 667:/usr/include/c++/6/bits/stl_tree.h **** 
 668:/usr/include/c++/6/bits/stl_tree.h ****       _Const_Link_type
 669:/usr/include/c++/6/bits/stl_tree.h ****       _M_begin() const _GLIBCXX_NOEXCEPT
 670:/usr/include/c++/6/bits/stl_tree.h ****       {
 671:/usr/include/c++/6/bits/stl_tree.h **** 	return static_cast<_Const_Link_type>
 672:/usr/include/c++/6/bits/stl_tree.h **** 	  (this->_M_impl._M_header._M_parent);
 673:/usr/include/c++/6/bits/stl_tree.h ****       }
 674:/usr/include/c++/6/bits/stl_tree.h **** 
 675:/usr/include/c++/6/bits/stl_tree.h ****       _Base_ptr
 676:/usr/include/c++/6/bits/stl_tree.h ****       _M_end() _GLIBCXX_NOEXCEPT
 677:/usr/include/c++/6/bits/stl_tree.h ****       { return &this->_M_impl._M_header; }
 678:/usr/include/c++/6/bits/stl_tree.h **** 
 679:/usr/include/c++/6/bits/stl_tree.h ****       _Const_Base_ptr
 680:/usr/include/c++/6/bits/stl_tree.h ****       _M_end() const _GLIBCXX_NOEXCEPT
 681:/usr/include/c++/6/bits/stl_tree.h ****       { return &this->_M_impl._M_header; }
 682:/usr/include/c++/6/bits/stl_tree.h **** 
 683:/usr/include/c++/6/bits/stl_tree.h ****       static const_reference
 684:/usr/include/c++/6/bits/stl_tree.h ****       _S_value(_Const_Link_type __x)
 685:/usr/include/c++/6/bits/stl_tree.h ****       { return *__x->_M_valptr(); }
 686:/usr/include/c++/6/bits/stl_tree.h **** 
 687:/usr/include/c++/6/bits/stl_tree.h ****       static const _Key&
 688:/usr/include/c++/6/bits/stl_tree.h ****       _S_key(_Const_Link_type __x)
 689:/usr/include/c++/6/bits/stl_tree.h ****       { return _KeyOfValue()(_S_value(__x)); }
 690:/usr/include/c++/6/bits/stl_tree.h **** 
 691:/usr/include/c++/6/bits/stl_tree.h ****       static _Link_type
 692:/usr/include/c++/6/bits/stl_tree.h ****       _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 693:/usr/include/c++/6/bits/stl_tree.h ****       { return static_cast<_Link_type>(__x->_M_left); }
 694:/usr/include/c++/6/bits/stl_tree.h **** 
 695:/usr/include/c++/6/bits/stl_tree.h ****       static _Const_Link_type
 696:/usr/include/c++/6/bits/stl_tree.h ****       _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 697:/usr/include/c++/6/bits/stl_tree.h ****       { return static_cast<_Const_Link_type>(__x->_M_left); }
 698:/usr/include/c++/6/bits/stl_tree.h **** 
 699:/usr/include/c++/6/bits/stl_tree.h ****       static _Link_type
 700:/usr/include/c++/6/bits/stl_tree.h ****       _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 701:/usr/include/c++/6/bits/stl_tree.h ****       { return static_cast<_Link_type>(__x->_M_right); }
 702:/usr/include/c++/6/bits/stl_tree.h **** 
 703:/usr/include/c++/6/bits/stl_tree.h ****       static _Const_Link_type
 704:/usr/include/c++/6/bits/stl_tree.h ****       _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 705:/usr/include/c++/6/bits/stl_tree.h ****       { return static_cast<_Const_Link_type>(__x->_M_right); }
 706:/usr/include/c++/6/bits/stl_tree.h **** 
 707:/usr/include/c++/6/bits/stl_tree.h ****       static const_reference
 708:/usr/include/c++/6/bits/stl_tree.h ****       _S_value(_Const_Base_ptr __x)
 709:/usr/include/c++/6/bits/stl_tree.h ****       { return *static_cast<_Const_Link_type>(__x)->_M_valptr(); }
 710:/usr/include/c++/6/bits/stl_tree.h **** 
 711:/usr/include/c++/6/bits/stl_tree.h ****       static const _Key&
 712:/usr/include/c++/6/bits/stl_tree.h ****       _S_key(_Const_Base_ptr __x)
 713:/usr/include/c++/6/bits/stl_tree.h ****       { return _KeyOfValue()(_S_value(__x)); }
GAS LISTING /tmp/ccvmoMuv.s 			page 137


 714:/usr/include/c++/6/bits/stl_tree.h **** 
 715:/usr/include/c++/6/bits/stl_tree.h ****       static _Base_ptr
 716:/usr/include/c++/6/bits/stl_tree.h ****       _S_minimum(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 717:/usr/include/c++/6/bits/stl_tree.h ****       { return _Rb_tree_node_base::_S_minimum(__x); }
 718:/usr/include/c++/6/bits/stl_tree.h **** 
 719:/usr/include/c++/6/bits/stl_tree.h ****       static _Const_Base_ptr
 720:/usr/include/c++/6/bits/stl_tree.h ****       _S_minimum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 721:/usr/include/c++/6/bits/stl_tree.h ****       { return _Rb_tree_node_base::_S_minimum(__x); }
 722:/usr/include/c++/6/bits/stl_tree.h **** 
 723:/usr/include/c++/6/bits/stl_tree.h ****       static _Base_ptr
 724:/usr/include/c++/6/bits/stl_tree.h ****       _S_maximum(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 725:/usr/include/c++/6/bits/stl_tree.h ****       { return _Rb_tree_node_base::_S_maximum(__x); }
 726:/usr/include/c++/6/bits/stl_tree.h **** 
 727:/usr/include/c++/6/bits/stl_tree.h ****       static _Const_Base_ptr
 728:/usr/include/c++/6/bits/stl_tree.h ****       _S_maximum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 729:/usr/include/c++/6/bits/stl_tree.h ****       { return _Rb_tree_node_base::_S_maximum(__x); }
 730:/usr/include/c++/6/bits/stl_tree.h **** 
 731:/usr/include/c++/6/bits/stl_tree.h ****     public:
 732:/usr/include/c++/6/bits/stl_tree.h ****       typedef _Rb_tree_iterator<value_type>       iterator;
 733:/usr/include/c++/6/bits/stl_tree.h ****       typedef _Rb_tree_const_iterator<value_type> const_iterator;
 734:/usr/include/c++/6/bits/stl_tree.h **** 
 735:/usr/include/c++/6/bits/stl_tree.h ****       typedef std::reverse_iterator<iterator>       reverse_iterator;
 736:/usr/include/c++/6/bits/stl_tree.h ****       typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
 737:/usr/include/c++/6/bits/stl_tree.h **** 
 738:/usr/include/c++/6/bits/stl_tree.h ****       pair<_Base_ptr, _Base_ptr>
 739:/usr/include/c++/6/bits/stl_tree.h ****       _M_get_insert_unique_pos(const key_type& __k);
 740:/usr/include/c++/6/bits/stl_tree.h **** 
 741:/usr/include/c++/6/bits/stl_tree.h ****       pair<_Base_ptr, _Base_ptr>
 742:/usr/include/c++/6/bits/stl_tree.h ****       _M_get_insert_equal_pos(const key_type& __k);
 743:/usr/include/c++/6/bits/stl_tree.h **** 
 744:/usr/include/c++/6/bits/stl_tree.h ****       pair<_Base_ptr, _Base_ptr>
 745:/usr/include/c++/6/bits/stl_tree.h ****       _M_get_insert_hint_unique_pos(const_iterator __pos,
 746:/usr/include/c++/6/bits/stl_tree.h **** 				    const key_type& __k);
 747:/usr/include/c++/6/bits/stl_tree.h **** 
 748:/usr/include/c++/6/bits/stl_tree.h ****       pair<_Base_ptr, _Base_ptr>
 749:/usr/include/c++/6/bits/stl_tree.h ****       _M_get_insert_hint_equal_pos(const_iterator __pos,
 750:/usr/include/c++/6/bits/stl_tree.h **** 				   const key_type& __k);
 751:/usr/include/c++/6/bits/stl_tree.h **** 
 752:/usr/include/c++/6/bits/stl_tree.h ****     private:
 753:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
 754:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _Arg, typename _NodeGen>
 755:/usr/include/c++/6/bits/stl_tree.h ****         iterator
 756:/usr/include/c++/6/bits/stl_tree.h **** 	_M_insert_(_Base_ptr __x, _Base_ptr __y, _Arg&& __v, _NodeGen&);
 757:/usr/include/c++/6/bits/stl_tree.h **** 
 758:/usr/include/c++/6/bits/stl_tree.h ****       iterator
 759:/usr/include/c++/6/bits/stl_tree.h ****       _M_insert_node(_Base_ptr __x, _Base_ptr __y, _Link_type __z);
 760:/usr/include/c++/6/bits/stl_tree.h **** 
 761:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _Arg>
 762:/usr/include/c++/6/bits/stl_tree.h ****         iterator
 763:/usr/include/c++/6/bits/stl_tree.h ****         _M_insert_lower(_Base_ptr __y, _Arg&& __v);
 764:/usr/include/c++/6/bits/stl_tree.h **** 
 765:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _Arg>
 766:/usr/include/c++/6/bits/stl_tree.h ****         iterator
 767:/usr/include/c++/6/bits/stl_tree.h ****         _M_insert_equal_lower(_Arg&& __x);
 768:/usr/include/c++/6/bits/stl_tree.h **** 
 769:/usr/include/c++/6/bits/stl_tree.h ****       iterator
 770:/usr/include/c++/6/bits/stl_tree.h ****       _M_insert_lower_node(_Base_ptr __p, _Link_type __z);
GAS LISTING /tmp/ccvmoMuv.s 			page 138


 771:/usr/include/c++/6/bits/stl_tree.h **** 
 772:/usr/include/c++/6/bits/stl_tree.h ****       iterator
 773:/usr/include/c++/6/bits/stl_tree.h ****       _M_insert_equal_lower_node(_Link_type __z);
 774:/usr/include/c++/6/bits/stl_tree.h **** #else
 775:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _NodeGen>
 776:/usr/include/c++/6/bits/stl_tree.h **** 	iterator
 777:/usr/include/c++/6/bits/stl_tree.h **** 	_M_insert_(_Base_ptr __x, _Base_ptr __y,
 778:/usr/include/c++/6/bits/stl_tree.h **** 		   const value_type& __v, _NodeGen&);
 779:/usr/include/c++/6/bits/stl_tree.h **** 
 780:/usr/include/c++/6/bits/stl_tree.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 781:/usr/include/c++/6/bits/stl_tree.h ****       // 233. Insertion hints in associative containers.
 782:/usr/include/c++/6/bits/stl_tree.h ****       iterator
 783:/usr/include/c++/6/bits/stl_tree.h ****       _M_insert_lower(_Base_ptr __y, const value_type& __v);
 784:/usr/include/c++/6/bits/stl_tree.h **** 
 785:/usr/include/c++/6/bits/stl_tree.h ****       iterator
 786:/usr/include/c++/6/bits/stl_tree.h ****       _M_insert_equal_lower(const value_type& __x);
 787:/usr/include/c++/6/bits/stl_tree.h **** #endif
 788:/usr/include/c++/6/bits/stl_tree.h **** 
 789:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _NodeGen>
 790:/usr/include/c++/6/bits/stl_tree.h **** 	_Link_type
 791:/usr/include/c++/6/bits/stl_tree.h **** 	_M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen&);
 792:/usr/include/c++/6/bits/stl_tree.h **** 
 793:/usr/include/c++/6/bits/stl_tree.h ****       _Link_type
 794:/usr/include/c++/6/bits/stl_tree.h ****       _M_copy(_Const_Link_type __x, _Base_ptr __p)
 795:/usr/include/c++/6/bits/stl_tree.h ****       {
 796:/usr/include/c++/6/bits/stl_tree.h **** 	_Alloc_node __an(*this);
 797:/usr/include/c++/6/bits/stl_tree.h **** 	return _M_copy(__x, __p, __an);
 798:/usr/include/c++/6/bits/stl_tree.h ****       }
 799:/usr/include/c++/6/bits/stl_tree.h **** 
 800:/usr/include/c++/6/bits/stl_tree.h ****       void
 801:/usr/include/c++/6/bits/stl_tree.h ****       _M_erase(_Link_type __x);
 802:/usr/include/c++/6/bits/stl_tree.h **** 
 803:/usr/include/c++/6/bits/stl_tree.h ****       iterator
 804:/usr/include/c++/6/bits/stl_tree.h ****       _M_lower_bound(_Link_type __x, _Base_ptr __y,
 805:/usr/include/c++/6/bits/stl_tree.h **** 		     const _Key& __k);
 806:/usr/include/c++/6/bits/stl_tree.h **** 
 807:/usr/include/c++/6/bits/stl_tree.h ****       const_iterator
 808:/usr/include/c++/6/bits/stl_tree.h ****       _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,
 809:/usr/include/c++/6/bits/stl_tree.h **** 		     const _Key& __k) const;
 810:/usr/include/c++/6/bits/stl_tree.h **** 
 811:/usr/include/c++/6/bits/stl_tree.h ****       iterator
 812:/usr/include/c++/6/bits/stl_tree.h ****       _M_upper_bound(_Link_type __x, _Base_ptr __y,
 813:/usr/include/c++/6/bits/stl_tree.h **** 		     const _Key& __k);
 814:/usr/include/c++/6/bits/stl_tree.h **** 
 815:/usr/include/c++/6/bits/stl_tree.h ****       const_iterator
 816:/usr/include/c++/6/bits/stl_tree.h ****       _M_upper_bound(_Const_Link_type __x, _Const_Base_ptr __y,
 817:/usr/include/c++/6/bits/stl_tree.h **** 		     const _Key& __k) const;
 818:/usr/include/c++/6/bits/stl_tree.h **** 
 819:/usr/include/c++/6/bits/stl_tree.h ****     public:
 820:/usr/include/c++/6/bits/stl_tree.h ****       // allocation/deallocation
 821:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree() { }
 822:/usr/include/c++/6/bits/stl_tree.h **** 
 823:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree(const _Compare& __comp,
 824:/usr/include/c++/6/bits/stl_tree.h **** 	       const allocator_type& __a = allocator_type())
 825:/usr/include/c++/6/bits/stl_tree.h ****       : _M_impl(__comp, _Node_allocator(__a)) { }
 826:/usr/include/c++/6/bits/stl_tree.h **** 
 827:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree(const _Rb_tree& __x)
GAS LISTING /tmp/ccvmoMuv.s 			page 139


 828:/usr/include/c++/6/bits/stl_tree.h ****       : _M_impl(__x._M_impl._M_key_compare,
 829:/usr/include/c++/6/bits/stl_tree.h **** 	        _Alloc_traits::_S_select_on_copy(__x._M_get_Node_allocator()))
 830:/usr/include/c++/6/bits/stl_tree.h ****       {
 831:/usr/include/c++/6/bits/stl_tree.h **** 	if (__x._M_root() != 0)
 832:/usr/include/c++/6/bits/stl_tree.h **** 	  {
 833:/usr/include/c++/6/bits/stl_tree.h **** 	    _M_root() = _M_copy(__x._M_begin(), _M_end());
 834:/usr/include/c++/6/bits/stl_tree.h **** 	    _M_leftmost() = _S_minimum(_M_root());
 835:/usr/include/c++/6/bits/stl_tree.h **** 	    _M_rightmost() = _S_maximum(_M_root());
 836:/usr/include/c++/6/bits/stl_tree.h **** 	    _M_impl._M_node_count = __x._M_impl._M_node_count;
 837:/usr/include/c++/6/bits/stl_tree.h **** 	  }
 838:/usr/include/c++/6/bits/stl_tree.h ****       }
 839:/usr/include/c++/6/bits/stl_tree.h **** 
 840:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
 841:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree(const allocator_type& __a)
 842:/usr/include/c++/6/bits/stl_tree.h ****       : _M_impl(_Compare(), _Node_allocator(__a))
 843:/usr/include/c++/6/bits/stl_tree.h ****       { }
 844:/usr/include/c++/6/bits/stl_tree.h **** 
 845:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree(const _Rb_tree& __x, const allocator_type& __a)
 846:/usr/include/c++/6/bits/stl_tree.h ****       : _M_impl(__x._M_impl._M_key_compare, _Node_allocator(__a))
 847:/usr/include/c++/6/bits/stl_tree.h ****       {
 848:/usr/include/c++/6/bits/stl_tree.h **** 	if (__x._M_root() != nullptr)
 849:/usr/include/c++/6/bits/stl_tree.h **** 	  {
 850:/usr/include/c++/6/bits/stl_tree.h **** 	    _M_root() = _M_copy(__x._M_begin(), _M_end());
 851:/usr/include/c++/6/bits/stl_tree.h **** 	    _M_leftmost() = _S_minimum(_M_root());
 852:/usr/include/c++/6/bits/stl_tree.h **** 	    _M_rightmost() = _S_maximum(_M_root());
 853:/usr/include/c++/6/bits/stl_tree.h **** 	    _M_impl._M_node_count = __x._M_impl._M_node_count;
 854:/usr/include/c++/6/bits/stl_tree.h **** 	  }
 855:/usr/include/c++/6/bits/stl_tree.h ****       }
 856:/usr/include/c++/6/bits/stl_tree.h **** 
 857:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree(_Rb_tree&& __x)
 858:/usr/include/c++/6/bits/stl_tree.h ****       : _M_impl(__x._M_impl._M_key_compare,
 859:/usr/include/c++/6/bits/stl_tree.h **** 		std::move(__x._M_get_Node_allocator()))
 860:/usr/include/c++/6/bits/stl_tree.h ****       {
 861:/usr/include/c++/6/bits/stl_tree.h **** 	if (__x._M_root() != 0)
 862:/usr/include/c++/6/bits/stl_tree.h **** 	  _M_move_data(__x, std::true_type());
 863:/usr/include/c++/6/bits/stl_tree.h ****       }
 864:/usr/include/c++/6/bits/stl_tree.h **** 
 865:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree(_Rb_tree&& __x, const allocator_type& __a)
 866:/usr/include/c++/6/bits/stl_tree.h ****       : _Rb_tree(std::move(__x), _Node_allocator(__a))
 867:/usr/include/c++/6/bits/stl_tree.h ****       { }
 868:/usr/include/c++/6/bits/stl_tree.h **** 
 869:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);
 870:/usr/include/c++/6/bits/stl_tree.h **** #endif
 871:/usr/include/c++/6/bits/stl_tree.h **** 
 872:/usr/include/c++/6/bits/stl_tree.h ****       ~_Rb_tree() _GLIBCXX_NOEXCEPT
 873:/usr/include/c++/6/bits/stl_tree.h ****       { _M_erase(_M_begin()); }
 874:/usr/include/c++/6/bits/stl_tree.h **** 
 875:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree&
 876:/usr/include/c++/6/bits/stl_tree.h ****       operator=(const _Rb_tree& __x);
 877:/usr/include/c++/6/bits/stl_tree.h **** 
 878:/usr/include/c++/6/bits/stl_tree.h ****       // Accessors.
 879:/usr/include/c++/6/bits/stl_tree.h ****       _Compare
 880:/usr/include/c++/6/bits/stl_tree.h ****       key_comp() const
 881:/usr/include/c++/6/bits/stl_tree.h ****       { return _M_impl._M_key_compare; }
 882:/usr/include/c++/6/bits/stl_tree.h **** 
 883:/usr/include/c++/6/bits/stl_tree.h ****       iterator
 884:/usr/include/c++/6/bits/stl_tree.h ****       begin() _GLIBCXX_NOEXCEPT
GAS LISTING /tmp/ccvmoMuv.s 			page 140


 885:/usr/include/c++/6/bits/stl_tree.h ****       { return iterator(this->_M_impl._M_header._M_left); }
 886:/usr/include/c++/6/bits/stl_tree.h **** 
 887:/usr/include/c++/6/bits/stl_tree.h ****       const_iterator
 888:/usr/include/c++/6/bits/stl_tree.h ****       begin() const _GLIBCXX_NOEXCEPT
 889:/usr/include/c++/6/bits/stl_tree.h ****       { return const_iterator(this->_M_impl._M_header._M_left); }
 890:/usr/include/c++/6/bits/stl_tree.h **** 
 891:/usr/include/c++/6/bits/stl_tree.h ****       iterator
 892:/usr/include/c++/6/bits/stl_tree.h ****       end() _GLIBCXX_NOEXCEPT
 893:/usr/include/c++/6/bits/stl_tree.h ****       { return iterator(&this->_M_impl._M_header); }
 894:/usr/include/c++/6/bits/stl_tree.h **** 
 895:/usr/include/c++/6/bits/stl_tree.h ****       const_iterator
 896:/usr/include/c++/6/bits/stl_tree.h ****       end() const _GLIBCXX_NOEXCEPT
 897:/usr/include/c++/6/bits/stl_tree.h ****       { return const_iterator(&this->_M_impl._M_header); }
 898:/usr/include/c++/6/bits/stl_tree.h **** 
 899:/usr/include/c++/6/bits/stl_tree.h ****       reverse_iterator
 900:/usr/include/c++/6/bits/stl_tree.h ****       rbegin() _GLIBCXX_NOEXCEPT
 901:/usr/include/c++/6/bits/stl_tree.h ****       { return reverse_iterator(end()); }
 902:/usr/include/c++/6/bits/stl_tree.h **** 
 903:/usr/include/c++/6/bits/stl_tree.h ****       const_reverse_iterator
 904:/usr/include/c++/6/bits/stl_tree.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 905:/usr/include/c++/6/bits/stl_tree.h ****       { return const_reverse_iterator(end()); }
 906:/usr/include/c++/6/bits/stl_tree.h **** 
 907:/usr/include/c++/6/bits/stl_tree.h ****       reverse_iterator
 908:/usr/include/c++/6/bits/stl_tree.h ****       rend() _GLIBCXX_NOEXCEPT
 909:/usr/include/c++/6/bits/stl_tree.h ****       { return reverse_iterator(begin()); }
 910:/usr/include/c++/6/bits/stl_tree.h **** 
 911:/usr/include/c++/6/bits/stl_tree.h ****       const_reverse_iterator
 912:/usr/include/c++/6/bits/stl_tree.h ****       rend() const _GLIBCXX_NOEXCEPT
 913:/usr/include/c++/6/bits/stl_tree.h ****       { return const_reverse_iterator(begin()); }
 914:/usr/include/c++/6/bits/stl_tree.h **** 
 915:/usr/include/c++/6/bits/stl_tree.h ****       bool
 916:/usr/include/c++/6/bits/stl_tree.h ****       empty() const _GLIBCXX_NOEXCEPT
 917:/usr/include/c++/6/bits/stl_tree.h ****       { return _M_impl._M_node_count == 0; }
 918:/usr/include/c++/6/bits/stl_tree.h **** 
 919:/usr/include/c++/6/bits/stl_tree.h ****       size_type
 920:/usr/include/c++/6/bits/stl_tree.h ****       size() const _GLIBCXX_NOEXCEPT 
 921:/usr/include/c++/6/bits/stl_tree.h ****       { return _M_impl._M_node_count; }
 922:/usr/include/c++/6/bits/stl_tree.h **** 
 923:/usr/include/c++/6/bits/stl_tree.h ****       size_type
 924:/usr/include/c++/6/bits/stl_tree.h ****       max_size() const _GLIBCXX_NOEXCEPT
 925:/usr/include/c++/6/bits/stl_tree.h ****       { return _Alloc_traits::max_size(_M_get_Node_allocator()); }
 926:/usr/include/c++/6/bits/stl_tree.h **** 
 927:/usr/include/c++/6/bits/stl_tree.h ****       void
 928:/usr/include/c++/6/bits/stl_tree.h ****       swap(_Rb_tree& __t)
 929:/usr/include/c++/6/bits/stl_tree.h ****       _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Compare>::value);
 930:/usr/include/c++/6/bits/stl_tree.h **** 
 931:/usr/include/c++/6/bits/stl_tree.h ****       // Insert/erase.
 932:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
 933:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _Arg>
 934:/usr/include/c++/6/bits/stl_tree.h ****         pair<iterator, bool>
 935:/usr/include/c++/6/bits/stl_tree.h ****         _M_insert_unique(_Arg&& __x);
 936:/usr/include/c++/6/bits/stl_tree.h **** 
 937:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _Arg>
 938:/usr/include/c++/6/bits/stl_tree.h ****         iterator
 939:/usr/include/c++/6/bits/stl_tree.h ****         _M_insert_equal(_Arg&& __x);
 940:/usr/include/c++/6/bits/stl_tree.h **** 
 941:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _Arg, typename _NodeGen>
GAS LISTING /tmp/ccvmoMuv.s 			page 141


 942:/usr/include/c++/6/bits/stl_tree.h ****         iterator
 943:/usr/include/c++/6/bits/stl_tree.h **** 	_M_insert_unique_(const_iterator __pos, _Arg&& __x, _NodeGen&);
 944:/usr/include/c++/6/bits/stl_tree.h **** 
 945:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _Arg>
 946:/usr/include/c++/6/bits/stl_tree.h **** 	iterator
 947:/usr/include/c++/6/bits/stl_tree.h **** 	_M_insert_unique_(const_iterator __pos, _Arg&& __x)
 948:/usr/include/c++/6/bits/stl_tree.h **** 	{
 949:/usr/include/c++/6/bits/stl_tree.h **** 	  _Alloc_node __an(*this);
 950:/usr/include/c++/6/bits/stl_tree.h **** 	  return _M_insert_unique_(__pos, std::forward<_Arg>(__x), __an);
 951:/usr/include/c++/6/bits/stl_tree.h **** 	}
 952:/usr/include/c++/6/bits/stl_tree.h **** 
 953:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _Arg, typename _NodeGen>
 954:/usr/include/c++/6/bits/stl_tree.h **** 	iterator
 955:/usr/include/c++/6/bits/stl_tree.h **** 	_M_insert_equal_(const_iterator __pos, _Arg&& __x, _NodeGen&);
 956:/usr/include/c++/6/bits/stl_tree.h **** 
 957:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _Arg>
 958:/usr/include/c++/6/bits/stl_tree.h **** 	iterator
 959:/usr/include/c++/6/bits/stl_tree.h **** 	_M_insert_equal_(const_iterator __pos, _Arg&& __x)
 960:/usr/include/c++/6/bits/stl_tree.h **** 	{
 961:/usr/include/c++/6/bits/stl_tree.h **** 	  _Alloc_node __an(*this);
 962:/usr/include/c++/6/bits/stl_tree.h **** 	  return _M_insert_equal_(__pos, std::forward<_Arg>(__x), __an);
 963:/usr/include/c++/6/bits/stl_tree.h **** 	}
 964:/usr/include/c++/6/bits/stl_tree.h **** 
 965:/usr/include/c++/6/bits/stl_tree.h ****       template<typename... _Args>
 966:/usr/include/c++/6/bits/stl_tree.h **** 	pair<iterator, bool>
 967:/usr/include/c++/6/bits/stl_tree.h **** 	_M_emplace_unique(_Args&&... __args);
 968:/usr/include/c++/6/bits/stl_tree.h **** 
 969:/usr/include/c++/6/bits/stl_tree.h ****       template<typename... _Args>
 970:/usr/include/c++/6/bits/stl_tree.h **** 	iterator
 971:/usr/include/c++/6/bits/stl_tree.h **** 	_M_emplace_equal(_Args&&... __args);
 972:/usr/include/c++/6/bits/stl_tree.h **** 
 973:/usr/include/c++/6/bits/stl_tree.h ****       template<typename... _Args>
 974:/usr/include/c++/6/bits/stl_tree.h **** 	iterator
 975:/usr/include/c++/6/bits/stl_tree.h **** 	_M_emplace_hint_unique(const_iterator __pos, _Args&&... __args);
 976:/usr/include/c++/6/bits/stl_tree.h **** 
 977:/usr/include/c++/6/bits/stl_tree.h ****       template<typename... _Args>
 978:/usr/include/c++/6/bits/stl_tree.h **** 	iterator
 979:/usr/include/c++/6/bits/stl_tree.h **** 	_M_emplace_hint_equal(const_iterator __pos, _Args&&... __args);
 980:/usr/include/c++/6/bits/stl_tree.h **** #else
 981:/usr/include/c++/6/bits/stl_tree.h ****       pair<iterator, bool>
 982:/usr/include/c++/6/bits/stl_tree.h ****       _M_insert_unique(const value_type& __x);
 983:/usr/include/c++/6/bits/stl_tree.h **** 
 984:/usr/include/c++/6/bits/stl_tree.h ****       iterator
 985:/usr/include/c++/6/bits/stl_tree.h ****       _M_insert_equal(const value_type& __x);
 986:/usr/include/c++/6/bits/stl_tree.h **** 
 987:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _NodeGen>
 988:/usr/include/c++/6/bits/stl_tree.h **** 	iterator
 989:/usr/include/c++/6/bits/stl_tree.h **** 	_M_insert_unique_(const_iterator __pos, const value_type& __x,
 990:/usr/include/c++/6/bits/stl_tree.h **** 			  _NodeGen&);
 991:/usr/include/c++/6/bits/stl_tree.h **** 
 992:/usr/include/c++/6/bits/stl_tree.h ****       iterator
 993:/usr/include/c++/6/bits/stl_tree.h ****       _M_insert_unique_(const_iterator __pos, const value_type& __x)
 994:/usr/include/c++/6/bits/stl_tree.h ****       {
 995:/usr/include/c++/6/bits/stl_tree.h **** 	_Alloc_node __an(*this);
 996:/usr/include/c++/6/bits/stl_tree.h **** 	return _M_insert_unique_(__pos, __x, __an);
 997:/usr/include/c++/6/bits/stl_tree.h ****       }
 998:/usr/include/c++/6/bits/stl_tree.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 142


 999:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _NodeGen>
1000:/usr/include/c++/6/bits/stl_tree.h **** 	iterator
1001:/usr/include/c++/6/bits/stl_tree.h **** 	_M_insert_equal_(const_iterator __pos, const value_type& __x,
1002:/usr/include/c++/6/bits/stl_tree.h **** 			 _NodeGen&);
1003:/usr/include/c++/6/bits/stl_tree.h ****       iterator
1004:/usr/include/c++/6/bits/stl_tree.h ****       _M_insert_equal_(const_iterator __pos, const value_type& __x)
1005:/usr/include/c++/6/bits/stl_tree.h ****       {
1006:/usr/include/c++/6/bits/stl_tree.h **** 	_Alloc_node __an(*this);
1007:/usr/include/c++/6/bits/stl_tree.h **** 	return _M_insert_equal_(__pos, __x, __an);
1008:/usr/include/c++/6/bits/stl_tree.h ****       }
1009:/usr/include/c++/6/bits/stl_tree.h **** #endif
1010:/usr/include/c++/6/bits/stl_tree.h **** 
1011:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _InputIterator>
1012:/usr/include/c++/6/bits/stl_tree.h ****         void
1013:/usr/include/c++/6/bits/stl_tree.h ****         _M_insert_unique(_InputIterator __first, _InputIterator __last);
1014:/usr/include/c++/6/bits/stl_tree.h **** 
1015:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _InputIterator>
1016:/usr/include/c++/6/bits/stl_tree.h ****         void
1017:/usr/include/c++/6/bits/stl_tree.h ****         _M_insert_equal(_InputIterator __first, _InputIterator __last);
1018:/usr/include/c++/6/bits/stl_tree.h **** 
1019:/usr/include/c++/6/bits/stl_tree.h ****     private:
1020:/usr/include/c++/6/bits/stl_tree.h ****       void
1021:/usr/include/c++/6/bits/stl_tree.h ****       _M_erase_aux(const_iterator __position);
1022:/usr/include/c++/6/bits/stl_tree.h **** 
1023:/usr/include/c++/6/bits/stl_tree.h ****       void
1024:/usr/include/c++/6/bits/stl_tree.h ****       _M_erase_aux(const_iterator __first, const_iterator __last);
1025:/usr/include/c++/6/bits/stl_tree.h **** 
1026:/usr/include/c++/6/bits/stl_tree.h ****     public:
1027:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
1028:/usr/include/c++/6/bits/stl_tree.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1029:/usr/include/c++/6/bits/stl_tree.h ****       // DR 130. Associative erase should return an iterator.
1030:/usr/include/c++/6/bits/stl_tree.h ****       _GLIBCXX_ABI_TAG_CXX11
1031:/usr/include/c++/6/bits/stl_tree.h ****       iterator
1032:/usr/include/c++/6/bits/stl_tree.h ****       erase(const_iterator __position)
1033:/usr/include/c++/6/bits/stl_tree.h ****       {
1034:/usr/include/c++/6/bits/stl_tree.h **** 	const_iterator __result = __position;
1035:/usr/include/c++/6/bits/stl_tree.h **** 	++__result;
1036:/usr/include/c++/6/bits/stl_tree.h **** 	_M_erase_aux(__position);
1037:/usr/include/c++/6/bits/stl_tree.h **** 	return __result._M_const_cast();
1038:/usr/include/c++/6/bits/stl_tree.h ****       }
1039:/usr/include/c++/6/bits/stl_tree.h **** 
1040:/usr/include/c++/6/bits/stl_tree.h ****       // LWG 2059.
1041:/usr/include/c++/6/bits/stl_tree.h ****       _GLIBCXX_ABI_TAG_CXX11
1042:/usr/include/c++/6/bits/stl_tree.h ****       iterator
1043:/usr/include/c++/6/bits/stl_tree.h ****       erase(iterator __position)
1044:/usr/include/c++/6/bits/stl_tree.h ****       {
1045:/usr/include/c++/6/bits/stl_tree.h **** 	iterator __result = __position;
1046:/usr/include/c++/6/bits/stl_tree.h **** 	++__result;
1047:/usr/include/c++/6/bits/stl_tree.h **** 	_M_erase_aux(__position);
1048:/usr/include/c++/6/bits/stl_tree.h **** 	return __result;
1049:/usr/include/c++/6/bits/stl_tree.h ****       }
1050:/usr/include/c++/6/bits/stl_tree.h **** #else
1051:/usr/include/c++/6/bits/stl_tree.h ****       void
1052:/usr/include/c++/6/bits/stl_tree.h ****       erase(iterator __position)
1053:/usr/include/c++/6/bits/stl_tree.h ****       { _M_erase_aux(__position); }
1054:/usr/include/c++/6/bits/stl_tree.h **** 
1055:/usr/include/c++/6/bits/stl_tree.h ****       void
GAS LISTING /tmp/ccvmoMuv.s 			page 143


1056:/usr/include/c++/6/bits/stl_tree.h ****       erase(const_iterator __position)
1057:/usr/include/c++/6/bits/stl_tree.h ****       { _M_erase_aux(__position); }
1058:/usr/include/c++/6/bits/stl_tree.h **** #endif
1059:/usr/include/c++/6/bits/stl_tree.h ****       size_type
1060:/usr/include/c++/6/bits/stl_tree.h ****       erase(const key_type& __x);
1061:/usr/include/c++/6/bits/stl_tree.h **** 
1062:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
1063:/usr/include/c++/6/bits/stl_tree.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1064:/usr/include/c++/6/bits/stl_tree.h ****       // DR 130. Associative erase should return an iterator.
1065:/usr/include/c++/6/bits/stl_tree.h ****       _GLIBCXX_ABI_TAG_CXX11
1066:/usr/include/c++/6/bits/stl_tree.h ****       iterator
1067:/usr/include/c++/6/bits/stl_tree.h ****       erase(const_iterator __first, const_iterator __last)
1068:/usr/include/c++/6/bits/stl_tree.h ****       {
1069:/usr/include/c++/6/bits/stl_tree.h **** 	_M_erase_aux(__first, __last);
1070:/usr/include/c++/6/bits/stl_tree.h **** 	return __last._M_const_cast();
1071:/usr/include/c++/6/bits/stl_tree.h ****       }
1072:/usr/include/c++/6/bits/stl_tree.h **** #else
1073:/usr/include/c++/6/bits/stl_tree.h ****       void
1074:/usr/include/c++/6/bits/stl_tree.h ****       erase(iterator __first, iterator __last)
1075:/usr/include/c++/6/bits/stl_tree.h ****       { _M_erase_aux(__first, __last); }
1076:/usr/include/c++/6/bits/stl_tree.h **** 
1077:/usr/include/c++/6/bits/stl_tree.h ****       void
1078:/usr/include/c++/6/bits/stl_tree.h ****       erase(const_iterator __first, const_iterator __last)
1079:/usr/include/c++/6/bits/stl_tree.h ****       { _M_erase_aux(__first, __last); }
1080:/usr/include/c++/6/bits/stl_tree.h **** #endif
1081:/usr/include/c++/6/bits/stl_tree.h ****       void
1082:/usr/include/c++/6/bits/stl_tree.h ****       erase(const key_type* __first, const key_type* __last);
1083:/usr/include/c++/6/bits/stl_tree.h **** 
1084:/usr/include/c++/6/bits/stl_tree.h ****       void
1085:/usr/include/c++/6/bits/stl_tree.h ****       clear() _GLIBCXX_NOEXCEPT
1086:/usr/include/c++/6/bits/stl_tree.h ****       {
1087:/usr/include/c++/6/bits/stl_tree.h ****         _M_erase(_M_begin());
1088:/usr/include/c++/6/bits/stl_tree.h **** 	_M_impl._M_reset();
1089:/usr/include/c++/6/bits/stl_tree.h ****       }
1090:/usr/include/c++/6/bits/stl_tree.h **** 
1091:/usr/include/c++/6/bits/stl_tree.h ****       // Set operations.
1092:/usr/include/c++/6/bits/stl_tree.h ****       iterator
1093:/usr/include/c++/6/bits/stl_tree.h ****       find(const key_type& __k);
1094:/usr/include/c++/6/bits/stl_tree.h **** 
1095:/usr/include/c++/6/bits/stl_tree.h ****       const_iterator
1096:/usr/include/c++/6/bits/stl_tree.h ****       find(const key_type& __k) const;
1097:/usr/include/c++/6/bits/stl_tree.h **** 
1098:/usr/include/c++/6/bits/stl_tree.h ****       size_type
1099:/usr/include/c++/6/bits/stl_tree.h ****       count(const key_type& __k) const;
1100:/usr/include/c++/6/bits/stl_tree.h **** 
1101:/usr/include/c++/6/bits/stl_tree.h ****       iterator
1102:/usr/include/c++/6/bits/stl_tree.h ****       lower_bound(const key_type& __k)
1103:/usr/include/c++/6/bits/stl_tree.h ****       { return _M_lower_bound(_M_begin(), _M_end(), __k); }
1104:/usr/include/c++/6/bits/stl_tree.h **** 
1105:/usr/include/c++/6/bits/stl_tree.h ****       const_iterator
1106:/usr/include/c++/6/bits/stl_tree.h ****       lower_bound(const key_type& __k) const
1107:/usr/include/c++/6/bits/stl_tree.h ****       { return _M_lower_bound(_M_begin(), _M_end(), __k); }
1108:/usr/include/c++/6/bits/stl_tree.h **** 
1109:/usr/include/c++/6/bits/stl_tree.h ****       iterator
1110:/usr/include/c++/6/bits/stl_tree.h ****       upper_bound(const key_type& __k)
1111:/usr/include/c++/6/bits/stl_tree.h ****       { return _M_upper_bound(_M_begin(), _M_end(), __k); }
1112:/usr/include/c++/6/bits/stl_tree.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 144


1113:/usr/include/c++/6/bits/stl_tree.h ****       const_iterator
1114:/usr/include/c++/6/bits/stl_tree.h ****       upper_bound(const key_type& __k) const
1115:/usr/include/c++/6/bits/stl_tree.h ****       { return _M_upper_bound(_M_begin(), _M_end(), __k); }
1116:/usr/include/c++/6/bits/stl_tree.h **** 
1117:/usr/include/c++/6/bits/stl_tree.h ****       pair<iterator, iterator>
1118:/usr/include/c++/6/bits/stl_tree.h ****       equal_range(const key_type& __k);
1119:/usr/include/c++/6/bits/stl_tree.h **** 
1120:/usr/include/c++/6/bits/stl_tree.h ****       pair<const_iterator, const_iterator>
1121:/usr/include/c++/6/bits/stl_tree.h ****       equal_range(const key_type& __k) const;
1122:/usr/include/c++/6/bits/stl_tree.h **** 
1123:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus > 201103L
1124:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _Kt,
1125:/usr/include/c++/6/bits/stl_tree.h **** 	       typename _Req =
1126:/usr/include/c++/6/bits/stl_tree.h **** 		 typename __has_is_transparent<_Compare, _Kt>::type>
1127:/usr/include/c++/6/bits/stl_tree.h **** 	iterator
1128:/usr/include/c++/6/bits/stl_tree.h **** 	_M_find_tr(const _Kt& __k)
1129:/usr/include/c++/6/bits/stl_tree.h **** 	{
1130:/usr/include/c++/6/bits/stl_tree.h **** 	  const _Rb_tree* __const_this = this;
1131:/usr/include/c++/6/bits/stl_tree.h **** 	  return __const_this->_M_find_tr(__k)._M_const_cast();
1132:/usr/include/c++/6/bits/stl_tree.h **** 	}
1133:/usr/include/c++/6/bits/stl_tree.h **** 
1134:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _Kt,
1135:/usr/include/c++/6/bits/stl_tree.h **** 	       typename _Req =
1136:/usr/include/c++/6/bits/stl_tree.h **** 		 typename __has_is_transparent<_Compare, _Kt>::type>
1137:/usr/include/c++/6/bits/stl_tree.h **** 	const_iterator
1138:/usr/include/c++/6/bits/stl_tree.h **** 	_M_find_tr(const _Kt& __k) const
1139:/usr/include/c++/6/bits/stl_tree.h **** 	{
1140:/usr/include/c++/6/bits/stl_tree.h **** 	  auto __j = _M_lower_bound_tr(__k);
1141:/usr/include/c++/6/bits/stl_tree.h **** 	  if (__j != end() && _M_impl._M_key_compare(__k, _S_key(__j._M_node)))
1142:/usr/include/c++/6/bits/stl_tree.h **** 	    __j = end();
1143:/usr/include/c++/6/bits/stl_tree.h **** 	  return __j;
1144:/usr/include/c++/6/bits/stl_tree.h **** 	}
1145:/usr/include/c++/6/bits/stl_tree.h **** 
1146:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _Kt,
1147:/usr/include/c++/6/bits/stl_tree.h **** 	       typename _Req =
1148:/usr/include/c++/6/bits/stl_tree.h **** 		 typename __has_is_transparent<_Compare, _Kt>::type>
1149:/usr/include/c++/6/bits/stl_tree.h **** 	size_type
1150:/usr/include/c++/6/bits/stl_tree.h **** 	_M_count_tr(const _Kt& __k) const
1151:/usr/include/c++/6/bits/stl_tree.h **** 	{
1152:/usr/include/c++/6/bits/stl_tree.h **** 	  auto __p = _M_equal_range_tr(__k);
1153:/usr/include/c++/6/bits/stl_tree.h **** 	  return std::distance(__p.first, __p.second);
1154:/usr/include/c++/6/bits/stl_tree.h **** 	}
1155:/usr/include/c++/6/bits/stl_tree.h **** 
1156:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _Kt,
1157:/usr/include/c++/6/bits/stl_tree.h **** 	       typename _Req =
1158:/usr/include/c++/6/bits/stl_tree.h **** 		 typename __has_is_transparent<_Compare, _Kt>::type>
1159:/usr/include/c++/6/bits/stl_tree.h **** 	iterator
1160:/usr/include/c++/6/bits/stl_tree.h **** 	_M_lower_bound_tr(const _Kt& __k)
1161:/usr/include/c++/6/bits/stl_tree.h **** 	{
1162:/usr/include/c++/6/bits/stl_tree.h **** 	  const _Rb_tree* __const_this = this;
1163:/usr/include/c++/6/bits/stl_tree.h **** 	  return __const_this->_M_lower_bound_tr(__k)._M_const_cast();
1164:/usr/include/c++/6/bits/stl_tree.h **** 	}
1165:/usr/include/c++/6/bits/stl_tree.h **** 
1166:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _Kt,
1167:/usr/include/c++/6/bits/stl_tree.h **** 	       typename _Req =
1168:/usr/include/c++/6/bits/stl_tree.h **** 		 typename __has_is_transparent<_Compare, _Kt>::type>
1169:/usr/include/c++/6/bits/stl_tree.h **** 	const_iterator
GAS LISTING /tmp/ccvmoMuv.s 			page 145


1170:/usr/include/c++/6/bits/stl_tree.h **** 	_M_lower_bound_tr(const _Kt& __k) const
1171:/usr/include/c++/6/bits/stl_tree.h **** 	{
1172:/usr/include/c++/6/bits/stl_tree.h **** 	  auto __x = _M_begin();
1173:/usr/include/c++/6/bits/stl_tree.h **** 	  auto __y = _M_end();
1174:/usr/include/c++/6/bits/stl_tree.h **** 	  while (__x != 0)
1175:/usr/include/c++/6/bits/stl_tree.h **** 	    if (!_M_impl._M_key_compare(_S_key(__x), __k))
1176:/usr/include/c++/6/bits/stl_tree.h **** 	      {
1177:/usr/include/c++/6/bits/stl_tree.h **** 		__y = __x;
1178:/usr/include/c++/6/bits/stl_tree.h **** 		__x = _S_left(__x);
1179:/usr/include/c++/6/bits/stl_tree.h **** 	      }
1180:/usr/include/c++/6/bits/stl_tree.h **** 	    else
1181:/usr/include/c++/6/bits/stl_tree.h **** 	      __x = _S_right(__x);
1182:/usr/include/c++/6/bits/stl_tree.h **** 	  return const_iterator(__y);
1183:/usr/include/c++/6/bits/stl_tree.h **** 	}
1184:/usr/include/c++/6/bits/stl_tree.h **** 
1185:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _Kt,
1186:/usr/include/c++/6/bits/stl_tree.h **** 	       typename _Req =
1187:/usr/include/c++/6/bits/stl_tree.h **** 		 typename __has_is_transparent<_Compare, _Kt>::type>
1188:/usr/include/c++/6/bits/stl_tree.h **** 	iterator
1189:/usr/include/c++/6/bits/stl_tree.h **** 	_M_upper_bound_tr(const _Kt& __k)
1190:/usr/include/c++/6/bits/stl_tree.h **** 	{
1191:/usr/include/c++/6/bits/stl_tree.h **** 	  const _Rb_tree* __const_this = this;
1192:/usr/include/c++/6/bits/stl_tree.h **** 	  return __const_this->_M_upper_bound_tr(__k)._M_const_cast();
1193:/usr/include/c++/6/bits/stl_tree.h **** 	}
1194:/usr/include/c++/6/bits/stl_tree.h **** 
1195:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _Kt,
1196:/usr/include/c++/6/bits/stl_tree.h **** 	       typename _Req =
1197:/usr/include/c++/6/bits/stl_tree.h **** 		 typename __has_is_transparent<_Compare, _Kt>::type>
1198:/usr/include/c++/6/bits/stl_tree.h **** 	const_iterator
1199:/usr/include/c++/6/bits/stl_tree.h **** 	_M_upper_bound_tr(const _Kt& __k) const
1200:/usr/include/c++/6/bits/stl_tree.h **** 	{
1201:/usr/include/c++/6/bits/stl_tree.h **** 	  auto __x = _M_begin();
1202:/usr/include/c++/6/bits/stl_tree.h **** 	  auto __y = _M_end();
1203:/usr/include/c++/6/bits/stl_tree.h **** 	  while (__x != 0)
1204:/usr/include/c++/6/bits/stl_tree.h **** 	    if (_M_impl._M_key_compare(__k, _S_key(__x)))
1205:/usr/include/c++/6/bits/stl_tree.h **** 	      {
1206:/usr/include/c++/6/bits/stl_tree.h **** 		__y = __x;
1207:/usr/include/c++/6/bits/stl_tree.h **** 		__x = _S_left(__x);
1208:/usr/include/c++/6/bits/stl_tree.h **** 	      }
1209:/usr/include/c++/6/bits/stl_tree.h **** 	    else
1210:/usr/include/c++/6/bits/stl_tree.h **** 	      __x = _S_right(__x);
1211:/usr/include/c++/6/bits/stl_tree.h **** 	  return const_iterator(__y);
1212:/usr/include/c++/6/bits/stl_tree.h **** 	}
1213:/usr/include/c++/6/bits/stl_tree.h **** 
1214:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _Kt,
1215:/usr/include/c++/6/bits/stl_tree.h **** 	       typename _Req =
1216:/usr/include/c++/6/bits/stl_tree.h **** 		 typename __has_is_transparent<_Compare, _Kt>::type>
1217:/usr/include/c++/6/bits/stl_tree.h **** 	pair<iterator, iterator>
1218:/usr/include/c++/6/bits/stl_tree.h **** 	_M_equal_range_tr(const _Kt& __k)
1219:/usr/include/c++/6/bits/stl_tree.h **** 	{
1220:/usr/include/c++/6/bits/stl_tree.h **** 	  const _Rb_tree* __const_this = this;
1221:/usr/include/c++/6/bits/stl_tree.h **** 	  auto __ret = __const_this->_M_equal_range_tr(__k);
1222:/usr/include/c++/6/bits/stl_tree.h **** 	  return { __ret.first._M_const_cast(), __ret.second._M_const_cast() };
1223:/usr/include/c++/6/bits/stl_tree.h **** 	}
1224:/usr/include/c++/6/bits/stl_tree.h **** 
1225:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _Kt,
1226:/usr/include/c++/6/bits/stl_tree.h **** 	       typename _Req =
GAS LISTING /tmp/ccvmoMuv.s 			page 146


1227:/usr/include/c++/6/bits/stl_tree.h **** 		 typename __has_is_transparent<_Compare, _Kt>::type>
1228:/usr/include/c++/6/bits/stl_tree.h **** 	pair<const_iterator, const_iterator>
1229:/usr/include/c++/6/bits/stl_tree.h **** 	_M_equal_range_tr(const _Kt& __k) const
1230:/usr/include/c++/6/bits/stl_tree.h **** 	{
1231:/usr/include/c++/6/bits/stl_tree.h **** 	  auto __low = _M_lower_bound_tr(__k);
1232:/usr/include/c++/6/bits/stl_tree.h **** 	  auto __high = __low;
1233:/usr/include/c++/6/bits/stl_tree.h **** 	  auto& __cmp = _M_impl._M_key_compare;
1234:/usr/include/c++/6/bits/stl_tree.h **** 	  while (__high != end() && !__cmp(__k, _S_key(__high._M_node)))
1235:/usr/include/c++/6/bits/stl_tree.h **** 	    ++__high;
1236:/usr/include/c++/6/bits/stl_tree.h **** 	  return { __low, __high };
1237:/usr/include/c++/6/bits/stl_tree.h **** 	}
1238:/usr/include/c++/6/bits/stl_tree.h **** #endif
1239:/usr/include/c++/6/bits/stl_tree.h **** 
1240:/usr/include/c++/6/bits/stl_tree.h ****       // Debugging.
1241:/usr/include/c++/6/bits/stl_tree.h ****       bool
1242:/usr/include/c++/6/bits/stl_tree.h ****       __rb_verify() const;
1243:/usr/include/c++/6/bits/stl_tree.h **** 
1244:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
1245:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree&
1246:/usr/include/c++/6/bits/stl_tree.h ****       operator=(_Rb_tree&&)
1247:/usr/include/c++/6/bits/stl_tree.h ****       noexcept(_Alloc_traits::_S_nothrow_move()
1248:/usr/include/c++/6/bits/stl_tree.h **** 	       && is_nothrow_move_assignable<_Compare>::value);
1249:/usr/include/c++/6/bits/stl_tree.h **** 
1250:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _Iterator>
1251:/usr/include/c++/6/bits/stl_tree.h **** 	void
1252:/usr/include/c++/6/bits/stl_tree.h **** 	_M_assign_unique(_Iterator, _Iterator);
1253:/usr/include/c++/6/bits/stl_tree.h **** 
1254:/usr/include/c++/6/bits/stl_tree.h ****       template<typename _Iterator>
1255:/usr/include/c++/6/bits/stl_tree.h **** 	void
1256:/usr/include/c++/6/bits/stl_tree.h **** 	_M_assign_equal(_Iterator, _Iterator);
1257:/usr/include/c++/6/bits/stl_tree.h **** 
1258:/usr/include/c++/6/bits/stl_tree.h ****     private:
1259:/usr/include/c++/6/bits/stl_tree.h ****       // Move elements from container with equal allocator.
1260:/usr/include/c++/6/bits/stl_tree.h ****       void
1261:/usr/include/c++/6/bits/stl_tree.h ****       _M_move_data(_Rb_tree&, std::true_type);
1262:/usr/include/c++/6/bits/stl_tree.h **** 
1263:/usr/include/c++/6/bits/stl_tree.h ****       // Move elements from container with possibly non-equal allocator,
1264:/usr/include/c++/6/bits/stl_tree.h ****       // which might result in a copy not a move.
1265:/usr/include/c++/6/bits/stl_tree.h ****       void
1266:/usr/include/c++/6/bits/stl_tree.h ****       _M_move_data(_Rb_tree&, std::false_type);
1267:/usr/include/c++/6/bits/stl_tree.h **** 
1268:/usr/include/c++/6/bits/stl_tree.h ****       // Move assignment from container with equal allocator.
1269:/usr/include/c++/6/bits/stl_tree.h ****       void
1270:/usr/include/c++/6/bits/stl_tree.h ****       _M_move_assign(_Rb_tree&, std::true_type);
1271:/usr/include/c++/6/bits/stl_tree.h **** 
1272:/usr/include/c++/6/bits/stl_tree.h ****       // Move assignment from container with possibly non-equal allocator,
1273:/usr/include/c++/6/bits/stl_tree.h ****       // which might result in a copy not a move.
1274:/usr/include/c++/6/bits/stl_tree.h ****       void
1275:/usr/include/c++/6/bits/stl_tree.h ****       _M_move_assign(_Rb_tree&, std::false_type);
1276:/usr/include/c++/6/bits/stl_tree.h **** #endif
1277:/usr/include/c++/6/bits/stl_tree.h ****     };
1278:/usr/include/c++/6/bits/stl_tree.h **** 
1279:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1280:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1281:/usr/include/c++/6/bits/stl_tree.h ****     inline bool
1282:/usr/include/c++/6/bits/stl_tree.h ****     operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
1283:/usr/include/c++/6/bits/stl_tree.h **** 	       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
GAS LISTING /tmp/ccvmoMuv.s 			page 147


1284:/usr/include/c++/6/bits/stl_tree.h ****     {
1285:/usr/include/c++/6/bits/stl_tree.h ****       return __x.size() == __y.size()
1286:/usr/include/c++/6/bits/stl_tree.h **** 	     && std::equal(__x.begin(), __x.end(), __y.begin());
1287:/usr/include/c++/6/bits/stl_tree.h ****     }
1288:/usr/include/c++/6/bits/stl_tree.h **** 
1289:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1290:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1291:/usr/include/c++/6/bits/stl_tree.h ****     inline bool
1292:/usr/include/c++/6/bits/stl_tree.h ****     operator<(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
1293:/usr/include/c++/6/bits/stl_tree.h **** 	      const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
1294:/usr/include/c++/6/bits/stl_tree.h ****     {
1295:/usr/include/c++/6/bits/stl_tree.h ****       return std::lexicographical_compare(__x.begin(), __x.end(), 
1296:/usr/include/c++/6/bits/stl_tree.h **** 					  __y.begin(), __y.end());
1297:/usr/include/c++/6/bits/stl_tree.h ****     }
1298:/usr/include/c++/6/bits/stl_tree.h **** 
1299:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1300:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1301:/usr/include/c++/6/bits/stl_tree.h ****     inline bool
1302:/usr/include/c++/6/bits/stl_tree.h ****     operator!=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
1303:/usr/include/c++/6/bits/stl_tree.h **** 	       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
1304:/usr/include/c++/6/bits/stl_tree.h ****     { return !(__x == __y); }
1305:/usr/include/c++/6/bits/stl_tree.h **** 
1306:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1307:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1308:/usr/include/c++/6/bits/stl_tree.h ****     inline bool
1309:/usr/include/c++/6/bits/stl_tree.h ****     operator>(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
1310:/usr/include/c++/6/bits/stl_tree.h **** 	      const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
1311:/usr/include/c++/6/bits/stl_tree.h ****     { return __y < __x; }
1312:/usr/include/c++/6/bits/stl_tree.h **** 
1313:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1314:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1315:/usr/include/c++/6/bits/stl_tree.h ****     inline bool
1316:/usr/include/c++/6/bits/stl_tree.h ****     operator<=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
1317:/usr/include/c++/6/bits/stl_tree.h **** 	       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
1318:/usr/include/c++/6/bits/stl_tree.h ****     { return !(__y < __x); }
1319:/usr/include/c++/6/bits/stl_tree.h **** 
1320:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1321:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1322:/usr/include/c++/6/bits/stl_tree.h ****     inline bool
1323:/usr/include/c++/6/bits/stl_tree.h ****     operator>=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
1324:/usr/include/c++/6/bits/stl_tree.h **** 	       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
1325:/usr/include/c++/6/bits/stl_tree.h ****     { return !(__x < __y); }
1326:/usr/include/c++/6/bits/stl_tree.h **** 
1327:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1328:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1329:/usr/include/c++/6/bits/stl_tree.h ****     inline void
1330:/usr/include/c++/6/bits/stl_tree.h ****     swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
1331:/usr/include/c++/6/bits/stl_tree.h **** 	 _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
1332:/usr/include/c++/6/bits/stl_tree.h ****     { __x.swap(__y); }
1333:/usr/include/c++/6/bits/stl_tree.h **** 
1334:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
1335:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1336:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1337:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1338:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a)
1339:/usr/include/c++/6/bits/stl_tree.h ****     : _M_impl(__x._M_impl._M_key_compare, std::move(__a))
1340:/usr/include/c++/6/bits/stl_tree.h ****     {
GAS LISTING /tmp/ccvmoMuv.s 			page 148


1341:/usr/include/c++/6/bits/stl_tree.h ****       using __eq = typename _Alloc_traits::is_always_equal;
1342:/usr/include/c++/6/bits/stl_tree.h ****       if (__x._M_root() != nullptr)
1343:/usr/include/c++/6/bits/stl_tree.h **** 	_M_move_data(__x, __eq());
1344:/usr/include/c++/6/bits/stl_tree.h ****     }
1345:/usr/include/c++/6/bits/stl_tree.h **** 
1346:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1347:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1348:/usr/include/c++/6/bits/stl_tree.h ****     void
1349:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1350:/usr/include/c++/6/bits/stl_tree.h ****     _M_move_data(_Rb_tree& __x, std::true_type)
1351:/usr/include/c++/6/bits/stl_tree.h ****     {
1352:/usr/include/c++/6/bits/stl_tree.h ****       _M_root() = __x._M_root();
1353:/usr/include/c++/6/bits/stl_tree.h ****       _M_leftmost() = __x._M_leftmost();
1354:/usr/include/c++/6/bits/stl_tree.h ****       _M_rightmost() = __x._M_rightmost();
1355:/usr/include/c++/6/bits/stl_tree.h ****       _M_root()->_M_parent = _M_end();
1356:/usr/include/c++/6/bits/stl_tree.h **** 
1357:/usr/include/c++/6/bits/stl_tree.h ****       __x._M_root() = 0;
1358:/usr/include/c++/6/bits/stl_tree.h ****       __x._M_leftmost() = __x._M_end();
1359:/usr/include/c++/6/bits/stl_tree.h ****       __x._M_rightmost() = __x._M_end();
1360:/usr/include/c++/6/bits/stl_tree.h **** 
1361:/usr/include/c++/6/bits/stl_tree.h ****       this->_M_impl._M_node_count = __x._M_impl._M_node_count;
1362:/usr/include/c++/6/bits/stl_tree.h ****       __x._M_impl._M_node_count = 0;
1363:/usr/include/c++/6/bits/stl_tree.h ****     }
1364:/usr/include/c++/6/bits/stl_tree.h **** 
1365:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1366:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1367:/usr/include/c++/6/bits/stl_tree.h ****     void
1368:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1369:/usr/include/c++/6/bits/stl_tree.h ****     _M_move_data(_Rb_tree& __x, std::false_type)
1370:/usr/include/c++/6/bits/stl_tree.h ****     {
1371:/usr/include/c++/6/bits/stl_tree.h ****       if (_M_get_Node_allocator() == __x._M_get_Node_allocator())
1372:/usr/include/c++/6/bits/stl_tree.h **** 	  _M_move_data(__x, std::true_type());
1373:/usr/include/c++/6/bits/stl_tree.h ****       else
1374:/usr/include/c++/6/bits/stl_tree.h **** 	{
1375:/usr/include/c++/6/bits/stl_tree.h **** 	  _Alloc_node __an(*this);
1376:/usr/include/c++/6/bits/stl_tree.h **** 	  auto __lbd =
1377:/usr/include/c++/6/bits/stl_tree.h **** 	    [&__an](const value_type& __cval)
1378:/usr/include/c++/6/bits/stl_tree.h **** 	    {
1379:/usr/include/c++/6/bits/stl_tree.h **** 	      auto& __val = const_cast<value_type&>(__cval);
1380:/usr/include/c++/6/bits/stl_tree.h **** 	      return __an(std::move_if_noexcept(__val));
1381:/usr/include/c++/6/bits/stl_tree.h **** 	    };
1382:/usr/include/c++/6/bits/stl_tree.h **** 	  _M_root() = _M_copy(__x._M_begin(), _M_end(), __lbd);
1383:/usr/include/c++/6/bits/stl_tree.h **** 	  _M_leftmost() = _S_minimum(_M_root());
1384:/usr/include/c++/6/bits/stl_tree.h **** 	  _M_rightmost() = _S_maximum(_M_root());
1385:/usr/include/c++/6/bits/stl_tree.h **** 	  _M_impl._M_node_count = __x._M_impl._M_node_count;
1386:/usr/include/c++/6/bits/stl_tree.h **** 	}
1387:/usr/include/c++/6/bits/stl_tree.h ****     }
1388:/usr/include/c++/6/bits/stl_tree.h **** 
1389:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1390:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1391:/usr/include/c++/6/bits/stl_tree.h ****     inline void
1392:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1393:/usr/include/c++/6/bits/stl_tree.h ****     _M_move_assign(_Rb_tree& __x, true_type)
1394:/usr/include/c++/6/bits/stl_tree.h ****     {
1395:/usr/include/c++/6/bits/stl_tree.h ****       clear();
1396:/usr/include/c++/6/bits/stl_tree.h ****       if (__x._M_root() != nullptr)
1397:/usr/include/c++/6/bits/stl_tree.h **** 	_M_move_data(__x, std::true_type());
GAS LISTING /tmp/ccvmoMuv.s 			page 149


1398:/usr/include/c++/6/bits/stl_tree.h ****       std::__alloc_on_move(_M_get_Node_allocator(),
1399:/usr/include/c++/6/bits/stl_tree.h **** 			   __x._M_get_Node_allocator());
1400:/usr/include/c++/6/bits/stl_tree.h ****     }
1401:/usr/include/c++/6/bits/stl_tree.h **** 
1402:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1403:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1404:/usr/include/c++/6/bits/stl_tree.h ****     void
1405:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1406:/usr/include/c++/6/bits/stl_tree.h ****     _M_move_assign(_Rb_tree& __x, false_type)
1407:/usr/include/c++/6/bits/stl_tree.h ****     {
1408:/usr/include/c++/6/bits/stl_tree.h ****       if (_M_get_Node_allocator() == __x._M_get_Node_allocator())
1409:/usr/include/c++/6/bits/stl_tree.h **** 	return _M_move_assign(__x, true_type{});
1410:/usr/include/c++/6/bits/stl_tree.h **** 
1411:/usr/include/c++/6/bits/stl_tree.h ****       // Try to move each node reusing existing nodes and copying __x nodes
1412:/usr/include/c++/6/bits/stl_tree.h ****       // structure.
1413:/usr/include/c++/6/bits/stl_tree.h ****       _Reuse_or_alloc_node __roan(*this);
1414:/usr/include/c++/6/bits/stl_tree.h ****       _M_impl._M_reset();
1415:/usr/include/c++/6/bits/stl_tree.h ****       if (__x._M_root() != nullptr)
1416:/usr/include/c++/6/bits/stl_tree.h **** 	{
1417:/usr/include/c++/6/bits/stl_tree.h **** 	  auto __lbd =
1418:/usr/include/c++/6/bits/stl_tree.h **** 	    [&__roan](const value_type& __cval)
1419:/usr/include/c++/6/bits/stl_tree.h **** 	    {
1420:/usr/include/c++/6/bits/stl_tree.h **** 	      auto& __val = const_cast<value_type&>(__cval);
1421:/usr/include/c++/6/bits/stl_tree.h **** 	      return __roan(std::move_if_noexcept(__val));
1422:/usr/include/c++/6/bits/stl_tree.h **** 	    };
1423:/usr/include/c++/6/bits/stl_tree.h **** 	  _M_root() = _M_copy(__x._M_begin(), _M_end(), __lbd);
1424:/usr/include/c++/6/bits/stl_tree.h **** 	  _M_leftmost() = _S_minimum(_M_root());
1425:/usr/include/c++/6/bits/stl_tree.h **** 	  _M_rightmost() = _S_maximum(_M_root());
1426:/usr/include/c++/6/bits/stl_tree.h **** 	  _M_impl._M_node_count = __x._M_impl._M_node_count;
1427:/usr/include/c++/6/bits/stl_tree.h **** 	  __x.clear();
1428:/usr/include/c++/6/bits/stl_tree.h **** 	}
1429:/usr/include/c++/6/bits/stl_tree.h ****     }
1430:/usr/include/c++/6/bits/stl_tree.h **** 
1431:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1432:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1433:/usr/include/c++/6/bits/stl_tree.h ****     inline _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
1434:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1435:/usr/include/c++/6/bits/stl_tree.h ****     operator=(_Rb_tree&& __x)
1436:/usr/include/c++/6/bits/stl_tree.h ****     noexcept(_Alloc_traits::_S_nothrow_move()
1437:/usr/include/c++/6/bits/stl_tree.h **** 	     && is_nothrow_move_assignable<_Compare>::value)
1438:/usr/include/c++/6/bits/stl_tree.h ****     {
1439:/usr/include/c++/6/bits/stl_tree.h ****       _M_impl._M_key_compare = __x._M_impl._M_key_compare;
1440:/usr/include/c++/6/bits/stl_tree.h ****       constexpr bool __move_storage =
1441:/usr/include/c++/6/bits/stl_tree.h **** 	  _Alloc_traits::_S_propagate_on_move_assign()
1442:/usr/include/c++/6/bits/stl_tree.h **** 	  || _Alloc_traits::_S_always_equal();
1443:/usr/include/c++/6/bits/stl_tree.h ****       _M_move_assign(__x, __bool_constant<__move_storage>());
1444:/usr/include/c++/6/bits/stl_tree.h ****       return *this;
1445:/usr/include/c++/6/bits/stl_tree.h ****     }
1446:/usr/include/c++/6/bits/stl_tree.h **** 
1447:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1448:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1449:/usr/include/c++/6/bits/stl_tree.h ****     template<typename _Iterator>
1450:/usr/include/c++/6/bits/stl_tree.h ****       void
1451:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1452:/usr/include/c++/6/bits/stl_tree.h ****       _M_assign_unique(_Iterator __first, _Iterator __last)
1453:/usr/include/c++/6/bits/stl_tree.h ****       {
1454:/usr/include/c++/6/bits/stl_tree.h **** 	_Reuse_or_alloc_node __roan(*this);
GAS LISTING /tmp/ccvmoMuv.s 			page 150


1455:/usr/include/c++/6/bits/stl_tree.h **** 	_M_impl._M_reset();
1456:/usr/include/c++/6/bits/stl_tree.h **** 	for (; __first != __last; ++__first)
1457:/usr/include/c++/6/bits/stl_tree.h **** 	  _M_insert_unique_(end(), *__first, __roan);
1458:/usr/include/c++/6/bits/stl_tree.h ****       }
1459:/usr/include/c++/6/bits/stl_tree.h **** 
1460:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1461:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1462:/usr/include/c++/6/bits/stl_tree.h ****     template<typename _Iterator>
1463:/usr/include/c++/6/bits/stl_tree.h ****       void
1464:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1465:/usr/include/c++/6/bits/stl_tree.h ****       _M_assign_equal(_Iterator __first, _Iterator __last)
1466:/usr/include/c++/6/bits/stl_tree.h ****       {
1467:/usr/include/c++/6/bits/stl_tree.h **** 	_Reuse_or_alloc_node __roan(*this);
1468:/usr/include/c++/6/bits/stl_tree.h **** 	_M_impl._M_reset();
1469:/usr/include/c++/6/bits/stl_tree.h **** 	for (; __first != __last; ++__first)
1470:/usr/include/c++/6/bits/stl_tree.h **** 	  _M_insert_equal_(end(), *__first, __roan);
1471:/usr/include/c++/6/bits/stl_tree.h ****       }
1472:/usr/include/c++/6/bits/stl_tree.h **** #endif
1473:/usr/include/c++/6/bits/stl_tree.h **** 
1474:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1475:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1476:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
1477:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1478:/usr/include/c++/6/bits/stl_tree.h ****     operator=(const _Rb_tree& __x)
1479:/usr/include/c++/6/bits/stl_tree.h ****     {
1480:/usr/include/c++/6/bits/stl_tree.h ****       if (this != &__x)
1481:/usr/include/c++/6/bits/stl_tree.h **** 	{
1482:/usr/include/c++/6/bits/stl_tree.h **** 	  // Note that _Key may be a constant type.
1483:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
1484:/usr/include/c++/6/bits/stl_tree.h **** 	  if (_Alloc_traits::_S_propagate_on_copy_assign())
1485:/usr/include/c++/6/bits/stl_tree.h **** 	    {
1486:/usr/include/c++/6/bits/stl_tree.h **** 	      auto& __this_alloc = this->_M_get_Node_allocator();
1487:/usr/include/c++/6/bits/stl_tree.h **** 	      auto& __that_alloc = __x._M_get_Node_allocator();
1488:/usr/include/c++/6/bits/stl_tree.h **** 	      if (!_Alloc_traits::_S_always_equal()
1489:/usr/include/c++/6/bits/stl_tree.h **** 		  && __this_alloc != __that_alloc)
1490:/usr/include/c++/6/bits/stl_tree.h **** 		{
1491:/usr/include/c++/6/bits/stl_tree.h **** 		  // Replacement allocator cannot free existing storage, we need
1492:/usr/include/c++/6/bits/stl_tree.h **** 		  // to erase nodes first.
1493:/usr/include/c++/6/bits/stl_tree.h **** 		  clear();
1494:/usr/include/c++/6/bits/stl_tree.h **** 		  std::__alloc_on_copy(__this_alloc, __that_alloc);
1495:/usr/include/c++/6/bits/stl_tree.h **** 		}
1496:/usr/include/c++/6/bits/stl_tree.h **** 	    }
1497:/usr/include/c++/6/bits/stl_tree.h **** #endif
1498:/usr/include/c++/6/bits/stl_tree.h **** 
1499:/usr/include/c++/6/bits/stl_tree.h **** 	  _Reuse_or_alloc_node __roan(*this);
1500:/usr/include/c++/6/bits/stl_tree.h **** 	  _M_impl._M_reset();
1501:/usr/include/c++/6/bits/stl_tree.h **** 	  _M_impl._M_key_compare = __x._M_impl._M_key_compare;
1502:/usr/include/c++/6/bits/stl_tree.h **** 	  if (__x._M_root() != 0)
1503:/usr/include/c++/6/bits/stl_tree.h **** 	    {
1504:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_root() = _M_copy(__x._M_begin(), _M_end(), __roan);
1505:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_leftmost() = _S_minimum(_M_root());
1506:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_rightmost() = _S_maximum(_M_root());
1507:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_impl._M_node_count = __x._M_impl._M_node_count;
1508:/usr/include/c++/6/bits/stl_tree.h **** 	    }
1509:/usr/include/c++/6/bits/stl_tree.h **** 	}
1510:/usr/include/c++/6/bits/stl_tree.h **** 
1511:/usr/include/c++/6/bits/stl_tree.h ****       return *this;
GAS LISTING /tmp/ccvmoMuv.s 			page 151


1512:/usr/include/c++/6/bits/stl_tree.h ****     }
1513:/usr/include/c++/6/bits/stl_tree.h **** 
1514:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1515:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1516:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
1517:/usr/include/c++/6/bits/stl_tree.h ****     template<typename _Arg, typename _NodeGen>
1518:/usr/include/c++/6/bits/stl_tree.h **** #else
1519:/usr/include/c++/6/bits/stl_tree.h ****     template<typename _NodeGen>
1520:/usr/include/c++/6/bits/stl_tree.h **** #endif
1521:/usr/include/c++/6/bits/stl_tree.h ****       typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
1522:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1523:/usr/include/c++/6/bits/stl_tree.h ****       _M_insert_(_Base_ptr __x, _Base_ptr __p,
1524:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
1525:/usr/include/c++/6/bits/stl_tree.h **** 		 _Arg&& __v,
1526:/usr/include/c++/6/bits/stl_tree.h **** #else
1527:/usr/include/c++/6/bits/stl_tree.h **** 		 const _Val& __v,
1528:/usr/include/c++/6/bits/stl_tree.h **** #endif
1529:/usr/include/c++/6/bits/stl_tree.h **** 		 _NodeGen& __node_gen)
1530:/usr/include/c++/6/bits/stl_tree.h ****       {
1531:/usr/include/c++/6/bits/stl_tree.h **** 	bool __insert_left = (__x != 0 || __p == _M_end()
1532:/usr/include/c++/6/bits/stl_tree.h **** 			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
1533:/usr/include/c++/6/bits/stl_tree.h **** 							_S_key(__p)));
1534:/usr/include/c++/6/bits/stl_tree.h **** 
1535:/usr/include/c++/6/bits/stl_tree.h **** 	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
1536:/usr/include/c++/6/bits/stl_tree.h **** 
1537:/usr/include/c++/6/bits/stl_tree.h **** 	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
1538:/usr/include/c++/6/bits/stl_tree.h **** 				      this->_M_impl._M_header);
1539:/usr/include/c++/6/bits/stl_tree.h **** 	++_M_impl._M_node_count;
1540:/usr/include/c++/6/bits/stl_tree.h **** 	return iterator(__z);
1541:/usr/include/c++/6/bits/stl_tree.h ****       }
1542:/usr/include/c++/6/bits/stl_tree.h **** 
1543:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1544:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1545:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
1546:/usr/include/c++/6/bits/stl_tree.h ****     template<typename _Arg>
1547:/usr/include/c++/6/bits/stl_tree.h **** #endif
1548:/usr/include/c++/6/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
1549:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1550:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
1551:/usr/include/c++/6/bits/stl_tree.h ****     _M_insert_lower(_Base_ptr __p, _Arg&& __v)
1552:/usr/include/c++/6/bits/stl_tree.h **** #else
1553:/usr/include/c++/6/bits/stl_tree.h ****     _M_insert_lower(_Base_ptr __p, const _Val& __v)
1554:/usr/include/c++/6/bits/stl_tree.h **** #endif
1555:/usr/include/c++/6/bits/stl_tree.h ****     {
1556:/usr/include/c++/6/bits/stl_tree.h ****       bool __insert_left = (__p == _M_end()
1557:/usr/include/c++/6/bits/stl_tree.h **** 			    || !_M_impl._M_key_compare(_S_key(__p),
1558:/usr/include/c++/6/bits/stl_tree.h **** 						       _KeyOfValue()(__v)));
1559:/usr/include/c++/6/bits/stl_tree.h **** 
1560:/usr/include/c++/6/bits/stl_tree.h ****       _Link_type __z = _M_create_node(_GLIBCXX_FORWARD(_Arg, __v));
1561:/usr/include/c++/6/bits/stl_tree.h **** 
1562:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
1563:/usr/include/c++/6/bits/stl_tree.h **** 				    this->_M_impl._M_header);
1564:/usr/include/c++/6/bits/stl_tree.h ****       ++_M_impl._M_node_count;
1565:/usr/include/c++/6/bits/stl_tree.h ****       return iterator(__z);
1566:/usr/include/c++/6/bits/stl_tree.h ****     }
1567:/usr/include/c++/6/bits/stl_tree.h **** 
1568:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
GAS LISTING /tmp/ccvmoMuv.s 			page 152


1569:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1570:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
1571:/usr/include/c++/6/bits/stl_tree.h ****     template<typename _Arg>
1572:/usr/include/c++/6/bits/stl_tree.h **** #endif
1573:/usr/include/c++/6/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
1574:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1575:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
1576:/usr/include/c++/6/bits/stl_tree.h ****     _M_insert_equal_lower(_Arg&& __v)
1577:/usr/include/c++/6/bits/stl_tree.h **** #else
1578:/usr/include/c++/6/bits/stl_tree.h ****     _M_insert_equal_lower(const _Val& __v)
1579:/usr/include/c++/6/bits/stl_tree.h **** #endif
1580:/usr/include/c++/6/bits/stl_tree.h ****     {
1581:/usr/include/c++/6/bits/stl_tree.h ****       _Link_type __x = _M_begin();
1582:/usr/include/c++/6/bits/stl_tree.h ****       _Base_ptr __y = _M_end();
1583:/usr/include/c++/6/bits/stl_tree.h ****       while (__x != 0)
1584:/usr/include/c++/6/bits/stl_tree.h **** 	{
1585:/usr/include/c++/6/bits/stl_tree.h **** 	  __y = __x;
1586:/usr/include/c++/6/bits/stl_tree.h **** 	  __x = !_M_impl._M_key_compare(_S_key(__x), _KeyOfValue()(__v)) ?
1587:/usr/include/c++/6/bits/stl_tree.h **** 	        _S_left(__x) : _S_right(__x);
1588:/usr/include/c++/6/bits/stl_tree.h **** 	}
1589:/usr/include/c++/6/bits/stl_tree.h ****       return _M_insert_lower(__y, _GLIBCXX_FORWARD(_Arg, __v));
1590:/usr/include/c++/6/bits/stl_tree.h ****     }
1591:/usr/include/c++/6/bits/stl_tree.h **** 
1592:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KoV,
1593:/usr/include/c++/6/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1594:/usr/include/c++/6/bits/stl_tree.h ****     template<typename _NodeGen>
1595:/usr/include/c++/6/bits/stl_tree.h ****       typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::_Link_type
1596:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
1597:/usr/include/c++/6/bits/stl_tree.h ****       _M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen& __node_gen)
1598:/usr/include/c++/6/bits/stl_tree.h ****       {
1599:/usr/include/c++/6/bits/stl_tree.h **** 	// Structural copy. __x and __p must be non-null.
1600:/usr/include/c++/6/bits/stl_tree.h **** 	_Link_type __top = _M_clone_node(__x, __node_gen);
1601:/usr/include/c++/6/bits/stl_tree.h **** 	__top->_M_parent = __p;
1602:/usr/include/c++/6/bits/stl_tree.h **** 
1603:/usr/include/c++/6/bits/stl_tree.h **** 	__try
1604:/usr/include/c++/6/bits/stl_tree.h **** 	  {
1605:/usr/include/c++/6/bits/stl_tree.h **** 	    if (__x->_M_right)
1606:/usr/include/c++/6/bits/stl_tree.h **** 	      __top->_M_right = _M_copy(_S_right(__x), __top, __node_gen);
1607:/usr/include/c++/6/bits/stl_tree.h **** 	    __p = __top;
1608:/usr/include/c++/6/bits/stl_tree.h **** 	    __x = _S_left(__x);
1609:/usr/include/c++/6/bits/stl_tree.h **** 
1610:/usr/include/c++/6/bits/stl_tree.h **** 	    while (__x != 0)
1611:/usr/include/c++/6/bits/stl_tree.h **** 	      {
1612:/usr/include/c++/6/bits/stl_tree.h **** 		_Link_type __y = _M_clone_node(__x, __node_gen);
1613:/usr/include/c++/6/bits/stl_tree.h **** 		__p->_M_left = __y;
1614:/usr/include/c++/6/bits/stl_tree.h **** 		__y->_M_parent = __p;
1615:/usr/include/c++/6/bits/stl_tree.h **** 		if (__x->_M_right)
1616:/usr/include/c++/6/bits/stl_tree.h **** 		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
1617:/usr/include/c++/6/bits/stl_tree.h **** 		__p = __y;
1618:/usr/include/c++/6/bits/stl_tree.h **** 		__x = _S_left(__x);
1619:/usr/include/c++/6/bits/stl_tree.h **** 	      }
1620:/usr/include/c++/6/bits/stl_tree.h **** 	  }
1621:/usr/include/c++/6/bits/stl_tree.h **** 	__catch(...)
1622:/usr/include/c++/6/bits/stl_tree.h **** 	  {
1623:/usr/include/c++/6/bits/stl_tree.h **** 	    _M_erase(__top);
1624:/usr/include/c++/6/bits/stl_tree.h **** 	    __throw_exception_again;
1625:/usr/include/c++/6/bits/stl_tree.h **** 	  }
GAS LISTING /tmp/ccvmoMuv.s 			page 153


1626:/usr/include/c++/6/bits/stl_tree.h **** 	return __top;
1627:/usr/include/c++/6/bits/stl_tree.h ****       }
1628:/usr/include/c++/6/bits/stl_tree.h **** 
1629:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1630:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1631:/usr/include/c++/6/bits/stl_tree.h ****     void
1632:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1633:/usr/include/c++/6/bits/stl_tree.h ****     _M_erase(_Link_type __x)
1634:/usr/include/c++/6/bits/stl_tree.h ****     {
1635:/usr/include/c++/6/bits/stl_tree.h ****       // Erase without rebalancing.
1636:/usr/include/c++/6/bits/stl_tree.h ****       while (__x != 0)
1637:/usr/include/c++/6/bits/stl_tree.h **** 	{
1638:/usr/include/c++/6/bits/stl_tree.h **** 	  _M_erase(_S_right(__x));
1639:/usr/include/c++/6/bits/stl_tree.h **** 	  _Link_type __y = _S_left(__x);
1640:/usr/include/c++/6/bits/stl_tree.h **** 	  _M_drop_node(__x);
1641:/usr/include/c++/6/bits/stl_tree.h **** 	  __x = __y;
1642:/usr/include/c++/6/bits/stl_tree.h **** 	}
1643:/usr/include/c++/6/bits/stl_tree.h ****     }
1644:/usr/include/c++/6/bits/stl_tree.h **** 
1645:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1646:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1647:/usr/include/c++/6/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue,
1648:/usr/include/c++/6/bits/stl_tree.h **** 		      _Compare, _Alloc>::iterator
1649:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 1801              		.loc 19 1649 0
 1802              		.cfi_startproc
 1803              	.LVL164:
1650:/usr/include/c++/6/bits/stl_tree.h ****     _M_lower_bound(_Link_type __x, _Base_ptr __y,
1651:/usr/include/c++/6/bits/stl_tree.h **** 		   const _Key& __k)
1652:/usr/include/c++/6/bits/stl_tree.h ****     {
1653:/usr/include/c++/6/bits/stl_tree.h ****       while (__x != 0)
 1804              		.loc 19 1653 0
 1805 0410 4885FF   		testq	%rdi, %rdi
1649:/usr/include/c++/6/bits/stl_tree.h ****     _M_lower_bound(_Link_type __x, _Base_ptr __y,
 1806              		.loc 19 1649 0
 1807 0413 4154     		pushq	%r12
 1808              		.cfi_def_cfa_offset 16
 1809              		.cfi_offset 12, -16
 1810 0415 4989F4   		movq	%rsi, %r12
 1811 0418 55       		pushq	%rbp
 1812              		.cfi_def_cfa_offset 24
 1813              		.cfi_offset 6, -24
 1814 0419 4889D5   		movq	%rdx, %rbp
 1815 041c 53       		pushq	%rbx
 1816              		.cfi_def_cfa_offset 32
 1817              		.cfi_offset 3, -32
 1818 041d 4889FB   		movq	%rdi, %rbx
 1819              		.loc 19 1653 0
 1820 0420 7512     		jne	.L117
 1821 0422 EB33     		jmp	.L115
 1822              	.LVL165:
 1823              		.p2align 4,,10
 1824 0424 0F1F4000 		.p2align 3
 1825              	.L118:
1654:/usr/include/c++/6/bits/stl_tree.h **** 	if (!_M_impl._M_key_compare(_S_key(__x), __k))
1655:/usr/include/c++/6/bits/stl_tree.h **** 	  __y = __x, __x = _S_left(__x);
1656:/usr/include/c++/6/bits/stl_tree.h **** 	else
GAS LISTING /tmp/ccvmoMuv.s 			page 154


1657:/usr/include/c++/6/bits/stl_tree.h **** 	  __x = _S_right(__x);
 1826              		.loc 19 1657 0
 1827 0428 4989DC   		movq	%rbx, %r12
 1828              	.LVL166:
1655:/usr/include/c++/6/bits/stl_tree.h **** 	else
 1829              		.loc 19 1655 0
 1830 042b 488B5B10 		movq	16(%rbx), %rbx
 1831              	.LVL167:
1653:/usr/include/c++/6/bits/stl_tree.h **** 	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 1832              		.loc 19 1653 0
 1833 042f 4885DB   		testq	%rbx, %rbx
 1834 0432 7423     		je	.L115
 1835              	.LVL168:
 1836              	.L117:
 1837              	.LBB13040:
 1838              	.LBB13041:
 1839              	.LBB13042:
 1840              		.file 20 "/usr/include/c++/6/bits/stl_function.h"
   1:/usr/include/c++/6/bits/stl_function.h **** // Functor implementations -*- C++ -*-
   2:/usr/include/c++/6/bits/stl_function.h **** 
   3:/usr/include/c++/6/bits/stl_function.h **** // Copyright (C) 2001-2016 Free Software Foundation, Inc.
   4:/usr/include/c++/6/bits/stl_function.h **** //
   5:/usr/include/c++/6/bits/stl_function.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/6/bits/stl_function.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/6/bits/stl_function.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/6/bits/stl_function.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/6/bits/stl_function.h **** // any later version.
  10:/usr/include/c++/6/bits/stl_function.h **** 
  11:/usr/include/c++/6/bits/stl_function.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/6/bits/stl_function.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/6/bits/stl_function.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/6/bits/stl_function.h **** // GNU General Public License for more details.
  15:/usr/include/c++/6/bits/stl_function.h **** 
  16:/usr/include/c++/6/bits/stl_function.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/6/bits/stl_function.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/6/bits/stl_function.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/6/bits/stl_function.h **** 
  20:/usr/include/c++/6/bits/stl_function.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/6/bits/stl_function.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/6/bits/stl_function.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/6/bits/stl_function.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/6/bits/stl_function.h **** 
  25:/usr/include/c++/6/bits/stl_function.h **** /*
  26:/usr/include/c++/6/bits/stl_function.h ****  *
  27:/usr/include/c++/6/bits/stl_function.h ****  * Copyright (c) 1994
  28:/usr/include/c++/6/bits/stl_function.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/6/bits/stl_function.h ****  *
  30:/usr/include/c++/6/bits/stl_function.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/6/bits/stl_function.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/6/bits/stl_function.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/6/bits/stl_function.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/6/bits/stl_function.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/6/bits/stl_function.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/6/bits/stl_function.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/6/bits/stl_function.h ****  *
  38:/usr/include/c++/6/bits/stl_function.h ****  *
  39:/usr/include/c++/6/bits/stl_function.h ****  * Copyright (c) 1996-1998
GAS LISTING /tmp/ccvmoMuv.s 			page 155


  40:/usr/include/c++/6/bits/stl_function.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/6/bits/stl_function.h ****  *
  42:/usr/include/c++/6/bits/stl_function.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/6/bits/stl_function.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/6/bits/stl_function.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/6/bits/stl_function.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/6/bits/stl_function.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/6/bits/stl_function.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/6/bits/stl_function.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/6/bits/stl_function.h ****  */
  50:/usr/include/c++/6/bits/stl_function.h **** 
  51:/usr/include/c++/6/bits/stl_function.h **** /** @file bits/stl_function.h
  52:/usr/include/c++/6/bits/stl_function.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/6/bits/stl_function.h ****  *  Do not attempt to use it directly. @headername{functional}
  54:/usr/include/c++/6/bits/stl_function.h ****  */
  55:/usr/include/c++/6/bits/stl_function.h **** 
  56:/usr/include/c++/6/bits/stl_function.h **** #ifndef _STL_FUNCTION_H
  57:/usr/include/c++/6/bits/stl_function.h **** #define _STL_FUNCTION_H 1
  58:/usr/include/c++/6/bits/stl_function.h **** 
  59:/usr/include/c++/6/bits/stl_function.h **** #if __cplusplus > 201103L
  60:/usr/include/c++/6/bits/stl_function.h **** #include <bits/move.h>
  61:/usr/include/c++/6/bits/stl_function.h **** #endif
  62:/usr/include/c++/6/bits/stl_function.h **** 
  63:/usr/include/c++/6/bits/stl_function.h **** namespace std _GLIBCXX_VISIBILITY(default)
  64:/usr/include/c++/6/bits/stl_function.h **** {
  65:/usr/include/c++/6/bits/stl_function.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  66:/usr/include/c++/6/bits/stl_function.h **** 
  67:/usr/include/c++/6/bits/stl_function.h ****   // 20.3.1 base classes
  68:/usr/include/c++/6/bits/stl_function.h ****   /** @defgroup functors Function Objects
  69:/usr/include/c++/6/bits/stl_function.h ****    * @ingroup utilities
  70:/usr/include/c++/6/bits/stl_function.h ****    *
  71:/usr/include/c++/6/bits/stl_function.h ****    *  Function objects, or @e functors, are objects with an @c operator()
  72:/usr/include/c++/6/bits/stl_function.h ****    *  defined and accessible.  They can be passed as arguments to algorithm
  73:/usr/include/c++/6/bits/stl_function.h ****    *  templates and used in place of a function pointer.  Not only is the
  74:/usr/include/c++/6/bits/stl_function.h ****    *  resulting expressiveness of the library increased, but the generated
  75:/usr/include/c++/6/bits/stl_function.h ****    *  code can be more efficient than what you might write by hand.  When we
  76:/usr/include/c++/6/bits/stl_function.h ****    *  refer to @a functors, then, generally we include function pointers in
  77:/usr/include/c++/6/bits/stl_function.h ****    *  the description as well.
  78:/usr/include/c++/6/bits/stl_function.h ****    *
  79:/usr/include/c++/6/bits/stl_function.h ****    *  Often, functors are only created as temporaries passed to algorithm
  80:/usr/include/c++/6/bits/stl_function.h ****    *  calls, rather than being created as named variables.
  81:/usr/include/c++/6/bits/stl_function.h ****    *
  82:/usr/include/c++/6/bits/stl_function.h ****    *  Two examples taken from the standard itself follow.  To perform a
  83:/usr/include/c++/6/bits/stl_function.h ****    *  by-element addition of two vectors @c a and @c b containing @c double,
  84:/usr/include/c++/6/bits/stl_function.h ****    *  and put the result in @c a, use
  85:/usr/include/c++/6/bits/stl_function.h ****    *  \code
  86:/usr/include/c++/6/bits/stl_function.h ****    *  transform (a.begin(), a.end(), b.begin(), a.begin(), plus<double>());
  87:/usr/include/c++/6/bits/stl_function.h ****    *  \endcode
  88:/usr/include/c++/6/bits/stl_function.h ****    *  To negate every element in @c a, use
  89:/usr/include/c++/6/bits/stl_function.h ****    *  \code
  90:/usr/include/c++/6/bits/stl_function.h ****    *  transform(a.begin(), a.end(), a.begin(), negate<double>());
  91:/usr/include/c++/6/bits/stl_function.h ****    *  \endcode
  92:/usr/include/c++/6/bits/stl_function.h ****    *  The addition and negation functions will be inlined directly.
  93:/usr/include/c++/6/bits/stl_function.h ****    *
  94:/usr/include/c++/6/bits/stl_function.h ****    *  The standard functors are derived from structs named @c unary_function
  95:/usr/include/c++/6/bits/stl_function.h ****    *  and @c binary_function.  These two classes contain nothing but typedefs,
  96:/usr/include/c++/6/bits/stl_function.h ****    *  to aid in generic (template) programming.  If you write your own
GAS LISTING /tmp/ccvmoMuv.s 			page 156


  97:/usr/include/c++/6/bits/stl_function.h ****    *  functors, you might consider doing the same.
  98:/usr/include/c++/6/bits/stl_function.h ****    *
  99:/usr/include/c++/6/bits/stl_function.h ****    *  @{
 100:/usr/include/c++/6/bits/stl_function.h ****    */
 101:/usr/include/c++/6/bits/stl_function.h ****   /**
 102:/usr/include/c++/6/bits/stl_function.h ****    *  This is one of the @link functors functor base classes@endlink.
 103:/usr/include/c++/6/bits/stl_function.h ****    */
 104:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Arg, typename _Result>
 105:/usr/include/c++/6/bits/stl_function.h ****     struct unary_function
 106:/usr/include/c++/6/bits/stl_function.h ****     {
 107:/usr/include/c++/6/bits/stl_function.h ****       /// @c argument_type is the type of the argument
 108:/usr/include/c++/6/bits/stl_function.h ****       typedef _Arg 	argument_type;   
 109:/usr/include/c++/6/bits/stl_function.h **** 
 110:/usr/include/c++/6/bits/stl_function.h ****       /// @c result_type is the return type
 111:/usr/include/c++/6/bits/stl_function.h ****       typedef _Result 	result_type;  
 112:/usr/include/c++/6/bits/stl_function.h ****     };
 113:/usr/include/c++/6/bits/stl_function.h **** 
 114:/usr/include/c++/6/bits/stl_function.h ****   /**
 115:/usr/include/c++/6/bits/stl_function.h ****    *  This is one of the @link functors functor base classes@endlink.
 116:/usr/include/c++/6/bits/stl_function.h ****    */
 117:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Arg1, typename _Arg2, typename _Result>
 118:/usr/include/c++/6/bits/stl_function.h ****     struct binary_function
 119:/usr/include/c++/6/bits/stl_function.h ****     {
 120:/usr/include/c++/6/bits/stl_function.h ****       /// @c first_argument_type is the type of the first argument
 121:/usr/include/c++/6/bits/stl_function.h ****       typedef _Arg1 	first_argument_type; 
 122:/usr/include/c++/6/bits/stl_function.h **** 
 123:/usr/include/c++/6/bits/stl_function.h ****       /// @c second_argument_type is the type of the second argument
 124:/usr/include/c++/6/bits/stl_function.h ****       typedef _Arg2 	second_argument_type;
 125:/usr/include/c++/6/bits/stl_function.h **** 
 126:/usr/include/c++/6/bits/stl_function.h ****       /// @c result_type is the return type
 127:/usr/include/c++/6/bits/stl_function.h ****       typedef _Result 	result_type;
 128:/usr/include/c++/6/bits/stl_function.h ****     };
 129:/usr/include/c++/6/bits/stl_function.h ****   /** @}  */
 130:/usr/include/c++/6/bits/stl_function.h **** 
 131:/usr/include/c++/6/bits/stl_function.h ****   // 20.3.2 arithmetic
 132:/usr/include/c++/6/bits/stl_function.h ****   /** @defgroup arithmetic_functors Arithmetic Classes
 133:/usr/include/c++/6/bits/stl_function.h ****    * @ingroup functors
 134:/usr/include/c++/6/bits/stl_function.h ****    *
 135:/usr/include/c++/6/bits/stl_function.h ****    *  Because basic math often needs to be done during an algorithm,
 136:/usr/include/c++/6/bits/stl_function.h ****    *  the library provides functors for those operations.  See the
 137:/usr/include/c++/6/bits/stl_function.h ****    *  documentation for @link functors the base classes@endlink
 138:/usr/include/c++/6/bits/stl_function.h ****    *  for examples of their use.
 139:/usr/include/c++/6/bits/stl_function.h ****    *
 140:/usr/include/c++/6/bits/stl_function.h ****    *  @{
 141:/usr/include/c++/6/bits/stl_function.h ****    */
 142:/usr/include/c++/6/bits/stl_function.h **** 
 143:/usr/include/c++/6/bits/stl_function.h **** #if __cplusplus > 201103L
 144:/usr/include/c++/6/bits/stl_function.h ****   struct __is_transparent;  // undefined
 145:/usr/include/c++/6/bits/stl_function.h **** 
 146:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp = void>
 147:/usr/include/c++/6/bits/stl_function.h ****     struct plus;
 148:/usr/include/c++/6/bits/stl_function.h **** 
 149:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp = void>
 150:/usr/include/c++/6/bits/stl_function.h ****     struct minus;
 151:/usr/include/c++/6/bits/stl_function.h **** 
 152:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp = void>
 153:/usr/include/c++/6/bits/stl_function.h ****     struct multiplies;
GAS LISTING /tmp/ccvmoMuv.s 			page 157


 154:/usr/include/c++/6/bits/stl_function.h **** 
 155:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp = void>
 156:/usr/include/c++/6/bits/stl_function.h ****     struct divides;
 157:/usr/include/c++/6/bits/stl_function.h **** 
 158:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp = void>
 159:/usr/include/c++/6/bits/stl_function.h ****     struct modulus;
 160:/usr/include/c++/6/bits/stl_function.h **** 
 161:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp = void>
 162:/usr/include/c++/6/bits/stl_function.h ****     struct negate;
 163:/usr/include/c++/6/bits/stl_function.h **** #endif
 164:/usr/include/c++/6/bits/stl_function.h **** 
 165:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 166:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp>
 167:/usr/include/c++/6/bits/stl_function.h ****     struct plus : public binary_function<_Tp, _Tp, _Tp>
 168:/usr/include/c++/6/bits/stl_function.h ****     {
 169:/usr/include/c++/6/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 170:/usr/include/c++/6/bits/stl_function.h ****       _Tp
 171:/usr/include/c++/6/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 172:/usr/include/c++/6/bits/stl_function.h ****       { return __x + __y; }
 173:/usr/include/c++/6/bits/stl_function.h ****     };
 174:/usr/include/c++/6/bits/stl_function.h **** 
 175:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 176:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp>
 177:/usr/include/c++/6/bits/stl_function.h ****     struct minus : public binary_function<_Tp, _Tp, _Tp>
 178:/usr/include/c++/6/bits/stl_function.h ****     {
 179:/usr/include/c++/6/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 180:/usr/include/c++/6/bits/stl_function.h ****       _Tp
 181:/usr/include/c++/6/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 182:/usr/include/c++/6/bits/stl_function.h ****       { return __x - __y; }
 183:/usr/include/c++/6/bits/stl_function.h ****     };
 184:/usr/include/c++/6/bits/stl_function.h **** 
 185:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 186:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp>
 187:/usr/include/c++/6/bits/stl_function.h ****     struct multiplies : public binary_function<_Tp, _Tp, _Tp>
 188:/usr/include/c++/6/bits/stl_function.h ****     {
 189:/usr/include/c++/6/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 190:/usr/include/c++/6/bits/stl_function.h ****       _Tp
 191:/usr/include/c++/6/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 192:/usr/include/c++/6/bits/stl_function.h ****       { return __x * __y; }
 193:/usr/include/c++/6/bits/stl_function.h ****     };
 194:/usr/include/c++/6/bits/stl_function.h **** 
 195:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 196:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp>
 197:/usr/include/c++/6/bits/stl_function.h ****     struct divides : public binary_function<_Tp, _Tp, _Tp>
 198:/usr/include/c++/6/bits/stl_function.h ****     {
 199:/usr/include/c++/6/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 200:/usr/include/c++/6/bits/stl_function.h ****       _Tp
 201:/usr/include/c++/6/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 202:/usr/include/c++/6/bits/stl_function.h ****       { return __x / __y; }
 203:/usr/include/c++/6/bits/stl_function.h ****     };
 204:/usr/include/c++/6/bits/stl_function.h **** 
 205:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 206:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp>
 207:/usr/include/c++/6/bits/stl_function.h ****     struct modulus : public binary_function<_Tp, _Tp, _Tp>
 208:/usr/include/c++/6/bits/stl_function.h ****     {
 209:/usr/include/c++/6/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 210:/usr/include/c++/6/bits/stl_function.h ****       _Tp
GAS LISTING /tmp/ccvmoMuv.s 			page 158


 211:/usr/include/c++/6/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 212:/usr/include/c++/6/bits/stl_function.h ****       { return __x % __y; }
 213:/usr/include/c++/6/bits/stl_function.h ****     };
 214:/usr/include/c++/6/bits/stl_function.h **** 
 215:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 216:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp>
 217:/usr/include/c++/6/bits/stl_function.h ****     struct negate : public unary_function<_Tp, _Tp>
 218:/usr/include/c++/6/bits/stl_function.h ****     {
 219:/usr/include/c++/6/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 220:/usr/include/c++/6/bits/stl_function.h ****       _Tp
 221:/usr/include/c++/6/bits/stl_function.h ****       operator()(const _Tp& __x) const
 222:/usr/include/c++/6/bits/stl_function.h ****       { return -__x; }
 223:/usr/include/c++/6/bits/stl_function.h ****     };
 224:/usr/include/c++/6/bits/stl_function.h **** 
 225:/usr/include/c++/6/bits/stl_function.h **** #if __cplusplus > 201103L
 226:/usr/include/c++/6/bits/stl_function.h **** 
 227:/usr/include/c++/6/bits/stl_function.h **** #define __cpp_lib_transparent_operators 201210
 228:/usr/include/c++/6/bits/stl_function.h **** 
 229:/usr/include/c++/6/bits/stl_function.h ****   template<>
 230:/usr/include/c++/6/bits/stl_function.h ****     struct plus<void>
 231:/usr/include/c++/6/bits/stl_function.h ****     {
 232:/usr/include/c++/6/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 233:/usr/include/c++/6/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 234:/usr/include/c++/6/bits/stl_function.h **** 	auto
 235:/usr/include/c++/6/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 236:/usr/include/c++/6/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) + std::forward<_Up>(__u)))
 237:/usr/include/c++/6/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) + std::forward<_Up>(__u))
 238:/usr/include/c++/6/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) + std::forward<_Up>(__u); }
 239:/usr/include/c++/6/bits/stl_function.h **** 
 240:/usr/include/c++/6/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 241:/usr/include/c++/6/bits/stl_function.h ****     };
 242:/usr/include/c++/6/bits/stl_function.h **** 
 243:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 244:/usr/include/c++/6/bits/stl_function.h ****   template<>
 245:/usr/include/c++/6/bits/stl_function.h ****     struct minus<void>
 246:/usr/include/c++/6/bits/stl_function.h ****     {
 247:/usr/include/c++/6/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 248:/usr/include/c++/6/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 249:/usr/include/c++/6/bits/stl_function.h **** 	auto
 250:/usr/include/c++/6/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 251:/usr/include/c++/6/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) - std::forward<_Up>(__u)))
 252:/usr/include/c++/6/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) - std::forward<_Up>(__u))
 253:/usr/include/c++/6/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) - std::forward<_Up>(__u); }
 254:/usr/include/c++/6/bits/stl_function.h **** 
 255:/usr/include/c++/6/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 256:/usr/include/c++/6/bits/stl_function.h ****     };
 257:/usr/include/c++/6/bits/stl_function.h **** 
 258:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 259:/usr/include/c++/6/bits/stl_function.h ****   template<>
 260:/usr/include/c++/6/bits/stl_function.h ****     struct multiplies<void>
 261:/usr/include/c++/6/bits/stl_function.h ****     {
 262:/usr/include/c++/6/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 263:/usr/include/c++/6/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 264:/usr/include/c++/6/bits/stl_function.h **** 	auto
 265:/usr/include/c++/6/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 266:/usr/include/c++/6/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) * std::forward<_Up>(__u)))
 267:/usr/include/c++/6/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) * std::forward<_Up>(__u))
GAS LISTING /tmp/ccvmoMuv.s 			page 159


 268:/usr/include/c++/6/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) * std::forward<_Up>(__u); }
 269:/usr/include/c++/6/bits/stl_function.h **** 
 270:/usr/include/c++/6/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 271:/usr/include/c++/6/bits/stl_function.h ****     };
 272:/usr/include/c++/6/bits/stl_function.h **** 
 273:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 274:/usr/include/c++/6/bits/stl_function.h ****   template<>
 275:/usr/include/c++/6/bits/stl_function.h ****     struct divides<void>
 276:/usr/include/c++/6/bits/stl_function.h ****     {
 277:/usr/include/c++/6/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 278:/usr/include/c++/6/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 279:/usr/include/c++/6/bits/stl_function.h **** 	auto
 280:/usr/include/c++/6/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 281:/usr/include/c++/6/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) / std::forward<_Up>(__u)))
 282:/usr/include/c++/6/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) / std::forward<_Up>(__u))
 283:/usr/include/c++/6/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) / std::forward<_Up>(__u); }
 284:/usr/include/c++/6/bits/stl_function.h **** 
 285:/usr/include/c++/6/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 286:/usr/include/c++/6/bits/stl_function.h ****     };
 287:/usr/include/c++/6/bits/stl_function.h **** 
 288:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 289:/usr/include/c++/6/bits/stl_function.h ****   template<>
 290:/usr/include/c++/6/bits/stl_function.h ****     struct modulus<void>
 291:/usr/include/c++/6/bits/stl_function.h ****     {
 292:/usr/include/c++/6/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 293:/usr/include/c++/6/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 294:/usr/include/c++/6/bits/stl_function.h **** 	auto
 295:/usr/include/c++/6/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 296:/usr/include/c++/6/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) % std::forward<_Up>(__u)))
 297:/usr/include/c++/6/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) % std::forward<_Up>(__u))
 298:/usr/include/c++/6/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) % std::forward<_Up>(__u); }
 299:/usr/include/c++/6/bits/stl_function.h **** 
 300:/usr/include/c++/6/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 301:/usr/include/c++/6/bits/stl_function.h ****     };
 302:/usr/include/c++/6/bits/stl_function.h **** 
 303:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 304:/usr/include/c++/6/bits/stl_function.h ****   template<>
 305:/usr/include/c++/6/bits/stl_function.h ****     struct negate<void>
 306:/usr/include/c++/6/bits/stl_function.h ****     {
 307:/usr/include/c++/6/bits/stl_function.h ****       template <typename _Tp>
 308:/usr/include/c++/6/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 309:/usr/include/c++/6/bits/stl_function.h **** 	auto
 310:/usr/include/c++/6/bits/stl_function.h **** 	operator()(_Tp&& __t) const
 311:/usr/include/c++/6/bits/stl_function.h **** 	noexcept(noexcept(-std::forward<_Tp>(__t)))
 312:/usr/include/c++/6/bits/stl_function.h **** 	-> decltype(-std::forward<_Tp>(__t))
 313:/usr/include/c++/6/bits/stl_function.h **** 	{ return -std::forward<_Tp>(__t); }
 314:/usr/include/c++/6/bits/stl_function.h **** 
 315:/usr/include/c++/6/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 316:/usr/include/c++/6/bits/stl_function.h ****     };
 317:/usr/include/c++/6/bits/stl_function.h **** #endif
 318:/usr/include/c++/6/bits/stl_function.h ****   /** @}  */
 319:/usr/include/c++/6/bits/stl_function.h **** 
 320:/usr/include/c++/6/bits/stl_function.h ****   // 20.3.3 comparisons
 321:/usr/include/c++/6/bits/stl_function.h ****   /** @defgroup comparison_functors Comparison Classes
 322:/usr/include/c++/6/bits/stl_function.h ****    * @ingroup functors
 323:/usr/include/c++/6/bits/stl_function.h ****    *
 324:/usr/include/c++/6/bits/stl_function.h ****    *  The library provides six wrapper functors for all the basic comparisons
GAS LISTING /tmp/ccvmoMuv.s 			page 160


 325:/usr/include/c++/6/bits/stl_function.h ****    *  in C++, like @c <.
 326:/usr/include/c++/6/bits/stl_function.h ****    *
 327:/usr/include/c++/6/bits/stl_function.h ****    *  @{
 328:/usr/include/c++/6/bits/stl_function.h ****    */
 329:/usr/include/c++/6/bits/stl_function.h **** #if __cplusplus > 201103L
 330:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp = void>
 331:/usr/include/c++/6/bits/stl_function.h ****     struct equal_to;
 332:/usr/include/c++/6/bits/stl_function.h **** 
 333:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp = void>
 334:/usr/include/c++/6/bits/stl_function.h ****     struct not_equal_to;
 335:/usr/include/c++/6/bits/stl_function.h **** 
 336:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp = void>
 337:/usr/include/c++/6/bits/stl_function.h ****     struct greater;
 338:/usr/include/c++/6/bits/stl_function.h **** 
 339:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp = void>
 340:/usr/include/c++/6/bits/stl_function.h ****     struct less;
 341:/usr/include/c++/6/bits/stl_function.h **** 
 342:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp = void>
 343:/usr/include/c++/6/bits/stl_function.h ****     struct greater_equal;
 344:/usr/include/c++/6/bits/stl_function.h **** 
 345:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp = void>
 346:/usr/include/c++/6/bits/stl_function.h ****     struct less_equal;
 347:/usr/include/c++/6/bits/stl_function.h **** #endif
 348:/usr/include/c++/6/bits/stl_function.h **** 
 349:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 350:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp>
 351:/usr/include/c++/6/bits/stl_function.h ****     struct equal_to : public binary_function<_Tp, _Tp, bool>
 352:/usr/include/c++/6/bits/stl_function.h ****     {
 353:/usr/include/c++/6/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 354:/usr/include/c++/6/bits/stl_function.h ****       bool
 355:/usr/include/c++/6/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 356:/usr/include/c++/6/bits/stl_function.h ****       { return __x == __y; }
 357:/usr/include/c++/6/bits/stl_function.h ****     };
 358:/usr/include/c++/6/bits/stl_function.h **** 
 359:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 360:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp>
 361:/usr/include/c++/6/bits/stl_function.h ****     struct not_equal_to : public binary_function<_Tp, _Tp, bool>
 362:/usr/include/c++/6/bits/stl_function.h ****     {
 363:/usr/include/c++/6/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 364:/usr/include/c++/6/bits/stl_function.h ****       bool
 365:/usr/include/c++/6/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 366:/usr/include/c++/6/bits/stl_function.h ****       { return __x != __y; }
 367:/usr/include/c++/6/bits/stl_function.h ****     };
 368:/usr/include/c++/6/bits/stl_function.h **** 
 369:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 370:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp>
 371:/usr/include/c++/6/bits/stl_function.h ****     struct greater : public binary_function<_Tp, _Tp, bool>
 372:/usr/include/c++/6/bits/stl_function.h ****     {
 373:/usr/include/c++/6/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 374:/usr/include/c++/6/bits/stl_function.h ****       bool
 375:/usr/include/c++/6/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 376:/usr/include/c++/6/bits/stl_function.h ****       { return __x > __y; }
 377:/usr/include/c++/6/bits/stl_function.h ****     };
 378:/usr/include/c++/6/bits/stl_function.h **** 
 379:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 380:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp>
 381:/usr/include/c++/6/bits/stl_function.h ****     struct less : public binary_function<_Tp, _Tp, bool>
GAS LISTING /tmp/ccvmoMuv.s 			page 161


 382:/usr/include/c++/6/bits/stl_function.h ****     {
 383:/usr/include/c++/6/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 384:/usr/include/c++/6/bits/stl_function.h ****       bool
 385:/usr/include/c++/6/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 386:/usr/include/c++/6/bits/stl_function.h ****       { return __x < __y; }
 387:/usr/include/c++/6/bits/stl_function.h ****     };
 388:/usr/include/c++/6/bits/stl_function.h **** 
 389:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 390:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp>
 391:/usr/include/c++/6/bits/stl_function.h ****     struct greater_equal : public binary_function<_Tp, _Tp, bool>
 392:/usr/include/c++/6/bits/stl_function.h ****     {
 393:/usr/include/c++/6/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 394:/usr/include/c++/6/bits/stl_function.h ****       bool
 395:/usr/include/c++/6/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 396:/usr/include/c++/6/bits/stl_function.h ****       { return __x >= __y; }
 397:/usr/include/c++/6/bits/stl_function.h ****     };
 398:/usr/include/c++/6/bits/stl_function.h **** 
 399:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 400:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp>
 401:/usr/include/c++/6/bits/stl_function.h ****     struct less_equal : public binary_function<_Tp, _Tp, bool>
 402:/usr/include/c++/6/bits/stl_function.h ****     {
 403:/usr/include/c++/6/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 404:/usr/include/c++/6/bits/stl_function.h ****       bool
 405:/usr/include/c++/6/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 406:/usr/include/c++/6/bits/stl_function.h ****       { return __x <= __y; }
 407:/usr/include/c++/6/bits/stl_function.h ****     };
 408:/usr/include/c++/6/bits/stl_function.h **** 
 409:/usr/include/c++/6/bits/stl_function.h **** #if __cplusplus > 201103L
 410:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 411:/usr/include/c++/6/bits/stl_function.h ****   template<>
 412:/usr/include/c++/6/bits/stl_function.h ****     struct equal_to<void>
 413:/usr/include/c++/6/bits/stl_function.h ****     {
 414:/usr/include/c++/6/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 415:/usr/include/c++/6/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 416:/usr/include/c++/6/bits/stl_function.h **** 	auto
 417:/usr/include/c++/6/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 418:/usr/include/c++/6/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) == std::forward<_Up>(__u)))
 419:/usr/include/c++/6/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) == std::forward<_Up>(__u))
 420:/usr/include/c++/6/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) == std::forward<_Up>(__u); }
 421:/usr/include/c++/6/bits/stl_function.h **** 
 422:/usr/include/c++/6/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 423:/usr/include/c++/6/bits/stl_function.h ****     };
 424:/usr/include/c++/6/bits/stl_function.h **** 
 425:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 426:/usr/include/c++/6/bits/stl_function.h ****   template<>
 427:/usr/include/c++/6/bits/stl_function.h ****     struct not_equal_to<void>
 428:/usr/include/c++/6/bits/stl_function.h ****     {
 429:/usr/include/c++/6/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 430:/usr/include/c++/6/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 431:/usr/include/c++/6/bits/stl_function.h **** 	auto
 432:/usr/include/c++/6/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 433:/usr/include/c++/6/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) != std::forward<_Up>(__u)))
 434:/usr/include/c++/6/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) != std::forward<_Up>(__u))
 435:/usr/include/c++/6/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) != std::forward<_Up>(__u); }
 436:/usr/include/c++/6/bits/stl_function.h **** 
 437:/usr/include/c++/6/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 438:/usr/include/c++/6/bits/stl_function.h ****     };
GAS LISTING /tmp/ccvmoMuv.s 			page 162


 439:/usr/include/c++/6/bits/stl_function.h **** 
 440:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 441:/usr/include/c++/6/bits/stl_function.h ****   template<>
 442:/usr/include/c++/6/bits/stl_function.h ****     struct greater<void>
 443:/usr/include/c++/6/bits/stl_function.h ****     {
 444:/usr/include/c++/6/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 445:/usr/include/c++/6/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 446:/usr/include/c++/6/bits/stl_function.h **** 	auto
 447:/usr/include/c++/6/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 448:/usr/include/c++/6/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) > std::forward<_Up>(__u)))
 449:/usr/include/c++/6/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) > std::forward<_Up>(__u))
 450:/usr/include/c++/6/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) > std::forward<_Up>(__u); }
 451:/usr/include/c++/6/bits/stl_function.h **** 
 452:/usr/include/c++/6/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 453:/usr/include/c++/6/bits/stl_function.h ****     };
 454:/usr/include/c++/6/bits/stl_function.h **** 
 455:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 456:/usr/include/c++/6/bits/stl_function.h ****   template<>
 457:/usr/include/c++/6/bits/stl_function.h ****     struct less<void>
 458:/usr/include/c++/6/bits/stl_function.h ****     {
 459:/usr/include/c++/6/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 460:/usr/include/c++/6/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 461:/usr/include/c++/6/bits/stl_function.h **** 	auto
 462:/usr/include/c++/6/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 463:/usr/include/c++/6/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) < std::forward<_Up>(__u)))
 464:/usr/include/c++/6/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) < std::forward<_Up>(__u))
 465:/usr/include/c++/6/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) < std::forward<_Up>(__u); }
 466:/usr/include/c++/6/bits/stl_function.h **** 
 467:/usr/include/c++/6/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 468:/usr/include/c++/6/bits/stl_function.h ****     };
 469:/usr/include/c++/6/bits/stl_function.h **** 
 470:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 471:/usr/include/c++/6/bits/stl_function.h ****   template<>
 472:/usr/include/c++/6/bits/stl_function.h ****     struct greater_equal<void>
 473:/usr/include/c++/6/bits/stl_function.h ****     {
 474:/usr/include/c++/6/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 475:/usr/include/c++/6/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 476:/usr/include/c++/6/bits/stl_function.h **** 	auto
 477:/usr/include/c++/6/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 478:/usr/include/c++/6/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) >= std::forward<_Up>(__u)))
 479:/usr/include/c++/6/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) >= std::forward<_Up>(__u))
 480:/usr/include/c++/6/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) >= std::forward<_Up>(__u); }
 481:/usr/include/c++/6/bits/stl_function.h **** 
 482:/usr/include/c++/6/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 483:/usr/include/c++/6/bits/stl_function.h ****     };
 484:/usr/include/c++/6/bits/stl_function.h **** 
 485:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 486:/usr/include/c++/6/bits/stl_function.h ****   template<>
 487:/usr/include/c++/6/bits/stl_function.h ****     struct less_equal<void>
 488:/usr/include/c++/6/bits/stl_function.h ****     {
 489:/usr/include/c++/6/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 490:/usr/include/c++/6/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 491:/usr/include/c++/6/bits/stl_function.h **** 	auto
 492:/usr/include/c++/6/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 493:/usr/include/c++/6/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) <= std::forward<_Up>(__u)))
 494:/usr/include/c++/6/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) <= std::forward<_Up>(__u))
 495:/usr/include/c++/6/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) <= std::forward<_Up>(__u); }
GAS LISTING /tmp/ccvmoMuv.s 			page 163


 496:/usr/include/c++/6/bits/stl_function.h **** 
 497:/usr/include/c++/6/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 498:/usr/include/c++/6/bits/stl_function.h ****     };
 499:/usr/include/c++/6/bits/stl_function.h **** #endif
 500:/usr/include/c++/6/bits/stl_function.h ****   /** @}  */
 501:/usr/include/c++/6/bits/stl_function.h **** 
 502:/usr/include/c++/6/bits/stl_function.h ****   // 20.3.4 logical operations
 503:/usr/include/c++/6/bits/stl_function.h ****   /** @defgroup logical_functors Boolean Operations Classes
 504:/usr/include/c++/6/bits/stl_function.h ****    * @ingroup functors
 505:/usr/include/c++/6/bits/stl_function.h ****    *
 506:/usr/include/c++/6/bits/stl_function.h ****    *  Here are wrapper functors for Boolean operations: @c &&, @c ||,
 507:/usr/include/c++/6/bits/stl_function.h ****    *  and @c !.
 508:/usr/include/c++/6/bits/stl_function.h ****    *
 509:/usr/include/c++/6/bits/stl_function.h ****    *  @{
 510:/usr/include/c++/6/bits/stl_function.h ****    */
 511:/usr/include/c++/6/bits/stl_function.h **** #if __cplusplus > 201103L
 512:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp = void>
 513:/usr/include/c++/6/bits/stl_function.h ****     struct logical_and;
 514:/usr/include/c++/6/bits/stl_function.h **** 
 515:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp = void>
 516:/usr/include/c++/6/bits/stl_function.h ****     struct logical_or;
 517:/usr/include/c++/6/bits/stl_function.h **** 
 518:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp = void>
 519:/usr/include/c++/6/bits/stl_function.h ****     struct logical_not;
 520:/usr/include/c++/6/bits/stl_function.h **** #endif
 521:/usr/include/c++/6/bits/stl_function.h **** 
 522:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link logical_functors Boolean operations functors@endlink.
 523:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp>
 524:/usr/include/c++/6/bits/stl_function.h ****     struct logical_and : public binary_function<_Tp, _Tp, bool>
 525:/usr/include/c++/6/bits/stl_function.h ****     {
 526:/usr/include/c++/6/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 527:/usr/include/c++/6/bits/stl_function.h ****       bool
 528:/usr/include/c++/6/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 529:/usr/include/c++/6/bits/stl_function.h ****       { return __x && __y; }
 530:/usr/include/c++/6/bits/stl_function.h ****     };
 531:/usr/include/c++/6/bits/stl_function.h **** 
 532:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link logical_functors Boolean operations functors@endlink.
 533:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp>
 534:/usr/include/c++/6/bits/stl_function.h ****     struct logical_or : public binary_function<_Tp, _Tp, bool>
 535:/usr/include/c++/6/bits/stl_function.h ****     {
 536:/usr/include/c++/6/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 537:/usr/include/c++/6/bits/stl_function.h ****       bool
 538:/usr/include/c++/6/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 539:/usr/include/c++/6/bits/stl_function.h ****       { return __x || __y; }
 540:/usr/include/c++/6/bits/stl_function.h ****     };
 541:/usr/include/c++/6/bits/stl_function.h **** 
 542:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link logical_functors Boolean operations functors@endlink.
 543:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp>
 544:/usr/include/c++/6/bits/stl_function.h ****     struct logical_not : public unary_function<_Tp, bool>
 545:/usr/include/c++/6/bits/stl_function.h ****     {
 546:/usr/include/c++/6/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 547:/usr/include/c++/6/bits/stl_function.h ****       bool
 548:/usr/include/c++/6/bits/stl_function.h ****       operator()(const _Tp& __x) const
 549:/usr/include/c++/6/bits/stl_function.h ****       { return !__x; }
 550:/usr/include/c++/6/bits/stl_function.h ****     };
 551:/usr/include/c++/6/bits/stl_function.h **** 
 552:/usr/include/c++/6/bits/stl_function.h **** #if __cplusplus > 201103L
GAS LISTING /tmp/ccvmoMuv.s 			page 164


 553:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link logical_functors Boolean operations functors@endlink.
 554:/usr/include/c++/6/bits/stl_function.h ****   template<>
 555:/usr/include/c++/6/bits/stl_function.h ****     struct logical_and<void>
 556:/usr/include/c++/6/bits/stl_function.h ****     {
 557:/usr/include/c++/6/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 558:/usr/include/c++/6/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 559:/usr/include/c++/6/bits/stl_function.h **** 	auto
 560:/usr/include/c++/6/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 561:/usr/include/c++/6/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) && std::forward<_Up>(__u)))
 562:/usr/include/c++/6/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) && std::forward<_Up>(__u))
 563:/usr/include/c++/6/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) && std::forward<_Up>(__u); }
 564:/usr/include/c++/6/bits/stl_function.h **** 
 565:/usr/include/c++/6/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 566:/usr/include/c++/6/bits/stl_function.h ****     };
 567:/usr/include/c++/6/bits/stl_function.h **** 
 568:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link logical_functors Boolean operations functors@endlink.
 569:/usr/include/c++/6/bits/stl_function.h ****   template<>
 570:/usr/include/c++/6/bits/stl_function.h ****     struct logical_or<void>
 571:/usr/include/c++/6/bits/stl_function.h ****     {
 572:/usr/include/c++/6/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 573:/usr/include/c++/6/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 574:/usr/include/c++/6/bits/stl_function.h **** 	auto
 575:/usr/include/c++/6/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 576:/usr/include/c++/6/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) || std::forward<_Up>(__u)))
 577:/usr/include/c++/6/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) || std::forward<_Up>(__u))
 578:/usr/include/c++/6/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) || std::forward<_Up>(__u); }
 579:/usr/include/c++/6/bits/stl_function.h **** 
 580:/usr/include/c++/6/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 581:/usr/include/c++/6/bits/stl_function.h ****     };
 582:/usr/include/c++/6/bits/stl_function.h **** 
 583:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link logical_functors Boolean operations functors@endlink.
 584:/usr/include/c++/6/bits/stl_function.h ****   template<>
 585:/usr/include/c++/6/bits/stl_function.h ****     struct logical_not<void>
 586:/usr/include/c++/6/bits/stl_function.h ****     {
 587:/usr/include/c++/6/bits/stl_function.h ****       template <typename _Tp>
 588:/usr/include/c++/6/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 589:/usr/include/c++/6/bits/stl_function.h **** 	auto
 590:/usr/include/c++/6/bits/stl_function.h **** 	operator()(_Tp&& __t) const
 591:/usr/include/c++/6/bits/stl_function.h **** 	noexcept(noexcept(!std::forward<_Tp>(__t)))
 592:/usr/include/c++/6/bits/stl_function.h **** 	-> decltype(!std::forward<_Tp>(__t))
 593:/usr/include/c++/6/bits/stl_function.h **** 	{ return !std::forward<_Tp>(__t); }
 594:/usr/include/c++/6/bits/stl_function.h **** 
 595:/usr/include/c++/6/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 596:/usr/include/c++/6/bits/stl_function.h ****     };
 597:/usr/include/c++/6/bits/stl_function.h **** #endif
 598:/usr/include/c++/6/bits/stl_function.h ****   /** @}  */
 599:/usr/include/c++/6/bits/stl_function.h **** 
 600:/usr/include/c++/6/bits/stl_function.h **** #if __cplusplus > 201103L
 601:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp = void>
 602:/usr/include/c++/6/bits/stl_function.h ****     struct bit_and;
 603:/usr/include/c++/6/bits/stl_function.h **** 
 604:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp = void>
 605:/usr/include/c++/6/bits/stl_function.h ****     struct bit_or;
 606:/usr/include/c++/6/bits/stl_function.h **** 
 607:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp = void>
 608:/usr/include/c++/6/bits/stl_function.h ****     struct bit_xor;
 609:/usr/include/c++/6/bits/stl_function.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 165


 610:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp = void>
 611:/usr/include/c++/6/bits/stl_function.h ****     struct bit_not;
 612:/usr/include/c++/6/bits/stl_function.h **** #endif
 613:/usr/include/c++/6/bits/stl_function.h **** 
 614:/usr/include/c++/6/bits/stl_function.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 615:/usr/include/c++/6/bits/stl_function.h ****   // DR 660. Missing Bitwise Operations.
 616:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp>
 617:/usr/include/c++/6/bits/stl_function.h ****     struct bit_and : public binary_function<_Tp, _Tp, _Tp>
 618:/usr/include/c++/6/bits/stl_function.h ****     {
 619:/usr/include/c++/6/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 620:/usr/include/c++/6/bits/stl_function.h ****       _Tp
 621:/usr/include/c++/6/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 622:/usr/include/c++/6/bits/stl_function.h ****       { return __x & __y; }
 623:/usr/include/c++/6/bits/stl_function.h ****     };
 624:/usr/include/c++/6/bits/stl_function.h **** 
 625:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp>
 626:/usr/include/c++/6/bits/stl_function.h ****     struct bit_or : public binary_function<_Tp, _Tp, _Tp>
 627:/usr/include/c++/6/bits/stl_function.h ****     {
 628:/usr/include/c++/6/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 629:/usr/include/c++/6/bits/stl_function.h ****       _Tp
 630:/usr/include/c++/6/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 631:/usr/include/c++/6/bits/stl_function.h ****       { return __x | __y; }
 632:/usr/include/c++/6/bits/stl_function.h ****     };
 633:/usr/include/c++/6/bits/stl_function.h **** 
 634:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp>
 635:/usr/include/c++/6/bits/stl_function.h ****     struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
 636:/usr/include/c++/6/bits/stl_function.h ****     {
 637:/usr/include/c++/6/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 638:/usr/include/c++/6/bits/stl_function.h ****       _Tp
 639:/usr/include/c++/6/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 640:/usr/include/c++/6/bits/stl_function.h ****       { return __x ^ __y; }
 641:/usr/include/c++/6/bits/stl_function.h ****     };
 642:/usr/include/c++/6/bits/stl_function.h **** 
 643:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp>
 644:/usr/include/c++/6/bits/stl_function.h ****     struct bit_not : public unary_function<_Tp, _Tp>
 645:/usr/include/c++/6/bits/stl_function.h ****     {
 646:/usr/include/c++/6/bits/stl_function.h ****     _GLIBCXX14_CONSTEXPR
 647:/usr/include/c++/6/bits/stl_function.h ****       _Tp
 648:/usr/include/c++/6/bits/stl_function.h ****       operator()(const _Tp& __x) const
 649:/usr/include/c++/6/bits/stl_function.h ****       { return ~__x; }
 650:/usr/include/c++/6/bits/stl_function.h ****     };
 651:/usr/include/c++/6/bits/stl_function.h **** 
 652:/usr/include/c++/6/bits/stl_function.h **** #if __cplusplus > 201103L
 653:/usr/include/c++/6/bits/stl_function.h ****   template <>
 654:/usr/include/c++/6/bits/stl_function.h ****     struct bit_and<void>
 655:/usr/include/c++/6/bits/stl_function.h ****     {
 656:/usr/include/c++/6/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 657:/usr/include/c++/6/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 658:/usr/include/c++/6/bits/stl_function.h **** 	auto
 659:/usr/include/c++/6/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 660:/usr/include/c++/6/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) & std::forward<_Up>(__u)))
 661:/usr/include/c++/6/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) & std::forward<_Up>(__u))
 662:/usr/include/c++/6/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) & std::forward<_Up>(__u); }
 663:/usr/include/c++/6/bits/stl_function.h **** 
 664:/usr/include/c++/6/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 665:/usr/include/c++/6/bits/stl_function.h ****     };
 666:/usr/include/c++/6/bits/stl_function.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 166


 667:/usr/include/c++/6/bits/stl_function.h ****   template <>
 668:/usr/include/c++/6/bits/stl_function.h ****     struct bit_or<void>
 669:/usr/include/c++/6/bits/stl_function.h ****     {
 670:/usr/include/c++/6/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 671:/usr/include/c++/6/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 672:/usr/include/c++/6/bits/stl_function.h **** 	auto
 673:/usr/include/c++/6/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 674:/usr/include/c++/6/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) | std::forward<_Up>(__u)))
 675:/usr/include/c++/6/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) | std::forward<_Up>(__u))
 676:/usr/include/c++/6/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) | std::forward<_Up>(__u); }
 677:/usr/include/c++/6/bits/stl_function.h **** 
 678:/usr/include/c++/6/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 679:/usr/include/c++/6/bits/stl_function.h ****     };
 680:/usr/include/c++/6/bits/stl_function.h **** 
 681:/usr/include/c++/6/bits/stl_function.h ****   template <>
 682:/usr/include/c++/6/bits/stl_function.h ****     struct bit_xor<void>
 683:/usr/include/c++/6/bits/stl_function.h ****     {
 684:/usr/include/c++/6/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 685:/usr/include/c++/6/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 686:/usr/include/c++/6/bits/stl_function.h **** 	auto
 687:/usr/include/c++/6/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 688:/usr/include/c++/6/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u)))
 689:/usr/include/c++/6/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u))
 690:/usr/include/c++/6/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) ^ std::forward<_Up>(__u); }
 691:/usr/include/c++/6/bits/stl_function.h **** 
 692:/usr/include/c++/6/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 693:/usr/include/c++/6/bits/stl_function.h ****     };
 694:/usr/include/c++/6/bits/stl_function.h **** 
 695:/usr/include/c++/6/bits/stl_function.h ****   template <>
 696:/usr/include/c++/6/bits/stl_function.h ****     struct bit_not<void>
 697:/usr/include/c++/6/bits/stl_function.h ****     {
 698:/usr/include/c++/6/bits/stl_function.h ****       template <typename _Tp>
 699:/usr/include/c++/6/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 700:/usr/include/c++/6/bits/stl_function.h **** 	auto
 701:/usr/include/c++/6/bits/stl_function.h **** 	operator()(_Tp&& __t) const
 702:/usr/include/c++/6/bits/stl_function.h **** 	noexcept(noexcept(~std::forward<_Tp>(__t)))
 703:/usr/include/c++/6/bits/stl_function.h **** 	-> decltype(~std::forward<_Tp>(__t))
 704:/usr/include/c++/6/bits/stl_function.h **** 	{ return ~std::forward<_Tp>(__t); }
 705:/usr/include/c++/6/bits/stl_function.h **** 
 706:/usr/include/c++/6/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 707:/usr/include/c++/6/bits/stl_function.h ****     };
 708:/usr/include/c++/6/bits/stl_function.h **** #endif
 709:/usr/include/c++/6/bits/stl_function.h **** 
 710:/usr/include/c++/6/bits/stl_function.h ****   // 20.3.5 negators
 711:/usr/include/c++/6/bits/stl_function.h ****   /** @defgroup negators Negators
 712:/usr/include/c++/6/bits/stl_function.h ****    * @ingroup functors
 713:/usr/include/c++/6/bits/stl_function.h ****    *
 714:/usr/include/c++/6/bits/stl_function.h ****    *  The functions @c not1 and @c not2 each take a predicate functor
 715:/usr/include/c++/6/bits/stl_function.h ****    *  and return an instance of @c unary_negate or
 716:/usr/include/c++/6/bits/stl_function.h ****    *  @c binary_negate, respectively.  These classes are functors whose
 717:/usr/include/c++/6/bits/stl_function.h ****    *  @c operator() performs the stored predicate function and then returns
 718:/usr/include/c++/6/bits/stl_function.h ****    *  the negation of the result.
 719:/usr/include/c++/6/bits/stl_function.h ****    *
 720:/usr/include/c++/6/bits/stl_function.h ****    *  For example, given a vector of integers and a trivial predicate,
 721:/usr/include/c++/6/bits/stl_function.h ****    *  \code
 722:/usr/include/c++/6/bits/stl_function.h ****    *  struct IntGreaterThanThree
 723:/usr/include/c++/6/bits/stl_function.h ****    *    : public std::unary_function<int, bool>
GAS LISTING /tmp/ccvmoMuv.s 			page 167


 724:/usr/include/c++/6/bits/stl_function.h ****    *  {
 725:/usr/include/c++/6/bits/stl_function.h ****    *      bool operator() (int x) { return x > 3; }
 726:/usr/include/c++/6/bits/stl_function.h ****    *  };
 727:/usr/include/c++/6/bits/stl_function.h ****    *
 728:/usr/include/c++/6/bits/stl_function.h ****    *  std::find_if (v.begin(), v.end(), not1(IntGreaterThanThree()));
 729:/usr/include/c++/6/bits/stl_function.h ****    *  \endcode
 730:/usr/include/c++/6/bits/stl_function.h ****    *  The call to @c find_if will locate the first index (i) of @c v for which
 731:/usr/include/c++/6/bits/stl_function.h ****    *  <code>!(v[i] > 3)</code> is true.
 732:/usr/include/c++/6/bits/stl_function.h ****    *
 733:/usr/include/c++/6/bits/stl_function.h ****    *  The not1/unary_negate combination works on predicates taking a single
 734:/usr/include/c++/6/bits/stl_function.h ****    *  argument.  The not2/binary_negate combination works on predicates which
 735:/usr/include/c++/6/bits/stl_function.h ****    *  take two arguments.
 736:/usr/include/c++/6/bits/stl_function.h ****    *
 737:/usr/include/c++/6/bits/stl_function.h ****    *  @{
 738:/usr/include/c++/6/bits/stl_function.h ****    */
 739:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link negators negation functors@endlink.
 740:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Predicate>
 741:/usr/include/c++/6/bits/stl_function.h ****     class unary_negate
 742:/usr/include/c++/6/bits/stl_function.h ****     : public unary_function<typename _Predicate::argument_type, bool>
 743:/usr/include/c++/6/bits/stl_function.h ****     {
 744:/usr/include/c++/6/bits/stl_function.h ****     protected:
 745:/usr/include/c++/6/bits/stl_function.h ****       _Predicate _M_pred;
 746:/usr/include/c++/6/bits/stl_function.h **** 
 747:/usr/include/c++/6/bits/stl_function.h ****     public:
 748:/usr/include/c++/6/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 749:/usr/include/c++/6/bits/stl_function.h ****       explicit
 750:/usr/include/c++/6/bits/stl_function.h ****       unary_negate(const _Predicate& __x) : _M_pred(__x) { }
 751:/usr/include/c++/6/bits/stl_function.h **** 
 752:/usr/include/c++/6/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 753:/usr/include/c++/6/bits/stl_function.h ****       bool
 754:/usr/include/c++/6/bits/stl_function.h ****       operator()(const typename _Predicate::argument_type& __x) const
 755:/usr/include/c++/6/bits/stl_function.h ****       { return !_M_pred(__x); }
 756:/usr/include/c++/6/bits/stl_function.h ****     };
 757:/usr/include/c++/6/bits/stl_function.h **** 
 758:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link negators negation functors@endlink.
 759:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Predicate>
 760:/usr/include/c++/6/bits/stl_function.h ****     _GLIBCXX14_CONSTEXPR
 761:/usr/include/c++/6/bits/stl_function.h ****     inline unary_negate<_Predicate>
 762:/usr/include/c++/6/bits/stl_function.h ****     not1(const _Predicate& __pred)
 763:/usr/include/c++/6/bits/stl_function.h ****     { return unary_negate<_Predicate>(__pred); }
 764:/usr/include/c++/6/bits/stl_function.h **** 
 765:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link negators negation functors@endlink.
 766:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Predicate>
 767:/usr/include/c++/6/bits/stl_function.h ****     class binary_negate
 768:/usr/include/c++/6/bits/stl_function.h ****     : public binary_function<typename _Predicate::first_argument_type,
 769:/usr/include/c++/6/bits/stl_function.h **** 			     typename _Predicate::second_argument_type, bool>
 770:/usr/include/c++/6/bits/stl_function.h ****     {
 771:/usr/include/c++/6/bits/stl_function.h ****     protected:
 772:/usr/include/c++/6/bits/stl_function.h ****       _Predicate _M_pred;
 773:/usr/include/c++/6/bits/stl_function.h **** 
 774:/usr/include/c++/6/bits/stl_function.h ****     public:
 775:/usr/include/c++/6/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 776:/usr/include/c++/6/bits/stl_function.h ****       explicit
 777:/usr/include/c++/6/bits/stl_function.h ****       binary_negate(const _Predicate& __x) : _M_pred(__x) { }
 778:/usr/include/c++/6/bits/stl_function.h **** 
 779:/usr/include/c++/6/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 780:/usr/include/c++/6/bits/stl_function.h ****       bool
GAS LISTING /tmp/ccvmoMuv.s 			page 168


 781:/usr/include/c++/6/bits/stl_function.h ****       operator()(const typename _Predicate::first_argument_type& __x,
 782:/usr/include/c++/6/bits/stl_function.h **** 		 const typename _Predicate::second_argument_type& __y) const
 783:/usr/include/c++/6/bits/stl_function.h ****       { return !_M_pred(__x, __y); }
 784:/usr/include/c++/6/bits/stl_function.h ****     };
 785:/usr/include/c++/6/bits/stl_function.h **** 
 786:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link negators negation functors@endlink.
 787:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Predicate>
 788:/usr/include/c++/6/bits/stl_function.h ****     _GLIBCXX14_CONSTEXPR
 789:/usr/include/c++/6/bits/stl_function.h ****     inline binary_negate<_Predicate>
 790:/usr/include/c++/6/bits/stl_function.h ****     not2(const _Predicate& __pred)
 791:/usr/include/c++/6/bits/stl_function.h ****     { return binary_negate<_Predicate>(__pred); }
 792:/usr/include/c++/6/bits/stl_function.h ****   /** @}  */
 793:/usr/include/c++/6/bits/stl_function.h **** 
 794:/usr/include/c++/6/bits/stl_function.h ****   // 20.3.7 adaptors pointers functions
 795:/usr/include/c++/6/bits/stl_function.h ****   /** @defgroup pointer_adaptors Adaptors for pointers to functions
 796:/usr/include/c++/6/bits/stl_function.h ****    * @ingroup functors
 797:/usr/include/c++/6/bits/stl_function.h ****    *
 798:/usr/include/c++/6/bits/stl_function.h ****    *  The advantage of function objects over pointers to functions is that
 799:/usr/include/c++/6/bits/stl_function.h ****    *  the objects in the standard library declare nested typedefs describing
 800:/usr/include/c++/6/bits/stl_function.h ****    *  their argument and result types with uniform names (e.g., @c result_type
 801:/usr/include/c++/6/bits/stl_function.h ****    *  from the base classes @c unary_function and @c binary_function).
 802:/usr/include/c++/6/bits/stl_function.h ****    *  Sometimes those typedefs are required, not just optional.
 803:/usr/include/c++/6/bits/stl_function.h ****    *
 804:/usr/include/c++/6/bits/stl_function.h ****    *  Adaptors are provided to turn pointers to unary (single-argument) and
 805:/usr/include/c++/6/bits/stl_function.h ****    *  binary (double-argument) functions into function objects.  The
 806:/usr/include/c++/6/bits/stl_function.h ****    *  long-winded functor @c pointer_to_unary_function is constructed with a
 807:/usr/include/c++/6/bits/stl_function.h ****    *  function pointer @c f, and its @c operator() called with argument @c x
 808:/usr/include/c++/6/bits/stl_function.h ****    *  returns @c f(x).  The functor @c pointer_to_binary_function does the same
 809:/usr/include/c++/6/bits/stl_function.h ****    *  thing, but with a double-argument @c f and @c operator().
 810:/usr/include/c++/6/bits/stl_function.h ****    *
 811:/usr/include/c++/6/bits/stl_function.h ****    *  The function @c ptr_fun takes a pointer-to-function @c f and constructs
 812:/usr/include/c++/6/bits/stl_function.h ****    *  an instance of the appropriate functor.
 813:/usr/include/c++/6/bits/stl_function.h ****    *
 814:/usr/include/c++/6/bits/stl_function.h ****    *  @{
 815:/usr/include/c++/6/bits/stl_function.h ****    */
 816:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link pointer_adaptors adaptors for function pointers@endlink.
 817:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Arg, typename _Result>
 818:/usr/include/c++/6/bits/stl_function.h ****     class pointer_to_unary_function : public unary_function<_Arg, _Result>
 819:/usr/include/c++/6/bits/stl_function.h ****     {
 820:/usr/include/c++/6/bits/stl_function.h ****     protected:
 821:/usr/include/c++/6/bits/stl_function.h ****       _Result (*_M_ptr)(_Arg);
 822:/usr/include/c++/6/bits/stl_function.h **** 
 823:/usr/include/c++/6/bits/stl_function.h ****     public:
 824:/usr/include/c++/6/bits/stl_function.h ****       pointer_to_unary_function() { }
 825:/usr/include/c++/6/bits/stl_function.h **** 
 826:/usr/include/c++/6/bits/stl_function.h ****       explicit
 827:/usr/include/c++/6/bits/stl_function.h ****       pointer_to_unary_function(_Result (*__x)(_Arg))
 828:/usr/include/c++/6/bits/stl_function.h ****       : _M_ptr(__x) { }
 829:/usr/include/c++/6/bits/stl_function.h **** 
 830:/usr/include/c++/6/bits/stl_function.h ****       _Result
 831:/usr/include/c++/6/bits/stl_function.h ****       operator()(_Arg __x) const
 832:/usr/include/c++/6/bits/stl_function.h ****       { return _M_ptr(__x); }
 833:/usr/include/c++/6/bits/stl_function.h ****     };
 834:/usr/include/c++/6/bits/stl_function.h **** 
 835:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link pointer_adaptors adaptors for function pointers@endlink.
 836:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Arg, typename _Result>
 837:/usr/include/c++/6/bits/stl_function.h ****     inline pointer_to_unary_function<_Arg, _Result>
GAS LISTING /tmp/ccvmoMuv.s 			page 169


 838:/usr/include/c++/6/bits/stl_function.h ****     ptr_fun(_Result (*__x)(_Arg))
 839:/usr/include/c++/6/bits/stl_function.h ****     { return pointer_to_unary_function<_Arg, _Result>(__x); }
 840:/usr/include/c++/6/bits/stl_function.h **** 
 841:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link pointer_adaptors adaptors for function pointers@endlink.
 842:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Arg1, typename _Arg2, typename _Result>
 843:/usr/include/c++/6/bits/stl_function.h ****     class pointer_to_binary_function
 844:/usr/include/c++/6/bits/stl_function.h ****     : public binary_function<_Arg1, _Arg2, _Result>
 845:/usr/include/c++/6/bits/stl_function.h ****     {
 846:/usr/include/c++/6/bits/stl_function.h ****     protected:
 847:/usr/include/c++/6/bits/stl_function.h ****       _Result (*_M_ptr)(_Arg1, _Arg2);
 848:/usr/include/c++/6/bits/stl_function.h **** 
 849:/usr/include/c++/6/bits/stl_function.h ****     public:
 850:/usr/include/c++/6/bits/stl_function.h ****       pointer_to_binary_function() { }
 851:/usr/include/c++/6/bits/stl_function.h **** 
 852:/usr/include/c++/6/bits/stl_function.h ****       explicit
 853:/usr/include/c++/6/bits/stl_function.h ****       pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
 854:/usr/include/c++/6/bits/stl_function.h ****       : _M_ptr(__x) { }
 855:/usr/include/c++/6/bits/stl_function.h **** 
 856:/usr/include/c++/6/bits/stl_function.h ****       _Result
 857:/usr/include/c++/6/bits/stl_function.h ****       operator()(_Arg1 __x, _Arg2 __y) const
 858:/usr/include/c++/6/bits/stl_function.h ****       { return _M_ptr(__x, __y); }
 859:/usr/include/c++/6/bits/stl_function.h ****     };
 860:/usr/include/c++/6/bits/stl_function.h **** 
 861:/usr/include/c++/6/bits/stl_function.h ****   /// One of the @link pointer_adaptors adaptors for function pointers@endlink.
 862:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Arg1, typename _Arg2, typename _Result>
 863:/usr/include/c++/6/bits/stl_function.h ****     inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
 864:/usr/include/c++/6/bits/stl_function.h ****     ptr_fun(_Result (*__x)(_Arg1, _Arg2))
 865:/usr/include/c++/6/bits/stl_function.h ****     { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }
 866:/usr/include/c++/6/bits/stl_function.h ****   /** @}  */
 867:/usr/include/c++/6/bits/stl_function.h **** 
 868:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Tp>
 869:/usr/include/c++/6/bits/stl_function.h ****     struct _Identity
 870:/usr/include/c++/6/bits/stl_function.h ****     : public unary_function<_Tp,_Tp>
 871:/usr/include/c++/6/bits/stl_function.h ****     {
 872:/usr/include/c++/6/bits/stl_function.h ****       _Tp&
 873:/usr/include/c++/6/bits/stl_function.h ****       operator()(_Tp& __x) const
 874:/usr/include/c++/6/bits/stl_function.h ****       { return __x; }
 875:/usr/include/c++/6/bits/stl_function.h **** 
 876:/usr/include/c++/6/bits/stl_function.h ****       const _Tp&
 877:/usr/include/c++/6/bits/stl_function.h ****       operator()(const _Tp& __x) const
 878:/usr/include/c++/6/bits/stl_function.h ****       { return __x; }
 879:/usr/include/c++/6/bits/stl_function.h ****     };
 880:/usr/include/c++/6/bits/stl_function.h **** 
 881:/usr/include/c++/6/bits/stl_function.h ****   template<typename _Pair>
 882:/usr/include/c++/6/bits/stl_function.h ****     struct _Select1st
 883:/usr/include/c++/6/bits/stl_function.h ****     : public unary_function<_Pair, typename _Pair::first_type>
 884:/usr/include/c++/6/bits/stl_function.h ****     {
 885:/usr/include/c++/6/bits/stl_function.h ****       typename _Pair::first_type&
 886:/usr/include/c++/6/bits/stl_function.h ****       operator()(_Pair& __x) const
 887:/usr/include/c++/6/bits/stl_function.h ****       { return __x.first; }
 888:/usr/include/c++/6/bits/stl_function.h **** 
 889:/usr/include/c++/6/bits/stl_function.h ****       const typename _Pair::first_type&
 890:/usr/include/c++/6/bits/stl_function.h ****       operator()(const _Pair& __x) const
 891:/usr/include/c++/6/bits/stl_function.h ****       { return __x.first; }
 1841              		.loc 20 891 0
 1842 0434 488D7B20 		leaq	32(%rbx), %rdi
 1843              	.LBE13042:
GAS LISTING /tmp/ccvmoMuv.s 			page 170


 1844              	.LBE13041:
 1845              	.LBE13040:
 1846              	.LBB13043:
 1847              	.LBB13044:
 1848              		.file 21 "/home/mpiscopo/gnuradio/include/pmt/pmt.h"
   1:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /* -*- c++ -*- */
   2:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*
   3:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * Copyright 2006,2009,2010,2013 Free Software Foundation, Inc.
   4:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
   5:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * This file is part of GNU Radio
   6:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
   7:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * GNU Radio is free software; you can redistribute it and/or modify
   8:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * it under the terms of the GNU General Public License as published by
   9:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * the Free Software Foundation; either version 3, or (at your option)
  10:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * any later version.
  11:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
  12:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * GNU Radio is distributed in the hope that it will be useful,
  13:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * GNU General Public License for more details.
  16:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
  17:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * You should have received a copy of the GNU General Public License
  18:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * along with GNU Radio; see the file COPYING.  If not, write to
  19:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * the Free Software Foundation, Inc., 51 Franklin Street,
  20:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * Boston, MA 02110-1301, USA.
  21:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
  22:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
  23:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** #ifndef INCLUDED_PMT_H
  24:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** #define INCLUDED_PMT_H
  25:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
  26:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** #include <pmt/api.h>
  27:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** #include <boost/intrusive_ptr.hpp>
  28:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** #include <boost/shared_ptr.hpp>
  29:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** #include <boost/any.hpp>
  30:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** #include <complex>
  31:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** #include <string>
  32:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** #include <stdint.h>
  33:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** #include <iosfwd>
  34:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** #include <stdexcept>
  35:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** #include <vector>
  36:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
  37:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** namespace gr {
  38:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****   namespace messages {
  39:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****     class msg_accepter;
  40:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****   }
  41:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** }
  42:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
  43:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
  44:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * This file defines a polymorphic type and the operations on it.
  45:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
  46:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * It draws heavily on the idea of scheme and lisp data types.
  47:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * The interface parallels that in Guile 1.8, with the notable
  48:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * exception that these objects are transparently reference counted.
  49:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
  50:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
  51:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** namespace pmt {
  52:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 171


  53:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
  54:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief base class of all pmt types
  55:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
  56:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** class pmt_base;
  57:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
  58:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
  59:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief typedef for shared pointer (transparent reference counting).
  60:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * See http://www.boost.org/libs/smart_ptr/smart_ptr.htm
  61:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
  62:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** typedef boost::intrusive_ptr<pmt_base> pmt_t;
  63:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
  64:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** extern PMT_API void intrusive_ptr_add_ref(pmt_base*);
  65:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** extern PMT_API void intrusive_ptr_release(pmt_base*);
  66:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
  67:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** class PMT_API exception : public std::logic_error
  68:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** {
  69:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** public:
  70:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****   exception(const std::string &msg, pmt_t obj);
  71:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** };
  72:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
  73:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** class PMT_API wrong_type : public exception
  74:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** {
  75:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** public:
  76:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****   wrong_type(const std::string &msg, pmt_t obj);
  77:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** };
  78:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
  79:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** class PMT_API out_of_range : public exception
  80:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** {
  81:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** public:
  82:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****   out_of_range(const std::string &msg, pmt_t obj);
  83:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** };
  84:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
  85:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** class PMT_API notimplemented : public exception
  86:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** {
  87:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** public:
  88:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****   notimplemented(const std::string &msg, pmt_t obj);
  89:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** };
  90:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
  91:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
  92:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*
  93:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
  94:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * Constants
  95:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
  96:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
  97:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
  98:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t get_PMT_NIL();
  99:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t get_PMT_T();
 100:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t get_PMT_F();
 101:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t get_PMT_EOF();
 102:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 103:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** #define PMT_NIL get_PMT_NIL()
 104:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** #define PMT_T get_PMT_T()
 105:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** #define PMT_F get_PMT_F()
 106:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** #define PMT_EOF get_PMT_EOF()
 107:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 108:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 109:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 172


 110:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*
 111:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 112:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * Booleans.  Two constants, #t and #f.
 113:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
 114:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * In predicates, anything that is not #f is considered true.
 115:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * I.e., there is a single false value, #f.
 116:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 117:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 118:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 119:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return true if obj is \#t or \#f, else return false.
 120:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_bool(pmt_t obj);
 121:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 122:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return false if obj is \#f, else return true.
 123:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_true(pmt_t obj);
 124:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 125:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return true if obj is \#f, else return true.
 126:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_false(pmt_t obj);
 127:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 128:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return \#f is val is false, else return \#t.
 129:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t from_bool(bool val);
 130:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 131:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return true if val is pmt::True, return false when val is pmt::PMT_F,
 132:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** // else raise wrong_type exception.
 133:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool to_bool(pmt_t val);
 134:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 135:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*
 136:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 137:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *			       Symbols
 138:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 139:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 140:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 141:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return true if obj is a symbol, else false.
 142:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_symbol(const pmt_t& obj);
 143:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 144:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return the symbol whose name is \p s.
 145:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t string_to_symbol(const std::string &s);
 146:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 147:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Alias for pmt_string_to_symbol
 148:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t intern(const std::string &s);
 149:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 150:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 151:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 152:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * If \p is a symbol, return the name of the symbol as a string.
 153:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * Otherwise, raise the wrong_type exception.
 154:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 155:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::string symbol_to_string(const pmt_t& sym);
 156:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 157:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*
 158:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 159:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *           Numbers: we support integer, real and complex
 160:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 161:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 162:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 163:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return true if obj is any kind of number, else false.
 164:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_number(pmt_t obj);
 165:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 166:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*
GAS LISTING /tmp/ccvmoMuv.s 			page 173


 167:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 168:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *			       Integers
 169:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 170:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 171:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 172:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return true if \p x is an integer number, else false
 173:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_integer(pmt_t x);
 174:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 175:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return the pmt value that represents the integer \p x.
 176:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t from_long(long x);
 177:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 178:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 179:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Convert pmt to long if possible.
 180:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
 181:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * When \p x represents an exact integer that fits in a long,
 182:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * return that integer.  Else raise an exception, either wrong_type
 183:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * when x is not an exact integer, or out_of_range when it doesn't fit.
 184:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 185:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API long to_long(pmt_t x);
 186:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 187:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*
 188:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 189:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *			       uint64_t
 190:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 191:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 192:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 193:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return true if \p x is an uint64 number, else false
 194:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_uint64(pmt_t x);
 195:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 196:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return the pmt value that represents the uint64 \p x.
 197:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t from_uint64(uint64_t x);
 198:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 199:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 200:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Convert pmt to uint64 if possible.
 201:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
 202:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * When \p x represents an exact integer that fits in a uint64,
 203:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * return that uint64.  Else raise an exception, either wrong_type
 204:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * when x is not an exact uint64, or out_of_range when it doesn't fit.
 205:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 206:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API uint64_t to_uint64(pmt_t x);
 207:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 208:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*
 209:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 210:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *				Reals
 211:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 212:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 213:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 214:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*
 215:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Return true if \p obj is a real number, else false.
 216:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 217:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_real(pmt_t obj);
 218:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 219:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return the pmt value that represents double \p x.
 220:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t from_double(double x);
 221:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t from_float(float x);
 222:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 223:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
GAS LISTING /tmp/ccvmoMuv.s 			page 174


 224:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Convert pmt to double if possible.
 225:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
 226:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * Returns the number closest to \p val that is representable
 227:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * as a double.  The argument \p val must be a real or integer, otherwise
 228:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * a wrong_type exception is raised.
 229:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 230:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API double to_double(pmt_t x);
 231:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 232:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 233:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Convert pmt to float if possible.
 234:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
 235:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * This basically is to_double() with a type-cast; the PMT stores
 236:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * the value as a double in any case. Use this when strict typing
 237:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * is required.
 238:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 239:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API float to_float(pmt_t x);
 240:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 241:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*
 242:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 243:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *			       Complex
 244:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 245:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 246:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 247:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 248:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief return true if \p obj is a complex number, false otherwise.
 249:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 250:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_complex(pmt_t obj);
 251:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 252:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return a complex number constructed of the given real and imaginary parts.
 253:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_rectangular(double re, double im);
 254:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 255:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return a complex number constructed of the given real and imaginary parts.
 256:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t from_complex(double re, double im);
 257:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 258:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return a complex number constructed of the given a complex number.
 259:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t from_complex(const std::complex<double> &z);
 260:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 261:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return a complex number constructed of the given real and imaginary parts.
 262:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t pmt_from_complex(double re, double im);
 263:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 264:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return a complex number constructed of the given a complex number.
 265:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t pmt_from_complex(const std::complex<double> &z);
 266:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 267:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 268:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * If \p z is complex, real or integer, return the closest complex<double>.
 269:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * Otherwise, raise the wrong_type exception.
 270:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 271:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API std::complex<double> to_complex(pmt_t z);
 272:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 273:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*
 274:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 275:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *				Pairs
 276:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 277:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 278:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 279:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return true if \p x is the empty list, otherwise return false.
 280:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_null(const pmt_t& x);
GAS LISTING /tmp/ccvmoMuv.s 			page 175


 281:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 282:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return true if \p obj is a pair, else false (warning: also returns true for a dict)
 283:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_pair(const pmt_t& obj);
 284:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 285:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return a newly allocated pair whose car is \p x and whose cdr is \p y.
 286:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t cons(const pmt_t& x, const pmt_t& y);
 287:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 288:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! If \p pair is a pair, return the car of the \p pair, otherwise raise wrong_type.
 289:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t car(const pmt_t& pair);
 290:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 291:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! If \p pair is a pair, return the cdr of the \p pair, otherwise raise wrong_type.
 292:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t cdr(const pmt_t& pair);
 293:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 294:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Stores \p value in the car field of \p pair.
 295:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API void set_car(pmt_t pair, pmt_t value);
 296:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 297:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Stores \p value in the cdr field of \p pair.
 298:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API void set_cdr(pmt_t pair, pmt_t value);
 299:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 300:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t caar(pmt_t pair);
 301:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t cadr(pmt_t pair);
 302:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t cdar(pmt_t pair);
 303:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t cddr(pmt_t pair);
 304:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t caddr(pmt_t pair);
 305:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t cadddr(pmt_t pair);
 306:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 307:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*
 308:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 309:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *			          Tuples
 310:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
 311:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * Store a fixed number of objects.  Tuples are not modifiable, and thus
 312:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * are excellent for use as messages.  Indexing is zero based.
 313:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * Access time to an element is O(1).
 314:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 315:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 316:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 317:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return true if \p x is a tuple, othewise false.
 318:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_tuple(pmt_t x);
 319:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 320:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_tuple();
 321:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_tuple(const pmt_t &e0);
 322:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_tuple(const pmt_t &e0, const pmt_t &e1);
 323:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_tuple(const pmt_t &e0, const pmt_t &e1, const pmt_t &e2);
 324:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_tuple(const pmt_t &e0, const pmt_t &e1, const pmt_t &e2, const pmt_t &e3);
 325:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_tuple(const pmt_t &e0, const pmt_t &e1, const pmt_t &e2, const pmt_t &e3, const 
 326:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_tuple(const pmt_t &e0, const pmt_t &e1, const pmt_t &e2, const pmt_t &e3, const 
 327:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_tuple(const pmt_t &e0, const pmt_t &e1, const pmt_t &e2, const pmt_t &e3, const 
 328:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_tuple(const pmt_t &e0, const pmt_t &e1, const pmt_t &e2, const pmt_t &e3, const 
 329:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_tuple(const pmt_t &e0, const pmt_t &e1, const pmt_t &e2, const pmt_t &e3, const 
 330:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_tuple(const pmt_t &e0, const pmt_t &e1, const pmt_t &e2, const pmt_t &e3, const 
 331:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 332:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 333:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * If \p x is a vector or proper list, return a tuple containing the elements of x
 334:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 335:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t to_tuple(const pmt_t &x);
 336:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 337:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
GAS LISTING /tmp/ccvmoMuv.s 			page 176


 338:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * Return the contents of position \p k of \p tuple.
 339:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \p k must be a valid index of \p tuple.
 340:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 341:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t tuple_ref(const pmt_t &tuple, size_t k);
 342:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 343:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*
 344:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 345:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *			       Vectors
 346:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
 347:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * These vectors can hold any kind of objects.  Indexing is zero based.
 348:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 349:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 350:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 351:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return true if \p x is a vector, othewise false.
 352:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_vector(pmt_t x);
 353:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 354:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Make a vector of length \p k, with initial values set to \p fill
 355:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_vector(size_t k, pmt_t fill);
 356:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 357:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 358:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * Return the contents of position \p k of \p vector.
 359:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \p k must be a valid index of \p vector.
 360:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 361:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t vector_ref(pmt_t vector, size_t k);
 362:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 363:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Store \p obj in position \p k.
 364:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API void vector_set(pmt_t vector, size_t k, pmt_t obj);
 365:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 366:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Store \p fill in every position of \p vector
 367:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API void vector_fill(pmt_t vector, pmt_t fill);
 368:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 369:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*
 370:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 371:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *		      Binary Large Objects (BLOBs)
 372:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
 373:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * Handy for passing around uninterpreted chunks of memory.
 374:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 375:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 376:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 377:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return true if \p x is a blob, othewise false.
 378:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_blob(pmt_t x);
 379:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 380:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 381:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Make a blob given a pointer and length in bytes
 382:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
 383:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \param buf is the pointer to data to use to create blob
 384:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \param len is the size of the data in bytes.
 385:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
 386:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * The data is copied into the blob.
 387:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 388:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_blob(const void *buf, size_t len);
 389:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 390:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return a pointer to the blob's data
 391:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const void *blob_data(pmt_t blob);
 392:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 393:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return the blob's length in bytes
 394:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API size_t blob_length(pmt_t blob);
GAS LISTING /tmp/ccvmoMuv.s 			page 177


 395:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 396:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 397:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * <pre>
 398:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *		       Uniform Numeric Vectors
 399:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
 400:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * A uniform numeric vector is a vector whose elements are all of single
 401:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * numeric type.  pmt offers uniform numeric vectors for signed and
 402:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * unsigned 8-bit, 16-bit, 32-bit, and 64-bit integers, two sizes of
 403:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * floating point values, and complex floating-point numbers of these
 404:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * two sizes.  Indexing is zero based.
 405:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
 406:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * The names of the functions include these tags in their names:
 407:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
 408:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *    u8  unsigned 8-bit integers
 409:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *    s8  signed 8-bit integers
 410:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *   u16  unsigned 16-bit integers
 411:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *   s16  signed 16-bit integers
 412:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *   u32  unsigned 32-bit integers
 413:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *   s32  signed 32-bit integers
 414:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *   u64  unsigned 64-bit integers
 415:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *   s64  signed 64-bit integers
 416:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *   f32  the C++ type float
 417:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *   f64  the C++ type double
 418:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *   c32  the C++ type complex<float>
 419:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *   c64  the C++ type complex<double>
 420:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * </pre>
 421:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 422:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 423:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! true if \p x is any kind of uniform numeric vector
 424:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_uniform_vector(pmt_t x);
 425:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 426:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_u8vector(pmt_t x);
 427:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_s8vector(pmt_t x);
 428:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_u16vector(pmt_t x);
 429:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_s16vector(pmt_t x);
 430:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_u32vector(pmt_t x);
 431:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_s32vector(pmt_t x);
 432:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_u64vector(pmt_t x);
 433:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_s64vector(pmt_t x);
 434:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_f32vector(pmt_t x);
 435:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_f64vector(pmt_t x);
 436:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_c32vector(pmt_t x);
 437:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_c64vector(pmt_t x);
 438:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 439:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! item size in bytes if \p x is any kind of uniform numeric vector
 440:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API size_t uniform_vector_itemsize(pmt_t x);
 441:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 442:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_u8vector(size_t k, uint8_t fill);
 443:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_s8vector(size_t k, int8_t fill);
 444:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_u16vector(size_t k, uint16_t fill);
 445:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_s16vector(size_t k, int16_t fill);
 446:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_u32vector(size_t k, uint32_t fill);
 447:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_s32vector(size_t k, int32_t fill);
 448:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_u64vector(size_t k, uint64_t fill);
 449:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_s64vector(size_t k, int64_t fill);
 450:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_f32vector(size_t k, float fill);
 451:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_f64vector(size_t k, double fill);
GAS LISTING /tmp/ccvmoMuv.s 			page 178


 452:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_c32vector(size_t k, std::complex<float> fill);
 453:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_c64vector(size_t k, std::complex<double> fill);
 454:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 455:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t init_u8vector(size_t k, const uint8_t *data);
 456:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t init_u8vector(size_t k, const std::vector<uint8_t> &data);
 457:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t init_s8vector(size_t k, const int8_t *data);
 458:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t init_s8vector(size_t k, const std::vector<int8_t> &data);
 459:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t init_u16vector(size_t k, const uint16_t *data);
 460:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t init_u16vector(size_t k, const std::vector<uint16_t> &data);
 461:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t init_s16vector(size_t k, const int16_t *data);
 462:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t init_s16vector(size_t k, const std::vector<int16_t> &data);
 463:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t init_u32vector(size_t k, const uint32_t *data);
 464:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t init_u32vector(size_t k, const std::vector<uint32_t> &data);
 465:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t init_s32vector(size_t k, const int32_t *data);
 466:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t init_s32vector(size_t k, const std::vector<int32_t> &data);
 467:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t init_u64vector(size_t k, const uint64_t *data);
 468:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t init_u64vector(size_t k, const std::vector<uint64_t> &data);
 469:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t init_s64vector(size_t k, const int64_t *data);
 470:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t init_s64vector(size_t k, const std::vector<int64_t> &data);
 471:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t init_f32vector(size_t k, const float *data);
 472:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t init_f32vector(size_t k, const std::vector<float> &data);
 473:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t init_f64vector(size_t k, const double *data);
 474:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t init_f64vector(size_t k, const std::vector<double> &data);
 475:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t init_c32vector(size_t k, const std::complex<float> *data);
 476:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t init_c32vector(size_t k, const std::vector<std::complex<float> > &data);
 477:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t init_c64vector(size_t k, const std::complex<double> *data);
 478:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t init_c64vector(size_t k, const std::vector<std::complex<double> > &data);
 479:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 480:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API uint8_t  u8vector_ref(pmt_t v, size_t k);
 481:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API int8_t   s8vector_ref(pmt_t v, size_t k);
 482:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API uint16_t u16vector_ref(pmt_t v, size_t k);
 483:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API int16_t  s16vector_ref(pmt_t v, size_t k);
 484:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API uint32_t u32vector_ref(pmt_t v, size_t k);
 485:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API int32_t  s32vector_ref(pmt_t v, size_t k);
 486:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API uint64_t u64vector_ref(pmt_t v, size_t k);
 487:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API int64_t  s64vector_ref(pmt_t v, size_t k);
 488:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API float    f32vector_ref(pmt_t v, size_t k);
 489:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API double   f64vector_ref(pmt_t v, size_t k);
 490:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API std::complex<float>  c32vector_ref(pmt_t v, size_t k);
 491:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API std::complex<double> c64vector_ref(pmt_t v, size_t k);
 492:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 493:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API void u8vector_set(pmt_t v, size_t k, uint8_t x);  //< v[k] = x
 494:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API void s8vector_set(pmt_t v, size_t k, int8_t x);
 495:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API void u16vector_set(pmt_t v, size_t k, uint16_t x);
 496:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API void s16vector_set(pmt_t v, size_t k, int16_t x);
 497:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API void u32vector_set(pmt_t v, size_t k, uint32_t x);
 498:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API void s32vector_set(pmt_t v, size_t k, int32_t x);
 499:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API void u64vector_set(pmt_t v, size_t k, uint64_t x);
 500:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API void s64vector_set(pmt_t v, size_t k, int64_t x);
 501:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API void f32vector_set(pmt_t v, size_t k, float x);
 502:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API void f64vector_set(pmt_t v, size_t k, double x);
 503:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API void c32vector_set(pmt_t v, size_t k, std::complex<float> x);
 504:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API void c64vector_set(pmt_t v, size_t k, std::complex<double> x);
 505:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 506:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** // Return const pointers to the elements
 507:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 508:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const void *uniform_vector_elements(pmt_t v, size_t &len);  //< works with any; len is in b
GAS LISTING /tmp/ccvmoMuv.s 			page 179


 509:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 510:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const uint8_t  *u8vector_elements(pmt_t v, size_t &len);  //< len is in elements
 511:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const int8_t   *s8vector_elements(pmt_t v, size_t &len);  //< len is in elements
 512:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const uint16_t *u16vector_elements(pmt_t v, size_t &len); //< len is in elements
 513:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const int16_t  *s16vector_elements(pmt_t v, size_t &len); //< len is in elements
 514:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const uint32_t *u32vector_elements(pmt_t v, size_t &len); //< len is in elements
 515:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const int32_t  *s32vector_elements(pmt_t v, size_t &len); //< len is in elements
 516:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const uint64_t *u64vector_elements(pmt_t v, size_t &len); //< len is in elements
 517:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const int64_t  *s64vector_elements(pmt_t v, size_t &len); //< len is in elements
 518:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const float    *f32vector_elements(pmt_t v, size_t &len); //< len is in elements
 519:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const double   *f64vector_elements(pmt_t v, size_t &len); //< len is in elements
 520:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::complex<float>  *c32vector_elements(pmt_t v, size_t &len); //< len is in element
 521:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::complex<double> *c64vector_elements(pmt_t v, size_t &len); //< len is in element
 522:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 523:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** // len is in elements
 524:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::vector<uint8_t>  u8vector_elements(pmt_t v);
 525:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::vector<int8_t>   s8vector_elements(pmt_t v);
 526:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::vector<uint16_t> u16vector_elements(pmt_t v);
 527:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::vector<int16_t>  s16vector_elements(pmt_t v);
 528:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::vector<uint32_t> u32vector_elements(pmt_t v);
 529:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::vector<int32_t>  s32vector_elements(pmt_t v);
 530:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::vector<uint64_t> u64vector_elements(pmt_t v);
 531:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::vector<int64_t>  s64vector_elements(pmt_t v);
 532:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::vector<float>    f32vector_elements(pmt_t v);
 533:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::vector<double>   f64vector_elements(pmt_t v);
 534:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::vector<std::complex<float> > c32vector_elements(pmt_t v);
 535:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::vector<std::complex<double> > c64vector_elements(pmt_t v);
 536:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 537:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** // len is in elements
 538:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::vector<uint8_t>  pmt_u8vector_elements(pmt_t v);
 539:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::vector<int8_t>   pmt_s8vector_elements(pmt_t v);
 540:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::vector<uint16_t> pmt_u16vector_elements(pmt_t v);
 541:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::vector<int16_t>  pmt_s16vector_elements(pmt_t v);
 542:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::vector<uint32_t> pmt_u32vector_elements(pmt_t v);
 543:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::vector<int32_t>  pmt_s32vector_elements(pmt_t v);
 544:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::vector<uint64_t> pmt_u64vector_elements(pmt_t v);
 545:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::vector<int64_t>  pmt_s64vector_elements(pmt_t v);
 546:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::vector<float>    pmt_f32vector_elements(pmt_t v);
 547:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::vector<double>   pmt_f64vector_elements(pmt_t v);
 548:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::vector<std::complex<float> > pmt_c32vector_elements(pmt_t v);
 549:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API const std::vector<std::complex<double> > pmt_c64vector_elements(pmt_t v);
 550:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 551:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** // Return non-const pointers to the elements
 552:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 553:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API void *uniform_vector_writable_elements(pmt_t v, size_t &len);  //< works with any; len is i
 554:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 555:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API uint8_t  *u8vector_writable_elements(pmt_t v, size_t &len);  //< len is in elements
 556:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API int8_t   *s8vector_writable_elements(pmt_t v, size_t &len);  //< len is in elements
 557:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API uint16_t *u16vector_writable_elements(pmt_t v, size_t &len); //< len is in elements
 558:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API int16_t  *s16vector_writable_elements(pmt_t v, size_t &len); //< len is in elements
 559:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API uint32_t *u32vector_writable_elements(pmt_t v, size_t &len); //< len is in elements
 560:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API int32_t  *s32vector_writable_elements(pmt_t v, size_t &len); //< len is in elements
 561:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API uint64_t *u64vector_writable_elements(pmt_t v, size_t &len); //< len is in elements
 562:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API int64_t  *s64vector_writable_elements(pmt_t v, size_t &len); //< len is in elements
 563:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API float    *f32vector_writable_elements(pmt_t v, size_t &len); //< len is in elements
 564:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API double   *f64vector_writable_elements(pmt_t v, size_t &len); //< len is in elements
 565:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API std::complex<float>  *c32vector_writable_elements(pmt_t v, size_t &len); //< len is in elem
GAS LISTING /tmp/ccvmoMuv.s 			page 180


 566:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API std::complex<double> *c64vector_writable_elements(pmt_t v, size_t &len); //< len is in elem
 567:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 568:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*
 569:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 570:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *	   Dictionary (a.k.a associative array, hash, map)
 571:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
 572:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * This is a functional data structure that is persistent.  Updating a
 573:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * functional data structure does not destroy the existing version, but
 574:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * rather creates a new version that coexists with the old.
 575:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 576:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 577:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 578:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return true if \p obj is a dictionary (warning: also returns true for a pair)
 579:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_dict(const pmt_t &obj);
 580:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 581:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Make an empty dictionary
 582:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_dict();
 583:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 584:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return a new dictionary with \p key associated with \p value.
 585:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t dict_add(const pmt_t &dict, const pmt_t &key, const pmt_t &value);
 586:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 587:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return a new dictionary with \p key removed.
 588:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t dict_delete(const pmt_t &dict, const pmt_t &key);
 589:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 590:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return true if \p key exists in \p dict
 591:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool  dict_has_key(const pmt_t &dict, const pmt_t &key);
 592:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 593:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! If \p key exists in \p dict, return associated value; otherwise return \p not_found.
 594:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t dict_ref(const pmt_t &dict, const pmt_t &key, const pmt_t &not_found);
 595:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 596:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return list of (key . value) pairs
 597:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t dict_items(pmt_t dict);
 598:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 599:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return list of keys
 600:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t dict_keys(pmt_t dict);
 601:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 602:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return a new dictionary \p dict1 with k=>v pairs from \p dict2 added.
 603:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t dict_update(const pmt_t &dict1, const pmt_t &dict2);
 604:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 605:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return list of values
 606:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t dict_values(pmt_t dict);
 607:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 608:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*
 609:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 610:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *   Any (wraps boost::any -- can be used to wrap pretty much anything)
 611:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
 612:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * Cannot be serialized or used across process boundaries.
 613:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * See http://www.boost.org/doc/html/any.html
 614:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 615:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 616:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 617:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return true if \p obj is an any
 618:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_any(pmt_t obj);
 619:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 620:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! make an any
 621:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_any(const boost::any &any);
 622:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 181


 623:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return underlying boost::any
 624:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API boost::any any_ref(pmt_t obj);
 625:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 626:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Store \p any in \p obj
 627:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API void any_set(pmt_t obj, const boost::any &any);
 628:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 629:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 630:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*
 631:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 632:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *    msg_accepter -- pmt representation of pmt::msg_accepter
 633:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 634:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 635:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return true if \p obj is a msg_accepter
 636:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_msg_accepter(const pmt_t &obj);
 637:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 638:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! make a msg_accepter
 639:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t make_msg_accepter(boost::shared_ptr<gr::messages::msg_accepter> ma);
 640:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 641:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return underlying msg_accepter
 642:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API boost::shared_ptr<gr::messages::msg_accepter> msg_accepter_ref(const pmt_t &obj);
 643:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 644:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*
 645:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 646:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *			  General functions
 647:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 648:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 649:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 650:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return true if x and y are the same object; otherwise return false.
 651:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool eq(const pmt_t& x, const pmt_t& y);
 652:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 653:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 654:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Return true if x and y should normally be regarded as the same object, else false.
 655:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
 656:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * <pre>
 657:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * eqv returns true if:
 658:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *   x and y are the same object.
 659:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *   x and y are both \#t or both \#f.
 660:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *   x and y are both symbols and their names are the same.
 661:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *   x and y are both numbers, and are numerically equal.
 662:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *   x and y are both the empty list (nil).
 663:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *   x and y are pairs or vectors that denote same location in store.
 664:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * </pre>
 665:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 666:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool eqv(const pmt_t& x, const pmt_t& y);
 667:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 668:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 669:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * pmt::equal recursively compares the contents of pairs and vectors,
 670:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * applying pmt::eqv on other objects such as numbers and symbols.
 671:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * pmt::equal may fail to terminate if its arguments are circular data
 672:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * structures.
 673:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 674:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool equal(const pmt_t& x, const pmt_t& y);
 675:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 676:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 677:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! Return the number of elements in v
 678:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API size_t length(const pmt_t& v);
 679:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 182


 680:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 681:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Find the first pair in \p alist whose car field is \p obj
 682:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *  and return that pair.
 683:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
 684:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \p alist (for "association list") must be a list of pairs.  If no pair
 685:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * in \p alist has \p obj as its car then \#f is returned.
 686:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * Uses pmt::eq to compare \p obj with car fields of the pairs in \p alist.
 687:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 688:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t assq(pmt_t obj, pmt_t alist);
 689:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 690:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 691:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Find the first pair in \p alist whose car field is \p obj
 692:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *  and return that pair.
 693:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
 694:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \p alist (for "association list") must be a list of pairs.  If no pair
 695:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * in \p alist has \p obj as its car then \#f is returned.
 696:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * Uses pmt::eqv to compare \p obj with car fields of the pairs in \p alist.
 697:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 698:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t assv(pmt_t obj, pmt_t alist);
 699:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 700:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 701:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Find the first pair in \p alist whose car field is \p obj
 702:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *  and return that pair.
 703:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
 704:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \p alist (for "association list") must be a list of pairs.  If no pair
 705:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * in \p alist has \p obj as its car then \#f is returned.
 706:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * Uses pmt::equal to compare \p obj with car fields of the pairs in \p alist.
 707:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 708:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t assoc(pmt_t obj, pmt_t alist);
 709:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 710:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 711:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Apply \p proc element-wise to the elements of list and returns
 712:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * a list of the results, in order.
 713:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
 714:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \p list must be a list.  The dynamic order in which \p proc is
 715:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * applied to the elements of \p list is unspecified.
 716:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 717:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t map(pmt_t proc(const pmt_t&), pmt_t list);
 718:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 719:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 720:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief reverse \p list.
 721:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
 722:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \p list must be a proper list.
 723:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 724:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t reverse(pmt_t list);
 725:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 726:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 727:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief destructively reverse \p list.
 728:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
 729:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \p list must be a proper list.
 730:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 731:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t reverse_x(pmt_t list);
 732:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 733:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 734:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief (acons x y a) == (cons (cons x y) a)
 735:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 736:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** inline static pmt_t
GAS LISTING /tmp/ccvmoMuv.s 			page 183


 737:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** acons(pmt_t x, pmt_t y, pmt_t a)
 738:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** {
 739:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****   return cons(cons(x, y), a);
 740:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** }
 741:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 742:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 743:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief locates \p nth element of \n list where the car is the 'zeroth' element.
 744:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 745:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t nth(size_t n, pmt_t list);
 746:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 747:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 748:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief returns the tail of \p list that would be obtained by calling
 749:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * cdr \p n times in succession.
 750:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 751:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t nthcdr(size_t n, pmt_t list);
 752:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 753:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 754:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Return the first sublist of \p list whose car is \p obj.
 755:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * If \p obj does not occur in \p list, then \#f is returned.
 756:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * pmt::memq use pmt::eq to compare \p obj with the elements of \p list.
 757:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 758:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t memq(pmt_t obj, pmt_t list);
 759:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 760:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 761:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Return the first sublist of \p list whose car is \p obj.
 762:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * If \p obj does not occur in \p list, then \#f is returned.
 763:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * pmt::memv use pmt::eqv to compare \p obj with the elements of \p list.
 764:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 765:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t memv(pmt_t obj, pmt_t list);
 766:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 767:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 768:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Return the first sublist of \p list whose car is \p obj.
 769:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * If \p obj does not occur in \p list, then \#f is returned.
 770:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * pmt::member use pmt::equal to compare \p obj with the elements of \p list.
 771:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 772:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t member(pmt_t obj, pmt_t list);
 773:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 774:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 775:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Return true if every element of \p list1 appears in \p list2, and false otherwise.
 776:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * Comparisons are done with pmt::eqv.
 777:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 778:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool subsetp(pmt_t list1, pmt_t list2);
 779:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 780:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 781:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Return a list of length 1 containing \p x1
 782:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 783:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t list1(const pmt_t& x1);
 784:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 785:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 786:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Return a list of length 2 containing \p x1, \p x2
 787:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 788:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t list2(const pmt_t& x1, const pmt_t& x2);
 789:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 790:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 791:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Return a list of length 3 containing \p x1, \p x2, \p x3
 792:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 793:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t list3(const pmt_t& x1, const pmt_t& x2, const pmt_t& x3);
GAS LISTING /tmp/ccvmoMuv.s 			page 184


 794:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 795:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 796:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Return a list of length 4 containing \p x1, \p x2, \p x3, \p x4
 797:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 798:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t list4(const pmt_t& x1, const pmt_t& x2, const pmt_t& x3, const pmt_t& x4);
 799:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 800:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 801:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Return a list of length 5 containing \p x1, \p x2, \p x3, \p x4, \p x5
 802:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 803:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t list5(const pmt_t& x1, const pmt_t& x2, const pmt_t& x3, const pmt_t& x4, const pmt_t
 804:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 805:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 806:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Return a list of length 6 containing \p x1, \p x2, \p x3, \p x4, \p
 807:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * x5, \p x6
 808:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 809:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t list6(const pmt_t& x1, const pmt_t& x2, const pmt_t& x3, const pmt_t& x4, const pmt_t
 810:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 811:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 812:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Return \p list with \p item added to it.
 813:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 814:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t list_add(pmt_t list, const pmt_t& item);
 815:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 816:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 817:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Return \p list with \p item removed from it.
 818:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 819:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t list_rm(pmt_t list, const pmt_t& item);
 820:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 821:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 822:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Return bool of \p list contains \p item
 823:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 824:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool list_has(pmt_t list, const pmt_t& item);
 825:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 826:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 827:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*
 828:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 829:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *			     read / write
 830:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 831:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 832:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 833:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** //! return true if obj is the EOF object, otherwise return false.
 834:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool is_eof_object(pmt_t obj);
 835:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 836:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 837:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * read converts external representations of pmt objects into the
 838:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * objects themselves.  Read returns the next object parsable from
 839:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * the given input port, updating port to point to the first
 840:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * character past the end of the external representation of the
 841:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * object.
 842:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *
 843:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * If an end of file is encountered in the input before any
 844:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * characters are found that can begin an object, then an end of file
 845:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * object is returned.   The port remains open, and further attempts
 846:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * to read will also return an end of file object.  If an end of file
 847:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * is encountered after the beginning of an object's external
 848:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * representation, but the external representation is incomplete and
 849:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * therefore not parsable, an error is signaled.
 850:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
GAS LISTING /tmp/ccvmoMuv.s 			page 185


 851:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t read(std::istream &port);
 852:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 853:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 854:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * Write a written representation of \p obj to the given \p port.
 855:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 856:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API void write(pmt_t obj, std::ostream &port);
 857:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 858:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 859:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * Return a string representation of \p obj.
 860:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * This is the same output as would be generated by pmt::write.
 861:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 862:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API std::string write_string(pmt_t obj);
 863:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 864:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 865:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API std::ostream& operator<<(std::ostream &os, pmt_t obj);
 866:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 867:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 868:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Write pmt string representation to stdout.
 869:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 870:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API void print(pmt_t v);
 871:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 872:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 873:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*
 874:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 875:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  *		      portable byte stream representation
 876:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * ------------------------------------------------------------------------
 877:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 878:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 879:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Write portable byte-serial representation of \p obj to \p sink
 880:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 881:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API bool serialize(pmt_t obj, std::streambuf &sink);
 882:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 883:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 884:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Create obj from portable byte-serial representation
 885:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 886:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t deserialize(std::streambuf &source);
 887:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 888:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 889:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API void dump_sizeof();	// debugging
 890:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 891:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 892:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Provide a simple string generating interface to pmt's serialize function
 893:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 894:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API std::string serialize_str(pmt_t obj);
 895:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 896:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 897:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Provide a simple string generating interface to pmt's deserialize function
 898:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 899:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** PMT_API pmt_t deserialize_str(std::string str);
 900:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** 
 901:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** /*!
 902:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  * \brief Provide a comparator function object to allow pmt use in stl types
 903:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****  */
 904:/home/mpiscopo/gnuradio/include/pmt/pmt.h **** class comparator {
 905:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****     public:
 906:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****         bool operator()(pmt::pmt_t const& p1, pmt::pmt_t const& p2) const
 907:/home/mpiscopo/gnuradio/include/pmt/pmt.h ****             { return pmt::eqv(p1,p2)?false:p1.get()>p2.get(); }
GAS LISTING /tmp/ccvmoMuv.s 			page 186


 1849              		.loc 21 907 0
 1850 0438 4889EE   		movq	%rbp, %rsi
 1851 043b E8000000 		call	_ZN3pmt3eqvERKN5boost13intrusive_ptrINS_8pmt_baseEEES5_@PLT
 1851      00
 1852              	.LVL169:
 1853 0440 84C0     		testb	%al, %al
 1854 0442 75E4     		jne	.L118
 1855              	.LVL170:
 1856              	.LBE13044:
 1857              	.LBE13043:
1654:/usr/include/c++/6/bits/stl_tree.h **** 	  __y = __x, __x = _S_left(__x);
 1858              		.loc 19 1654 0
 1859 0444 488B4500 		movq	0(%rbp), %rax
 1860 0448 48394320 		cmpq	%rax, 32(%rbx)
 1861 044c 76DA     		jbe	.L118
 1862 044e 488B5B18 		movq	24(%rbx), %rbx
 1863              	.LVL171:
1653:/usr/include/c++/6/bits/stl_tree.h **** 	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 1864              		.loc 19 1653 0
 1865 0452 4885DB   		testq	%rbx, %rbx
 1866 0455 75DD     		jne	.L117
 1867              	.L115:
1658:/usr/include/c++/6/bits/stl_tree.h ****       return iterator(__y);
1659:/usr/include/c++/6/bits/stl_tree.h ****     }
 1868              		.loc 19 1659 0
 1869 0457 4C89E0   		movq	%r12, %rax
 1870 045a 5B       		popq	%rbx
 1871              		.cfi_def_cfa_offset 24
 1872 045b 5D       		popq	%rbp
 1873              		.cfi_def_cfa_offset 16
 1874              	.LVL172:
 1875 045c 415C     		popq	%r12
 1876              		.cfi_def_cfa_offset 8
 1877              	.LVL173:
 1878 045e C3       		ret
 1879              		.cfi_endproc
 1880              	.LFE15910:
 1882              		.section	.text._ZN2gr11basic_block12has_msg_portEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE,"axG",@p
 1883              		.align 2
 1884              		.p2align 4,,15
 1885              		.weak	_ZN2gr11basic_block12has_msg_portEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE
 1887              	_ZN2gr11basic_block12has_msg_portEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE:
 1888              	.LFB8700:
 270:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       if(msg_queue.find(which_port) != msg_queue.end()) {
 1889              		.loc 2 270 0
 1890              		.cfi_startproc
 1891              	.LVL174:
 1892 0000 4156     		pushq	%r14
 1893              		.cfi_def_cfa_offset 16
 1894              		.cfi_offset 14, -16
 1895 0002 4155     		pushq	%r13
 1896              		.cfi_def_cfa_offset 24
 1897              		.cfi_offset 13, -24
 1898 0004 4C8DB740 		leaq	320(%rdi), %r14
 1898      010000
 1899 000b 4154     		pushq	%r12
 1900              		.cfi_def_cfa_offset 32
GAS LISTING /tmp/ccvmoMuv.s 			page 187


 1901              		.cfi_offset 12, -32
 1902 000d 55       		pushq	%rbp
 1903              		.cfi_def_cfa_offset 40
 1904              		.cfi_offset 6, -40
 1905 000e 4989FD   		movq	%rdi, %r13
 1906 0011 53       		pushq	%rbx
 1907              		.cfi_def_cfa_offset 48
 1908              		.cfi_offset 3, -48
 1909              	.LBB13080:
 1910              	.LBB13081:
 1911              	.LBB13082:
 1912              	.LBB13083:
 1913              	.LBB13084:
1653:/usr/include/c++/6/bits/stl_tree.h **** 	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 1914              		.loc 19 1653 0
 1915 0012 488B9F48 		movq	328(%rdi), %rbx
 1915      010000
 1916              	.LBE13084:
 1917              	.LBE13083:
 1918              	.LBE13082:
 1919              	.LBE13081:
 1920              	.LBE13080:
 270:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       if(msg_queue.find(which_port) != msg_queue.end()) {
 1921              		.loc 2 270 0
 1922 0019 4889F5   		movq	%rsi, %rbp
 1923              	.LVL175:
 1924 001c 4D89F4   		movq	%r14, %r12
 1925              	.LBB13101:
 1926              	.LBB13099:
 1927              	.LBB13097:
 1928              	.LBB13091:
 1929              	.LBB13090:
1653:/usr/include/c++/6/bits/stl_tree.h **** 	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 1930              		.loc 19 1653 0
 1931 001f 4885DB   		testq	%rbx, %rbx
 1932 0022 7518     		jne	.L138
 1933 0024 EB65     		jmp	.L136
 1934              	.LVL176:
 1935 0026 662E0F1F 		.p2align 4,,10
 1935      84000000 
 1935      0000
 1936              		.p2align 3
 1937              	.L133:
1657:/usr/include/c++/6/bits/stl_tree.h ****       return iterator(__y);
 1938              		.loc 19 1657 0
 1939 0030 4989DC   		movq	%rbx, %r12
 1940              	.LVL177:
1655:/usr/include/c++/6/bits/stl_tree.h **** 	else
 1941              		.loc 19 1655 0
 1942 0033 488B5B10 		movq	16(%rbx), %rbx
 1943              	.LVL178:
1653:/usr/include/c++/6/bits/stl_tree.h **** 	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 1944              		.loc 19 1653 0
 1945 0037 4885DB   		testq	%rbx, %rbx
 1946 003a 7423     		je	.L141
 1947              	.LVL179:
 1948              	.L138:
GAS LISTING /tmp/ccvmoMuv.s 			page 188


 1949              	.LBB13085:
 1950              	.LBB13086:
 1951              	.LBB13087:
 1952              		.loc 20 891 0
 1953 003c 488D7B20 		leaq	32(%rbx), %rdi
 1954              	.LBE13087:
 1955              	.LBE13086:
 1956              	.LBE13085:
 1957              	.LBB13088:
 1958              	.LBB13089:
 1959              		.loc 21 907 0
 1960 0040 4889EE   		movq	%rbp, %rsi
 1961 0043 E8000000 		call	_ZN3pmt3eqvERKN5boost13intrusive_ptrINS_8pmt_baseEEES5_@PLT
 1961      00
 1962              	.LVL180:
 1963 0048 84C0     		testb	%al, %al
 1964 004a 75E4     		jne	.L133
 1965              	.LVL181:
 1966              	.LBE13089:
 1967              	.LBE13088:
1654:/usr/include/c++/6/bits/stl_tree.h **** 	  __y = __x, __x = _S_left(__x);
 1968              		.loc 19 1654 0
 1969 004c 488B4500 		movq	0(%rbp), %rax
 1970 0050 48394320 		cmpq	%rax, 32(%rbx)
 1971 0054 76DA     		jbe	.L133
 1972 0056 488B5B18 		movq	24(%rbx), %rbx
 1973              	.LVL182:
1653:/usr/include/c++/6/bits/stl_tree.h **** 	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 1974              		.loc 19 1653 0
 1975 005a 4885DB   		testq	%rbx, %rbx
 1976 005d 75DD     		jne	.L138
 1977              	.L141:
 1978              	.LVL183:
 1979              	.LBE13090:
 1980              	.LBE13091:
1660:/usr/include/c++/6/bits/stl_tree.h **** 
1661:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1662:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1663:/usr/include/c++/6/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue,
1664:/usr/include/c++/6/bits/stl_tree.h **** 		      _Compare, _Alloc>::const_iterator
1665:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1666:/usr/include/c++/6/bits/stl_tree.h ****     _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,
1667:/usr/include/c++/6/bits/stl_tree.h **** 		   const _Key& __k) const
1668:/usr/include/c++/6/bits/stl_tree.h ****     {
1669:/usr/include/c++/6/bits/stl_tree.h ****       while (__x != 0)
1670:/usr/include/c++/6/bits/stl_tree.h **** 	if (!_M_impl._M_key_compare(_S_key(__x), __k))
1671:/usr/include/c++/6/bits/stl_tree.h **** 	  __y = __x, __x = _S_left(__x);
1672:/usr/include/c++/6/bits/stl_tree.h **** 	else
1673:/usr/include/c++/6/bits/stl_tree.h **** 	  __x = _S_right(__x);
1674:/usr/include/c++/6/bits/stl_tree.h ****       return const_iterator(__y);
1675:/usr/include/c++/6/bits/stl_tree.h ****     }
1676:/usr/include/c++/6/bits/stl_tree.h **** 
1677:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1678:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1679:/usr/include/c++/6/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue,
1680:/usr/include/c++/6/bits/stl_tree.h **** 		      _Compare, _Alloc>::iterator
1681:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
GAS LISTING /tmp/ccvmoMuv.s 			page 189


1682:/usr/include/c++/6/bits/stl_tree.h ****     _M_upper_bound(_Link_type __x, _Base_ptr __y,
1683:/usr/include/c++/6/bits/stl_tree.h **** 		   const _Key& __k)
1684:/usr/include/c++/6/bits/stl_tree.h ****     {
1685:/usr/include/c++/6/bits/stl_tree.h ****       while (__x != 0)
1686:/usr/include/c++/6/bits/stl_tree.h **** 	if (_M_impl._M_key_compare(__k, _S_key(__x)))
1687:/usr/include/c++/6/bits/stl_tree.h **** 	  __y = __x, __x = _S_left(__x);
1688:/usr/include/c++/6/bits/stl_tree.h **** 	else
1689:/usr/include/c++/6/bits/stl_tree.h **** 	  __x = _S_right(__x);
1690:/usr/include/c++/6/bits/stl_tree.h ****       return iterator(__y);
1691:/usr/include/c++/6/bits/stl_tree.h ****     }
1692:/usr/include/c++/6/bits/stl_tree.h **** 
1693:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1694:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1695:/usr/include/c++/6/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue,
1696:/usr/include/c++/6/bits/stl_tree.h **** 		      _Compare, _Alloc>::const_iterator
1697:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1698:/usr/include/c++/6/bits/stl_tree.h ****     _M_upper_bound(_Const_Link_type __x, _Const_Base_ptr __y,
1699:/usr/include/c++/6/bits/stl_tree.h **** 		   const _Key& __k) const
1700:/usr/include/c++/6/bits/stl_tree.h ****     {
1701:/usr/include/c++/6/bits/stl_tree.h ****       while (__x != 0)
1702:/usr/include/c++/6/bits/stl_tree.h **** 	if (_M_impl._M_key_compare(__k, _S_key(__x)))
1703:/usr/include/c++/6/bits/stl_tree.h **** 	  __y = __x, __x = _S_left(__x);
1704:/usr/include/c++/6/bits/stl_tree.h **** 	else
1705:/usr/include/c++/6/bits/stl_tree.h **** 	  __x = _S_right(__x);
1706:/usr/include/c++/6/bits/stl_tree.h ****       return const_iterator(__y);
1707:/usr/include/c++/6/bits/stl_tree.h ****     }
1708:/usr/include/c++/6/bits/stl_tree.h **** 
1709:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1710:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1711:/usr/include/c++/6/bits/stl_tree.h ****     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
1712:/usr/include/c++/6/bits/stl_tree.h **** 			   _Compare, _Alloc>::iterator,
1713:/usr/include/c++/6/bits/stl_tree.h **** 	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
1714:/usr/include/c++/6/bits/stl_tree.h **** 			   _Compare, _Alloc>::iterator>
1715:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1716:/usr/include/c++/6/bits/stl_tree.h ****     equal_range(const _Key& __k)
1717:/usr/include/c++/6/bits/stl_tree.h ****     {
1718:/usr/include/c++/6/bits/stl_tree.h ****       _Link_type __x = _M_begin();
1719:/usr/include/c++/6/bits/stl_tree.h ****       _Base_ptr __y = _M_end();
1720:/usr/include/c++/6/bits/stl_tree.h ****       while (__x != 0)
1721:/usr/include/c++/6/bits/stl_tree.h **** 	{
1722:/usr/include/c++/6/bits/stl_tree.h **** 	  if (_M_impl._M_key_compare(_S_key(__x), __k))
1723:/usr/include/c++/6/bits/stl_tree.h **** 	    __x = _S_right(__x);
1724:/usr/include/c++/6/bits/stl_tree.h **** 	  else if (_M_impl._M_key_compare(__k, _S_key(__x)))
1725:/usr/include/c++/6/bits/stl_tree.h **** 	    __y = __x, __x = _S_left(__x);
1726:/usr/include/c++/6/bits/stl_tree.h **** 	  else
1727:/usr/include/c++/6/bits/stl_tree.h **** 	    {
1728:/usr/include/c++/6/bits/stl_tree.h **** 	      _Link_type __xu(__x);
1729:/usr/include/c++/6/bits/stl_tree.h **** 	      _Base_ptr __yu(__y);
1730:/usr/include/c++/6/bits/stl_tree.h **** 	      __y = __x, __x = _S_left(__x);
1731:/usr/include/c++/6/bits/stl_tree.h **** 	      __xu = _S_right(__xu);
1732:/usr/include/c++/6/bits/stl_tree.h **** 	      return pair<iterator,
1733:/usr/include/c++/6/bits/stl_tree.h **** 		          iterator>(_M_lower_bound(__x, __y, __k),
1734:/usr/include/c++/6/bits/stl_tree.h **** 				    _M_upper_bound(__xu, __yu, __k));
1735:/usr/include/c++/6/bits/stl_tree.h **** 	    }
1736:/usr/include/c++/6/bits/stl_tree.h **** 	}
1737:/usr/include/c++/6/bits/stl_tree.h ****       return pair<iterator, iterator>(iterator(__y),
1738:/usr/include/c++/6/bits/stl_tree.h **** 				      iterator(__y));
GAS LISTING /tmp/ccvmoMuv.s 			page 190


1739:/usr/include/c++/6/bits/stl_tree.h ****     }
1740:/usr/include/c++/6/bits/stl_tree.h **** 
1741:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1742:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1743:/usr/include/c++/6/bits/stl_tree.h ****     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
1744:/usr/include/c++/6/bits/stl_tree.h **** 			   _Compare, _Alloc>::const_iterator,
1745:/usr/include/c++/6/bits/stl_tree.h **** 	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
1746:/usr/include/c++/6/bits/stl_tree.h **** 			   _Compare, _Alloc>::const_iterator>
1747:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1748:/usr/include/c++/6/bits/stl_tree.h ****     equal_range(const _Key& __k) const
1749:/usr/include/c++/6/bits/stl_tree.h ****     {
1750:/usr/include/c++/6/bits/stl_tree.h ****       _Const_Link_type __x = _M_begin();
1751:/usr/include/c++/6/bits/stl_tree.h ****       _Const_Base_ptr __y = _M_end();
1752:/usr/include/c++/6/bits/stl_tree.h ****       while (__x != 0)
1753:/usr/include/c++/6/bits/stl_tree.h **** 	{
1754:/usr/include/c++/6/bits/stl_tree.h **** 	  if (_M_impl._M_key_compare(_S_key(__x), __k))
1755:/usr/include/c++/6/bits/stl_tree.h **** 	    __x = _S_right(__x);
1756:/usr/include/c++/6/bits/stl_tree.h **** 	  else if (_M_impl._M_key_compare(__k, _S_key(__x)))
1757:/usr/include/c++/6/bits/stl_tree.h **** 	    __y = __x, __x = _S_left(__x);
1758:/usr/include/c++/6/bits/stl_tree.h **** 	  else
1759:/usr/include/c++/6/bits/stl_tree.h **** 	    {
1760:/usr/include/c++/6/bits/stl_tree.h **** 	      _Const_Link_type __xu(__x);
1761:/usr/include/c++/6/bits/stl_tree.h **** 	      _Const_Base_ptr __yu(__y);
1762:/usr/include/c++/6/bits/stl_tree.h **** 	      __y = __x, __x = _S_left(__x);
1763:/usr/include/c++/6/bits/stl_tree.h **** 	      __xu = _S_right(__xu);
1764:/usr/include/c++/6/bits/stl_tree.h **** 	      return pair<const_iterator,
1765:/usr/include/c++/6/bits/stl_tree.h **** 		          const_iterator>(_M_lower_bound(__x, __y, __k),
1766:/usr/include/c++/6/bits/stl_tree.h **** 					  _M_upper_bound(__xu, __yu, __k));
1767:/usr/include/c++/6/bits/stl_tree.h **** 	    }
1768:/usr/include/c++/6/bits/stl_tree.h **** 	}
1769:/usr/include/c++/6/bits/stl_tree.h ****       return pair<const_iterator, const_iterator>(const_iterator(__y),
1770:/usr/include/c++/6/bits/stl_tree.h **** 						  const_iterator(__y));
1771:/usr/include/c++/6/bits/stl_tree.h ****     }
1772:/usr/include/c++/6/bits/stl_tree.h **** 
1773:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1774:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1775:/usr/include/c++/6/bits/stl_tree.h ****     void
1776:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1777:/usr/include/c++/6/bits/stl_tree.h ****     swap(_Rb_tree& __t)
1778:/usr/include/c++/6/bits/stl_tree.h ****     _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Compare>::value)
1779:/usr/include/c++/6/bits/stl_tree.h ****     {
1780:/usr/include/c++/6/bits/stl_tree.h ****       if (_M_root() == 0)
1781:/usr/include/c++/6/bits/stl_tree.h **** 	{
1782:/usr/include/c++/6/bits/stl_tree.h **** 	  if (__t._M_root() != 0)
1783:/usr/include/c++/6/bits/stl_tree.h **** 	    {
1784:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_root() = __t._M_root();
1785:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_leftmost() = __t._M_leftmost();
1786:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_rightmost() = __t._M_rightmost();
1787:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_root()->_M_parent = _M_end();
1788:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_impl._M_node_count = __t._M_impl._M_node_count;
1789:/usr/include/c++/6/bits/stl_tree.h **** 	      
1790:/usr/include/c++/6/bits/stl_tree.h **** 	      __t._M_impl._M_reset();
1791:/usr/include/c++/6/bits/stl_tree.h **** 	    }
1792:/usr/include/c++/6/bits/stl_tree.h **** 	}
1793:/usr/include/c++/6/bits/stl_tree.h ****       else if (__t._M_root() == 0)
1794:/usr/include/c++/6/bits/stl_tree.h **** 	{
1795:/usr/include/c++/6/bits/stl_tree.h **** 	  __t._M_root() = _M_root();
GAS LISTING /tmp/ccvmoMuv.s 			page 191


1796:/usr/include/c++/6/bits/stl_tree.h **** 	  __t._M_leftmost() = _M_leftmost();
1797:/usr/include/c++/6/bits/stl_tree.h **** 	  __t._M_rightmost() = _M_rightmost();
1798:/usr/include/c++/6/bits/stl_tree.h **** 	  __t._M_root()->_M_parent = __t._M_end();
1799:/usr/include/c++/6/bits/stl_tree.h **** 	  __t._M_impl._M_node_count = _M_impl._M_node_count;
1800:/usr/include/c++/6/bits/stl_tree.h **** 	  
1801:/usr/include/c++/6/bits/stl_tree.h **** 	  _M_impl._M_reset();
1802:/usr/include/c++/6/bits/stl_tree.h **** 	}
1803:/usr/include/c++/6/bits/stl_tree.h ****       else
1804:/usr/include/c++/6/bits/stl_tree.h **** 	{
1805:/usr/include/c++/6/bits/stl_tree.h **** 	  std::swap(_M_root(),__t._M_root());
1806:/usr/include/c++/6/bits/stl_tree.h **** 	  std::swap(_M_leftmost(),__t._M_leftmost());
1807:/usr/include/c++/6/bits/stl_tree.h **** 	  std::swap(_M_rightmost(),__t._M_rightmost());
1808:/usr/include/c++/6/bits/stl_tree.h **** 	  
1809:/usr/include/c++/6/bits/stl_tree.h **** 	  _M_root()->_M_parent = _M_end();
1810:/usr/include/c++/6/bits/stl_tree.h **** 	  __t._M_root()->_M_parent = __t._M_end();
1811:/usr/include/c++/6/bits/stl_tree.h **** 	  std::swap(this->_M_impl._M_node_count, __t._M_impl._M_node_count);
1812:/usr/include/c++/6/bits/stl_tree.h **** 	}
1813:/usr/include/c++/6/bits/stl_tree.h ****       // No need to swap header's color as it does not change.
1814:/usr/include/c++/6/bits/stl_tree.h ****       std::swap(this->_M_impl._M_key_compare, __t._M_impl._M_key_compare);
1815:/usr/include/c++/6/bits/stl_tree.h **** 
1816:/usr/include/c++/6/bits/stl_tree.h ****       _Alloc_traits::_S_on_swap(_M_get_Node_allocator(),
1817:/usr/include/c++/6/bits/stl_tree.h **** 				__t._M_get_Node_allocator());
1818:/usr/include/c++/6/bits/stl_tree.h ****     }
1819:/usr/include/c++/6/bits/stl_tree.h **** 
1820:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1821:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1822:/usr/include/c++/6/bits/stl_tree.h ****     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
1823:/usr/include/c++/6/bits/stl_tree.h **** 			   _Compare, _Alloc>::_Base_ptr,
1824:/usr/include/c++/6/bits/stl_tree.h **** 	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
1825:/usr/include/c++/6/bits/stl_tree.h **** 			   _Compare, _Alloc>::_Base_ptr>
1826:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1827:/usr/include/c++/6/bits/stl_tree.h ****     _M_get_insert_unique_pos(const key_type& __k)
1828:/usr/include/c++/6/bits/stl_tree.h ****     {
1829:/usr/include/c++/6/bits/stl_tree.h ****       typedef pair<_Base_ptr, _Base_ptr> _Res;
1830:/usr/include/c++/6/bits/stl_tree.h ****       _Link_type __x = _M_begin();
1831:/usr/include/c++/6/bits/stl_tree.h ****       _Base_ptr __y = _M_end();
1832:/usr/include/c++/6/bits/stl_tree.h ****       bool __comp = true;
1833:/usr/include/c++/6/bits/stl_tree.h ****       while (__x != 0)
1834:/usr/include/c++/6/bits/stl_tree.h **** 	{
1835:/usr/include/c++/6/bits/stl_tree.h **** 	  __y = __x;
1836:/usr/include/c++/6/bits/stl_tree.h **** 	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
1837:/usr/include/c++/6/bits/stl_tree.h **** 	  __x = __comp ? _S_left(__x) : _S_right(__x);
1838:/usr/include/c++/6/bits/stl_tree.h **** 	}
1839:/usr/include/c++/6/bits/stl_tree.h ****       iterator __j = iterator(__y);
1840:/usr/include/c++/6/bits/stl_tree.h ****       if (__comp)
1841:/usr/include/c++/6/bits/stl_tree.h **** 	{
1842:/usr/include/c++/6/bits/stl_tree.h **** 	  if (__j == begin())
1843:/usr/include/c++/6/bits/stl_tree.h **** 	    return _Res(__x, __y);
1844:/usr/include/c++/6/bits/stl_tree.h **** 	  else
1845:/usr/include/c++/6/bits/stl_tree.h **** 	    --__j;
1846:/usr/include/c++/6/bits/stl_tree.h **** 	}
1847:/usr/include/c++/6/bits/stl_tree.h ****       if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
1848:/usr/include/c++/6/bits/stl_tree.h **** 	return _Res(__x, __y);
1849:/usr/include/c++/6/bits/stl_tree.h ****       return _Res(__j._M_node, 0);
1850:/usr/include/c++/6/bits/stl_tree.h ****     }
1851:/usr/include/c++/6/bits/stl_tree.h **** 
1852:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
GAS LISTING /tmp/ccvmoMuv.s 			page 192


1853:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1854:/usr/include/c++/6/bits/stl_tree.h ****     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
1855:/usr/include/c++/6/bits/stl_tree.h **** 			   _Compare, _Alloc>::_Base_ptr,
1856:/usr/include/c++/6/bits/stl_tree.h **** 	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
1857:/usr/include/c++/6/bits/stl_tree.h **** 			   _Compare, _Alloc>::_Base_ptr>
1858:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1859:/usr/include/c++/6/bits/stl_tree.h ****     _M_get_insert_equal_pos(const key_type& __k)
1860:/usr/include/c++/6/bits/stl_tree.h ****     {
1861:/usr/include/c++/6/bits/stl_tree.h ****       typedef pair<_Base_ptr, _Base_ptr> _Res;
1862:/usr/include/c++/6/bits/stl_tree.h ****       _Link_type __x = _M_begin();
1863:/usr/include/c++/6/bits/stl_tree.h ****       _Base_ptr __y = _M_end();
1864:/usr/include/c++/6/bits/stl_tree.h ****       while (__x != 0)
1865:/usr/include/c++/6/bits/stl_tree.h **** 	{
1866:/usr/include/c++/6/bits/stl_tree.h **** 	  __y = __x;
1867:/usr/include/c++/6/bits/stl_tree.h **** 	  __x = _M_impl._M_key_compare(__k, _S_key(__x)) ?
1868:/usr/include/c++/6/bits/stl_tree.h **** 	        _S_left(__x) : _S_right(__x);
1869:/usr/include/c++/6/bits/stl_tree.h **** 	}
1870:/usr/include/c++/6/bits/stl_tree.h ****       return _Res(__x, __y);
1871:/usr/include/c++/6/bits/stl_tree.h ****     }
1872:/usr/include/c++/6/bits/stl_tree.h **** 
1873:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1874:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1875:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
1876:/usr/include/c++/6/bits/stl_tree.h ****     template<typename _Arg>
1877:/usr/include/c++/6/bits/stl_tree.h **** #endif
1878:/usr/include/c++/6/bits/stl_tree.h ****     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
1879:/usr/include/c++/6/bits/stl_tree.h **** 			   _Compare, _Alloc>::iterator, bool>
1880:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1881:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
1882:/usr/include/c++/6/bits/stl_tree.h ****     _M_insert_unique(_Arg&& __v)
1883:/usr/include/c++/6/bits/stl_tree.h **** #else
1884:/usr/include/c++/6/bits/stl_tree.h ****     _M_insert_unique(const _Val& __v)
1885:/usr/include/c++/6/bits/stl_tree.h **** #endif
1886:/usr/include/c++/6/bits/stl_tree.h ****     {
1887:/usr/include/c++/6/bits/stl_tree.h ****       typedef pair<iterator, bool> _Res;
1888:/usr/include/c++/6/bits/stl_tree.h ****       pair<_Base_ptr, _Base_ptr> __res
1889:/usr/include/c++/6/bits/stl_tree.h **** 	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
1890:/usr/include/c++/6/bits/stl_tree.h **** 
1891:/usr/include/c++/6/bits/stl_tree.h ****       if (__res.second)
1892:/usr/include/c++/6/bits/stl_tree.h **** 	{
1893:/usr/include/c++/6/bits/stl_tree.h **** 	  _Alloc_node __an(*this);
1894:/usr/include/c++/6/bits/stl_tree.h **** 	  return _Res(_M_insert_(__res.first, __res.second,
1895:/usr/include/c++/6/bits/stl_tree.h **** 				 _GLIBCXX_FORWARD(_Arg, __v), __an),
1896:/usr/include/c++/6/bits/stl_tree.h **** 		      true);
1897:/usr/include/c++/6/bits/stl_tree.h **** 	}
1898:/usr/include/c++/6/bits/stl_tree.h **** 
1899:/usr/include/c++/6/bits/stl_tree.h ****       return _Res(iterator(__res.first), false);
1900:/usr/include/c++/6/bits/stl_tree.h ****     }
1901:/usr/include/c++/6/bits/stl_tree.h **** 
1902:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1903:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1904:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
1905:/usr/include/c++/6/bits/stl_tree.h ****     template<typename _Arg>
1906:/usr/include/c++/6/bits/stl_tree.h **** #endif
1907:/usr/include/c++/6/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
1908:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1909:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
GAS LISTING /tmp/ccvmoMuv.s 			page 193


1910:/usr/include/c++/6/bits/stl_tree.h ****     _M_insert_equal(_Arg&& __v)
1911:/usr/include/c++/6/bits/stl_tree.h **** #else
1912:/usr/include/c++/6/bits/stl_tree.h ****     _M_insert_equal(const _Val& __v)
1913:/usr/include/c++/6/bits/stl_tree.h **** #endif
1914:/usr/include/c++/6/bits/stl_tree.h ****     {
1915:/usr/include/c++/6/bits/stl_tree.h ****       pair<_Base_ptr, _Base_ptr> __res
1916:/usr/include/c++/6/bits/stl_tree.h **** 	= _M_get_insert_equal_pos(_KeyOfValue()(__v));
1917:/usr/include/c++/6/bits/stl_tree.h ****       _Alloc_node __an(*this);
1918:/usr/include/c++/6/bits/stl_tree.h ****       return _M_insert_(__res.first, __res.second,
1919:/usr/include/c++/6/bits/stl_tree.h **** 			_GLIBCXX_FORWARD(_Arg, __v), __an);
1920:/usr/include/c++/6/bits/stl_tree.h ****     }
1921:/usr/include/c++/6/bits/stl_tree.h **** 
1922:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1923:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1924:/usr/include/c++/6/bits/stl_tree.h ****     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
1925:/usr/include/c++/6/bits/stl_tree.h **** 			   _Compare, _Alloc>::_Base_ptr,
1926:/usr/include/c++/6/bits/stl_tree.h ****          typename _Rb_tree<_Key, _Val, _KeyOfValue,
1927:/usr/include/c++/6/bits/stl_tree.h **** 			   _Compare, _Alloc>::_Base_ptr>
1928:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1929:/usr/include/c++/6/bits/stl_tree.h ****     _M_get_insert_hint_unique_pos(const_iterator __position,
1930:/usr/include/c++/6/bits/stl_tree.h **** 				  const key_type& __k)
1931:/usr/include/c++/6/bits/stl_tree.h ****     {
1932:/usr/include/c++/6/bits/stl_tree.h ****       iterator __pos = __position._M_const_cast();
1933:/usr/include/c++/6/bits/stl_tree.h ****       typedef pair<_Base_ptr, _Base_ptr> _Res;
1934:/usr/include/c++/6/bits/stl_tree.h **** 
1935:/usr/include/c++/6/bits/stl_tree.h ****       // end()
1936:/usr/include/c++/6/bits/stl_tree.h ****       if (__pos._M_node == _M_end())
1937:/usr/include/c++/6/bits/stl_tree.h **** 	{
1938:/usr/include/c++/6/bits/stl_tree.h **** 	  if (size() > 0
1939:/usr/include/c++/6/bits/stl_tree.h **** 	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
1940:/usr/include/c++/6/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
1941:/usr/include/c++/6/bits/stl_tree.h **** 	  else
1942:/usr/include/c++/6/bits/stl_tree.h **** 	    return _M_get_insert_unique_pos(__k);
1943:/usr/include/c++/6/bits/stl_tree.h **** 	}
1944:/usr/include/c++/6/bits/stl_tree.h ****       else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
1945:/usr/include/c++/6/bits/stl_tree.h **** 	{
1946:/usr/include/c++/6/bits/stl_tree.h **** 	  // First, try before...
1947:/usr/include/c++/6/bits/stl_tree.h **** 	  iterator __before = __pos;
1948:/usr/include/c++/6/bits/stl_tree.h **** 	  if (__pos._M_node == _M_leftmost()) // begin()
1949:/usr/include/c++/6/bits/stl_tree.h **** 	    return _Res(_M_leftmost(), _M_leftmost());
1950:/usr/include/c++/6/bits/stl_tree.h **** 	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
1951:/usr/include/c++/6/bits/stl_tree.h **** 	    {
1952:/usr/include/c++/6/bits/stl_tree.h **** 	      if (_S_right(__before._M_node) == 0)
1953:/usr/include/c++/6/bits/stl_tree.h **** 		return _Res(0, __before._M_node);
1954:/usr/include/c++/6/bits/stl_tree.h **** 	      else
1955:/usr/include/c++/6/bits/stl_tree.h **** 		return _Res(__pos._M_node, __pos._M_node);
1956:/usr/include/c++/6/bits/stl_tree.h **** 	    }
1957:/usr/include/c++/6/bits/stl_tree.h **** 	  else
1958:/usr/include/c++/6/bits/stl_tree.h **** 	    return _M_get_insert_unique_pos(__k);
1959:/usr/include/c++/6/bits/stl_tree.h **** 	}
1960:/usr/include/c++/6/bits/stl_tree.h ****       else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
1961:/usr/include/c++/6/bits/stl_tree.h **** 	{
1962:/usr/include/c++/6/bits/stl_tree.h **** 	  // ... then try after.
1963:/usr/include/c++/6/bits/stl_tree.h **** 	  iterator __after = __pos;
1964:/usr/include/c++/6/bits/stl_tree.h **** 	  if (__pos._M_node == _M_rightmost())
1965:/usr/include/c++/6/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
1966:/usr/include/c++/6/bits/stl_tree.h **** 	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
GAS LISTING /tmp/ccvmoMuv.s 			page 194


1967:/usr/include/c++/6/bits/stl_tree.h **** 	    {
1968:/usr/include/c++/6/bits/stl_tree.h **** 	      if (_S_right(__pos._M_node) == 0)
1969:/usr/include/c++/6/bits/stl_tree.h **** 		return _Res(0, __pos._M_node);
1970:/usr/include/c++/6/bits/stl_tree.h **** 	      else
1971:/usr/include/c++/6/bits/stl_tree.h **** 		return _Res(__after._M_node, __after._M_node);
1972:/usr/include/c++/6/bits/stl_tree.h **** 	    }
1973:/usr/include/c++/6/bits/stl_tree.h **** 	  else
1974:/usr/include/c++/6/bits/stl_tree.h **** 	    return _M_get_insert_unique_pos(__k);
1975:/usr/include/c++/6/bits/stl_tree.h **** 	}
1976:/usr/include/c++/6/bits/stl_tree.h ****       else
1977:/usr/include/c++/6/bits/stl_tree.h **** 	// Equivalent keys.
1978:/usr/include/c++/6/bits/stl_tree.h **** 	return _Res(__pos._M_node, 0);
1979:/usr/include/c++/6/bits/stl_tree.h ****     }
1980:/usr/include/c++/6/bits/stl_tree.h **** 
1981:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1982:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
1983:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
1984:/usr/include/c++/6/bits/stl_tree.h ****     template<typename _Arg, typename _NodeGen>
1985:/usr/include/c++/6/bits/stl_tree.h **** #else
1986:/usr/include/c++/6/bits/stl_tree.h ****     template<typename _NodeGen>
1987:/usr/include/c++/6/bits/stl_tree.h **** #endif
1988:/usr/include/c++/6/bits/stl_tree.h ****       typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
1989:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1990:/usr/include/c++/6/bits/stl_tree.h ****       _M_insert_unique_(const_iterator __position,
1991:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
1992:/usr/include/c++/6/bits/stl_tree.h **** 			_Arg&& __v,
1993:/usr/include/c++/6/bits/stl_tree.h **** #else
1994:/usr/include/c++/6/bits/stl_tree.h **** 			const _Val& __v,
1995:/usr/include/c++/6/bits/stl_tree.h **** #endif
1996:/usr/include/c++/6/bits/stl_tree.h **** 			_NodeGen& __node_gen)
1997:/usr/include/c++/6/bits/stl_tree.h ****     {
1998:/usr/include/c++/6/bits/stl_tree.h ****       pair<_Base_ptr, _Base_ptr> __res
1999:/usr/include/c++/6/bits/stl_tree.h **** 	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
2000:/usr/include/c++/6/bits/stl_tree.h **** 
2001:/usr/include/c++/6/bits/stl_tree.h ****       if (__res.second)
2002:/usr/include/c++/6/bits/stl_tree.h **** 	return _M_insert_(__res.first, __res.second,
2003:/usr/include/c++/6/bits/stl_tree.h **** 			  _GLIBCXX_FORWARD(_Arg, __v),
2004:/usr/include/c++/6/bits/stl_tree.h **** 			  __node_gen);
2005:/usr/include/c++/6/bits/stl_tree.h ****       return iterator(__res.first);
2006:/usr/include/c++/6/bits/stl_tree.h ****     }
2007:/usr/include/c++/6/bits/stl_tree.h **** 
2008:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2009:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
2010:/usr/include/c++/6/bits/stl_tree.h ****     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
2011:/usr/include/c++/6/bits/stl_tree.h **** 			   _Compare, _Alloc>::_Base_ptr,
2012:/usr/include/c++/6/bits/stl_tree.h ****          typename _Rb_tree<_Key, _Val, _KeyOfValue,
2013:/usr/include/c++/6/bits/stl_tree.h **** 			   _Compare, _Alloc>::_Base_ptr>
2014:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2015:/usr/include/c++/6/bits/stl_tree.h ****     _M_get_insert_hint_equal_pos(const_iterator __position, const key_type& __k)
2016:/usr/include/c++/6/bits/stl_tree.h ****     {
2017:/usr/include/c++/6/bits/stl_tree.h ****       iterator __pos = __position._M_const_cast();
2018:/usr/include/c++/6/bits/stl_tree.h ****       typedef pair<_Base_ptr, _Base_ptr> _Res;
2019:/usr/include/c++/6/bits/stl_tree.h **** 
2020:/usr/include/c++/6/bits/stl_tree.h ****       // end()
2021:/usr/include/c++/6/bits/stl_tree.h ****       if (__pos._M_node == _M_end())
2022:/usr/include/c++/6/bits/stl_tree.h **** 	{
2023:/usr/include/c++/6/bits/stl_tree.h **** 	  if (size() > 0
GAS LISTING /tmp/ccvmoMuv.s 			page 195


2024:/usr/include/c++/6/bits/stl_tree.h **** 	      && !_M_impl._M_key_compare(__k, _S_key(_M_rightmost())))
2025:/usr/include/c++/6/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
2026:/usr/include/c++/6/bits/stl_tree.h **** 	  else
2027:/usr/include/c++/6/bits/stl_tree.h **** 	    return _M_get_insert_equal_pos(__k);
2028:/usr/include/c++/6/bits/stl_tree.h **** 	}
2029:/usr/include/c++/6/bits/stl_tree.h ****       else if (!_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
2030:/usr/include/c++/6/bits/stl_tree.h **** 	{
2031:/usr/include/c++/6/bits/stl_tree.h **** 	  // First, try before...
2032:/usr/include/c++/6/bits/stl_tree.h **** 	  iterator __before = __pos;
2033:/usr/include/c++/6/bits/stl_tree.h **** 	  if (__pos._M_node == _M_leftmost()) // begin()
2034:/usr/include/c++/6/bits/stl_tree.h **** 	    return _Res(_M_leftmost(), _M_leftmost());
2035:/usr/include/c++/6/bits/stl_tree.h **** 	  else if (!_M_impl._M_key_compare(__k, _S_key((--__before)._M_node)))
2036:/usr/include/c++/6/bits/stl_tree.h **** 	    {
2037:/usr/include/c++/6/bits/stl_tree.h **** 	      if (_S_right(__before._M_node) == 0)
2038:/usr/include/c++/6/bits/stl_tree.h **** 		return _Res(0, __before._M_node);
2039:/usr/include/c++/6/bits/stl_tree.h **** 	      else
2040:/usr/include/c++/6/bits/stl_tree.h **** 		return _Res(__pos._M_node, __pos._M_node);
2041:/usr/include/c++/6/bits/stl_tree.h **** 	    }
2042:/usr/include/c++/6/bits/stl_tree.h **** 	  else
2043:/usr/include/c++/6/bits/stl_tree.h **** 	    return _M_get_insert_equal_pos(__k);
2044:/usr/include/c++/6/bits/stl_tree.h **** 	}
2045:/usr/include/c++/6/bits/stl_tree.h ****       else
2046:/usr/include/c++/6/bits/stl_tree.h **** 	{
2047:/usr/include/c++/6/bits/stl_tree.h **** 	  // ... then try after.  
2048:/usr/include/c++/6/bits/stl_tree.h **** 	  iterator __after = __pos;
2049:/usr/include/c++/6/bits/stl_tree.h **** 	  if (__pos._M_node == _M_rightmost())
2050:/usr/include/c++/6/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
2051:/usr/include/c++/6/bits/stl_tree.h **** 	  else if (!_M_impl._M_key_compare(_S_key((++__after)._M_node), __k))
2052:/usr/include/c++/6/bits/stl_tree.h **** 	    {
2053:/usr/include/c++/6/bits/stl_tree.h **** 	      if (_S_right(__pos._M_node) == 0)
2054:/usr/include/c++/6/bits/stl_tree.h **** 		return _Res(0, __pos._M_node);
2055:/usr/include/c++/6/bits/stl_tree.h **** 	      else
2056:/usr/include/c++/6/bits/stl_tree.h **** 		return _Res(__after._M_node, __after._M_node);
2057:/usr/include/c++/6/bits/stl_tree.h **** 	    }
2058:/usr/include/c++/6/bits/stl_tree.h **** 	  else
2059:/usr/include/c++/6/bits/stl_tree.h **** 	    return _Res(0, 0);
2060:/usr/include/c++/6/bits/stl_tree.h **** 	}
2061:/usr/include/c++/6/bits/stl_tree.h ****     }
2062:/usr/include/c++/6/bits/stl_tree.h **** 
2063:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2064:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
2065:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
2066:/usr/include/c++/6/bits/stl_tree.h ****     template<typename _Arg, typename _NodeGen>
2067:/usr/include/c++/6/bits/stl_tree.h **** #else
2068:/usr/include/c++/6/bits/stl_tree.h ****     template<typename _NodeGen>
2069:/usr/include/c++/6/bits/stl_tree.h **** #endif
2070:/usr/include/c++/6/bits/stl_tree.h ****       typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
2071:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2072:/usr/include/c++/6/bits/stl_tree.h ****       _M_insert_equal_(const_iterator __position,
2073:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
2074:/usr/include/c++/6/bits/stl_tree.h **** 		       _Arg&& __v,
2075:/usr/include/c++/6/bits/stl_tree.h **** #else
2076:/usr/include/c++/6/bits/stl_tree.h **** 		       const _Val& __v,
2077:/usr/include/c++/6/bits/stl_tree.h **** #endif
2078:/usr/include/c++/6/bits/stl_tree.h **** 		       _NodeGen& __node_gen)
2079:/usr/include/c++/6/bits/stl_tree.h ****       {
2080:/usr/include/c++/6/bits/stl_tree.h **** 	pair<_Base_ptr, _Base_ptr> __res
GAS LISTING /tmp/ccvmoMuv.s 			page 196


2081:/usr/include/c++/6/bits/stl_tree.h **** 	  = _M_get_insert_hint_equal_pos(__position, _KeyOfValue()(__v));
2082:/usr/include/c++/6/bits/stl_tree.h **** 
2083:/usr/include/c++/6/bits/stl_tree.h **** 	if (__res.second)
2084:/usr/include/c++/6/bits/stl_tree.h **** 	  return _M_insert_(__res.first, __res.second,
2085:/usr/include/c++/6/bits/stl_tree.h **** 			    _GLIBCXX_FORWARD(_Arg, __v),
2086:/usr/include/c++/6/bits/stl_tree.h **** 			    __node_gen);
2087:/usr/include/c++/6/bits/stl_tree.h **** 
2088:/usr/include/c++/6/bits/stl_tree.h **** 	return _M_insert_equal_lower(_GLIBCXX_FORWARD(_Arg, __v));
2089:/usr/include/c++/6/bits/stl_tree.h ****       }
2090:/usr/include/c++/6/bits/stl_tree.h **** 
2091:/usr/include/c++/6/bits/stl_tree.h **** #if __cplusplus >= 201103L
2092:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2093:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
2094:/usr/include/c++/6/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
2095:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2096:/usr/include/c++/6/bits/stl_tree.h ****     _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
2097:/usr/include/c++/6/bits/stl_tree.h ****     {
2098:/usr/include/c++/6/bits/stl_tree.h ****       bool __insert_left = (__x != 0 || __p == _M_end()
2099:/usr/include/c++/6/bits/stl_tree.h **** 			    || _M_impl._M_key_compare(_S_key(__z),
2100:/usr/include/c++/6/bits/stl_tree.h **** 						      _S_key(__p)));
2101:/usr/include/c++/6/bits/stl_tree.h **** 
2102:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
2103:/usr/include/c++/6/bits/stl_tree.h **** 				    this->_M_impl._M_header);
2104:/usr/include/c++/6/bits/stl_tree.h ****       ++_M_impl._M_node_count;
2105:/usr/include/c++/6/bits/stl_tree.h ****       return iterator(__z);
2106:/usr/include/c++/6/bits/stl_tree.h ****     }
2107:/usr/include/c++/6/bits/stl_tree.h **** 
2108:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2109:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
2110:/usr/include/c++/6/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
2111:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2112:/usr/include/c++/6/bits/stl_tree.h ****     _M_insert_lower_node(_Base_ptr __p, _Link_type __z)
2113:/usr/include/c++/6/bits/stl_tree.h ****     {
2114:/usr/include/c++/6/bits/stl_tree.h ****       bool __insert_left = (__p == _M_end()
2115:/usr/include/c++/6/bits/stl_tree.h **** 			    || !_M_impl._M_key_compare(_S_key(__p),
2116:/usr/include/c++/6/bits/stl_tree.h **** 						       _S_key(__z)));
2117:/usr/include/c++/6/bits/stl_tree.h **** 
2118:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
2119:/usr/include/c++/6/bits/stl_tree.h **** 				    this->_M_impl._M_header);
2120:/usr/include/c++/6/bits/stl_tree.h ****       ++_M_impl._M_node_count;
2121:/usr/include/c++/6/bits/stl_tree.h ****       return iterator(__z);
2122:/usr/include/c++/6/bits/stl_tree.h ****     }
2123:/usr/include/c++/6/bits/stl_tree.h **** 
2124:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2125:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
2126:/usr/include/c++/6/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
2127:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2128:/usr/include/c++/6/bits/stl_tree.h ****     _M_insert_equal_lower_node(_Link_type __z)
2129:/usr/include/c++/6/bits/stl_tree.h ****     {
2130:/usr/include/c++/6/bits/stl_tree.h ****       _Link_type __x = _M_begin();
2131:/usr/include/c++/6/bits/stl_tree.h ****       _Base_ptr __y = _M_end();
2132:/usr/include/c++/6/bits/stl_tree.h ****       while (__x != 0)
2133:/usr/include/c++/6/bits/stl_tree.h **** 	{
2134:/usr/include/c++/6/bits/stl_tree.h **** 	  __y = __x;
2135:/usr/include/c++/6/bits/stl_tree.h **** 	  __x = !_M_impl._M_key_compare(_S_key(__x), _S_key(__z)) ?
2136:/usr/include/c++/6/bits/stl_tree.h **** 	        _S_left(__x) : _S_right(__x);
2137:/usr/include/c++/6/bits/stl_tree.h **** 	}
GAS LISTING /tmp/ccvmoMuv.s 			page 197


2138:/usr/include/c++/6/bits/stl_tree.h ****       return _M_insert_lower_node(__y, __z);
2139:/usr/include/c++/6/bits/stl_tree.h ****     }
2140:/usr/include/c++/6/bits/stl_tree.h **** 
2141:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2142:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
2143:/usr/include/c++/6/bits/stl_tree.h ****     template<typename... _Args>
2144:/usr/include/c++/6/bits/stl_tree.h ****       pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
2145:/usr/include/c++/6/bits/stl_tree.h **** 			     _Compare, _Alloc>::iterator, bool>
2146:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2147:/usr/include/c++/6/bits/stl_tree.h ****       _M_emplace_unique(_Args&&... __args)
2148:/usr/include/c++/6/bits/stl_tree.h ****       {
2149:/usr/include/c++/6/bits/stl_tree.h **** 	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
2150:/usr/include/c++/6/bits/stl_tree.h **** 
2151:/usr/include/c++/6/bits/stl_tree.h **** 	__try
2152:/usr/include/c++/6/bits/stl_tree.h **** 	  {
2153:/usr/include/c++/6/bits/stl_tree.h **** 	    typedef pair<iterator, bool> _Res;
2154:/usr/include/c++/6/bits/stl_tree.h **** 	    auto __res = _M_get_insert_unique_pos(_S_key(__z));
2155:/usr/include/c++/6/bits/stl_tree.h **** 	    if (__res.second)
2156:/usr/include/c++/6/bits/stl_tree.h **** 	      return _Res(_M_insert_node(__res.first, __res.second, __z), true);
2157:/usr/include/c++/6/bits/stl_tree.h **** 	
2158:/usr/include/c++/6/bits/stl_tree.h **** 	    _M_drop_node(__z);
2159:/usr/include/c++/6/bits/stl_tree.h **** 	    return _Res(iterator(__res.first), false);
2160:/usr/include/c++/6/bits/stl_tree.h **** 	  }
2161:/usr/include/c++/6/bits/stl_tree.h **** 	__catch(...)
2162:/usr/include/c++/6/bits/stl_tree.h **** 	  {
2163:/usr/include/c++/6/bits/stl_tree.h **** 	    _M_drop_node(__z);
2164:/usr/include/c++/6/bits/stl_tree.h **** 	    __throw_exception_again;
2165:/usr/include/c++/6/bits/stl_tree.h **** 	  }
2166:/usr/include/c++/6/bits/stl_tree.h ****       }
2167:/usr/include/c++/6/bits/stl_tree.h **** 
2168:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2169:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
2170:/usr/include/c++/6/bits/stl_tree.h ****     template<typename... _Args>
2171:/usr/include/c++/6/bits/stl_tree.h ****       typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
2172:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2173:/usr/include/c++/6/bits/stl_tree.h ****       _M_emplace_equal(_Args&&... __args)
2174:/usr/include/c++/6/bits/stl_tree.h ****       {
2175:/usr/include/c++/6/bits/stl_tree.h **** 	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
2176:/usr/include/c++/6/bits/stl_tree.h **** 
2177:/usr/include/c++/6/bits/stl_tree.h **** 	__try
2178:/usr/include/c++/6/bits/stl_tree.h **** 	  {
2179:/usr/include/c++/6/bits/stl_tree.h **** 	    auto __res = _M_get_insert_equal_pos(_S_key(__z));
2180:/usr/include/c++/6/bits/stl_tree.h **** 	    return _M_insert_node(__res.first, __res.second, __z);
2181:/usr/include/c++/6/bits/stl_tree.h **** 	  }
2182:/usr/include/c++/6/bits/stl_tree.h **** 	__catch(...)
2183:/usr/include/c++/6/bits/stl_tree.h **** 	  {
2184:/usr/include/c++/6/bits/stl_tree.h **** 	    _M_drop_node(__z);
2185:/usr/include/c++/6/bits/stl_tree.h **** 	    __throw_exception_again;
2186:/usr/include/c++/6/bits/stl_tree.h **** 	  }
2187:/usr/include/c++/6/bits/stl_tree.h ****       }
2188:/usr/include/c++/6/bits/stl_tree.h **** 
2189:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2190:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
2191:/usr/include/c++/6/bits/stl_tree.h ****     template<typename... _Args>
2192:/usr/include/c++/6/bits/stl_tree.h ****       typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
2193:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2194:/usr/include/c++/6/bits/stl_tree.h ****       _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
GAS LISTING /tmp/ccvmoMuv.s 			page 198


2195:/usr/include/c++/6/bits/stl_tree.h ****       {
2196:/usr/include/c++/6/bits/stl_tree.h **** 	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
2197:/usr/include/c++/6/bits/stl_tree.h **** 
2198:/usr/include/c++/6/bits/stl_tree.h **** 	__try
2199:/usr/include/c++/6/bits/stl_tree.h **** 	  {
2200:/usr/include/c++/6/bits/stl_tree.h **** 	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
2201:/usr/include/c++/6/bits/stl_tree.h **** 
2202:/usr/include/c++/6/bits/stl_tree.h **** 	    if (__res.second)
2203:/usr/include/c++/6/bits/stl_tree.h **** 	      return _M_insert_node(__res.first, __res.second, __z);
2204:/usr/include/c++/6/bits/stl_tree.h **** 
2205:/usr/include/c++/6/bits/stl_tree.h **** 	    _M_drop_node(__z);
2206:/usr/include/c++/6/bits/stl_tree.h **** 	    return iterator(__res.first);
2207:/usr/include/c++/6/bits/stl_tree.h **** 	  }
2208:/usr/include/c++/6/bits/stl_tree.h **** 	__catch(...)
2209:/usr/include/c++/6/bits/stl_tree.h **** 	  {
2210:/usr/include/c++/6/bits/stl_tree.h **** 	    _M_drop_node(__z);
2211:/usr/include/c++/6/bits/stl_tree.h **** 	    __throw_exception_again;
2212:/usr/include/c++/6/bits/stl_tree.h **** 	  }
2213:/usr/include/c++/6/bits/stl_tree.h ****       }
2214:/usr/include/c++/6/bits/stl_tree.h **** 
2215:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2216:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
2217:/usr/include/c++/6/bits/stl_tree.h ****     template<typename... _Args>
2218:/usr/include/c++/6/bits/stl_tree.h ****       typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
2219:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2220:/usr/include/c++/6/bits/stl_tree.h ****       _M_emplace_hint_equal(const_iterator __pos, _Args&&... __args)
2221:/usr/include/c++/6/bits/stl_tree.h ****       {
2222:/usr/include/c++/6/bits/stl_tree.h **** 	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
2223:/usr/include/c++/6/bits/stl_tree.h **** 
2224:/usr/include/c++/6/bits/stl_tree.h **** 	__try
2225:/usr/include/c++/6/bits/stl_tree.h **** 	  {
2226:/usr/include/c++/6/bits/stl_tree.h **** 	    auto __res = _M_get_insert_hint_equal_pos(__pos, _S_key(__z));
2227:/usr/include/c++/6/bits/stl_tree.h **** 
2228:/usr/include/c++/6/bits/stl_tree.h **** 	    if (__res.second)
2229:/usr/include/c++/6/bits/stl_tree.h **** 	      return _M_insert_node(__res.first, __res.second, __z);
2230:/usr/include/c++/6/bits/stl_tree.h **** 
2231:/usr/include/c++/6/bits/stl_tree.h **** 	    return _M_insert_equal_lower_node(__z);
2232:/usr/include/c++/6/bits/stl_tree.h **** 	  }
2233:/usr/include/c++/6/bits/stl_tree.h **** 	__catch(...)
2234:/usr/include/c++/6/bits/stl_tree.h **** 	  {
2235:/usr/include/c++/6/bits/stl_tree.h **** 	    _M_drop_node(__z);
2236:/usr/include/c++/6/bits/stl_tree.h **** 	    __throw_exception_again;
2237:/usr/include/c++/6/bits/stl_tree.h **** 	  }
2238:/usr/include/c++/6/bits/stl_tree.h ****       }
2239:/usr/include/c++/6/bits/stl_tree.h **** #endif
2240:/usr/include/c++/6/bits/stl_tree.h **** 
2241:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KoV,
2242:/usr/include/c++/6/bits/stl_tree.h ****            typename _Cmp, typename _Alloc>
2243:/usr/include/c++/6/bits/stl_tree.h ****     template<class _II>
2244:/usr/include/c++/6/bits/stl_tree.h ****       void
2245:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
2246:/usr/include/c++/6/bits/stl_tree.h ****       _M_insert_unique(_II __first, _II __last)
2247:/usr/include/c++/6/bits/stl_tree.h ****       {
2248:/usr/include/c++/6/bits/stl_tree.h **** 	_Alloc_node __an(*this);
2249:/usr/include/c++/6/bits/stl_tree.h **** 	for (; __first != __last; ++__first)
2250:/usr/include/c++/6/bits/stl_tree.h **** 	  _M_insert_unique_(end(), *__first, __an);
2251:/usr/include/c++/6/bits/stl_tree.h ****       }
GAS LISTING /tmp/ccvmoMuv.s 			page 199


2252:/usr/include/c++/6/bits/stl_tree.h **** 
2253:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KoV,
2254:/usr/include/c++/6/bits/stl_tree.h ****            typename _Cmp, typename _Alloc>
2255:/usr/include/c++/6/bits/stl_tree.h ****     template<class _II>
2256:/usr/include/c++/6/bits/stl_tree.h ****       void
2257:/usr/include/c++/6/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
2258:/usr/include/c++/6/bits/stl_tree.h ****       _M_insert_equal(_II __first, _II __last)
2259:/usr/include/c++/6/bits/stl_tree.h ****       {
2260:/usr/include/c++/6/bits/stl_tree.h **** 	_Alloc_node __an(*this);
2261:/usr/include/c++/6/bits/stl_tree.h **** 	for (; __first != __last; ++__first)
2262:/usr/include/c++/6/bits/stl_tree.h **** 	  _M_insert_equal_(end(), *__first, __an);
2263:/usr/include/c++/6/bits/stl_tree.h ****       }
2264:/usr/include/c++/6/bits/stl_tree.h **** 
2265:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2266:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
2267:/usr/include/c++/6/bits/stl_tree.h ****     void
2268:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2269:/usr/include/c++/6/bits/stl_tree.h ****     _M_erase_aux(const_iterator __position)
2270:/usr/include/c++/6/bits/stl_tree.h ****     {
2271:/usr/include/c++/6/bits/stl_tree.h ****       _Link_type __y =
2272:/usr/include/c++/6/bits/stl_tree.h **** 	static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
2273:/usr/include/c++/6/bits/stl_tree.h **** 				(const_cast<_Base_ptr>(__position._M_node),
2274:/usr/include/c++/6/bits/stl_tree.h **** 				 this->_M_impl._M_header));
2275:/usr/include/c++/6/bits/stl_tree.h ****       _M_drop_node(__y);
2276:/usr/include/c++/6/bits/stl_tree.h ****       --_M_impl._M_node_count;
2277:/usr/include/c++/6/bits/stl_tree.h ****     }
2278:/usr/include/c++/6/bits/stl_tree.h **** 
2279:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2280:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
2281:/usr/include/c++/6/bits/stl_tree.h ****     void
2282:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2283:/usr/include/c++/6/bits/stl_tree.h ****     _M_erase_aux(const_iterator __first, const_iterator __last)
2284:/usr/include/c++/6/bits/stl_tree.h ****     {
2285:/usr/include/c++/6/bits/stl_tree.h ****       if (__first == begin() && __last == end())
2286:/usr/include/c++/6/bits/stl_tree.h **** 	clear();
2287:/usr/include/c++/6/bits/stl_tree.h ****       else
2288:/usr/include/c++/6/bits/stl_tree.h **** 	while (__first != __last)
2289:/usr/include/c++/6/bits/stl_tree.h **** 	  erase(__first++);
2290:/usr/include/c++/6/bits/stl_tree.h ****     }
2291:/usr/include/c++/6/bits/stl_tree.h **** 
2292:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2293:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
2294:/usr/include/c++/6/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
2295:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2296:/usr/include/c++/6/bits/stl_tree.h ****     erase(const _Key& __x)
2297:/usr/include/c++/6/bits/stl_tree.h ****     {
2298:/usr/include/c++/6/bits/stl_tree.h ****       pair<iterator, iterator> __p = equal_range(__x);
2299:/usr/include/c++/6/bits/stl_tree.h ****       const size_type __old_size = size();
2300:/usr/include/c++/6/bits/stl_tree.h ****       erase(__p.first, __p.second);
2301:/usr/include/c++/6/bits/stl_tree.h ****       return __old_size - size();
2302:/usr/include/c++/6/bits/stl_tree.h ****     }
2303:/usr/include/c++/6/bits/stl_tree.h **** 
2304:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2305:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
2306:/usr/include/c++/6/bits/stl_tree.h ****     void
2307:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2308:/usr/include/c++/6/bits/stl_tree.h ****     erase(const _Key* __first, const _Key* __last)
GAS LISTING /tmp/ccvmoMuv.s 			page 200


2309:/usr/include/c++/6/bits/stl_tree.h ****     {
2310:/usr/include/c++/6/bits/stl_tree.h ****       while (__first != __last)
2311:/usr/include/c++/6/bits/stl_tree.h **** 	erase(*__first++);
2312:/usr/include/c++/6/bits/stl_tree.h ****     }
2313:/usr/include/c++/6/bits/stl_tree.h **** 
2314:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2315:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
2316:/usr/include/c++/6/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue,
2317:/usr/include/c++/6/bits/stl_tree.h **** 		      _Compare, _Alloc>::iterator
2318:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2319:/usr/include/c++/6/bits/stl_tree.h ****     find(const _Key& __k)
2320:/usr/include/c++/6/bits/stl_tree.h ****     {
2321:/usr/include/c++/6/bits/stl_tree.h ****       iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
2322:/usr/include/c++/6/bits/stl_tree.h ****       return (__j == end()
2323:/usr/include/c++/6/bits/stl_tree.h **** 	      || _M_impl._M_key_compare(__k,
2324:/usr/include/c++/6/bits/stl_tree.h **** 					_S_key(__j._M_node))) ? end() : __j;
 1981              		.loc 19 2324 0
 1982 005f 4D39E6   		cmpq	%r12, %r14
 1983 0062 7427     		je	.L136
 1984              	.LVL184:
 1985              	.LBB13092:
 1986              	.LBB13093:
 1987              	.LBB13094:
 1988              		.loc 20 891 0
 1989 0064 498D7424 		leaq	32(%r12), %rsi
 1989      20
 1990              	.LVL185:
 1991              	.LBE13094:
 1992              	.LBE13093:
 1993              	.LBE13092:
 1994              	.LBB13095:
 1995              	.LBB13096:
 1996              		.loc 21 907 0
 1997 0069 4889EF   		movq	%rbp, %rdi
 1998 006c E8000000 		call	_ZN3pmt3eqvERKN5boost13intrusive_ptrINS_8pmt_baseEEES5_@PLT
 1998      00
 1999              	.LVL186:
 2000 0071 84C0     		testb	%al, %al
 2001 0073 740B     		je	.L142
 2002              	.LVL187:
 2003              	.L129:
 2004              	.LBE13096:
 2005              	.LBE13095:
 2006              	.LBE13097:
 2007              	.LBE13099:
 2008              	.LBE13101:
 278:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 2009              		.loc 2 278 0
 2010 0075 5B       		popq	%rbx
 2011              		.cfi_remember_state
 2012              		.cfi_def_cfa_offset 40
 2013 0076 5D       		popq	%rbp
 2014              		.cfi_def_cfa_offset 32
 2015              	.LVL188:
 2016 0077 415C     		popq	%r12
 2017              		.cfi_def_cfa_offset 24
 2018              	.LVL189:
GAS LISTING /tmp/ccvmoMuv.s 			page 201


 2019 0079 415D     		popq	%r13
 2020              		.cfi_def_cfa_offset 16
 2021              	.LVL190:
 2022 007b 415E     		popq	%r14
 2023              		.cfi_def_cfa_offset 8
 2024              	.LVL191:
 2025 007d C3       		ret
 2026              	.LVL192:
 2027 007e 6690     		.p2align 4,,10
 2028              		.p2align 3
 2029              	.L142:
 2030              		.cfi_restore_state
 2031              	.LBB13102:
 2032              	.LBB13100:
 2033              	.LBB13098:
2323:/usr/include/c++/6/bits/stl_tree.h **** 					_S_key(__j._M_node))) ? end() : __j;
 2034              		.loc 19 2323 0
 2035 0080 498B4424 		movq	32(%r12), %rax
 2035      20
 2036 0085 48394500 		cmpq	%rax, 0(%rbp)
 2037 0089 7617     		jbe	.L143
 2038              	.LVL193:
 2039              	.L136:
 2040              	.LBE13098:
 2041              	.LBE13100:
 2042              	.LBE13102:
 278:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 2043              		.loc 2 278 0
 2044 008b 5B       		popq	%rbx
 2045              		.cfi_remember_state
 2046              		.cfi_def_cfa_offset 40
 274:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****         return true;
 2047              		.loc 2 274 0
 2048 008c 498DBD80 		leaq	384(%r13), %rdi
 2048      010000
 2049 0093 4889EE   		movq	%rbp, %rsi
 278:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 2050              		.loc 2 278 0
 2051 0096 5D       		popq	%rbp
 2052              		.cfi_def_cfa_offset 32
 2053              	.LVL194:
 2054 0097 415C     		popq	%r12
 2055              		.cfi_def_cfa_offset 24
 2056 0099 415D     		popq	%r13
 2057              		.cfi_def_cfa_offset 16
 2058              	.LVL195:
 2059 009b 415E     		popq	%r14
 2060              		.cfi_def_cfa_offset 8
 274:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****         return true;
 2061              		.loc 2 274 0
 2062 009d E9000000 		jmp	_ZN3pmt12dict_has_keyERKN5boost13intrusive_ptrINS_8pmt_baseEEES5_@PLT
 2062      00
 2063              	.LVL196:
 2064              	.L143:
 2065              		.cfi_restore_state
 272:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       }
 2066              		.loc 2 272 0
GAS LISTING /tmp/ccvmoMuv.s 			page 202


 2067 00a2 B8010000 		movl	$1, %eax
 2067      00
 2068 00a7 EBCC     		jmp	.L129
 2069              		.cfi_endproc
 2070              	.LFE8700:
 2072              		.section	.text._ZN2gr5block18processor_affinityEv,"axG",@progbits,_ZN2gr5block18processor_affinity
 2073              		.align 2
 2074              		.p2align 4,,15
 2075              		.weak	_ZN2gr5block18processor_affinityEv
 2077              	_ZN2gr5block18processor_affinityEv:
 2078              	.LFB10958:
 2079              		.file 22 "/home/mpiscopo/gnuradio/include/gnuradio/block.h"
   1:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** /* -*- c++ -*- */
   2:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** /*
   3:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****  * Copyright 2004,2007,2009,2010,2013 Free Software Foundation, Inc.
   4:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****  *
   5:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****  * This file is part of GNU Radio
   6:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****  *
   7:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****  * GNU Radio is free software; you can redistribute it and/or modify
   8:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****  * it under the terms of the GNU General Public License as published by
   9:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****  * the Free Software Foundation; either version 3, or (at your option)
  10:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****  * any later version.
  11:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****  *
  12:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****  * GNU Radio is distributed in the hope that it will be useful,
  13:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****  * GNU General Public License for more details.
  16:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****  *
  17:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****  * You should have received a copy of the GNU General Public License
  18:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****  * along with GNU Radio; see the file COPYING.  If not, write to
  19:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****  * the Free Software Foundation, Inc., 51 Franklin Street,
  20:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****  * Boston, MA 02110-1301, USA.
  21:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****  */
  22:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
  23:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** #ifndef INCLUDED_GR_RUNTIME_BLOCK_H
  24:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** #define INCLUDED_GR_RUNTIME_BLOCK_H
  25:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
  26:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** #include <gnuradio/api.h>
  27:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** #include <gnuradio/basic_block.h>
  28:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** #include <gnuradio/tags.h>
  29:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** #include <gnuradio/logger.h>
  30:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
  31:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** namespace gr {
  32:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
  33:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****   /*!
  34:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    * \brief The abstract base class for all 'terminal' processing blocks.
  35:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    * \ingroup base_blk
  36:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    *
  37:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    * A signal processing flow is constructed by creating a tree of
  38:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    * hierarchical blocks, which at any level may also contain terminal
  39:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    * nodes that actually implement signal processing functions. This
  40:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    * is the base class for all such leaf nodes.
  41:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    *
  42:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    * Blocks have a set of input streams and output streams.  The
  43:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    * input_signature and output_signature define the number of input
  44:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    * streams and output streams respectively, and the type of the data
  45:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    * items in each stream.
GAS LISTING /tmp/ccvmoMuv.s 			page 203


  46:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    *
  47:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    * Although blocks may consume data on each input stream at a
  48:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    * different rate, all outputs streams must produce data at the same
  49:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    * rate.  That rate may be different from any of the input rates.
  50:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    *
  51:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    * User derived blocks override two methods, forecast and
  52:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    * general_work, to implement their signal processing
  53:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    * behavior. forecast is called by the system scheduler to determine
  54:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    * how many items are required on each input stream in order to
  55:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    * produce a given number of output items.
  56:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    *
  57:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    * general_work is called to perform the signal processing in the
  58:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    * block.  It reads the input items and writes the output items.
  59:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****    */
  60:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****   class GR_RUNTIME_API block : public basic_block
  61:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****   {
  62:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****   public:
  63:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
  64:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     //! Magic return values from general_work
  65:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     enum {
  66:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****       WORK_CALLED_PRODUCE = -2,
  67:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****       WORK_DONE = -1
  68:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     };
  69:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
  70:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     enum tag_propagation_policy_t {
  71:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****       TPP_DONT = 0,
  72:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****       TPP_ALL_TO_ALL = 1,
  73:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****       TPP_ONE_TO_ONE = 2
  74:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     };
  75:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
  76:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     virtual ~block();
  77:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
  78:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
  79:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * Assume block computes y_i = f(x_i, x_i-1, x_i-2, x_i-3...)
  80:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * History is the number of x_i's that are examined to produce one y_i.
  81:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * This comes in handy for FIR filters, where we use history to
  82:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * ensure that our input contains the appropriate "history" for the
  83:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * filter. History should be equal to the number of filter taps. First
  84:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * history samples (when there are no previous samples) are
  85:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * initialized with zeroes.
  86:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
  87:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     unsigned history() const;
  88:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     void  set_history(unsigned history);
  89:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
  90:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
  91:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * Declares the block's delay in samples. Since the delay of
  92:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * blocks like filters is derived from the taps and not the block
  93:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * itself, we cannot automatically calculate this value and so
  94:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * leave it as a user-defined property. It defaults to 0 is not
  95:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * set.
  96:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
  97:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * This does not actively set the delay; it just tells the
  98:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * scheduler what the delay is.
  99:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 100:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * This delay is mostly used to adjust the placement of the tags
 101:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * and is not currently used for any signal processing. When a tag
 102:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * is passed through a block with internal delay, its location
GAS LISTING /tmp/ccvmoMuv.s 			page 204


 103:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * should be moved based on the delay of the block. This interface
 104:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * allows us to tell the scheduler this value.
 105:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 106:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \param which The buffer on which to set the delay.
 107:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \param delay The sample delay of the data stream.
 108:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 109:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     void declare_sample_delay(int which, unsigned delay);
 110:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 111:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 112:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * Convenience wrapper to gr::block::declare_delay(int which, unsigned delay)
 113:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * to set all ports to the same delay.
 114:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 115:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     void declare_sample_delay(unsigned delay);
 116:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 117:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 118:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * Gets the delay of the block. Since the delay of blocks like
 119:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * filters is derived from the taps and not the block itself, we
 120:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * cannot automatically calculate this value and so leave it as a
 121:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * user-defined property. It defaults to 0 is not set.
 122:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 123:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \param which Which port from which to get the sample delay.
 124:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 125:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     unsigned sample_delay(int which) const;
 126:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 127:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 128:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Return true if this block has a fixed input to output rate.
 129:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 130:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * If true, then fixed_rate_in_to_out and fixed_rate_out_to_in may be called.
 131:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 132:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     bool fixed_rate() const { return d_fixed_rate; }
 133:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 134:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     // ----------------------------------------------------------------
 135:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     //		override these to define your behavior
 136:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     // ----------------------------------------------------------------
 137:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 138:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 139:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief  Estimate input requirements given output request
 140:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 141:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \param noutput_items           number of output items to produce
 142:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \param ninput_items_required   number of input items required on each input stream
 143:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 144:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * Given a request to product \p noutput_items, estimate the
 145:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * number of data items required on each input stream.  The
 146:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * estimate doesn't have to be exact, but should be close.
 147:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 148:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     virtual void forecast(int noutput_items,
 149:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****                           gr_vector_int &ninput_items_required);
 150:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 151:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 152:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief compute output items from input items
 153:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 154:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \param noutput_items	number of output items to write on each output stream
 155:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \param ninput_items	number of input items available on each input stream
 156:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \param input_items	vector of pointers to the input items, one entry per input stream
 157:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \param output_items	vector of pointers to the output items, one entry per output stream
 158:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 159:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \returns number of items actually written to each output stream, or -1 on EOF.
GAS LISTING /tmp/ccvmoMuv.s 			page 205


 160:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * It is OK to return a value less than noutput_items.  -1 <= return value <= noutput_items
 161:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 162:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * general_work must call consume or consume_each to indicate how
 163:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * many items were consumed on each input stream.
 164:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 165:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     virtual int general_work(int noutput_items,
 166:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****                              gr_vector_int &ninput_items,
 167:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****                              gr_vector_const_void_star &input_items,
 168:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****                              gr_vector_void_star &output_items);
 169:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 170:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 171:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Called to enable drivers, etc for i/o devices.
 172:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 173:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * This allows a block to enable an associated driver to begin
 174:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * transferring data just before we start to execute the scheduler.
 175:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * The end result is that this reduces latency in the pipeline
 176:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * when dealing with audio devices, usrps, etc.
 177:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 178:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     virtual bool start();
 179:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 180:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 181:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Called to disable drivers, etc for i/o devices.
 182:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 183:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     virtual bool stop();
 184:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 185:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     // ----------------------------------------------------------------
 186:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 187:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 188:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Constrain the noutput_items argument passed to forecast and general_work
 189:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 190:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * set_output_multiple causes the scheduler to ensure that the
 191:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * noutput_items argument passed to forecast and general_work will
 192:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * be an integer multiple of \param multiple The default value of
 193:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * output multiple is 1.
 194:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 195:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     void set_output_multiple(int multiple);
 196:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     int  output_multiple() const { return d_output_multiple; }
 197:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     bool output_multiple_set() const { return d_output_multiple_set; }
 198:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 199:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 200:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Constrains buffers to work on a set item alignment (for SIMD)
 201:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 202:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * set_alignment_multiple causes the scheduler to ensure that the
 203:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * noutput_items argument passed to forecast and general_work will
 204:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * be an integer multiple of \param multiple The default value is
 205:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * 1.
 206:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 207:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * This control is similar to the output_multiple setting, except
 208:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * that if the number of items passed to the block is less than
 209:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * the output_multiple, this value is ignored and the block can
 210:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * produce like normal. The d_unaligned value is set to the number
 211:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * of items the block is off by. In the next call to general_work,
 212:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * the noutput_items is set to d_unaligned or less until
 213:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * d_unaligned==0. The buffers are now aligned again and the
 214:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * aligned calls can be performed again.
 215:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 216:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     void set_alignment(int multiple);
GAS LISTING /tmp/ccvmoMuv.s 			page 206


 217:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     int  alignment() const { return d_output_multiple; }
 218:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 219:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     void set_unaligned(int na);
 220:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     int  unaligned() const { return d_unaligned; }
 221:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     void set_is_unaligned(bool u);
 222:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     bool is_unaligned() const { return d_is_unaligned; }
 223:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 224:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 225:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Tell the scheduler \p how_many_items of input stream \p
 226:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * which_input were consumed.
 227:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * This function should be called at the end of work() or general_work(), after all processing 
 228:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 229:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     void consume(int which_input, int how_many_items);
 230:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 231:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 232:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Tell the scheduler \p how_many_items were consumed on
 233:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * each input stream.
 234:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 235:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     void consume_each(int how_many_items);
 236:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 237:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 238:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Tell the scheduler \p how_many_items were produced on
 239:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * output stream \p which_output.
 240:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 241:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * If the block's general_work method calls produce, \p
 242:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * general_work must return WORK_CALLED_PRODUCE.
 243:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 244:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     void produce(int which_output, int how_many_items);
 245:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 246:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 247:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Set the approximate output rate / input rate
 248:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 249:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * Provide a hint to the buffer allocator and scheduler.
 250:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * The default relative_rate is 1.0
 251:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 252:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * decimators have relative_rates < 1.0
 253:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * interpolators have relative_rates > 1.0
 254:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 255:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     void set_relative_rate(double relative_rate);
 256:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 257:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 258:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief return the approximate output rate / input rate
 259:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 260:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     double relative_rate() const { return d_relative_rate; }
 261:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 262:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*
 263:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * The following two methods provide special case info to the
 264:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * scheduler in the event that a block has a fixed input to output
 265:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * ratio.  sync_block, sync_decimator and
 266:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * sync_interpolator override these.  If you're fixed rate,
 267:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * subclass one of those.
 268:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 269:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 270:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Given ninput samples, return number of output samples that will be produced.
 271:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * N.B. this is only defined if fixed_rate returns true.
 272:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * Generally speaking, you don't need to override this.
 273:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
GAS LISTING /tmp/ccvmoMuv.s 			page 207


 274:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     virtual int fixed_rate_ninput_to_noutput(int ninput);
 275:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 276:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 277:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Given noutput samples, return number of input samples required to produce noutput.
 278:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * N.B. this is only defined if fixed_rate returns true.
 279:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * Generally speaking, you don't need to override this.
 280:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 281:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     virtual int fixed_rate_noutput_to_ninput(int noutput);
 282:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 283:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 284:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Return the number of items read on input stream which_input
 285:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 286:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     uint64_t nitems_read(unsigned int which_input);
 287:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 288:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 289:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief  Return the number of items written on output stream which_output
 290:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 291:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     uint64_t nitems_written(unsigned int which_output);
 292:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 293:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 294:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Asks for the policy used by the scheduler to moved tags downstream.
 295:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 296:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     tag_propagation_policy_t tag_propagation_policy();
 297:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 298:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 299:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Set the policy by the scheduler to determine how tags are moved downstream.
 300:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 301:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     void set_tag_propagation_policy(tag_propagation_policy_t p);
 302:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 303:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 304:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Return the minimum number of output items this block can
 305:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * produce during a call to work.
 306:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 307:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * Should be 0 for most blocks.  Useful if we're dealing with
 308:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * packets and the block produces one packet per call to work.
 309:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 310:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     int min_noutput_items() const { return d_min_noutput_items; }
 311:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 312:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 313:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Set the minimum number of output items this block can
 314:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * produce during a call to work.
 315:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 316:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \param m the minimum noutput_items this block can produce.
 317:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 318:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     void set_min_noutput_items(int m) { d_min_noutput_items = m; }
 319:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 320:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 321:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Return the maximum number of output items this block will
 322:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * handle during a call to work.
 323:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 324:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     int max_noutput_items();
 325:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 326:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 327:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Set the maximum number of output items this block will
 328:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * handle during a call to work.
 329:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 330:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \param m the maximum noutput_items this block will handle.
GAS LISTING /tmp/ccvmoMuv.s 			page 208


 331:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 332:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     void set_max_noutput_items(int m);
 333:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 334:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 335:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Clear the switch for using the max_noutput_items value of this block.
 336:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 337:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * When is_set_max_noutput_items() returns 'true', the scheduler
 338:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * will use the value returned by max_noutput_items() to limit the
 339:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * size of the number of items possible for this block's work
 340:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * function. If is_set_max_notput_items() returns 'false', then
 341:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * the scheduler ignores the internal value and uses the value set
 342:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * globally in the top_block.
 343:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 344:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * Use this value to clear the 'is_set' flag so the scheduler will
 345:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * ignore this. Use the set_max_noutput_items(m) call to both set
 346:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * a new value for max_noutput_items and to re-enable its use in
 347:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * the scheduler.
 348:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 349:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     void unset_max_noutput_items();
 350:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 351:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 352:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Ask the block if the flag is or is not set to use the
 353:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * internal value of max_noutput_items during a call to work.
 354:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 355:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     bool is_set_max_noutput_items();
 356:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 357:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*
 358:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * Used to expand the vectors that hold the min/max buffer sizes.
 359:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 360:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * Specifically, when -1 is used, the vectors are just initialized
 361:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * with 1 value; this is used by the flat_flowgraph to expand when
 362:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * required to add a new value for new ports on these blocks.
 363:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 364:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     void expand_minmax_buffer(int port);
 365:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 366:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 367:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Returns max buffer size on output port \p i.
 368:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 369:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     long max_output_buffer(size_t i);
 370:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 371:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 372:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Request limit on max buffer size on all output ports.
 373:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 374:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \details
 375:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * This is an advanced feature. Calling this can affect some
 376:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * fundamental assumptions about the system behavior and
 377:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * performance.
 378:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 379:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * The actual buffer size is determined by a number of other
 380:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * factors from the block and system. This function only provides
 381:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * a requested maximum. The buffers will always be a multiple of
 382:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * the system page size, which may be larger than the value asked
 383:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * for here.
 384:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 385:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \param max_output_buffer the requested maximum output size in items.
 386:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 387:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     void set_max_output_buffer(long max_output_buffer);
GAS LISTING /tmp/ccvmoMuv.s 			page 209


 388:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 389:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 390:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Request limit on max buffer size on output port \p port.
 391:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 392:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \details
 393:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * This is an advanced feature. Calling this can affect some
 394:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * fundamental assumptions about the system behavior and
 395:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * performance.
 396:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 397:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * The actual buffer size is determined by a number of other
 398:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * factors from the block and system. This function only provides
 399:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * a requested maximum. The buffers will always be a multiple of
 400:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * the system page size, which may be larger than the value asked
 401:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * for here.
 402:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 403:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \param port the output port the request applies to.
 404:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \param max_output_buffer the requested maximum output size in items.
 405:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 406:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     void set_max_output_buffer(int port, long max_output_buffer);
 407:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 408:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 409:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Returns min buffer size on output port \p i.
 410:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 411:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     long min_output_buffer(size_t i);
 412:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 413:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 414:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Request limit on the minimum buffer size on all output
 415:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * ports.
 416:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 417:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \details
 418:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * This is an advanced feature. Calling this can affect some
 419:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * fundamental assumptions about the system behavior and
 420:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * performance.
 421:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 422:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * The actual buffer size is determined by a number of other
 423:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * factors from the block and system. This function only provides
 424:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * a requested minimum. The buffers will always be a multiple of
 425:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * the system page size, which may be larger than the value asked
 426:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * for here.
 427:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 428:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \param min_output_buffer the requested minimum output size in items.
 429:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 430:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     void set_min_output_buffer(long min_output_buffer);
 431:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 432:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 433:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Request limit on min buffer size on output port \p port.
 434:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 435:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \details
 436:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * This is an advanced feature. Calling this can affect some
 437:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * fundamental assumptions about the system behavior and
 438:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * performance.
 439:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 440:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * The actual buffer size is determined by a number of other
 441:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * factors from the block and system. This function only provides
 442:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * a requested minimum. The buffers will always be a multiple of
 443:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * the system page size, which may be larger than the value asked
 444:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * for here.
GAS LISTING /tmp/ccvmoMuv.s 			page 210


 445:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 446:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \param port the output port the request applies to.
 447:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \param min_output_buffer the requested minimum output size in items.
 448:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 449:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     void set_min_output_buffer(int port, long min_output_buffer);
 450:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 451:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     // --------------- Performance counter functions -------------
 452:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 453:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 454:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Gets instantaneous noutput_items performance counter.
 455:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 456:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     float pc_noutput_items();
 457:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 458:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 459:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Gets average noutput_items performance counter.
 460:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 461:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     float pc_noutput_items_avg();
 462:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 463:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 464:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Gets variance of noutput_items performance counter.
 465:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 466:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     float pc_noutput_items_var();
 467:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 468:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 469:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Gets instantaneous num items produced performance counter.
 470:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 471:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     float pc_nproduced();
 472:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 473:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 474:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Gets average num items produced performance counter.
 475:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 476:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     float pc_nproduced_avg();
 477:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 478:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 479:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Gets variance of  num items produced performance counter.
 480:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 481:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     float pc_nproduced_var();
 482:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 483:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 484:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Gets instantaneous fullness of \p which input buffer.
 485:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 486:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     float pc_input_buffers_full(int which);
 487:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 488:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 489:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Gets average fullness of \p which input buffer.
 490:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 491:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     float pc_input_buffers_full_avg(int which);
 492:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 493:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 494:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Gets variance of fullness of \p which input buffer.
 495:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 496:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     float pc_input_buffers_full_var(int which);
 497:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 498:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 499:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Gets instantaneous fullness of all input buffers.
 500:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 501:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     std::vector<float> pc_input_buffers_full();
GAS LISTING /tmp/ccvmoMuv.s 			page 211


 502:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 503:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 504:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Gets average fullness of all input buffers.
 505:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 506:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     std::vector<float> pc_input_buffers_full_avg();
 507:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 508:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 509:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Gets variance of fullness of all input buffers.
 510:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 511:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     std::vector<float> pc_input_buffers_full_var();
 512:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 513:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 514:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Gets instantaneous fullness of \p which input buffer.
 515:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 516:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     float pc_output_buffers_full(int which);
 517:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 518:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 519:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Gets average fullness of \p which input buffer.
 520:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 521:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     float pc_output_buffers_full_avg(int which);
 522:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 523:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 524:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Gets variance of fullness of \p which input buffer.
 525:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 526:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     float pc_output_buffers_full_var(int which);
 527:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 528:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 529:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Gets instantaneous fullness of all output buffers.
 530:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 531:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     std::vector<float> pc_output_buffers_full();
 532:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 533:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 534:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Gets average fullness of all output buffers.
 535:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 536:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     std::vector<float> pc_output_buffers_full_avg();
 537:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 538:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 539:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Gets variance of fullness of all output buffers.
 540:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 541:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     std::vector<float> pc_output_buffers_full_var();
 542:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 543:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 544:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Gets instantaneous clock cycles spent in work.
 545:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 546:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     float pc_work_time();
 547:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 548:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 549:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Gets average clock cycles spent in work.
 550:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 551:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     float pc_work_time_avg();
 552:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 553:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 554:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Gets average clock cycles spent in work.
 555:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 556:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     float pc_work_time_var();
 557:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 558:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
GAS LISTING /tmp/ccvmoMuv.s 			page 212


 559:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Gets total clock cycles spent in work.
 560:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 561:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     float pc_work_time_total();
 562:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 563:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 564:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Gets average throughput.
 565:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 566:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     float pc_throughput_avg();
 567:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 568:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 569:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Resets the performance counters
 570:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 571:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     void reset_perf_counters();
 572:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 573:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 574:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Sets up export of perf. counters to ControlPort. Only
 575:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * called by the scheduler.
 576:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 577:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     void setup_pc_rpc();
 578:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 579:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 580:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Checks if this block is already exporting perf. counters
 581:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * to ControlPort.
 582:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 583:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     bool is_pc_rpc_set() { return d_pc_rpc_set; }
 584:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 585:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 586:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief If the block calls this in its constructor, it's
 587:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * perf. counters will not be exported.
 588:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 589:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     void no_pc_rpc() { d_pc_rpc_set = true; }
 590:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 591:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 592:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     // ----------------------------------------------------------------------------
 593:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     // Functions to handle thread affinity
 594:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 595:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 596:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Set the thread's affinity to processor core \p n.
 597:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      *
 598:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \param mask a vector of ints of the core numbers available to this block.
 599:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 600:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     void set_processor_affinity(const std::vector<int> &mask);
 601:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 602:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 603:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Remove processor affinity to a specific core.
 604:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 605:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     void unset_processor_affinity();
 606:/home/mpiscopo/gnuradio/include/gnuradio/block.h **** 
 607:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     /*!
 608:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      * \brief Get the current processor affinity.
 609:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****      */
 610:/home/mpiscopo/gnuradio/include/gnuradio/block.h ****     std::vector<int> processor_affinity() { return d_affinity; }
 2080              		.loc 22 610 0
 2081              		.cfi_startproc
 2082              	.LVL197:
 2083 0000 4154     		pushq	%r12
 2084              		.cfi_def_cfa_offset 16
GAS LISTING /tmp/ccvmoMuv.s 			page 213


 2085              		.cfi_offset 12, -16
 2086 0002 55       		pushq	%rbp
 2087              		.cfi_def_cfa_offset 24
 2088              		.cfi_offset 6, -24
 2089              	.LBB13148:
 2090              	.LBB13149:
 2091              	.LBB13150:
 2092              	.LBB13151:
 2093              	.LBB13152:
 2094              	.LBB13153:
 2095              	.LBB13154:
 2096              		.file 23 "/usr/include/c++/6/bits/stl_vector.h"
   1:/usr/include/c++/6/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/usr/include/c++/6/bits/stl_vector.h **** 
   3:/usr/include/c++/6/bits/stl_vector.h **** // Copyright (C) 2001-2016 Free Software Foundation, Inc.
   4:/usr/include/c++/6/bits/stl_vector.h **** //
   5:/usr/include/c++/6/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/6/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/6/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/6/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/6/bits/stl_vector.h **** // any later version.
  10:/usr/include/c++/6/bits/stl_vector.h **** 
  11:/usr/include/c++/6/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/6/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/6/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/6/bits/stl_vector.h **** // GNU General Public License for more details.
  15:/usr/include/c++/6/bits/stl_vector.h **** 
  16:/usr/include/c++/6/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/6/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/6/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/6/bits/stl_vector.h **** 
  20:/usr/include/c++/6/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/6/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/6/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/6/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/6/bits/stl_vector.h **** 
  25:/usr/include/c++/6/bits/stl_vector.h **** /*
  26:/usr/include/c++/6/bits/stl_vector.h ****  *
  27:/usr/include/c++/6/bits/stl_vector.h ****  * Copyright (c) 1994
  28:/usr/include/c++/6/bits/stl_vector.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/6/bits/stl_vector.h ****  *
  30:/usr/include/c++/6/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/6/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/6/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/6/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/6/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/6/bits/stl_vector.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/6/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/6/bits/stl_vector.h ****  *
  38:/usr/include/c++/6/bits/stl_vector.h ****  *
  39:/usr/include/c++/6/bits/stl_vector.h ****  * Copyright (c) 1996
  40:/usr/include/c++/6/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/6/bits/stl_vector.h ****  *
  42:/usr/include/c++/6/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/6/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/6/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/6/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
GAS LISTING /tmp/ccvmoMuv.s 			page 214


  46:/usr/include/c++/6/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/6/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/6/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/6/bits/stl_vector.h ****  */
  50:/usr/include/c++/6/bits/stl_vector.h **** 
  51:/usr/include/c++/6/bits/stl_vector.h **** /** @file bits/stl_vector.h
  52:/usr/include/c++/6/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/6/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/6/bits/stl_vector.h ****  */
  55:/usr/include/c++/6/bits/stl_vector.h **** 
  56:/usr/include/c++/6/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  57:/usr/include/c++/6/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  58:/usr/include/c++/6/bits/stl_vector.h **** 
  59:/usr/include/c++/6/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:/usr/include/c++/6/bits/stl_vector.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/6/bits/stl_vector.h **** #include <bits/concept_check.h>
  62:/usr/include/c++/6/bits/stl_vector.h **** #if __cplusplus >= 201103L
  63:/usr/include/c++/6/bits/stl_vector.h **** #include <initializer_list>
  64:/usr/include/c++/6/bits/stl_vector.h **** #endif
  65:/usr/include/c++/6/bits/stl_vector.h **** 
  66:/usr/include/c++/6/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  67:/usr/include/c++/6/bits/stl_vector.h **** {
  68:/usr/include/c++/6/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  69:/usr/include/c++/6/bits/stl_vector.h **** 
  70:/usr/include/c++/6/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  71:/usr/include/c++/6/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  72:/usr/include/c++/6/bits/stl_vector.h ****     struct _Vector_base
  73:/usr/include/c++/6/bits/stl_vector.h ****     {
  74:/usr/include/c++/6/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  75:/usr/include/c++/6/bits/stl_vector.h ****         rebind<_Tp>::other _Tp_alloc_type;
  76:/usr/include/c++/6/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  77:/usr/include/c++/6/bits/stl_vector.h ****        	pointer;
  78:/usr/include/c++/6/bits/stl_vector.h **** 
  79:/usr/include/c++/6/bits/stl_vector.h ****       struct _Vector_impl 
  80:/usr/include/c++/6/bits/stl_vector.h ****       : public _Tp_alloc_type
  81:/usr/include/c++/6/bits/stl_vector.h ****       {
  82:/usr/include/c++/6/bits/stl_vector.h **** 	pointer _M_start;
  83:/usr/include/c++/6/bits/stl_vector.h **** 	pointer _M_finish;
  84:/usr/include/c++/6/bits/stl_vector.h **** 	pointer _M_end_of_storage;
  85:/usr/include/c++/6/bits/stl_vector.h **** 
  86:/usr/include/c++/6/bits/stl_vector.h **** 	_Vector_impl()
  87:/usr/include/c++/6/bits/stl_vector.h **** 	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  88:/usr/include/c++/6/bits/stl_vector.h **** 	{ }
  89:/usr/include/c++/6/bits/stl_vector.h **** 
  90:/usr/include/c++/6/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
  91:/usr/include/c++/6/bits/stl_vector.h **** 	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
  92:/usr/include/c++/6/bits/stl_vector.h **** 	{ }
  93:/usr/include/c++/6/bits/stl_vector.h **** 
  94:/usr/include/c++/6/bits/stl_vector.h **** #if __cplusplus >= 201103L
  95:/usr/include/c++/6/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
  96:/usr/include/c++/6/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)),
  97:/usr/include/c++/6/bits/stl_vector.h **** 	  _M_start(), _M_finish(), _M_end_of_storage()
  98:/usr/include/c++/6/bits/stl_vector.h **** 	{ }
  99:/usr/include/c++/6/bits/stl_vector.h **** #endif
 100:/usr/include/c++/6/bits/stl_vector.h **** 
 101:/usr/include/c++/6/bits/stl_vector.h **** 	void _M_swap_data(_Vector_impl& __x) _GLIBCXX_NOEXCEPT
 102:/usr/include/c++/6/bits/stl_vector.h **** 	{
GAS LISTING /tmp/ccvmoMuv.s 			page 215


 103:/usr/include/c++/6/bits/stl_vector.h **** 	  std::swap(_M_start, __x._M_start);
 104:/usr/include/c++/6/bits/stl_vector.h **** 	  std::swap(_M_finish, __x._M_finish);
 105:/usr/include/c++/6/bits/stl_vector.h **** 	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
 106:/usr/include/c++/6/bits/stl_vector.h **** 	}
 107:/usr/include/c++/6/bits/stl_vector.h ****       };
 108:/usr/include/c++/6/bits/stl_vector.h ****       
 109:/usr/include/c++/6/bits/stl_vector.h ****     public:
 110:/usr/include/c++/6/bits/stl_vector.h ****       typedef _Alloc allocator_type;
 111:/usr/include/c++/6/bits/stl_vector.h **** 
 112:/usr/include/c++/6/bits/stl_vector.h ****       _Tp_alloc_type&
 113:/usr/include/c++/6/bits/stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 114:/usr/include/c++/6/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 115:/usr/include/c++/6/bits/stl_vector.h **** 
 116:/usr/include/c++/6/bits/stl_vector.h ****       const _Tp_alloc_type&
 117:/usr/include/c++/6/bits/stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 118:/usr/include/c++/6/bits/stl_vector.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 119:/usr/include/c++/6/bits/stl_vector.h **** 
 120:/usr/include/c++/6/bits/stl_vector.h ****       allocator_type
 121:/usr/include/c++/6/bits/stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 122:/usr/include/c++/6/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 123:/usr/include/c++/6/bits/stl_vector.h **** 
 124:/usr/include/c++/6/bits/stl_vector.h ****       _Vector_base()
 125:/usr/include/c++/6/bits/stl_vector.h ****       : _M_impl() { }
 126:/usr/include/c++/6/bits/stl_vector.h **** 
 127:/usr/include/c++/6/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 128:/usr/include/c++/6/bits/stl_vector.h ****       : _M_impl(__a) { }
 129:/usr/include/c++/6/bits/stl_vector.h **** 
 130:/usr/include/c++/6/bits/stl_vector.h ****       _Vector_base(size_t __n)
 131:/usr/include/c++/6/bits/stl_vector.h ****       : _M_impl()
 132:/usr/include/c++/6/bits/stl_vector.h ****       { _M_create_storage(__n); }
 133:/usr/include/c++/6/bits/stl_vector.h **** 
 134:/usr/include/c++/6/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 135:/usr/include/c++/6/bits/stl_vector.h ****       : _M_impl(__a)
 136:/usr/include/c++/6/bits/stl_vector.h ****       { _M_create_storage(__n); }
 137:/usr/include/c++/6/bits/stl_vector.h **** 
 138:/usr/include/c++/6/bits/stl_vector.h **** #if __cplusplus >= 201103L
 139:/usr/include/c++/6/bits/stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 140:/usr/include/c++/6/bits/stl_vector.h ****       : _M_impl(std::move(__a)) { }
 141:/usr/include/c++/6/bits/stl_vector.h **** 
 142:/usr/include/c++/6/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x) noexcept
 143:/usr/include/c++/6/bits/stl_vector.h ****       : _M_impl(std::move(__x._M_get_Tp_allocator()))
 144:/usr/include/c++/6/bits/stl_vector.h ****       { this->_M_impl._M_swap_data(__x._M_impl); }
 145:/usr/include/c++/6/bits/stl_vector.h **** 
 146:/usr/include/c++/6/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 147:/usr/include/c++/6/bits/stl_vector.h ****       : _M_impl(__a)
 148:/usr/include/c++/6/bits/stl_vector.h ****       {
 149:/usr/include/c++/6/bits/stl_vector.h **** 	if (__x.get_allocator() == __a)
 150:/usr/include/c++/6/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 151:/usr/include/c++/6/bits/stl_vector.h **** 	else
 152:/usr/include/c++/6/bits/stl_vector.h **** 	  {
 153:/usr/include/c++/6/bits/stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 154:/usr/include/c++/6/bits/stl_vector.h **** 	    _M_create_storage(__n);
 155:/usr/include/c++/6/bits/stl_vector.h **** 	  }
 156:/usr/include/c++/6/bits/stl_vector.h ****       }
 157:/usr/include/c++/6/bits/stl_vector.h **** #endif
 158:/usr/include/c++/6/bits/stl_vector.h **** 
 159:/usr/include/c++/6/bits/stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
GAS LISTING /tmp/ccvmoMuv.s 			page 216


 160:/usr/include/c++/6/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 161:/usr/include/c++/6/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 162:/usr/include/c++/6/bits/stl_vector.h **** 
 163:/usr/include/c++/6/bits/stl_vector.h ****     public:
 164:/usr/include/c++/6/bits/stl_vector.h ****       _Vector_impl _M_impl;
 165:/usr/include/c++/6/bits/stl_vector.h **** 
 166:/usr/include/c++/6/bits/stl_vector.h ****       pointer
 167:/usr/include/c++/6/bits/stl_vector.h ****       _M_allocate(size_t __n)
 168:/usr/include/c++/6/bits/stl_vector.h ****       {
 169:/usr/include/c++/6/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 170:/usr/include/c++/6/bits/stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 2097              		.loc 23 170 0
 2098 0003 31C9     		xorl	%ecx, %ecx
 2099              	.LBE13154:
 2100              	.LBE13153:
 2101              	.LBE13152:
 2102              	.LBE13151:
 2103              	.LBE13150:
 2104              	.LBE13149:
 2105              	.LBE13148:
 2106              		.loc 22 610 0
 2107 0005 53       		pushq	%rbx
 2108              		.cfi_def_cfa_offset 32
 2109              		.cfi_offset 3, -32
 2110              	.LBB13205:
 2111              	.LBB13200:
 2112              	.LBB13171:
 2113              	.LBB13172:
 171:/usr/include/c++/6/bits/stl_vector.h ****       }
 172:/usr/include/c++/6/bits/stl_vector.h **** 
 173:/usr/include/c++/6/bits/stl_vector.h ****       void
 174:/usr/include/c++/6/bits/stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 175:/usr/include/c++/6/bits/stl_vector.h ****       {
 176:/usr/include/c++/6/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 177:/usr/include/c++/6/bits/stl_vector.h **** 	if (__p)
 178:/usr/include/c++/6/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 179:/usr/include/c++/6/bits/stl_vector.h ****       }
 180:/usr/include/c++/6/bits/stl_vector.h **** 
 181:/usr/include/c++/6/bits/stl_vector.h ****     private:
 182:/usr/include/c++/6/bits/stl_vector.h ****       void
 183:/usr/include/c++/6/bits/stl_vector.h ****       _M_create_storage(size_t __n)
 184:/usr/include/c++/6/bits/stl_vector.h ****       {
 185:/usr/include/c++/6/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 186:/usr/include/c++/6/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 187:/usr/include/c++/6/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 188:/usr/include/c++/6/bits/stl_vector.h ****       }
 189:/usr/include/c++/6/bits/stl_vector.h ****     };
 190:/usr/include/c++/6/bits/stl_vector.h **** 
 191:/usr/include/c++/6/bits/stl_vector.h **** 
 192:/usr/include/c++/6/bits/stl_vector.h ****   /**
 193:/usr/include/c++/6/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 194:/usr/include/c++/6/bits/stl_vector.h ****    *  individual elements in any order.
 195:/usr/include/c++/6/bits/stl_vector.h ****    *
 196:/usr/include/c++/6/bits/stl_vector.h ****    *  @ingroup sequences
 197:/usr/include/c++/6/bits/stl_vector.h ****    *
 198:/usr/include/c++/6/bits/stl_vector.h ****    *  @tparam _Tp  Type of element.
 199:/usr/include/c++/6/bits/stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
GAS LISTING /tmp/ccvmoMuv.s 			page 217


 200:/usr/include/c++/6/bits/stl_vector.h ****    *
 201:/usr/include/c++/6/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 202:/usr/include/c++/6/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 203:/usr/include/c++/6/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 204:/usr/include/c++/6/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 205:/usr/include/c++/6/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 206:/usr/include/c++/6/bits/stl_vector.h ****    *
 207:/usr/include/c++/6/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 208:/usr/include/c++/6/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 209:/usr/include/c++/6/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 210:/usr/include/c++/6/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 211:/usr/include/c++/6/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 212:/usr/include/c++/6/bits/stl_vector.h ****   */
 213:/usr/include/c++/6/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 214:/usr/include/c++/6/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 215:/usr/include/c++/6/bits/stl_vector.h ****     {
 216:/usr/include/c++/6/bits/stl_vector.h ****       // Concept requirements.
 217:/usr/include/c++/6/bits/stl_vector.h ****       typedef typename _Alloc::value_type                _Alloc_value_type;
 218:/usr/include/c++/6/bits/stl_vector.h **** #if __cplusplus < 201103L
 219:/usr/include/c++/6/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 220:/usr/include/c++/6/bits/stl_vector.h **** #endif
 221:/usr/include/c++/6/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 222:/usr/include/c++/6/bits/stl_vector.h ****       
 223:/usr/include/c++/6/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			 _Base;
 224:/usr/include/c++/6/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;
 225:/usr/include/c++/6/bits/stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>  _Alloc_traits;
 226:/usr/include/c++/6/bits/stl_vector.h **** 
 227:/usr/include/c++/6/bits/stl_vector.h ****     public:
 228:/usr/include/c++/6/bits/stl_vector.h ****       typedef _Tp					 value_type;
 229:/usr/include/c++/6/bits/stl_vector.h ****       typedef typename _Base::pointer                    pointer;
 230:/usr/include/c++/6/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_pointer      const_pointer;
 231:/usr/include/c++/6/bits/stl_vector.h ****       typedef typename _Alloc_traits::reference          reference;
 232:/usr/include/c++/6/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_reference    const_reference;
 233:/usr/include/c++/6/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 234:/usr/include/c++/6/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 235:/usr/include/c++/6/bits/stl_vector.h ****       const_iterator;
 236:/usr/include/c++/6/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;
 237:/usr/include/c++/6/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		 reverse_iterator;
 238:/usr/include/c++/6/bits/stl_vector.h ****       typedef size_t					 size_type;
 239:/usr/include/c++/6/bits/stl_vector.h ****       typedef ptrdiff_t					 difference_type;
 240:/usr/include/c++/6/bits/stl_vector.h ****       typedef _Alloc                        		 allocator_type;
 241:/usr/include/c++/6/bits/stl_vector.h **** 
 242:/usr/include/c++/6/bits/stl_vector.h ****     protected:
 243:/usr/include/c++/6/bits/stl_vector.h ****       using _Base::_M_allocate;
 244:/usr/include/c++/6/bits/stl_vector.h ****       using _Base::_M_deallocate;
 245:/usr/include/c++/6/bits/stl_vector.h ****       using _Base::_M_impl;
 246:/usr/include/c++/6/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 247:/usr/include/c++/6/bits/stl_vector.h **** 
 248:/usr/include/c++/6/bits/stl_vector.h ****     public:
 249:/usr/include/c++/6/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 250:/usr/include/c++/6/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 251:/usr/include/c++/6/bits/stl_vector.h **** 
 252:/usr/include/c++/6/bits/stl_vector.h ****       /**
 253:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 254:/usr/include/c++/6/bits/stl_vector.h ****        */
 255:/usr/include/c++/6/bits/stl_vector.h ****       vector()
 256:/usr/include/c++/6/bits/stl_vector.h **** #if __cplusplus >= 201103L
GAS LISTING /tmp/ccvmoMuv.s 			page 218


 257:/usr/include/c++/6/bits/stl_vector.h ****       noexcept(is_nothrow_default_constructible<_Alloc>::value)
 258:/usr/include/c++/6/bits/stl_vector.h **** #endif
 259:/usr/include/c++/6/bits/stl_vector.h ****       : _Base() { }
 260:/usr/include/c++/6/bits/stl_vector.h **** 
 261:/usr/include/c++/6/bits/stl_vector.h ****       /**
 262:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 263:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __a  An allocator object.
 264:/usr/include/c++/6/bits/stl_vector.h ****        */
 265:/usr/include/c++/6/bits/stl_vector.h ****       explicit
 266:/usr/include/c++/6/bits/stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 267:/usr/include/c++/6/bits/stl_vector.h ****       : _Base(__a) { }
 268:/usr/include/c++/6/bits/stl_vector.h **** 
 269:/usr/include/c++/6/bits/stl_vector.h **** #if __cplusplus >= 201103L
 270:/usr/include/c++/6/bits/stl_vector.h ****       /**
 271:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 272:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 273:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __a  An allocator.
 274:/usr/include/c++/6/bits/stl_vector.h ****        *
 275:/usr/include/c++/6/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 276:/usr/include/c++/6/bits/stl_vector.h ****        *  constructed elements.
 277:/usr/include/c++/6/bits/stl_vector.h ****        */
 278:/usr/include/c++/6/bits/stl_vector.h ****       explicit
 279:/usr/include/c++/6/bits/stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 280:/usr/include/c++/6/bits/stl_vector.h ****       : _Base(__n, __a)
 281:/usr/include/c++/6/bits/stl_vector.h ****       { _M_default_initialize(__n); }
 282:/usr/include/c++/6/bits/stl_vector.h **** 
 283:/usr/include/c++/6/bits/stl_vector.h ****       /**
 284:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 285:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 286:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 287:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __a  An allocator.
 288:/usr/include/c++/6/bits/stl_vector.h ****        *
 289:/usr/include/c++/6/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 290:/usr/include/c++/6/bits/stl_vector.h ****        */
 291:/usr/include/c++/6/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 292:/usr/include/c++/6/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 293:/usr/include/c++/6/bits/stl_vector.h ****       : _Base(__n, __a)
 294:/usr/include/c++/6/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 295:/usr/include/c++/6/bits/stl_vector.h **** #else
 296:/usr/include/c++/6/bits/stl_vector.h ****       /**
 297:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 298:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 299:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 300:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __a  An allocator.
 301:/usr/include/c++/6/bits/stl_vector.h ****        *
 302:/usr/include/c++/6/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 303:/usr/include/c++/6/bits/stl_vector.h ****        */
 304:/usr/include/c++/6/bits/stl_vector.h ****       explicit
 305:/usr/include/c++/6/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 306:/usr/include/c++/6/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 307:/usr/include/c++/6/bits/stl_vector.h ****       : _Base(__n, __a)
 308:/usr/include/c++/6/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 309:/usr/include/c++/6/bits/stl_vector.h **** #endif
 310:/usr/include/c++/6/bits/stl_vector.h **** 
 311:/usr/include/c++/6/bits/stl_vector.h ****       /**
 312:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 313:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
GAS LISTING /tmp/ccvmoMuv.s 			page 219


 314:/usr/include/c++/6/bits/stl_vector.h ****        *
 315:/usr/include/c++/6/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocation
 316:/usr/include/c++/6/bits/stl_vector.h ****        *  object used by @a __x.  All the elements of @a __x are copied,
 317:/usr/include/c++/6/bits/stl_vector.h ****        *  but any extra memory in
 318:/usr/include/c++/6/bits/stl_vector.h ****        *  @a __x (for fast expansion) will not be copied.
 319:/usr/include/c++/6/bits/stl_vector.h ****        */
 320:/usr/include/c++/6/bits/stl_vector.h ****       vector(const vector& __x)
 321:/usr/include/c++/6/bits/stl_vector.h ****       : _Base(__x.size(),
 322:/usr/include/c++/6/bits/stl_vector.h ****         _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 323:/usr/include/c++/6/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 324:/usr/include/c++/6/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 325:/usr/include/c++/6/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 326:/usr/include/c++/6/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 327:/usr/include/c++/6/bits/stl_vector.h ****       }
 328:/usr/include/c++/6/bits/stl_vector.h **** 
 329:/usr/include/c++/6/bits/stl_vector.h **** #if __cplusplus >= 201103L
 330:/usr/include/c++/6/bits/stl_vector.h ****       /**
 331:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 332:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 333:/usr/include/c++/6/bits/stl_vector.h ****        *
 334:/usr/include/c++/6/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of @a __x.
 335:/usr/include/c++/6/bits/stl_vector.h ****        *  The contents of @a __x are a valid, but unspecified %vector.
 336:/usr/include/c++/6/bits/stl_vector.h ****        */
 337:/usr/include/c++/6/bits/stl_vector.h ****       vector(vector&& __x) noexcept
 338:/usr/include/c++/6/bits/stl_vector.h ****       : _Base(std::move(__x)) { }
 339:/usr/include/c++/6/bits/stl_vector.h **** 
 340:/usr/include/c++/6/bits/stl_vector.h ****       /// Copy constructor with alternative allocator
 341:/usr/include/c++/6/bits/stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 342:/usr/include/c++/6/bits/stl_vector.h ****       : _Base(__x.size(), __a)
 343:/usr/include/c++/6/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 344:/usr/include/c++/6/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 345:/usr/include/c++/6/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 346:/usr/include/c++/6/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 347:/usr/include/c++/6/bits/stl_vector.h ****       }
 348:/usr/include/c++/6/bits/stl_vector.h **** 
 349:/usr/include/c++/6/bits/stl_vector.h ****       /// Move constructor with alternative allocator
 350:/usr/include/c++/6/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 351:/usr/include/c++/6/bits/stl_vector.h ****       noexcept(_Alloc_traits::_S_always_equal())
 352:/usr/include/c++/6/bits/stl_vector.h ****       : _Base(std::move(__rv), __m)
 353:/usr/include/c++/6/bits/stl_vector.h ****       {
 354:/usr/include/c++/6/bits/stl_vector.h **** 	if (__rv.get_allocator() != __m)
 355:/usr/include/c++/6/bits/stl_vector.h **** 	  {
 356:/usr/include/c++/6/bits/stl_vector.h **** 	    this->_M_impl._M_finish =
 357:/usr/include/c++/6/bits/stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 358:/usr/include/c++/6/bits/stl_vector.h **** 					  this->_M_impl._M_start,
 359:/usr/include/c++/6/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
 360:/usr/include/c++/6/bits/stl_vector.h **** 	    __rv.clear();
 361:/usr/include/c++/6/bits/stl_vector.h **** 	  }
 362:/usr/include/c++/6/bits/stl_vector.h ****       }
 363:/usr/include/c++/6/bits/stl_vector.h **** 
 364:/usr/include/c++/6/bits/stl_vector.h ****       /**
 365:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 366:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 367:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __a  An allocator.
 368:/usr/include/c++/6/bits/stl_vector.h ****        *
 369:/usr/include/c++/6/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 370:/usr/include/c++/6/bits/stl_vector.h ****        *  initializer_list @a __l.
GAS LISTING /tmp/ccvmoMuv.s 			page 220


 371:/usr/include/c++/6/bits/stl_vector.h ****        *
 372:/usr/include/c++/6/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 373:/usr/include/c++/6/bits/stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 374:/usr/include/c++/6/bits/stl_vector.h ****        */
 375:/usr/include/c++/6/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 376:/usr/include/c++/6/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 377:/usr/include/c++/6/bits/stl_vector.h ****       : _Base(__a)
 378:/usr/include/c++/6/bits/stl_vector.h ****       {
 379:/usr/include/c++/6/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 380:/usr/include/c++/6/bits/stl_vector.h **** 			    random_access_iterator_tag());
 381:/usr/include/c++/6/bits/stl_vector.h ****       }
 382:/usr/include/c++/6/bits/stl_vector.h **** #endif
 383:/usr/include/c++/6/bits/stl_vector.h **** 
 384:/usr/include/c++/6/bits/stl_vector.h ****       /**
 385:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 386:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 387:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __last  An input iterator.
 388:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __a  An allocator.
 389:/usr/include/c++/6/bits/stl_vector.h ****        *
 390:/usr/include/c++/6/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 391:/usr/include/c++/6/bits/stl_vector.h ****        *  [first,last).
 392:/usr/include/c++/6/bits/stl_vector.h ****        *
 393:/usr/include/c++/6/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 394:/usr/include/c++/6/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 395:/usr/include/c++/6/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 396:/usr/include/c++/6/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 397:/usr/include/c++/6/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 398:/usr/include/c++/6/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 399:/usr/include/c++/6/bits/stl_vector.h ****        */
 400:/usr/include/c++/6/bits/stl_vector.h **** #if __cplusplus >= 201103L
 401:/usr/include/c++/6/bits/stl_vector.h ****       template<typename _InputIterator,
 402:/usr/include/c++/6/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 403:/usr/include/c++/6/bits/stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 404:/usr/include/c++/6/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 405:/usr/include/c++/6/bits/stl_vector.h **** 	: _Base(__a)
 406:/usr/include/c++/6/bits/stl_vector.h ****         { _M_initialize_dispatch(__first, __last, __false_type()); }
 407:/usr/include/c++/6/bits/stl_vector.h **** #else
 408:/usr/include/c++/6/bits/stl_vector.h ****       template<typename _InputIterator>
 409:/usr/include/c++/6/bits/stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 410:/usr/include/c++/6/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 411:/usr/include/c++/6/bits/stl_vector.h **** 	: _Base(__a)
 412:/usr/include/c++/6/bits/stl_vector.h ****         {
 413:/usr/include/c++/6/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 414:/usr/include/c++/6/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 415:/usr/include/c++/6/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 416:/usr/include/c++/6/bits/stl_vector.h **** 	}
 417:/usr/include/c++/6/bits/stl_vector.h **** #endif
 418:/usr/include/c++/6/bits/stl_vector.h **** 
 419:/usr/include/c++/6/bits/stl_vector.h ****       /**
 420:/usr/include/c++/6/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 421:/usr/include/c++/6/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 422:/usr/include/c++/6/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 423:/usr/include/c++/6/bits/stl_vector.h ****        *  responsibility.
 424:/usr/include/c++/6/bits/stl_vector.h ****        */
 425:/usr/include/c++/6/bits/stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 426:/usr/include/c++/6/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 427:/usr/include/c++/6/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
GAS LISTING /tmp/ccvmoMuv.s 			page 221


 428:/usr/include/c++/6/bits/stl_vector.h **** 
 429:/usr/include/c++/6/bits/stl_vector.h ****       /**
 430:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  %Vector assignment operator.
 431:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 432:/usr/include/c++/6/bits/stl_vector.h ****        *
 433:/usr/include/c++/6/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any extra memory in
 434:/usr/include/c++/6/bits/stl_vector.h ****        *  @a __x (for fast expansion) will not be copied.  Unlike the
 435:/usr/include/c++/6/bits/stl_vector.h ****        *  copy constructor, the allocator object is not copied.
 436:/usr/include/c++/6/bits/stl_vector.h ****        */
 437:/usr/include/c++/6/bits/stl_vector.h ****       vector&
 438:/usr/include/c++/6/bits/stl_vector.h ****       operator=(const vector& __x);
 439:/usr/include/c++/6/bits/stl_vector.h **** 
 440:/usr/include/c++/6/bits/stl_vector.h **** #if __cplusplus >= 201103L
 441:/usr/include/c++/6/bits/stl_vector.h ****       /**
 442:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  %Vector move assignment operator.
 443:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 444:/usr/include/c++/6/bits/stl_vector.h ****        *
 445:/usr/include/c++/6/bits/stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 446:/usr/include/c++/6/bits/stl_vector.h ****        *  if the allocators permit it).
 447:/usr/include/c++/6/bits/stl_vector.h ****        *  @a __x is a valid, but unspecified %vector.
 448:/usr/include/c++/6/bits/stl_vector.h ****        */
 449:/usr/include/c++/6/bits/stl_vector.h ****       vector&
 450:/usr/include/c++/6/bits/stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 451:/usr/include/c++/6/bits/stl_vector.h ****       {
 452:/usr/include/c++/6/bits/stl_vector.h ****         constexpr bool __move_storage =
 453:/usr/include/c++/6/bits/stl_vector.h ****           _Alloc_traits::_S_propagate_on_move_assign()
 454:/usr/include/c++/6/bits/stl_vector.h ****           || _Alloc_traits::_S_always_equal();
 455:/usr/include/c++/6/bits/stl_vector.h ****         _M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 456:/usr/include/c++/6/bits/stl_vector.h **** 	return *this;
 457:/usr/include/c++/6/bits/stl_vector.h ****       }
 458:/usr/include/c++/6/bits/stl_vector.h **** 
 459:/usr/include/c++/6/bits/stl_vector.h ****       /**
 460:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  %Vector list assignment operator.
 461:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 462:/usr/include/c++/6/bits/stl_vector.h ****        *
 463:/usr/include/c++/6/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 464:/usr/include/c++/6/bits/stl_vector.h ****        *  initializer list @a __l.
 465:/usr/include/c++/6/bits/stl_vector.h ****        *
 466:/usr/include/c++/6/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 467:/usr/include/c++/6/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 468:/usr/include/c++/6/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 469:/usr/include/c++/6/bits/stl_vector.h ****        */
 470:/usr/include/c++/6/bits/stl_vector.h ****       vector&
 471:/usr/include/c++/6/bits/stl_vector.h ****       operator=(initializer_list<value_type> __l)
 472:/usr/include/c++/6/bits/stl_vector.h ****       {
 473:/usr/include/c++/6/bits/stl_vector.h **** 	this->assign(__l.begin(), __l.end());
 474:/usr/include/c++/6/bits/stl_vector.h **** 	return *this;
 475:/usr/include/c++/6/bits/stl_vector.h ****       }
 476:/usr/include/c++/6/bits/stl_vector.h **** #endif
 477:/usr/include/c++/6/bits/stl_vector.h **** 
 478:/usr/include/c++/6/bits/stl_vector.h ****       /**
 479:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 480:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
 481:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __val  Value to be assigned.
 482:/usr/include/c++/6/bits/stl_vector.h ****        *
 483:/usr/include/c++/6/bits/stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 484:/usr/include/c++/6/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
GAS LISTING /tmp/ccvmoMuv.s 			page 222


 485:/usr/include/c++/6/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 486:/usr/include/c++/6/bits/stl_vector.h ****        *  the number of elements assigned.  Old data may be lost.
 487:/usr/include/c++/6/bits/stl_vector.h ****        */
 488:/usr/include/c++/6/bits/stl_vector.h ****       void
 489:/usr/include/c++/6/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val)
 490:/usr/include/c++/6/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 491:/usr/include/c++/6/bits/stl_vector.h **** 
 492:/usr/include/c++/6/bits/stl_vector.h ****       /**
 493:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 494:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 495:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __last   An input iterator.
 496:/usr/include/c++/6/bits/stl_vector.h ****        *
 497:/usr/include/c++/6/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 498:/usr/include/c++/6/bits/stl_vector.h ****        *  range [__first,__last).
 499:/usr/include/c++/6/bits/stl_vector.h ****        *
 500:/usr/include/c++/6/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 501:/usr/include/c++/6/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 502:/usr/include/c++/6/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 503:/usr/include/c++/6/bits/stl_vector.h ****        */
 504:/usr/include/c++/6/bits/stl_vector.h **** #if __cplusplus >= 201103L
 505:/usr/include/c++/6/bits/stl_vector.h ****       template<typename _InputIterator,
 506:/usr/include/c++/6/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 507:/usr/include/c++/6/bits/stl_vector.h ****         void
 508:/usr/include/c++/6/bits/stl_vector.h ****         assign(_InputIterator __first, _InputIterator __last)
 509:/usr/include/c++/6/bits/stl_vector.h ****         { _M_assign_dispatch(__first, __last, __false_type()); }
 510:/usr/include/c++/6/bits/stl_vector.h **** #else
 511:/usr/include/c++/6/bits/stl_vector.h ****       template<typename _InputIterator>
 512:/usr/include/c++/6/bits/stl_vector.h ****         void
 513:/usr/include/c++/6/bits/stl_vector.h ****         assign(_InputIterator __first, _InputIterator __last)
 514:/usr/include/c++/6/bits/stl_vector.h ****         {
 515:/usr/include/c++/6/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 516:/usr/include/c++/6/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 517:/usr/include/c++/6/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 518:/usr/include/c++/6/bits/stl_vector.h **** 	}
 519:/usr/include/c++/6/bits/stl_vector.h **** #endif
 520:/usr/include/c++/6/bits/stl_vector.h **** 
 521:/usr/include/c++/6/bits/stl_vector.h **** #if __cplusplus >= 201103L
 522:/usr/include/c++/6/bits/stl_vector.h ****       /**
 523:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 524:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 525:/usr/include/c++/6/bits/stl_vector.h ****        *
 526:/usr/include/c++/6/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 527:/usr/include/c++/6/bits/stl_vector.h ****        *  initializer list @a __l.
 528:/usr/include/c++/6/bits/stl_vector.h ****        *
 529:/usr/include/c++/6/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 530:/usr/include/c++/6/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 531:/usr/include/c++/6/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 532:/usr/include/c++/6/bits/stl_vector.h ****        */
 533:/usr/include/c++/6/bits/stl_vector.h ****       void
 534:/usr/include/c++/6/bits/stl_vector.h ****       assign(initializer_list<value_type> __l)
 535:/usr/include/c++/6/bits/stl_vector.h ****       { this->assign(__l.begin(), __l.end()); }
 536:/usr/include/c++/6/bits/stl_vector.h **** #endif
 537:/usr/include/c++/6/bits/stl_vector.h **** 
 538:/usr/include/c++/6/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 539:/usr/include/c++/6/bits/stl_vector.h ****       using _Base::get_allocator;
 540:/usr/include/c++/6/bits/stl_vector.h **** 
 541:/usr/include/c++/6/bits/stl_vector.h ****       // iterators
GAS LISTING /tmp/ccvmoMuv.s 			page 223


 542:/usr/include/c++/6/bits/stl_vector.h ****       /**
 543:/usr/include/c++/6/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first
 544:/usr/include/c++/6/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 545:/usr/include/c++/6/bits/stl_vector.h ****        *  element order.
 546:/usr/include/c++/6/bits/stl_vector.h ****        */
 547:/usr/include/c++/6/bits/stl_vector.h ****       iterator
 548:/usr/include/c++/6/bits/stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 549:/usr/include/c++/6/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 550:/usr/include/c++/6/bits/stl_vector.h **** 
 551:/usr/include/c++/6/bits/stl_vector.h ****       /**
 552:/usr/include/c++/6/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 553:/usr/include/c++/6/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 554:/usr/include/c++/6/bits/stl_vector.h ****        *  element order.
 555:/usr/include/c++/6/bits/stl_vector.h ****        */
 556:/usr/include/c++/6/bits/stl_vector.h ****       const_iterator
 557:/usr/include/c++/6/bits/stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 558:/usr/include/c++/6/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 559:/usr/include/c++/6/bits/stl_vector.h **** 
 560:/usr/include/c++/6/bits/stl_vector.h ****       /**
 561:/usr/include/c++/6/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 562:/usr/include/c++/6/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 563:/usr/include/c++/6/bits/stl_vector.h ****        *  element order.
 564:/usr/include/c++/6/bits/stl_vector.h ****        */
 565:/usr/include/c++/6/bits/stl_vector.h ****       iterator
 566:/usr/include/c++/6/bits/stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 567:/usr/include/c++/6/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 568:/usr/include/c++/6/bits/stl_vector.h **** 
 569:/usr/include/c++/6/bits/stl_vector.h ****       /**
 570:/usr/include/c++/6/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 571:/usr/include/c++/6/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 572:/usr/include/c++/6/bits/stl_vector.h ****        *  ordinary element order.
 573:/usr/include/c++/6/bits/stl_vector.h ****        */
 574:/usr/include/c++/6/bits/stl_vector.h ****       const_iterator
 575:/usr/include/c++/6/bits/stl_vector.h ****       end() const _GLIBCXX_NOEXCEPT
 576:/usr/include/c++/6/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 577:/usr/include/c++/6/bits/stl_vector.h **** 
 578:/usr/include/c++/6/bits/stl_vector.h ****       /**
 579:/usr/include/c++/6/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to the
 580:/usr/include/c++/6/bits/stl_vector.h ****        *  last element in the %vector.  Iteration is done in reverse
 581:/usr/include/c++/6/bits/stl_vector.h ****        *  element order.
 582:/usr/include/c++/6/bits/stl_vector.h ****        */
 583:/usr/include/c++/6/bits/stl_vector.h ****       reverse_iterator
 584:/usr/include/c++/6/bits/stl_vector.h ****       rbegin() _GLIBCXX_NOEXCEPT
 585:/usr/include/c++/6/bits/stl_vector.h ****       { return reverse_iterator(end()); }
 586:/usr/include/c++/6/bits/stl_vector.h **** 
 587:/usr/include/c++/6/bits/stl_vector.h ****       /**
 588:/usr/include/c++/6/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 589:/usr/include/c++/6/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 590:/usr/include/c++/6/bits/stl_vector.h ****        *  reverse element order.
 591:/usr/include/c++/6/bits/stl_vector.h ****        */
 592:/usr/include/c++/6/bits/stl_vector.h ****       const_reverse_iterator
 593:/usr/include/c++/6/bits/stl_vector.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 594:/usr/include/c++/6/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 595:/usr/include/c++/6/bits/stl_vector.h **** 
 596:/usr/include/c++/6/bits/stl_vector.h ****       /**
 597:/usr/include/c++/6/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to one
 598:/usr/include/c++/6/bits/stl_vector.h ****        *  before the first element in the %vector.  Iteration is done
GAS LISTING /tmp/ccvmoMuv.s 			page 224


 599:/usr/include/c++/6/bits/stl_vector.h ****        *  in reverse element order.
 600:/usr/include/c++/6/bits/stl_vector.h ****        */
 601:/usr/include/c++/6/bits/stl_vector.h ****       reverse_iterator
 602:/usr/include/c++/6/bits/stl_vector.h ****       rend() _GLIBCXX_NOEXCEPT
 603:/usr/include/c++/6/bits/stl_vector.h ****       { return reverse_iterator(begin()); }
 604:/usr/include/c++/6/bits/stl_vector.h **** 
 605:/usr/include/c++/6/bits/stl_vector.h ****       /**
 606:/usr/include/c++/6/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 607:/usr/include/c++/6/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 608:/usr/include/c++/6/bits/stl_vector.h ****        *  is done in reverse element order.
 609:/usr/include/c++/6/bits/stl_vector.h ****        */
 610:/usr/include/c++/6/bits/stl_vector.h ****       const_reverse_iterator
 611:/usr/include/c++/6/bits/stl_vector.h ****       rend() const _GLIBCXX_NOEXCEPT
 612:/usr/include/c++/6/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 613:/usr/include/c++/6/bits/stl_vector.h **** 
 614:/usr/include/c++/6/bits/stl_vector.h **** #if __cplusplus >= 201103L
 615:/usr/include/c++/6/bits/stl_vector.h ****       /**
 616:/usr/include/c++/6/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 617:/usr/include/c++/6/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 618:/usr/include/c++/6/bits/stl_vector.h ****        *  element order.
 619:/usr/include/c++/6/bits/stl_vector.h ****        */
 620:/usr/include/c++/6/bits/stl_vector.h ****       const_iterator
 621:/usr/include/c++/6/bits/stl_vector.h ****       cbegin() const noexcept
 622:/usr/include/c++/6/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 623:/usr/include/c++/6/bits/stl_vector.h **** 
 624:/usr/include/c++/6/bits/stl_vector.h ****       /**
 625:/usr/include/c++/6/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 626:/usr/include/c++/6/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 627:/usr/include/c++/6/bits/stl_vector.h ****        *  ordinary element order.
 628:/usr/include/c++/6/bits/stl_vector.h ****        */
 629:/usr/include/c++/6/bits/stl_vector.h ****       const_iterator
 630:/usr/include/c++/6/bits/stl_vector.h ****       cend() const noexcept
 631:/usr/include/c++/6/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 632:/usr/include/c++/6/bits/stl_vector.h **** 
 633:/usr/include/c++/6/bits/stl_vector.h ****       /**
 634:/usr/include/c++/6/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 635:/usr/include/c++/6/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 636:/usr/include/c++/6/bits/stl_vector.h ****        *  reverse element order.
 637:/usr/include/c++/6/bits/stl_vector.h ****        */
 638:/usr/include/c++/6/bits/stl_vector.h ****       const_reverse_iterator
 639:/usr/include/c++/6/bits/stl_vector.h ****       crbegin() const noexcept
 640:/usr/include/c++/6/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 641:/usr/include/c++/6/bits/stl_vector.h **** 
 642:/usr/include/c++/6/bits/stl_vector.h ****       /**
 643:/usr/include/c++/6/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 644:/usr/include/c++/6/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 645:/usr/include/c++/6/bits/stl_vector.h ****        *  is done in reverse element order.
 646:/usr/include/c++/6/bits/stl_vector.h ****        */
 647:/usr/include/c++/6/bits/stl_vector.h ****       const_reverse_iterator
 648:/usr/include/c++/6/bits/stl_vector.h ****       crend() const noexcept
 649:/usr/include/c++/6/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 650:/usr/include/c++/6/bits/stl_vector.h **** #endif
 651:/usr/include/c++/6/bits/stl_vector.h **** 
 652:/usr/include/c++/6/bits/stl_vector.h ****       // [23.2.4.2] capacity
 653:/usr/include/c++/6/bits/stl_vector.h ****       /**  Returns the number of elements in the %vector.  */
 654:/usr/include/c++/6/bits/stl_vector.h ****       size_type
 655:/usr/include/c++/6/bits/stl_vector.h ****       size() const _GLIBCXX_NOEXCEPT
GAS LISTING /tmp/ccvmoMuv.s 			page 225


 656:/usr/include/c++/6/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 2114              		.loc 23 656 0
 2115 0006 488BAED0 		movq	464(%rsi), %rbp
 2115      010000
 2116              	.LBE13172:
 2117              	.LBE13171:
 2118              	.LBE13200:
 2119              	.LBE13205:
 2120              		.loc 22 610 0
 2121 000d 4889FB   		movq	%rdi, %rbx
 2122              	.LBB13206:
 2123              	.LBB13201:
 2124              	.LBB13175:
 2125              	.LBB13173:
 2126              		.loc 23 656 0
 2127 0010 482BAEC8 		subq	456(%rsi), %rbp
 2127      010000
 2128              	.LBE13173:
 2129              	.LBE13175:
 2130              	.LBE13201:
 2131              	.LBE13206:
 2132              		.loc 22 610 0
 2133 0017 4989F4   		movq	%rsi, %r12
 2134              	.LBB13207:
 2135              	.LBB13202:
 2136              	.LBB13176:
 2137              	.LBB13167:
 2138              	.LBB13168:
  91:/usr/include/c++/6/bits/stl_vector.h **** 	{ }
 2139              		.loc 23 91 0
 2140 001a 48C70700 		movq	$0, (%rdi)
 2140      000000
 2141 0021 48C74708 		movq	$0, 8(%rdi)
 2141      00000000 
 2142 0029 48C74710 		movq	$0, 16(%rdi)
 2142      00000000 
 2143              	.LBE13168:
 2144              	.LBE13167:
 2145              	.LBE13176:
 2146              	.LBB13177:
 2147              	.LBB13174:
 2148              		.loc 23 656 0
 2149 0031 4889E8   		movq	%rbp, %rax
 2150 0034 48C1F802 		sarq	$2, %rax
 2151              	.LVL198:
 2152              	.LBE13174:
 2153              	.LBE13177:
 2154              	.LBB13178:
 2155              	.LBB13169:
 2156              	.LBB13165:
 2157              	.LBB13163:
 2158              	.LBB13161:
 170:/usr/include/c++/6/bits/stl_vector.h ****       }
 2159              		.loc 23 170 0
 2160 0038 4885C0   		testq	%rax, %rax
 2161 003b 741A     		je	.L146
 2162              	.LVL199:
GAS LISTING /tmp/ccvmoMuv.s 			page 226


 2163              	.LBB13155:
 2164              	.LBB13156:
 2165              	.LBB13157:
 101:/usr/include/c++/6/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 2166              		.loc 12 101 0
 2167 003d 48BAFFFF 		movabsq	$4611686018427387903, %rdx
 2167      FFFFFFFF 
 2167      FF3F
 2168 0047 4839D0   		cmpq	%rdx, %rax
 2169 004a 7755     		ja	.L151
 104:/usr/include/c++/6/ext/new_allocator.h ****       }
 2170              		.loc 12 104 0
 2171 004c 4889EF   		movq	%rbp, %rdi
 2172              	.LVL200:
 2173 004f E8000000 		call	_Znwm@PLT
 2173      00
 2174              	.LVL201:
 2175 0054 4889C1   		movq	%rax, %rcx
 2176              	.LVL202:
 2177              	.L146:
 2178              	.LBE13157:
 2179              	.LBE13156:
 2180              	.LBE13155:
 2181              	.LBE13161:
 2182              	.LBE13163:
 187:/usr/include/c++/6/bits/stl_vector.h ****       }
 2183              		.loc 23 187 0
 2184 0057 4801CD   		addq	%rcx, %rbp
 185:/usr/include/c++/6/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 2185              		.loc 23 185 0
 2186 005a 48890B   		movq	%rcx, (%rbx)
 186:/usr/include/c++/6/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 2187              		.loc 23 186 0
 2188 005d 48894B08 		movq	%rcx, 8(%rbx)
 187:/usr/include/c++/6/bits/stl_vector.h ****       }
 2189              		.loc 23 187 0
 2190 0061 48896B10 		movq	%rbp, 16(%rbx)
 2191              	.LVL203:
 2192 0065 498BB424 		movq	456(%r12), %rsi
 2192      C8010000 
 2193              	.LVL204:
 2194              	.LBE13165:
 2195              	.LBE13169:
 2196              	.LBE13178:
 2197              	.LBB13179:
 2198              	.LBB13180:
 2199              	.LBB13181:
 2200              	.LBB13182:
 2201              	.LBB13183:
 2202              	.LBB13184:
 2203              	.LBB13185:
 2204              	.LBB13186:
 2205              	.LBB13187:
 2206              	.LBB13188:
 2207              		.file 24 "/usr/include/c++/6/bits/stl_algobase.h"
   1:/usr/include/c++/6/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/usr/include/c++/6/bits/stl_algobase.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 227


   3:/usr/include/c++/6/bits/stl_algobase.h **** // Copyright (C) 2001-2016 Free Software Foundation, Inc.
   4:/usr/include/c++/6/bits/stl_algobase.h **** //
   5:/usr/include/c++/6/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/6/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/6/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/6/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/6/bits/stl_algobase.h **** // any later version.
  10:/usr/include/c++/6/bits/stl_algobase.h **** 
  11:/usr/include/c++/6/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/6/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/6/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/6/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/usr/include/c++/6/bits/stl_algobase.h **** 
  16:/usr/include/c++/6/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/6/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/6/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/6/bits/stl_algobase.h **** 
  20:/usr/include/c++/6/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/6/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/6/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/6/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/6/bits/stl_algobase.h **** 
  25:/usr/include/c++/6/bits/stl_algobase.h **** /*
  26:/usr/include/c++/6/bits/stl_algobase.h ****  *
  27:/usr/include/c++/6/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/usr/include/c++/6/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/6/bits/stl_algobase.h ****  *
  30:/usr/include/c++/6/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/6/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/6/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/6/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/6/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/6/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/6/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/6/bits/stl_algobase.h ****  *
  38:/usr/include/c++/6/bits/stl_algobase.h ****  *
  39:/usr/include/c++/6/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/6/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/6/bits/stl_algobase.h ****  *
  42:/usr/include/c++/6/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/6/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/6/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/6/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/6/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/6/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/6/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/6/bits/stl_algobase.h ****  */
  50:/usr/include/c++/6/bits/stl_algobase.h **** 
  51:/usr/include/c++/6/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/usr/include/c++/6/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/6/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/usr/include/c++/6/bits/stl_algobase.h ****  */
  55:/usr/include/c++/6/bits/stl_algobase.h **** 
  56:/usr/include/c++/6/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/usr/include/c++/6/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/usr/include/c++/6/bits/stl_algobase.h **** 
  59:/usr/include/c++/6/bits/stl_algobase.h **** #include <bits/c++config.h>
GAS LISTING /tmp/ccvmoMuv.s 			page 228


  60:/usr/include/c++/6/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/6/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/usr/include/c++/6/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/usr/include/c++/6/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/usr/include/c++/6/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/usr/include/c++/6/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/usr/include/c++/6/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/usr/include/c++/6/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/usr/include/c++/6/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/usr/include/c++/6/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/usr/include/c++/6/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap and _GLIBCXX_MOVE
  71:/usr/include/c++/6/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/usr/include/c++/6/bits/stl_algobase.h **** 
  73:/usr/include/c++/6/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  74:/usr/include/c++/6/bits/stl_algobase.h **** {
  75:/usr/include/c++/6/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  76:/usr/include/c++/6/bits/stl_algobase.h **** 
  77:/usr/include/c++/6/bits/stl_algobase.h **** #if __cplusplus < 201103L
  78:/usr/include/c++/6/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
  79:/usr/include/c++/6/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
  80:/usr/include/c++/6/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
  81:/usr/include/c++/6/bits/stl_algobase.h ****   template<bool _BoolType>
  82:/usr/include/c++/6/bits/stl_algobase.h ****     struct __iter_swap
  83:/usr/include/c++/6/bits/stl_algobase.h ****     {
  84:/usr/include/c++/6/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  85:/usr/include/c++/6/bits/stl_algobase.h ****         static void
  86:/usr/include/c++/6/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
  87:/usr/include/c++/6/bits/stl_algobase.h ****         {
  88:/usr/include/c++/6/bits/stl_algobase.h ****           typedef typename iterator_traits<_ForwardIterator1>::value_type
  89:/usr/include/c++/6/bits/stl_algobase.h ****             _ValueType1;
  90:/usr/include/c++/6/bits/stl_algobase.h ****           _ValueType1 __tmp = _GLIBCXX_MOVE(*__a);
  91:/usr/include/c++/6/bits/stl_algobase.h ****           *__a = _GLIBCXX_MOVE(*__b);
  92:/usr/include/c++/6/bits/stl_algobase.h ****           *__b = _GLIBCXX_MOVE(__tmp);
  93:/usr/include/c++/6/bits/stl_algobase.h **** 	}
  94:/usr/include/c++/6/bits/stl_algobase.h ****     };
  95:/usr/include/c++/6/bits/stl_algobase.h **** 
  96:/usr/include/c++/6/bits/stl_algobase.h ****   template<>
  97:/usr/include/c++/6/bits/stl_algobase.h ****     struct __iter_swap<true>
  98:/usr/include/c++/6/bits/stl_algobase.h ****     {
  99:/usr/include/c++/6/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 100:/usr/include/c++/6/bits/stl_algobase.h ****         static void 
 101:/usr/include/c++/6/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 102:/usr/include/c++/6/bits/stl_algobase.h ****         {
 103:/usr/include/c++/6/bits/stl_algobase.h ****           swap(*__a, *__b);
 104:/usr/include/c++/6/bits/stl_algobase.h ****         }
 105:/usr/include/c++/6/bits/stl_algobase.h ****     };
 106:/usr/include/c++/6/bits/stl_algobase.h **** #endif
 107:/usr/include/c++/6/bits/stl_algobase.h **** 
 108:/usr/include/c++/6/bits/stl_algobase.h ****   /**
 109:/usr/include/c++/6/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 110:/usr/include/c++/6/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 111:/usr/include/c++/6/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 112:/usr/include/c++/6/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 113:/usr/include/c++/6/bits/stl_algobase.h ****    *  @return   Nothing.
 114:/usr/include/c++/6/bits/stl_algobase.h ****    *
 115:/usr/include/c++/6/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 116:/usr/include/c++/6/bits/stl_algobase.h ****    *  iterators themselves.
GAS LISTING /tmp/ccvmoMuv.s 			page 229


 117:/usr/include/c++/6/bits/stl_algobase.h ****   */
 118:/usr/include/c++/6/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 119:/usr/include/c++/6/bits/stl_algobase.h ****     inline void
 120:/usr/include/c++/6/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 121:/usr/include/c++/6/bits/stl_algobase.h ****     {
 122:/usr/include/c++/6/bits/stl_algobase.h ****       // concept requirements
 123:/usr/include/c++/6/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 124:/usr/include/c++/6/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 125:/usr/include/c++/6/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 126:/usr/include/c++/6/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 127:/usr/include/c++/6/bits/stl_algobase.h **** 
 128:/usr/include/c++/6/bits/stl_algobase.h **** #if __cplusplus < 201103L
 129:/usr/include/c++/6/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 130:/usr/include/c++/6/bits/stl_algobase.h **** 	_ValueType1;
 131:/usr/include/c++/6/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 132:/usr/include/c++/6/bits/stl_algobase.h **** 	_ValueType2;
 133:/usr/include/c++/6/bits/stl_algobase.h **** 
 134:/usr/include/c++/6/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 135:/usr/include/c++/6/bits/stl_algobase.h **** 				  _ValueType2>)
 136:/usr/include/c++/6/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 137:/usr/include/c++/6/bits/stl_algobase.h **** 				  _ValueType1>)
 138:/usr/include/c++/6/bits/stl_algobase.h **** 
 139:/usr/include/c++/6/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 140:/usr/include/c++/6/bits/stl_algobase.h **** 	_ReferenceType1;
 141:/usr/include/c++/6/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 142:/usr/include/c++/6/bits/stl_algobase.h **** 	_ReferenceType2;
 143:/usr/include/c++/6/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 144:/usr/include/c++/6/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 145:/usr/include/c++/6/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 146:/usr/include/c++/6/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 147:/usr/include/c++/6/bits/stl_algobase.h **** #else
 148:/usr/include/c++/6/bits/stl_algobase.h ****       swap(*__a, *__b);
 149:/usr/include/c++/6/bits/stl_algobase.h **** #endif
 150:/usr/include/c++/6/bits/stl_algobase.h ****     }
 151:/usr/include/c++/6/bits/stl_algobase.h **** 
 152:/usr/include/c++/6/bits/stl_algobase.h ****   /**
 153:/usr/include/c++/6/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 154:/usr/include/c++/6/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 155:/usr/include/c++/6/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 156:/usr/include/c++/6/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 157:/usr/include/c++/6/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 158:/usr/include/c++/6/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 159:/usr/include/c++/6/bits/stl_algobase.h ****    *
 160:/usr/include/c++/6/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 161:/usr/include/c++/6/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 162:/usr/include/c++/6/bits/stl_algobase.h ****    *  The ranges must not overlap.
 163:/usr/include/c++/6/bits/stl_algobase.h ****   */
 164:/usr/include/c++/6/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 165:/usr/include/c++/6/bits/stl_algobase.h ****     _ForwardIterator2
 166:/usr/include/c++/6/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 167:/usr/include/c++/6/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 168:/usr/include/c++/6/bits/stl_algobase.h ****     {
 169:/usr/include/c++/6/bits/stl_algobase.h ****       // concept requirements
 170:/usr/include/c++/6/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 171:/usr/include/c++/6/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 172:/usr/include/c++/6/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 173:/usr/include/c++/6/bits/stl_algobase.h **** 				  _ForwardIterator2>)
GAS LISTING /tmp/ccvmoMuv.s 			page 230


 174:/usr/include/c++/6/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 175:/usr/include/c++/6/bits/stl_algobase.h **** 
 176:/usr/include/c++/6/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 177:/usr/include/c++/6/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 178:/usr/include/c++/6/bits/stl_algobase.h ****       return __first2;
 179:/usr/include/c++/6/bits/stl_algobase.h ****     }
 180:/usr/include/c++/6/bits/stl_algobase.h **** 
 181:/usr/include/c++/6/bits/stl_algobase.h ****   /**
 182:/usr/include/c++/6/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 183:/usr/include/c++/6/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 184:/usr/include/c++/6/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 185:/usr/include/c++/6/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 186:/usr/include/c++/6/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 187:/usr/include/c++/6/bits/stl_algobase.h ****    *
 188:/usr/include/c++/6/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 189:/usr/include/c++/6/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 190:/usr/include/c++/6/bits/stl_algobase.h ****    *  preprocessor macro.
 191:/usr/include/c++/6/bits/stl_algobase.h ****   */
 192:/usr/include/c++/6/bits/stl_algobase.h ****   template<typename _Tp>
 193:/usr/include/c++/6/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 194:/usr/include/c++/6/bits/stl_algobase.h ****     inline const _Tp&
 195:/usr/include/c++/6/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 196:/usr/include/c++/6/bits/stl_algobase.h ****     {
 197:/usr/include/c++/6/bits/stl_algobase.h ****       // concept requirements
 198:/usr/include/c++/6/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 199:/usr/include/c++/6/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 200:/usr/include/c++/6/bits/stl_algobase.h ****       if (__b < __a)
 201:/usr/include/c++/6/bits/stl_algobase.h **** 	return __b;
 202:/usr/include/c++/6/bits/stl_algobase.h ****       return __a;
 203:/usr/include/c++/6/bits/stl_algobase.h ****     }
 204:/usr/include/c++/6/bits/stl_algobase.h **** 
 205:/usr/include/c++/6/bits/stl_algobase.h ****   /**
 206:/usr/include/c++/6/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 207:/usr/include/c++/6/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 208:/usr/include/c++/6/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 209:/usr/include/c++/6/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 210:/usr/include/c++/6/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 211:/usr/include/c++/6/bits/stl_algobase.h ****    *
 212:/usr/include/c++/6/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 213:/usr/include/c++/6/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 214:/usr/include/c++/6/bits/stl_algobase.h ****    *  preprocessor macro.
 215:/usr/include/c++/6/bits/stl_algobase.h ****   */
 216:/usr/include/c++/6/bits/stl_algobase.h ****   template<typename _Tp>
 217:/usr/include/c++/6/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 218:/usr/include/c++/6/bits/stl_algobase.h ****     inline const _Tp&
 219:/usr/include/c++/6/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 220:/usr/include/c++/6/bits/stl_algobase.h ****     {
 221:/usr/include/c++/6/bits/stl_algobase.h ****       // concept requirements
 222:/usr/include/c++/6/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 223:/usr/include/c++/6/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 224:/usr/include/c++/6/bits/stl_algobase.h ****       if (__a < __b)
 225:/usr/include/c++/6/bits/stl_algobase.h **** 	return __b;
 226:/usr/include/c++/6/bits/stl_algobase.h ****       return __a;
 227:/usr/include/c++/6/bits/stl_algobase.h ****     }
 228:/usr/include/c++/6/bits/stl_algobase.h **** 
 229:/usr/include/c++/6/bits/stl_algobase.h ****   /**
 230:/usr/include/c++/6/bits/stl_algobase.h ****    *  @brief This does what you think it does.
GAS LISTING /tmp/ccvmoMuv.s 			page 231


 231:/usr/include/c++/6/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 232:/usr/include/c++/6/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 233:/usr/include/c++/6/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 234:/usr/include/c++/6/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 235:/usr/include/c++/6/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 236:/usr/include/c++/6/bits/stl_algobase.h ****    *
 237:/usr/include/c++/6/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 238:/usr/include/c++/6/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 239:/usr/include/c++/6/bits/stl_algobase.h ****   */
 240:/usr/include/c++/6/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 241:/usr/include/c++/6/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 242:/usr/include/c++/6/bits/stl_algobase.h ****     inline const _Tp&
 243:/usr/include/c++/6/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 244:/usr/include/c++/6/bits/stl_algobase.h ****     {
 245:/usr/include/c++/6/bits/stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 246:/usr/include/c++/6/bits/stl_algobase.h ****       if (__comp(__b, __a))
 247:/usr/include/c++/6/bits/stl_algobase.h **** 	return __b;
 248:/usr/include/c++/6/bits/stl_algobase.h ****       return __a;
 249:/usr/include/c++/6/bits/stl_algobase.h ****     }
 250:/usr/include/c++/6/bits/stl_algobase.h **** 
 251:/usr/include/c++/6/bits/stl_algobase.h ****   /**
 252:/usr/include/c++/6/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 253:/usr/include/c++/6/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 254:/usr/include/c++/6/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 255:/usr/include/c++/6/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 256:/usr/include/c++/6/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 257:/usr/include/c++/6/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 258:/usr/include/c++/6/bits/stl_algobase.h ****    *
 259:/usr/include/c++/6/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 260:/usr/include/c++/6/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 261:/usr/include/c++/6/bits/stl_algobase.h ****   */
 262:/usr/include/c++/6/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 263:/usr/include/c++/6/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 264:/usr/include/c++/6/bits/stl_algobase.h ****     inline const _Tp&
 265:/usr/include/c++/6/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 266:/usr/include/c++/6/bits/stl_algobase.h ****     {
 267:/usr/include/c++/6/bits/stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 268:/usr/include/c++/6/bits/stl_algobase.h ****       if (__comp(__a, __b))
 269:/usr/include/c++/6/bits/stl_algobase.h **** 	return __b;
 270:/usr/include/c++/6/bits/stl_algobase.h ****       return __a;
 271:/usr/include/c++/6/bits/stl_algobase.h ****     }
 272:/usr/include/c++/6/bits/stl_algobase.h **** 
 273:/usr/include/c++/6/bits/stl_algobase.h ****   // Fallback implementation of the function in bits/stl_iterator.h used to
 274:/usr/include/c++/6/bits/stl_algobase.h ****   // remove the __normal_iterator wrapper. See copy, fill, ...
 275:/usr/include/c++/6/bits/stl_algobase.h ****   template<typename _Iterator>
 276:/usr/include/c++/6/bits/stl_algobase.h ****     inline _Iterator
 277:/usr/include/c++/6/bits/stl_algobase.h ****     __niter_base(_Iterator __it)
 278:/usr/include/c++/6/bits/stl_algobase.h ****     { return __it; }
 279:/usr/include/c++/6/bits/stl_algobase.h **** 
 280:/usr/include/c++/6/bits/stl_algobase.h ****   // All of these auxiliary structs serve two purposes.  (1) Replace
 281:/usr/include/c++/6/bits/stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 282:/usr/include/c++/6/bits/stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 283:/usr/include/c++/6/bits/stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 284:/usr/include/c++/6/bits/stl_algobase.h ****   // a for loop with an explicit count.
 285:/usr/include/c++/6/bits/stl_algobase.h **** 
 286:/usr/include/c++/6/bits/stl_algobase.h ****   template<bool, bool, typename>
 287:/usr/include/c++/6/bits/stl_algobase.h ****     struct __copy_move
GAS LISTING /tmp/ccvmoMuv.s 			page 232


 288:/usr/include/c++/6/bits/stl_algobase.h ****     {
 289:/usr/include/c++/6/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 290:/usr/include/c++/6/bits/stl_algobase.h ****         static _OI
 291:/usr/include/c++/6/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 292:/usr/include/c++/6/bits/stl_algobase.h ****         {
 293:/usr/include/c++/6/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 294:/usr/include/c++/6/bits/stl_algobase.h **** 	    *__result = *__first;
 295:/usr/include/c++/6/bits/stl_algobase.h **** 	  return __result;
 296:/usr/include/c++/6/bits/stl_algobase.h **** 	}
 297:/usr/include/c++/6/bits/stl_algobase.h ****     };
 298:/usr/include/c++/6/bits/stl_algobase.h **** 
 299:/usr/include/c++/6/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 300:/usr/include/c++/6/bits/stl_algobase.h ****   template<typename _Category>
 301:/usr/include/c++/6/bits/stl_algobase.h ****     struct __copy_move<true, false, _Category>
 302:/usr/include/c++/6/bits/stl_algobase.h ****     {
 303:/usr/include/c++/6/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 304:/usr/include/c++/6/bits/stl_algobase.h ****         static _OI
 305:/usr/include/c++/6/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 306:/usr/include/c++/6/bits/stl_algobase.h ****         {
 307:/usr/include/c++/6/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 308:/usr/include/c++/6/bits/stl_algobase.h **** 	    *__result = std::move(*__first);
 309:/usr/include/c++/6/bits/stl_algobase.h **** 	  return __result;
 310:/usr/include/c++/6/bits/stl_algobase.h **** 	}
 311:/usr/include/c++/6/bits/stl_algobase.h ****     };
 312:/usr/include/c++/6/bits/stl_algobase.h **** #endif
 313:/usr/include/c++/6/bits/stl_algobase.h **** 
 314:/usr/include/c++/6/bits/stl_algobase.h ****   template<>
 315:/usr/include/c++/6/bits/stl_algobase.h ****     struct __copy_move<false, false, random_access_iterator_tag>
 316:/usr/include/c++/6/bits/stl_algobase.h ****     {
 317:/usr/include/c++/6/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 318:/usr/include/c++/6/bits/stl_algobase.h ****         static _OI
 319:/usr/include/c++/6/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 320:/usr/include/c++/6/bits/stl_algobase.h ****         { 
 321:/usr/include/c++/6/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 322:/usr/include/c++/6/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 323:/usr/include/c++/6/bits/stl_algobase.h **** 	    {
 324:/usr/include/c++/6/bits/stl_algobase.h **** 	      *__result = *__first;
 325:/usr/include/c++/6/bits/stl_algobase.h **** 	      ++__first;
 326:/usr/include/c++/6/bits/stl_algobase.h **** 	      ++__result;
 327:/usr/include/c++/6/bits/stl_algobase.h **** 	    }
 328:/usr/include/c++/6/bits/stl_algobase.h **** 	  return __result;
 329:/usr/include/c++/6/bits/stl_algobase.h **** 	}
 330:/usr/include/c++/6/bits/stl_algobase.h ****     };
 331:/usr/include/c++/6/bits/stl_algobase.h **** 
 332:/usr/include/c++/6/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 333:/usr/include/c++/6/bits/stl_algobase.h ****   template<>
 334:/usr/include/c++/6/bits/stl_algobase.h ****     struct __copy_move<true, false, random_access_iterator_tag>
 335:/usr/include/c++/6/bits/stl_algobase.h ****     {
 336:/usr/include/c++/6/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 337:/usr/include/c++/6/bits/stl_algobase.h ****         static _OI
 338:/usr/include/c++/6/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 339:/usr/include/c++/6/bits/stl_algobase.h ****         { 
 340:/usr/include/c++/6/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 341:/usr/include/c++/6/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 342:/usr/include/c++/6/bits/stl_algobase.h **** 	    {
 343:/usr/include/c++/6/bits/stl_algobase.h **** 	      *__result = std::move(*__first);
 344:/usr/include/c++/6/bits/stl_algobase.h **** 	      ++__first;
GAS LISTING /tmp/ccvmoMuv.s 			page 233


 345:/usr/include/c++/6/bits/stl_algobase.h **** 	      ++__result;
 346:/usr/include/c++/6/bits/stl_algobase.h **** 	    }
 347:/usr/include/c++/6/bits/stl_algobase.h **** 	  return __result;
 348:/usr/include/c++/6/bits/stl_algobase.h **** 	}
 349:/usr/include/c++/6/bits/stl_algobase.h ****     };
 350:/usr/include/c++/6/bits/stl_algobase.h **** #endif
 351:/usr/include/c++/6/bits/stl_algobase.h **** 
 352:/usr/include/c++/6/bits/stl_algobase.h ****   template<bool _IsMove>
 353:/usr/include/c++/6/bits/stl_algobase.h ****     struct __copy_move<_IsMove, true, random_access_iterator_tag>
 354:/usr/include/c++/6/bits/stl_algobase.h ****     {
 355:/usr/include/c++/6/bits/stl_algobase.h ****       template<typename _Tp>
 356:/usr/include/c++/6/bits/stl_algobase.h ****         static _Tp*
 357:/usr/include/c++/6/bits/stl_algobase.h ****         __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 358:/usr/include/c++/6/bits/stl_algobase.h ****         {
 359:/usr/include/c++/6/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 360:/usr/include/c++/6/bits/stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 361:/usr/include/c++/6/bits/stl_algobase.h **** 					   is_move_assignable<_Tp>,
 362:/usr/include/c++/6/bits/stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 363:/usr/include/c++/6/bits/stl_algobase.h **** 	  // trivial types can have deleted assignment
 364:/usr/include/c++/6/bits/stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 365:/usr/include/c++/6/bits/stl_algobase.h **** #endif
 366:/usr/include/c++/6/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 2208              		.loc 24 366 0
 2209 006d 498BAC24 		movq	464(%r12), %rbp
 2209      D0010000 
 2210 0075 4829F5   		subq	%rsi, %rbp
 2211              	.LVL205:
 2212 0078 4889E8   		movq	%rbp, %rax
 2213 007b 48C1F802 		sarq	$2, %rax
 367:/usr/include/c++/6/bits/stl_algobase.h **** 	  if (_Num)
 2214              		.loc 24 367 0
 2215 007f 4885C0   		testq	%rax, %rax
 2216 0082 740E     		je	.L149
 368:/usr/include/c++/6/bits/stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 2217              		.loc 24 368 0
 2218 0084 4889CF   		movq	%rcx, %rdi
 2219 0087 4889EA   		movq	%rbp, %rdx
 2220 008a E8000000 		call	memmove@PLT
 2220      00
 2221              	.LVL206:
 2222 008f 4889C1   		movq	%rax, %rcx
 2223              	.L149:
 2224              	.LVL207:
 369:/usr/include/c++/6/bits/stl_algobase.h **** 	  return __result + _Num;
 2225              		.loc 24 369 0
 2226 0092 4801E9   		addq	%rbp, %rcx
 2227              	.LBE13188:
 2228              	.LBE13187:
 2229              	.LBE13186:
 2230              	.LBE13185:
 2231              	.LBE13184:
 2232              	.LBE13183:
 2233              	.LBE13182:
 2234              	.LBE13181:
 2235              	.LBE13180:
 2236              	.LBE13179:
 2237              	.LBE13202:
GAS LISTING /tmp/ccvmoMuv.s 			page 234


 2238              	.LBE13207:
 2239              		.loc 22 610 0
 2240 0095 4889D8   		movq	%rbx, %rax
 2241              	.LBB13208:
 2242              	.LBB13203:
 2243              	.LBB13198:
 2244              	.LBB13197:
 2245              	.LBB13196:
 2246              	.LBB13195:
 2247              	.LBB13194:
 2248              	.LBB13193:
 2249              	.LBB13192:
 2250              	.LBB13191:
 2251              	.LBB13190:
 2252              	.LBB13189:
 2253              		.loc 24 369 0
 2254 0098 48894B08 		movq	%rcx, 8(%rbx)
 2255              	.LVL208:
 2256              	.LBE13189:
 2257              	.LBE13190:
 2258              	.LBE13191:
 2259              	.LBE13192:
 2260              	.LBE13193:
 2261              	.LBE13194:
 2262              	.LBE13195:
 2263              	.LBE13196:
 2264              	.LBE13197:
 2265              	.LBE13198:
 2266              	.LBE13203:
 2267              	.LBE13208:
 2268              		.loc 22 610 0
 2269 009c 5B       		popq	%rbx
 2270              		.cfi_remember_state
 2271              		.cfi_def_cfa_offset 24
 2272              	.LVL209:
 2273 009d 5D       		popq	%rbp
 2274              		.cfi_def_cfa_offset 16
 2275 009e 415C     		popq	%r12
 2276              		.cfi_def_cfa_offset 8
 2277              	.LVL210:
 2278 00a0 C3       		ret
 2279              	.LVL211:
 2280              	.L151:
 2281              		.cfi_restore_state
 2282              	.LBB13209:
 2283              	.LBB13204:
 2284              	.LBB13199:
 2285              	.LBB13170:
 2286              	.LBB13166:
 2287              	.LBB13164:
 2288              	.LBB13162:
 2289              	.LBB13160:
 2290              	.LBB13159:
 2291              	.LBB13158:
 102:/usr/include/c++/6/ext/new_allocator.h **** 
 2292              		.loc 12 102 0
 2293 00a1 E8000000 		call	_ZSt17__throw_bad_allocv@PLT
GAS LISTING /tmp/ccvmoMuv.s 			page 235


 2293      00
 2294              	.LVL212:
 2295              	.LBE13158:
 2296              	.LBE13159:
 2297              	.LBE13160:
 2298              	.LBE13162:
 2299              	.LBE13164:
 2300              	.LBE13166:
 2301              	.LBE13170:
 2302              	.LBE13199:
 2303              	.LBE13204:
 2304              	.LBE13209:
 2305              		.cfi_endproc
 2306              	.LFE10958:
 2308              		.section	.text._ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_functio
 2309              		.align 2
 2310              		.p2align 4,,15
 2311              		.weak	_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEE
 2313              	_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE7rethr
 2314              	.LFB15581:
 492:/usr/include/boost/exception/exception.hpp ****                 {
 2315              		.loc 7 492 0
 2316              		.cfi_startproc
 2317              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2318              		.cfi_lsda 0x1b,.LLSDA15581
 2319              	.LVL213:
 2320 0000 4154     		pushq	%r12
 2321              		.cfi_def_cfa_offset 16
 2322              		.cfi_offset 12, -16
 2323 0002 55       		pushq	%rbp
 2324              		.cfi_def_cfa_offset 24
 2325              		.cfi_offset 6, -24
 2326 0003 4889FD   		movq	%rdi, %rbp
 2327 0006 53       		pushq	%rbx
 2328              		.cfi_def_cfa_offset 32
 2329              		.cfi_offset 3, -32
 2330              		.loc 7 494 0
 2331 0007 BF400000 		movl	$64, %edi
 2331      00
 2332              	.LVL214:
 2333              	.LBB13235:
 2334              	.LBB13236:
 2335              	.LBB13237:
 2336              	.LBB13238:
 2337              	.LBB13239:
 2338              		.loc 13 696 0
 2339 000c 4C8D2500 		leaq	16+_ZTVN5boost17bad_function_callE(%rip), %r12
 2339      000000
 2340              	.LBE13239:
 2341              	.LBE13238:
 2342              	.LBE13237:
 2343              	.LBE13236:
 2344              	.LBE13235:
 2345              		.loc 7 494 0
 2346 0013 E8000000 		call	__cxa_allocate_exception@PLT
 2346      00
 2347              	.LVL215:
GAS LISTING /tmp/ccvmoMuv.s 			page 236


 2348 0018 4889C3   		movq	%rax, %rbx
 2349              	.LVL216:
 2350              	.LBB13281:
 2351              	.LBB13278:
 2352              	.LBB13270:
 2353              	.LBB13271:
 415:/usr/include/boost/exception/exception.hpp ****             {
 2354              		.loc 7 415 0
 2355 001b 488D0500 		leaq	16+_ZTVN5boost16exception_detail10clone_baseE(%rip), %rax
 2355      000000
 2356              	.LVL217:
 2357              	.LBE13271:
 2358              	.LBE13270:
 2359              	.LBB13273:
 2360              	.LBB13243:
 2361              	.LBB13240:
 2362              		.loc 13 696 0
 2363 0022 4889EE   		movq	%rbp, %rsi
 2364 0025 4889DF   		movq	%rbx, %rdi
 2365              	.LBE13240:
 2366              	.LBE13243:
 2367              	.LBE13273:
 2368              	.LBB13274:
 2369              	.LBB13272:
 415:/usr/include/boost/exception/exception.hpp ****             {
 2370              		.loc 7 415 0
 2371 0028 48894338 		movq	%rax, 56(%rbx)
 2372              	.LVL218:
 2373              	.LBE13272:
 2374              	.LBE13274:
 2375              	.LBB13275:
 2376              	.LBB13244:
 2377              	.LBB13241:
 2378              		.loc 13 696 0
 2379 002c E8000000 		call	_ZNSt13runtime_errorC2ERKS_@PLT
 2379      00
 2380              	.LVL219:
 2381              	.LBE13241:
 2382              	.LBE13244:
 2383              	.LBB13245:
 2384              	.LBB13246:
 2385              	.LBB13247:
 2386              	.LBB13248:
  38:/usr/include/boost/exception/exception.hpp ****                 {
 2387              		.loc 7 38 0
 2388 0031 488B7D18 		movq	24(%rbp), %rdi
 2389              	.LBE13248:
 2390              	.LBE13247:
 220:/usr/include/boost/exception/exception.hpp ****         {
 2391              		.loc 7 220 0
 2392 0035 488D0500 		leaq	16+_ZTVN5boost9exceptionE(%rip), %rax
 2392      000000
 2393              	.LBE13246:
 2394              	.LBE13245:
 2395              	.LBB13264:
 2396              	.LBB13242:
 2397              		.loc 13 696 0
GAS LISTING /tmp/ccvmoMuv.s 			page 237


 2398 003c 4C8923   		movq	%r12, (%rbx)
 2399              	.LVL220:
 2400              	.LBE13242:
 2401              	.LBE13264:
 2402              	.LBB13265:
 2403              	.LBB13261:
 220:/usr/include/boost/exception/exception.hpp ****         {
 2404              		.loc 7 220 0
 2405 003f 48894310 		movq	%rax, 16(%rbx)
 2406              	.LVL221:
 2407              	.LBB13259:
 2408              	.LBB13257:
 2409              	.LBB13249:
 2410              	.LBB13250:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 2411              		.loc 7 71 0
 2412 0043 4885FF   		testq	%rdi, %rdi
 2413              	.LBE13250:
 2414              	.LBE13249:
  38:/usr/include/boost/exception/exception.hpp ****                 {
 2415              		.loc 7 38 0
 2416 0046 48897B18 		movq	%rdi, 24(%rbx)
 2417              	.LVL222:
 2418              	.LBB13255:
 2419              	.LBB13253:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 2420              		.loc 7 71 0
 2421 004a 7417     		je	.L154
  72:/usr/include/boost/exception/exception.hpp ****                 }
 2422              		.loc 7 72 0
 2423 004c 488B07   		movq	(%rdi), %rax
 2424 004f 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7add_refEv(%rip), %rdx
 2424      000000
 2425 0056 488B4018 		movq	24(%rax), %rax
 2426 005a 4839D0   		cmpq	%rdx, %rax
 2427 005d 7550     		jne	.L155
 2428              	.LVL223:
 2429              	.LBB13251:
 2430              	.LBB13252:
 2431              		.loc 3 162 0
 2432 005f 83475801 		addl	$1, 88(%rdi)
 2433              	.LVL224:
 2434              	.L154:
 2435              	.LBE13252:
 2436              	.LBE13251:
 2437              	.LBE13253:
 2438              	.LBE13255:
 2439              	.LBE13257:
 2440              	.LBE13259:
 220:/usr/include/boost/exception/exception.hpp ****         {
 2441              		.loc 7 220 0
 2442 0063 488B4520 		movq	32(%rbp), %rax
 2443              	.LBE13261:
 2444              	.LBE13265:
 2445              	.LBE13275:
 2446              	.LBE13278:
 2447              	.LBE13281:
GAS LISTING /tmp/ccvmoMuv.s 			page 238


 2448              		.loc 7 494 0
 2449 0067 488D1500 		leaq	_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED
 2449      000000
 2450 006e 488D3500 		leaq	_ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEE
 2450      000000
 2451 0075 4889DF   		movq	%rbx, %rdi
 2452              	.LBB13282:
 2453              	.LBB13279:
 2454              	.LBB13276:
 2455              	.LBB13266:
 2456              	.LBB13262:
 220:/usr/include/boost/exception/exception.hpp ****         {
 2457              		.loc 7 220 0
 2458 0078 48894320 		movq	%rax, 32(%rbx)
 2459 007c 488B4528 		movq	40(%rbp), %rax
 2460 0080 48894328 		movq	%rax, 40(%rbx)
 2461 0084 8B4530   		movl	48(%rbp), %eax
 2462 0087 894330   		movl	%eax, 48(%rbx)
 2463              	.LVL225:
 2464              	.LBE13262:
 2465              	.LBE13266:
 2466              	.LBE13276:
 459:/usr/include/boost/exception/exception.hpp ****             public T,
 2467              		.loc 7 459 0
 2468 008a 488D0500 		leaq	24+_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_call
 2468      000000
 2469 0091 488903   		movq	%rax, (%rbx)
 2470 0094 488D0500 		leaq	80+_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_call
 2470      000000
 2471 009b 48894310 		movq	%rax, 16(%rbx)
 2472 009f 488D0500 		leaq	136+_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_cal
 2472      000000
 2473 00a6 48894338 		movq	%rax, 56(%rbx)
 2474              	.LVL226:
 2475              	.LEHB9:
 2476              	.LBE13279:
 2477              	.LBE13282:
 2478              		.loc 7 494 0
 2479 00aa E8000000 		call	__cxa_throw@PLT
 2479      00
 2480              	.LVL227:
 2481              	.LEHE9:
 2482              	.L155:
 2483              	.LEHB10:
 2484              	.LBB13283:
 2485              	.LBB13280:
 2486              	.LBB13277:
 2487              	.LBB13267:
 2488              	.LBB13263:
 2489              	.LBB13260:
 2490              	.LBB13258:
 2491              	.LBB13256:
 2492              	.LBB13254:
  72:/usr/include/boost/exception/exception.hpp ****                 }
 2493              		.loc 7 72 0
 2494 00af FFD0     		call	*%rax
 2495              	.LVL228:
GAS LISTING /tmp/ccvmoMuv.s 			page 239


 2496              	.LEHE10:
 2497 00b1 EBB0     		jmp	.L154
 2498              	.L158:
 2499              	.LBE13254:
 2500              	.LBE13256:
 2501              	.LBE13258:
 2502              	.LBE13260:
 2503              	.LBE13263:
 2504              	.LBE13267:
 2505              	.LBB13268:
 2506              	.LBB13269:
 2507              		.loc 13 696 0
 2508 00b3 4889DF   		movq	%rbx, %rdi
 2509 00b6 4889C5   		movq	%rax, %rbp
 2510              	.LVL229:
 2511 00b9 4C8923   		movq	%r12, (%rbx)
 2512 00bc E8000000 		call	_ZNSt13runtime_errorD2Ev@PLT
 2512      00
 2513              	.LVL230:
 2514              	.LBE13269:
 2515              	.LBE13268:
 2516              	.LBE13277:
 2517              	.LBE13280:
 2518              	.LBE13283:
 2519              		.loc 7 494 0
 2520 00c1 4889DF   		movq	%rbx, %rdi
 2521 00c4 E8000000 		call	__cxa_free_exception@PLT
 2521      00
 2522              	.LVL231:
 2523 00c9 4889EF   		movq	%rbp, %rdi
 2524              	.LEHB11:
 2525 00cc E8000000 		call	_Unwind_Resume@PLT
 2525      00
 2526              	.LVL232:
 2527              	.LEHE11:
 2528              		.cfi_endproc
 2529              	.LFE15581:
 2530              		.section	.gcc_except_table._ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_1
 2531              	.LLSDA15581:
 2532 0000 FF       		.byte	0xff
 2533 0001 FF       		.byte	0xff
 2534 0002 01       		.byte	0x1
 2535 0003 10       		.uleb128 .LLSDACSE15581-.LLSDACSB15581
 2536              	.LLSDACSB15581:
 2537 0004 AA01     		.uleb128 .LEHB9-.LFB15581
 2538 0006 05       		.uleb128 .LEHE9-.LEHB9
 2539 0007 00       		.uleb128 0
 2540 0008 00       		.uleb128 0
 2541 0009 AF01     		.uleb128 .LEHB10-.LFB15581
 2542 000b 02       		.uleb128 .LEHE10-.LEHB10
 2543 000c B301     		.uleb128 .L158-.LFB15581
 2544 000e 00       		.uleb128 0
 2545 000f CC01     		.uleb128 .LEHB11-.LFB15581
 2546 0011 05       		.uleb128 .LEHE11-.LEHB11
 2547 0012 00       		.uleb128 0
 2548 0013 00       		.uleb128 0
 2549              	.LLSDACSE15581:
GAS LISTING /tmp/ccvmoMuv.s 			page 240


 2550              		.section	.text._ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_functio
 2552              		.set	.LTHUNK253,_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_functi
 2553 00d1 0F1F4400 		.p2align 4,,15
 2553      00662E0F 
 2553      1F840000 
 2553      000000
 2554              		.weak	_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function
 2556              	_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEE
 2557              	.LFB16006:
 492:/usr/include/boost/exception/exception.hpp ****                 {
 2558              		.loc 7 492 0
 2559              		.cfi_startproc
 2560 00e0 4C8B17   		movq	(%rdi), %r10
 2561 00e3 49037AE0 		addq	-32(%r10), %rdi
 2562 00e7 E914FFFF 		jmp	.LTHUNK253
 2562      FF
 2563              		.cfi_endproc
 2564              	.LFE16006:
 2566              		.section	.text._ZN5boost6system12system_errorD0Ev,"axG",@progbits,_ZN5boost6system12system_errorD5
 2567              		.align 2
 2568              		.p2align 4,,15
 2569              		.weak	_ZN5boost6system12system_errorD0Ev
 2571              	_ZN5boost6system12system_errorD0Ev:
 2572              	.LFB4244:
  47:/usr/include/boost/system/system_error.hpp **** 
 2573              		.loc 8 47 0
 2574              		.cfi_startproc
 2575              	.LVL233:
 2576              	.LBB13301:
 2577              	.LBB13302:
 2578 0000 488D0500 		leaq	16+_ZTVN5boost6system12system_errorE(%rip), %rax
 2578      000000
 2579              	.LBE13302:
 2580              	.LBE13301:
 2581 0007 53       		pushq	%rbx
 2582              		.cfi_def_cfa_offset 16
 2583              		.cfi_offset 3, -16
  47:/usr/include/boost/system/system_error.hpp **** 
 2584              		.loc 8 47 0
 2585 0008 4889FB   		movq	%rdi, %rbx
 2586              	.LBB13314:
 2587              	.LBB13313:
 2588 000b 488907   		movq	%rax, (%rdi)
 2589              	.LVL234:
 2590 000e 488B7F20 		movq	32(%rdi), %rdi
 2591              	.LVL235:
 2592              	.LBB13303:
 2593              	.LBB13304:
 2594              	.LBB13305:
 2595              	.LBB13306:
 2596              	.LBB13307:
 2597              	.LBB13308:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 2598              		.loc 10 152 0
 2599 0012 488D4330 		leaq	48(%rbx), %rax
 2600              	.LBE13308:
 2601              	.LBE13307:
GAS LISTING /tmp/ccvmoMuv.s 			page 241


 2602              	.LBE13306:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 2603              		.loc 10 180 0
 2604 0016 4839C7   		cmpq	%rax, %rdi
 2605 0019 7405     		je	.L161
 2606              	.LVL236:
 2607              	.LBB13309:
 2608              	.LBB13310:
 2609              	.LBB13311:
 2610              	.LBB13312:
 2611              		.loc 12 110 0
 2612 001b E8000000 		call	_ZdlPv@PLT
 2612      00
 2613              	.LVL237:
 2614              	.L161:
 2615              	.LBE13312:
 2616              	.LBE13311:
 2617              	.LBE13310:
 2618              	.LBE13309:
 2619              	.LBE13305:
 2620              	.LBE13304:
 2621              	.LBE13303:
  47:/usr/include/boost/system/system_error.hpp **** 
 2622              		.loc 8 47 0
 2623 0020 4889DF   		movq	%rbx, %rdi
 2624 0023 E8000000 		call	_ZNSt13runtime_errorD2Ev@PLT
 2624      00
 2625              	.LVL238:
 2626              	.LBE13313:
 2627              	.LBE13314:
 2628 0028 4889DF   		movq	%rbx, %rdi
 2629 002b BE400000 		movl	$64, %esi
 2629      00
 2630 0030 5B       		popq	%rbx
 2631              		.cfi_def_cfa_offset 8
 2632              	.LVL239:
 2633 0031 E9000000 		jmp	_ZdlPvm@PLT
 2633      00
 2634              	.LVL240:
 2635              		.cfi_endproc
 2636              	.LFE4244:
 2638              		.section	.text._ZNK5boost10error_infoINS_27tag_original_exception_typeEPKSt9type_infoE17name_value
 2639              		.align 2
 2640              		.p2align 4,,15
 2641              		.weak	_ZNK5boost10error_infoINS_27tag_original_exception_typeEPKSt9type_infoE17name_value_stringB5
 2643              	_ZNK5boost10error_infoINS_27tag_original_exception_typeEPKSt9type_infoE17name_value_stringB5cxx11Ev
 2644              	.LFB15619:
  83:/usr/include/boost/exception/info.hpp ****     name_value_string() const
 2645              		.loc 3 83 0
 2646              		.cfi_startproc
 2647              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2648              		.cfi_lsda 0x1b,.LLSDA15619
 2649              	.LVL241:
 2650 0000 4154     		pushq	%r12
 2651              		.cfi_def_cfa_offset 16
 2652              		.cfi_offset 12, -16
 2653 0002 55       		pushq	%rbp
GAS LISTING /tmp/ccvmoMuv.s 			page 242


 2654              		.cfi_def_cfa_offset 24
 2655              		.cfi_offset 6, -24
 2656 0003 4989FC   		movq	%rdi, %r12
 2657 0006 53       		pushq	%rbx
 2658              		.cfi_def_cfa_offset 32
 2659              		.cfi_offset 3, -32
 2660 0007 4883EC10 		subq	$16, %rsp
 2661              		.cfi_def_cfa_offset 48
 2662 000b 488B4608 		movq	8(%rsi), %rax
 2663              	.LBB13390:
 2664              	.LBB13391:
 2665              	.LBB13392:
 2666              	.LBB13393:
 2667              	.LBB13394:
 2668              	.LBB13395:
 2669              	.LBB13396:
 2670              	.LBB13397:
 2671              	.LBB13398:
 2672              	.LBB13399:
 2673              		.file 25 "/usr/include/boost/core/demangle.hpp"
   1:/usr/include/boost/core/demangle.hpp **** #ifndef BOOST_CORE_DEMANGLE_HPP_INCLUDED
   2:/usr/include/boost/core/demangle.hpp **** #define BOOST_CORE_DEMANGLE_HPP_INCLUDED
   3:/usr/include/boost/core/demangle.hpp **** 
   4:/usr/include/boost/core/demangle.hpp **** // core::demangle
   5:/usr/include/boost/core/demangle.hpp **** //
   6:/usr/include/boost/core/demangle.hpp **** // Copyright 2014 Peter Dimov
   7:/usr/include/boost/core/demangle.hpp **** // Copyright 2014 Andrey Semashev
   8:/usr/include/boost/core/demangle.hpp **** //
   9:/usr/include/boost/core/demangle.hpp **** // Distributed under the Boost Software License, Version 1.0.
  10:/usr/include/boost/core/demangle.hpp **** // See accompanying file LICENSE_1_0.txt or copy at
  11:/usr/include/boost/core/demangle.hpp **** // http://www.boost.org/LICENSE_1_0.txt
  12:/usr/include/boost/core/demangle.hpp **** 
  13:/usr/include/boost/core/demangle.hpp **** #include <boost/config.hpp>
  14:/usr/include/boost/core/demangle.hpp **** #include <string>
  15:/usr/include/boost/core/demangle.hpp **** 
  16:/usr/include/boost/core/demangle.hpp **** #if defined(BOOST_HAS_PRAGMA_ONCE)
  17:/usr/include/boost/core/demangle.hpp **** # pragma once
  18:/usr/include/boost/core/demangle.hpp **** #endif
  19:/usr/include/boost/core/demangle.hpp **** 
  20:/usr/include/boost/core/demangle.hpp **** // __has_include is currently supported by GCC and Clang. However GCC 4.9 may have issues and
  21:/usr/include/boost/core/demangle.hpp **** // returns 1 for 'defined( __has_include )', while '__has_include' is actually not supported:
  22:/usr/include/boost/core/demangle.hpp **** // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=63662
  23:/usr/include/boost/core/demangle.hpp **** #if defined( __has_include ) && (!defined( BOOST_GCC ) || (__GNUC__ + 0) >= 5)
  24:/usr/include/boost/core/demangle.hpp **** # if __has_include(<cxxabi.h>)
  25:/usr/include/boost/core/demangle.hpp **** #  define BOOST_CORE_HAS_CXXABI_H
  26:/usr/include/boost/core/demangle.hpp **** # endif
  27:/usr/include/boost/core/demangle.hpp **** #elif defined( __GLIBCXX__ ) || defined( __GLIBCPP__ )
  28:/usr/include/boost/core/demangle.hpp **** # define BOOST_CORE_HAS_CXXABI_H
  29:/usr/include/boost/core/demangle.hpp **** #endif
  30:/usr/include/boost/core/demangle.hpp **** 
  31:/usr/include/boost/core/demangle.hpp **** #if defined( BOOST_CORE_HAS_CXXABI_H )
  32:/usr/include/boost/core/demangle.hpp **** # include <cxxabi.h>
  33:/usr/include/boost/core/demangle.hpp **** // For some archtectures (mips, mips64, x86, x86_64) cxxabi.h in Android NDK is implemented by gabi
  34:/usr/include/boost/core/demangle.hpp **** // (https://android.googlesource.com/platform/ndk/+/master/sources/cxx-stl/gabi++/), which does not
  35:/usr/include/boost/core/demangle.hpp **** // abi::__cxa_demangle(). We detect this implementation by checking the include guard here.
  36:/usr/include/boost/core/demangle.hpp **** # if defined( __GABIXX_CXXABI_H__ )
  37:/usr/include/boost/core/demangle.hpp **** #  undef BOOST_CORE_HAS_CXXABI_H
GAS LISTING /tmp/ccvmoMuv.s 			page 243


  38:/usr/include/boost/core/demangle.hpp **** # else
  39:/usr/include/boost/core/demangle.hpp **** #  include <cstdlib>
  40:/usr/include/boost/core/demangle.hpp **** #  include <cstddef>
  41:/usr/include/boost/core/demangle.hpp **** # endif
  42:/usr/include/boost/core/demangle.hpp **** #endif
  43:/usr/include/boost/core/demangle.hpp **** 
  44:/usr/include/boost/core/demangle.hpp **** namespace boost
  45:/usr/include/boost/core/demangle.hpp **** {
  46:/usr/include/boost/core/demangle.hpp **** 
  47:/usr/include/boost/core/demangle.hpp **** namespace core
  48:/usr/include/boost/core/demangle.hpp **** {
  49:/usr/include/boost/core/demangle.hpp **** 
  50:/usr/include/boost/core/demangle.hpp **** inline char const * demangle_alloc( char const * name ) BOOST_NOEXCEPT;
  51:/usr/include/boost/core/demangle.hpp **** inline void demangle_free( char const * name ) BOOST_NOEXCEPT;
  52:/usr/include/boost/core/demangle.hpp **** 
  53:/usr/include/boost/core/demangle.hpp **** class scoped_demangled_name
  54:/usr/include/boost/core/demangle.hpp **** {
  55:/usr/include/boost/core/demangle.hpp **** private:
  56:/usr/include/boost/core/demangle.hpp ****     char const * m_p;
  57:/usr/include/boost/core/demangle.hpp **** 
  58:/usr/include/boost/core/demangle.hpp **** public:
  59:/usr/include/boost/core/demangle.hpp ****     explicit scoped_demangled_name( char const * name ) BOOST_NOEXCEPT :
  60:/usr/include/boost/core/demangle.hpp ****         m_p( demangle_alloc( name ) )
  61:/usr/include/boost/core/demangle.hpp ****     {
  62:/usr/include/boost/core/demangle.hpp ****     }
  63:/usr/include/boost/core/demangle.hpp **** 
  64:/usr/include/boost/core/demangle.hpp ****     ~scoped_demangled_name() BOOST_NOEXCEPT
  65:/usr/include/boost/core/demangle.hpp ****     {
  66:/usr/include/boost/core/demangle.hpp ****         demangle_free( m_p );
  67:/usr/include/boost/core/demangle.hpp ****     }
  68:/usr/include/boost/core/demangle.hpp **** 
  69:/usr/include/boost/core/demangle.hpp ****     char const * get() const BOOST_NOEXCEPT
  70:/usr/include/boost/core/demangle.hpp ****     {
  71:/usr/include/boost/core/demangle.hpp ****         return m_p;
  72:/usr/include/boost/core/demangle.hpp ****     }
  73:/usr/include/boost/core/demangle.hpp **** 
  74:/usr/include/boost/core/demangle.hpp ****     BOOST_DELETED_FUNCTION(scoped_demangled_name( scoped_demangled_name const& ))
  75:/usr/include/boost/core/demangle.hpp ****     BOOST_DELETED_FUNCTION(scoped_demangled_name& operator= ( scoped_demangled_name const& ))
  76:/usr/include/boost/core/demangle.hpp **** };
  77:/usr/include/boost/core/demangle.hpp **** 
  78:/usr/include/boost/core/demangle.hpp **** 
  79:/usr/include/boost/core/demangle.hpp **** #if defined( BOOST_CORE_HAS_CXXABI_H )
  80:/usr/include/boost/core/demangle.hpp **** 
  81:/usr/include/boost/core/demangle.hpp **** inline char const * demangle_alloc( char const * name ) BOOST_NOEXCEPT
  82:/usr/include/boost/core/demangle.hpp **** {
  83:/usr/include/boost/core/demangle.hpp ****     int status = 0;
  84:/usr/include/boost/core/demangle.hpp ****     std::size_t size = 0;
  85:/usr/include/boost/core/demangle.hpp ****     return abi::__cxa_demangle( name, NULL, &size, &status );
 2674              		.loc 25 85 0
 2675 000f 488D4C24 		leaq	4(%rsp), %rcx
 2675      04
 2676 0014 488D5424 		leaq	8(%rsp), %rdx
 2676      08
 2677 0019 488B6808 		movq	8(%rax), %rbp
 2678              	.LVL242:
 2679              	.LBE13399:
 2680              	.LBE13398:
GAS LISTING /tmp/ccvmoMuv.s 			page 244


 2681              	.LBE13397:
 2682              	.LBE13396:
 2683              	.LBE13395:
 2684              	.LBB13439:
 2685              	.LBB13440:
 2686              		.file 26 "/usr/include/c++/6/typeinfo"
   1:/usr/include/c++/6/typeinfo **** // RTTI support for -*- C++ -*-
   2:/usr/include/c++/6/typeinfo **** // Copyright (C) 1994-2016 Free Software Foundation, Inc.
   3:/usr/include/c++/6/typeinfo **** //
   4:/usr/include/c++/6/typeinfo **** // This file is part of GCC.
   5:/usr/include/c++/6/typeinfo **** //
   6:/usr/include/c++/6/typeinfo **** // GCC is free software; you can redistribute it and/or modify
   7:/usr/include/c++/6/typeinfo **** // it under the terms of the GNU General Public License as published by
   8:/usr/include/c++/6/typeinfo **** // the Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/6/typeinfo **** // any later version.
  10:/usr/include/c++/6/typeinfo **** //
  11:/usr/include/c++/6/typeinfo **** // GCC is distributed in the hope that it will be useful,
  12:/usr/include/c++/6/typeinfo **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/6/typeinfo **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/6/typeinfo **** // GNU General Public License for more details.
  15:/usr/include/c++/6/typeinfo **** //
  16:/usr/include/c++/6/typeinfo **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/6/typeinfo **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/6/typeinfo **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/6/typeinfo **** 
  20:/usr/include/c++/6/typeinfo **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/6/typeinfo **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/6/typeinfo **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/6/typeinfo **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/6/typeinfo **** 
  25:/usr/include/c++/6/typeinfo **** /** @file typeinfo
  26:/usr/include/c++/6/typeinfo ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/6/typeinfo ****  */
  28:/usr/include/c++/6/typeinfo **** 
  29:/usr/include/c++/6/typeinfo **** #ifndef _TYPEINFO
  30:/usr/include/c++/6/typeinfo **** #define _TYPEINFO
  31:/usr/include/c++/6/typeinfo **** 
  32:/usr/include/c++/6/typeinfo **** #pragma GCC system_header
  33:/usr/include/c++/6/typeinfo **** 
  34:/usr/include/c++/6/typeinfo **** #include <exception>
  35:/usr/include/c++/6/typeinfo **** #if __cplusplus >= 201103L
  36:/usr/include/c++/6/typeinfo **** #include <bits/hash_bytes.h>
  37:/usr/include/c++/6/typeinfo **** #endif
  38:/usr/include/c++/6/typeinfo **** 
  39:/usr/include/c++/6/typeinfo **** #pragma GCC visibility push(default)
  40:/usr/include/c++/6/typeinfo **** 
  41:/usr/include/c++/6/typeinfo **** extern "C++" {
  42:/usr/include/c++/6/typeinfo **** 
  43:/usr/include/c++/6/typeinfo **** namespace __cxxabiv1
  44:/usr/include/c++/6/typeinfo **** {
  45:/usr/include/c++/6/typeinfo ****   class __class_type_info;
  46:/usr/include/c++/6/typeinfo **** } // namespace __cxxabiv1
  47:/usr/include/c++/6/typeinfo **** 
  48:/usr/include/c++/6/typeinfo **** // Determine whether typeinfo names for the same type are merged (in which
  49:/usr/include/c++/6/typeinfo **** // case comparison can just compare pointers) or not (in which case strings
  50:/usr/include/c++/6/typeinfo **** // must be compared), and whether comparison is to be implemented inline or
  51:/usr/include/c++/6/typeinfo **** // not.  We used to do inline pointer comparison by default if weak symbols
GAS LISTING /tmp/ccvmoMuv.s 			page 245


  52:/usr/include/c++/6/typeinfo **** // are available, but even with weak symbols sometimes names are not merged
  53:/usr/include/c++/6/typeinfo **** // when objects are loaded with RTLD_LOCAL, so now we always use strcmp by
  54:/usr/include/c++/6/typeinfo **** // default.  For ABI compatibility, we do the strcmp inline if weak symbols
  55:/usr/include/c++/6/typeinfo **** // are available, and out-of-line if not.  Out-of-line pointer comparison
  56:/usr/include/c++/6/typeinfo **** // is used where the object files are to be portable to multiple systems,
  57:/usr/include/c++/6/typeinfo **** // some of which may not be able to use pointer comparison, but the
  58:/usr/include/c++/6/typeinfo **** // particular system for which libstdc++ is being built can use pointer
  59:/usr/include/c++/6/typeinfo **** // comparison; in particular for most ARM EABI systems, where the ABI
  60:/usr/include/c++/6/typeinfo **** // specifies out-of-line comparison.  The compiler's target configuration
  61:/usr/include/c++/6/typeinfo **** // can override the defaults by defining __GXX_TYPEINFO_EQUALITY_INLINE to
  62:/usr/include/c++/6/typeinfo **** // 1 or 0 to indicate whether or not comparison is inline, and
  63:/usr/include/c++/6/typeinfo **** // __GXX_MERGED_TYPEINFO_NAMES to 1 or 0 to indicate whether or not pointer
  64:/usr/include/c++/6/typeinfo **** // comparison can be used.
  65:/usr/include/c++/6/typeinfo **** 
  66:/usr/include/c++/6/typeinfo **** #ifndef __GXX_MERGED_TYPEINFO_NAMES
  67:/usr/include/c++/6/typeinfo **** // By default, typeinfo names are not merged.
  68:/usr/include/c++/6/typeinfo **** #define __GXX_MERGED_TYPEINFO_NAMES 0
  69:/usr/include/c++/6/typeinfo **** #endif
  70:/usr/include/c++/6/typeinfo **** 
  71:/usr/include/c++/6/typeinfo **** // By default follow the old inline rules to avoid ABI changes.
  72:/usr/include/c++/6/typeinfo **** #ifndef __GXX_TYPEINFO_EQUALITY_INLINE
  73:/usr/include/c++/6/typeinfo ****   #if !__GXX_WEAK__
  74:/usr/include/c++/6/typeinfo ****     #define __GXX_TYPEINFO_EQUALITY_INLINE 0
  75:/usr/include/c++/6/typeinfo ****   #else
  76:/usr/include/c++/6/typeinfo ****     #define __GXX_TYPEINFO_EQUALITY_INLINE 1
  77:/usr/include/c++/6/typeinfo ****   #endif
  78:/usr/include/c++/6/typeinfo **** #endif
  79:/usr/include/c++/6/typeinfo **** 
  80:/usr/include/c++/6/typeinfo **** namespace std
  81:/usr/include/c++/6/typeinfo **** {
  82:/usr/include/c++/6/typeinfo ****   /**
  83:/usr/include/c++/6/typeinfo ****    *  @brief  Part of RTTI.
  84:/usr/include/c++/6/typeinfo ****    *
  85:/usr/include/c++/6/typeinfo ****    *  The @c type_info class describes type information generated by
  86:/usr/include/c++/6/typeinfo ****    *  an implementation.
  87:/usr/include/c++/6/typeinfo ****   */
  88:/usr/include/c++/6/typeinfo ****   class type_info
  89:/usr/include/c++/6/typeinfo ****   {
  90:/usr/include/c++/6/typeinfo ****   public:
  91:/usr/include/c++/6/typeinfo ****     /** Destructor first. Being the first non-inline virtual function, this
  92:/usr/include/c++/6/typeinfo ****      *  controls in which translation unit the vtable is emitted. The
  93:/usr/include/c++/6/typeinfo ****      *  compiler makes use of that information to know where to emit
  94:/usr/include/c++/6/typeinfo ****      *  the runtime-mandated type_info structures in the new-abi.  */
  95:/usr/include/c++/6/typeinfo ****     virtual ~type_info();
  96:/usr/include/c++/6/typeinfo **** 
  97:/usr/include/c++/6/typeinfo ****     /** Returns an @e implementation-defined byte string; this is not
  98:/usr/include/c++/6/typeinfo ****      *  portable between compilers!  */
  99:/usr/include/c++/6/typeinfo ****     const char* name() const _GLIBCXX_NOEXCEPT
 100:/usr/include/c++/6/typeinfo ****     { return __name[0] == '*' ? __name + 1 : __name; }
 2687              		.loc 26 100 0
 2688 001d 31C0     		xorl	%eax, %eax
 2689 001f 807D002A 		cmpb	$42, 0(%rbp)
 2690              	.LBE13440:
 2691              	.LBE13439:
 2692              	.LBB13443:
 2693              	.LBB13435:
 2694              	.LBB13406:
GAS LISTING /tmp/ccvmoMuv.s 			page 246


 2695              	.LBB13403:
 2696              	.LBB13400:
  83:/usr/include/boost/core/demangle.hpp ****     std::size_t size = 0;
 2697              		.loc 25 83 0
 2698 0023 C7442404 		movl	$0, 4(%rsp)
 2698      00000000 
  84:/usr/include/boost/core/demangle.hpp ****     return abi::__cxa_demangle( name, NULL, &size, &status );
 2699              		.loc 25 84 0
 2700 002b 48C74424 		movq	$0, 8(%rsp)
 2700      08000000 
 2700      00
 2701              	.LBE13400:
 2702              	.LBE13403:
 2703              	.LBE13406:
 2704              	.LBE13435:
 2705              	.LBE13443:
 2706              	.LBB13444:
 2707              	.LBB13441:
 2708              		.loc 26 100 0
 2709 0034 0F94C0   		sete	%al
 2710              	.LBE13441:
 2711              	.LBE13444:
 2712              	.LBB13445:
 2713              	.LBB13436:
 2714              	.LBB13407:
 2715              	.LBB13404:
 2716              	.LBB13401:
 2717              		.loc 25 85 0
 2718 0037 31F6     		xorl	%esi, %esi
 2719              	.LVL243:
 2720              	.LBE13401:
 2721              	.LBE13404:
 2722              	.LBE13407:
 2723              	.LBE13436:
 2724              	.LBE13445:
 2725              	.LBB13446:
 2726              	.LBB13442:
 2727              		.loc 26 100 0
 2728 0039 4801C5   		addq	%rax, %rbp
 2729              	.LVL244:
 2730              	.LBE13442:
 2731              	.LBE13446:
 2732              	.LBB13447:
 2733              	.LBB13437:
 2734              	.LBB13408:
 2735              	.LBB13405:
 2736              	.LBB13402:
 2737              		.loc 25 85 0
 2738 003c 4889EF   		movq	%rbp, %rdi
 2739              	.LVL245:
 2740 003f E8000000 		call	__cxa_demangle@PLT
 2740      00
 2741              	.LVL246:
 2742 0044 4889C3   		movq	%rax, %rbx
 2743              	.LVL247:
 2744              	.LBE13402:
 2745              	.LBE13405:
GAS LISTING /tmp/ccvmoMuv.s 			page 247


 2746              	.LBE13408:
  86:/usr/include/boost/core/demangle.hpp **** }
  87:/usr/include/boost/core/demangle.hpp **** 
  88:/usr/include/boost/core/demangle.hpp **** inline void demangle_free( char const * name ) BOOST_NOEXCEPT
  89:/usr/include/boost/core/demangle.hpp **** {
  90:/usr/include/boost/core/demangle.hpp ****     std::free( const_cast< char* >( name ) );
  91:/usr/include/boost/core/demangle.hpp **** }
  92:/usr/include/boost/core/demangle.hpp **** 
  93:/usr/include/boost/core/demangle.hpp **** inline std::string demangle( char const * name )
  94:/usr/include/boost/core/demangle.hpp **** {
  95:/usr/include/boost/core/demangle.hpp ****     scoped_demangled_name demangled_name( name );
  96:/usr/include/boost/core/demangle.hpp ****     char const * const p = demangled_name.get();
  97:/usr/include/boost/core/demangle.hpp ****     if( p )
 2747              		.loc 25 97 0
 2748 0047 4885C0   		testq	%rax, %rax
 2749              	.LBB13409:
 2750              	.LBB13410:
 2751              	.LBB13411:
 2752              	.LBB13412:
 142:/usr/include/c++/6/bits/basic_string.h **** #else
 2753              		.loc 10 142 0
 2754 004a 498D4424 		leaq	16(%r12), %rax
 2754      10
 2755              	.LVL248:
 2756 004f 49890424 		movq	%rax, (%r12)
 2757              	.LBE13412:
 2758              	.LBE13411:
 2759              	.LBE13410:
 2760              	.LBE13409:
 2761              		.loc 25 97 0
 2762 0053 742B     		je	.L165
 2763              	.LVL249:
 2764              	.LBB13420:
 2765              	.LBB13419:
 2766              	.LBB13413:
 2767              	.LBB13414:
 267:/usr/include/c++/6/bits/char_traits.h **** 
 2768              		.loc 9 267 0
 2769 0055 4889DF   		movq	%rbx, %rdi
 2770 0058 E8000000 		call	strlen@PLT
 2770      00
 2771              	.LVL250:
 2772              	.LBE13414:
 2773              	.LBE13413:
 456:/usr/include/c++/6/bits/basic_string.h **** 
 2774              		.loc 10 456 0
 2775 005d 488D1403 		leaq	(%rbx,%rax), %rdx
 2776              	.LVL251:
 2777              	.LBB13415:
 2778              	.LBB13416:
 2779              	.LBB13417:
 2780              	.LBB13418:
 196:/usr/include/c++/6/bits/basic_string.h **** 	}
 2781              		.loc 10 196 0
 2782 0061 4889DE   		movq	%rbx, %rsi
 2783 0064 4C89E7   		movq	%r12, %rdi
 2784              	.LEHB12:
GAS LISTING /tmp/ccvmoMuv.s 			page 248


 2785 0067 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_it
 2785      00
 2786              	.LVL252:
 2787              	.L167:
 2788              	.LBE13418:
 2789              	.LBE13417:
 2790              	.LBE13416:
 2791              	.LBE13415:
 2792              	.LBE13419:
 2793              	.LBE13420:
 2794              	.LBB13421:
 2795              	.LBB13422:
 2796              	.LBB13423:
  90:/usr/include/boost/core/demangle.hpp **** }
 2797              		.loc 25 90 0
 2798 006c 4889DF   		movq	%rbx, %rdi
 2799 006f E8000000 		call	free@PLT
 2799      00
 2800              	.LVL253:
 2801              	.LBE13423:
 2802              	.LBE13422:
 2803              	.LBE13421:
 2804              	.LBE13437:
 2805              	.LBE13447:
 2806              	.LBE13394:
 2807              	.LBE13393:
 2808              	.LBE13392:
 2809              	.LBE13391:
 2810              	.LBE13390:
  87:/usr/include/boost/exception/info.hpp **** 
 2811              		.loc 3 87 0
 2812 0074 4883C410 		addq	$16, %rsp
 2813              		.cfi_remember_state
 2814              		.cfi_def_cfa_offset 32
 2815 0078 4C89E0   		movq	%r12, %rax
 2816 007b 5B       		popq	%rbx
 2817              		.cfi_def_cfa_offset 24
 2818 007c 5D       		popq	%rbp
 2819              		.cfi_def_cfa_offset 16
 2820 007d 415C     		popq	%r12
 2821              		.cfi_def_cfa_offset 8
 2822              	.LVL254:
 2823 007f C3       		ret
 2824              	.LVL255:
 2825              		.p2align 4,,10
 2826              		.p2align 3
 2827              	.L165:
 2828              		.cfi_restore_state
 2829              	.LBB13453:
 2830              	.LBB13452:
 2831              	.LBB13451:
 2832              	.LBB13450:
 2833              	.LBB13449:
 2834              	.LBB13448:
 2835              	.LBB13438:
 2836              	.LBB13424:
 2837              	.LBB13425:
GAS LISTING /tmp/ccvmoMuv.s 			page 249


 456:/usr/include/c++/6/bits/basic_string.h **** 
 2838              		.loc 10 456 0
 2839 0080 4885ED   		testq	%rbp, %rbp
 2840 0083 48C7C2FF 		movq	$-1, %rdx
 2840      FFFFFF
 2841 008a 740D     		je	.L166
 2842              	.LVL256:
 2843              	.LBB13426:
 2844              	.LBB13427:
 267:/usr/include/c++/6/bits/char_traits.h **** 
 2845              		.loc 9 267 0
 2846 008c 4889EF   		movq	%rbp, %rdi
 2847 008f E8000000 		call	strlen@PLT
 2847      00
 2848              	.LVL257:
 2849              	.LBE13427:
 2850              	.LBE13426:
 456:/usr/include/c++/6/bits/basic_string.h **** 
 2851              		.loc 10 456 0
 2852 0094 488D5405 		leaq	0(%rbp,%rax), %rdx
 2852      00
 2853              	.L166:
 2854              	.LVL258:
 2855              	.LBB13428:
 2856              	.LBB13429:
 2857              	.LBB13430:
 2858              	.LBB13431:
 196:/usr/include/c++/6/bits/basic_string.h **** 	}
 2859              		.loc 10 196 0
 2860 0099 4889EE   		movq	%rbp, %rsi
 2861 009c 4C89E7   		movq	%r12, %rdi
 2862 009f E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_it
 2862      00
 2863              	.LVL259:
 2864              	.LEHE12:
 2865 00a4 EBC6     		jmp	.L167
 2866              	.LVL260:
 2867              	.L170:
 2868 00a6 4889C5   		movq	%rax, %rbp
 2869              	.LVL261:
 2870              	.LBE13431:
 2871              	.LBE13430:
 2872              	.LBE13429:
 2873              	.LBE13428:
 2874              	.LBE13425:
 2875              	.LBE13424:
 2876              	.LBB13432:
 2877              	.LBB13433:
 2878              	.LBB13434:
  90:/usr/include/boost/core/demangle.hpp **** }
 2879              		.loc 25 90 0
 2880 00a9 4889DF   		movq	%rbx, %rdi
 2881 00ac E8000000 		call	free@PLT
 2881      00
 2882              	.LVL262:
 2883 00b1 4889EF   		movq	%rbp, %rdi
 2884              	.LEHB13:
GAS LISTING /tmp/ccvmoMuv.s 			page 250


 2885 00b4 E8000000 		call	_Unwind_Resume@PLT
 2885      00
 2886              	.LVL263:
 2887              	.LEHE13:
 2888              	.LBE13434:
 2889              	.LBE13433:
 2890              	.LBE13432:
 2891              	.LBE13438:
 2892              	.LBE13448:
 2893              	.LBE13449:
 2894              	.LBE13450:
 2895              	.LBE13451:
 2896              	.LBE13452:
 2897              	.LBE13453:
 2898              		.cfi_endproc
 2899              	.LFE15619:
 2900              		.section	.gcc_except_table._ZNK5boost10error_infoINS_27tag_original_exception_typeEPKSt9type_infoE
 2901              	.LLSDA15619:
 2902 0000 FF       		.byte	0xff
 2903 0001 FF       		.byte	0xff
 2904 0002 01       		.byte	0x1
 2905 0003 0A       		.uleb128 .LLSDACSE15619-.LLSDACSB15619
 2906              	.LLSDACSB15619:
 2907 0004 67       		.uleb128 .LEHB12-.LFB15619
 2908 0005 3D       		.uleb128 .LEHE12-.LEHB12
 2909 0006 A601     		.uleb128 .L170-.LFB15619
 2910 0008 00       		.uleb128 0
 2911 0009 B401     		.uleb128 .LEHB13-.LFB15619
 2912 000b 05       		.uleb128 .LEHE13-.LEHB13
 2913 000c 00       		.uleb128 0
 2914 000d 00       		.uleb128 0
 2915              	.LLSDACSE15619:
 2916              		.section	.text._ZNK5boost10error_infoINS_27tag_original_exception_typeEPKSt9type_infoE17name_value
 2918              		.section	.rodata._ZNK5boost16exception_detail25error_info_container_impl3getERKNS0_10type_info_E.s
 2919              		.align 8
 2920              	.LC9:
 2921 0000 2F757372 		.string	"/usr/include/boost/smart_ptr/shared_ptr.hpp"
 2921      2F696E63 
 2921      6C756465 
 2921      2F626F6F 
 2921      73742F73 
 2922              		.section	.rodata._ZNK5boost16exception_detail25error_info_container_impl3getERKNS0_10type_info_E.s
 2923              	.LC10:
 2924 0000 70782021 		.string	"px != 0"
 2924      3D203000 
 2925              		.section	.rodata._ZNK5boost16exception_detail25error_info_container_impl3getERKNS0_10type_info_E.s
 2926 002c 00000000 		.align 8
 2927              	.LC11:
 2928 0030 2F757372 		.string	"/usr/include/boost/exception/info.hpp"
 2928      2F696E63 
 2928      6C756465 
 2928      2F626F6F 
 2928      73742F65 
 2929 0056 0000     		.align 8
 2930              	.LC12:
 2931 0058 2A3A3A62 		.string	"*::boost::exception_detail::type_info_(typeid(*p)).type_==*ti.type_"
 2931      6F6F7374 
GAS LISTING /tmp/ccvmoMuv.s 			page 251


 2931      3A3A6578 
 2931      63657074 
 2931      696F6E5F 
 2932              		.section	.text._ZNK5boost16exception_detail25error_info_container_impl3getERKNS0_10type_info_E,"ax
 2933              		.align 2
 2934              		.p2align 4,,15
 2935              		.weak	_ZNK5boost16exception_detail25error_info_container_impl3getERKNS0_10type_info_E
 2937              	_ZNK5boost16exception_detail25error_info_container_impl3getERKNS0_10type_info_E:
 2938              	.LFB9847:
 116:/usr/include/boost/exception/info.hpp ****                 {
 2939              		.loc 3 116 0
 2940              		.cfi_startproc
 2941              	.LVL264:
 2942 0000 4156     		pushq	%r14
 2943              		.cfi_def_cfa_offset 16
 2944              		.cfi_offset 14, -16
 2945 0002 4155     		pushq	%r13
 2946              		.cfi_def_cfa_offset 24
 2947              		.cfi_offset 13, -24
 2948 0004 4989FD   		movq	%rdi, %r13
 2949              	.LVL265:
 2950 0007 4154     		pushq	%r12
 2951              		.cfi_def_cfa_offset 32
 2952              		.cfi_offset 12, -32
 2953 0009 55       		pushq	%rbp
 2954              		.cfi_def_cfa_offset 40
 2955              		.cfi_offset 6, -40
 2956 000a 53       		pushq	%rbx
 2957              		.cfi_def_cfa_offset 48
 2958              		.cfi_offset 3, -48
 2959 000b 488B5E18 		movq	24(%rsi), %rbx
 2960              	.LVL266:
 2961              	.LBB13510:
 2962              	.LBB13511:
 2963              	.LBB13512:
 2964              	.LBB13513:
 2965              	.LBB13514:
1669:/usr/include/c++/6/bits/stl_tree.h **** 	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 2966              		.loc 19 1669 0
 2967 000f 4885DB   		testq	%rbx, %rbx
 2968 0012 0F840801 		je	.L175
 2968      0000
 2969 0018 488B02   		movq	(%rdx), %rax
 2970 001b 4C8D7610 		leaq	16(%rsi), %r14
 2971 001f 4D89F4   		movq	%r14, %r12
 2972 0022 488B6808 		movq	8(%rax), %rbp
 2973 0026 EB14     		jmp	.L176
 2974              	.LVL267:
 2975 0028 0F1F8400 		.p2align 4,,10
 2975      00000000 
 2976              		.p2align 3
 2977              	.L201:
1670:/usr/include/c++/6/bits/stl_tree.h **** 	  __y = __x, __x = _S_left(__x);
 2978              		.loc 19 1670 0
 2979 0030 4989DC   		movq	%rbx, %r12
 2980              	.LVL268:
1671:/usr/include/c++/6/bits/stl_tree.h **** 	else
GAS LISTING /tmp/ccvmoMuv.s 			page 252


 2981              		.loc 19 1671 0
 2982 0033 488B5B10 		movq	16(%rbx), %rbx
 2983              	.LVL269:
1669:/usr/include/c++/6/bits/stl_tree.h **** 	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 2984              		.loc 19 1669 0
 2985 0037 4885DB   		testq	%rbx, %rbx
 2986 003a 7429     		je	.L177
 2987              	.LVL270:
 2988              	.L176:
 2989 003c 488B4320 		movq	32(%rbx), %rax
 2990 0040 488B7808 		movq	8(%rax), %rdi
 2991              	.LVL271:
 2992              	.LBB13515:
 2993              	.LBB13516:
 2994              	.LBB13517:
 2995              	.LBB13518:
 2996              	.LBB13519:
 101:/usr/include/c++/6/typeinfo **** 
 102:/usr/include/c++/6/typeinfo **** #if !__GXX_TYPEINFO_EQUALITY_INLINE
 103:/usr/include/c++/6/typeinfo ****     // In old abi, or when weak symbols are not supported, there can
 104:/usr/include/c++/6/typeinfo ****     // be multiple instances of a type_info object for one
 105:/usr/include/c++/6/typeinfo ****     // type. Uniqueness must use the _name value, not object address.
 106:/usr/include/c++/6/typeinfo ****     bool before(const type_info& __arg) const _GLIBCXX_NOEXCEPT;
 107:/usr/include/c++/6/typeinfo ****     bool operator==(const type_info& __arg) const _GLIBCXX_NOEXCEPT;
 108:/usr/include/c++/6/typeinfo **** #else
 109:/usr/include/c++/6/typeinfo ****   #if !__GXX_MERGED_TYPEINFO_NAMES
 110:/usr/include/c++/6/typeinfo ****     /** Returns true if @c *this precedes @c __arg in the implementation's
 111:/usr/include/c++/6/typeinfo ****      *  collation order.  */
 112:/usr/include/c++/6/typeinfo ****     // Even with the new abi, on systems that support dlopen
 113:/usr/include/c++/6/typeinfo ****     // we can run into cases where type_info names aren't merged,
 114:/usr/include/c++/6/typeinfo ****     // so we still need to do string comparison.
 115:/usr/include/c++/6/typeinfo ****     bool before(const type_info& __arg) const _GLIBCXX_NOEXCEPT
 116:/usr/include/c++/6/typeinfo ****     { return (__name[0] == '*' && __arg.__name[0] == '*')
 117:/usr/include/c++/6/typeinfo **** 	? __name < __arg.__name
 2997              		.loc 26 117 0
 2998 0044 803F2A   		cmpb	$42, (%rdi)
 2999 0047 0F849B00 		je	.L200
 2999      0000
 3000              	.L178:
 118:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 3001              		.loc 26 118 0
 3002 004d 4889EE   		movq	%rbp, %rsi
 3003 0050 E8000000 		call	strcmp@PLT
 3003      00
 3004              	.LVL272:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 3005              		.loc 26 117 0
 3006 0055 C1E81F   		shrl	$31, %eax
 3007              	.L179:
 3008              	.LVL273:
 3009              	.LBE13519:
 3010              	.LBE13518:
 3011              	.LBE13517:
 3012              	.LBE13516:
 3013              	.LBE13515:
1670:/usr/include/c++/6/bits/stl_tree.h **** 	  __y = __x, __x = _S_left(__x);
 3014              		.loc 19 1670 0
GAS LISTING /tmp/ccvmoMuv.s 			page 253


 3015 0058 84C0     		testb	%al, %al
 3016 005a 74D4     		je	.L201
 3017 005c 488B5B18 		movq	24(%rbx), %rbx
 3018              	.LVL274:
1669:/usr/include/c++/6/bits/stl_tree.h **** 	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 3019              		.loc 19 1669 0
 3020 0060 4885DB   		testq	%rbx, %rbx
 3021 0063 75D7     		jne	.L176
 3022              	.L177:
 3023              	.LVL275:
 3024              	.LBE13514:
 3025              	.LBE13513:
2325:/usr/include/c++/6/bits/stl_tree.h ****     }
2326:/usr/include/c++/6/bits/stl_tree.h **** 
2327:/usr/include/c++/6/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2328:/usr/include/c++/6/bits/stl_tree.h ****            typename _Compare, typename _Alloc>
2329:/usr/include/c++/6/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue,
2330:/usr/include/c++/6/bits/stl_tree.h **** 		      _Compare, _Alloc>::const_iterator
2331:/usr/include/c++/6/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2332:/usr/include/c++/6/bits/stl_tree.h ****     find(const _Key& __k) const
2333:/usr/include/c++/6/bits/stl_tree.h ****     {
2334:/usr/include/c++/6/bits/stl_tree.h ****       const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
2335:/usr/include/c++/6/bits/stl_tree.h ****       return (__j == end()
2336:/usr/include/c++/6/bits/stl_tree.h **** 	      || _M_impl._M_key_compare(__k, 
2337:/usr/include/c++/6/bits/stl_tree.h **** 					_S_key(__j._M_node))) ? end() : __j;
 3026              		.loc 19 2337 0
 3027 0065 4D39E6   		cmpq	%r12, %r14
 3028 0068 0F84B200 		je	.L175
 3028      0000
 3029              	.LVL276:
 3030              	.LBB13526:
 3031              	.LBB13527:
 3032              	.LBB13528:
 3033              	.LBB13529:
 3034              	.LBB13530:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 3035              		.loc 26 117 0
 3036 006e 807D002A 		cmpb	$42, 0(%rbp)
 3037 0072 498B4424 		movq	32(%r12), %rax
 3037      20
 3038 0077 488B7008 		movq	8(%rax), %rsi
 3039              	.LVL277:
 3040 007b 0F84BF00 		je	.L202
 3040      0000
 3041              	.LVL278:
 3042              	.L182:
 3043              		.loc 26 118 0
 3044 0081 4889EF   		movq	%rbp, %rdi
 3045 0084 E8000000 		call	strcmp@PLT
 3045      00
 3046              	.LVL279:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 3047              		.loc 26 117 0
 3048 0089 C1E81F   		shrl	$31, %eax
 3049              	.L183:
 3050              	.LVL280:
 3051              	.LBE13530:
GAS LISTING /tmp/ccvmoMuv.s 			page 254


 3052              	.LBE13529:
 3053              	.LBE13528:
 3054              	.LBE13527:
 3055              	.LBE13526:
2336:/usr/include/c++/6/bits/stl_tree.h **** 					_S_key(__j._M_node))) ? end() : __j;
 3056              		.loc 19 2336 0
 3057 008c 84C0     		testb	%al, %al
 3058 008e 0F858C00 		jne	.L175
 3058      0000
 3059              	.LVL281:
 3060 0094 498B5C24 		movq	40(%r12), %rbx
 3060      28
 3061              	.LVL282:
 3062              	.LBE13512:
 3063              	.LBE13511:
 3064              	.LBE13510:
 3065              	.LBB13541:
 3066              	.LBB13542:
 3067              	.LBB13543:
 3068              		.file 27 "/usr/include/boost/smart_ptr/shared_ptr.hpp"
   1:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #ifndef BOOST_SMART_PTR_SHARED_PTR_HPP_INCLUDED
   2:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #define BOOST_SMART_PTR_SHARED_PTR_HPP_INCLUDED
   3:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
   4:/usr/include/boost/smart_ptr/shared_ptr.hpp **** //
   5:/usr/include/boost/smart_ptr/shared_ptr.hpp **** //  shared_ptr.hpp
   6:/usr/include/boost/smart_ptr/shared_ptr.hpp **** //
   7:/usr/include/boost/smart_ptr/shared_ptr.hpp **** //  (C) Copyright Greg Colvin and Beman Dawes 1998, 1999.
   8:/usr/include/boost/smart_ptr/shared_ptr.hpp **** //  Copyright (c) 2001-2008 Peter Dimov
   9:/usr/include/boost/smart_ptr/shared_ptr.hpp **** //
  10:/usr/include/boost/smart_ptr/shared_ptr.hpp **** //  Distributed under the Boost Software License, Version 1.0. (See
  11:/usr/include/boost/smart_ptr/shared_ptr.hpp **** //  accompanying file LICENSE_1_0.txt or copy at
  12:/usr/include/boost/smart_ptr/shared_ptr.hpp **** //  http://www.boost.org/LICENSE_1_0.txt)
  13:/usr/include/boost/smart_ptr/shared_ptr.hpp **** //
  14:/usr/include/boost/smart_ptr/shared_ptr.hpp **** //  See http://www.boost.org/libs/smart_ptr/shared_ptr.htm for documentation.
  15:/usr/include/boost/smart_ptr/shared_ptr.hpp **** //
  16:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
  17:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #include <boost/config.hpp>   // for broken compiler workarounds
  18:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
  19:/usr/include/boost/smart_ptr/shared_ptr.hpp **** // In order to avoid circular dependencies with Boost.TR1
  20:/usr/include/boost/smart_ptr/shared_ptr.hpp **** // we make sure that our include of <memory> doesn't try to
  21:/usr/include/boost/smart_ptr/shared_ptr.hpp **** // pull in the TR1 headers: that's why we use this header 
  22:/usr/include/boost/smart_ptr/shared_ptr.hpp **** // rather than including <memory> directly:
  23:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #include <boost/config/no_tr1/memory.hpp>  // std::auto_ptr
  24:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
  25:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #include <boost/assert.hpp>
  26:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #include <boost/checked_delete.hpp>
  27:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #include <boost/throw_exception.hpp>
  28:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #include <boost/smart_ptr/detail/shared_count.hpp>
  29:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #include <boost/detail/workaround.hpp>
  30:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #include <boost/smart_ptr/detail/sp_convertible.hpp>
  31:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #include <boost/smart_ptr/detail/sp_nullptr_t.hpp>
  32:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #include <boost/smart_ptr/detail/sp_disable_deprecated.hpp>
  33:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
  34:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined(BOOST_SP_NO_ATOMIC_ACCESS)
  35:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #include <boost/smart_ptr/detail/spinlock_pool.hpp>
  36:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif
  37:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 255


  38:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #include <algorithm>            // for std::swap
  39:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #include <functional>           // for std::less
  40:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #include <typeinfo>             // for std::bad_cast
  41:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #include <cstddef>              // for std::size_t
  42:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
  43:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined(BOOST_NO_IOSTREAM)
  44:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined(BOOST_NO_IOSFWD)
  45:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #include <iosfwd>               // for std::basic_ostream
  46:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #else
  47:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #include <ostream>
  48:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif
  49:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif
  50:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
  51:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if defined( BOOST_SP_DISABLE_DEPRECATED )
  52:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #pragma GCC diagnostic push
  53:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  54:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif
  55:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
  56:/usr/include/boost/smart_ptr/shared_ptr.hpp **** namespace boost
  57:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
  58:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
  59:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template<class T> class shared_ptr;
  60:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template<class T> class weak_ptr;
  61:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template<class T> class enable_shared_from_this;
  62:/usr/include/boost/smart_ptr/shared_ptr.hpp **** class enable_shared_from_raw;
  63:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
  64:/usr/include/boost/smart_ptr/shared_ptr.hpp **** namespace movelib
  65:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
  66:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
  67:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template< class T, class D > class unique_ptr;
  68:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
  69:/usr/include/boost/smart_ptr/shared_ptr.hpp **** } // namespace movelib
  70:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
  71:/usr/include/boost/smart_ptr/shared_ptr.hpp **** namespace detail
  72:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
  73:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
  74:/usr/include/boost/smart_ptr/shared_ptr.hpp **** // sp_element, element_type
  75:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
  76:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template< class T > struct sp_element
  77:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
  78:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typedef T type;
  79:/usr/include/boost/smart_ptr/shared_ptr.hpp **** };
  80:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
  81:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )
  82:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
  83:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template< class T > struct sp_element< T[] >
  84:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
  85:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typedef T type;
  86:/usr/include/boost/smart_ptr/shared_ptr.hpp **** };
  87:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
  88:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( __BORLANDC__ ) || !BOOST_WORKAROUND( __BORLANDC__, < 0x600 )
  89:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
  90:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template< class T, std::size_t N > struct sp_element< T[N] >
  91:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
  92:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typedef T type;
  93:/usr/include/boost/smart_ptr/shared_ptr.hpp **** };
  94:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 256


  95:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif
  96:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
  97:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif // !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )
  98:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
  99:/usr/include/boost/smart_ptr/shared_ptr.hpp **** // sp_dereference, return type of operator*
 100:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 101:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template< class T > struct sp_dereference
 102:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 103:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typedef T & type;
 104:/usr/include/boost/smart_ptr/shared_ptr.hpp **** };
 105:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 106:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template<> struct sp_dereference< void >
 107:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 108:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typedef void type;
 109:/usr/include/boost/smart_ptr/shared_ptr.hpp **** };
 110:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 111:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined(BOOST_NO_CV_VOID_SPECIALIZATIONS)
 112:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 113:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template<> struct sp_dereference< void const >
 114:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 115:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typedef void type;
 116:/usr/include/boost/smart_ptr/shared_ptr.hpp **** };
 117:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 118:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template<> struct sp_dereference< void volatile >
 119:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 120:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typedef void type;
 121:/usr/include/boost/smart_ptr/shared_ptr.hpp **** };
 122:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 123:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template<> struct sp_dereference< void const volatile >
 124:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 125:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typedef void type;
 126:/usr/include/boost/smart_ptr/shared_ptr.hpp **** };
 127:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 128:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif // !defined(BOOST_NO_CV_VOID_SPECIALIZATIONS)
 129:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 130:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )
 131:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 132:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template< class T > struct sp_dereference< T[] >
 133:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 134:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typedef void type;
 135:/usr/include/boost/smart_ptr/shared_ptr.hpp **** };
 136:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 137:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( __BORLANDC__ ) || !BOOST_WORKAROUND( __BORLANDC__, < 0x600 )
 138:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 139:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template< class T, std::size_t N > struct sp_dereference< T[N] >
 140:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 141:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typedef void type;
 142:/usr/include/boost/smart_ptr/shared_ptr.hpp **** };
 143:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 144:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif
 145:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 146:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif // !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )
 147:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 148:/usr/include/boost/smart_ptr/shared_ptr.hpp **** // sp_member_access, return type of operator->
 149:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 150:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template< class T > struct sp_member_access
 151:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
GAS LISTING /tmp/ccvmoMuv.s 			page 257


 152:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typedef T * type;
 153:/usr/include/boost/smart_ptr/shared_ptr.hpp **** };
 154:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 155:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )
 156:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 157:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template< class T > struct sp_member_access< T[] >
 158:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 159:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typedef void type;
 160:/usr/include/boost/smart_ptr/shared_ptr.hpp **** };
 161:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 162:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( __BORLANDC__ ) || !BOOST_WORKAROUND( __BORLANDC__, < 0x600 )
 163:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 164:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template< class T, std::size_t N > struct sp_member_access< T[N] >
 165:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 166:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typedef void type;
 167:/usr/include/boost/smart_ptr/shared_ptr.hpp **** };
 168:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 169:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif
 170:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 171:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif // !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )
 172:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 173:/usr/include/boost/smart_ptr/shared_ptr.hpp **** // sp_array_access, return type of operator[]
 174:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 175:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template< class T > struct sp_array_access
 176:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 177:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typedef void type;
 178:/usr/include/boost/smart_ptr/shared_ptr.hpp **** };
 179:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 180:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )
 181:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 182:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template< class T > struct sp_array_access< T[] >
 183:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 184:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typedef T & type;
 185:/usr/include/boost/smart_ptr/shared_ptr.hpp **** };
 186:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 187:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( __BORLANDC__ ) || !BOOST_WORKAROUND( __BORLANDC__, < 0x600 )
 188:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 189:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template< class T, std::size_t N > struct sp_array_access< T[N] >
 190:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 191:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typedef T & type;
 192:/usr/include/boost/smart_ptr/shared_ptr.hpp **** };
 193:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 194:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif
 195:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 196:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif // !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )
 197:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 198:/usr/include/boost/smart_ptr/shared_ptr.hpp **** // sp_extent, for operator[] index check
 199:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 200:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template< class T > struct sp_extent
 201:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 202:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     enum _vt { value = 0 };
 203:/usr/include/boost/smart_ptr/shared_ptr.hpp **** };
 204:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 205:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )
 206:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 207:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template< class T, std::size_t N > struct sp_extent< T[N] >
 208:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
GAS LISTING /tmp/ccvmoMuv.s 			page 258


 209:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     enum _vt { value = N };
 210:/usr/include/boost/smart_ptr/shared_ptr.hpp **** };
 211:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 212:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif // !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )
 213:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 214:/usr/include/boost/smart_ptr/shared_ptr.hpp **** // enable_shared_from_this support
 215:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 216:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template< class X, class Y, class T > inline void sp_enable_shared_from_this( boost::shared_ptr<X> 
 217:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 218:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     if( pe != 0 )
 219:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 220:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         pe->_internal_accept_owner( ppx, const_cast< Y* >( py ) );
 221:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 222:/usr/include/boost/smart_ptr/shared_ptr.hpp **** }
 223:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 224:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template< class X, class Y > inline void sp_enable_shared_from_this( boost::shared_ptr<X> * ppx, Y 
 225:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 226:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #ifdef _MANAGED
 227:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 228:/usr/include/boost/smart_ptr/shared_ptr.hpp **** // Avoid C4793, ... causes native code generation
 229:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 230:/usr/include/boost/smart_ptr/shared_ptr.hpp **** struct sp_any_pointer
 231:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 232:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class T> sp_any_pointer( T* ) {}
 233:/usr/include/boost/smart_ptr/shared_ptr.hpp **** };
 234:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 235:/usr/include/boost/smart_ptr/shared_ptr.hpp **** inline void sp_enable_shared_from_this( sp_any_pointer, sp_any_pointer, sp_any_pointer )
 236:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 237:/usr/include/boost/smart_ptr/shared_ptr.hpp **** }
 238:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 239:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #else // _MANAGED
 240:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 241:/usr/include/boost/smart_ptr/shared_ptr.hpp **** inline void sp_enable_shared_from_this( ... )
 242:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 243:/usr/include/boost/smart_ptr/shared_ptr.hpp **** }
 244:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 245:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif // _MANAGED
 246:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 247:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( BOOST_NO_SFINAE ) && !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION ) && !defined
 248:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 249:/usr/include/boost/smart_ptr/shared_ptr.hpp **** // rvalue auto_ptr support based on a technique by Dave Abrahams
 250:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 251:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template< class T, class R > struct sp_enable_if_auto_ptr
 252:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 253:/usr/include/boost/smart_ptr/shared_ptr.hpp **** };
 254:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 255:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template< class T, class R > struct sp_enable_if_auto_ptr< std::auto_ptr< T >, R >
 256:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 257:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typedef R type;
 258:/usr/include/boost/smart_ptr/shared_ptr.hpp **** }; 
 259:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 260:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif
 261:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 262:/usr/include/boost/smart_ptr/shared_ptr.hpp **** // sp_assert_convertible
 263:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 264:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template< class Y, class T > inline void sp_assert_convertible()
 265:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
GAS LISTING /tmp/ccvmoMuv.s 			page 259


 266:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( BOOST_SP_NO_SP_CONVERTIBLE )
 267:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 268:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     // static_assert( sp_convertible< Y, T >::value );
 269:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typedef char tmp[ sp_convertible< Y, T >::value? 1: -1 ];
 270:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     (void)sizeof( tmp );
 271:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 272:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #else
 273:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 274:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     T* p = static_cast< Y* >( 0 );
 275:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     (void)p;
 276:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 277:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif
 278:/usr/include/boost/smart_ptr/shared_ptr.hpp **** }
 279:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 280:/usr/include/boost/smart_ptr/shared_ptr.hpp **** // pointer constructor helper
 281:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 282:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template< class T, class Y > inline void sp_pointer_construct( boost::shared_ptr< T > * ppx, Y * p,
 283:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 284:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     boost::detail::shared_count( p ).swap( pn );
 285:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     boost::detail::sp_enable_shared_from_this( ppx, p, p );
 286:/usr/include/boost/smart_ptr/shared_ptr.hpp **** }
 287:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 288:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )
 289:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 290:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template< class T, class Y > inline void sp_pointer_construct( boost::shared_ptr< T[] > * /*ppx*/, 
 291:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 292:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     sp_assert_convertible< Y[], T[] >();
 293:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     boost::detail::shared_count( p, boost::checked_array_deleter< T >() ).swap( pn );
 294:/usr/include/boost/smart_ptr/shared_ptr.hpp **** }
 295:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 296:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template< class T, std::size_t N, class Y > inline void sp_pointer_construct( boost::shared_ptr< T[
 297:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 298:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     sp_assert_convertible< Y[N], T[N] >();
 299:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     boost::detail::shared_count( p, boost::checked_array_deleter< T >() ).swap( pn );
 300:/usr/include/boost/smart_ptr/shared_ptr.hpp **** }
 301:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 302:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif // !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )
 303:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 304:/usr/include/boost/smart_ptr/shared_ptr.hpp **** // deleter constructor helper
 305:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 306:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template< class T, class Y > inline void sp_deleter_construct( boost::shared_ptr< T > * ppx, Y * p 
 307:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 308:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     boost::detail::sp_enable_shared_from_this( ppx, p, p );
 309:/usr/include/boost/smart_ptr/shared_ptr.hpp **** }
 310:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 311:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )
 312:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 313:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template< class T, class Y > inline void sp_deleter_construct( boost::shared_ptr< T[] > * /*ppx*/, 
 314:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 315:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     sp_assert_convertible< Y[], T[] >();
 316:/usr/include/boost/smart_ptr/shared_ptr.hpp **** }
 317:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 318:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template< class T, std::size_t N, class Y > inline void sp_deleter_construct( boost::shared_ptr< T[
 319:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 320:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     sp_assert_convertible< Y[N], T[N] >();
 321:/usr/include/boost/smart_ptr/shared_ptr.hpp **** }
 322:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 260


 323:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif // !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )
 324:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 325:/usr/include/boost/smart_ptr/shared_ptr.hpp **** } // namespace detail
 326:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 327:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 328:/usr/include/boost/smart_ptr/shared_ptr.hpp **** //
 329:/usr/include/boost/smart_ptr/shared_ptr.hpp **** //  shared_ptr
 330:/usr/include/boost/smart_ptr/shared_ptr.hpp **** //
 331:/usr/include/boost/smart_ptr/shared_ptr.hpp **** //  An enhanced relative of scoped_ptr with reference counted copy semantics.
 332:/usr/include/boost/smart_ptr/shared_ptr.hpp **** //  The object pointed to is deleted when the last shared_ptr pointing to it
 333:/usr/include/boost/smart_ptr/shared_ptr.hpp **** //  is destroyed or reset.
 334:/usr/include/boost/smart_ptr/shared_ptr.hpp **** //
 335:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 336:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template<class T> class shared_ptr
 337:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 338:/usr/include/boost/smart_ptr/shared_ptr.hpp **** private:
 339:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 340:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     // Borland 5.5.1 specific workaround
 341:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typedef shared_ptr<T> this_type;
 342:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 343:/usr/include/boost/smart_ptr/shared_ptr.hpp **** public:
 344:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 345:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typedef typename boost::detail::sp_element< T >::type element_type;
 346:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 347:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     shared_ptr() BOOST_NOEXCEPT : px( 0 ), pn() // never throws in 1.30+
 348:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 349:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 350:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 351:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( BOOST_NO_CXX11_NULLPTR )
 352:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 353:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     shared_ptr( boost::detail::sp_nullptr_t ) BOOST_NOEXCEPT : px( 0 ), pn() // never throws
 354:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 355:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 356:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 357:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif
 358:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 359:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Y>
 360:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     explicit shared_ptr( Y * p ): px( p ), pn() // Y must be complete
 361:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 362:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         boost::detail::sp_pointer_construct( this, p, pn );
 363:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 364:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 365:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     //
 366:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     // Requirements: D's copy constructor must not throw
 367:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     //
 368:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     // shared_ptr will release p by calling d(p)
 369:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     //
 370:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 371:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Y, class D> shared_ptr( Y * p, D d ): px( p ), pn( p, d )
 372:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 373:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         boost::detail::sp_deleter_construct( this, p );
 374:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 375:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 376:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( BOOST_NO_CXX11_NULLPTR )
 377:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 378:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class D> shared_ptr( boost::detail::sp_nullptr_t p, D d ): px( p ), pn( p, d )
 379:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
GAS LISTING /tmp/ccvmoMuv.s 			page 261


 380:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 381:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 382:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif
 383:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 384:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     // As above, but with allocator. A's copy constructor shall not throw.
 385:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 386:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Y, class D, class A> shared_ptr( Y * p, D d, A a ): px( p ), pn( p, d, a )
 387:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 388:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         boost::detail::sp_deleter_construct( this, p );
 389:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 390:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 391:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( BOOST_NO_CXX11_NULLPTR )
 392:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 393:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class D, class A> shared_ptr( boost::detail::sp_nullptr_t p, D d, A a ): px( p ), pn( 
 394:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 395:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 396:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 397:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif
 398:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 399:/usr/include/boost/smart_ptr/shared_ptr.hpp **** //  generated copy constructor, destructor are fine...
 400:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 401:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( BOOST_NO_CXX11_RVALUE_REFERENCES )
 402:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 403:/usr/include/boost/smart_ptr/shared_ptr.hpp **** // ... except in C++0x, move disables the implicit copy
 404:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 405:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     shared_ptr( shared_ptr const & r ) BOOST_NOEXCEPT : px( r.px ), pn( r.pn )
 406:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 407:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 408:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 409:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif
 410:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 411:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Y>
 412:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     explicit shared_ptr( weak_ptr<Y> const & r ): pn( r.pn ) // may throw
 413:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 414:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         boost::detail::sp_assert_convertible< Y, T >();
 415:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 416:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         // it is now safe to copy r.px, as pn(r.pn) did not throw
 417:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         px = r.px;
 418:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 419:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 420:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Y>
 421:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     shared_ptr( weak_ptr<Y> const & r, boost::detail::sp_nothrow_tag )
 422:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     BOOST_NOEXCEPT : px( 0 ), pn( r.pn, boost::detail::sp_nothrow_tag() )
 423:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 424:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         if( !pn.empty() )
 425:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         {
 426:/usr/include/boost/smart_ptr/shared_ptr.hpp ****             px = r.px;
 427:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         }
 428:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 429:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 430:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Y>
 431:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( BOOST_SP_NO_SP_CONVERTIBLE )
 432:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 433:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     shared_ptr( shared_ptr<Y> const & r, typename boost::detail::sp_enable_if_convertible<Y,T>::typ
 434:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 435:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #else
 436:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 262


 437:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     shared_ptr( shared_ptr<Y> const & r )
 438:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 439:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif
 440:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     BOOST_NOEXCEPT : px( r.px ), pn( r.pn )
 441:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 442:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         boost::detail::sp_assert_convertible< Y, T >();
 443:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 444:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 445:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     // aliasing
 446:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template< class Y >
 447:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     shared_ptr( shared_ptr<Y> const & r, element_type * p ) BOOST_NOEXCEPT : px( p ), pn( r.pn )
 448:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 449:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 450:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 451:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #ifndef BOOST_NO_AUTO_PTR
 452:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 453:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Y>
 454:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     explicit shared_ptr( std::auto_ptr<Y> & r ): px(r.get()), pn()
 455:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 456:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         boost::detail::sp_assert_convertible< Y, T >();
 457:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 458:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         Y * tmp = r.get();
 459:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         pn = boost::detail::shared_count( r );
 460:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 461:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         boost::detail::sp_deleter_construct( this, tmp );
 462:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 463:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 464:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( BOOST_NO_CXX11_RVALUE_REFERENCES )
 465:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 466:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Y>
 467:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     shared_ptr( std::auto_ptr<Y> && r ): px(r.get()), pn()
 468:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 469:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         boost::detail::sp_assert_convertible< Y, T >();
 470:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 471:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         Y * tmp = r.get();
 472:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         pn = boost::detail::shared_count( r );
 473:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 474:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         boost::detail::sp_deleter_construct( this, tmp );
 475:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 476:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 477:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #elif !defined( BOOST_NO_SFINAE ) && !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )
 478:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 479:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Ap>
 480:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     explicit shared_ptr( Ap r, typename boost::detail::sp_enable_if_auto_ptr<Ap, int>::type = 0 ): 
 481:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 482:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         typedef typename Ap::element_type Y;
 483:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 484:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         boost::detail::sp_assert_convertible< Y, T >();
 485:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 486:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         Y * tmp = r.get();
 487:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         pn = boost::detail::shared_count( r );
 488:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 489:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         boost::detail::sp_deleter_construct( this, tmp );
 490:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 491:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 492:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif // BOOST_NO_SFINAE, BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION
 493:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 263


 494:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif // BOOST_NO_AUTO_PTR
 495:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 496:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( BOOST_NO_CXX11_SMART_PTR ) && !defined( BOOST_NO_CXX11_RVALUE_REFERENCES )
 497:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 498:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template< class Y, class D >
 499:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     shared_ptr( std::unique_ptr< Y, D > && r ): px( r.get() ), pn()
 500:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 501:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         boost::detail::sp_assert_convertible< Y, T >();
 502:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 503:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         typename std::unique_ptr< Y, D >::pointer tmp = r.get();
 504:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         pn = boost::detail::shared_count( r );
 505:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 506:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         boost::detail::sp_deleter_construct( this, tmp );
 507:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 508:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 509:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif
 510:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 511:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template< class Y, class D >
 512:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     shared_ptr( boost::movelib::unique_ptr< Y, D > r ): px( r.get() ), pn()
 513:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 514:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         boost::detail::sp_assert_convertible< Y, T >();
 515:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 516:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         typename boost::movelib::unique_ptr< Y, D >::pointer tmp = r.get();
 517:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         pn = boost::detail::shared_count( r );
 518:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 519:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         boost::detail::sp_deleter_construct( this, tmp );
 520:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 521:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 522:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     // assignment
 523:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 524:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     shared_ptr & operator=( shared_ptr const & r ) BOOST_NOEXCEPT
 525:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 526:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         this_type(r).swap(*this);
 527:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         return *this;
 528:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 529:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 530:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined(BOOST_MSVC) || (BOOST_MSVC >= 1400)
 531:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 532:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Y>
 533:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     shared_ptr & operator=(shared_ptr<Y> const & r) BOOST_NOEXCEPT
 534:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 535:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         this_type(r).swap(*this);
 536:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         return *this;
 537:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 538:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 539:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif
 540:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 541:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #ifndef BOOST_NO_AUTO_PTR
 542:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 543:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Y>
 544:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     shared_ptr & operator=( std::auto_ptr<Y> & r )
 545:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 546:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         this_type( r ).swap( *this );
 547:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         return *this;
 548:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 549:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 550:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( BOOST_NO_CXX11_RVALUE_REFERENCES )
GAS LISTING /tmp/ccvmoMuv.s 			page 264


 551:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 552:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Y>
 553:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     shared_ptr & operator=( std::auto_ptr<Y> && r )
 554:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 555:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         this_type( static_cast< std::auto_ptr<Y> && >( r ) ).swap( *this );
 556:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         return *this;
 557:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 558:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 559:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #elif !defined( BOOST_NO_SFINAE ) && !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )
 560:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 561:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Ap>
 562:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typename boost::detail::sp_enable_if_auto_ptr< Ap, shared_ptr & >::type operator=( Ap r )
 563:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 564:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         this_type( r ).swap( *this );
 565:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         return *this;
 566:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 567:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 568:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif // BOOST_NO_SFINAE, BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION
 569:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 570:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif // BOOST_NO_AUTO_PTR
 571:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 572:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( BOOST_NO_CXX11_SMART_PTR ) && !defined( BOOST_NO_CXX11_RVALUE_REFERENCES )
 573:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 574:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Y, class D>
 575:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     shared_ptr & operator=( std::unique_ptr<Y, D> && r )
 576:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 577:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         this_type( static_cast< std::unique_ptr<Y, D> && >( r ) ).swap(*this);
 578:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         return *this;
 579:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 580:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 581:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif
 582:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 583:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Y, class D>
 584:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     shared_ptr & operator=( boost::movelib::unique_ptr<Y, D> r )
 585:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 586:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         // this_type( static_cast< unique_ptr<Y, D> && >( r ) ).swap( *this );
 587:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 588:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         boost::detail::sp_assert_convertible< Y, T >();
 589:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 590:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         typename boost::movelib::unique_ptr< Y, D >::pointer p = r.get();
 591:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 592:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         shared_ptr tmp;
 593:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 594:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         tmp.px = p;
 595:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         tmp.pn = boost::detail::shared_count( r );
 596:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 597:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         boost::detail::sp_deleter_construct( &tmp, p );
 598:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 599:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         tmp.swap( *this );
 600:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 601:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         return *this;
 602:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 603:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 604:/usr/include/boost/smart_ptr/shared_ptr.hpp **** // Move support
 605:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 606:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( BOOST_NO_CXX11_RVALUE_REFERENCES )
 607:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 265


 608:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     shared_ptr( shared_ptr && r ) BOOST_NOEXCEPT : px( r.px ), pn()
 609:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 610:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         pn.swap( r.pn );
 611:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         r.px = 0;
 612:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 613:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 614:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Y>
 615:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( BOOST_SP_NO_SP_CONVERTIBLE )
 616:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 617:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     shared_ptr( shared_ptr<Y> && r, typename boost::detail::sp_enable_if_convertible<Y,T>::type = b
 618:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 619:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #else
 620:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 621:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     shared_ptr( shared_ptr<Y> && r )
 622:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 623:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif
 624:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     BOOST_NOEXCEPT : px( r.px ), pn()
 625:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 626:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         boost::detail::sp_assert_convertible< Y, T >();
 627:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 628:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         pn.swap( r.pn );
 629:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         r.px = 0;
 630:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 631:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 632:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     shared_ptr & operator=( shared_ptr && r ) BOOST_NOEXCEPT
 633:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 634:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         this_type( static_cast< shared_ptr && >( r ) ).swap( *this );
 635:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         return *this;
 636:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 637:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 638:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Y>
 639:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     shared_ptr & operator=( shared_ptr<Y> && r ) BOOST_NOEXCEPT
 640:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 641:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         this_type( static_cast< shared_ptr<Y> && >( r ) ).swap( *this );
 642:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         return *this;
 643:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 644:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 645:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     // aliasing move
 646:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Y>
 647:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     shared_ptr( shared_ptr<Y> && r, element_type * p ) BOOST_NOEXCEPT : px( p ), pn()
 648:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 649:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         pn.swap( r.pn );
 650:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         r.px = 0;
 651:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 652:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 653:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif
 654:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 655:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( BOOST_NO_CXX11_NULLPTR )
 656:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 657:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     shared_ptr & operator=( boost::detail::sp_nullptr_t ) BOOST_NOEXCEPT // never throws
 658:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 659:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         this_type().swap(*this);
 660:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         return *this;
 661:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 662:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 663:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif
 664:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 266


 665:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     void reset() BOOST_NOEXCEPT // never throws in 1.30+
 666:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 667:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         this_type().swap(*this);
 668:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 669:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 670:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Y> void reset( Y * p ) // Y must be complete
 671:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 672:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         BOOST_ASSERT( p == 0 || p != px ); // catch self-reset errors
 673:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         this_type( p ).swap( *this );
 674:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 675:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 676:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Y, class D> void reset( Y * p, D d )
 677:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 678:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         this_type( p, d ).swap( *this );
 679:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 680:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 681:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Y, class D, class A> void reset( Y * p, D d, A a )
 682:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 683:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         this_type( p, d, a ).swap( *this );
 684:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 685:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 686:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Y> void reset( shared_ptr<Y> const & r, element_type * p )
 687:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 688:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         this_type( r, p ).swap( *this );
 689:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 690:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 691:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( BOOST_NO_CXX11_RVALUE_REFERENCES )
 692:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 693:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Y> void reset( shared_ptr<Y> && r, element_type * p )
 694:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 695:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         this_type( static_cast< shared_ptr<Y> && >( r ), p ).swap( *this );
 696:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 697:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 698:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif
 699:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 700:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     // never throws (but has a BOOST_ASSERT in it, so not marked with BOOST_NOEXCEPT)
 701:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typename boost::detail::sp_dereference< T >::type operator* () const
 702:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 703:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         BOOST_ASSERT( px != 0 );
 3069              		.loc 27 703 0
 3070 0099 4885DB   		testq	%rbx, %rbx
 3071 009c 0F84B200 		je	.L203
 3071      0000
 3072              	.LBE13543:
 3073              	.LBE13542:
 123:/usr/include/boost/exception/info.hpp **** #endif
 3074              		.loc 3 123 0 discriminator 1
 3075 00a2 488B03   		movq	(%rbx), %rax
 3076 00a5 488B40F8 		movq	-8(%rax), %rax
 3077 00a9 488B7808 		movq	8(%rax), %rdi
 3078              	.LVL283:
 3079              	.LBB13547:
 3080              	.LBB13548:
 119:/usr/include/c++/6/typeinfo **** 
 120:/usr/include/c++/6/typeinfo ****     bool operator==(const type_info& __arg) const _GLIBCXX_NOEXCEPT
 121:/usr/include/c++/6/typeinfo ****     {
 122:/usr/include/c++/6/typeinfo ****       return ((__name == __arg.__name)
GAS LISTING /tmp/ccvmoMuv.s 			page 267


 123:/usr/include/c++/6/typeinfo **** 	      || (__name[0] != '*' &&
 3081              		.loc 26 123 0 discriminator 1
 3082 00ad 4839EF   		cmpq	%rbp, %rdi
 3083 00b0 7411     		je	.L186
 3084              		.loc 26 123 0 is_stmt 0
 3085 00b2 803F2A   		cmpb	$42, (%rdi)
 3086 00b5 7449     		je	.L187
 124:/usr/include/c++/6/typeinfo **** 		  __builtin_strcmp (__name, __arg.__name) == 0));
 3087              		.loc 26 124 0 is_stmt 1
 3088 00b7 4889EE   		movq	%rbp, %rsi
 3089 00ba E8000000 		call	strcmp@PLT
 3089      00
 3090              	.LVL284:
 123:/usr/include/c++/6/typeinfo **** 		  __builtin_strcmp (__name, __arg.__name) == 0));
 3091              		.loc 26 123 0
 3092 00bf 85C0     		testl	%eax, %eax
 3093 00c1 753D     		jne	.L187
 3094              	.L186:
 3095              	.LVL285:
 3096              	.LBE13548:
 3097              	.LBE13547:
 3098              	.LBB13549:
 3099              	.LBB13550:
 3100              	.LBB13551:
 3101              	.LBB13552:
 3102              		.file 28 "/usr/include/boost/smart_ptr/detail/shared_count.hpp"
   1:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #ifndef BOOST_SMART_PTR_DETAIL_SHARED_COUNT_HPP_INCLUDED
   2:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #define BOOST_SMART_PTR_DETAIL_SHARED_COUNT_HPP_INCLUDED
   3:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
   4:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** // MS compatible compilers support #pragma once
   5:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
   6:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(_MSC_VER) && (_MSC_VER >= 1020)
   7:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** # pragma once
   8:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
   9:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
  10:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** //
  11:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** //  detail/shared_count.hpp
  12:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** //
  13:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** //  Copyright (c) 2001, 2002, 2003 Peter Dimov and Multi Media Ltd.
  14:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** //  Copyright 2004-2005 Peter Dimov
  15:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** //
  16:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** // Distributed under the Boost Software License, Version 1.0. (See
  17:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** // accompanying file LICENSE_1_0.txt or copy at
  18:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** // http://www.boost.org/LICENSE_1_0.txt)
  19:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** //
  20:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
  21:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #ifdef __BORLANDC__
  22:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** # pragma warn -8027     // Functions containing try are not expanded inline
  23:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
  24:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
  25:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #include <boost/config.hpp>
  26:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #include <boost/checked_delete.hpp>
  27:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #include <boost/throw_exception.hpp>
  28:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #include <boost/smart_ptr/bad_weak_ptr.hpp>
  29:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #include <boost/smart_ptr/detail/sp_counted_base.hpp>
  30:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #include <boost/smart_ptr/detail/sp_counted_impl.hpp>
  31:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #include <boost/smart_ptr/detail/sp_disable_deprecated.hpp>
GAS LISTING /tmp/ccvmoMuv.s 			page 268


  32:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #include <boost/detail/workaround.hpp>
  33:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** // In order to avoid circular dependencies with Boost.TR1
  34:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** // we make sure that our include of <memory> doesn't try to
  35:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** // pull in the TR1 headers: that's why we use this header 
  36:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** // rather than including <memory> directly:
  37:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #include <boost/config/no_tr1/memory.hpp>  // std::auto_ptr
  38:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #include <functional>       // std::less
  39:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
  40:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #ifdef BOOST_NO_EXCEPTIONS
  41:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** # include <new>              // std::bad_alloc
  42:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
  43:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
  44:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #include <boost/core/addressof.hpp>
  45:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
  46:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined( BOOST_SP_DISABLE_DEPRECATED )
  47:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #pragma GCC diagnostic push
  48:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  49:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
  50:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
  51:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** namespace boost
  52:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** {
  53:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
  54:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** namespace movelib
  55:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** {
  56:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
  57:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     template< class T, class D > class unique_ptr;
  58:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
  59:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** } // namespace movelib
  60:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
  61:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** namespace detail
  62:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** {
  63:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
  64:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
  65:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
  66:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** int const shared_count_id = 0x2C35F101;
  67:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** int const   weak_count_id = 0x298C38A4;
  68:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
  69:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
  70:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
  71:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** struct sp_nothrow_tag {};
  72:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
  73:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** template< class D > struct sp_inplace_tag
  74:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** {
  75:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** };
  76:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
  77:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** template< class T > class sp_reference_wrapper
  78:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** { 
  79:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** public:
  80:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
  81:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     explicit sp_reference_wrapper( T & t): t_( boost::addressof( t ) )
  82:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     {
  83:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
  84:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
  85:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     template< class Y > void operator()( Y * p ) const
  86:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     {
  87:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         (*t_)( p );
  88:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
GAS LISTING /tmp/ccvmoMuv.s 			page 269


  89:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
  90:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** private:
  91:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
  92:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     T * t_;
  93:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** };
  94:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
  95:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** template< class D > struct sp_convert_reference
  96:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** {
  97:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     typedef D type;
  98:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** };
  99:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 100:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** template< class D > struct sp_convert_reference< D& >
 101:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** {
 102:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     typedef sp_reference_wrapper< D > type;
 103:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** };
 104:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 105:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** class weak_count;
 106:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 107:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** class shared_count
 108:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** {
 109:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** private:
 110:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 111:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     sp_counted_base * pi_;
 112:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 113:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 114:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     int id_;
 115:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 116:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 117:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     friend class weak_count;
 118:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 119:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** public:
 120:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 121:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     shared_count(): pi_(0) // nothrow
 122:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 123:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         , id_(shared_count_id)
 124:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 125:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     {
 126:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 127:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 128:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     template<class Y> explicit shared_count( Y * p ): pi_( 0 )
 129:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 130:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         , id_(shared_count_id)
 131:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 132:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     {
 133:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #ifndef BOOST_NO_EXCEPTIONS
 134:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 135:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         try
 136:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         {
 137:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             pi_ = new sp_counted_impl_p<Y>( p );
 138:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 139:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         catch(...)
 140:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         {
 141:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             boost::checked_delete( p );
 142:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             throw;
 143:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 144:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 145:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #else
GAS LISTING /tmp/ccvmoMuv.s 			page 270


 146:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 147:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         pi_ = new sp_counted_impl_p<Y>( p );
 148:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 149:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         if( pi_ == 0 )
 150:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         {
 151:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             boost::checked_delete( p );
 152:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             boost::throw_exception( std::bad_alloc() );
 153:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 154:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 155:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 156:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 157:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 158:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined( BOOST_MSVC ) && BOOST_WORKAROUND( BOOST_MSVC, <= 1200 )
 159:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     template<class Y, class D> shared_count( Y * p, D d ): pi_(0)
 160:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #else
 161:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     template<class P, class D> shared_count( P p, D d ): pi_(0)
 162:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 163:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 164:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         , id_(shared_count_id)
 165:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 166:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     {
 167:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined( BOOST_MSVC ) && BOOST_WORKAROUND( BOOST_MSVC, <= 1200 )
 168:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         typedef Y* P;
 169:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 170:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #ifndef BOOST_NO_EXCEPTIONS
 171:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 172:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         try
 173:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         {
 174:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             pi_ = new sp_counted_impl_pd<P, D>(p, d);
 175:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 176:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         catch(...)
 177:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         {
 178:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             d(p); // delete p
 179:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             throw;
 180:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 181:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 182:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #else
 183:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 184:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         pi_ = new sp_counted_impl_pd<P, D>(p, d);
 185:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 186:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         if(pi_ == 0)
 187:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         {
 188:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             d(p); // delete p
 189:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             boost::throw_exception(std::bad_alloc());
 190:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 191:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 192:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 193:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 194:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 195:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if !defined( BOOST_NO_FUNCTION_TEMPLATE_ORDERING )
 196:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 197:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     template< class P, class D > shared_count( P p, sp_inplace_tag<D> ): pi_( 0 )
 198:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 199:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         , id_(shared_count_id)
 200:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 201:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     {
 202:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #ifndef BOOST_NO_EXCEPTIONS
GAS LISTING /tmp/ccvmoMuv.s 			page 271


 203:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 204:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         try
 205:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         {
 206:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             pi_ = new sp_counted_impl_pd< P, D >( p );
 207:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 208:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         catch( ... )
 209:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         {
 210:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             D::operator_fn( p ); // delete p
 211:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             throw;
 212:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 213:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 214:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #else
 215:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 216:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         pi_ = new sp_counted_impl_pd< P, D >( p );
 217:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 218:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         if( pi_ == 0 )
 219:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         {
 220:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             D::operator_fn( p ); // delete p
 221:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             boost::throw_exception( std::bad_alloc() );
 222:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 223:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 224:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif // #ifndef BOOST_NO_EXCEPTIONS
 225:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 226:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 227:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif // !defined( BOOST_NO_FUNCTION_TEMPLATE_ORDERING )
 228:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 229:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     template<class P, class D, class A> shared_count( P p, D d, A a ): pi_( 0 )
 230:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 231:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         , id_(shared_count_id)
 232:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 233:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     {
 234:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         typedef sp_counted_impl_pda<P, D, A> impl_type;
 235:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 236:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if !defined( BOOST_NO_CXX11_ALLOCATOR )
 237:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 238:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         typedef typename std::allocator_traits<A>::template rebind_alloc< impl_type > A2;
 239:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 240:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #else
 241:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 242:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         typedef typename A::template rebind< impl_type >::other A2;
 243:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 244:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 245:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 246:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         A2 a2( a );
 247:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 248:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #ifndef BOOST_NO_EXCEPTIONS
 249:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 250:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         try
 251:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         {
 252:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if !defined( BOOST_NO_CXX11_ALLOCATOR )
 253:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 254:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             impl_type * pi = std::allocator_traits<A2>::allocate( a2, 1 );
 255:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             pi_ = pi;
 256:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             std::allocator_traits<A2>::construct( a2, pi, p, d, a );
 257:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 258:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #else
 259:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 272


 260:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             pi_ = a2.allocate( 1, static_cast< impl_type* >( 0 ) );
 261:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             ::new( static_cast< void* >( pi_ ) ) impl_type( p, d, a );
 262:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 263:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 264:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 265:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         catch(...)
 266:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         {
 267:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             d( p );
 268:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 269:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             if( pi_ != 0 )
 270:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             {
 271:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****                 a2.deallocate( static_cast< impl_type* >( pi_ ), 1 );
 272:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             }
 273:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 274:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             throw;
 275:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 276:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 277:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #else
 278:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 279:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if !defined( BOOST_NO_CXX11_ALLOCATOR )
 280:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 281:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         impl_type * pi = std::allocator_traits<A2>::allocate( a2, 1 );
 282:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         pi_ = pi;
 283:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 284:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #else
 285:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 286:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         pi_ = a2.allocate( 1, static_cast< impl_type* >( 0 ) );
 287:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 288:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 289:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 290:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         if( pi_ != 0 )
 291:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         {
 292:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if !defined( BOOST_NO_CXX11_ALLOCATOR )
 293:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 294:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             std::allocator_traits<A2>::construct( a2, pi, p, d, a );
 295:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 296:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #else
 297:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 298:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             ::new( static_cast< void* >( pi_ ) ) impl_type( p, d, a );
 299:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 300:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 301:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 302:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         else
 303:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         {
 304:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             d( p );
 305:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             boost::throw_exception( std::bad_alloc() );
 306:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 307:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 308:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 309:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 310:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 311:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if !defined( BOOST_NO_FUNCTION_TEMPLATE_ORDERING )
 312:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 313:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     template< class P, class D, class A > shared_count( P p, sp_inplace_tag< D >, A a ): pi_( 0 )
 314:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 315:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         , id_(shared_count_id)
 316:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
GAS LISTING /tmp/ccvmoMuv.s 			page 273


 317:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     {
 318:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         typedef sp_counted_impl_pda< P, D, A > impl_type;
 319:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 320:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if !defined( BOOST_NO_CXX11_ALLOCATOR )
 321:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 322:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         typedef typename std::allocator_traits<A>::template rebind_alloc< impl_type > A2;
 323:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 324:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #else
 325:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 326:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         typedef typename A::template rebind< impl_type >::other A2;
 327:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 328:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 329:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 330:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         A2 a2( a );
 331:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 332:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #ifndef BOOST_NO_EXCEPTIONS
 333:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 334:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         try
 335:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         {
 336:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if !defined( BOOST_NO_CXX11_ALLOCATOR )
 337:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 338:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             impl_type * pi = std::allocator_traits<A2>::allocate( a2, 1 );
 339:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             pi_ = pi;
 340:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             std::allocator_traits<A2>::construct( a2, pi, p, a );
 341:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 342:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #else
 343:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 344:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             pi_ = a2.allocate( 1, static_cast< impl_type* >( 0 ) );
 345:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             ::new( static_cast< void* >( pi_ ) ) impl_type( p, a );
 346:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 347:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 348:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 349:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         catch(...)
 350:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         {
 351:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             D::operator_fn( p );
 352:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 353:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             if( pi_ != 0 )
 354:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             {
 355:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****                 a2.deallocate( static_cast< impl_type* >( pi_ ), 1 );
 356:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             }
 357:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 358:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             throw;
 359:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 360:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 361:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #else
 362:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 363:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if !defined( BOOST_NO_CXX11_ALLOCATOR )
 364:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 365:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         impl_type * pi = std::allocator_traits<A2>::allocate( a2, 1 );
 366:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         pi_ = pi;
 367:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 368:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #else
 369:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 370:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         pi_ = a2.allocate( 1, static_cast< impl_type* >( 0 ) );
 371:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 372:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 373:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 274


 374:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         if( pi_ != 0 )
 375:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         {
 376:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if !defined( BOOST_NO_CXX11_ALLOCATOR )
 377:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 378:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             std::allocator_traits<A2>::construct( a2, pi, p, a );
 379:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 380:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #else
 381:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 382:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             ::new( static_cast< void* >( pi_ ) ) impl_type( p, a );
 383:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 384:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 385:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 386:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         else
 387:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         {
 388:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             D::operator_fn( p );
 389:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             boost::throw_exception( std::bad_alloc() );
 390:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 391:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 392:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif // #ifndef BOOST_NO_EXCEPTIONS
 393:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 394:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 395:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif // !defined( BOOST_NO_FUNCTION_TEMPLATE_ORDERING )
 396:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 397:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #ifndef BOOST_NO_AUTO_PTR
 398:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 399:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     // auto_ptr<Y> is special cased to provide the strong guarantee
 400:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 401:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     template<class Y>
 402:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     explicit shared_count( std::auto_ptr<Y> & r ): pi_( new sp_counted_impl_p<Y>( r.get() ) )
 403:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 404:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         , id_(shared_count_id)
 405:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 406:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     {
 407:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #ifdef BOOST_NO_EXCEPTIONS
 408:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 409:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         if( pi_ == 0 )
 410:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         {
 411:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             boost::throw_exception(std::bad_alloc());
 412:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 413:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 414:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 415:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 416:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         r.release();
 417:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 418:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 419:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif 
 420:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 421:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if !defined( BOOST_NO_CXX11_SMART_PTR )
 422:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 423:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     template<class Y, class D>
 424:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     explicit shared_count( std::unique_ptr<Y, D> & r ): pi_( 0 )
 425:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 426:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         , id_(shared_count_id)
 427:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 428:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     {
 429:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         typedef typename sp_convert_reference<D>::type D2;
 430:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 275


 431:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         D2 d2( r.get_deleter() );
 432:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         pi_ = new sp_counted_impl_pd< typename std::unique_ptr<Y, D>::pointer, D2 >( r.get(), d2 );
 433:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 434:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #ifdef BOOST_NO_EXCEPTIONS
 435:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 436:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         if( pi_ == 0 )
 437:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         {
 438:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             boost::throw_exception( std::bad_alloc() );
 439:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 440:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 441:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 442:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 443:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         r.release();
 444:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 445:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 446:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 447:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 448:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     template<class Y, class D>
 449:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     explicit shared_count( boost::movelib::unique_ptr<Y, D> & r ): pi_( 0 )
 450:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 451:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         , id_(shared_count_id)
 452:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 453:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     {
 454:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         typedef typename sp_convert_reference<D>::type D2;
 455:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 456:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         D2 d2( r.get_deleter() );
 457:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         pi_ = new sp_counted_impl_pd< typename boost::movelib::unique_ptr<Y, D>::pointer, D2 >( r.g
 458:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 459:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #ifdef BOOST_NO_EXCEPTIONS
 460:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 461:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         if( pi_ == 0 )
 462:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         {
 463:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             boost::throw_exception( std::bad_alloc() );
 464:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 465:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 466:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 467:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 468:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         r.release();
 469:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 470:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 471:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     ~shared_count() // nothrow
 472:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     {
 473:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         if( pi_ != 0 ) pi_->release();
 474:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 475:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         id_ = 0;
 476:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 477:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 478:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 479:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     shared_count(shared_count const & r): pi_(r.pi_) // nothrow
 3103              		.loc 28 479 0
 3104 00c3 498B4424 		movq	48(%r12), %rax
 3104      30
 3105              	.LBE13552:
 3106              	.LBE13551:
 405:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 3107              		.loc 27 405 0
 3108 00c8 49895D00 		movq	%rbx, 0(%r13)
GAS LISTING /tmp/ccvmoMuv.s 			page 276


 3109              	.LVL286:
 3110              	.LBB13558:
 3111              	.LBB13557:
 480:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 481:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         , id_(shared_count_id)
 482:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 483:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     {
 484:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         if( pi_ != 0 ) pi_->add_ref_copy();
 3112              		.loc 28 484 0
 3113 00cc 4885C0   		testq	%rax, %rax
 479:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 3114              		.loc 28 479 0
 3115 00cf 49894508 		movq	%rax, 8(%r13)
 3116              		.loc 28 484 0
 3117 00d3 7404     		je	.L174
 3118              	.LVL287:
 3119              	.LBB13553:
 3120              	.LBB13554:
 3121              	.LBB13555:
 3122              	.LBB13556:
  66:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** }
 3123              		.loc 1 66 0
 3124              	#APP
 3125              	# 66 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 3126              		lock
 3127              		incl 8(%rax)
 3128              	# 0 "" 2
 3129              	.LVL288:
 3130              	#NO_APP
 3131              	.L174:
 3132              	.LBE13556:
 3133              	.LBE13555:
 3134              	.LBE13554:
 3135              	.LBE13553:
 3136              	.LBE13557:
 3137              	.LBE13558:
 3138              	.LBE13550:
 3139              	.LBE13549:
 3140              	.LBE13541:
 128:/usr/include/boost/exception/info.hpp **** 
 3141              		.loc 3 128 0
 3142 00d9 5B       		popq	%rbx
 3143              		.cfi_remember_state
 3144              		.cfi_def_cfa_offset 40
 3145 00da 4C89E8   		movq	%r13, %rax
 3146 00dd 5D       		popq	%rbp
 3147              		.cfi_def_cfa_offset 32
 3148 00de 415C     		popq	%r12
 3149              		.cfi_def_cfa_offset 24
 3150              	.LVL289:
 3151 00e0 415D     		popq	%r13
 3152              		.cfi_def_cfa_offset 16
 3153              	.LVL290:
 3154 00e2 415E     		popq	%r14
 3155              		.cfi_def_cfa_offset 8
 3156              	.LVL291:
 3157 00e4 C3       		ret
GAS LISTING /tmp/ccvmoMuv.s 			page 277


 3158              	.LVL292:
 3159              		.p2align 4,,10
 3160 00e5 0F1F00   		.p2align 3
 3161              	.L200:
 3162              		.cfi_restore_state
 3163              	.LBB13560:
 3164              	.LBB13539:
 3165              	.LBB13537:
 3166              	.LBB13535:
 3167              	.LBB13525:
 3168              	.LBB13524:
 3169              	.LBB13523:
 3170              	.LBB13522:
 3171              	.LBB13521:
 3172              	.LBB13520:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 3173              		.loc 26 117 0
 3174 00e8 4839EF   		cmpq	%rbp, %rdi
 3175 00eb 0F92C0   		setb	%al
 116:/usr/include/c++/6/typeinfo **** 	? __name < __arg.__name
 3176              		.loc 26 116 0
 3177 00ee 807D002A 		cmpb	$42, 0(%rbp)
 3178 00f2 0F8555FF 		jne	.L178
 3178      FFFF
 3179 00f8 E95BFFFF 		jmp	.L179
 3179      FF
 3180              	.LVL293:
 3181 00fd 0F1F00   		.p2align 4,,10
 3182              		.p2align 3
 3183              	.L187:
 3184              	.LBE13520:
 3185              	.LBE13521:
 3186              	.LBE13522:
 3187              	.LBE13523:
 3188              	.LBE13524:
 3189              	.LBE13525:
 3190              	.LBE13535:
 3191              	.LBE13537:
 3192              	.LBE13539:
 3193              	.LBE13560:
 3194              	.LBB13561:
 123:/usr/include/boost/exception/info.hpp **** #endif
 3195              		.loc 3 123 0
 3196 0100 488D0D00 		leaq	_ZZNK5boost16exception_detail25error_info_container_impl3getERKNS0_10type_info_EE19__PRETTY_F
 3196      000000
 3197 0107 488D3500 		leaq	.LC11(%rip), %rsi
 3197      000000
 3198 010e 488D3D00 		leaq	.LC12(%rip), %rdi
 3198      000000
 3199 0115 BA7B0000 		movl	$123, %edx
 3199      00
 3200 011a E8000000 		call	__assert_fail@PLT
 3200      00
 3201              	.LVL294:
 3202 011f 90       		.p2align 4,,10
 3203              		.p2align 3
 3204              	.L175:
GAS LISTING /tmp/ccvmoMuv.s 			page 278


 3205              	.LBE13561:
 128:/usr/include/boost/exception/info.hpp **** 
 3206              		.loc 3 128 0
 3207 0120 5B       		popq	%rbx
 3208              		.cfi_remember_state
 3209              		.cfi_def_cfa_offset 40
 3210 0121 4C89E8   		movq	%r13, %rax
 3211              	.LBB13562:
 3212              	.LBB13563:
 347:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 3213              		.loc 27 347 0
 3214 0124 49C74500 		movq	$0, 0(%r13)
 3214      00000000 
 3215              	.LVL295:
 3216              	.LBB13564:
 3217              	.LBB13565:
 121:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 3218              		.loc 28 121 0
 3219 012c 49C74508 		movq	$0, 8(%r13)
 3219      00000000 
 3220              	.LVL296:
 3221              	.LBE13565:
 3222              	.LBE13564:
 3223              	.LBE13563:
 3224              	.LBE13562:
 128:/usr/include/boost/exception/info.hpp **** 
 3225              		.loc 3 128 0
 3226 0134 5D       		popq	%rbp
 3227              		.cfi_def_cfa_offset 32
 3228 0135 415C     		popq	%r12
 3229              		.cfi_def_cfa_offset 24
 3230 0137 415D     		popq	%r13
 3231              		.cfi_def_cfa_offset 16
 3232              	.LVL297:
 3233 0139 415E     		popq	%r14
 3234              		.cfi_def_cfa_offset 8
 3235 013b C3       		ret
 3236              	.LVL298:
 3237 013c 0F1F4000 		.p2align 4,,10
 3238              		.p2align 3
 3239              	.L202:
 3240              		.cfi_restore_state
 3241              	.LBB13566:
 3242              	.LBB13540:
 3243              	.LBB13538:
 3244              	.LBB13536:
 3245              	.LBB13534:
 3246              	.LBB13533:
 3247              	.LBB13532:
 3248              	.LBB13531:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 3249              		.loc 26 117 0
 3250 0140 4839EE   		cmpq	%rbp, %rsi
 3251 0143 0F97C0   		seta	%al
 3252              	.LVL299:
 116:/usr/include/c++/6/typeinfo **** 	? __name < __arg.__name
 3253              		.loc 26 116 0
GAS LISTING /tmp/ccvmoMuv.s 			page 279


 3254 0146 803E2A   		cmpb	$42, (%rsi)
 3255 0149 0F8532FF 		jne	.L182
 3255      FFFF
 3256 014f E938FFFF 		jmp	.L183
 3256      FF
 3257              	.LVL300:
 3258              	.L203:
 3259              	.LBE13531:
 3260              	.LBE13532:
 3261              	.LBE13533:
 3262              	.LBE13534:
 3263              	.LBE13536:
 3264              	.LBE13538:
 3265              	.LBE13540:
 3266              	.LBE13566:
 3267              	.LBB13567:
 3268              	.LBB13559:
 3269              	.LBB13546:
 3270              	.LBB13544:
 3271              	.LBB13545:
 3272              		.loc 27 703 0
 3273 0154 488D0D00 		leaq	_ZZNK5boost10shared_ptrINS_16exception_detail15error_info_baseEEdeEvE19__PRETTY_FUNCTION__(%r
 3273      000000
 3274 015b 488D3500 		leaq	.LC9(%rip), %rsi
 3274      000000
 3275 0162 488D3D00 		leaq	.LC10(%rip), %rdi
 3275      000000
 3276 0169 BABF0200 		movl	$703, %edx
 3276      00
 3277 016e E8000000 		call	__assert_fail@PLT
 3277      00
 3278              	.LVL301:
 3279              	.LBE13545:
 3280              	.LBE13544:
 3281              	.LBE13546:
 3282              	.LBE13559:
 3283              	.LBE13567:
 3284              		.cfi_endproc
 3285              	.LFE9847:
 3287              		.section	.text._ZN5boost13exception_ptrD2Ev,"axG",@progbits,_ZN5boost13exception_ptrD5Ev,comdat
 3288              		.align 2
 3289              		.p2align 4,,15
 3290              		.weak	_ZN5boost13exception_ptrD2Ev
 3292              	_ZN5boost13exception_ptrD2Ev:
 3293              	.LFB9927:
 3294              		.file 29 "/usr/include/boost/exception/detail/exception_ptr.hpp"
   1:/usr/include/boost/exception/detail/exception_ptr.hpp **** //Copyright (c) 2006-2009 Emil Dotchevski and Reverge Studios, Inc.
   2:/usr/include/boost/exception/detail/exception_ptr.hpp **** 
   3:/usr/include/boost/exception/detail/exception_ptr.hpp **** //Distributed under the Boost Software License, Version 1.0. (See accompanying
   4:/usr/include/boost/exception/detail/exception_ptr.hpp **** //file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
   5:/usr/include/boost/exception/detail/exception_ptr.hpp **** 
   6:/usr/include/boost/exception/detail/exception_ptr.hpp **** #ifndef UUID_618474C2DE1511DEB74A388C56D89593
   7:/usr/include/boost/exception/detail/exception_ptr.hpp **** #define UUID_618474C2DE1511DEB74A388C56D89593
   8:/usr/include/boost/exception/detail/exception_ptr.hpp **** #if (__GNUC__*100+__GNUC_MINOR__>301) && !defined(BOOST_EXCEPTION_ENABLE_WARNINGS)
   9:/usr/include/boost/exception/detail/exception_ptr.hpp **** #pragma GCC system_header
  10:/usr/include/boost/exception/detail/exception_ptr.hpp **** #endif
  11:/usr/include/boost/exception/detail/exception_ptr.hpp **** #if defined(_MSC_VER) && !defined(BOOST_EXCEPTION_ENABLE_WARNINGS)
GAS LISTING /tmp/ccvmoMuv.s 			page 280


  12:/usr/include/boost/exception/detail/exception_ptr.hpp **** #pragma warning(push,1)
  13:/usr/include/boost/exception/detail/exception_ptr.hpp **** #endif
  14:/usr/include/boost/exception/detail/exception_ptr.hpp **** 
  15:/usr/include/boost/exception/detail/exception_ptr.hpp **** #include <boost/config.hpp>
  16:/usr/include/boost/exception/detail/exception_ptr.hpp **** #ifdef BOOST_NO_EXCEPTIONS
  17:/usr/include/boost/exception/detail/exception_ptr.hpp **** #error This header requires exception handling to be enabled.
  18:/usr/include/boost/exception/detail/exception_ptr.hpp **** #endif
  19:/usr/include/boost/exception/detail/exception_ptr.hpp **** #include <boost/exception/exception.hpp>
  20:/usr/include/boost/exception/detail/exception_ptr.hpp **** #include <boost/exception/info.hpp>
  21:/usr/include/boost/exception/detail/exception_ptr.hpp **** #include <boost/exception/diagnostic_information.hpp>
  22:/usr/include/boost/exception/detail/exception_ptr.hpp **** #include <boost/exception/detail/type_info.hpp>
  23:/usr/include/boost/exception/detail/exception_ptr.hpp **** #include <boost/exception/detail/clone_current_exception.hpp>
  24:/usr/include/boost/exception/detail/exception_ptr.hpp **** #ifndef BOOST_NO_RTTI
  25:/usr/include/boost/exception/detail/exception_ptr.hpp **** #include <boost/core/demangle.hpp>
  26:/usr/include/boost/exception/detail/exception_ptr.hpp **** #endif
  27:/usr/include/boost/exception/detail/exception_ptr.hpp **** #include <boost/shared_ptr.hpp>
  28:/usr/include/boost/exception/detail/exception_ptr.hpp **** #include <stdexcept>
  29:/usr/include/boost/exception/detail/exception_ptr.hpp **** #include <new>
  30:/usr/include/boost/exception/detail/exception_ptr.hpp **** #include <ios>
  31:/usr/include/boost/exception/detail/exception_ptr.hpp **** #include <stdlib.h>
  32:/usr/include/boost/exception/detail/exception_ptr.hpp **** 
  33:/usr/include/boost/exception/detail/exception_ptr.hpp **** namespace
  34:/usr/include/boost/exception/detail/exception_ptr.hpp **** boost
  35:/usr/include/boost/exception/detail/exception_ptr.hpp ****     {
  36:/usr/include/boost/exception/detail/exception_ptr.hpp ****     class exception_ptr;
  37:/usr/include/boost/exception/detail/exception_ptr.hpp ****     BOOST_NORETURN void rethrow_exception( exception_ptr const & );
  38:/usr/include/boost/exception/detail/exception_ptr.hpp ****     exception_ptr current_exception();
  39:/usr/include/boost/exception/detail/exception_ptr.hpp **** 
  40:/usr/include/boost/exception/detail/exception_ptr.hpp ****     class
  41:/usr/include/boost/exception/detail/exception_ptr.hpp ****     exception_ptr
 3295              		.loc 29 41 0
 3296              		.cfi_startproc
 3297              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 3298              		.cfi_lsda 0x1b,.LLSDA9927
 3299              	.LVL302:
 3300 0000 55       		pushq	%rbp
 3301              		.cfi_def_cfa_offset 16
 3302              		.cfi_offset 6, -16
 3303 0001 53       		pushq	%rbx
 3304              		.cfi_def_cfa_offset 24
 3305              		.cfi_offset 3, -24
 3306 0002 4883EC08 		subq	$8, %rsp
 3307              		.cfi_def_cfa_offset 32
 3308              	.LBB13586:
 3309              	.LBB13587:
 3310              	.LBB13588:
 473:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 3311              		.loc 28 473 0
 3312 0006 488B5F08 		movq	8(%rdi), %rbx
 3313 000a 4885DB   		testq	%rbx, %rbx
 3314 000d 7411     		je	.L204
 3315              	.LVL303:
 3316              	.LBB13589:
 3317              	.LBB13590:
 3318              	.LBB13591:
 3319              	.LBB13592:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 281


 3320              		.loc 1 50 0
 3321 000f BDFFFFFF 		movl	$-1, %ebp
 3321      FF
 3322 0014 89E8     		movl	%ebp, %eax
 3323              	#APP
 3324              	# 50 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 3325              		lock
 3326              		xadd %eax, 8(%rbx)
 3327              	# 0 "" 2
 3328              	.LVL304:
 3329              	#NO_APP
 3330              	.LBE13592:
 3331              	.LBE13591:
 144:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
 3332              		.loc 1 144 0
 3333 001b 83F801   		cmpl	$1, %eax
 3334 001e 7410     		je	.L210
 3335              	.LVL305:
 3336              	.L204:
 3337              	.LBE13590:
 3338              	.LBE13589:
 3339              	.LBE13588:
 3340              	.LBE13587:
 3341              	.LBE13586:
 3342              		.loc 29 41 0
 3343 0020 4883C408 		addq	$8, %rsp
 3344              		.cfi_remember_state
 3345              		.cfi_def_cfa_offset 24
 3346 0024 5B       		popq	%rbx
 3347              		.cfi_def_cfa_offset 16
 3348 0025 5D       		popq	%rbp
 3349              		.cfi_def_cfa_offset 8
 3350 0026 C3       		ret
 3351              	.LVL306:
 3352 0027 660F1F84 		.p2align 4,,10
 3352      00000000 
 3352      00
 3353              		.p2align 3
 3354              	.L210:
 3355              		.cfi_restore_state
 3356              	.LBB13641:
 3357              	.LBB13636:
 3358              	.LBB13631:
 3359              	.LBB13626:
 3360              	.LBB13621:
 3361              	.LBB13593:
 3362              	.LBB13594:
 146:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****             weak_release();
 3363              		.loc 1 146 0
 3364 0030 488B03   		movq	(%rbx), %rax
 3365 0033 4889DF   		movq	%rbx, %rdi
 3366              	.LVL307:
 3367 0036 FF5010   		call	*16(%rax)
 3368              	.LVL308:
 3369              	.LBB13595:
 3370              	.LBB13596:
 3371              	.LBB13597:
GAS LISTING /tmp/ccvmoMuv.s 			page 282


 3372              	.LBB13598:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 3373              		.loc 1 50 0
 3374              	#APP
 3375              	# 50 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 3376              		lock
 3377              		xadd %ebp, 12(%rbx)
 3378              	# 0 "" 2
 3379              	.LVL309:
 3380              	#NO_APP
 3381              	.LBE13598:
 3382              	.LBE13597:
 158:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
 3383              		.loc 1 158 0
 3384 003e 83FD01   		cmpl	$1, %ebp
 3385 0041 75DD     		jne	.L204
 3386              		.loc 1 160 0
 3387 0043 488B03   		movq	(%rbx), %rax
 3388 0046 488D0D00 		leaq	_ZN5boost6detail15sp_counted_base7destroyEv(%rip), %rcx
 3388      000000
 3389 004d 488B5018 		movq	24(%rax), %rdx
 3390 0051 4839CA   		cmpq	%rcx, %rdx
 3391 0054 750F     		jne	.L208
 3392              	.LVL310:
 3393              	.LBB13599:
 3394              	.LBB13600:
 126:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     }
 3395              		.loc 1 126 0
 3396 0056 488B4008 		movq	8(%rax), %rax
 3397              	.LBE13600:
 3398              	.LBE13599:
 3399              	.LBE13596:
 3400              	.LBE13595:
 3401              	.LBE13594:
 3402              	.LBE13593:
 3403              	.LBE13621:
 3404              	.LBE13626:
 3405              	.LBE13631:
 3406              	.LBE13636:
 3407              	.LBE13641:
 3408              		.loc 29 41 0
 3409 005a 4883C408 		addq	$8, %rsp
 3410              		.cfi_remember_state
 3411              		.cfi_def_cfa_offset 24
 3412              	.LBB13642:
 3413              	.LBB13637:
 3414              	.LBB13632:
 3415              	.LBB13627:
 3416              	.LBB13622:
 3417              	.LBB13617:
 3418              	.LBB13613:
 3419              	.LBB13609:
 3420              	.LBB13605:
 3421              	.LBB13603:
 3422              	.LBB13601:
 126:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     }
 3423              		.loc 1 126 0
GAS LISTING /tmp/ccvmoMuv.s 			page 283


 3424 005e 4889DF   		movq	%rbx, %rdi
 3425              	.LBE13601:
 3426              	.LBE13603:
 3427              	.LBE13605:
 3428              	.LBE13609:
 3429              	.LBE13613:
 3430              	.LBE13617:
 3431              	.LBE13622:
 3432              	.LBE13627:
 3433              	.LBE13632:
 3434              	.LBE13637:
 3435              	.LBE13642:
 3436              		.loc 29 41 0
 3437 0061 5B       		popq	%rbx
 3438              		.cfi_def_cfa_offset 16
 3439              	.LVL311:
 3440 0062 5D       		popq	%rbp
 3441              		.cfi_def_cfa_offset 8
 3442              	.LBB13643:
 3443              	.LBB13638:
 3444              	.LBB13633:
 3445              	.LBB13628:
 3446              	.LBB13623:
 3447              	.LBB13618:
 3448              	.LBB13614:
 3449              	.LBB13610:
 3450              	.LBB13606:
 3451              	.LBB13604:
 3452              	.LBB13602:
 126:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     }
 3453              		.loc 1 126 0
 3454 0063 FFE0     		jmp	*%rax
 3455              	.LVL312:
 3456              	.L208:
 3457              		.cfi_restore_state
 3458              	.LBE13602:
 3459              	.LBE13604:
 3460              	.LBE13606:
 3461              	.LBE13610:
 3462              	.LBE13614:
 3463              	.LBE13618:
 3464              	.LBE13623:
 3465              	.LBE13628:
 3466              	.LBE13633:
 3467              	.LBE13638:
 3468              	.LBE13643:
 3469              		.loc 29 41 0
 3470 0065 4883C408 		addq	$8, %rsp
 3471              		.cfi_def_cfa_offset 24
 3472              	.LBB13644:
 3473              	.LBB13639:
 3474              	.LBB13634:
 3475              	.LBB13629:
 3476              	.LBB13624:
 3477              	.LBB13619:
 3478              	.LBB13615:
 3479              	.LBB13611:
GAS LISTING /tmp/ccvmoMuv.s 			page 284


 3480              	.LBB13607:
 3481              		.loc 1 160 0
 3482 0069 4889DF   		movq	%rbx, %rdi
 3483              	.LBE13607:
 3484              	.LBE13611:
 3485              	.LBE13615:
 3486              	.LBE13619:
 3487              	.LBE13624:
 3488              	.LBE13629:
 3489              	.LBE13634:
 3490              	.LBE13639:
 3491              	.LBE13644:
 3492              		.loc 29 41 0
 3493 006c 5B       		popq	%rbx
 3494              		.cfi_def_cfa_offset 16
 3495              	.LVL313:
 3496 006d 5D       		popq	%rbp
 3497              		.cfi_def_cfa_offset 8
 3498              	.LBB13645:
 3499              	.LBB13640:
 3500              	.LBB13635:
 3501              	.LBB13630:
 3502              	.LBB13625:
 3503              	.LBB13620:
 3504              	.LBB13616:
 3505              	.LBB13612:
 3506              	.LBB13608:
 3507              		.loc 1 160 0
 3508 006e FFE2     		jmp	*%rdx
 3509              	.LVL314:
 3510              	.LBE13608:
 3511              	.LBE13612:
 3512              	.LBE13616:
 3513              	.LBE13620:
 3514              	.LBE13625:
 3515              	.LBE13630:
 3516              	.LBE13635:
 3517              	.LBE13640:
 3518              	.LBE13645:
 3519              		.cfi_endproc
 3520              	.LFE9927:
 3521              		.section	.gcc_except_table._ZN5boost13exception_ptrD2Ev,"aG",@progbits,_ZN5boost13exception_ptrD5E
 3522              	.LLSDA9927:
 3523 0000 FF       		.byte	0xff
 3524 0001 FF       		.byte	0xff
 3525 0002 01       		.byte	0x1
 3526 0003 00       		.uleb128 .LLSDACSE9927-.LLSDACSB9927
 3527              	.LLSDACSB9927:
 3528              	.LLSDACSE9927:
 3529              		.section	.text._ZN5boost13exception_ptrD2Ev,"axG",@progbits,_ZN5boost13exception_ptrD5Ev,comdat
 3531              		.weak	_ZN5boost13exception_ptrD1Ev
 3532              		.set	_ZN5boost13exception_ptrD1Ev,_ZN5boost13exception_ptrD2Ev
 3533              		.section	.text._ZNK5boost16exception_detail25error_info_container_impl22diagnostic_informationEPKc
 3534              		.align 2
 3535              		.p2align 4,,15
 3536              		.weak	_ZNK5boost16exception_detail25error_info_container_impl22diagnostic_informationEPKc
 3538              	_ZNK5boost16exception_detail25error_info_container_impl22diagnostic_informationEPKc:
GAS LISTING /tmp/ccvmoMuv.s 			page 285


 3539              	.LFB9851:
 131:/usr/include/boost/exception/info.hpp ****                 {
 3540              		.loc 3 131 0
 3541              		.cfi_startproc
 3542              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 3543              		.cfi_lsda 0x1b,.LLSDA9851
 3544              	.LVL315:
 3545 0000 4157     		pushq	%r15
 3546              		.cfi_def_cfa_offset 16
 3547              		.cfi_offset 15, -16
 3548 0002 4156     		pushq	%r14
 3549              		.cfi_def_cfa_offset 24
 3550              		.cfi_offset 14, -24
 3551 0004 4155     		pushq	%r13
 3552              		.cfi_def_cfa_offset 32
 3553              		.cfi_offset 13, -32
 3554 0006 4154     		pushq	%r12
 3555              		.cfi_def_cfa_offset 40
 3556              		.cfi_offset 12, -40
 3557 0008 55       		pushq	%rbp
 3558              		.cfi_def_cfa_offset 48
 3559              		.cfi_offset 6, -48
 3560 0009 53       		pushq	%rbx
 3561              		.cfi_def_cfa_offset 56
 3562              		.cfi_offset 3, -56
 3563 000a 4881EC28 		subq	$552, %rsp
 3563      020000
 3564              		.cfi_def_cfa_offset 608
 3565              	.LBB14032:
 133:/usr/include/boost/exception/info.hpp ****                     {
 3566              		.loc 3 133 0
 3567 0011 4885F6   		testq	%rsi, %rsi
 3568              	.LBE14032:
 131:/usr/include/boost/exception/info.hpp ****                 {
 3569              		.loc 3 131 0
 3570 0014 48897C24 		movq	%rdi, 24(%rsp)
 3570      18
 3571              	.LBB14441:
 133:/usr/include/boost/exception/info.hpp ****                     {
 3572              		.loc 3 133 0
 3573 0019 0F843D04 		je	.L212
 3573      0000
 3574              	.LBB14033:
 3575              	.LBB14034:
 3576              	.LBB14035:
 3577              	.LBB14036:
 3578              	.LBB14037:
 3579              	.LBB14038:
 3580              	.LBB14039:
 3581              		.file 30 "/usr/include/c++/6/bits/basic_ios.h"
   1:/usr/include/c++/6/bits/basic_ios.h **** // Iostreams base classes -*- C++ -*-
   2:/usr/include/c++/6/bits/basic_ios.h **** 
   3:/usr/include/c++/6/bits/basic_ios.h **** // Copyright (C) 1997-2016 Free Software Foundation, Inc.
   4:/usr/include/c++/6/bits/basic_ios.h **** //
   5:/usr/include/c++/6/bits/basic_ios.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/6/bits/basic_ios.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/6/bits/basic_ios.h **** // terms of the GNU General Public License as published by the
GAS LISTING /tmp/ccvmoMuv.s 			page 286


   8:/usr/include/c++/6/bits/basic_ios.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/6/bits/basic_ios.h **** // any later version.
  10:/usr/include/c++/6/bits/basic_ios.h **** 
  11:/usr/include/c++/6/bits/basic_ios.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/6/bits/basic_ios.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/6/bits/basic_ios.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/6/bits/basic_ios.h **** // GNU General Public License for more details.
  15:/usr/include/c++/6/bits/basic_ios.h **** 
  16:/usr/include/c++/6/bits/basic_ios.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/6/bits/basic_ios.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/6/bits/basic_ios.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/6/bits/basic_ios.h **** 
  20:/usr/include/c++/6/bits/basic_ios.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/6/bits/basic_ios.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/6/bits/basic_ios.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/6/bits/basic_ios.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/6/bits/basic_ios.h **** 
  25:/usr/include/c++/6/bits/basic_ios.h **** /** @file bits/basic_ios.h
  26:/usr/include/c++/6/bits/basic_ios.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/6/bits/basic_ios.h ****  *  Do not attempt to use it directly. @headername{ios}
  28:/usr/include/c++/6/bits/basic_ios.h ****  */
  29:/usr/include/c++/6/bits/basic_ios.h **** 
  30:/usr/include/c++/6/bits/basic_ios.h **** #ifndef _BASIC_IOS_H
  31:/usr/include/c++/6/bits/basic_ios.h **** #define _BASIC_IOS_H 1
  32:/usr/include/c++/6/bits/basic_ios.h **** 
  33:/usr/include/c++/6/bits/basic_ios.h **** #pragma GCC system_header
  34:/usr/include/c++/6/bits/basic_ios.h **** 
  35:/usr/include/c++/6/bits/basic_ios.h **** #include <bits/localefwd.h>
  36:/usr/include/c++/6/bits/basic_ios.h **** #include <bits/locale_classes.h>
  37:/usr/include/c++/6/bits/basic_ios.h **** #include <bits/locale_facets.h>
  38:/usr/include/c++/6/bits/basic_ios.h **** #include <bits/streambuf_iterator.h>
  39:/usr/include/c++/6/bits/basic_ios.h **** #include <bits/move.h>
  40:/usr/include/c++/6/bits/basic_ios.h **** 
  41:/usr/include/c++/6/bits/basic_ios.h **** namespace std _GLIBCXX_VISIBILITY(default)
  42:/usr/include/c++/6/bits/basic_ios.h **** {
  43:/usr/include/c++/6/bits/basic_ios.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/c++/6/bits/basic_ios.h **** 
  45:/usr/include/c++/6/bits/basic_ios.h ****   template<typename _Facet>
  46:/usr/include/c++/6/bits/basic_ios.h ****     inline const _Facet&
  47:/usr/include/c++/6/bits/basic_ios.h ****     __check_facet(const _Facet* __f)
  48:/usr/include/c++/6/bits/basic_ios.h ****     {
  49:/usr/include/c++/6/bits/basic_ios.h ****       if (!__f)
  50:/usr/include/c++/6/bits/basic_ios.h **** 	__throw_bad_cast();
  51:/usr/include/c++/6/bits/basic_ios.h ****       return *__f;
  52:/usr/include/c++/6/bits/basic_ios.h ****     }
  53:/usr/include/c++/6/bits/basic_ios.h **** 
  54:/usr/include/c++/6/bits/basic_ios.h ****   /**
  55:/usr/include/c++/6/bits/basic_ios.h ****    *  @brief Template class basic_ios, virtual base class for all
  56:/usr/include/c++/6/bits/basic_ios.h ****    *  stream classes. 
  57:/usr/include/c++/6/bits/basic_ios.h ****    *  @ingroup io
  58:/usr/include/c++/6/bits/basic_ios.h ****    *
  59:/usr/include/c++/6/bits/basic_ios.h ****    *  @tparam _CharT  Type of character stream.
  60:/usr/include/c++/6/bits/basic_ios.h ****    *  @tparam _Traits  Traits for character type, defaults to
  61:/usr/include/c++/6/bits/basic_ios.h ****    *                   char_traits<_CharT>.
  62:/usr/include/c++/6/bits/basic_ios.h ****    *
  63:/usr/include/c++/6/bits/basic_ios.h ****    *  Most of the member functions called dispatched on stream objects
  64:/usr/include/c++/6/bits/basic_ios.h ****    *  (e.g., @c std::cout.foo(bar);) are consolidated in this class.
GAS LISTING /tmp/ccvmoMuv.s 			page 287


  65:/usr/include/c++/6/bits/basic_ios.h ****   */
  66:/usr/include/c++/6/bits/basic_ios.h ****   template<typename _CharT, typename _Traits>
  67:/usr/include/c++/6/bits/basic_ios.h ****     class basic_ios : public ios_base
  68:/usr/include/c++/6/bits/basic_ios.h ****     {
  69:/usr/include/c++/6/bits/basic_ios.h ****     public:
  70:/usr/include/c++/6/bits/basic_ios.h ****       //@{
  71:/usr/include/c++/6/bits/basic_ios.h ****       /**
  72:/usr/include/c++/6/bits/basic_ios.h ****        *  These are standard types.  They permit a standardized way of
  73:/usr/include/c++/6/bits/basic_ios.h ****        *  referring to names of (or names dependent on) the template
  74:/usr/include/c++/6/bits/basic_ios.h ****        *  parameters, which are specific to the implementation.
  75:/usr/include/c++/6/bits/basic_ios.h ****       */
  76:/usr/include/c++/6/bits/basic_ios.h ****       typedef _CharT                                 char_type;
  77:/usr/include/c++/6/bits/basic_ios.h ****       typedef typename _Traits::int_type             int_type;
  78:/usr/include/c++/6/bits/basic_ios.h ****       typedef typename _Traits::pos_type             pos_type;
  79:/usr/include/c++/6/bits/basic_ios.h ****       typedef typename _Traits::off_type             off_type;
  80:/usr/include/c++/6/bits/basic_ios.h ****       typedef _Traits                                traits_type;
  81:/usr/include/c++/6/bits/basic_ios.h ****       //@}
  82:/usr/include/c++/6/bits/basic_ios.h **** 
  83:/usr/include/c++/6/bits/basic_ios.h ****       //@{
  84:/usr/include/c++/6/bits/basic_ios.h ****       /**
  85:/usr/include/c++/6/bits/basic_ios.h ****        *  These are non-standard types.
  86:/usr/include/c++/6/bits/basic_ios.h ****       */
  87:/usr/include/c++/6/bits/basic_ios.h ****       typedef ctype<_CharT>                          __ctype_type;
  88:/usr/include/c++/6/bits/basic_ios.h ****       typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
  89:/usr/include/c++/6/bits/basic_ios.h **** 						     __num_put_type;
  90:/usr/include/c++/6/bits/basic_ios.h ****       typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
  91:/usr/include/c++/6/bits/basic_ios.h **** 						     __num_get_type;
  92:/usr/include/c++/6/bits/basic_ios.h ****       //@}
  93:/usr/include/c++/6/bits/basic_ios.h **** 
  94:/usr/include/c++/6/bits/basic_ios.h ****       // Data members:
  95:/usr/include/c++/6/bits/basic_ios.h ****     protected:
  96:/usr/include/c++/6/bits/basic_ios.h ****       basic_ostream<_CharT, _Traits>*                _M_tie;
  97:/usr/include/c++/6/bits/basic_ios.h ****       mutable char_type                              _M_fill;
  98:/usr/include/c++/6/bits/basic_ios.h ****       mutable bool                                   _M_fill_init;
  99:/usr/include/c++/6/bits/basic_ios.h ****       basic_streambuf<_CharT, _Traits>*              _M_streambuf;
 100:/usr/include/c++/6/bits/basic_ios.h **** 
 101:/usr/include/c++/6/bits/basic_ios.h ****       // Cached use_facet<ctype>, which is based on the current locale info.
 102:/usr/include/c++/6/bits/basic_ios.h ****       const __ctype_type*                            _M_ctype;
 103:/usr/include/c++/6/bits/basic_ios.h ****       // For ostream.
 104:/usr/include/c++/6/bits/basic_ios.h ****       const __num_put_type*                          _M_num_put;
 105:/usr/include/c++/6/bits/basic_ios.h ****       // For istream.
 106:/usr/include/c++/6/bits/basic_ios.h ****       const __num_get_type*                          _M_num_get;
 107:/usr/include/c++/6/bits/basic_ios.h **** 
 108:/usr/include/c++/6/bits/basic_ios.h ****     public:
 109:/usr/include/c++/6/bits/basic_ios.h ****       //@{
 110:/usr/include/c++/6/bits/basic_ios.h ****       /**
 111:/usr/include/c++/6/bits/basic_ios.h ****        *  @brief  The quick-and-easy status check.
 112:/usr/include/c++/6/bits/basic_ios.h ****        *
 113:/usr/include/c++/6/bits/basic_ios.h ****        *  This allows you to write constructs such as
 114:/usr/include/c++/6/bits/basic_ios.h ****        *  <code>if (!a_stream) ...</code> and <code>while (a_stream) ...</code>
 115:/usr/include/c++/6/bits/basic_ios.h ****       */
 116:/usr/include/c++/6/bits/basic_ios.h **** #if __cplusplus >= 201103L
 117:/usr/include/c++/6/bits/basic_ios.h ****       explicit operator bool() const
 118:/usr/include/c++/6/bits/basic_ios.h ****       { return !this->fail(); }
 119:/usr/include/c++/6/bits/basic_ios.h **** #else
 120:/usr/include/c++/6/bits/basic_ios.h ****       operator void*() const
 121:/usr/include/c++/6/bits/basic_ios.h ****       { return this->fail() ? 0 : const_cast<basic_ios*>(this); }
GAS LISTING /tmp/ccvmoMuv.s 			page 288


 122:/usr/include/c++/6/bits/basic_ios.h **** #endif
 123:/usr/include/c++/6/bits/basic_ios.h **** 
 124:/usr/include/c++/6/bits/basic_ios.h ****       bool
 125:/usr/include/c++/6/bits/basic_ios.h ****       operator!() const
 126:/usr/include/c++/6/bits/basic_ios.h ****       { return this->fail(); }
 127:/usr/include/c++/6/bits/basic_ios.h ****       //@}
 128:/usr/include/c++/6/bits/basic_ios.h **** 
 129:/usr/include/c++/6/bits/basic_ios.h ****       /**
 130:/usr/include/c++/6/bits/basic_ios.h ****        *  @brief  Returns the error state of the stream buffer.
 131:/usr/include/c++/6/bits/basic_ios.h ****        *  @return  A bit pattern (well, isn't everything?)
 132:/usr/include/c++/6/bits/basic_ios.h ****        *
 133:/usr/include/c++/6/bits/basic_ios.h ****        *  See std::ios_base::iostate for the possible bit values.  Most
 134:/usr/include/c++/6/bits/basic_ios.h ****        *  users will call one of the interpreting wrappers, e.g., good().
 135:/usr/include/c++/6/bits/basic_ios.h ****       */
 136:/usr/include/c++/6/bits/basic_ios.h ****       iostate
 137:/usr/include/c++/6/bits/basic_ios.h ****       rdstate() const
 138:/usr/include/c++/6/bits/basic_ios.h ****       { return _M_streambuf_state; }
 139:/usr/include/c++/6/bits/basic_ios.h **** 
 140:/usr/include/c++/6/bits/basic_ios.h ****       /**
 141:/usr/include/c++/6/bits/basic_ios.h ****        *  @brief  [Re]sets the error state.
 142:/usr/include/c++/6/bits/basic_ios.h ****        *  @param  __state  The new state flag(s) to set.
 143:/usr/include/c++/6/bits/basic_ios.h ****        *
 144:/usr/include/c++/6/bits/basic_ios.h ****        *  See std::ios_base::iostate for the possible bit values.  Most
 145:/usr/include/c++/6/bits/basic_ios.h ****        *  users will not need to pass an argument.
 146:/usr/include/c++/6/bits/basic_ios.h ****       */
 147:/usr/include/c++/6/bits/basic_ios.h ****       void
 148:/usr/include/c++/6/bits/basic_ios.h ****       clear(iostate __state = goodbit);
 149:/usr/include/c++/6/bits/basic_ios.h **** 
 150:/usr/include/c++/6/bits/basic_ios.h ****       /**
 151:/usr/include/c++/6/bits/basic_ios.h ****        *  @brief  Sets additional flags in the error state.
 152:/usr/include/c++/6/bits/basic_ios.h ****        *  @param  __state  The additional state flag(s) to set.
 153:/usr/include/c++/6/bits/basic_ios.h ****        *
 154:/usr/include/c++/6/bits/basic_ios.h ****        *  See std::ios_base::iostate for the possible bit values.
 155:/usr/include/c++/6/bits/basic_ios.h ****       */
 156:/usr/include/c++/6/bits/basic_ios.h ****       void
 157:/usr/include/c++/6/bits/basic_ios.h ****       setstate(iostate __state)
 158:/usr/include/c++/6/bits/basic_ios.h ****       { this->clear(this->rdstate() | __state); }
 159:/usr/include/c++/6/bits/basic_ios.h **** 
 160:/usr/include/c++/6/bits/basic_ios.h ****       // Flip the internal state on for the proper state bits, then re
 161:/usr/include/c++/6/bits/basic_ios.h ****       // throws the propagated exception if bit also set in
 162:/usr/include/c++/6/bits/basic_ios.h ****       // exceptions().
 163:/usr/include/c++/6/bits/basic_ios.h ****       void
 164:/usr/include/c++/6/bits/basic_ios.h ****       _M_setstate(iostate __state)
 165:/usr/include/c++/6/bits/basic_ios.h ****       {
 166:/usr/include/c++/6/bits/basic_ios.h **** 	// 27.6.1.2.1 Common requirements.
 167:/usr/include/c++/6/bits/basic_ios.h **** 	// Turn this on without causing an ios::failure to be thrown.
 168:/usr/include/c++/6/bits/basic_ios.h **** 	_M_streambuf_state |= __state;
 169:/usr/include/c++/6/bits/basic_ios.h **** 	if (this->exceptions() & __state)
 170:/usr/include/c++/6/bits/basic_ios.h **** 	  __throw_exception_again;
 171:/usr/include/c++/6/bits/basic_ios.h ****       }
 172:/usr/include/c++/6/bits/basic_ios.h **** 
 173:/usr/include/c++/6/bits/basic_ios.h ****       /**
 174:/usr/include/c++/6/bits/basic_ios.h ****        *  @brief  Fast error checking.
 175:/usr/include/c++/6/bits/basic_ios.h ****        *  @return  True if no error flags are set.
 176:/usr/include/c++/6/bits/basic_ios.h ****        *
 177:/usr/include/c++/6/bits/basic_ios.h ****        *  A wrapper around rdstate.
 178:/usr/include/c++/6/bits/basic_ios.h ****       */
GAS LISTING /tmp/ccvmoMuv.s 			page 289


 179:/usr/include/c++/6/bits/basic_ios.h ****       bool
 180:/usr/include/c++/6/bits/basic_ios.h ****       good() const
 181:/usr/include/c++/6/bits/basic_ios.h ****       { return this->rdstate() == 0; }
 182:/usr/include/c++/6/bits/basic_ios.h **** 
 183:/usr/include/c++/6/bits/basic_ios.h ****       /**
 184:/usr/include/c++/6/bits/basic_ios.h ****        *  @brief  Fast error checking.
 185:/usr/include/c++/6/bits/basic_ios.h ****        *  @return  True if the eofbit is set.
 186:/usr/include/c++/6/bits/basic_ios.h ****        *
 187:/usr/include/c++/6/bits/basic_ios.h ****        *  Note that other iostate flags may also be set.
 188:/usr/include/c++/6/bits/basic_ios.h ****       */
 189:/usr/include/c++/6/bits/basic_ios.h ****       bool
 190:/usr/include/c++/6/bits/basic_ios.h ****       eof() const
 191:/usr/include/c++/6/bits/basic_ios.h ****       { return (this->rdstate() & eofbit) != 0; }
 192:/usr/include/c++/6/bits/basic_ios.h **** 
 193:/usr/include/c++/6/bits/basic_ios.h ****       /**
 194:/usr/include/c++/6/bits/basic_ios.h ****        *  @brief  Fast error checking.
 195:/usr/include/c++/6/bits/basic_ios.h ****        *  @return  True if either the badbit or the failbit is set.
 196:/usr/include/c++/6/bits/basic_ios.h ****        *
 197:/usr/include/c++/6/bits/basic_ios.h ****        *  Checking the badbit in fail() is historical practice.
 198:/usr/include/c++/6/bits/basic_ios.h ****        *  Note that other iostate flags may also be set.
 199:/usr/include/c++/6/bits/basic_ios.h ****       */
 200:/usr/include/c++/6/bits/basic_ios.h ****       bool
 201:/usr/include/c++/6/bits/basic_ios.h ****       fail() const
 202:/usr/include/c++/6/bits/basic_ios.h ****       { return (this->rdstate() & (badbit | failbit)) != 0; }
 203:/usr/include/c++/6/bits/basic_ios.h **** 
 204:/usr/include/c++/6/bits/basic_ios.h ****       /**
 205:/usr/include/c++/6/bits/basic_ios.h ****        *  @brief  Fast error checking.
 206:/usr/include/c++/6/bits/basic_ios.h ****        *  @return  True if the badbit is set.
 207:/usr/include/c++/6/bits/basic_ios.h ****        *
 208:/usr/include/c++/6/bits/basic_ios.h ****        *  Note that other iostate flags may also be set.
 209:/usr/include/c++/6/bits/basic_ios.h ****       */
 210:/usr/include/c++/6/bits/basic_ios.h ****       bool
 211:/usr/include/c++/6/bits/basic_ios.h ****       bad() const
 212:/usr/include/c++/6/bits/basic_ios.h ****       { return (this->rdstate() & badbit) != 0; }
 213:/usr/include/c++/6/bits/basic_ios.h **** 
 214:/usr/include/c++/6/bits/basic_ios.h ****       /**
 215:/usr/include/c++/6/bits/basic_ios.h ****        *  @brief  Throwing exceptions on errors.
 216:/usr/include/c++/6/bits/basic_ios.h ****        *  @return  The current exceptions mask.
 217:/usr/include/c++/6/bits/basic_ios.h ****        *
 218:/usr/include/c++/6/bits/basic_ios.h ****        *  This changes nothing in the stream.  See the one-argument version
 219:/usr/include/c++/6/bits/basic_ios.h ****        *  of exceptions(iostate) for the meaning of the return value.
 220:/usr/include/c++/6/bits/basic_ios.h ****       */
 221:/usr/include/c++/6/bits/basic_ios.h ****       iostate
 222:/usr/include/c++/6/bits/basic_ios.h ****       exceptions() const
 223:/usr/include/c++/6/bits/basic_ios.h ****       { return _M_exception; }
 224:/usr/include/c++/6/bits/basic_ios.h **** 
 225:/usr/include/c++/6/bits/basic_ios.h ****       /**
 226:/usr/include/c++/6/bits/basic_ios.h ****        *  @brief  Throwing exceptions on errors.
 227:/usr/include/c++/6/bits/basic_ios.h ****        *  @param  __except  The new exceptions mask.
 228:/usr/include/c++/6/bits/basic_ios.h ****        *
 229:/usr/include/c++/6/bits/basic_ios.h ****        *  By default, error flags are set silently.  You can set an
 230:/usr/include/c++/6/bits/basic_ios.h ****        *  exceptions mask for each stream; if a bit in the mask becomes set
 231:/usr/include/c++/6/bits/basic_ios.h ****        *  in the error flags, then an exception of type
 232:/usr/include/c++/6/bits/basic_ios.h ****        *  std::ios_base::failure is thrown.
 233:/usr/include/c++/6/bits/basic_ios.h ****        *
 234:/usr/include/c++/6/bits/basic_ios.h ****        *  If the error flag is already set when the exceptions mask is
 235:/usr/include/c++/6/bits/basic_ios.h ****        *  added, the exception is immediately thrown.  Try running the
GAS LISTING /tmp/ccvmoMuv.s 			page 290


 236:/usr/include/c++/6/bits/basic_ios.h ****        *  following under GCC 3.1 or later:
 237:/usr/include/c++/6/bits/basic_ios.h ****        *  @code
 238:/usr/include/c++/6/bits/basic_ios.h ****        *  #include <iostream>
 239:/usr/include/c++/6/bits/basic_ios.h ****        *  #include <fstream>
 240:/usr/include/c++/6/bits/basic_ios.h ****        *  #include <exception>
 241:/usr/include/c++/6/bits/basic_ios.h ****        *
 242:/usr/include/c++/6/bits/basic_ios.h ****        *  int main()
 243:/usr/include/c++/6/bits/basic_ios.h ****        *  {
 244:/usr/include/c++/6/bits/basic_ios.h ****        *      std::set_terminate (__gnu_cxx::__verbose_terminate_handler);
 245:/usr/include/c++/6/bits/basic_ios.h ****        *
 246:/usr/include/c++/6/bits/basic_ios.h ****        *      std::ifstream f ("/etc/motd");
 247:/usr/include/c++/6/bits/basic_ios.h ****        *
 248:/usr/include/c++/6/bits/basic_ios.h ****        *      std::cerr << "Setting badbit\n";
 249:/usr/include/c++/6/bits/basic_ios.h ****        *      f.setstate (std::ios_base::badbit);
 250:/usr/include/c++/6/bits/basic_ios.h ****        *
 251:/usr/include/c++/6/bits/basic_ios.h ****        *      std::cerr << "Setting exception mask\n";
 252:/usr/include/c++/6/bits/basic_ios.h ****        *      f.exceptions (std::ios_base::badbit);
 253:/usr/include/c++/6/bits/basic_ios.h ****        *  }
 254:/usr/include/c++/6/bits/basic_ios.h ****        *  @endcode
 255:/usr/include/c++/6/bits/basic_ios.h ****       */
 256:/usr/include/c++/6/bits/basic_ios.h ****       void
 257:/usr/include/c++/6/bits/basic_ios.h ****       exceptions(iostate __except)
 258:/usr/include/c++/6/bits/basic_ios.h ****       {
 259:/usr/include/c++/6/bits/basic_ios.h ****         _M_exception = __except;
 260:/usr/include/c++/6/bits/basic_ios.h ****         this->clear(_M_streambuf_state);
 261:/usr/include/c++/6/bits/basic_ios.h ****       }
 262:/usr/include/c++/6/bits/basic_ios.h **** 
 263:/usr/include/c++/6/bits/basic_ios.h ****       // Constructor/destructor:
 264:/usr/include/c++/6/bits/basic_ios.h ****       /**
 265:/usr/include/c++/6/bits/basic_ios.h ****        *  @brief  Constructor performs initialization.
 266:/usr/include/c++/6/bits/basic_ios.h ****        *
 267:/usr/include/c++/6/bits/basic_ios.h ****        *  The parameter is passed by derived streams.
 268:/usr/include/c++/6/bits/basic_ios.h ****       */
 269:/usr/include/c++/6/bits/basic_ios.h ****       explicit
 270:/usr/include/c++/6/bits/basic_ios.h ****       basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
 271:/usr/include/c++/6/bits/basic_ios.h ****       : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 272:/usr/include/c++/6/bits/basic_ios.h **** 	_M_ctype(0), _M_num_put(0), _M_num_get(0)
 273:/usr/include/c++/6/bits/basic_ios.h ****       { this->init(__sb); }
 274:/usr/include/c++/6/bits/basic_ios.h **** 
 275:/usr/include/c++/6/bits/basic_ios.h ****       /**
 276:/usr/include/c++/6/bits/basic_ios.h ****        *  @brief  Empty.
 277:/usr/include/c++/6/bits/basic_ios.h ****        *
 278:/usr/include/c++/6/bits/basic_ios.h ****        *  The destructor does nothing.  More specifically, it does not
 279:/usr/include/c++/6/bits/basic_ios.h ****        *  destroy the streambuf held by rdbuf().
 280:/usr/include/c++/6/bits/basic_ios.h ****       */
 281:/usr/include/c++/6/bits/basic_ios.h ****       virtual
 282:/usr/include/c++/6/bits/basic_ios.h ****       ~basic_ios() { }
 283:/usr/include/c++/6/bits/basic_ios.h **** 
 284:/usr/include/c++/6/bits/basic_ios.h ****       // Members:
 285:/usr/include/c++/6/bits/basic_ios.h ****       /**
 286:/usr/include/c++/6/bits/basic_ios.h ****        *  @brief  Fetches the current @e tied stream.
 287:/usr/include/c++/6/bits/basic_ios.h ****        *  @return  A pointer to the tied stream, or NULL if the stream is
 288:/usr/include/c++/6/bits/basic_ios.h ****        *           not tied.
 289:/usr/include/c++/6/bits/basic_ios.h ****        *
 290:/usr/include/c++/6/bits/basic_ios.h ****        *  A stream may be @e tied (or synchronized) to a second output
 291:/usr/include/c++/6/bits/basic_ios.h ****        *  stream.  When this stream performs any I/O, the tied stream is
 292:/usr/include/c++/6/bits/basic_ios.h ****        *  first flushed.  For example, @c std::cin is tied to @c std::cout.
GAS LISTING /tmp/ccvmoMuv.s 			page 291


 293:/usr/include/c++/6/bits/basic_ios.h ****       */
 294:/usr/include/c++/6/bits/basic_ios.h ****       basic_ostream<_CharT, _Traits>*
 295:/usr/include/c++/6/bits/basic_ios.h ****       tie() const
 296:/usr/include/c++/6/bits/basic_ios.h ****       { return _M_tie; }
 297:/usr/include/c++/6/bits/basic_ios.h **** 
 298:/usr/include/c++/6/bits/basic_ios.h ****       /**
 299:/usr/include/c++/6/bits/basic_ios.h ****        *  @brief  Ties this stream to an output stream.
 300:/usr/include/c++/6/bits/basic_ios.h ****        *  @param  __tiestr  The output stream.
 301:/usr/include/c++/6/bits/basic_ios.h ****        *  @return  The previously tied output stream, or NULL if the stream
 302:/usr/include/c++/6/bits/basic_ios.h ****        *           was not tied.
 303:/usr/include/c++/6/bits/basic_ios.h ****        *
 304:/usr/include/c++/6/bits/basic_ios.h ****        *  This sets up a new tie; see tie() for more.
 305:/usr/include/c++/6/bits/basic_ios.h ****       */
 306:/usr/include/c++/6/bits/basic_ios.h ****       basic_ostream<_CharT, _Traits>*
 307:/usr/include/c++/6/bits/basic_ios.h ****       tie(basic_ostream<_CharT, _Traits>* __tiestr)
 308:/usr/include/c++/6/bits/basic_ios.h ****       {
 309:/usr/include/c++/6/bits/basic_ios.h ****         basic_ostream<_CharT, _Traits>* __old = _M_tie;
 310:/usr/include/c++/6/bits/basic_ios.h ****         _M_tie = __tiestr;
 311:/usr/include/c++/6/bits/basic_ios.h ****         return __old;
 312:/usr/include/c++/6/bits/basic_ios.h ****       }
 313:/usr/include/c++/6/bits/basic_ios.h **** 
 314:/usr/include/c++/6/bits/basic_ios.h ****       /**
 315:/usr/include/c++/6/bits/basic_ios.h ****        *  @brief  Accessing the underlying buffer.
 316:/usr/include/c++/6/bits/basic_ios.h ****        *  @return  The current stream buffer.
 317:/usr/include/c++/6/bits/basic_ios.h ****        *
 318:/usr/include/c++/6/bits/basic_ios.h ****        *  This does not change the state of the stream.
 319:/usr/include/c++/6/bits/basic_ios.h ****       */
 320:/usr/include/c++/6/bits/basic_ios.h ****       basic_streambuf<_CharT, _Traits>*
 321:/usr/include/c++/6/bits/basic_ios.h ****       rdbuf() const
 322:/usr/include/c++/6/bits/basic_ios.h ****       { return _M_streambuf; }
 323:/usr/include/c++/6/bits/basic_ios.h **** 
 324:/usr/include/c++/6/bits/basic_ios.h ****       /**
 325:/usr/include/c++/6/bits/basic_ios.h ****        *  @brief  Changing the underlying buffer.
 326:/usr/include/c++/6/bits/basic_ios.h ****        *  @param  __sb  The new stream buffer.
 327:/usr/include/c++/6/bits/basic_ios.h ****        *  @return  The previous stream buffer.
 328:/usr/include/c++/6/bits/basic_ios.h ****        *
 329:/usr/include/c++/6/bits/basic_ios.h ****        *  Associates a new buffer with the current stream, and clears the
 330:/usr/include/c++/6/bits/basic_ios.h ****        *  error state.
 331:/usr/include/c++/6/bits/basic_ios.h ****        *
 332:/usr/include/c++/6/bits/basic_ios.h ****        *  Due to historical accidents which the LWG refuses to correct, the
 333:/usr/include/c++/6/bits/basic_ios.h ****        *  I/O library suffers from a design error:  this function is hidden
 334:/usr/include/c++/6/bits/basic_ios.h ****        *  in derived classes by overrides of the zero-argument @c rdbuf(),
 335:/usr/include/c++/6/bits/basic_ios.h ****        *  which is non-virtual for hysterical raisins.  As a result, you
 336:/usr/include/c++/6/bits/basic_ios.h ****        *  must use explicit qualifications to access this function via any
 337:/usr/include/c++/6/bits/basic_ios.h ****        *  derived class.  For example:
 338:/usr/include/c++/6/bits/basic_ios.h ****        *
 339:/usr/include/c++/6/bits/basic_ios.h ****        *  @code
 340:/usr/include/c++/6/bits/basic_ios.h ****        *  std::fstream     foo;         // or some other derived type
 341:/usr/include/c++/6/bits/basic_ios.h ****        *  std::streambuf*  p = .....;
 342:/usr/include/c++/6/bits/basic_ios.h ****        *
 343:/usr/include/c++/6/bits/basic_ios.h ****        *  foo.ios::rdbuf(p);            // ios == basic_ios<char>
 344:/usr/include/c++/6/bits/basic_ios.h ****        *  @endcode
 345:/usr/include/c++/6/bits/basic_ios.h ****       */
 346:/usr/include/c++/6/bits/basic_ios.h ****       basic_streambuf<_CharT, _Traits>*
 347:/usr/include/c++/6/bits/basic_ios.h ****       rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
 348:/usr/include/c++/6/bits/basic_ios.h **** 
 349:/usr/include/c++/6/bits/basic_ios.h ****       /**
GAS LISTING /tmp/ccvmoMuv.s 			page 292


 350:/usr/include/c++/6/bits/basic_ios.h ****        *  @brief  Copies fields of __rhs into this.
 351:/usr/include/c++/6/bits/basic_ios.h ****        *  @param  __rhs  The source values for the copies.
 352:/usr/include/c++/6/bits/basic_ios.h ****        *  @return  Reference to this object.
 353:/usr/include/c++/6/bits/basic_ios.h ****        *
 354:/usr/include/c++/6/bits/basic_ios.h ****        *  All fields of __rhs are copied into this object except that rdbuf()
 355:/usr/include/c++/6/bits/basic_ios.h ****        *  and rdstate() remain unchanged.  All values in the pword and iword
 356:/usr/include/c++/6/bits/basic_ios.h ****        *  arrays are copied.  Before copying, each callback is invoked with
 357:/usr/include/c++/6/bits/basic_ios.h ****        *  erase_event.  After copying, each (new) callback is invoked with
 358:/usr/include/c++/6/bits/basic_ios.h ****        *  copyfmt_event.  The final step is to copy exceptions().
 359:/usr/include/c++/6/bits/basic_ios.h ****       */
 360:/usr/include/c++/6/bits/basic_ios.h ****       basic_ios&
 361:/usr/include/c++/6/bits/basic_ios.h ****       copyfmt(const basic_ios& __rhs);
 362:/usr/include/c++/6/bits/basic_ios.h **** 
 363:/usr/include/c++/6/bits/basic_ios.h ****       /**
 364:/usr/include/c++/6/bits/basic_ios.h ****        *  @brief  Retrieves the @a empty character.
 365:/usr/include/c++/6/bits/basic_ios.h ****        *  @return  The current fill character.
 366:/usr/include/c++/6/bits/basic_ios.h ****        *
 367:/usr/include/c++/6/bits/basic_ios.h ****        *  It defaults to a space (' ') in the current locale.
 368:/usr/include/c++/6/bits/basic_ios.h ****       */
 369:/usr/include/c++/6/bits/basic_ios.h ****       char_type
 370:/usr/include/c++/6/bits/basic_ios.h ****       fill() const
 371:/usr/include/c++/6/bits/basic_ios.h ****       {
 372:/usr/include/c++/6/bits/basic_ios.h **** 	if (!_M_fill_init)
 373:/usr/include/c++/6/bits/basic_ios.h **** 	  {
 374:/usr/include/c++/6/bits/basic_ios.h **** 	    _M_fill = this->widen(' ');
 375:/usr/include/c++/6/bits/basic_ios.h **** 	    _M_fill_init = true;
 376:/usr/include/c++/6/bits/basic_ios.h **** 	  }
 377:/usr/include/c++/6/bits/basic_ios.h **** 	return _M_fill;
 378:/usr/include/c++/6/bits/basic_ios.h ****       }
 379:/usr/include/c++/6/bits/basic_ios.h **** 
 380:/usr/include/c++/6/bits/basic_ios.h ****       /**
 381:/usr/include/c++/6/bits/basic_ios.h ****        *  @brief  Sets a new @a empty character.
 382:/usr/include/c++/6/bits/basic_ios.h ****        *  @param  __ch  The new character.
 383:/usr/include/c++/6/bits/basic_ios.h ****        *  @return  The previous fill character.
 384:/usr/include/c++/6/bits/basic_ios.h ****        *
 385:/usr/include/c++/6/bits/basic_ios.h ****        *  The fill character is used to fill out space when P+ characters
 386:/usr/include/c++/6/bits/basic_ios.h ****        *  have been requested (e.g., via setw), Q characters are actually
 387:/usr/include/c++/6/bits/basic_ios.h ****        *  used, and Q<P.  It defaults to a space (' ') in the current locale.
 388:/usr/include/c++/6/bits/basic_ios.h ****       */
 389:/usr/include/c++/6/bits/basic_ios.h ****       char_type
 390:/usr/include/c++/6/bits/basic_ios.h ****       fill(char_type __ch)
 391:/usr/include/c++/6/bits/basic_ios.h ****       {
 392:/usr/include/c++/6/bits/basic_ios.h **** 	char_type __old = this->fill();
 393:/usr/include/c++/6/bits/basic_ios.h **** 	_M_fill = __ch;
 394:/usr/include/c++/6/bits/basic_ios.h **** 	return __old;
 395:/usr/include/c++/6/bits/basic_ios.h ****       }
 396:/usr/include/c++/6/bits/basic_ios.h **** 
 397:/usr/include/c++/6/bits/basic_ios.h ****       // Locales:
 398:/usr/include/c++/6/bits/basic_ios.h ****       /**
 399:/usr/include/c++/6/bits/basic_ios.h ****        *  @brief  Moves to a new locale.
 400:/usr/include/c++/6/bits/basic_ios.h ****        *  @param  __loc  The new locale.
 401:/usr/include/c++/6/bits/basic_ios.h ****        *  @return  The previous locale.
 402:/usr/include/c++/6/bits/basic_ios.h ****        *
 403:/usr/include/c++/6/bits/basic_ios.h ****        *  Calls @c ios_base::imbue(loc), and if a stream buffer is associated
 404:/usr/include/c++/6/bits/basic_ios.h ****        *  with this stream, calls that buffer's @c pubimbue(loc).
 405:/usr/include/c++/6/bits/basic_ios.h ****        *
 406:/usr/include/c++/6/bits/basic_ios.h ****        *  Additional l10n notes are at
GAS LISTING /tmp/ccvmoMuv.s 			page 293


 407:/usr/include/c++/6/bits/basic_ios.h ****        *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/localization.html
 408:/usr/include/c++/6/bits/basic_ios.h ****       */
 409:/usr/include/c++/6/bits/basic_ios.h ****       locale
 410:/usr/include/c++/6/bits/basic_ios.h ****       imbue(const locale& __loc);
 411:/usr/include/c++/6/bits/basic_ios.h **** 
 412:/usr/include/c++/6/bits/basic_ios.h ****       /**
 413:/usr/include/c++/6/bits/basic_ios.h ****        *  @brief  Squeezes characters.
 414:/usr/include/c++/6/bits/basic_ios.h ****        *  @param  __c  The character to narrow.
 415:/usr/include/c++/6/bits/basic_ios.h ****        *  @param  __dfault  The character to narrow.
 416:/usr/include/c++/6/bits/basic_ios.h ****        *  @return  The narrowed character.
 417:/usr/include/c++/6/bits/basic_ios.h ****        *
 418:/usr/include/c++/6/bits/basic_ios.h ****        *  Maps a character of @c char_type to a character of @c char,
 419:/usr/include/c++/6/bits/basic_ios.h ****        *  if possible.
 420:/usr/include/c++/6/bits/basic_ios.h ****        *
 421:/usr/include/c++/6/bits/basic_ios.h ****        *  Returns the result of
 422:/usr/include/c++/6/bits/basic_ios.h ****        *  @code
 423:/usr/include/c++/6/bits/basic_ios.h ****        *    std::use_facet<ctype<char_type> >(getloc()).narrow(c,dfault)
 424:/usr/include/c++/6/bits/basic_ios.h ****        *  @endcode
 425:/usr/include/c++/6/bits/basic_ios.h ****        *
 426:/usr/include/c++/6/bits/basic_ios.h ****        *  Additional l10n notes are at
 427:/usr/include/c++/6/bits/basic_ios.h ****        *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/localization.html
 428:/usr/include/c++/6/bits/basic_ios.h ****       */
 429:/usr/include/c++/6/bits/basic_ios.h ****       char
 430:/usr/include/c++/6/bits/basic_ios.h ****       narrow(char_type __c, char __dfault) const
 431:/usr/include/c++/6/bits/basic_ios.h ****       { return __check_facet(_M_ctype).narrow(__c, __dfault); }
 432:/usr/include/c++/6/bits/basic_ios.h **** 
 433:/usr/include/c++/6/bits/basic_ios.h ****       /**
 434:/usr/include/c++/6/bits/basic_ios.h ****        *  @brief  Widens characters.
 435:/usr/include/c++/6/bits/basic_ios.h ****        *  @param  __c  The character to widen.
 436:/usr/include/c++/6/bits/basic_ios.h ****        *  @return  The widened character.
 437:/usr/include/c++/6/bits/basic_ios.h ****        *
 438:/usr/include/c++/6/bits/basic_ios.h ****        *  Maps a character of @c char to a character of @c char_type.
 439:/usr/include/c++/6/bits/basic_ios.h ****        *
 440:/usr/include/c++/6/bits/basic_ios.h ****        *  Returns the result of
 441:/usr/include/c++/6/bits/basic_ios.h ****        *  @code
 442:/usr/include/c++/6/bits/basic_ios.h ****        *    std::use_facet<ctype<char_type> >(getloc()).widen(c)
 443:/usr/include/c++/6/bits/basic_ios.h ****        *  @endcode
 444:/usr/include/c++/6/bits/basic_ios.h ****        *
 445:/usr/include/c++/6/bits/basic_ios.h ****        *  Additional l10n notes are at
 446:/usr/include/c++/6/bits/basic_ios.h ****        *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/localization.html
 447:/usr/include/c++/6/bits/basic_ios.h ****       */
 448:/usr/include/c++/6/bits/basic_ios.h ****       char_type
 449:/usr/include/c++/6/bits/basic_ios.h ****       widen(char __c) const
 450:/usr/include/c++/6/bits/basic_ios.h ****       { return __check_facet(_M_ctype).widen(__c); }
 451:/usr/include/c++/6/bits/basic_ios.h **** 
 452:/usr/include/c++/6/bits/basic_ios.h ****     protected:
 453:/usr/include/c++/6/bits/basic_ios.h ****       // 27.4.5.1  basic_ios constructors
 454:/usr/include/c++/6/bits/basic_ios.h ****       /**
 455:/usr/include/c++/6/bits/basic_ios.h ****        *  @brief  Empty.
 456:/usr/include/c++/6/bits/basic_ios.h ****        *
 457:/usr/include/c++/6/bits/basic_ios.h ****        *  The default constructor does nothing and is not normally
 458:/usr/include/c++/6/bits/basic_ios.h ****        *  accessible to users.
 459:/usr/include/c++/6/bits/basic_ios.h ****       */
 460:/usr/include/c++/6/bits/basic_ios.h ****       basic_ios()
 461:/usr/include/c++/6/bits/basic_ios.h ****       : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
 462:/usr/include/c++/6/bits/basic_ios.h **** 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
 3582              		.loc 30 462 0
GAS LISTING /tmp/ccvmoMuv.s 			page 294


 3583 001f 4C8DAC24 		leaq	160(%rsp), %r13
 3583      A0000000 
 3584 0027 4889F3   		movq	%rsi, %rbx
 3585              	.LVL316:
 3586 002a 498D7D70 		leaq	112(%r13), %rdi
 3587              	.LVL317:
 3588 002e E8000000 		call	_ZNSt8ios_baseC2Ev@PLT
 3588      00
 3589              	.LVL318:
 3590 0033 488D0500 		leaq	16+_ZTVSt9basic_iosIcSt11char_traitsIcEE(%rip), %rax
 3590      000000
 3591 003a C68424F0 		movb	$0, 496(%rsp)
 3591      01000000 
 3592              	.LBE14039:
 3593              	.LBE14038:
 3594              	.LBE14037:
 3595              	.LBB14046:
 3596              	.LBB14047:
 3597              		.file 31 "/usr/include/c++/6/ostream"
   1:/usr/include/c++/6/ostream **** // Output streams -*- C++ -*-
   2:/usr/include/c++/6/ostream **** 
   3:/usr/include/c++/6/ostream **** // Copyright (C) 1997-2016 Free Software Foundation, Inc.
   4:/usr/include/c++/6/ostream **** //
   5:/usr/include/c++/6/ostream **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/6/ostream **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/6/ostream **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/6/ostream **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/6/ostream **** // any later version.
  10:/usr/include/c++/6/ostream **** 
  11:/usr/include/c++/6/ostream **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/6/ostream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/6/ostream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/6/ostream **** // GNU General Public License for more details.
  15:/usr/include/c++/6/ostream **** 
  16:/usr/include/c++/6/ostream **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/6/ostream **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/6/ostream **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/6/ostream **** 
  20:/usr/include/c++/6/ostream **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/6/ostream **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/6/ostream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/6/ostream **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/6/ostream **** 
  25:/usr/include/c++/6/ostream **** /** @file include/ostream
  26:/usr/include/c++/6/ostream ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/6/ostream ****  */
  28:/usr/include/c++/6/ostream **** 
  29:/usr/include/c++/6/ostream **** //
  30:/usr/include/c++/6/ostream **** // ISO C++ 14882: 27.6.2  Output streams
  31:/usr/include/c++/6/ostream **** //
  32:/usr/include/c++/6/ostream **** 
  33:/usr/include/c++/6/ostream **** #ifndef _GLIBCXX_OSTREAM
  34:/usr/include/c++/6/ostream **** #define _GLIBCXX_OSTREAM 1
  35:/usr/include/c++/6/ostream **** 
  36:/usr/include/c++/6/ostream **** #pragma GCC system_header
  37:/usr/include/c++/6/ostream **** 
  38:/usr/include/c++/6/ostream **** #include <ios>
GAS LISTING /tmp/ccvmoMuv.s 			page 295


  39:/usr/include/c++/6/ostream **** #include <bits/ostream_insert.h>
  40:/usr/include/c++/6/ostream **** 
  41:/usr/include/c++/6/ostream **** namespace std _GLIBCXX_VISIBILITY(default)
  42:/usr/include/c++/6/ostream **** {
  43:/usr/include/c++/6/ostream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/c++/6/ostream **** 
  45:/usr/include/c++/6/ostream ****   /**
  46:/usr/include/c++/6/ostream ****    *  @brief  Template class basic_ostream.
  47:/usr/include/c++/6/ostream ****    *  @ingroup io
  48:/usr/include/c++/6/ostream ****    *
  49:/usr/include/c++/6/ostream ****    *  @tparam _CharT  Type of character stream.
  50:/usr/include/c++/6/ostream ****    *  @tparam _Traits  Traits for character type, defaults to
  51:/usr/include/c++/6/ostream ****    *                   char_traits<_CharT>.
  52:/usr/include/c++/6/ostream ****    *
  53:/usr/include/c++/6/ostream ****    *  This is the base class for all output streams.  It provides text
  54:/usr/include/c++/6/ostream ****    *  formatting of all builtin types, and communicates with any class
  55:/usr/include/c++/6/ostream ****    *  derived from basic_streambuf to do the actual output.
  56:/usr/include/c++/6/ostream ****   */
  57:/usr/include/c++/6/ostream ****   template<typename _CharT, typename _Traits>
  58:/usr/include/c++/6/ostream ****     class basic_ostream : virtual public basic_ios<_CharT, _Traits>
  59:/usr/include/c++/6/ostream ****     {
  60:/usr/include/c++/6/ostream ****     public:
  61:/usr/include/c++/6/ostream ****       // Types (inherited from basic_ios):
  62:/usr/include/c++/6/ostream ****       typedef _CharT			 		char_type;
  63:/usr/include/c++/6/ostream ****       typedef typename _Traits::int_type 		int_type;
  64:/usr/include/c++/6/ostream ****       typedef typename _Traits::pos_type 		pos_type;
  65:/usr/include/c++/6/ostream ****       typedef typename _Traits::off_type 		off_type;
  66:/usr/include/c++/6/ostream ****       typedef _Traits			 		traits_type;
  67:/usr/include/c++/6/ostream **** 
  68:/usr/include/c++/6/ostream ****       // Non-standard Types:
  69:/usr/include/c++/6/ostream ****       typedef basic_streambuf<_CharT, _Traits> 		__streambuf_type;
  70:/usr/include/c++/6/ostream ****       typedef basic_ios<_CharT, _Traits>		__ios_type;
  71:/usr/include/c++/6/ostream ****       typedef basic_ostream<_CharT, _Traits>		__ostream_type;
  72:/usr/include/c++/6/ostream ****       typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
  73:/usr/include/c++/6/ostream ****       							__num_put_type;
  74:/usr/include/c++/6/ostream ****       typedef ctype<_CharT>	      			__ctype_type;
  75:/usr/include/c++/6/ostream **** 
  76:/usr/include/c++/6/ostream ****       /**
  77:/usr/include/c++/6/ostream ****        *  @brief  Base constructor.
  78:/usr/include/c++/6/ostream ****        *
  79:/usr/include/c++/6/ostream ****        *  This ctor is almost never called by the user directly, rather from
  80:/usr/include/c++/6/ostream ****        *  derived classes' initialization lists, which pass a pointer to
  81:/usr/include/c++/6/ostream ****        *  their own stream buffer.
  82:/usr/include/c++/6/ostream ****       */
  83:/usr/include/c++/6/ostream ****       explicit
  84:/usr/include/c++/6/ostream ****       basic_ostream(__streambuf_type* __sb)
  85:/usr/include/c++/6/ostream ****       { this->init(__sb); }
  86:/usr/include/c++/6/ostream **** 
  87:/usr/include/c++/6/ostream ****       /**
  88:/usr/include/c++/6/ostream ****        *  @brief  Base destructor.
  89:/usr/include/c++/6/ostream ****        *
  90:/usr/include/c++/6/ostream ****        *  This does very little apart from providing a virtual base dtor.
  91:/usr/include/c++/6/ostream ****       */
  92:/usr/include/c++/6/ostream ****       virtual
  93:/usr/include/c++/6/ostream ****       ~basic_ostream() { }
  94:/usr/include/c++/6/ostream **** 
  95:/usr/include/c++/6/ostream ****       /// Safe prefix/suffix operations.
GAS LISTING /tmp/ccvmoMuv.s 			page 296


  96:/usr/include/c++/6/ostream ****       class sentry;
  97:/usr/include/c++/6/ostream ****       friend class sentry;
  98:/usr/include/c++/6/ostream **** 
  99:/usr/include/c++/6/ostream ****       //@{
 100:/usr/include/c++/6/ostream ****       /**
 101:/usr/include/c++/6/ostream ****        *  @brief  Interface for manipulators.
 102:/usr/include/c++/6/ostream ****        *
 103:/usr/include/c++/6/ostream ****        *  Manipulators such as @c std::endl and @c std::hex use these
 104:/usr/include/c++/6/ostream ****        *  functions in constructs like "std::cout << std::endl".  For more
 105:/usr/include/c++/6/ostream ****        *  information, see the iomanip header.
 106:/usr/include/c++/6/ostream ****       */
 107:/usr/include/c++/6/ostream ****       __ostream_type&
 108:/usr/include/c++/6/ostream ****       operator<<(__ostream_type& (*__pf)(__ostream_type&))
 109:/usr/include/c++/6/ostream ****       {
 110:/usr/include/c++/6/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 111:/usr/include/c++/6/ostream **** 	// DR 60. What is a formatted input function?
 112:/usr/include/c++/6/ostream **** 	// The inserters for manipulators are *not* formatted output functions.
 113:/usr/include/c++/6/ostream **** 	return __pf(*this);
 114:/usr/include/c++/6/ostream ****       }
 115:/usr/include/c++/6/ostream **** 
 116:/usr/include/c++/6/ostream ****       __ostream_type&
 117:/usr/include/c++/6/ostream ****       operator<<(__ios_type& (*__pf)(__ios_type&))
 118:/usr/include/c++/6/ostream ****       {
 119:/usr/include/c++/6/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 120:/usr/include/c++/6/ostream **** 	// DR 60. What is a formatted input function?
 121:/usr/include/c++/6/ostream **** 	// The inserters for manipulators are *not* formatted output functions.
 122:/usr/include/c++/6/ostream **** 	__pf(*this);
 123:/usr/include/c++/6/ostream **** 	return *this;
 124:/usr/include/c++/6/ostream ****       }
 125:/usr/include/c++/6/ostream **** 
 126:/usr/include/c++/6/ostream ****       __ostream_type&
 127:/usr/include/c++/6/ostream ****       operator<<(ios_base& (*__pf) (ios_base&))
 128:/usr/include/c++/6/ostream ****       {
 129:/usr/include/c++/6/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 130:/usr/include/c++/6/ostream **** 	// DR 60. What is a formatted input function?
 131:/usr/include/c++/6/ostream **** 	// The inserters for manipulators are *not* formatted output functions.
 132:/usr/include/c++/6/ostream **** 	__pf(*this);
 133:/usr/include/c++/6/ostream **** 	return *this;
 134:/usr/include/c++/6/ostream ****       }
 135:/usr/include/c++/6/ostream ****       //@}
 136:/usr/include/c++/6/ostream **** 
 137:/usr/include/c++/6/ostream ****       //@{
 138:/usr/include/c++/6/ostream ****       /**
 139:/usr/include/c++/6/ostream ****        *  @name Inserters
 140:/usr/include/c++/6/ostream ****        *
 141:/usr/include/c++/6/ostream ****        *  All the @c operator<< functions (aka <em>formatted output
 142:/usr/include/c++/6/ostream ****        *  functions</em>) have some common behavior.  Each starts by
 143:/usr/include/c++/6/ostream ****        *  constructing a temporary object of type std::basic_ostream::sentry.
 144:/usr/include/c++/6/ostream ****        *  This can have several effects, concluding with the setting of a
 145:/usr/include/c++/6/ostream ****        *  status flag; see the sentry documentation for more.
 146:/usr/include/c++/6/ostream ****        *
 147:/usr/include/c++/6/ostream ****        *  If the sentry status is good, the function tries to generate
 148:/usr/include/c++/6/ostream ****        *  whatever data is appropriate for the type of the argument.
 149:/usr/include/c++/6/ostream ****        *
 150:/usr/include/c++/6/ostream ****        *  If an exception is thrown during insertion, ios_base::badbit
 151:/usr/include/c++/6/ostream ****        *  will be turned on in the stream's error state without causing an
 152:/usr/include/c++/6/ostream ****        *  ios_base::failure to be thrown.  The original exception will then
GAS LISTING /tmp/ccvmoMuv.s 			page 297


 153:/usr/include/c++/6/ostream ****        *  be rethrown.
 154:/usr/include/c++/6/ostream ****       */
 155:/usr/include/c++/6/ostream **** 
 156:/usr/include/c++/6/ostream ****       //@{
 157:/usr/include/c++/6/ostream ****       /**
 158:/usr/include/c++/6/ostream ****        *  @brief Integer arithmetic inserters
 159:/usr/include/c++/6/ostream ****        *  @param  __n A variable of builtin integral type.
 160:/usr/include/c++/6/ostream ****        *  @return  @c *this if successful
 161:/usr/include/c++/6/ostream ****        *
 162:/usr/include/c++/6/ostream ****        *  These functions use the stream's current locale (specifically, the
 163:/usr/include/c++/6/ostream ****        *  @c num_get facet) to perform numeric formatting.
 164:/usr/include/c++/6/ostream ****       */
 165:/usr/include/c++/6/ostream ****       __ostream_type&
 166:/usr/include/c++/6/ostream ****       operator<<(long __n)
 167:/usr/include/c++/6/ostream ****       { return _M_insert(__n); }
 168:/usr/include/c++/6/ostream **** 
 169:/usr/include/c++/6/ostream ****       __ostream_type&
 170:/usr/include/c++/6/ostream ****       operator<<(unsigned long __n)
 171:/usr/include/c++/6/ostream ****       { return _M_insert(__n); }
 172:/usr/include/c++/6/ostream **** 
 173:/usr/include/c++/6/ostream ****       __ostream_type&
 174:/usr/include/c++/6/ostream ****       operator<<(bool __n)
 175:/usr/include/c++/6/ostream ****       { return _M_insert(__n); }
 176:/usr/include/c++/6/ostream **** 
 177:/usr/include/c++/6/ostream ****       __ostream_type&
 178:/usr/include/c++/6/ostream ****       operator<<(short __n);
 179:/usr/include/c++/6/ostream **** 
 180:/usr/include/c++/6/ostream ****       __ostream_type&
 181:/usr/include/c++/6/ostream ****       operator<<(unsigned short __n)
 182:/usr/include/c++/6/ostream ****       {
 183:/usr/include/c++/6/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 184:/usr/include/c++/6/ostream **** 	// 117. basic_ostream uses nonexistent num_put member functions.
 185:/usr/include/c++/6/ostream **** 	return _M_insert(static_cast<unsigned long>(__n));
 186:/usr/include/c++/6/ostream ****       }
 187:/usr/include/c++/6/ostream **** 
 188:/usr/include/c++/6/ostream ****       __ostream_type&
 189:/usr/include/c++/6/ostream ****       operator<<(int __n);
 190:/usr/include/c++/6/ostream **** 
 191:/usr/include/c++/6/ostream ****       __ostream_type&
 192:/usr/include/c++/6/ostream ****       operator<<(unsigned int __n)
 193:/usr/include/c++/6/ostream ****       {
 194:/usr/include/c++/6/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 195:/usr/include/c++/6/ostream **** 	// 117. basic_ostream uses nonexistent num_put member functions.
 196:/usr/include/c++/6/ostream **** 	return _M_insert(static_cast<unsigned long>(__n));
 197:/usr/include/c++/6/ostream ****       }
 198:/usr/include/c++/6/ostream **** 
 199:/usr/include/c++/6/ostream **** #ifdef _GLIBCXX_USE_LONG_LONG
 200:/usr/include/c++/6/ostream ****       __ostream_type&
 201:/usr/include/c++/6/ostream ****       operator<<(long long __n)
 202:/usr/include/c++/6/ostream ****       { return _M_insert(__n); }
 203:/usr/include/c++/6/ostream **** 
 204:/usr/include/c++/6/ostream ****       __ostream_type&
 205:/usr/include/c++/6/ostream ****       operator<<(unsigned long long __n)
 206:/usr/include/c++/6/ostream ****       { return _M_insert(__n); }
 207:/usr/include/c++/6/ostream **** #endif
 208:/usr/include/c++/6/ostream ****       //@}
 209:/usr/include/c++/6/ostream **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 298


 210:/usr/include/c++/6/ostream ****       //@{
 211:/usr/include/c++/6/ostream ****       /**
 212:/usr/include/c++/6/ostream ****        *  @brief  Floating point arithmetic inserters
 213:/usr/include/c++/6/ostream ****        *  @param  __f A variable of builtin floating point type.
 214:/usr/include/c++/6/ostream ****        *  @return  @c *this if successful
 215:/usr/include/c++/6/ostream ****        *
 216:/usr/include/c++/6/ostream ****        *  These functions use the stream's current locale (specifically, the
 217:/usr/include/c++/6/ostream ****        *  @c num_get facet) to perform numeric formatting.
 218:/usr/include/c++/6/ostream ****       */
 219:/usr/include/c++/6/ostream ****       __ostream_type&
 220:/usr/include/c++/6/ostream ****       operator<<(double __f)
 221:/usr/include/c++/6/ostream ****       { return _M_insert(__f); }
 222:/usr/include/c++/6/ostream **** 
 223:/usr/include/c++/6/ostream ****       __ostream_type&
 224:/usr/include/c++/6/ostream ****       operator<<(float __f)
 225:/usr/include/c++/6/ostream ****       {
 226:/usr/include/c++/6/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 227:/usr/include/c++/6/ostream **** 	// 117. basic_ostream uses nonexistent num_put member functions.
 228:/usr/include/c++/6/ostream **** 	return _M_insert(static_cast<double>(__f));
 229:/usr/include/c++/6/ostream ****       }
 230:/usr/include/c++/6/ostream **** 
 231:/usr/include/c++/6/ostream ****       __ostream_type&
 232:/usr/include/c++/6/ostream ****       operator<<(long double __f)
 233:/usr/include/c++/6/ostream ****       { return _M_insert(__f); }
 234:/usr/include/c++/6/ostream ****       //@}
 235:/usr/include/c++/6/ostream **** 
 236:/usr/include/c++/6/ostream ****       /**
 237:/usr/include/c++/6/ostream ****        *  @brief  Pointer arithmetic inserters
 238:/usr/include/c++/6/ostream ****        *  @param  __p A variable of pointer type.
 239:/usr/include/c++/6/ostream ****        *  @return  @c *this if successful
 240:/usr/include/c++/6/ostream ****        *
 241:/usr/include/c++/6/ostream ****        *  These functions use the stream's current locale (specifically, the
 242:/usr/include/c++/6/ostream ****        *  @c num_get facet) to perform numeric formatting.
 243:/usr/include/c++/6/ostream ****       */
 244:/usr/include/c++/6/ostream ****       __ostream_type&
 245:/usr/include/c++/6/ostream ****       operator<<(const void* __p)
 246:/usr/include/c++/6/ostream ****       { return _M_insert(__p); }
 247:/usr/include/c++/6/ostream **** 
 248:/usr/include/c++/6/ostream ****       /**
 249:/usr/include/c++/6/ostream ****        *  @brief  Extracting from another streambuf.
 250:/usr/include/c++/6/ostream ****        *  @param  __sb  A pointer to a streambuf
 251:/usr/include/c++/6/ostream ****        *
 252:/usr/include/c++/6/ostream ****        *  This function behaves like one of the basic arithmetic extractors,
 253:/usr/include/c++/6/ostream ****        *  in that it also constructs a sentry object and has the same error
 254:/usr/include/c++/6/ostream ****        *  handling behavior.
 255:/usr/include/c++/6/ostream ****        *
 256:/usr/include/c++/6/ostream ****        *  If @p __sb is NULL, the stream will set failbit in its error state.
 257:/usr/include/c++/6/ostream ****        *
 258:/usr/include/c++/6/ostream ****        *  Characters are extracted from @p __sb and inserted into @c *this
 259:/usr/include/c++/6/ostream ****        *  until one of the following occurs:
 260:/usr/include/c++/6/ostream ****        *
 261:/usr/include/c++/6/ostream ****        *  - the input stream reaches end-of-file,
 262:/usr/include/c++/6/ostream ****        *  - insertion into the output sequence fails (in this case, the
 263:/usr/include/c++/6/ostream ****        *    character that would have been inserted is not extracted), or
 264:/usr/include/c++/6/ostream ****        *  - an exception occurs while getting a character from @p __sb, which
 265:/usr/include/c++/6/ostream ****        *    sets failbit in the error state
 266:/usr/include/c++/6/ostream ****        *
GAS LISTING /tmp/ccvmoMuv.s 			page 299


 267:/usr/include/c++/6/ostream ****        *  If the function inserts no characters, failbit is set.
 268:/usr/include/c++/6/ostream ****       */
 269:/usr/include/c++/6/ostream ****       __ostream_type&
 270:/usr/include/c++/6/ostream ****       operator<<(__streambuf_type* __sb);
 271:/usr/include/c++/6/ostream ****       //@}
 272:/usr/include/c++/6/ostream **** 
 273:/usr/include/c++/6/ostream ****       //@{
 274:/usr/include/c++/6/ostream ****       /**
 275:/usr/include/c++/6/ostream ****        *  @name Unformatted Output Functions
 276:/usr/include/c++/6/ostream ****        *
 277:/usr/include/c++/6/ostream ****        *  All the unformatted output functions have some common behavior.
 278:/usr/include/c++/6/ostream ****        *  Each starts by constructing a temporary object of type
 279:/usr/include/c++/6/ostream ****        *  std::basic_ostream::sentry.  This has several effects, concluding
 280:/usr/include/c++/6/ostream ****        *  with the setting of a status flag; see the sentry documentation
 281:/usr/include/c++/6/ostream ****        *  for more.
 282:/usr/include/c++/6/ostream ****        *
 283:/usr/include/c++/6/ostream ****        *  If the sentry status is good, the function tries to generate
 284:/usr/include/c++/6/ostream ****        *  whatever data is appropriate for the type of the argument.
 285:/usr/include/c++/6/ostream ****        *
 286:/usr/include/c++/6/ostream ****        *  If an exception is thrown during insertion, ios_base::badbit
 287:/usr/include/c++/6/ostream ****        *  will be turned on in the stream's error state.  If badbit is on in
 288:/usr/include/c++/6/ostream ****        *  the stream's exceptions mask, the exception will be rethrown
 289:/usr/include/c++/6/ostream ****        *  without completing its actions.
 290:/usr/include/c++/6/ostream ****       */
 291:/usr/include/c++/6/ostream **** 
 292:/usr/include/c++/6/ostream ****       /**
 293:/usr/include/c++/6/ostream ****        *  @brief  Simple insertion.
 294:/usr/include/c++/6/ostream ****        *  @param  __c  The character to insert.
 295:/usr/include/c++/6/ostream ****        *  @return  *this
 296:/usr/include/c++/6/ostream ****        *
 297:/usr/include/c++/6/ostream ****        *  Tries to insert @p __c.
 298:/usr/include/c++/6/ostream ****        *
 299:/usr/include/c++/6/ostream ****        *  @note  This function is not overloaded on signed char and
 300:/usr/include/c++/6/ostream ****        *         unsigned char.
 301:/usr/include/c++/6/ostream ****       */
 302:/usr/include/c++/6/ostream ****       __ostream_type&
 303:/usr/include/c++/6/ostream ****       put(char_type __c);
 304:/usr/include/c++/6/ostream **** 
 305:/usr/include/c++/6/ostream ****       /**
 306:/usr/include/c++/6/ostream ****        *  @brief  Core write functionality, without sentry.
 307:/usr/include/c++/6/ostream ****        *  @param  __s  The array to insert.
 308:/usr/include/c++/6/ostream ****        *  @param  __n  Maximum number of characters to insert.
 309:/usr/include/c++/6/ostream ****       */
 310:/usr/include/c++/6/ostream ****       void
 311:/usr/include/c++/6/ostream ****       _M_write(const char_type* __s, streamsize __n)
 312:/usr/include/c++/6/ostream ****       {
 313:/usr/include/c++/6/ostream **** 	const streamsize __put = this->rdbuf()->sputn(__s, __n);
 314:/usr/include/c++/6/ostream **** 	if (__put != __n)
 315:/usr/include/c++/6/ostream **** 	  this->setstate(ios_base::badbit);
 316:/usr/include/c++/6/ostream ****       }
 317:/usr/include/c++/6/ostream **** 
 318:/usr/include/c++/6/ostream ****       /**
 319:/usr/include/c++/6/ostream ****        *  @brief  Character string insertion.
 320:/usr/include/c++/6/ostream ****        *  @param  __s  The array to insert.
 321:/usr/include/c++/6/ostream ****        *  @param  __n  Maximum number of characters to insert.
 322:/usr/include/c++/6/ostream ****        *  @return  *this
 323:/usr/include/c++/6/ostream ****        *
GAS LISTING /tmp/ccvmoMuv.s 			page 300


 324:/usr/include/c++/6/ostream ****        *  Characters are copied from @p __s and inserted into the stream until
 325:/usr/include/c++/6/ostream ****        *  one of the following happens:
 326:/usr/include/c++/6/ostream ****        *
 327:/usr/include/c++/6/ostream ****        *  - @p __n characters are inserted
 328:/usr/include/c++/6/ostream ****        *  - inserting into the output sequence fails (in this case, badbit
 329:/usr/include/c++/6/ostream ****        *    will be set in the stream's error state)
 330:/usr/include/c++/6/ostream ****        *
 331:/usr/include/c++/6/ostream ****        *  @note  This function is not overloaded on signed char and
 332:/usr/include/c++/6/ostream ****        *         unsigned char.
 333:/usr/include/c++/6/ostream ****       */
 334:/usr/include/c++/6/ostream ****       __ostream_type&
 335:/usr/include/c++/6/ostream ****       write(const char_type* __s, streamsize __n);
 336:/usr/include/c++/6/ostream ****       //@}
 337:/usr/include/c++/6/ostream **** 
 338:/usr/include/c++/6/ostream ****       /**
 339:/usr/include/c++/6/ostream ****        *  @brief  Synchronizing the stream buffer.
 340:/usr/include/c++/6/ostream ****        *  @return  *this
 341:/usr/include/c++/6/ostream ****        *
 342:/usr/include/c++/6/ostream ****        *  If @c rdbuf() is a null pointer, changes nothing.
 343:/usr/include/c++/6/ostream ****        *
 344:/usr/include/c++/6/ostream ****        *  Otherwise, calls @c rdbuf()->pubsync(), and if that returns -1,
 345:/usr/include/c++/6/ostream ****        *  sets badbit.
 346:/usr/include/c++/6/ostream ****       */
 347:/usr/include/c++/6/ostream ****       __ostream_type&
 348:/usr/include/c++/6/ostream ****       flush();
 349:/usr/include/c++/6/ostream **** 
 350:/usr/include/c++/6/ostream ****       /**
 351:/usr/include/c++/6/ostream ****        *  @brief  Getting the current write position.
 352:/usr/include/c++/6/ostream ****        *  @return  A file position object.
 353:/usr/include/c++/6/ostream ****        *
 354:/usr/include/c++/6/ostream ****        *  If @c fail() is not false, returns @c pos_type(-1) to indicate
 355:/usr/include/c++/6/ostream ****        *  failure.  Otherwise returns @c rdbuf()->pubseekoff(0,cur,out).
 356:/usr/include/c++/6/ostream ****       */
 357:/usr/include/c++/6/ostream ****       pos_type
 358:/usr/include/c++/6/ostream ****       tellp();
 359:/usr/include/c++/6/ostream **** 
 360:/usr/include/c++/6/ostream ****       /**
 361:/usr/include/c++/6/ostream ****        *  @brief  Changing the current write position.
 362:/usr/include/c++/6/ostream ****        *  @param  __pos  A file position object.
 363:/usr/include/c++/6/ostream ****        *  @return  *this
 364:/usr/include/c++/6/ostream ****        *
 365:/usr/include/c++/6/ostream ****        *  If @c fail() is not true, calls @c rdbuf()->pubseekpos(pos).  If
 366:/usr/include/c++/6/ostream ****        *  that function fails, sets failbit.
 367:/usr/include/c++/6/ostream ****       */
 368:/usr/include/c++/6/ostream ****       __ostream_type&
 369:/usr/include/c++/6/ostream ****       seekp(pos_type);
 370:/usr/include/c++/6/ostream **** 
 371:/usr/include/c++/6/ostream ****       /**
 372:/usr/include/c++/6/ostream ****        *  @brief  Changing the current write position.
 373:/usr/include/c++/6/ostream ****        *  @param  __off  A file offset object.
 374:/usr/include/c++/6/ostream ****        *  @param  __dir  The direction in which to seek.
 375:/usr/include/c++/6/ostream ****        *  @return  *this
 376:/usr/include/c++/6/ostream ****        *
 377:/usr/include/c++/6/ostream ****        *  If @c fail() is not true, calls @c rdbuf()->pubseekoff(off,dir).
 378:/usr/include/c++/6/ostream ****        *  If that function fails, sets failbit.
 379:/usr/include/c++/6/ostream ****       */
 380:/usr/include/c++/6/ostream ****        __ostream_type&
GAS LISTING /tmp/ccvmoMuv.s 			page 301


 381:/usr/include/c++/6/ostream ****       seekp(off_type, ios_base::seekdir);
 382:/usr/include/c++/6/ostream **** 
 383:/usr/include/c++/6/ostream ****     protected:
 384:/usr/include/c++/6/ostream ****       basic_ostream()
 385:/usr/include/c++/6/ostream ****       { this->init(0); }
 3598              		.loc 31 385 0
 3599 0042 4C89EF   		movq	%r13, %rdi
 3600              	.LBE14047:
 3601              	.LBE14046:
 3602              	.LBB14051:
 3603              	.LBB14043:
 3604              	.LBB14040:
 3605              		.loc 30 462 0
 3606 0045 48C78424 		movq	$0, 488(%rsp)
 3606      E8010000 
 3606      00000000 
 3607 0051 C68424F1 		movb	$0, 497(%rsp)
 3607      01000000 
 3608              	.LBE14040:
 3609              	.LBE14043:
 3610              	.LBE14051:
 3611              	.LBB14052:
 3612              	.LBB14048:
 3613              		.loc 31 385 0
 3614 0059 31F6     		xorl	%esi, %esi
 3615              	.LBE14048:
 3616              	.LBE14052:
 3617              	.LBB14053:
 3618              	.LBB14044:
 3619              	.LBB14041:
 3620              		.loc 30 462 0
 3621 005b 48898424 		movq	%rax, 272(%rsp)
 3621      10010000 
 3622              	.LBE14041:
 3623              	.LBE14044:
 3624              	.LBE14053:
 3625              	.LBB14054:
 3626              	.LBB14049:
 3627              		.loc 31 385 0
 3628 0063 488B0500 		movq	8+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax
 3628      000000
 3629              	.LBE14049:
 3630              	.LBE14054:
 3631              	.LBB14055:
 3632              	.LBB14045:
 3633              	.LBB14042:
 3634              		.loc 30 462 0
 3635 006a 48C78424 		movq	$0, 504(%rsp)
 3635      F8010000 
 3635      00000000 
 3636 0076 48C78424 		movq	$0, 512(%rsp)
 3636      00020000 
 3636      00000000 
 3637 0082 48C78424 		movq	$0, 520(%rsp)
 3637      08020000 
 3637      00000000 
 3638 008e 48C78424 		movq	$0, 528(%rsp)
GAS LISTING /tmp/ccvmoMuv.s 			page 302


 3638      10020000 
 3638      00000000 
 3639              	.LVL319:
 3640              	.LBE14042:
 3641              	.LBE14045:
 3642              	.LBE14055:
 3643              	.LBB14056:
 3644              	.LBB14050:
 3645              		.loc 31 385 0
 3646 009a 480378E8 		addq	-24(%rax), %rdi
 3647 009e 48898424 		movq	%rax, 160(%rsp)
 3647      A0000000 
 3648 00a6 488B0500 		movq	16+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax
 3648      000000
 3649 00ad 488907   		movq	%rax, (%rdi)
 3650              	.LEHB14:
 3651 00b0 E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@PLT
 3651      00
 3652              	.LVL320:
 3653              	.LEHE14:
 3654              	.LBE14050:
 3655              	.LBE14056:
 3656              		.file 32 "/usr/include/c++/6/sstream"
   1:/usr/include/c++/6/sstream **** // String based streams -*- C++ -*-
   2:/usr/include/c++/6/sstream **** 
   3:/usr/include/c++/6/sstream **** // Copyright (C) 1997-2016 Free Software Foundation, Inc.
   4:/usr/include/c++/6/sstream **** //
   5:/usr/include/c++/6/sstream **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/6/sstream **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/6/sstream **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/6/sstream **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/6/sstream **** // any later version.
  10:/usr/include/c++/6/sstream **** 
  11:/usr/include/c++/6/sstream **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/6/sstream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/6/sstream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/6/sstream **** // GNU General Public License for more details.
  15:/usr/include/c++/6/sstream **** 
  16:/usr/include/c++/6/sstream **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/6/sstream **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/6/sstream **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/6/sstream **** 
  20:/usr/include/c++/6/sstream **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/6/sstream **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/6/sstream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/6/sstream **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/6/sstream **** 
  25:/usr/include/c++/6/sstream **** /** @file include/sstream
  26:/usr/include/c++/6/sstream ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/6/sstream ****  */
  28:/usr/include/c++/6/sstream **** 
  29:/usr/include/c++/6/sstream **** //
  30:/usr/include/c++/6/sstream **** // ISO C++ 14882: 27.7  String-based streams
  31:/usr/include/c++/6/sstream **** //
  32:/usr/include/c++/6/sstream **** 
  33:/usr/include/c++/6/sstream **** #ifndef _GLIBCXX_SSTREAM
  34:/usr/include/c++/6/sstream **** #define _GLIBCXX_SSTREAM 1
GAS LISTING /tmp/ccvmoMuv.s 			page 303


  35:/usr/include/c++/6/sstream **** 
  36:/usr/include/c++/6/sstream **** #pragma GCC system_header
  37:/usr/include/c++/6/sstream **** 
  38:/usr/include/c++/6/sstream **** #include <istream>
  39:/usr/include/c++/6/sstream **** #include <ostream>
  40:/usr/include/c++/6/sstream **** 
  41:/usr/include/c++/6/sstream **** namespace std _GLIBCXX_VISIBILITY(default)
  42:/usr/include/c++/6/sstream **** {
  43:/usr/include/c++/6/sstream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/c++/6/sstream **** _GLIBCXX_BEGIN_NAMESPACE_CXX11
  45:/usr/include/c++/6/sstream **** 
  46:/usr/include/c++/6/sstream ****   // [27.7.1] template class basic_stringbuf
  47:/usr/include/c++/6/sstream ****   /**
  48:/usr/include/c++/6/sstream ****    *  @brief  The actual work of input and output (for std::string).
  49:/usr/include/c++/6/sstream ****    *  @ingroup io
  50:/usr/include/c++/6/sstream ****    *
  51:/usr/include/c++/6/sstream ****    *  @tparam _CharT  Type of character stream.
  52:/usr/include/c++/6/sstream ****    *  @tparam _Traits  Traits for character type, defaults to
  53:/usr/include/c++/6/sstream ****    *                   char_traits<_CharT>.
  54:/usr/include/c++/6/sstream ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
  55:/usr/include/c++/6/sstream ****    *
  56:/usr/include/c++/6/sstream ****    *  This class associates either or both of its input and output sequences
  57:/usr/include/c++/6/sstream ****    *  with a sequence of characters, which can be initialized from, or made
  58:/usr/include/c++/6/sstream ****    *  available as, a @c std::basic_string.  (Paraphrased from [27.7.1]/1.)
  59:/usr/include/c++/6/sstream ****    *
  60:/usr/include/c++/6/sstream ****    *  For this class, open modes (of type @c ios_base::openmode) have
  61:/usr/include/c++/6/sstream ****    *  @c in set if the input sequence can be read, and @c out set if the
  62:/usr/include/c++/6/sstream ****    *  output sequence can be written.
  63:/usr/include/c++/6/sstream ****   */
  64:/usr/include/c++/6/sstream ****   template<typename _CharT, typename _Traits, typename _Alloc>
  65:/usr/include/c++/6/sstream ****     class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
  66:/usr/include/c++/6/sstream ****     {
  67:/usr/include/c++/6/sstream ****       struct __xfer_bufptrs;
  68:/usr/include/c++/6/sstream ****     public:
  69:/usr/include/c++/6/sstream ****       // Types:
  70:/usr/include/c++/6/sstream ****       typedef _CharT 					char_type;
  71:/usr/include/c++/6/sstream ****       typedef _Traits 					traits_type;
  72:/usr/include/c++/6/sstream ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  73:/usr/include/c++/6/sstream ****       // 251. basic_stringbuf missing allocator_type
  74:/usr/include/c++/6/sstream ****       typedef _Alloc				       	allocator_type;
  75:/usr/include/c++/6/sstream ****       typedef typename traits_type::int_type 		int_type;
  76:/usr/include/c++/6/sstream ****       typedef typename traits_type::pos_type 		pos_type;
  77:/usr/include/c++/6/sstream ****       typedef typename traits_type::off_type 		off_type;
  78:/usr/include/c++/6/sstream **** 
  79:/usr/include/c++/6/sstream ****       typedef basic_streambuf<char_type, traits_type>  	__streambuf_type;
  80:/usr/include/c++/6/sstream ****       typedef basic_string<char_type, _Traits, _Alloc> 	__string_type;
  81:/usr/include/c++/6/sstream ****       typedef typename __string_type::size_type		__size_type;
  82:/usr/include/c++/6/sstream **** 
  83:/usr/include/c++/6/sstream ****     protected:
  84:/usr/include/c++/6/sstream ****       /// Place to stash in || out || in | out settings for current stringbuf.
  85:/usr/include/c++/6/sstream ****       ios_base::openmode 	_M_mode;
  86:/usr/include/c++/6/sstream **** 
  87:/usr/include/c++/6/sstream ****       // Data Members:
  88:/usr/include/c++/6/sstream ****       __string_type 		_M_string;
  89:/usr/include/c++/6/sstream **** 
  90:/usr/include/c++/6/sstream ****     public:
  91:/usr/include/c++/6/sstream ****       // Constructors:
GAS LISTING /tmp/ccvmoMuv.s 			page 304


  92:/usr/include/c++/6/sstream ****       /**
  93:/usr/include/c++/6/sstream ****        *  @brief  Starts with an empty string buffer.
  94:/usr/include/c++/6/sstream ****        *  @param  __mode  Whether the buffer can read, or write, or both.
  95:/usr/include/c++/6/sstream ****        *
  96:/usr/include/c++/6/sstream ****        *  The default constructor initializes the parent class using its
  97:/usr/include/c++/6/sstream ****        *  own default ctor.
  98:/usr/include/c++/6/sstream ****       */
  99:/usr/include/c++/6/sstream ****       explicit
 100:/usr/include/c++/6/sstream ****       basic_stringbuf(ios_base::openmode __mode = ios_base::in | ios_base::out)
 101:/usr/include/c++/6/sstream ****       : __streambuf_type(), _M_mode(__mode), _M_string()
 102:/usr/include/c++/6/sstream ****       { }
 103:/usr/include/c++/6/sstream **** 
 104:/usr/include/c++/6/sstream ****       /**
 105:/usr/include/c++/6/sstream ****        *  @brief  Starts with an existing string buffer.
 106:/usr/include/c++/6/sstream ****        *  @param  __str  A string to copy as a starting buffer.
 107:/usr/include/c++/6/sstream ****        *  @param  __mode  Whether the buffer can read, or write, or both.
 108:/usr/include/c++/6/sstream ****        *
 109:/usr/include/c++/6/sstream ****        *  This constructor initializes the parent class using its
 110:/usr/include/c++/6/sstream ****        *  own default ctor.
 111:/usr/include/c++/6/sstream ****       */
 112:/usr/include/c++/6/sstream ****       explicit
 113:/usr/include/c++/6/sstream ****       basic_stringbuf(const __string_type& __str,
 114:/usr/include/c++/6/sstream **** 		      ios_base::openmode __mode = ios_base::in | ios_base::out)
 115:/usr/include/c++/6/sstream ****       : __streambuf_type(), _M_mode(), _M_string(__str.data(), __str.size())
 116:/usr/include/c++/6/sstream ****       { _M_stringbuf_init(__mode); }
 117:/usr/include/c++/6/sstream **** 
 118:/usr/include/c++/6/sstream **** #if __cplusplus >= 201103L
 119:/usr/include/c++/6/sstream ****       basic_stringbuf(const basic_stringbuf&) = delete;
 120:/usr/include/c++/6/sstream **** 
 121:/usr/include/c++/6/sstream ****       basic_stringbuf(basic_stringbuf&& __rhs)
 122:/usr/include/c++/6/sstream ****       : basic_stringbuf(std::move(__rhs), __xfer_bufptrs(__rhs, this))
 123:/usr/include/c++/6/sstream ****       { __rhs._M_sync(const_cast<char_type*>(__rhs._M_string.data()), 0, 0); }
 124:/usr/include/c++/6/sstream **** 
 125:/usr/include/c++/6/sstream ****       // 27.8.2.2 Assign and swap:
 126:/usr/include/c++/6/sstream **** 
 127:/usr/include/c++/6/sstream ****       basic_stringbuf&
 128:/usr/include/c++/6/sstream ****       operator=(const basic_stringbuf&) = delete;
 129:/usr/include/c++/6/sstream **** 
 130:/usr/include/c++/6/sstream ****       basic_stringbuf&
 131:/usr/include/c++/6/sstream ****       operator=(basic_stringbuf&& __rhs)
 132:/usr/include/c++/6/sstream ****       {
 133:/usr/include/c++/6/sstream **** 	__xfer_bufptrs __st{__rhs, this};
 134:/usr/include/c++/6/sstream **** 	const __streambuf_type& __base = __rhs;
 135:/usr/include/c++/6/sstream **** 	__streambuf_type::operator=(__base);
 136:/usr/include/c++/6/sstream **** 	this->pubimbue(__rhs.getloc());
 137:/usr/include/c++/6/sstream **** 	_M_mode = __rhs._M_mode;
 138:/usr/include/c++/6/sstream **** 	_M_string = std::move(__rhs._M_string);
 139:/usr/include/c++/6/sstream **** 	__rhs._M_sync(const_cast<char_type*>(__rhs._M_string.data()), 0, 0);
 140:/usr/include/c++/6/sstream **** 	return *this;
 141:/usr/include/c++/6/sstream ****       }
 142:/usr/include/c++/6/sstream **** 
 143:/usr/include/c++/6/sstream ****       void
 144:/usr/include/c++/6/sstream ****       swap(basic_stringbuf& __rhs)
 145:/usr/include/c++/6/sstream ****       {
 146:/usr/include/c++/6/sstream **** 	__xfer_bufptrs __l_st{*this, std::__addressof(__rhs)};
 147:/usr/include/c++/6/sstream **** 	__xfer_bufptrs __r_st{__rhs, this};
 148:/usr/include/c++/6/sstream **** 	__streambuf_type& __base = __rhs;
GAS LISTING /tmp/ccvmoMuv.s 			page 305


 149:/usr/include/c++/6/sstream **** 	__streambuf_type::swap(__base);
 150:/usr/include/c++/6/sstream **** 	__rhs.pubimbue(this->pubimbue(__rhs.getloc()));
 151:/usr/include/c++/6/sstream **** 	std::swap(_M_mode, __rhs._M_mode);
 152:/usr/include/c++/6/sstream **** 	std::swap(_M_string, __rhs._M_string);
 153:/usr/include/c++/6/sstream ****       }
 154:/usr/include/c++/6/sstream **** #endif
 155:/usr/include/c++/6/sstream **** 
 156:/usr/include/c++/6/sstream ****       // Get and set:
 157:/usr/include/c++/6/sstream ****       /**
 158:/usr/include/c++/6/sstream ****        *  @brief  Copying out the string buffer.
 159:/usr/include/c++/6/sstream ****        *  @return  A copy of one of the underlying sequences.
 160:/usr/include/c++/6/sstream ****        *
 161:/usr/include/c++/6/sstream ****        *  <em>If the buffer is only created in input mode, the underlying
 162:/usr/include/c++/6/sstream ****        *  character sequence is equal to the input sequence; otherwise, it
 163:/usr/include/c++/6/sstream ****        *  is equal to the output sequence.</em> [27.7.1.2]/1
 164:/usr/include/c++/6/sstream ****       */
 165:/usr/include/c++/6/sstream ****       __string_type
 166:/usr/include/c++/6/sstream ****       str() const
 167:/usr/include/c++/6/sstream ****       {
 168:/usr/include/c++/6/sstream **** 	__string_type __ret;
 169:/usr/include/c++/6/sstream **** 	if (this->pptr())
 170:/usr/include/c++/6/sstream **** 	  {
 171:/usr/include/c++/6/sstream **** 	    // The current egptr() may not be the actual string end.
 172:/usr/include/c++/6/sstream **** 	    if (this->pptr() > this->egptr())
 173:/usr/include/c++/6/sstream **** 	      __ret = __string_type(this->pbase(), this->pptr());
 174:/usr/include/c++/6/sstream **** 	    else
 175:/usr/include/c++/6/sstream ****  	      __ret = __string_type(this->pbase(), this->egptr());
 176:/usr/include/c++/6/sstream **** 	  }
 177:/usr/include/c++/6/sstream **** 	else
 178:/usr/include/c++/6/sstream **** 	  __ret = _M_string;
 179:/usr/include/c++/6/sstream **** 	return __ret;
 180:/usr/include/c++/6/sstream ****       }
 181:/usr/include/c++/6/sstream **** 
 182:/usr/include/c++/6/sstream ****       /**
 183:/usr/include/c++/6/sstream ****        *  @brief  Setting a new buffer.
 184:/usr/include/c++/6/sstream ****        *  @param  __s  The string to use as a new sequence.
 185:/usr/include/c++/6/sstream ****        *
 186:/usr/include/c++/6/sstream ****        *  Deallocates any previous stored sequence, then copies @a s to
 187:/usr/include/c++/6/sstream ****        *  use as a new one.
 188:/usr/include/c++/6/sstream ****       */
 189:/usr/include/c++/6/sstream ****       void
 190:/usr/include/c++/6/sstream ****       str(const __string_type& __s)
 191:/usr/include/c++/6/sstream ****       {
 192:/usr/include/c++/6/sstream **** 	// Cannot use _M_string = __s, since v3 strings are COW
 193:/usr/include/c++/6/sstream **** 	// (not always true now but assign() always works).
 194:/usr/include/c++/6/sstream **** 	_M_string.assign(__s.data(), __s.size());
 195:/usr/include/c++/6/sstream **** 	_M_stringbuf_init(_M_mode);
 196:/usr/include/c++/6/sstream ****       }
 197:/usr/include/c++/6/sstream **** 
 198:/usr/include/c++/6/sstream ****     protected:
 199:/usr/include/c++/6/sstream ****       // Common initialization code goes here.
 200:/usr/include/c++/6/sstream ****       void
 201:/usr/include/c++/6/sstream ****       _M_stringbuf_init(ios_base::openmode __mode)
 202:/usr/include/c++/6/sstream ****       {
 203:/usr/include/c++/6/sstream **** 	_M_mode = __mode;
 204:/usr/include/c++/6/sstream **** 	__size_type __len = 0;
 205:/usr/include/c++/6/sstream **** 	if (_M_mode & (ios_base::ate | ios_base::app))
GAS LISTING /tmp/ccvmoMuv.s 			page 306


 206:/usr/include/c++/6/sstream **** 	  __len = _M_string.size();
 207:/usr/include/c++/6/sstream **** 	_M_sync(const_cast<char_type*>(_M_string.data()), 0, __len);
 208:/usr/include/c++/6/sstream ****       }
 209:/usr/include/c++/6/sstream **** 
 210:/usr/include/c++/6/sstream ****       virtual streamsize
 211:/usr/include/c++/6/sstream ****       showmanyc()
 212:/usr/include/c++/6/sstream ****       { 
 213:/usr/include/c++/6/sstream **** 	streamsize __ret = -1;
 214:/usr/include/c++/6/sstream **** 	if (_M_mode & ios_base::in)
 215:/usr/include/c++/6/sstream **** 	  {
 216:/usr/include/c++/6/sstream **** 	    _M_update_egptr();
 217:/usr/include/c++/6/sstream **** 	    __ret = this->egptr() - this->gptr();
 218:/usr/include/c++/6/sstream **** 	  }
 219:/usr/include/c++/6/sstream **** 	return __ret;
 220:/usr/include/c++/6/sstream ****       }
 221:/usr/include/c++/6/sstream **** 
 222:/usr/include/c++/6/sstream ****       virtual int_type
 223:/usr/include/c++/6/sstream ****       underflow();
 224:/usr/include/c++/6/sstream **** 
 225:/usr/include/c++/6/sstream ****       virtual int_type
 226:/usr/include/c++/6/sstream ****       pbackfail(int_type __c = traits_type::eof());
 227:/usr/include/c++/6/sstream **** 
 228:/usr/include/c++/6/sstream ****       virtual int_type
 229:/usr/include/c++/6/sstream ****       overflow(int_type __c = traits_type::eof());
 230:/usr/include/c++/6/sstream **** 
 231:/usr/include/c++/6/sstream ****       /**
 232:/usr/include/c++/6/sstream ****        *  @brief  Manipulates the buffer.
 233:/usr/include/c++/6/sstream ****        *  @param  __s  Pointer to a buffer area.
 234:/usr/include/c++/6/sstream ****        *  @param  __n  Size of @a __s.
 235:/usr/include/c++/6/sstream ****        *  @return  @c this
 236:/usr/include/c++/6/sstream ****        *
 237:/usr/include/c++/6/sstream ****        *  If no buffer has already been created, and both @a __s and @a __n are
 238:/usr/include/c++/6/sstream ****        *  non-zero, then @c __s is used as a buffer; see
 239:/usr/include/c++/6/sstream ****        *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/streambufs.html#io.streambuf.buffering
 240:/usr/include/c++/6/sstream ****        *  for more.
 241:/usr/include/c++/6/sstream ****       */
 242:/usr/include/c++/6/sstream ****       virtual __streambuf_type*
 243:/usr/include/c++/6/sstream ****       setbuf(char_type* __s, streamsize __n)
 244:/usr/include/c++/6/sstream ****       {
 245:/usr/include/c++/6/sstream **** 	if (__s && __n >= 0)
 246:/usr/include/c++/6/sstream **** 	  {
 247:/usr/include/c++/6/sstream **** 	    // This is implementation-defined behavior, and assumes
 248:/usr/include/c++/6/sstream **** 	    // that an external char_type array of length __n exists
 249:/usr/include/c++/6/sstream **** 	    // and has been pre-allocated. If this is not the case,
 250:/usr/include/c++/6/sstream **** 	    // things will quickly blow up.
 251:/usr/include/c++/6/sstream **** 	    
 252:/usr/include/c++/6/sstream **** 	    // Step 1: Destroy the current internal array.
 253:/usr/include/c++/6/sstream **** 	    _M_string.clear();
 254:/usr/include/c++/6/sstream **** 	    
 255:/usr/include/c++/6/sstream **** 	    // Step 2: Use the external array.
 256:/usr/include/c++/6/sstream **** 	    _M_sync(__s, __n, 0);
 257:/usr/include/c++/6/sstream **** 	  }
 258:/usr/include/c++/6/sstream **** 	return this;
 259:/usr/include/c++/6/sstream ****       }
 260:/usr/include/c++/6/sstream **** 
 261:/usr/include/c++/6/sstream ****       virtual pos_type
 262:/usr/include/c++/6/sstream ****       seekoff(off_type __off, ios_base::seekdir __way,
GAS LISTING /tmp/ccvmoMuv.s 			page 307


 263:/usr/include/c++/6/sstream **** 	      ios_base::openmode __mode = ios_base::in | ios_base::out);
 264:/usr/include/c++/6/sstream **** 
 265:/usr/include/c++/6/sstream ****       virtual pos_type
 266:/usr/include/c++/6/sstream ****       seekpos(pos_type __sp,
 267:/usr/include/c++/6/sstream **** 	      ios_base::openmode __mode = ios_base::in | ios_base::out);
 268:/usr/include/c++/6/sstream **** 
 269:/usr/include/c++/6/sstream ****       // Internal function for correctly updating the internal buffer
 270:/usr/include/c++/6/sstream ****       // for a particular _M_string, due to initialization or re-sizing
 271:/usr/include/c++/6/sstream ****       // of an existing _M_string.
 272:/usr/include/c++/6/sstream ****       void
 273:/usr/include/c++/6/sstream ****       _M_sync(char_type* __base, __size_type __i, __size_type __o);
 274:/usr/include/c++/6/sstream **** 
 275:/usr/include/c++/6/sstream ****       // Internal function for correctly updating egptr() to the actual
 276:/usr/include/c++/6/sstream ****       // string end.
 277:/usr/include/c++/6/sstream ****       void
 278:/usr/include/c++/6/sstream ****       _M_update_egptr()
 279:/usr/include/c++/6/sstream ****       {
 280:/usr/include/c++/6/sstream **** 	const bool __testin = _M_mode & ios_base::in;
 281:/usr/include/c++/6/sstream **** 	if (this->pptr() && this->pptr() > this->egptr())
 282:/usr/include/c++/6/sstream **** 	  {
 283:/usr/include/c++/6/sstream **** 	    if (__testin)
 284:/usr/include/c++/6/sstream **** 	      this->setg(this->eback(), this->gptr(), this->pptr());
 285:/usr/include/c++/6/sstream **** 	    else
 286:/usr/include/c++/6/sstream **** 	      this->setg(this->pptr(), this->pptr(), this->pptr());
 287:/usr/include/c++/6/sstream **** 	  }
 288:/usr/include/c++/6/sstream ****       }
 289:/usr/include/c++/6/sstream **** 
 290:/usr/include/c++/6/sstream ****       // Works around the issue with pbump, part of the protected
 291:/usr/include/c++/6/sstream ****       // interface of basic_streambuf, taking just an int.
 292:/usr/include/c++/6/sstream ****       void
 293:/usr/include/c++/6/sstream ****       _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off);
 294:/usr/include/c++/6/sstream **** 
 295:/usr/include/c++/6/sstream ****     private:
 296:/usr/include/c++/6/sstream **** #if __cplusplus >= 201103L
 297:/usr/include/c++/6/sstream **** #if _GLIBCXX_USE_CXX11_ABI
 298:/usr/include/c++/6/sstream ****       // This type captures the state of the gptr / pptr pointers as offsets
 299:/usr/include/c++/6/sstream ****       // so they can be restored in another object after moving the string.
 300:/usr/include/c++/6/sstream ****       struct __xfer_bufptrs
 301:/usr/include/c++/6/sstream ****       {
 302:/usr/include/c++/6/sstream **** 	__xfer_bufptrs(const basic_stringbuf& __from, basic_stringbuf* __to)
 303:/usr/include/c++/6/sstream **** 	: _M_to{__to}, _M_goff{-1, -1, -1}, _M_poff{-1, -1, -1}
 304:/usr/include/c++/6/sstream **** 	{
 305:/usr/include/c++/6/sstream **** 	  const _CharT* __str = __from._M_string.data();
 306:/usr/include/c++/6/sstream **** 	  if (__from.eback())
 307:/usr/include/c++/6/sstream **** 	    {
 308:/usr/include/c++/6/sstream **** 	    _M_goff[0] = __from.eback() - __str;
 309:/usr/include/c++/6/sstream **** 	    _M_goff[1] = __from.gptr() - __str;
 310:/usr/include/c++/6/sstream **** 	    _M_goff[2] = __from.egptr() - __str;
 311:/usr/include/c++/6/sstream **** 	    }
 312:/usr/include/c++/6/sstream **** 	  if (__from.pbase())
 313:/usr/include/c++/6/sstream **** 	    {
 314:/usr/include/c++/6/sstream **** 	      _M_poff[0] = __from.pbase() - __str;
 315:/usr/include/c++/6/sstream **** 	      _M_poff[1] = __from.pptr() - __from.pbase();
 316:/usr/include/c++/6/sstream **** 	      _M_poff[2] = __from.epptr() - __str;
 317:/usr/include/c++/6/sstream **** 	    }
 318:/usr/include/c++/6/sstream **** 	}
 319:/usr/include/c++/6/sstream **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 308


 320:/usr/include/c++/6/sstream **** 	~__xfer_bufptrs()
 321:/usr/include/c++/6/sstream **** 	{
 322:/usr/include/c++/6/sstream **** 	  char_type* __str = const_cast<char_type*>(_M_to->_M_string.data());
 323:/usr/include/c++/6/sstream **** 	  if (_M_goff[0] != -1)
 324:/usr/include/c++/6/sstream **** 	    _M_to->setg(__str+_M_goff[0], __str+_M_goff[1], __str+_M_goff[2]);
 325:/usr/include/c++/6/sstream **** 	  if (_M_poff[0] != -1)
 326:/usr/include/c++/6/sstream **** 	    _M_to->_M_pbump(__str+_M_poff[0], __str+_M_poff[2], _M_poff[1]);
 327:/usr/include/c++/6/sstream **** 	}
 328:/usr/include/c++/6/sstream **** 
 329:/usr/include/c++/6/sstream **** 	basic_stringbuf* _M_to;
 330:/usr/include/c++/6/sstream **** 	off_type _M_goff[3];
 331:/usr/include/c++/6/sstream **** 	off_type _M_poff[3];
 332:/usr/include/c++/6/sstream ****       };
 333:/usr/include/c++/6/sstream **** #else
 334:/usr/include/c++/6/sstream ****       // This type does nothing when using Copy-On-Write strings.
 335:/usr/include/c++/6/sstream ****       struct __xfer_bufptrs
 336:/usr/include/c++/6/sstream ****       {
 337:/usr/include/c++/6/sstream **** 	__xfer_bufptrs(const basic_stringbuf&, basic_stringbuf*) { }
 338:/usr/include/c++/6/sstream ****       };
 339:/usr/include/c++/6/sstream **** #endif
 340:/usr/include/c++/6/sstream **** 
 341:/usr/include/c++/6/sstream ****       // The move constructor initializes an __xfer_bufptrs temporary then
 342:/usr/include/c++/6/sstream ****       // delegates to this constructor to performs moves during its lifetime.
 343:/usr/include/c++/6/sstream ****       basic_stringbuf(basic_stringbuf&& __rhs, __xfer_bufptrs&&)
 344:/usr/include/c++/6/sstream ****       : __streambuf_type(static_cast<const __streambuf_type&>(__rhs)),
 345:/usr/include/c++/6/sstream ****       _M_mode(__rhs._M_mode), _M_string(std::move(__rhs._M_string))
 346:/usr/include/c++/6/sstream ****       { }
 347:/usr/include/c++/6/sstream **** #endif
 348:/usr/include/c++/6/sstream ****     };
 349:/usr/include/c++/6/sstream **** 
 350:/usr/include/c++/6/sstream **** 
 351:/usr/include/c++/6/sstream ****   // [27.7.2] Template class basic_istringstream
 352:/usr/include/c++/6/sstream ****   /**
 353:/usr/include/c++/6/sstream ****    *  @brief  Controlling input for std::string.
 354:/usr/include/c++/6/sstream ****    *  @ingroup io
 355:/usr/include/c++/6/sstream ****    *
 356:/usr/include/c++/6/sstream ****    *  @tparam _CharT  Type of character stream.
 357:/usr/include/c++/6/sstream ****    *  @tparam _Traits  Traits for character type, defaults to
 358:/usr/include/c++/6/sstream ****    *                   char_traits<_CharT>.
 359:/usr/include/c++/6/sstream ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
 360:/usr/include/c++/6/sstream ****    *
 361:/usr/include/c++/6/sstream ****    *  This class supports reading from objects of type std::basic_string,
 362:/usr/include/c++/6/sstream ****    *  using the inherited functions from std::basic_istream.  To control
 363:/usr/include/c++/6/sstream ****    *  the associated sequence, an instance of std::basic_stringbuf is used,
 364:/usr/include/c++/6/sstream ****    *  which this page refers to as @c sb.
 365:/usr/include/c++/6/sstream ****   */
 366:/usr/include/c++/6/sstream ****   template<typename _CharT, typename _Traits, typename _Alloc>
 367:/usr/include/c++/6/sstream ****     class basic_istringstream : public basic_istream<_CharT, _Traits>
 368:/usr/include/c++/6/sstream ****     {
 369:/usr/include/c++/6/sstream ****     public:
 370:/usr/include/c++/6/sstream ****       // Types:
 371:/usr/include/c++/6/sstream ****       typedef _CharT 					char_type;
 372:/usr/include/c++/6/sstream ****       typedef _Traits 					traits_type;
 373:/usr/include/c++/6/sstream ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 374:/usr/include/c++/6/sstream ****       // 251. basic_stringbuf missing allocator_type
 375:/usr/include/c++/6/sstream ****       typedef _Alloc				       	allocator_type;
 376:/usr/include/c++/6/sstream ****       typedef typename traits_type::int_type 		int_type;
GAS LISTING /tmp/ccvmoMuv.s 			page 309


 377:/usr/include/c++/6/sstream ****       typedef typename traits_type::pos_type 		pos_type;
 378:/usr/include/c++/6/sstream ****       typedef typename traits_type::off_type 		off_type;
 379:/usr/include/c++/6/sstream **** 
 380:/usr/include/c++/6/sstream ****       // Non-standard types:
 381:/usr/include/c++/6/sstream ****       typedef basic_string<_CharT, _Traits, _Alloc> 	__string_type;
 382:/usr/include/c++/6/sstream ****       typedef basic_stringbuf<_CharT, _Traits, _Alloc> 	__stringbuf_type;
 383:/usr/include/c++/6/sstream ****       typedef basic_istream<char_type, traits_type>	__istream_type;
 384:/usr/include/c++/6/sstream **** 
 385:/usr/include/c++/6/sstream ****     private:
 386:/usr/include/c++/6/sstream ****       __stringbuf_type	_M_stringbuf;
 387:/usr/include/c++/6/sstream **** 
 388:/usr/include/c++/6/sstream ****     public:
 389:/usr/include/c++/6/sstream ****       // Constructors:
 390:/usr/include/c++/6/sstream ****       /**
 391:/usr/include/c++/6/sstream ****        *  @brief  Default constructor starts with an empty string buffer.
 392:/usr/include/c++/6/sstream ****        *  @param  __mode  Whether the buffer can read, or write, or both.
 393:/usr/include/c++/6/sstream ****        *
 394:/usr/include/c++/6/sstream ****        *  @c ios_base::in is automatically included in @a __mode.
 395:/usr/include/c++/6/sstream ****        *
 396:/usr/include/c++/6/sstream ****        *  Initializes @c sb using @c __mode|in, and passes @c &sb to the base
 397:/usr/include/c++/6/sstream ****        *  class initializer.  Does not allocate any buffer.
 398:/usr/include/c++/6/sstream ****        *
 399:/usr/include/c++/6/sstream ****        *  That's a lie.  We initialize the base class with NULL, because the
 400:/usr/include/c++/6/sstream ****        *  string class does its own memory management.
 401:/usr/include/c++/6/sstream ****       */
 402:/usr/include/c++/6/sstream ****       explicit
 403:/usr/include/c++/6/sstream ****       basic_istringstream(ios_base::openmode __mode = ios_base::in)
 404:/usr/include/c++/6/sstream ****       : __istream_type(), _M_stringbuf(__mode | ios_base::in)
 405:/usr/include/c++/6/sstream ****       { this->init(&_M_stringbuf); }
 406:/usr/include/c++/6/sstream **** 
 407:/usr/include/c++/6/sstream ****       /**
 408:/usr/include/c++/6/sstream ****        *  @brief  Starts with an existing string buffer.
 409:/usr/include/c++/6/sstream ****        *  @param  __str  A string to copy as a starting buffer.
 410:/usr/include/c++/6/sstream ****        *  @param  __mode  Whether the buffer can read, or write, or both.
 411:/usr/include/c++/6/sstream ****        *
 412:/usr/include/c++/6/sstream ****        *  @c ios_base::in is automatically included in @a mode.
 413:/usr/include/c++/6/sstream ****        *
 414:/usr/include/c++/6/sstream ****        *  Initializes @c sb using @a str and @c mode|in, and passes @c &sb
 415:/usr/include/c++/6/sstream ****        *  to the base class initializer.
 416:/usr/include/c++/6/sstream ****        *
 417:/usr/include/c++/6/sstream ****        *  That's a lie.  We initialize the base class with NULL, because the
 418:/usr/include/c++/6/sstream ****        *  string class does its own memory management.
 419:/usr/include/c++/6/sstream ****       */
 420:/usr/include/c++/6/sstream ****       explicit
 421:/usr/include/c++/6/sstream ****       basic_istringstream(const __string_type& __str,
 422:/usr/include/c++/6/sstream **** 			  ios_base::openmode __mode = ios_base::in)
 423:/usr/include/c++/6/sstream ****       : __istream_type(), _M_stringbuf(__str, __mode | ios_base::in)
 424:/usr/include/c++/6/sstream ****       { this->init(&_M_stringbuf); }
 425:/usr/include/c++/6/sstream **** 
 426:/usr/include/c++/6/sstream ****       /**
 427:/usr/include/c++/6/sstream ****        *  @brief  The destructor does nothing.
 428:/usr/include/c++/6/sstream ****        *
 429:/usr/include/c++/6/sstream ****        *  The buffer is deallocated by the stringbuf object, not the
 430:/usr/include/c++/6/sstream ****        *  formatting stream.
 431:/usr/include/c++/6/sstream ****       */
 432:/usr/include/c++/6/sstream ****       ~basic_istringstream()
 433:/usr/include/c++/6/sstream ****       { }
GAS LISTING /tmp/ccvmoMuv.s 			page 310


 434:/usr/include/c++/6/sstream **** 
 435:/usr/include/c++/6/sstream **** #if __cplusplus >= 201103L
 436:/usr/include/c++/6/sstream ****       basic_istringstream(const basic_istringstream&) = delete;
 437:/usr/include/c++/6/sstream **** 
 438:/usr/include/c++/6/sstream ****       basic_istringstream(basic_istringstream&& __rhs)
 439:/usr/include/c++/6/sstream ****       : __istream_type(std::move(__rhs)),
 440:/usr/include/c++/6/sstream ****       _M_stringbuf(std::move(__rhs._M_stringbuf))
 441:/usr/include/c++/6/sstream ****       { __istream_type::set_rdbuf(&_M_stringbuf); }
 442:/usr/include/c++/6/sstream **** 
 443:/usr/include/c++/6/sstream ****       // 27.8.3.2 Assign and swap:
 444:/usr/include/c++/6/sstream **** 
 445:/usr/include/c++/6/sstream ****       basic_istringstream&
 446:/usr/include/c++/6/sstream ****       operator=(const basic_istringstream&) = delete;
 447:/usr/include/c++/6/sstream **** 
 448:/usr/include/c++/6/sstream ****       basic_istringstream&
 449:/usr/include/c++/6/sstream ****       operator=(basic_istringstream&& __rhs)
 450:/usr/include/c++/6/sstream ****       {
 451:/usr/include/c++/6/sstream **** 	__istream_type::operator=(std::move(__rhs));
 452:/usr/include/c++/6/sstream **** 	_M_stringbuf = std::move(__rhs._M_stringbuf);
 453:/usr/include/c++/6/sstream **** 	return *this;
 454:/usr/include/c++/6/sstream ****       }
 455:/usr/include/c++/6/sstream **** 
 456:/usr/include/c++/6/sstream ****       void
 457:/usr/include/c++/6/sstream ****       swap(basic_istringstream& __rhs)
 458:/usr/include/c++/6/sstream ****       {
 459:/usr/include/c++/6/sstream **** 	__istream_type::swap(__rhs);
 460:/usr/include/c++/6/sstream **** 	_M_stringbuf.swap(__rhs._M_stringbuf);
 461:/usr/include/c++/6/sstream ****       }
 462:/usr/include/c++/6/sstream **** #endif
 463:/usr/include/c++/6/sstream **** 
 464:/usr/include/c++/6/sstream ****       // Members:
 465:/usr/include/c++/6/sstream ****       /**
 466:/usr/include/c++/6/sstream ****        *  @brief  Accessing the underlying buffer.
 467:/usr/include/c++/6/sstream ****        *  @return  The current basic_stringbuf buffer.
 468:/usr/include/c++/6/sstream ****        *
 469:/usr/include/c++/6/sstream ****        *  This hides both signatures of std::basic_ios::rdbuf().
 470:/usr/include/c++/6/sstream ****       */
 471:/usr/include/c++/6/sstream ****       __stringbuf_type*
 472:/usr/include/c++/6/sstream ****       rdbuf() const
 473:/usr/include/c++/6/sstream ****       { return const_cast<__stringbuf_type*>(&_M_stringbuf); }
 474:/usr/include/c++/6/sstream **** 
 475:/usr/include/c++/6/sstream ****       /**
 476:/usr/include/c++/6/sstream ****        *  @brief  Copying out the string buffer.
 477:/usr/include/c++/6/sstream ****        *  @return  @c rdbuf()->str()
 478:/usr/include/c++/6/sstream ****       */
 479:/usr/include/c++/6/sstream ****       __string_type
 480:/usr/include/c++/6/sstream ****       str() const
 481:/usr/include/c++/6/sstream ****       { return _M_stringbuf.str(); }
 482:/usr/include/c++/6/sstream **** 
 483:/usr/include/c++/6/sstream ****       /**
 484:/usr/include/c++/6/sstream ****        *  @brief  Setting a new buffer.
 485:/usr/include/c++/6/sstream ****        *  @param  __s  The string to use as a new sequence.
 486:/usr/include/c++/6/sstream ****        *
 487:/usr/include/c++/6/sstream ****        *  Calls @c rdbuf()->str(s).
 488:/usr/include/c++/6/sstream ****       */
 489:/usr/include/c++/6/sstream ****       void
 490:/usr/include/c++/6/sstream ****       str(const __string_type& __s)
GAS LISTING /tmp/ccvmoMuv.s 			page 311


 491:/usr/include/c++/6/sstream ****       { _M_stringbuf.str(__s); }
 492:/usr/include/c++/6/sstream ****     };
 493:/usr/include/c++/6/sstream **** 
 494:/usr/include/c++/6/sstream **** 
 495:/usr/include/c++/6/sstream ****   // [27.7.3] Template class basic_ostringstream
 496:/usr/include/c++/6/sstream ****   /**
 497:/usr/include/c++/6/sstream ****    *  @brief  Controlling output for std::string.
 498:/usr/include/c++/6/sstream ****    *  @ingroup io
 499:/usr/include/c++/6/sstream ****    *
 500:/usr/include/c++/6/sstream ****    *  @tparam _CharT  Type of character stream.
 501:/usr/include/c++/6/sstream ****    *  @tparam _Traits  Traits for character type, defaults to
 502:/usr/include/c++/6/sstream ****    *                   char_traits<_CharT>.
 503:/usr/include/c++/6/sstream ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
 504:/usr/include/c++/6/sstream ****    *
 505:/usr/include/c++/6/sstream ****    *  This class supports writing to objects of type std::basic_string,
 506:/usr/include/c++/6/sstream ****    *  using the inherited functions from std::basic_ostream.  To control
 507:/usr/include/c++/6/sstream ****    *  the associated sequence, an instance of std::basic_stringbuf is used,
 508:/usr/include/c++/6/sstream ****    *  which this page refers to as @c sb.
 509:/usr/include/c++/6/sstream ****   */
 510:/usr/include/c++/6/sstream ****   template <typename _CharT, typename _Traits, typename _Alloc>
 511:/usr/include/c++/6/sstream ****     class basic_ostringstream : public basic_ostream<_CharT, _Traits>
 512:/usr/include/c++/6/sstream ****     {
 513:/usr/include/c++/6/sstream ****     public:
 514:/usr/include/c++/6/sstream ****       // Types:
 515:/usr/include/c++/6/sstream ****       typedef _CharT 					char_type;
 516:/usr/include/c++/6/sstream ****       typedef _Traits 					traits_type;
 517:/usr/include/c++/6/sstream ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 518:/usr/include/c++/6/sstream ****       // 251. basic_stringbuf missing allocator_type
 519:/usr/include/c++/6/sstream ****       typedef _Alloc				       	allocator_type;
 520:/usr/include/c++/6/sstream ****       typedef typename traits_type::int_type 		int_type;
 521:/usr/include/c++/6/sstream ****       typedef typename traits_type::pos_type 		pos_type;
 522:/usr/include/c++/6/sstream ****       typedef typename traits_type::off_type 		off_type;
 523:/usr/include/c++/6/sstream **** 
 524:/usr/include/c++/6/sstream ****       // Non-standard types:
 525:/usr/include/c++/6/sstream ****       typedef basic_string<_CharT, _Traits, _Alloc> 	__string_type;
 526:/usr/include/c++/6/sstream ****       typedef basic_stringbuf<_CharT, _Traits, _Alloc> 	__stringbuf_type;
 527:/usr/include/c++/6/sstream ****       typedef basic_ostream<char_type, traits_type>	__ostream_type;
 528:/usr/include/c++/6/sstream **** 
 529:/usr/include/c++/6/sstream ****     private:
 530:/usr/include/c++/6/sstream ****       __stringbuf_type	_M_stringbuf;
 531:/usr/include/c++/6/sstream **** 
 532:/usr/include/c++/6/sstream ****     public:
 533:/usr/include/c++/6/sstream ****       // Constructors/destructor:
 534:/usr/include/c++/6/sstream ****       /**
 535:/usr/include/c++/6/sstream ****        *  @brief  Default constructor starts with an empty string buffer.
 536:/usr/include/c++/6/sstream ****        *  @param  __mode  Whether the buffer can read, or write, or both.
 537:/usr/include/c++/6/sstream ****        *
 538:/usr/include/c++/6/sstream ****        *  @c ios_base::out is automatically included in @a mode.
 539:/usr/include/c++/6/sstream ****        *
 540:/usr/include/c++/6/sstream ****        *  Initializes @c sb using @c mode|out, and passes @c &sb to the base
 541:/usr/include/c++/6/sstream ****        *  class initializer.  Does not allocate any buffer.
 542:/usr/include/c++/6/sstream ****        *
 543:/usr/include/c++/6/sstream ****        *  That's a lie.  We initialize the base class with NULL, because the
 544:/usr/include/c++/6/sstream ****        *  string class does its own memory management.
 545:/usr/include/c++/6/sstream ****       */
 546:/usr/include/c++/6/sstream ****       explicit
 547:/usr/include/c++/6/sstream ****       basic_ostringstream(ios_base::openmode __mode = ios_base::out)
GAS LISTING /tmp/ccvmoMuv.s 			page 312


 548:/usr/include/c++/6/sstream ****       : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
 3657              		.loc 32 548 0
 3658 00b5 488D0500 		leaq	24+_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax
 3658      000000
 3659              	.LBB14057:
 3660              	.LBB14058:
 3661              	.LBB14059:
 3662              	.LBB14060:
 3663              	.LBB14061:
 3664              	.LBB14062:
 3665              		.file 33 "/usr/include/c++/6/streambuf"
   1:/usr/include/c++/6/streambuf **** // Stream buffer classes -*- C++ -*-
   2:/usr/include/c++/6/streambuf **** 
   3:/usr/include/c++/6/streambuf **** // Copyright (C) 1997-2016 Free Software Foundation, Inc.
   4:/usr/include/c++/6/streambuf **** //
   5:/usr/include/c++/6/streambuf **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/6/streambuf **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/6/streambuf **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/6/streambuf **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/6/streambuf **** // any later version.
  10:/usr/include/c++/6/streambuf **** 
  11:/usr/include/c++/6/streambuf **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/6/streambuf **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/6/streambuf **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/6/streambuf **** // GNU General Public License for more details.
  15:/usr/include/c++/6/streambuf **** 
  16:/usr/include/c++/6/streambuf **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/6/streambuf **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/6/streambuf **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/6/streambuf **** 
  20:/usr/include/c++/6/streambuf **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/6/streambuf **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/6/streambuf **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/6/streambuf **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/6/streambuf **** 
  25:/usr/include/c++/6/streambuf **** /** @file include/streambuf
  26:/usr/include/c++/6/streambuf ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/6/streambuf ****  */
  28:/usr/include/c++/6/streambuf **** 
  29:/usr/include/c++/6/streambuf **** //
  30:/usr/include/c++/6/streambuf **** // ISO C++ 14882: 27.5  Stream buffers
  31:/usr/include/c++/6/streambuf **** //
  32:/usr/include/c++/6/streambuf **** 
  33:/usr/include/c++/6/streambuf **** #ifndef _GLIBXX_STREAMBUF
  34:/usr/include/c++/6/streambuf **** #define _GLIBXX_STREAMBUF 1
  35:/usr/include/c++/6/streambuf **** 
  36:/usr/include/c++/6/streambuf **** #pragma GCC system_header
  37:/usr/include/c++/6/streambuf **** 
  38:/usr/include/c++/6/streambuf **** #include <bits/c++config.h>
  39:/usr/include/c++/6/streambuf **** #include <iosfwd>
  40:/usr/include/c++/6/streambuf **** #include <bits/localefwd.h>
  41:/usr/include/c++/6/streambuf **** #include <bits/ios_base.h>
  42:/usr/include/c++/6/streambuf **** #include <bits/cpp_type_traits.h>
  43:/usr/include/c++/6/streambuf **** #include <ext/type_traits.h>
  44:/usr/include/c++/6/streambuf **** 
  45:/usr/include/c++/6/streambuf **** namespace std _GLIBCXX_VISIBILITY(default)
  46:/usr/include/c++/6/streambuf **** {
GAS LISTING /tmp/ccvmoMuv.s 			page 313


  47:/usr/include/c++/6/streambuf **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  48:/usr/include/c++/6/streambuf **** 
  49:/usr/include/c++/6/streambuf ****   template<typename _CharT, typename _Traits>
  50:/usr/include/c++/6/streambuf ****     streamsize
  51:/usr/include/c++/6/streambuf ****     __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
  52:/usr/include/c++/6/streambuf **** 			  basic_streambuf<_CharT, _Traits>*, bool&);
  53:/usr/include/c++/6/streambuf **** 
  54:/usr/include/c++/6/streambuf ****   /**
  55:/usr/include/c++/6/streambuf ****    *  @brief  The actual work of input and output (interface).
  56:/usr/include/c++/6/streambuf ****    *  @ingroup io
  57:/usr/include/c++/6/streambuf ****    *
  58:/usr/include/c++/6/streambuf ****    *  @tparam _CharT  Type of character stream.
  59:/usr/include/c++/6/streambuf ****    *  @tparam _Traits  Traits for character type, defaults to
  60:/usr/include/c++/6/streambuf ****    *                   char_traits<_CharT>.
  61:/usr/include/c++/6/streambuf ****    *
  62:/usr/include/c++/6/streambuf ****    *  This is a base class.  Derived stream buffers each control a
  63:/usr/include/c++/6/streambuf ****    *  pair of character sequences:  one for input, and one for output.
  64:/usr/include/c++/6/streambuf ****    *
  65:/usr/include/c++/6/streambuf ****    *  Section [27.5.1] of the standard describes the requirements and
  66:/usr/include/c++/6/streambuf ****    *  behavior of stream buffer classes.  That section (three paragraphs)
  67:/usr/include/c++/6/streambuf ****    *  is reproduced here, for simplicity and accuracy.
  68:/usr/include/c++/6/streambuf ****    *
  69:/usr/include/c++/6/streambuf ****    *  -# Stream buffers can impose various constraints on the sequences
  70:/usr/include/c++/6/streambuf ****    *     they control.  Some constraints are:
  71:/usr/include/c++/6/streambuf ****    *     - The controlled input sequence can be not readable.
  72:/usr/include/c++/6/streambuf ****    *     - The controlled output sequence can be not writable.
  73:/usr/include/c++/6/streambuf ****    *     - The controlled sequences can be associated with the contents of
  74:/usr/include/c++/6/streambuf ****    *       other representations for character sequences, such as external
  75:/usr/include/c++/6/streambuf ****    *       files.
  76:/usr/include/c++/6/streambuf ****    *     - The controlled sequences can support operations @e directly to or
  77:/usr/include/c++/6/streambuf ****    *       from associated sequences.
  78:/usr/include/c++/6/streambuf ****    *     - The controlled sequences can impose limitations on how the
  79:/usr/include/c++/6/streambuf ****    *       program can read characters from a sequence, write characters to
  80:/usr/include/c++/6/streambuf ****    *       a sequence, put characters back into an input sequence, or alter
  81:/usr/include/c++/6/streambuf ****    *       the stream position.
  82:/usr/include/c++/6/streambuf ****    *     .
  83:/usr/include/c++/6/streambuf ****    *  -# Each sequence is characterized by three pointers which, if non-null,
  84:/usr/include/c++/6/streambuf ****    *     all point into the same @c charT array object.  The array object
  85:/usr/include/c++/6/streambuf ****    *     represents, at any moment, a (sub)sequence of characters from the
  86:/usr/include/c++/6/streambuf ****    *     sequence.  Operations performed on a sequence alter the values
  87:/usr/include/c++/6/streambuf ****    *     stored in these pointers, perform reads and writes directly to or
  88:/usr/include/c++/6/streambuf ****    *     from associated sequences, and alter <em>the stream position</em> and
  89:/usr/include/c++/6/streambuf ****    *     conversion state as needed to maintain this subsequence relationship.
  90:/usr/include/c++/6/streambuf ****    *     The three pointers are:
  91:/usr/include/c++/6/streambuf ****    *     - the <em>beginning pointer</em>, or lowest element address in the
  92:/usr/include/c++/6/streambuf ****    *       array (called @e xbeg here);
  93:/usr/include/c++/6/streambuf ****    *     - the <em>next pointer</em>, or next element address that is a
  94:/usr/include/c++/6/streambuf ****    *       current candidate for reading or writing (called @e xnext here);
  95:/usr/include/c++/6/streambuf ****    *     - the <em>end pointer</em>, or first element address beyond the
  96:/usr/include/c++/6/streambuf ****    *       end of the array (called @e xend here).
  97:/usr/include/c++/6/streambuf ****    *     .
  98:/usr/include/c++/6/streambuf ****    *  -# The following semantic constraints shall always apply for any set
  99:/usr/include/c++/6/streambuf ****    *     of three pointers for a sequence, using the pointer names given
 100:/usr/include/c++/6/streambuf ****    *     immediately above:
 101:/usr/include/c++/6/streambuf ****    *     - If @e xnext is not a null pointer, then @e xbeg and @e xend shall
 102:/usr/include/c++/6/streambuf ****    *       also be non-null pointers into the same @c charT array, as
 103:/usr/include/c++/6/streambuf ****    *       described above; otherwise, @e xbeg and @e xend shall also be null.
GAS LISTING /tmp/ccvmoMuv.s 			page 314


 104:/usr/include/c++/6/streambuf ****    *     - If @e xnext is not a null pointer and @e xnext < @e xend for an
 105:/usr/include/c++/6/streambuf ****    *       output sequence, then a <em>write position</em> is available.
 106:/usr/include/c++/6/streambuf ****    *       In this case, @e *xnext shall be assignable as the next element
 107:/usr/include/c++/6/streambuf ****    *       to write (to put, or to store a character value, into the sequence).
 108:/usr/include/c++/6/streambuf ****    *     - If @e xnext is not a null pointer and @e xbeg < @e xnext for an
 109:/usr/include/c++/6/streambuf ****    *       input sequence, then a <em>putback position</em> is available.
 110:/usr/include/c++/6/streambuf ****    *       In this case, @e xnext[-1] shall have a defined value and is the
 111:/usr/include/c++/6/streambuf ****    *       next (preceding) element to store a character that is put back
 112:/usr/include/c++/6/streambuf ****    *       into the input sequence.
 113:/usr/include/c++/6/streambuf ****    *     - If @e xnext is not a null pointer and @e xnext< @e xend for an
 114:/usr/include/c++/6/streambuf ****    *       input sequence, then a <em>read position</em> is available.
 115:/usr/include/c++/6/streambuf ****    *       In this case, @e *xnext shall have a defined value and is the
 116:/usr/include/c++/6/streambuf ****    *       next element to read (to get, or to obtain a character value,
 117:/usr/include/c++/6/streambuf ****    *       from the sequence).
 118:/usr/include/c++/6/streambuf ****   */
 119:/usr/include/c++/6/streambuf ****   template<typename _CharT, typename _Traits>
 120:/usr/include/c++/6/streambuf ****     class basic_streambuf
 121:/usr/include/c++/6/streambuf ****     {
 122:/usr/include/c++/6/streambuf ****     public:
 123:/usr/include/c++/6/streambuf ****       //@{
 124:/usr/include/c++/6/streambuf ****       /**
 125:/usr/include/c++/6/streambuf ****        *  These are standard types.  They permit a standardized way of
 126:/usr/include/c++/6/streambuf ****        *  referring to names of (or names dependent on) the template
 127:/usr/include/c++/6/streambuf ****        *  parameters, which are specific to the implementation.
 128:/usr/include/c++/6/streambuf ****       */
 129:/usr/include/c++/6/streambuf ****       typedef _CharT 					char_type;
 130:/usr/include/c++/6/streambuf ****       typedef _Traits 					traits_type;
 131:/usr/include/c++/6/streambuf ****       typedef typename traits_type::int_type 		int_type;
 132:/usr/include/c++/6/streambuf ****       typedef typename traits_type::pos_type 		pos_type;
 133:/usr/include/c++/6/streambuf ****       typedef typename traits_type::off_type 		off_type;
 134:/usr/include/c++/6/streambuf ****       //@}
 135:/usr/include/c++/6/streambuf **** 
 136:/usr/include/c++/6/streambuf ****       //@{
 137:/usr/include/c++/6/streambuf ****       /// This is a non-standard type.
 138:/usr/include/c++/6/streambuf ****       typedef basic_streambuf<char_type, traits_type>  	__streambuf_type;
 139:/usr/include/c++/6/streambuf ****       //@}
 140:/usr/include/c++/6/streambuf **** 
 141:/usr/include/c++/6/streambuf ****       friend class basic_ios<char_type, traits_type>;
 142:/usr/include/c++/6/streambuf ****       friend class basic_istream<char_type, traits_type>;
 143:/usr/include/c++/6/streambuf ****       friend class basic_ostream<char_type, traits_type>;
 144:/usr/include/c++/6/streambuf ****       friend class istreambuf_iterator<char_type, traits_type>;
 145:/usr/include/c++/6/streambuf ****       friend class ostreambuf_iterator<char_type, traits_type>;
 146:/usr/include/c++/6/streambuf **** 
 147:/usr/include/c++/6/streambuf ****       friend streamsize
 148:/usr/include/c++/6/streambuf ****       __copy_streambufs_eof<>(basic_streambuf*, basic_streambuf*, bool&);
 149:/usr/include/c++/6/streambuf **** 
 150:/usr/include/c++/6/streambuf ****       template<bool _IsMove, typename _CharT2>
 151:/usr/include/c++/6/streambuf ****         friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
 152:/usr/include/c++/6/streambuf **** 					       _CharT2*>::__type
 153:/usr/include/c++/6/streambuf ****         __copy_move_a2(istreambuf_iterator<_CharT2>,
 154:/usr/include/c++/6/streambuf **** 		       istreambuf_iterator<_CharT2>, _CharT2*);
 155:/usr/include/c++/6/streambuf **** 
 156:/usr/include/c++/6/streambuf ****       template<typename _CharT2>
 157:/usr/include/c++/6/streambuf ****         friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
 158:/usr/include/c++/6/streambuf **** 				  istreambuf_iterator<_CharT2> >::__type
 159:/usr/include/c++/6/streambuf ****         find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
 160:/usr/include/c++/6/streambuf **** 	     const _CharT2&);
GAS LISTING /tmp/ccvmoMuv.s 			page 315


 161:/usr/include/c++/6/streambuf **** 
 162:/usr/include/c++/6/streambuf ****       template<typename _CharT2, typename _Traits2>
 163:/usr/include/c++/6/streambuf ****         friend basic_istream<_CharT2, _Traits2>&
 164:/usr/include/c++/6/streambuf ****         operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);
 165:/usr/include/c++/6/streambuf **** 
 166:/usr/include/c++/6/streambuf ****       template<typename _CharT2, typename _Traits2, typename _Alloc>
 167:/usr/include/c++/6/streambuf ****         friend basic_istream<_CharT2, _Traits2>&
 168:/usr/include/c++/6/streambuf ****         operator>>(basic_istream<_CharT2, _Traits2>&,
 169:/usr/include/c++/6/streambuf **** 		   basic_string<_CharT2, _Traits2, _Alloc>&);
 170:/usr/include/c++/6/streambuf **** 
 171:/usr/include/c++/6/streambuf ****       template<typename _CharT2, typename _Traits2, typename _Alloc>
 172:/usr/include/c++/6/streambuf ****         friend basic_istream<_CharT2, _Traits2>&
 173:/usr/include/c++/6/streambuf ****         getline(basic_istream<_CharT2, _Traits2>&,
 174:/usr/include/c++/6/streambuf **** 		basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);
 175:/usr/include/c++/6/streambuf **** 
 176:/usr/include/c++/6/streambuf ****     protected:
 177:/usr/include/c++/6/streambuf ****       /*
 178:/usr/include/c++/6/streambuf ****        *  This is based on _IO_FILE, just reordered to be more consistent,
 179:/usr/include/c++/6/streambuf ****        *  and is intended to be the most minimal abstraction for an
 180:/usr/include/c++/6/streambuf ****        *  internal buffer.
 181:/usr/include/c++/6/streambuf ****        *  -  get == input == read
 182:/usr/include/c++/6/streambuf ****        *  -  put == output == write
 183:/usr/include/c++/6/streambuf ****       */
 184:/usr/include/c++/6/streambuf ****       char_type* 		_M_in_beg;     ///< Start of get area.
 185:/usr/include/c++/6/streambuf ****       char_type* 		_M_in_cur;     ///< Current read area.
 186:/usr/include/c++/6/streambuf ****       char_type* 		_M_in_end;     ///< End of get area.
 187:/usr/include/c++/6/streambuf ****       char_type* 		_M_out_beg;    ///< Start of put area.
 188:/usr/include/c++/6/streambuf ****       char_type* 		_M_out_cur;    ///< Current put area.
 189:/usr/include/c++/6/streambuf ****       char_type* 		_M_out_end;    ///< End of put area.
 190:/usr/include/c++/6/streambuf **** 
 191:/usr/include/c++/6/streambuf ****       /// Current locale setting.
 192:/usr/include/c++/6/streambuf ****       locale 			_M_buf_locale;
 193:/usr/include/c++/6/streambuf **** 
 194:/usr/include/c++/6/streambuf ****   public:
 195:/usr/include/c++/6/streambuf ****       /// Destructor deallocates no buffer space.
 196:/usr/include/c++/6/streambuf ****       virtual
 197:/usr/include/c++/6/streambuf ****       ~basic_streambuf()
 198:/usr/include/c++/6/streambuf ****       { }
 199:/usr/include/c++/6/streambuf **** 
 200:/usr/include/c++/6/streambuf ****       // [27.5.2.2.1] locales
 201:/usr/include/c++/6/streambuf ****       /**
 202:/usr/include/c++/6/streambuf ****        *  @brief  Entry point for imbue().
 203:/usr/include/c++/6/streambuf ****        *  @param  __loc  The new locale.
 204:/usr/include/c++/6/streambuf ****        *  @return  The previous locale.
 205:/usr/include/c++/6/streambuf ****        *
 206:/usr/include/c++/6/streambuf ****        *  Calls the derived imbue(__loc).
 207:/usr/include/c++/6/streambuf ****       */
 208:/usr/include/c++/6/streambuf ****       locale
 209:/usr/include/c++/6/streambuf ****       pubimbue(const locale& __loc)
 210:/usr/include/c++/6/streambuf ****       {
 211:/usr/include/c++/6/streambuf **** 	locale __tmp(this->getloc());
 212:/usr/include/c++/6/streambuf **** 	this->imbue(__loc);
 213:/usr/include/c++/6/streambuf **** 	_M_buf_locale = __loc;
 214:/usr/include/c++/6/streambuf **** 	return __tmp;
 215:/usr/include/c++/6/streambuf ****       }
 216:/usr/include/c++/6/streambuf **** 
 217:/usr/include/c++/6/streambuf ****       /**
GAS LISTING /tmp/ccvmoMuv.s 			page 316


 218:/usr/include/c++/6/streambuf ****        *  @brief  Locale access.
 219:/usr/include/c++/6/streambuf ****        *  @return  The current locale in effect.
 220:/usr/include/c++/6/streambuf ****        *
 221:/usr/include/c++/6/streambuf ****        *  If pubimbue(loc) has been called, then the most recent @c loc
 222:/usr/include/c++/6/streambuf ****        *  is returned.  Otherwise the global locale in effect at the time
 223:/usr/include/c++/6/streambuf ****        *  of construction is returned.
 224:/usr/include/c++/6/streambuf ****       */
 225:/usr/include/c++/6/streambuf ****       locale
 226:/usr/include/c++/6/streambuf ****       getloc() const
 227:/usr/include/c++/6/streambuf ****       { return _M_buf_locale; }
 228:/usr/include/c++/6/streambuf **** 
 229:/usr/include/c++/6/streambuf ****       // [27.5.2.2.2] buffer management and positioning
 230:/usr/include/c++/6/streambuf ****       //@{
 231:/usr/include/c++/6/streambuf ****       /**
 232:/usr/include/c++/6/streambuf ****        *  @brief  Entry points for derived buffer functions.
 233:/usr/include/c++/6/streambuf ****        *
 234:/usr/include/c++/6/streambuf ****        *  The public versions of @c pubfoo dispatch to the protected
 235:/usr/include/c++/6/streambuf ****        *  derived @c foo member functions, passing the arguments (if any)
 236:/usr/include/c++/6/streambuf ****        *  and returning the result unchanged.
 237:/usr/include/c++/6/streambuf ****       */
 238:/usr/include/c++/6/streambuf ****       basic_streambuf*
 239:/usr/include/c++/6/streambuf ****       pubsetbuf(char_type* __s, streamsize __n)
 240:/usr/include/c++/6/streambuf ****       { return this->setbuf(__s, __n); }
 241:/usr/include/c++/6/streambuf **** 
 242:/usr/include/c++/6/streambuf ****       /**
 243:/usr/include/c++/6/streambuf ****        *  @brief  Alters the stream position.
 244:/usr/include/c++/6/streambuf ****        *  @param  __off  Offset.
 245:/usr/include/c++/6/streambuf ****        *  @param  __way  Value for ios_base::seekdir.
 246:/usr/include/c++/6/streambuf ****        *  @param  __mode Value for ios_base::openmode.
 247:/usr/include/c++/6/streambuf ****        *
 248:/usr/include/c++/6/streambuf ****        *  Calls virtual seekoff function.
 249:/usr/include/c++/6/streambuf ****       */
 250:/usr/include/c++/6/streambuf ****       pos_type
 251:/usr/include/c++/6/streambuf ****       pubseekoff(off_type __off, ios_base::seekdir __way,
 252:/usr/include/c++/6/streambuf **** 		 ios_base::openmode __mode = ios_base::in | ios_base::out)
 253:/usr/include/c++/6/streambuf ****       { return this->seekoff(__off, __way, __mode); }
 254:/usr/include/c++/6/streambuf **** 
 255:/usr/include/c++/6/streambuf ****       /**
 256:/usr/include/c++/6/streambuf ****        *  @brief  Alters the stream position.
 257:/usr/include/c++/6/streambuf ****        *  @param  __sp  Position
 258:/usr/include/c++/6/streambuf ****        *  @param  __mode Value for ios_base::openmode.
 259:/usr/include/c++/6/streambuf ****        *
 260:/usr/include/c++/6/streambuf ****        *  Calls virtual seekpos function.
 261:/usr/include/c++/6/streambuf ****       */
 262:/usr/include/c++/6/streambuf ****       pos_type
 263:/usr/include/c++/6/streambuf ****       pubseekpos(pos_type __sp,
 264:/usr/include/c++/6/streambuf **** 		 ios_base::openmode __mode = ios_base::in | ios_base::out)
 265:/usr/include/c++/6/streambuf ****       { return this->seekpos(__sp, __mode); }
 266:/usr/include/c++/6/streambuf **** 
 267:/usr/include/c++/6/streambuf ****       /**
 268:/usr/include/c++/6/streambuf ****        *  @brief  Calls virtual sync function.
 269:/usr/include/c++/6/streambuf ****       */
 270:/usr/include/c++/6/streambuf ****       int
 271:/usr/include/c++/6/streambuf ****       pubsync() { return this->sync(); }
 272:/usr/include/c++/6/streambuf ****       //@}
 273:/usr/include/c++/6/streambuf **** 
 274:/usr/include/c++/6/streambuf ****       // [27.5.2.2.3] get area
GAS LISTING /tmp/ccvmoMuv.s 			page 317


 275:/usr/include/c++/6/streambuf ****       /**
 276:/usr/include/c++/6/streambuf ****        *  @brief  Looking ahead into the stream.
 277:/usr/include/c++/6/streambuf ****        *  @return  The number of characters available.
 278:/usr/include/c++/6/streambuf ****        *
 279:/usr/include/c++/6/streambuf ****        *  If a read position is available, returns the number of characters
 280:/usr/include/c++/6/streambuf ****        *  available for reading before the buffer must be refilled.
 281:/usr/include/c++/6/streambuf ****        *  Otherwise returns the derived @c showmanyc().
 282:/usr/include/c++/6/streambuf ****       */
 283:/usr/include/c++/6/streambuf ****       streamsize
 284:/usr/include/c++/6/streambuf ****       in_avail()
 285:/usr/include/c++/6/streambuf ****       {
 286:/usr/include/c++/6/streambuf **** 	const streamsize __ret = this->egptr() - this->gptr();
 287:/usr/include/c++/6/streambuf **** 	return __ret ? __ret : this->showmanyc();
 288:/usr/include/c++/6/streambuf ****       }
 289:/usr/include/c++/6/streambuf **** 
 290:/usr/include/c++/6/streambuf ****       /**
 291:/usr/include/c++/6/streambuf ****        *  @brief  Getting the next character.
 292:/usr/include/c++/6/streambuf ****        *  @return  The next character, or eof.
 293:/usr/include/c++/6/streambuf ****        *
 294:/usr/include/c++/6/streambuf ****        *  Calls @c sbumpc(), and if that function returns
 295:/usr/include/c++/6/streambuf ****        *  @c traits::eof(), so does this function.  Otherwise, @c sgetc().
 296:/usr/include/c++/6/streambuf ****       */
 297:/usr/include/c++/6/streambuf ****       int_type
 298:/usr/include/c++/6/streambuf ****       snextc()
 299:/usr/include/c++/6/streambuf ****       {
 300:/usr/include/c++/6/streambuf **** 	int_type __ret = traits_type::eof();
 301:/usr/include/c++/6/streambuf **** 	if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
 302:/usr/include/c++/6/streambuf **** 						       __ret), true))
 303:/usr/include/c++/6/streambuf **** 	  __ret = this->sgetc();
 304:/usr/include/c++/6/streambuf **** 	return __ret;
 305:/usr/include/c++/6/streambuf ****       }
 306:/usr/include/c++/6/streambuf **** 
 307:/usr/include/c++/6/streambuf ****       /**
 308:/usr/include/c++/6/streambuf ****        *  @brief  Getting the next character.
 309:/usr/include/c++/6/streambuf ****        *  @return  The next character, or eof.
 310:/usr/include/c++/6/streambuf ****        *
 311:/usr/include/c++/6/streambuf ****        *  If the input read position is available, returns that character
 312:/usr/include/c++/6/streambuf ****        *  and increments the read pointer, otherwise calls and returns
 313:/usr/include/c++/6/streambuf ****        *  @c uflow().
 314:/usr/include/c++/6/streambuf ****       */
 315:/usr/include/c++/6/streambuf ****       int_type
 316:/usr/include/c++/6/streambuf ****       sbumpc()
 317:/usr/include/c++/6/streambuf ****       {
 318:/usr/include/c++/6/streambuf **** 	int_type __ret;
 319:/usr/include/c++/6/streambuf **** 	if (__builtin_expect(this->gptr() < this->egptr(), true))
 320:/usr/include/c++/6/streambuf **** 	  {
 321:/usr/include/c++/6/streambuf **** 	    __ret = traits_type::to_int_type(*this->gptr());
 322:/usr/include/c++/6/streambuf **** 	    this->gbump(1);
 323:/usr/include/c++/6/streambuf **** 	  }
 324:/usr/include/c++/6/streambuf **** 	else
 325:/usr/include/c++/6/streambuf **** 	  __ret = this->uflow();
 326:/usr/include/c++/6/streambuf **** 	return __ret;
 327:/usr/include/c++/6/streambuf ****       }
 328:/usr/include/c++/6/streambuf **** 
 329:/usr/include/c++/6/streambuf ****       /**
 330:/usr/include/c++/6/streambuf ****        *  @brief  Getting the next character.
 331:/usr/include/c++/6/streambuf ****        *  @return  The next character, or eof.
GAS LISTING /tmp/ccvmoMuv.s 			page 318


 332:/usr/include/c++/6/streambuf ****        *
 333:/usr/include/c++/6/streambuf ****        *  If the input read position is available, returns that character,
 334:/usr/include/c++/6/streambuf ****        *  otherwise calls and returns @c underflow().  Does not move the
 335:/usr/include/c++/6/streambuf ****        *  read position after fetching the character.
 336:/usr/include/c++/6/streambuf ****       */
 337:/usr/include/c++/6/streambuf ****       int_type
 338:/usr/include/c++/6/streambuf ****       sgetc()
 339:/usr/include/c++/6/streambuf ****       {
 340:/usr/include/c++/6/streambuf **** 	int_type __ret;
 341:/usr/include/c++/6/streambuf **** 	if (__builtin_expect(this->gptr() < this->egptr(), true))
 342:/usr/include/c++/6/streambuf **** 	  __ret = traits_type::to_int_type(*this->gptr());
 343:/usr/include/c++/6/streambuf **** 	else
 344:/usr/include/c++/6/streambuf **** 	  __ret = this->underflow();
 345:/usr/include/c++/6/streambuf **** 	return __ret;
 346:/usr/include/c++/6/streambuf ****       }
 347:/usr/include/c++/6/streambuf **** 
 348:/usr/include/c++/6/streambuf ****       /**
 349:/usr/include/c++/6/streambuf ****        *  @brief  Entry point for xsgetn.
 350:/usr/include/c++/6/streambuf ****        *  @param  __s  A buffer area.
 351:/usr/include/c++/6/streambuf ****        *  @param  __n  A count.
 352:/usr/include/c++/6/streambuf ****        *
 353:/usr/include/c++/6/streambuf ****        *  Returns xsgetn(__s,__n).  The effect is to fill @a __s[0] through
 354:/usr/include/c++/6/streambuf ****        *  @a __s[__n-1] with characters from the input sequence, if possible.
 355:/usr/include/c++/6/streambuf ****       */
 356:/usr/include/c++/6/streambuf ****       streamsize
 357:/usr/include/c++/6/streambuf ****       sgetn(char_type* __s, streamsize __n)
 358:/usr/include/c++/6/streambuf ****       { return this->xsgetn(__s, __n); }
 359:/usr/include/c++/6/streambuf **** 
 360:/usr/include/c++/6/streambuf ****       // [27.5.2.2.4] putback
 361:/usr/include/c++/6/streambuf ****       /**
 362:/usr/include/c++/6/streambuf ****        *  @brief  Pushing characters back into the input stream.
 363:/usr/include/c++/6/streambuf ****        *  @param  __c  The character to push back.
 364:/usr/include/c++/6/streambuf ****        *  @return  The previous character, if possible.
 365:/usr/include/c++/6/streambuf ****        *
 366:/usr/include/c++/6/streambuf ****        *  Similar to sungetc(), but @a __c is pushed onto the stream
 367:/usr/include/c++/6/streambuf ****        *  instead of <em>the previous character.</em> If successful,
 368:/usr/include/c++/6/streambuf ****        *  the next character fetched from the input stream will be @a
 369:/usr/include/c++/6/streambuf ****        *  __c.
 370:/usr/include/c++/6/streambuf ****       */
 371:/usr/include/c++/6/streambuf ****       int_type
 372:/usr/include/c++/6/streambuf ****       sputbackc(char_type __c)
 373:/usr/include/c++/6/streambuf ****       {
 374:/usr/include/c++/6/streambuf **** 	int_type __ret;
 375:/usr/include/c++/6/streambuf **** 	const bool __testpos = this->eback() < this->gptr();
 376:/usr/include/c++/6/streambuf **** 	if (__builtin_expect(!__testpos ||
 377:/usr/include/c++/6/streambuf **** 			     !traits_type::eq(__c, this->gptr()[-1]), false))
 378:/usr/include/c++/6/streambuf **** 	  __ret = this->pbackfail(traits_type::to_int_type(__c));
 379:/usr/include/c++/6/streambuf **** 	else
 380:/usr/include/c++/6/streambuf **** 	  {
 381:/usr/include/c++/6/streambuf **** 	    this->gbump(-1);
 382:/usr/include/c++/6/streambuf **** 	    __ret = traits_type::to_int_type(*this->gptr());
 383:/usr/include/c++/6/streambuf **** 	  }
 384:/usr/include/c++/6/streambuf **** 	return __ret;
 385:/usr/include/c++/6/streambuf ****       }
 386:/usr/include/c++/6/streambuf **** 
 387:/usr/include/c++/6/streambuf ****       /**
 388:/usr/include/c++/6/streambuf ****        *  @brief  Moving backwards in the input stream.
GAS LISTING /tmp/ccvmoMuv.s 			page 319


 389:/usr/include/c++/6/streambuf ****        *  @return  The previous character, if possible.
 390:/usr/include/c++/6/streambuf ****        *
 391:/usr/include/c++/6/streambuf ****        *  If a putback position is available, this function decrements
 392:/usr/include/c++/6/streambuf ****        *  the input pointer and returns that character.  Otherwise,
 393:/usr/include/c++/6/streambuf ****        *  calls and returns pbackfail().  The effect is to @a unget
 394:/usr/include/c++/6/streambuf ****        *  the last character @a gotten.
 395:/usr/include/c++/6/streambuf ****       */
 396:/usr/include/c++/6/streambuf ****       int_type
 397:/usr/include/c++/6/streambuf ****       sungetc()
 398:/usr/include/c++/6/streambuf ****       {
 399:/usr/include/c++/6/streambuf **** 	int_type __ret;
 400:/usr/include/c++/6/streambuf **** 	if (__builtin_expect(this->eback() < this->gptr(), true))
 401:/usr/include/c++/6/streambuf **** 	  {
 402:/usr/include/c++/6/streambuf **** 	    this->gbump(-1);
 403:/usr/include/c++/6/streambuf **** 	    __ret = traits_type::to_int_type(*this->gptr());
 404:/usr/include/c++/6/streambuf **** 	  }
 405:/usr/include/c++/6/streambuf **** 	else
 406:/usr/include/c++/6/streambuf **** 	  __ret = this->pbackfail();
 407:/usr/include/c++/6/streambuf **** 	return __ret;
 408:/usr/include/c++/6/streambuf ****       }
 409:/usr/include/c++/6/streambuf **** 
 410:/usr/include/c++/6/streambuf ****       // [27.5.2.2.5] put area
 411:/usr/include/c++/6/streambuf ****       /**
 412:/usr/include/c++/6/streambuf ****        *  @brief  Entry point for all single-character output functions.
 413:/usr/include/c++/6/streambuf ****        *  @param  __c  A character to output.
 414:/usr/include/c++/6/streambuf ****        *  @return  @a __c, if possible.
 415:/usr/include/c++/6/streambuf ****        *
 416:/usr/include/c++/6/streambuf ****        *  One of two public output functions.
 417:/usr/include/c++/6/streambuf ****        *
 418:/usr/include/c++/6/streambuf ****        *  If a write position is available for the output sequence (i.e.,
 419:/usr/include/c++/6/streambuf ****        *  the buffer is not full), stores @a __c in that position, increments
 420:/usr/include/c++/6/streambuf ****        *  the position, and returns @c traits::to_int_type(__c).  If a write
 421:/usr/include/c++/6/streambuf ****        *  position is not available, returns @c overflow(__c).
 422:/usr/include/c++/6/streambuf ****       */
 423:/usr/include/c++/6/streambuf ****       int_type
 424:/usr/include/c++/6/streambuf ****       sputc(char_type __c)
 425:/usr/include/c++/6/streambuf ****       {
 426:/usr/include/c++/6/streambuf **** 	int_type __ret;
 427:/usr/include/c++/6/streambuf **** 	if (__builtin_expect(this->pptr() < this->epptr(), true))
 428:/usr/include/c++/6/streambuf **** 	  {
 429:/usr/include/c++/6/streambuf **** 	    *this->pptr() = __c;
 430:/usr/include/c++/6/streambuf **** 	    this->pbump(1);
 431:/usr/include/c++/6/streambuf **** 	    __ret = traits_type::to_int_type(__c);
 432:/usr/include/c++/6/streambuf **** 	  }
 433:/usr/include/c++/6/streambuf **** 	else
 434:/usr/include/c++/6/streambuf **** 	  __ret = this->overflow(traits_type::to_int_type(__c));
 435:/usr/include/c++/6/streambuf **** 	return __ret;
 436:/usr/include/c++/6/streambuf ****       }
 437:/usr/include/c++/6/streambuf **** 
 438:/usr/include/c++/6/streambuf ****       /**
 439:/usr/include/c++/6/streambuf ****        *  @brief  Entry point for all single-character output functions.
 440:/usr/include/c++/6/streambuf ****        *  @param  __s  A buffer read area.
 441:/usr/include/c++/6/streambuf ****        *  @param  __n  A count.
 442:/usr/include/c++/6/streambuf ****        *
 443:/usr/include/c++/6/streambuf ****        *  One of two public output functions.
 444:/usr/include/c++/6/streambuf ****        *
 445:/usr/include/c++/6/streambuf ****        *
GAS LISTING /tmp/ccvmoMuv.s 			page 320


 446:/usr/include/c++/6/streambuf ****        *  Returns xsputn(__s,__n).  The effect is to write @a __s[0] through
 447:/usr/include/c++/6/streambuf ****        *  @a __s[__n-1] to the output sequence, if possible.
 448:/usr/include/c++/6/streambuf ****       */
 449:/usr/include/c++/6/streambuf ****       streamsize
 450:/usr/include/c++/6/streambuf ****       sputn(const char_type* __s, streamsize __n)
 451:/usr/include/c++/6/streambuf ****       { return this->xsputn(__s, __n); }
 452:/usr/include/c++/6/streambuf **** 
 453:/usr/include/c++/6/streambuf ****     protected:
 454:/usr/include/c++/6/streambuf ****       /**
 455:/usr/include/c++/6/streambuf ****        *  @brief  Base constructor.
 456:/usr/include/c++/6/streambuf ****        *
 457:/usr/include/c++/6/streambuf ****        *  Only called from derived constructors, and sets up all the
 458:/usr/include/c++/6/streambuf ****        *  buffer data to zero, including the pointers described in the
 459:/usr/include/c++/6/streambuf ****        *  basic_streambuf class description.  Note that, as a result,
 460:/usr/include/c++/6/streambuf ****        *  - the class starts with no read nor write positions available,
 461:/usr/include/c++/6/streambuf ****        *  - this is not an error
 462:/usr/include/c++/6/streambuf ****       */
 463:/usr/include/c++/6/streambuf ****       basic_streambuf()
 464:/usr/include/c++/6/streambuf ****       : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
 465:/usr/include/c++/6/streambuf ****       _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
 466:/usr/include/c++/6/streambuf ****       _M_buf_locale(locale())
 3666              		.loc 33 466 0
 3667 00bc 498D7D40 		leaq	64(%r13), %rdi
 3668 00c0 48C78424 		movq	$0, 176(%rsp)
 3668      B0000000 
 3668      00000000 
 3669 00cc 48C78424 		movq	$0, 184(%rsp)
 3669      B8000000 
 3669      00000000 
 3670 00d8 48C78424 		movq	$0, 192(%rsp)
 3670      C0000000 
 3670      00000000 
 3671              	.LBE14062:
 3672              	.LBE14061:
 3673              	.LBE14060:
 3674              	.LBE14059:
 3675              	.LBE14058:
 3676              	.LBE14057:
 3677              		.loc 32 548 0
 3678 00e4 48898424 		movq	%rax, 160(%rsp)
 3678      A0000000 
 3679 00ec 488D0500 		leaq	64+_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax
 3679      000000
 3680              	.LBB14091:
 3681              	.LBB14088:
 3682              	.LBB14085:
 3683              	.LBB14067:
 3684              	.LBB14065:
 3685              	.LBB14063:
 3686              		.loc 33 466 0
 3687 00f3 48C78424 		movq	$0, 200(%rsp)
 3687      C8000000 
 3687      00000000 
 3688 00ff 48C78424 		movq	$0, 208(%rsp)
 3688      D0000000 
 3688      00000000 
 3689 010b 48C78424 		movq	$0, 216(%rsp)
GAS LISTING /tmp/ccvmoMuv.s 			page 321


 3689      D8000000 
 3689      00000000 
 3690              	.LBE14063:
 3691              	.LBE14065:
 3692              	.LBE14067:
 3693              	.LBE14085:
 3694              	.LBE14088:
 3695              	.LBE14091:
 3696              		.loc 32 548 0
 3697 0117 48898424 		movq	%rax, 272(%rsp)
 3697      10010000 
 3698              	.LVL321:
 3699              	.LBB14092:
 3700              	.LBB14089:
 3701              	.LBB14086:
 3702              	.LBB14068:
 3703              	.LBB14066:
 3704              	.LBB14064:
 3705              		.loc 33 466 0
 3706 011f 488D0500 		leaq	16+_ZTVSt15basic_streambufIcSt11char_traitsIcEE(%rip), %rax
 3706      000000
 3707 0126 48898424 		movq	%rax, 168(%rsp)
 3707      A8000000 
 3708 012e E8000000 		call	_ZNSt6localeC1Ev@PLT
 3708      00
 3709              	.LVL322:
 3710              	.LBE14064:
 3711              	.LBE14066:
 3712              	.LBE14068:
 101:/usr/include/c++/6/sstream ****       { }
 3713              		.loc 32 101 0
 3714 0133 488D0500 		leaq	16+_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE(%rip), %rax
 3714      000000
 3715              	.LBE14086:
 3716              	.LBE14089:
 3717              	.LBE14092:
 549:/usr/include/c++/6/sstream ****       { this->init(&_M_stringbuf); }
 3718              		.loc 32 549 0
 3719 013a 498D7508 		leaq	8(%r13), %rsi
 3720 013e 498D7D70 		leaq	112(%r13), %rdi
 3721              	.LBB14093:
 3722              	.LBB14090:
 3723              	.LBB14087:
 101:/usr/include/c++/6/sstream ****       { }
 3724              		.loc 32 101 0
 3725 0142 C78424E8 		movl	$16, 232(%rsp)
 3725      00000010 
 3725      000000
 3726              	.LVL323:
 3727              	.LBB14069:
 3728              	.LBB14070:
 3729              	.LBB14071:
 3730              	.LBB14072:
 3731              	.LBB14073:
 132:/usr/include/c++/6/bits/basic_string.h **** 
 3732              		.loc 10 132 0
 3733 014d 48C78424 		movq	$0, 248(%rsp)
GAS LISTING /tmp/ccvmoMuv.s 			page 322


 3733      F8000000 
 3733      00000000 
 3734              	.LBE14073:
 3735              	.LBE14072:
 3736              	.LBE14071:
 3737              	.LBE14070:
 3738              	.LBE14069:
 101:/usr/include/c++/6/sstream ****       { }
 3739              		.loc 32 101 0
 3740 0159 48898424 		movq	%rax, 168(%rsp)
 3740      A8000000 
 3741              	.LBB14084:
 3742              	.LBB14083:
 3743              	.LBB14076:
 3744              	.LBB14077:
 3745              	.LBB14078:
 110:/usr/include/c++/6/bits/basic_string.h **** 
 3746              		.loc 10 110 0
 3747 0161 498D4560 		leaq	96(%r13), %rax
 3748              	.LBE14078:
 3749              	.LBE14077:
 3750              	.LBE14076:
 3751              	.LBB14081:
 3752              	.LBB14074:
 3753              	.LBB14075:
 243:/usr/include/c++/6/bits/char_traits.h **** 
 3754              		.loc 9 243 0
 3755 0165 C6842400 		movb	$0, 256(%rsp)
 3755      01000000 
 3756              	.LBE14075:
 3757              	.LBE14074:
 3758              	.LBE14081:
 3759              	.LBB14082:
 3760              	.LBB14080:
 3761              	.LBB14079:
 110:/usr/include/c++/6/bits/basic_string.h **** 
 3762              		.loc 10 110 0
 3763 016d 48898424 		movq	%rax, 240(%rsp)
 3763      F0000000 
 3764              	.LVL324:
 3765              	.LEHB15:
 3766              	.LBE14079:
 3767              	.LBE14080:
 3768              	.LBE14082:
 3769              	.LBE14083:
 3770              	.LBE14084:
 3771              	.LBE14087:
 3772              	.LBE14090:
 3773              	.LBE14093:
 3774              		.loc 32 549 0
 3775 0175 E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@PLT
 3775      00
 3776              	.LVL325:
 3777              	.LEHE15:
 3778              	.LBE14036:
 3779              	.LBE14035:
 3780              	.LBE14034:
GAS LISTING /tmp/ccvmoMuv.s 			page 323


 3781              	.LBB14112:
 3782              	.LBB14113:
 3783              	.LBB14114:
 3784              	.LBB14115:
 267:/usr/include/c++/6/bits/char_traits.h **** 
 3785              		.loc 9 267 0
 3786 017a 4889DF   		movq	%rbx, %rdi
 3787 017d E8000000 		call	strlen@PLT
 3787      00
 3788              	.LVL326:
 3789              	.LBE14115:
 3790              	.LBE14114:
 386:/usr/include/c++/6/ostream **** 
 387:/usr/include/c++/6/ostream **** #if __cplusplus >= 201103L
 388:/usr/include/c++/6/ostream ****       // Non-standard constructor that does not call init()
 389:/usr/include/c++/6/ostream ****       basic_ostream(basic_iostream<_CharT, _Traits>&) { }
 390:/usr/include/c++/6/ostream **** 
 391:/usr/include/c++/6/ostream ****       basic_ostream(const basic_ostream&) = delete;
 392:/usr/include/c++/6/ostream **** 
 393:/usr/include/c++/6/ostream ****       basic_ostream(basic_ostream&& __rhs)
 394:/usr/include/c++/6/ostream ****       : __ios_type()
 395:/usr/include/c++/6/ostream ****       { __ios_type::move(__rhs); }
 396:/usr/include/c++/6/ostream **** 
 397:/usr/include/c++/6/ostream ****       // 27.7.3.3 Assign/swap
 398:/usr/include/c++/6/ostream **** 
 399:/usr/include/c++/6/ostream ****       basic_ostream& operator=(const basic_ostream&) = delete;
 400:/usr/include/c++/6/ostream **** 
 401:/usr/include/c++/6/ostream ****       basic_ostream&
 402:/usr/include/c++/6/ostream ****       operator=(basic_ostream&& __rhs)
 403:/usr/include/c++/6/ostream ****       {
 404:/usr/include/c++/6/ostream **** 	swap(__rhs);
 405:/usr/include/c++/6/ostream **** 	return *this;
 406:/usr/include/c++/6/ostream ****       }
 407:/usr/include/c++/6/ostream **** 
 408:/usr/include/c++/6/ostream ****       void
 409:/usr/include/c++/6/ostream ****       swap(basic_ostream& __rhs)
 410:/usr/include/c++/6/ostream ****       { __ios_type::swap(__rhs); }
 411:/usr/include/c++/6/ostream **** #endif
 412:/usr/include/c++/6/ostream **** 
 413:/usr/include/c++/6/ostream ****       template<typename _ValueT>
 414:/usr/include/c++/6/ostream **** 	__ostream_type&
 415:/usr/include/c++/6/ostream **** 	_M_insert(_ValueT __v);
 416:/usr/include/c++/6/ostream ****     };
 417:/usr/include/c++/6/ostream **** 
 418:/usr/include/c++/6/ostream ****   /**
 419:/usr/include/c++/6/ostream ****    *  @brief  Performs setup work for output streams.
 420:/usr/include/c++/6/ostream ****    *
 421:/usr/include/c++/6/ostream ****    *  Objects of this class are created before all of the standard
 422:/usr/include/c++/6/ostream ****    *  inserters are run.  It is responsible for <em>exception-safe prefix and
 423:/usr/include/c++/6/ostream ****    *  suffix operations</em>.
 424:/usr/include/c++/6/ostream ****   */
 425:/usr/include/c++/6/ostream ****   template <typename _CharT, typename _Traits>
 426:/usr/include/c++/6/ostream ****     class basic_ostream<_CharT, _Traits>::sentry
 427:/usr/include/c++/6/ostream ****     {
 428:/usr/include/c++/6/ostream ****       // Data Members.
 429:/usr/include/c++/6/ostream ****       bool 				_M_ok;
 430:/usr/include/c++/6/ostream ****       basic_ostream<_CharT, _Traits>& 	_M_os;
GAS LISTING /tmp/ccvmoMuv.s 			page 324


 431:/usr/include/c++/6/ostream **** 
 432:/usr/include/c++/6/ostream ****     public:
 433:/usr/include/c++/6/ostream ****       /**
 434:/usr/include/c++/6/ostream ****        *  @brief  The constructor performs preparatory work.
 435:/usr/include/c++/6/ostream ****        *  @param  __os  The output stream to guard.
 436:/usr/include/c++/6/ostream ****        *
 437:/usr/include/c++/6/ostream ****        *  If the stream state is good (@a __os.good() is true), then if the
 438:/usr/include/c++/6/ostream ****        *  stream is tied to another output stream, @c is.tie()->flush()
 439:/usr/include/c++/6/ostream ****        *  is called to synchronize the output sequences.
 440:/usr/include/c++/6/ostream ****        *
 441:/usr/include/c++/6/ostream ****        *  If the stream state is still good, then the sentry state becomes
 442:/usr/include/c++/6/ostream ****        *  true (@a okay).
 443:/usr/include/c++/6/ostream ****       */
 444:/usr/include/c++/6/ostream ****       explicit
 445:/usr/include/c++/6/ostream ****       sentry(basic_ostream<_CharT, _Traits>& __os);
 446:/usr/include/c++/6/ostream **** 
 447:/usr/include/c++/6/ostream ****       /**
 448:/usr/include/c++/6/ostream ****        *  @brief  Possibly flushes the stream.
 449:/usr/include/c++/6/ostream ****        *
 450:/usr/include/c++/6/ostream ****        *  If @c ios_base::unitbuf is set in @c os.flags(), and
 451:/usr/include/c++/6/ostream ****        *  @c std::uncaught_exception() is true, the sentry destructor calls
 452:/usr/include/c++/6/ostream ****        *  @c flush() on the output stream.
 453:/usr/include/c++/6/ostream ****       */
 454:/usr/include/c++/6/ostream ****       ~sentry()
 455:/usr/include/c++/6/ostream ****       {
 456:/usr/include/c++/6/ostream **** 	// XXX MT
 457:/usr/include/c++/6/ostream **** 	if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
 458:/usr/include/c++/6/ostream **** 	  {
 459:/usr/include/c++/6/ostream **** 	    // Can't call flush directly or else will get into recursive lock.
 460:/usr/include/c++/6/ostream **** 	    if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
 461:/usr/include/c++/6/ostream **** 	      _M_os.setstate(ios_base::badbit);
 462:/usr/include/c++/6/ostream **** 	  }
 463:/usr/include/c++/6/ostream ****       }
 464:/usr/include/c++/6/ostream **** 
 465:/usr/include/c++/6/ostream ****       /**
 466:/usr/include/c++/6/ostream ****        *  @brief  Quick status checking.
 467:/usr/include/c++/6/ostream ****        *  @return  The sentry state.
 468:/usr/include/c++/6/ostream ****        *
 469:/usr/include/c++/6/ostream ****        *  For ease of use, sentries may be converted to booleans.  The
 470:/usr/include/c++/6/ostream ****        *  return value is that of the sentry state (true == okay).
 471:/usr/include/c++/6/ostream ****       */
 472:/usr/include/c++/6/ostream **** #if __cplusplus >= 201103L
 473:/usr/include/c++/6/ostream ****       explicit
 474:/usr/include/c++/6/ostream **** #endif
 475:/usr/include/c++/6/ostream ****       operator bool() const
 476:/usr/include/c++/6/ostream ****       { return _M_ok; }
 477:/usr/include/c++/6/ostream ****     };
 478:/usr/include/c++/6/ostream **** 
 479:/usr/include/c++/6/ostream ****   //@{
 480:/usr/include/c++/6/ostream ****   /**
 481:/usr/include/c++/6/ostream ****    *  @brief  Character inserters
 482:/usr/include/c++/6/ostream ****    *  @param  __out  An output stream.
 483:/usr/include/c++/6/ostream ****    *  @param  __c  A character.
 484:/usr/include/c++/6/ostream ****    *  @return  out
 485:/usr/include/c++/6/ostream ****    *
 486:/usr/include/c++/6/ostream ****    *  Behaves like one of the formatted arithmetic inserters described in
 487:/usr/include/c++/6/ostream ****    *  std::basic_ostream.  After constructing a sentry object with good
GAS LISTING /tmp/ccvmoMuv.s 			page 325


 488:/usr/include/c++/6/ostream ****    *  status, this function inserts a single character and any required
 489:/usr/include/c++/6/ostream ****    *  padding (as determined by [22.2.2.2.2]).  @c __out.width(0) is then
 490:/usr/include/c++/6/ostream ****    *  called.
 491:/usr/include/c++/6/ostream ****    *
 492:/usr/include/c++/6/ostream ****    *  If @p __c is of type @c char and the character type of the stream is not
 493:/usr/include/c++/6/ostream ****    *  @c char, the character is widened before insertion.
 494:/usr/include/c++/6/ostream ****   */
 495:/usr/include/c++/6/ostream ****   template<typename _CharT, typename _Traits>
 496:/usr/include/c++/6/ostream ****     inline basic_ostream<_CharT, _Traits>&
 497:/usr/include/c++/6/ostream ****     operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
 498:/usr/include/c++/6/ostream ****     { return __ostream_insert(__out, &__c, 1); }
 499:/usr/include/c++/6/ostream **** 
 500:/usr/include/c++/6/ostream ****   template<typename _CharT, typename _Traits>
 501:/usr/include/c++/6/ostream ****     inline basic_ostream<_CharT, _Traits>&
 502:/usr/include/c++/6/ostream ****     operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
 503:/usr/include/c++/6/ostream ****     { return (__out << __out.widen(__c)); }
 504:/usr/include/c++/6/ostream **** 
 505:/usr/include/c++/6/ostream ****   // Specialization
 506:/usr/include/c++/6/ostream ****   template <class _Traits>
 507:/usr/include/c++/6/ostream ****     inline basic_ostream<char, _Traits>&
 508:/usr/include/c++/6/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, char __c)
 509:/usr/include/c++/6/ostream ****     { return __ostream_insert(__out, &__c, 1); }
 510:/usr/include/c++/6/ostream **** 
 511:/usr/include/c++/6/ostream ****   // Signed and unsigned
 512:/usr/include/c++/6/ostream ****   template<class _Traits>
 513:/usr/include/c++/6/ostream ****     inline basic_ostream<char, _Traits>&
 514:/usr/include/c++/6/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
 515:/usr/include/c++/6/ostream ****     { return (__out << static_cast<char>(__c)); }
 516:/usr/include/c++/6/ostream **** 
 517:/usr/include/c++/6/ostream ****   template<class _Traits>
 518:/usr/include/c++/6/ostream ****     inline basic_ostream<char, _Traits>&
 519:/usr/include/c++/6/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
 520:/usr/include/c++/6/ostream ****     { return (__out << static_cast<char>(__c)); }
 521:/usr/include/c++/6/ostream ****   //@}
 522:/usr/include/c++/6/ostream **** 
 523:/usr/include/c++/6/ostream ****   //@{
 524:/usr/include/c++/6/ostream ****   /**
 525:/usr/include/c++/6/ostream ****    *  @brief  String inserters
 526:/usr/include/c++/6/ostream ****    *  @param  __out  An output stream.
 527:/usr/include/c++/6/ostream ****    *  @param  __s  A character string.
 528:/usr/include/c++/6/ostream ****    *  @return  out
 529:/usr/include/c++/6/ostream ****    *  @pre  @p __s must be a non-NULL pointer
 530:/usr/include/c++/6/ostream ****    *
 531:/usr/include/c++/6/ostream ****    *  Behaves like one of the formatted arithmetic inserters described in
 532:/usr/include/c++/6/ostream ****    *  std::basic_ostream.  After constructing a sentry object with good
 533:/usr/include/c++/6/ostream ****    *  status, this function inserts @c traits::length(__s) characters starting
 534:/usr/include/c++/6/ostream ****    *  at @p __s, widened if necessary, followed by any required padding (as
 535:/usr/include/c++/6/ostream ****    *  determined by [22.2.2.2.2]).  @c __out.width(0) is then called.
 536:/usr/include/c++/6/ostream ****   */
 537:/usr/include/c++/6/ostream ****   template<typename _CharT, typename _Traits>
 538:/usr/include/c++/6/ostream ****     inline basic_ostream<_CharT, _Traits>&
 539:/usr/include/c++/6/ostream ****     operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
 540:/usr/include/c++/6/ostream ****     {
 541:/usr/include/c++/6/ostream ****       if (!__s)
 542:/usr/include/c++/6/ostream **** 	__out.setstate(ios_base::badbit);
 543:/usr/include/c++/6/ostream ****       else
 544:/usr/include/c++/6/ostream **** 	__ostream_insert(__out, __s,
GAS LISTING /tmp/ccvmoMuv.s 			page 326


 545:/usr/include/c++/6/ostream **** 			 static_cast<streamsize>(_Traits::length(__s)));
 546:/usr/include/c++/6/ostream ****       return __out;
 547:/usr/include/c++/6/ostream ****     }
 548:/usr/include/c++/6/ostream **** 
 549:/usr/include/c++/6/ostream ****   template<typename _CharT, typename _Traits>
 550:/usr/include/c++/6/ostream ****     basic_ostream<_CharT, _Traits> &
 551:/usr/include/c++/6/ostream ****     operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);
 552:/usr/include/c++/6/ostream **** 
 553:/usr/include/c++/6/ostream ****   // Partial specializations
 554:/usr/include/c++/6/ostream ****   template<class _Traits>
 555:/usr/include/c++/6/ostream ****     inline basic_ostream<char, _Traits>&
 556:/usr/include/c++/6/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
 557:/usr/include/c++/6/ostream ****     {
 558:/usr/include/c++/6/ostream ****       if (!__s)
 559:/usr/include/c++/6/ostream **** 	__out.setstate(ios_base::badbit);
 560:/usr/include/c++/6/ostream ****       else
 561:/usr/include/c++/6/ostream **** 	__ostream_insert(__out, __s,
 3791              		.loc 31 561 0
 3792 0182 4889DE   		movq	%rbx, %rsi
 3793 0185 4889C2   		movq	%rax, %rdx
 3794 0188 4C89EF   		movq	%r13, %rdi
 3795              	.LEHB16:
 3796 018b E8000000 		call	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT
 3796      00
 3797              	.LVL327:
 3798              	.LEHE16:
 3799 0190 488B4424 		movq	24(%rsp), %rax
 3799      18
 3800 0195 488B5820 		movq	32(%rax), %rbx
 3801              	.LVL328:
 3802              	.LBE14113:
 3803              	.LBE14112:
 3804              	.LBB14116:
 3805              	.LBB14117:
 3806              	.LBB14118:
 3807              	.LBB14119:
 897:/usr/include/c++/6/bits/stl_tree.h **** 
 3808              		.loc 19 897 0
 3809 0199 4883C010 		addq	$16, %rax
 3810 019d 48890424 		movq	%rax, (%rsp)
 3811              	.LVL329:
 3812              	.LBE14119:
 3813              	.LBE14118:
 3814              	.LBE14117:
 137:/usr/include/boost/exception/info.hpp ****                         {
 3815              		.loc 3 137 0
 3816 01a1 4839C3   		cmpq	%rax, %rbx
 3817 01a4 0F842601 		je	.L233
 3817      0000
 3818 01aa 488B7328 		movq	40(%rbx), %rsi
 3819              	.LVL330:
 3820              	.LBB14120:
 3821              	.LBB14121:
 3822              	.LBB14122:
 3823              		.loc 27 703 0
 3824 01ae 4885F6   		testq	%rsi, %rsi
 3825 01b1 0F841204 		je	.L222
GAS LISTING /tmp/ccvmoMuv.s 			page 327


 3825      0000
 3826              	.LBE14122:
 3827              	.LBE14121:
 3828              	.LBB14127:
 3829              	.LBB14128:
 3830              	.LBB14129:
 3831              	.LBB14130:
 3832              	.LBB14131:
 3833              	.LBB14132:
 3834              	.LBB14133:
 3835              	.LBB14134:
 3836              	.LBB14135:
 3837              	.LBB14136:
 3838              	.LBB14137:
  85:/usr/include/boost/core/demangle.hpp **** }
 3839              		.loc 25 85 0
 3840 01b7 488D4424 		leaq	96(%rsp), %rax
 3840      60
 3841              	.LVL331:
 3842 01bc 4C8D7424 		leaq	32(%rsp), %r14
 3842      20
 3843 01c1 48894424 		movq	%rax, 8(%rsp)
 3843      08
 3844 01c6 488D8424 		leaq	128(%rsp), %rax
 3844      80000000 
 3845              	.LBE14137:
 3846              	.LBE14136:
 3847              	.LBE14135:
 3848              	.LBB14148:
 3849              	.LBB14149:
 3850              	.LBB14150:
 3851              	.LBB14151:
 3852              	.LBB14152:
 3853              	.LBB14153:
 110:/usr/include/c++/6/bits/basic_string.h **** 
 3854              		.loc 10 110 0
 3855 01ce 4D8D6610 		leaq	16(%r14), %r12
 3856              	.LBE14153:
 3857              	.LBE14152:
 3858              	.LBE14151:
 3859              	.LBE14150:
 3860              	.LBE14149:
 3861              	.LBE14148:
 3862              	.LBB14162:
 3863              	.LBB14143:
 3864              	.LBB14138:
  85:/usr/include/boost/core/demangle.hpp **** }
 3865              		.loc 25 85 0
 3866 01d2 48894424 		movq	%rax, 16(%rsp)
 3866      10
 3867 01d7 E9AC0000 		jmp	.L221
 3867      00
 3868              	.LVL332:
 3869 01dc 0F1F4000 		.p2align 4,,10
 3870              		.p2align 3
 3871              	.L277:
 3872 01e0 488B4608 		movq	8(%rsi), %rax
GAS LISTING /tmp/ccvmoMuv.s 			page 328


 3873 01e4 488B4C24 		movq	8(%rsp), %rcx
 3873      08
 3874 01e9 488B5424 		movq	16(%rsp), %rdx
 3874      10
 3875 01ee 4C8B7808 		movq	8(%rax), %r15
 3876              	.LVL333:
 3877              	.LBE14138:
 3878              	.LBE14143:
 3879              	.LBE14162:
 3880              	.LBE14134:
 3881              	.LBE14133:
 3882              	.LBB14194:
 3883              	.LBB14195:
 100:/usr/include/c++/6/typeinfo **** 
 3884              		.loc 26 100 0
 3885 01f2 31C0     		xorl	%eax, %eax
 3886 01f4 41803F2A 		cmpb	$42, (%r15)
 3887              	.LBE14195:
 3888              	.LBE14194:
 3889              	.LBB14198:
 3890              	.LBB14189:
 3891              	.LBB14163:
 3892              	.LBB14144:
 3893              	.LBB14139:
  83:/usr/include/boost/core/demangle.hpp ****     std::size_t size = 0;
 3894              		.loc 25 83 0
 3895 01f8 C7442460 		movl	$0, 96(%rsp)
 3895      00000000 
  84:/usr/include/boost/core/demangle.hpp ****     return abi::__cxa_demangle( name, NULL, &size, &status );
 3896              		.loc 25 84 0
 3897 0200 48C78424 		movq	$0, 128(%rsp)
 3897      80000000 
 3897      00000000 
 3898              	.LBE14139:
 3899              	.LBE14144:
 3900              	.LBE14163:
 3901              	.LBE14189:
 3902              	.LBE14198:
 3903              	.LBB14199:
 3904              	.LBB14196:
 100:/usr/include/c++/6/typeinfo **** 
 3905              		.loc 26 100 0
 3906 020c 0F94C0   		sete	%al
 3907              	.LBE14196:
 3908              	.LBE14199:
 3909              	.LBB14200:
 3910              	.LBB14190:
 3911              	.LBB14164:
 3912              	.LBB14145:
 3913              	.LBB14140:
  85:/usr/include/boost/core/demangle.hpp **** }
 3914              		.loc 25 85 0
 3915 020f 31F6     		xorl	%esi, %esi
 3916              	.LVL334:
 3917              	.LBE14140:
 3918              	.LBE14145:
 3919              	.LBE14164:
GAS LISTING /tmp/ccvmoMuv.s 			page 329


 3920              	.LBE14190:
 3921              	.LBE14200:
 3922              	.LBB14201:
 3923              	.LBB14197:
 100:/usr/include/c++/6/typeinfo **** 
 3924              		.loc 26 100 0
 3925 0211 4901C7   		addq	%rax, %r15
 3926              	.LVL335:
 3927              	.LBE14197:
 3928              	.LBE14201:
 3929              	.LBB14202:
 3930              	.LBB14191:
 3931              	.LBB14165:
 3932              	.LBB14146:
 3933              	.LBB14141:
  85:/usr/include/boost/core/demangle.hpp **** }
 3934              		.loc 25 85 0
 3935 0214 4C89FF   		movq	%r15, %rdi
 3936 0217 E8000000 		call	__cxa_demangle@PLT
 3936      00
 3937              	.LVL336:
 3938              	.LBE14141:
 3939              	.LBE14146:
 3940              	.LBE14165:
 3941              		.loc 25 97 0
 3942 021c 4885C0   		testq	%rax, %rax
 3943              	.LBB14166:
 3944              	.LBB14147:
 3945              	.LBB14142:
  85:/usr/include/boost/core/demangle.hpp **** }
 3946              		.loc 25 85 0
 3947 021f 4889C5   		movq	%rax, %rbp
 3948              	.LVL337:
 3949              	.LBE14142:
 3950              	.LBE14147:
 3951              	.LBE14166:
 3952              	.LBB14167:
 3953              	.LBB14168:
 3954              	.LBB14169:
 3955              	.LBB14170:
 3956              	.LBB14171:
 3957              	.LBB14172:
 110:/usr/include/c++/6/bits/basic_string.h **** 
 3958              		.loc 10 110 0
 3959 0222 4C896424 		movq	%r12, 32(%rsp)
 3959      20
 3960              	.LBE14172:
 3961              	.LBE14171:
 3962              	.LBE14170:
 3963              	.LBE14169:
 3964              	.LBE14168:
 3965              	.LBE14167:
 3966              		.loc 25 97 0
 3967 0227 747F     		je	.L225
 3968              	.LVL338:
 3969              	.LBB14181:
 3970              	.LBB14180:
GAS LISTING /tmp/ccvmoMuv.s 			page 330


 3971              	.LBB14179:
 3972              	.LBB14173:
 3973              	.LBB14174:
 267:/usr/include/c++/6/bits/char_traits.h **** 
 3974              		.loc 9 267 0
 3975 0229 4889C7   		movq	%rax, %rdi
 3976 022c E8000000 		call	strlen@PLT
 3976      00
 3977              	.LVL339:
 3978              	.LBE14174:
 3979              	.LBE14173:
 456:/usr/include/c++/6/bits/basic_string.h **** 
 3980              		.loc 10 456 0
 3981 0231 488D5405 		leaq	0(%rbp,%rax), %rdx
 3981      00
 3982              	.LVL340:
 3983              	.LBB14175:
 3984              	.LBB14176:
 3985              	.LBB14177:
 3986              	.LBB14178:
 196:/usr/include/c++/6/bits/basic_string.h **** 	}
 3987              		.loc 10 196 0
 3988 0236 4889EE   		movq	%rbp, %rsi
 3989 0239 4C89F7   		movq	%r14, %rdi
 3990              	.LEHB17:
 3991 023c E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_it
 3991      00
 3992              	.LVL341:
 3993              	.LEHE17:
 3994              	.L228:
 3995              	.LBE14178:
 3996              	.LBE14177:
 3997              	.LBE14176:
 3998              	.LBE14175:
 3999              	.LBE14179:
 4000              	.LBE14180:
 4001              	.LBE14181:
 4002              	.LBB14182:
 4003              	.LBB14183:
 4004              	.LBB14184:
  90:/usr/include/boost/core/demangle.hpp **** }
 4005              		.loc 25 90 0
 4006 0241 4889EF   		movq	%rbp, %rdi
 4007 0244 E8000000 		call	free@PLT
 4007      00
 4008              	.LVL342:
 4009              	.L226:
 4010              	.LBE14184:
 4011              	.LBE14183:
 4012              	.LBE14182:
 4013              	.LBE14191:
 4014              	.LBE14202:
 4015              	.LBE14132:
 4016              	.LBE14131:
 4017              	.LBE14130:
 4018              	.LBE14129:
 4019              	.LBE14128:
GAS LISTING /tmp/ccvmoMuv.s 			page 331


 4020              	.LBE14127:
 4021              	.LBB14215:
 4022              	.LBB14216:
1270:/usr/include/c++/6/bits/basic_string.h ****       }
1271:/usr/include/c++/6/bits/basic_string.h **** 
1272:/usr/include/c++/6/bits/basic_string.h ****       /**
1273:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Set value to multiple characters.
1274:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Length of the resulting string.
1275:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  The character to use.
1276:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1277:/usr/include/c++/6/bits/basic_string.h ****        *
1278:/usr/include/c++/6/bits/basic_string.h ****        *  This function sets the value of this string to @a __n copies of
1279:/usr/include/c++/6/bits/basic_string.h ****        *  character @a __c.
1280:/usr/include/c++/6/bits/basic_string.h ****        */
1281:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1282:/usr/include/c++/6/bits/basic_string.h ****       assign(size_type __n, _CharT __c)
1283:/usr/include/c++/6/bits/basic_string.h ****       { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
1284:/usr/include/c++/6/bits/basic_string.h **** 
1285:/usr/include/c++/6/bits/basic_string.h ****       /**
1286:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Set value to a range of characters.
1287:/usr/include/c++/6/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1288:/usr/include/c++/6/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1289:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1290:/usr/include/c++/6/bits/basic_string.h ****        *
1291:/usr/include/c++/6/bits/basic_string.h ****        *  Sets value of string to characters in the range [__first,__last).
1292:/usr/include/c++/6/bits/basic_string.h ****       */
1293:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
1294:/usr/include/c++/6/bits/basic_string.h ****       template<class _InputIterator,
1295:/usr/include/c++/6/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1296:/usr/include/c++/6/bits/basic_string.h **** #else
1297:/usr/include/c++/6/bits/basic_string.h ****       template<class _InputIterator>
1298:/usr/include/c++/6/bits/basic_string.h **** #endif
1299:/usr/include/c++/6/bits/basic_string.h ****         basic_string&
1300:/usr/include/c++/6/bits/basic_string.h ****         assign(_InputIterator __first, _InputIterator __last)
1301:/usr/include/c++/6/bits/basic_string.h ****         { return this->replace(begin(), end(), __first, __last); }
1302:/usr/include/c++/6/bits/basic_string.h **** 
1303:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
1304:/usr/include/c++/6/bits/basic_string.h ****       /**
1305:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Set value to an initializer_list of characters.
1306:/usr/include/c++/6/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to assign.
1307:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1308:/usr/include/c++/6/bits/basic_string.h ****        */
1309:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1310:/usr/include/c++/6/bits/basic_string.h ****       assign(initializer_list<_CharT> __l)
1311:/usr/include/c++/6/bits/basic_string.h ****       { return this->assign(__l.begin(), __l.size()); }
1312:/usr/include/c++/6/bits/basic_string.h **** #endif // C++11
1313:/usr/include/c++/6/bits/basic_string.h **** 
1314:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
1315:/usr/include/c++/6/bits/basic_string.h ****       /**
1316:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1317:/usr/include/c++/6/bits/basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
1318:/usr/include/c++/6/bits/basic_string.h ****        *              insert at.
1319:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1320:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  The character to insert.
1321:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1322:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1323:/usr/include/c++/6/bits/basic_string.h ****        *
GAS LISTING /tmp/ccvmoMuv.s 			page 332


1324:/usr/include/c++/6/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
1325:/usr/include/c++/6/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1326:/usr/include/c++/6/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1327:/usr/include/c++/6/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1328:/usr/include/c++/6/bits/basic_string.h ****        *  change if an error is thrown.
1329:/usr/include/c++/6/bits/basic_string.h ****       */
1330:/usr/include/c++/6/bits/basic_string.h ****       iterator
1331:/usr/include/c++/6/bits/basic_string.h ****       insert(const_iterator __p, size_type __n, _CharT __c)
1332:/usr/include/c++/6/bits/basic_string.h ****       {
1333:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1334:/usr/include/c++/6/bits/basic_string.h **** 	const size_type __pos = __p - begin();
1335:/usr/include/c++/6/bits/basic_string.h **** 	this->replace(__p, __p, __n, __c);
1336:/usr/include/c++/6/bits/basic_string.h **** 	return iterator(this->_M_data() + __pos);
1337:/usr/include/c++/6/bits/basic_string.h ****       }
1338:/usr/include/c++/6/bits/basic_string.h **** #else
1339:/usr/include/c++/6/bits/basic_string.h ****       /**
1340:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1341:/usr/include/c++/6/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1342:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1343:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  The character to insert.
1344:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1345:/usr/include/c++/6/bits/basic_string.h ****        *
1346:/usr/include/c++/6/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
1347:/usr/include/c++/6/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1348:/usr/include/c++/6/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1349:/usr/include/c++/6/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1350:/usr/include/c++/6/bits/basic_string.h ****        *  change if an error is thrown.
1351:/usr/include/c++/6/bits/basic_string.h ****       */
1352:/usr/include/c++/6/bits/basic_string.h ****       void
1353:/usr/include/c++/6/bits/basic_string.h ****       insert(iterator __p, size_type __n, _CharT __c)
1354:/usr/include/c++/6/bits/basic_string.h ****       {	this->replace(__p, __p, __n, __c);  }
1355:/usr/include/c++/6/bits/basic_string.h **** #endif
1356:/usr/include/c++/6/bits/basic_string.h **** 
1357:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
1358:/usr/include/c++/6/bits/basic_string.h ****       /**
1359:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Insert a range of characters.
1360:/usr/include/c++/6/bits/basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
1361:/usr/include/c++/6/bits/basic_string.h ****        *              insert at.
1362:/usr/include/c++/6/bits/basic_string.h ****        *  @param __beg  Start of range.
1363:/usr/include/c++/6/bits/basic_string.h ****        *  @param __end  End of range.
1364:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1365:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1366:/usr/include/c++/6/bits/basic_string.h ****        *
1367:/usr/include/c++/6/bits/basic_string.h ****        *  Inserts characters in range [beg,end).  If adding characters
1368:/usr/include/c++/6/bits/basic_string.h ****        *  causes the length to exceed max_size(), length_error is
1369:/usr/include/c++/6/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1370:/usr/include/c++/6/bits/basic_string.h ****        *  is thrown.
1371:/usr/include/c++/6/bits/basic_string.h ****       */
1372:/usr/include/c++/6/bits/basic_string.h ****       template<class _InputIterator,
1373:/usr/include/c++/6/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1374:/usr/include/c++/6/bits/basic_string.h **** 	iterator
1375:/usr/include/c++/6/bits/basic_string.h ****         insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
1376:/usr/include/c++/6/bits/basic_string.h ****         {
1377:/usr/include/c++/6/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1378:/usr/include/c++/6/bits/basic_string.h **** 	  const size_type __pos = __p - begin();
1379:/usr/include/c++/6/bits/basic_string.h **** 	  this->replace(__p, __p, __beg, __end);
1380:/usr/include/c++/6/bits/basic_string.h **** 	  return iterator(this->_M_data() + __pos);
GAS LISTING /tmp/ccvmoMuv.s 			page 333


1381:/usr/include/c++/6/bits/basic_string.h **** 	}
1382:/usr/include/c++/6/bits/basic_string.h **** #else
1383:/usr/include/c++/6/bits/basic_string.h ****       /**
1384:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Insert a range of characters.
1385:/usr/include/c++/6/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1386:/usr/include/c++/6/bits/basic_string.h ****        *  @param __beg  Start of range.
1387:/usr/include/c++/6/bits/basic_string.h ****        *  @param __end  End of range.
1388:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1389:/usr/include/c++/6/bits/basic_string.h ****        *
1390:/usr/include/c++/6/bits/basic_string.h ****        *  Inserts characters in range [__beg,__end).  If adding
1391:/usr/include/c++/6/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1392:/usr/include/c++/6/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1393:/usr/include/c++/6/bits/basic_string.h ****        *  change if an error is thrown.
1394:/usr/include/c++/6/bits/basic_string.h ****       */
1395:/usr/include/c++/6/bits/basic_string.h ****       template<class _InputIterator>
1396:/usr/include/c++/6/bits/basic_string.h ****         void
1397:/usr/include/c++/6/bits/basic_string.h ****         insert(iterator __p, _InputIterator __beg, _InputIterator __end)
1398:/usr/include/c++/6/bits/basic_string.h ****         { this->replace(__p, __p, __beg, __end); }
1399:/usr/include/c++/6/bits/basic_string.h **** #endif
1400:/usr/include/c++/6/bits/basic_string.h **** 
1401:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
1402:/usr/include/c++/6/bits/basic_string.h ****       /**
1403:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Insert an initializer_list of characters.
1404:/usr/include/c++/6/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1405:/usr/include/c++/6/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
1406:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1407:/usr/include/c++/6/bits/basic_string.h ****        */
1408:/usr/include/c++/6/bits/basic_string.h ****       void
1409:/usr/include/c++/6/bits/basic_string.h ****       insert(iterator __p, initializer_list<_CharT> __l)
1410:/usr/include/c++/6/bits/basic_string.h ****       {
1411:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1412:/usr/include/c++/6/bits/basic_string.h **** 	this->insert(__p - begin(), __l.begin(), __l.size());
1413:/usr/include/c++/6/bits/basic_string.h ****       }
1414:/usr/include/c++/6/bits/basic_string.h **** #endif // C++11
1415:/usr/include/c++/6/bits/basic_string.h **** 
1416:/usr/include/c++/6/bits/basic_string.h ****       /**
1417:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Insert value of a string.
1418:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
1419:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  The string to insert.
1420:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1421:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1422:/usr/include/c++/6/bits/basic_string.h ****        *
1423:/usr/include/c++/6/bits/basic_string.h ****        *  Inserts value of @a __str starting at @a __pos1.  If adding
1424:/usr/include/c++/6/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1425:/usr/include/c++/6/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1426:/usr/include/c++/6/bits/basic_string.h ****        *  change if an error is thrown.
1427:/usr/include/c++/6/bits/basic_string.h ****       */
1428:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1429:/usr/include/c++/6/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str)
1430:/usr/include/c++/6/bits/basic_string.h ****       { return this->replace(__pos1, size_type(0),
1431:/usr/include/c++/6/bits/basic_string.h **** 			     __str._M_data(), __str.size()); }
1432:/usr/include/c++/6/bits/basic_string.h **** 
1433:/usr/include/c++/6/bits/basic_string.h ****       /**
1434:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Insert a substring.
1435:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
1436:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  The string to insert.
1437:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
GAS LISTING /tmp/ccvmoMuv.s 			page 334


1438:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
1439:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1440:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1441:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size() or
1442:/usr/include/c++/6/bits/basic_string.h ****        *  @a __pos2 > @a str.size().
1443:/usr/include/c++/6/bits/basic_string.h ****        *
1444:/usr/include/c++/6/bits/basic_string.h ****        *  Starting at @a pos1, insert @a __n character of @a __str
1445:/usr/include/c++/6/bits/basic_string.h ****        *  beginning with @a __pos2.  If adding characters causes the
1446:/usr/include/c++/6/bits/basic_string.h ****        *  length to exceed max_size(), length_error is thrown.  If @a
1447:/usr/include/c++/6/bits/basic_string.h ****        *  __pos1 is beyond the end of this string or @a __pos2 is
1448:/usr/include/c++/6/bits/basic_string.h ****        *  beyond the end of @a __str, out_of_range is thrown.  The
1449:/usr/include/c++/6/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
1450:/usr/include/c++/6/bits/basic_string.h ****       */
1451:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1452:/usr/include/c++/6/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str,
1453:/usr/include/c++/6/bits/basic_string.h **** 	     size_type __pos2, size_type __n)
1454:/usr/include/c++/6/bits/basic_string.h ****       { return this->replace(__pos1, size_type(0), __str._M_data()
1455:/usr/include/c++/6/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::insert"),
1456:/usr/include/c++/6/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n)); }
1457:/usr/include/c++/6/bits/basic_string.h **** 
1458:/usr/include/c++/6/bits/basic_string.h ****       /**
1459:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Insert a C substring.
1460:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
1461:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  The C string to insert.
1462:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  The number of characters to insert.
1463:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1464:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1465:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1466:/usr/include/c++/6/bits/basic_string.h ****        *  string.
1467:/usr/include/c++/6/bits/basic_string.h ****        *
1468:/usr/include/c++/6/bits/basic_string.h ****        *  Inserts the first @a __n characters of @a __s starting at @a
1469:/usr/include/c++/6/bits/basic_string.h ****        *  __pos.  If adding characters causes the length to exceed
1470:/usr/include/c++/6/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos is beyond
1471:/usr/include/c++/6/bits/basic_string.h ****        *  end(), out_of_range is thrown.  The value of the string
1472:/usr/include/c++/6/bits/basic_string.h ****        *  doesn't change if an error is thrown.
1473:/usr/include/c++/6/bits/basic_string.h ****       */
1474:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1475:/usr/include/c++/6/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s, size_type __n)
1476:/usr/include/c++/6/bits/basic_string.h ****       { return this->replace(__pos, size_type(0), __s, __n); }
1477:/usr/include/c++/6/bits/basic_string.h **** 
1478:/usr/include/c++/6/bits/basic_string.h ****       /**
1479:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Insert a C string.
1480:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
1481:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  The C string to insert.
1482:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1483:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1484:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1485:/usr/include/c++/6/bits/basic_string.h ****        *  string.
1486:/usr/include/c++/6/bits/basic_string.h ****        *
1487:/usr/include/c++/6/bits/basic_string.h ****        *  Inserts the first @a n characters of @a __s starting at @a __pos.  If
1488:/usr/include/c++/6/bits/basic_string.h ****        *  adding characters causes the length to exceed max_size(),
1489:/usr/include/c++/6/bits/basic_string.h ****        *  length_error is thrown.  If @a __pos is beyond end(), out_of_range is
1490:/usr/include/c++/6/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error is
1491:/usr/include/c++/6/bits/basic_string.h ****        *  thrown.
1492:/usr/include/c++/6/bits/basic_string.h ****       */
1493:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1494:/usr/include/c++/6/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s)
GAS LISTING /tmp/ccvmoMuv.s 			page 335


1495:/usr/include/c++/6/bits/basic_string.h ****       {
1496:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1497:/usr/include/c++/6/bits/basic_string.h **** 	return this->replace(__pos, size_type(0), __s,
1498:/usr/include/c++/6/bits/basic_string.h **** 			     traits_type::length(__s));
1499:/usr/include/c++/6/bits/basic_string.h ****       }
1500:/usr/include/c++/6/bits/basic_string.h **** 
1501:/usr/include/c++/6/bits/basic_string.h ****       /**
1502:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1503:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index in string to insert at.
1504:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1505:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  The character to insert.
1506:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1507:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1508:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1509:/usr/include/c++/6/bits/basic_string.h ****        *  string.
1510:/usr/include/c++/6/bits/basic_string.h ****        *
1511:/usr/include/c++/6/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at index
1512:/usr/include/c++/6/bits/basic_string.h ****        *  @a __pos.  If adding characters causes the length to exceed
1513:/usr/include/c++/6/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos > length(),
1514:/usr/include/c++/6/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1515:/usr/include/c++/6/bits/basic_string.h ****        *  change if an error is thrown.
1516:/usr/include/c++/6/bits/basic_string.h ****       */
1517:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1518:/usr/include/c++/6/bits/basic_string.h ****       insert(size_type __pos, size_type __n, _CharT __c)
1519:/usr/include/c++/6/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
1520:/usr/include/c++/6/bits/basic_string.h **** 			      size_type(0), __n, __c); }
1521:/usr/include/c++/6/bits/basic_string.h **** 
1522:/usr/include/c++/6/bits/basic_string.h ****       /**
1523:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Insert one character.
1524:/usr/include/c++/6/bits/basic_string.h ****        *  @param __p  Iterator referencing position in string to insert at.
1525:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  The character to insert.
1526:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Iterator referencing newly inserted char.
1527:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1528:/usr/include/c++/6/bits/basic_string.h ****        *
1529:/usr/include/c++/6/bits/basic_string.h ****        *  Inserts character @a __c at position referenced by @a __p.
1530:/usr/include/c++/6/bits/basic_string.h ****        *  If adding character causes the length to exceed max_size(),
1531:/usr/include/c++/6/bits/basic_string.h ****        *  length_error is thrown.  If @a __p is beyond end of string,
1532:/usr/include/c++/6/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1533:/usr/include/c++/6/bits/basic_string.h ****        *  change if an error is thrown.
1534:/usr/include/c++/6/bits/basic_string.h ****       */
1535:/usr/include/c++/6/bits/basic_string.h ****       iterator
1536:/usr/include/c++/6/bits/basic_string.h ****       insert(__const_iterator __p, _CharT __c)
1537:/usr/include/c++/6/bits/basic_string.h ****       {
1538:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1539:/usr/include/c++/6/bits/basic_string.h **** 	const size_type __pos = __p - begin();
1540:/usr/include/c++/6/bits/basic_string.h **** 	_M_replace_aux(__pos, size_type(0), size_type(1), __c);
1541:/usr/include/c++/6/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1542:/usr/include/c++/6/bits/basic_string.h ****       }
1543:/usr/include/c++/6/bits/basic_string.h **** 
1544:/usr/include/c++/6/bits/basic_string.h ****       /**
1545:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Remove characters.
1546:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of first character to remove (default 0).
1547:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters to remove (default remainder).
1548:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1549:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1550:/usr/include/c++/6/bits/basic_string.h ****        *  string.
1551:/usr/include/c++/6/bits/basic_string.h ****        *
GAS LISTING /tmp/ccvmoMuv.s 			page 336


1552:/usr/include/c++/6/bits/basic_string.h ****        *  Removes @a __n characters from this string starting at @a
1553:/usr/include/c++/6/bits/basic_string.h ****        *  __pos.  The length of the string is reduced by @a __n.  If
1554:/usr/include/c++/6/bits/basic_string.h ****        *  there are < @a __n characters to remove, the remainder of
1555:/usr/include/c++/6/bits/basic_string.h ****        *  the string is truncated.  If @a __p is beyond end of string,
1556:/usr/include/c++/6/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1557:/usr/include/c++/6/bits/basic_string.h ****        *  change if an error is thrown.
1558:/usr/include/c++/6/bits/basic_string.h ****       */
1559:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1560:/usr/include/c++/6/bits/basic_string.h ****       erase(size_type __pos = 0, size_type __n = npos)
1561:/usr/include/c++/6/bits/basic_string.h ****       {
1562:/usr/include/c++/6/bits/basic_string.h **** 	this->_M_erase(_M_check(__pos, "basic_string::erase"),
1563:/usr/include/c++/6/bits/basic_string.h **** 		       _M_limit(__pos, __n));
1564:/usr/include/c++/6/bits/basic_string.h **** 	return *this;
1565:/usr/include/c++/6/bits/basic_string.h ****       }
1566:/usr/include/c++/6/bits/basic_string.h **** 
1567:/usr/include/c++/6/bits/basic_string.h ****       /**
1568:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Remove one character.
1569:/usr/include/c++/6/bits/basic_string.h ****        *  @param __position  Iterator referencing the character to remove.
1570:/usr/include/c++/6/bits/basic_string.h ****        *  @return  iterator referencing same location after removal.
1571:/usr/include/c++/6/bits/basic_string.h ****        *
1572:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the character at @a __position from this string. The value
1573:/usr/include/c++/6/bits/basic_string.h ****        *  of the string doesn't change if an error is thrown.
1574:/usr/include/c++/6/bits/basic_string.h ****       */
1575:/usr/include/c++/6/bits/basic_string.h ****       iterator
1576:/usr/include/c++/6/bits/basic_string.h ****       erase(__const_iterator __position)
1577:/usr/include/c++/6/bits/basic_string.h ****       {
1578:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__position >= begin()
1579:/usr/include/c++/6/bits/basic_string.h **** 				 && __position < end());
1580:/usr/include/c++/6/bits/basic_string.h **** 	const size_type __pos = __position - begin();
1581:/usr/include/c++/6/bits/basic_string.h **** 	this->_M_erase(__pos, size_type(1));
1582:/usr/include/c++/6/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1583:/usr/include/c++/6/bits/basic_string.h ****       }
1584:/usr/include/c++/6/bits/basic_string.h **** 
1585:/usr/include/c++/6/bits/basic_string.h ****       /**
1586:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Remove a range of characters.
1587:/usr/include/c++/6/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to remove.
1588:/usr/include/c++/6/bits/basic_string.h ****        *  @param __last  Iterator referencing the end of the range.
1589:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Iterator referencing location of first after removal.
1590:/usr/include/c++/6/bits/basic_string.h ****        *
1591:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the characters in the range [first,last) from this string.
1592:/usr/include/c++/6/bits/basic_string.h ****        *  The value of the string doesn't change if an error is thrown.
1593:/usr/include/c++/6/bits/basic_string.h ****       */
1594:/usr/include/c++/6/bits/basic_string.h ****       iterator
1595:/usr/include/c++/6/bits/basic_string.h ****       erase(__const_iterator __first, __const_iterator __last)
1596:/usr/include/c++/6/bits/basic_string.h ****       {
1597:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__first >= begin() && __first <= __last
1598:/usr/include/c++/6/bits/basic_string.h **** 				 && __last <= end());
1599:/usr/include/c++/6/bits/basic_string.h ****         const size_type __pos = __first - begin();
1600:/usr/include/c++/6/bits/basic_string.h **** 	this->_M_erase(__pos, __last - __first);
1601:/usr/include/c++/6/bits/basic_string.h **** 	return iterator(this->_M_data() + __pos);
1602:/usr/include/c++/6/bits/basic_string.h ****       }
1603:/usr/include/c++/6/bits/basic_string.h **** 
1604:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
1605:/usr/include/c++/6/bits/basic_string.h ****       /**
1606:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Remove the last character.
1607:/usr/include/c++/6/bits/basic_string.h ****        *
1608:/usr/include/c++/6/bits/basic_string.h ****        *  The string must be non-empty.
GAS LISTING /tmp/ccvmoMuv.s 			page 337


1609:/usr/include/c++/6/bits/basic_string.h ****        */
1610:/usr/include/c++/6/bits/basic_string.h ****       void
1611:/usr/include/c++/6/bits/basic_string.h ****       pop_back() noexcept
1612:/usr/include/c++/6/bits/basic_string.h ****       {
1613:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1614:/usr/include/c++/6/bits/basic_string.h **** 	_M_erase(size() - 1, 1);
1615:/usr/include/c++/6/bits/basic_string.h ****       }
1616:/usr/include/c++/6/bits/basic_string.h **** #endif // C++11
1617:/usr/include/c++/6/bits/basic_string.h **** 
1618:/usr/include/c++/6/bits/basic_string.h ****       /**
1619:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1620:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1621:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters to be replaced.
1622:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  String to insert.
1623:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1624:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1625:/usr/include/c++/6/bits/basic_string.h ****        *  string.
1626:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1627:/usr/include/c++/6/bits/basic_string.h ****        *
1628:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos+__n) from
1629:/usr/include/c++/6/bits/basic_string.h ****        *  this string.  In place, the value of @a __str is inserted.
1630:/usr/include/c++/6/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1631:/usr/include/c++/6/bits/basic_string.h ****        *  If the length of the result exceeds max_size(), length_error
1632:/usr/include/c++/6/bits/basic_string.h ****        *  is thrown.  The value of the string doesn't change if an
1633:/usr/include/c++/6/bits/basic_string.h ****        *  error is thrown.
1634:/usr/include/c++/6/bits/basic_string.h ****       */
1635:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1636:/usr/include/c++/6/bits/basic_string.h ****       replace(size_type __pos, size_type __n, const basic_string& __str)
1637:/usr/include/c++/6/bits/basic_string.h ****       { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
1638:/usr/include/c++/6/bits/basic_string.h **** 
1639:/usr/include/c++/6/bits/basic_string.h ****       /**
1640:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1641:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos1  Index of first character to replace.
1642:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1643:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  String to insert.
1644:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos2  Index of first character of str to use.
1645:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n2  Number of characters from str to use.
1646:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1647:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos1 > size() or @a __pos2 >
1648:/usr/include/c++/6/bits/basic_string.h ****        *  __str.size().
1649:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1650:/usr/include/c++/6/bits/basic_string.h ****        *
1651:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the characters in the range [__pos1,__pos1 + n) from this
1652:/usr/include/c++/6/bits/basic_string.h ****        *  string.  In place, the value of @a __str is inserted.  If @a __pos is
1653:/usr/include/c++/6/bits/basic_string.h ****        *  beyond end of string, out_of_range is thrown.  If the length of the
1654:/usr/include/c++/6/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The value of the
1655:/usr/include/c++/6/bits/basic_string.h ****        *  string doesn't change if an error is thrown.
1656:/usr/include/c++/6/bits/basic_string.h ****       */
1657:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1658:/usr/include/c++/6/bits/basic_string.h ****       replace(size_type __pos1, size_type __n1, const basic_string& __str,
1659:/usr/include/c++/6/bits/basic_string.h **** 	      size_type __pos2, size_type __n2)
1660:/usr/include/c++/6/bits/basic_string.h ****       { return this->replace(__pos1, __n1, __str._M_data()
1661:/usr/include/c++/6/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::replace"),
1662:/usr/include/c++/6/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n2)); }
1663:/usr/include/c++/6/bits/basic_string.h **** 
1664:/usr/include/c++/6/bits/basic_string.h ****       /**
1665:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Replace characters with value of a C substring.
GAS LISTING /tmp/ccvmoMuv.s 			page 338


1666:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1667:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1668:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string to insert.
1669:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n2  Number of characters from @a s to use.
1670:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1671:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size().
1672:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1673:/usr/include/c++/6/bits/basic_string.h ****        *
1674:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
1675:/usr/include/c++/6/bits/basic_string.h ****        *  from this string.  In place, the first @a __n2 characters of
1676:/usr/include/c++/6/bits/basic_string.h ****        *  @a __s are inserted, or all of @a __s if @a __n2 is too large.  If
1677:/usr/include/c++/6/bits/basic_string.h ****        *  @a __pos is beyond end of string, out_of_range is thrown.  If
1678:/usr/include/c++/6/bits/basic_string.h ****        *  the length of result exceeds max_size(), length_error is
1679:/usr/include/c++/6/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1680:/usr/include/c++/6/bits/basic_string.h ****        *  is thrown.
1681:/usr/include/c++/6/bits/basic_string.h ****       */
1682:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1683:/usr/include/c++/6/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s,
1684:/usr/include/c++/6/bits/basic_string.h **** 	      size_type __n2)
1685:/usr/include/c++/6/bits/basic_string.h ****       {
1686:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n2);
1687:/usr/include/c++/6/bits/basic_string.h **** 	return _M_replace(_M_check(__pos, "basic_string::replace"),
1688:/usr/include/c++/6/bits/basic_string.h **** 			  _M_limit(__pos, __n1), __s, __n2);
1689:/usr/include/c++/6/bits/basic_string.h ****       }
1690:/usr/include/c++/6/bits/basic_string.h **** 
1691:/usr/include/c++/6/bits/basic_string.h ****       /**
1692:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Replace characters with value of a C string.
1693:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1694:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1695:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string to insert.
1696:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1697:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos > size().
1698:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1699:/usr/include/c++/6/bits/basic_string.h ****        *
1700:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
1701:/usr/include/c++/6/bits/basic_string.h ****        *  from this string.  In place, the characters of @a __s are
1702:/usr/include/c++/6/bits/basic_string.h ****        *  inserted.  If @a __pos is beyond end of string, out_of_range
1703:/usr/include/c++/6/bits/basic_string.h ****        *  is thrown.  If the length of result exceeds max_size(),
1704:/usr/include/c++/6/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1705:/usr/include/c++/6/bits/basic_string.h ****        *  change if an error is thrown.
1706:/usr/include/c++/6/bits/basic_string.h ****       */
1707:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1708:/usr/include/c++/6/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s)
1709:/usr/include/c++/6/bits/basic_string.h ****       {
1710:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1711:/usr/include/c++/6/bits/basic_string.h **** 	return this->replace(__pos, __n1, __s, traits_type::length(__s));
1712:/usr/include/c++/6/bits/basic_string.h ****       }
1713:/usr/include/c++/6/bits/basic_string.h **** 
1714:/usr/include/c++/6/bits/basic_string.h ****       /**
1715:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Replace characters with multiple characters.
1716:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1717:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1718:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n2  Number of characters to insert.
1719:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  Character to insert.
1720:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1721:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos > size().
1722:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
GAS LISTING /tmp/ccvmoMuv.s 			page 339


1723:/usr/include/c++/6/bits/basic_string.h ****        *
1724:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the characters in the range [pos,pos + n1) from this
1725:/usr/include/c++/6/bits/basic_string.h ****        *  string.  In place, @a __n2 copies of @a __c are inserted.
1726:/usr/include/c++/6/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1727:/usr/include/c++/6/bits/basic_string.h ****        *  If the length of result exceeds max_size(), length_error is
1728:/usr/include/c++/6/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1729:/usr/include/c++/6/bits/basic_string.h ****        *  is thrown.
1730:/usr/include/c++/6/bits/basic_string.h ****       */
1731:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1732:/usr/include/c++/6/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
1733:/usr/include/c++/6/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
1734:/usr/include/c++/6/bits/basic_string.h **** 			      _M_limit(__pos, __n1), __n2, __c); }
1735:/usr/include/c++/6/bits/basic_string.h **** 
1736:/usr/include/c++/6/bits/basic_string.h ****       /**
1737:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Replace range of characters with string.
1738:/usr/include/c++/6/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1739:/usr/include/c++/6/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1740:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  String value to insert.
1741:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1742:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1743:/usr/include/c++/6/bits/basic_string.h ****        *
1744:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
1745:/usr/include/c++/6/bits/basic_string.h ****        *  the value of @a __str is inserted.  If the length of result
1746:/usr/include/c++/6/bits/basic_string.h ****        *  exceeds max_size(), length_error is thrown.  The value of
1747:/usr/include/c++/6/bits/basic_string.h ****        *  the string doesn't change if an error is thrown.
1748:/usr/include/c++/6/bits/basic_string.h ****       */
1749:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1750:/usr/include/c++/6/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
1751:/usr/include/c++/6/bits/basic_string.h **** 	      const basic_string& __str)
1752:/usr/include/c++/6/bits/basic_string.h ****       { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
1753:/usr/include/c++/6/bits/basic_string.h **** 
1754:/usr/include/c++/6/bits/basic_string.h ****       /**
1755:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Replace range of characters with C substring.
1756:/usr/include/c++/6/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1757:/usr/include/c++/6/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1758:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string value to insert.
1759:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters from s to insert.
1760:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1761:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1762:/usr/include/c++/6/bits/basic_string.h ****        *
1763:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
1764:/usr/include/c++/6/bits/basic_string.h ****        *  the first @a __n characters of @a __s are inserted.  If the
1765:/usr/include/c++/6/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
1766:/usr/include/c++/6/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
1767:/usr/include/c++/6/bits/basic_string.h ****        *  thrown.
1768:/usr/include/c++/6/bits/basic_string.h ****       */
1769:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1770:/usr/include/c++/6/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
1771:/usr/include/c++/6/bits/basic_string.h **** 	      const _CharT* __s, size_type __n)
1772:/usr/include/c++/6/bits/basic_string.h ****       {
1773:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
1774:/usr/include/c++/6/bits/basic_string.h **** 				 && __i2 <= end());
1775:/usr/include/c++/6/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
1776:/usr/include/c++/6/bits/basic_string.h ****       }
1777:/usr/include/c++/6/bits/basic_string.h **** 
1778:/usr/include/c++/6/bits/basic_string.h ****       /**
1779:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Replace range of characters with C string.
GAS LISTING /tmp/ccvmoMuv.s 			page 340


1780:/usr/include/c++/6/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1781:/usr/include/c++/6/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1782:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string value to insert.
1783:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1784:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1785:/usr/include/c++/6/bits/basic_string.h ****        *
1786:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
1787:/usr/include/c++/6/bits/basic_string.h ****        *  the characters of @a __s are inserted.  If the length of
1788:/usr/include/c++/6/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
1789:/usr/include/c++/6/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
1790:/usr/include/c++/6/bits/basic_string.h ****       */
1791:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1792:/usr/include/c++/6/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
1793:/usr/include/c++/6/bits/basic_string.h ****       {
1794:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1795:/usr/include/c++/6/bits/basic_string.h **** 	return this->replace(__i1, __i2, __s, traits_type::length(__s));
1796:/usr/include/c++/6/bits/basic_string.h ****       }
1797:/usr/include/c++/6/bits/basic_string.h **** 
1798:/usr/include/c++/6/bits/basic_string.h ****       /**
1799:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Replace range of characters with multiple characters
1800:/usr/include/c++/6/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1801:/usr/include/c++/6/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1802:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
1803:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  Character to insert.
1804:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1805:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1806:/usr/include/c++/6/bits/basic_string.h ****        *
1807:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
1808:/usr/include/c++/6/bits/basic_string.h ****        *  @a __n copies of @a __c are inserted.  If the length of
1809:/usr/include/c++/6/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
1810:/usr/include/c++/6/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
1811:/usr/include/c++/6/bits/basic_string.h ****       */
1812:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1813:/usr/include/c++/6/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
1814:/usr/include/c++/6/bits/basic_string.h **** 	      _CharT __c)
1815:/usr/include/c++/6/bits/basic_string.h ****       {
1816:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
1817:/usr/include/c++/6/bits/basic_string.h **** 				 && __i2 <= end());
1818:/usr/include/c++/6/bits/basic_string.h **** 	return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
1819:/usr/include/c++/6/bits/basic_string.h ****       }
1820:/usr/include/c++/6/bits/basic_string.h **** 
1821:/usr/include/c++/6/bits/basic_string.h ****       /**
1822:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Replace range of characters with range.
1823:/usr/include/c++/6/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1824:/usr/include/c++/6/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1825:/usr/include/c++/6/bits/basic_string.h ****        *  @param __k1  Iterator referencing start of range to insert.
1826:/usr/include/c++/6/bits/basic_string.h ****        *  @param __k2  Iterator referencing end of range to insert.
1827:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1828:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1829:/usr/include/c++/6/bits/basic_string.h ****        *
1830:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
1831:/usr/include/c++/6/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
1832:/usr/include/c++/6/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
1833:/usr/include/c++/6/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
1834:/usr/include/c++/6/bits/basic_string.h ****        *  thrown.
1835:/usr/include/c++/6/bits/basic_string.h ****       */
1836:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
GAS LISTING /tmp/ccvmoMuv.s 			page 341


1837:/usr/include/c++/6/bits/basic_string.h ****       template<class _InputIterator,
1838:/usr/include/c++/6/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1839:/usr/include/c++/6/bits/basic_string.h ****         basic_string&
1840:/usr/include/c++/6/bits/basic_string.h ****         replace(const_iterator __i1, const_iterator __i2,
1841:/usr/include/c++/6/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
1842:/usr/include/c++/6/bits/basic_string.h ****         {
1843:/usr/include/c++/6/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
1844:/usr/include/c++/6/bits/basic_string.h **** 				   && __i2 <= end());
1845:/usr/include/c++/6/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
1846:/usr/include/c++/6/bits/basic_string.h **** 	  return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
1847:/usr/include/c++/6/bits/basic_string.h **** 					   std::__false_type());
1848:/usr/include/c++/6/bits/basic_string.h **** 	}
1849:/usr/include/c++/6/bits/basic_string.h **** #else
1850:/usr/include/c++/6/bits/basic_string.h ****       template<class _InputIterator>
1851:/usr/include/c++/6/bits/basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
1852:/usr/include/c++/6/bits/basic_string.h ****         typename __enable_if_not_native_iterator<_InputIterator>::__type
1853:/usr/include/c++/6/bits/basic_string.h **** #else
1854:/usr/include/c++/6/bits/basic_string.h ****         basic_string&
1855:/usr/include/c++/6/bits/basic_string.h **** #endif
1856:/usr/include/c++/6/bits/basic_string.h ****         replace(iterator __i1, iterator __i2,
1857:/usr/include/c++/6/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
1858:/usr/include/c++/6/bits/basic_string.h ****         {
1859:/usr/include/c++/6/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
1860:/usr/include/c++/6/bits/basic_string.h **** 				   && __i2 <= end());
1861:/usr/include/c++/6/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
1862:/usr/include/c++/6/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1863:/usr/include/c++/6/bits/basic_string.h **** 	  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
1864:/usr/include/c++/6/bits/basic_string.h **** 	}
1865:/usr/include/c++/6/bits/basic_string.h **** #endif
1866:/usr/include/c++/6/bits/basic_string.h **** 
1867:/usr/include/c++/6/bits/basic_string.h ****       // Specializations for the common case of pointer and iterator:
1868:/usr/include/c++/6/bits/basic_string.h ****       // useful to avoid the overhead of temporary buffering in _M_replace.
1869:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1870:/usr/include/c++/6/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
1871:/usr/include/c++/6/bits/basic_string.h **** 	      _CharT* __k1, _CharT* __k2)
1872:/usr/include/c++/6/bits/basic_string.h ****       {
1873:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
1874:/usr/include/c++/6/bits/basic_string.h **** 				 && __i2 <= end());
1875:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
1876:/usr/include/c++/6/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
1877:/usr/include/c++/6/bits/basic_string.h **** 			     __k1, __k2 - __k1);
1878:/usr/include/c++/6/bits/basic_string.h ****       }
1879:/usr/include/c++/6/bits/basic_string.h **** 
1880:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1881:/usr/include/c++/6/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
1882:/usr/include/c++/6/bits/basic_string.h **** 	      const _CharT* __k1, const _CharT* __k2)
1883:/usr/include/c++/6/bits/basic_string.h ****       {
1884:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
1885:/usr/include/c++/6/bits/basic_string.h **** 				 && __i2 <= end());
1886:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
1887:/usr/include/c++/6/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
1888:/usr/include/c++/6/bits/basic_string.h **** 			     __k1, __k2 - __k1);
1889:/usr/include/c++/6/bits/basic_string.h ****       }
1890:/usr/include/c++/6/bits/basic_string.h **** 
1891:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1892:/usr/include/c++/6/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
1893:/usr/include/c++/6/bits/basic_string.h **** 	      iterator __k1, iterator __k2)
GAS LISTING /tmp/ccvmoMuv.s 			page 342


1894:/usr/include/c++/6/bits/basic_string.h ****       {
1895:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
1896:/usr/include/c++/6/bits/basic_string.h **** 				 && __i2 <= end());
1897:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
1898:/usr/include/c++/6/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
1899:/usr/include/c++/6/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
1900:/usr/include/c++/6/bits/basic_string.h ****       }
1901:/usr/include/c++/6/bits/basic_string.h **** 
1902:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1903:/usr/include/c++/6/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
1904:/usr/include/c++/6/bits/basic_string.h **** 	      const_iterator __k1, const_iterator __k2)
1905:/usr/include/c++/6/bits/basic_string.h ****       {
1906:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
1907:/usr/include/c++/6/bits/basic_string.h **** 				 && __i2 <= end());
1908:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
1909:/usr/include/c++/6/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
1910:/usr/include/c++/6/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
1911:/usr/include/c++/6/bits/basic_string.h ****       }
1912:/usr/include/c++/6/bits/basic_string.h **** 
1913:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
1914:/usr/include/c++/6/bits/basic_string.h ****       /**
1915:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Replace range of characters with initializer_list.
1916:/usr/include/c++/6/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1917:/usr/include/c++/6/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1918:/usr/include/c++/6/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
1919:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
1920:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1921:/usr/include/c++/6/bits/basic_string.h ****        *
1922:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
1923:/usr/include/c++/6/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
1924:/usr/include/c++/6/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
1925:/usr/include/c++/6/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
1926:/usr/include/c++/6/bits/basic_string.h ****        *  thrown.
1927:/usr/include/c++/6/bits/basic_string.h ****       */
1928:/usr/include/c++/6/bits/basic_string.h ****       basic_string& replace(const_iterator __i1, const_iterator __i2,
1929:/usr/include/c++/6/bits/basic_string.h **** 			    initializer_list<_CharT> __l)
1930:/usr/include/c++/6/bits/basic_string.h ****       { return this->replace(__i1, __i2, __l.begin(), __l.end()); }
1931:/usr/include/c++/6/bits/basic_string.h **** #endif // C++11
1932:/usr/include/c++/6/bits/basic_string.h **** 
1933:/usr/include/c++/6/bits/basic_string.h ****     private:
1934:/usr/include/c++/6/bits/basic_string.h ****       template<class _Integer>
1935:/usr/include/c++/6/bits/basic_string.h **** 	basic_string&
1936:/usr/include/c++/6/bits/basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
1937:/usr/include/c++/6/bits/basic_string.h **** 			    _Integer __n, _Integer __val, __true_type)
1938:/usr/include/c++/6/bits/basic_string.h ****         { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }
1939:/usr/include/c++/6/bits/basic_string.h **** 
1940:/usr/include/c++/6/bits/basic_string.h ****       template<class _InputIterator>
1941:/usr/include/c++/6/bits/basic_string.h **** 	basic_string&
1942:/usr/include/c++/6/bits/basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
1943:/usr/include/c++/6/bits/basic_string.h **** 			    _InputIterator __k1, _InputIterator __k2,
1944:/usr/include/c++/6/bits/basic_string.h **** 			    __false_type);
1945:/usr/include/c++/6/bits/basic_string.h **** 
1946:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1947:/usr/include/c++/6/bits/basic_string.h ****       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
1948:/usr/include/c++/6/bits/basic_string.h **** 		     _CharT __c);
1949:/usr/include/c++/6/bits/basic_string.h **** 
1950:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
GAS LISTING /tmp/ccvmoMuv.s 			page 343


1951:/usr/include/c++/6/bits/basic_string.h ****       _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
1952:/usr/include/c++/6/bits/basic_string.h **** 		 const size_type __len2);
1953:/usr/include/c++/6/bits/basic_string.h **** 
1954:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
1955:/usr/include/c++/6/bits/basic_string.h ****       _M_append(const _CharT* __s, size_type __n);
1956:/usr/include/c++/6/bits/basic_string.h **** 
1957:/usr/include/c++/6/bits/basic_string.h ****     public:
1958:/usr/include/c++/6/bits/basic_string.h **** 
1959:/usr/include/c++/6/bits/basic_string.h ****       /**
1960:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Copy substring into C string.
1961:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string to copy value into.
1962:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters to copy.
1963:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of first character to copy.
1964:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Number of characters actually copied
1965:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
1966:/usr/include/c++/6/bits/basic_string.h ****        *
1967:/usr/include/c++/6/bits/basic_string.h ****        *  Copies up to @a __n characters starting at @a __pos into the
1968:/usr/include/c++/6/bits/basic_string.h ****        *  C string @a __s.  If @a __pos is %greater than size(),
1969:/usr/include/c++/6/bits/basic_string.h ****        *  out_of_range is thrown.
1970:/usr/include/c++/6/bits/basic_string.h ****       */
1971:/usr/include/c++/6/bits/basic_string.h ****       size_type
1972:/usr/include/c++/6/bits/basic_string.h ****       copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
1973:/usr/include/c++/6/bits/basic_string.h **** 
1974:/usr/include/c++/6/bits/basic_string.h ****       /**
1975:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Swap contents with another string.
1976:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  String to swap with.
1977:/usr/include/c++/6/bits/basic_string.h ****        *
1978:/usr/include/c++/6/bits/basic_string.h ****        *  Exchanges the contents of this string with that of @a __s in constant
1979:/usr/include/c++/6/bits/basic_string.h ****        *  time.
1980:/usr/include/c++/6/bits/basic_string.h ****       */
1981:/usr/include/c++/6/bits/basic_string.h ****       void
1982:/usr/include/c++/6/bits/basic_string.h ****       swap(basic_string& __s) _GLIBCXX_NOEXCEPT;
1983:/usr/include/c++/6/bits/basic_string.h **** 
1984:/usr/include/c++/6/bits/basic_string.h ****       // String operations:
1985:/usr/include/c++/6/bits/basic_string.h ****       /**
1986:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Return const pointer to null-terminated contents.
1987:/usr/include/c++/6/bits/basic_string.h ****        *
1988:/usr/include/c++/6/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
1989:/usr/include/c++/6/bits/basic_string.h ****        *  happen.
1990:/usr/include/c++/6/bits/basic_string.h ****       */
1991:/usr/include/c++/6/bits/basic_string.h ****       const _CharT*
1992:/usr/include/c++/6/bits/basic_string.h ****       c_str() const _GLIBCXX_NOEXCEPT
1993:/usr/include/c++/6/bits/basic_string.h ****       { return _M_data(); }
1994:/usr/include/c++/6/bits/basic_string.h **** 
1995:/usr/include/c++/6/bits/basic_string.h ****       /**
1996:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Return const pointer to contents.
1997:/usr/include/c++/6/bits/basic_string.h ****        *
1998:/usr/include/c++/6/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
1999:/usr/include/c++/6/bits/basic_string.h ****        *  happen.
2000:/usr/include/c++/6/bits/basic_string.h ****       */
2001:/usr/include/c++/6/bits/basic_string.h ****       const _CharT*
2002:/usr/include/c++/6/bits/basic_string.h ****       data() const _GLIBCXX_NOEXCEPT
2003:/usr/include/c++/6/bits/basic_string.h ****       { return _M_data(); }
2004:/usr/include/c++/6/bits/basic_string.h **** 
2005:/usr/include/c++/6/bits/basic_string.h ****       /**
2006:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Return copy of allocator used to construct this string.
2007:/usr/include/c++/6/bits/basic_string.h ****       */
GAS LISTING /tmp/ccvmoMuv.s 			page 344


2008:/usr/include/c++/6/bits/basic_string.h ****       allocator_type
2009:/usr/include/c++/6/bits/basic_string.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
2010:/usr/include/c++/6/bits/basic_string.h ****       { return _M_get_allocator(); }
2011:/usr/include/c++/6/bits/basic_string.h **** 
2012:/usr/include/c++/6/bits/basic_string.h ****       /**
2013:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find position of a C substring.
2014:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string to locate.
2015:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
2016:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters from @a s to search for.
2017:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
2018:/usr/include/c++/6/bits/basic_string.h ****        *
2019:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the first @a
2020:/usr/include/c++/6/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
2021:/usr/include/c++/6/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
2022:/usr/include/c++/6/bits/basic_string.h ****        *  npos.
2023:/usr/include/c++/6/bits/basic_string.h ****       */
2024:/usr/include/c++/6/bits/basic_string.h ****       size_type
2025:/usr/include/c++/6/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos, size_type __n) const;
2026:/usr/include/c++/6/bits/basic_string.h **** 
2027:/usr/include/c++/6/bits/basic_string.h ****       /**
2028:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find position of a string.
2029:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  String to locate.
2030:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2031:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
2032:/usr/include/c++/6/bits/basic_string.h ****        *
2033:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for value of @a __str within
2034:/usr/include/c++/6/bits/basic_string.h ****        *  this string.  If found, returns the index where it begins.  If not
2035:/usr/include/c++/6/bits/basic_string.h ****        *  found, returns npos.
2036:/usr/include/c++/6/bits/basic_string.h ****       */
2037:/usr/include/c++/6/bits/basic_string.h ****       size_type
2038:/usr/include/c++/6/bits/basic_string.h ****       find(const basic_string& __str, size_type __pos = 0) const
2039:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
2040:/usr/include/c++/6/bits/basic_string.h ****       { return this->find(__str.data(), __pos, __str.size()); }
2041:/usr/include/c++/6/bits/basic_string.h **** 
2042:/usr/include/c++/6/bits/basic_string.h ****       /**
2043:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find position of a C string.
2044:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string to locate.
2045:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2046:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
2047:/usr/include/c++/6/bits/basic_string.h ****        *
2048:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the value of @a
2049:/usr/include/c++/6/bits/basic_string.h ****        *  __s within this string.  If found, returns the index where
2050:/usr/include/c++/6/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
2051:/usr/include/c++/6/bits/basic_string.h ****       */
2052:/usr/include/c++/6/bits/basic_string.h ****       size_type
2053:/usr/include/c++/6/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos = 0) const
2054:/usr/include/c++/6/bits/basic_string.h ****       {
2055:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2056:/usr/include/c++/6/bits/basic_string.h **** 	return this->find(__s, __pos, traits_type::length(__s));
2057:/usr/include/c++/6/bits/basic_string.h ****       }
2058:/usr/include/c++/6/bits/basic_string.h **** 
2059:/usr/include/c++/6/bits/basic_string.h ****       /**
2060:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find position of a character.
2061:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  Character to locate.
2062:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2063:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of first occurrence.
2064:/usr/include/c++/6/bits/basic_string.h ****        *
GAS LISTING /tmp/ccvmoMuv.s 			page 345


2065:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for @a __c within
2066:/usr/include/c++/6/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2067:/usr/include/c++/6/bits/basic_string.h ****        *  found.  If not found, returns npos.
2068:/usr/include/c++/6/bits/basic_string.h ****       */
2069:/usr/include/c++/6/bits/basic_string.h ****       size_type
2070:/usr/include/c++/6/bits/basic_string.h ****       find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;
2071:/usr/include/c++/6/bits/basic_string.h **** 
2072:/usr/include/c++/6/bits/basic_string.h ****       /**
2073:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find last position of a string.
2074:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  String to locate.
2075:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2076:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
2077:/usr/include/c++/6/bits/basic_string.h ****        *
2078:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for value of @a
2079:/usr/include/c++/6/bits/basic_string.h ****        *  __str within this string.  If found, returns the index where
2080:/usr/include/c++/6/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
2081:/usr/include/c++/6/bits/basic_string.h ****       */
2082:/usr/include/c++/6/bits/basic_string.h ****       size_type
2083:/usr/include/c++/6/bits/basic_string.h ****       rfind(const basic_string& __str, size_type __pos = npos) const
2084:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
2085:/usr/include/c++/6/bits/basic_string.h ****       { return this->rfind(__str.data(), __pos, __str.size()); }
2086:/usr/include/c++/6/bits/basic_string.h **** 
2087:/usr/include/c++/6/bits/basic_string.h ****       /**
2088:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find last position of a C substring.
2089:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string to locate.
2090:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
2091:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
2092:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
2093:/usr/include/c++/6/bits/basic_string.h ****        *
2094:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the first @a
2095:/usr/include/c++/6/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
2096:/usr/include/c++/6/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
2097:/usr/include/c++/6/bits/basic_string.h ****        *  npos.
2098:/usr/include/c++/6/bits/basic_string.h ****       */
2099:/usr/include/c++/6/bits/basic_string.h ****       size_type
2100:/usr/include/c++/6/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos, size_type __n) const;
2101:/usr/include/c++/6/bits/basic_string.h **** 
2102:/usr/include/c++/6/bits/basic_string.h ****       /**
2103:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find last position of a C string.
2104:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string to locate.
2105:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to start search at (default end).
2106:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of start of  last occurrence.
2107:/usr/include/c++/6/bits/basic_string.h ****        *
2108:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the value of
2109:/usr/include/c++/6/bits/basic_string.h ****        *  @a __s within this string.  If found, returns the index
2110:/usr/include/c++/6/bits/basic_string.h ****        *  where it begins.  If not found, returns npos.
2111:/usr/include/c++/6/bits/basic_string.h ****       */
2112:/usr/include/c++/6/bits/basic_string.h ****       size_type
2113:/usr/include/c++/6/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos = npos) const
2114:/usr/include/c++/6/bits/basic_string.h ****       {
2115:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2116:/usr/include/c++/6/bits/basic_string.h **** 	return this->rfind(__s, __pos, traits_type::length(__s));
2117:/usr/include/c++/6/bits/basic_string.h ****       }
2118:/usr/include/c++/6/bits/basic_string.h **** 
2119:/usr/include/c++/6/bits/basic_string.h ****       /**
2120:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find last position of a character.
2121:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  Character to locate.
GAS LISTING /tmp/ccvmoMuv.s 			page 346


2122:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2123:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of last occurrence.
2124:/usr/include/c++/6/bits/basic_string.h ****        *
2125:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
2126:/usr/include/c++/6/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2127:/usr/include/c++/6/bits/basic_string.h ****        *  found.  If not found, returns npos.
2128:/usr/include/c++/6/bits/basic_string.h ****       */
2129:/usr/include/c++/6/bits/basic_string.h ****       size_type
2130:/usr/include/c++/6/bits/basic_string.h ****       rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;
2131:/usr/include/c++/6/bits/basic_string.h **** 
2132:/usr/include/c++/6/bits/basic_string.h ****       /**
2133:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find position of a character of string.
2134:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
2135:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2136:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of first occurrence.
2137:/usr/include/c++/6/bits/basic_string.h ****        *
2138:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
2139:/usr/include/c++/6/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
2140:/usr/include/c++/6/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2141:/usr/include/c++/6/bits/basic_string.h ****        *  npos.
2142:/usr/include/c++/6/bits/basic_string.h ****       */
2143:/usr/include/c++/6/bits/basic_string.h ****       size_type
2144:/usr/include/c++/6/bits/basic_string.h ****       find_first_of(const basic_string& __str, size_type __pos = 0) const
2145:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
2146:/usr/include/c++/6/bits/basic_string.h ****       { return this->find_first_of(__str.data(), __pos, __str.size()); }
2147:/usr/include/c++/6/bits/basic_string.h **** 
2148:/usr/include/c++/6/bits/basic_string.h ****       /**
2149:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find position of a character of C substring.
2150:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
2151:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
2152:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
2153:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of first occurrence.
2154:/usr/include/c++/6/bits/basic_string.h ****        *
2155:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
2156:/usr/include/c++/6/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
2157:/usr/include/c++/6/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
2158:/usr/include/c++/6/bits/basic_string.h ****        *  returns npos.
2159:/usr/include/c++/6/bits/basic_string.h ****       */
2160:/usr/include/c++/6/bits/basic_string.h ****       size_type
2161:/usr/include/c++/6/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;
2162:/usr/include/c++/6/bits/basic_string.h **** 
2163:/usr/include/c++/6/bits/basic_string.h ****       /**
2164:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find position of a character of C string.
2165:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
2166:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2167:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of first occurrence.
2168:/usr/include/c++/6/bits/basic_string.h ****        *
2169:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
2170:/usr/include/c++/6/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
2171:/usr/include/c++/6/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
2172:/usr/include/c++/6/bits/basic_string.h ****       */
2173:/usr/include/c++/6/bits/basic_string.h ****       size_type
2174:/usr/include/c++/6/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos = 0) const
2175:/usr/include/c++/6/bits/basic_string.h ****       {
2176:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2177:/usr/include/c++/6/bits/basic_string.h **** 	return this->find_first_of(__s, __pos, traits_type::length(__s));
2178:/usr/include/c++/6/bits/basic_string.h ****       }
GAS LISTING /tmp/ccvmoMuv.s 			page 347


2179:/usr/include/c++/6/bits/basic_string.h **** 
2180:/usr/include/c++/6/bits/basic_string.h ****       /**
2181:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find position of a character.
2182:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  Character to locate.
2183:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2184:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of first occurrence.
2185:/usr/include/c++/6/bits/basic_string.h ****        *
2186:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the character
2187:/usr/include/c++/6/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index
2188:/usr/include/c++/6/bits/basic_string.h ****        *  where it was found.  If not found, returns npos.
2189:/usr/include/c++/6/bits/basic_string.h ****        *
2190:/usr/include/c++/6/bits/basic_string.h ****        *  Note: equivalent to find(__c, __pos).
2191:/usr/include/c++/6/bits/basic_string.h ****       */
2192:/usr/include/c++/6/bits/basic_string.h ****       size_type
2193:/usr/include/c++/6/bits/basic_string.h ****       find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
2194:/usr/include/c++/6/bits/basic_string.h ****       { return this->find(__c, __pos); }
2195:/usr/include/c++/6/bits/basic_string.h **** 
2196:/usr/include/c++/6/bits/basic_string.h ****       /**
2197:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
2198:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
2199:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2200:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of last occurrence.
2201:/usr/include/c++/6/bits/basic_string.h ****        *
2202:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
2203:/usr/include/c++/6/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
2204:/usr/include/c++/6/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2205:/usr/include/c++/6/bits/basic_string.h ****        *  npos.
2206:/usr/include/c++/6/bits/basic_string.h ****       */
2207:/usr/include/c++/6/bits/basic_string.h ****       size_type
2208:/usr/include/c++/6/bits/basic_string.h ****       find_last_of(const basic_string& __str, size_type __pos = npos) const
2209:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
2210:/usr/include/c++/6/bits/basic_string.h ****       { return this->find_last_of(__str.data(), __pos, __str.size()); }
2211:/usr/include/c++/6/bits/basic_string.h **** 
2212:/usr/include/c++/6/bits/basic_string.h ****       /**
2213:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find last position of a character of C substring.
2214:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
2215:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
2216:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
2217:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of last occurrence.
2218:/usr/include/c++/6/bits/basic_string.h ****        *
2219:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
2220:/usr/include/c++/6/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
2221:/usr/include/c++/6/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
2222:/usr/include/c++/6/bits/basic_string.h ****        *  returns npos.
2223:/usr/include/c++/6/bits/basic_string.h ****       */
2224:/usr/include/c++/6/bits/basic_string.h ****       size_type
2225:/usr/include/c++/6/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;
2226:/usr/include/c++/6/bits/basic_string.h **** 
2227:/usr/include/c++/6/bits/basic_string.h ****       /**
2228:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find last position of a character of C string.
2229:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
2230:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2231:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of last occurrence.
2232:/usr/include/c++/6/bits/basic_string.h ****        *
2233:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
2234:/usr/include/c++/6/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
2235:/usr/include/c++/6/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
GAS LISTING /tmp/ccvmoMuv.s 			page 348


2236:/usr/include/c++/6/bits/basic_string.h ****       */
2237:/usr/include/c++/6/bits/basic_string.h ****       size_type
2238:/usr/include/c++/6/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos = npos) const
2239:/usr/include/c++/6/bits/basic_string.h ****       {
2240:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2241:/usr/include/c++/6/bits/basic_string.h **** 	return this->find_last_of(__s, __pos, traits_type::length(__s));
2242:/usr/include/c++/6/bits/basic_string.h ****       }
2243:/usr/include/c++/6/bits/basic_string.h **** 
2244:/usr/include/c++/6/bits/basic_string.h ****       /**
2245:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find last position of a character.
2246:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  Character to locate.
2247:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2248:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of last occurrence.
2249:/usr/include/c++/6/bits/basic_string.h ****        *
2250:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
2251:/usr/include/c++/6/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2252:/usr/include/c++/6/bits/basic_string.h ****        *  found.  If not found, returns npos.
2253:/usr/include/c++/6/bits/basic_string.h ****        *
2254:/usr/include/c++/6/bits/basic_string.h ****        *  Note: equivalent to rfind(__c, __pos).
2255:/usr/include/c++/6/bits/basic_string.h ****       */
2256:/usr/include/c++/6/bits/basic_string.h ****       size_type
2257:/usr/include/c++/6/bits/basic_string.h ****       find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT
2258:/usr/include/c++/6/bits/basic_string.h ****       { return this->rfind(__c, __pos); }
2259:/usr/include/c++/6/bits/basic_string.h **** 
2260:/usr/include/c++/6/bits/basic_string.h ****       /**
2261:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find position of a character not in string.
2262:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
2263:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2264:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of first occurrence.
2265:/usr/include/c++/6/bits/basic_string.h ****        *
2266:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not contained
2267:/usr/include/c++/6/bits/basic_string.h ****        *  in @a __str within this string.  If found, returns the index where it
2268:/usr/include/c++/6/bits/basic_string.h ****        *  was found.  If not found, returns npos.
2269:/usr/include/c++/6/bits/basic_string.h ****       */
2270:/usr/include/c++/6/bits/basic_string.h ****       size_type
2271:/usr/include/c++/6/bits/basic_string.h ****       find_first_not_of(const basic_string& __str, size_type __pos = 0) const
2272:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
2273:/usr/include/c++/6/bits/basic_string.h ****       { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
2274:/usr/include/c++/6/bits/basic_string.h **** 
2275:/usr/include/c++/6/bits/basic_string.h ****       /**
2276:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find position of a character not in C substring.
2277:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2278:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
2279:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters from __s to consider.
2280:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of first occurrence.
2281:/usr/include/c++/6/bits/basic_string.h ****        *
2282:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
2283:/usr/include/c++/6/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within
2284:/usr/include/c++/6/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2285:/usr/include/c++/6/bits/basic_string.h ****        *  found.  If not found, returns npos.
2286:/usr/include/c++/6/bits/basic_string.h ****       */
2287:/usr/include/c++/6/bits/basic_string.h ****       size_type
2288:/usr/include/c++/6/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos,
2289:/usr/include/c++/6/bits/basic_string.h **** 			size_type __n) const;
2290:/usr/include/c++/6/bits/basic_string.h **** 
2291:/usr/include/c++/6/bits/basic_string.h ****       /**
2292:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find position of a character not in C string.
GAS LISTING /tmp/ccvmoMuv.s 			page 349


2293:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2294:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2295:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of first occurrence.
2296:/usr/include/c++/6/bits/basic_string.h ****        *
2297:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
2298:/usr/include/c++/6/bits/basic_string.h ****        *  contained in @a __s within this string.  If found, returns
2299:/usr/include/c++/6/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
2300:/usr/include/c++/6/bits/basic_string.h ****       */
2301:/usr/include/c++/6/bits/basic_string.h ****       size_type
2302:/usr/include/c++/6/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos = 0) const
2303:/usr/include/c++/6/bits/basic_string.h ****       {
2304:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2305:/usr/include/c++/6/bits/basic_string.h **** 	return this->find_first_not_of(__s, __pos, traits_type::length(__s));
2306:/usr/include/c++/6/bits/basic_string.h ****       }
2307:/usr/include/c++/6/bits/basic_string.h **** 
2308:/usr/include/c++/6/bits/basic_string.h ****       /**
2309:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find position of a different character.
2310:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  Character to avoid.
2311:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2312:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of first occurrence.
2313:/usr/include/c++/6/bits/basic_string.h ****        *
2314:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character
2315:/usr/include/c++/6/bits/basic_string.h ****        *  other than @a __c within this string.  If found, returns the
2316:/usr/include/c++/6/bits/basic_string.h ****        *  index where it was found.  If not found, returns npos.
2317:/usr/include/c++/6/bits/basic_string.h ****       */
2318:/usr/include/c++/6/bits/basic_string.h ****       size_type
2319:/usr/include/c++/6/bits/basic_string.h ****       find_first_not_of(_CharT __c, size_type __pos = 0) const
2320:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT;
2321:/usr/include/c++/6/bits/basic_string.h **** 
2322:/usr/include/c++/6/bits/basic_string.h ****       /**
2323:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find last position of a character not in string.
2324:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
2325:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2326:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of last occurrence.
2327:/usr/include/c++/6/bits/basic_string.h ****        *
2328:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
2329:/usr/include/c++/6/bits/basic_string.h ****        *  not contained in @a __str within this string.  If found,
2330:/usr/include/c++/6/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2331:/usr/include/c++/6/bits/basic_string.h ****        *  npos.
2332:/usr/include/c++/6/bits/basic_string.h ****       */
2333:/usr/include/c++/6/bits/basic_string.h ****       size_type
2334:/usr/include/c++/6/bits/basic_string.h ****       find_last_not_of(const basic_string& __str, size_type __pos = npos) const
2335:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
2336:/usr/include/c++/6/bits/basic_string.h ****       { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
2337:/usr/include/c++/6/bits/basic_string.h **** 
2338:/usr/include/c++/6/bits/basic_string.h ****       /**
2339:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find last position of a character not in C substring.
2340:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2341:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
2342:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters from s to consider.
2343:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of last occurrence.
2344:/usr/include/c++/6/bits/basic_string.h ****        *
2345:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character not
2346:/usr/include/c++/6/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within this string.
2347:/usr/include/c++/6/bits/basic_string.h ****        *  If found, returns the index where it was found.  If not found,
2348:/usr/include/c++/6/bits/basic_string.h ****        *  returns npos.
2349:/usr/include/c++/6/bits/basic_string.h ****       */
GAS LISTING /tmp/ccvmoMuv.s 			page 350


2350:/usr/include/c++/6/bits/basic_string.h ****       size_type
2351:/usr/include/c++/6/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos,
2352:/usr/include/c++/6/bits/basic_string.h **** 		       size_type __n) const;
2353:/usr/include/c++/6/bits/basic_string.h ****       /**
2354:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find last position of a character not in C string.
2355:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2356:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2357:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of last occurrence.
2358:/usr/include/c++/6/bits/basic_string.h ****        *
2359:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
2360:/usr/include/c++/6/bits/basic_string.h ****        *  not contained in @a __s within this string.  If found,
2361:/usr/include/c++/6/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2362:/usr/include/c++/6/bits/basic_string.h ****        *  npos.
2363:/usr/include/c++/6/bits/basic_string.h ****       */
2364:/usr/include/c++/6/bits/basic_string.h ****       size_type
2365:/usr/include/c++/6/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos = npos) const
2366:/usr/include/c++/6/bits/basic_string.h ****       {
2367:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2368:/usr/include/c++/6/bits/basic_string.h **** 	return this->find_last_not_of(__s, __pos, traits_type::length(__s));
2369:/usr/include/c++/6/bits/basic_string.h ****       }
2370:/usr/include/c++/6/bits/basic_string.h **** 
2371:/usr/include/c++/6/bits/basic_string.h ****       /**
2372:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find last position of a different character.
2373:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  Character to avoid.
2374:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2375:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of last occurrence.
2376:/usr/include/c++/6/bits/basic_string.h ****        *
2377:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character other than
2378:/usr/include/c++/6/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index where it was
2379:/usr/include/c++/6/bits/basic_string.h ****        *  found.  If not found, returns npos.
2380:/usr/include/c++/6/bits/basic_string.h ****       */
2381:/usr/include/c++/6/bits/basic_string.h ****       size_type
2382:/usr/include/c++/6/bits/basic_string.h ****       find_last_not_of(_CharT __c, size_type __pos = npos) const
2383:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT;
2384:/usr/include/c++/6/bits/basic_string.h **** 
2385:/usr/include/c++/6/bits/basic_string.h ****       /**
2386:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Get a substring.
2387:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of first character (default 0).
2388:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters in substring (default remainder).
2389:/usr/include/c++/6/bits/basic_string.h ****        *  @return  The new string.
2390:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
2391:/usr/include/c++/6/bits/basic_string.h ****        *
2392:/usr/include/c++/6/bits/basic_string.h ****        *  Construct and return a new string using the @a __n
2393:/usr/include/c++/6/bits/basic_string.h ****        *  characters starting at @a __pos.  If the string is too
2394:/usr/include/c++/6/bits/basic_string.h ****        *  short, use the remainder of the characters.  If @a __pos is
2395:/usr/include/c++/6/bits/basic_string.h ****        *  beyond the end of the string, out_of_range is thrown.
2396:/usr/include/c++/6/bits/basic_string.h ****       */
2397:/usr/include/c++/6/bits/basic_string.h ****       basic_string
2398:/usr/include/c++/6/bits/basic_string.h ****       substr(size_type __pos = 0, size_type __n = npos) const
2399:/usr/include/c++/6/bits/basic_string.h ****       { return basic_string(*this,
2400:/usr/include/c++/6/bits/basic_string.h **** 			    _M_check(__pos, "basic_string::substr"), __n); }
2401:/usr/include/c++/6/bits/basic_string.h **** 
2402:/usr/include/c++/6/bits/basic_string.h ****       /**
2403:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Compare to a string.
2404:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  String to compare against.
2405:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2406:/usr/include/c++/6/bits/basic_string.h ****        *
GAS LISTING /tmp/ccvmoMuv.s 			page 351


2407:/usr/include/c++/6/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a
2408:/usr/include/c++/6/bits/basic_string.h ****        *  __str, 0 if their values are equivalent, or > 0 if this
2409:/usr/include/c++/6/bits/basic_string.h ****        *  string is ordered after @a __str.  Determines the effective
2410:/usr/include/c++/6/bits/basic_string.h ****        *  length rlen of the strings to compare as the smallest of
2411:/usr/include/c++/6/bits/basic_string.h ****        *  size() and str.size().  The function then compares the two
2412:/usr/include/c++/6/bits/basic_string.h ****        *  strings by calling traits::compare(data(), str.data(),rlen).
2413:/usr/include/c++/6/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
2414:/usr/include/c++/6/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
2415:/usr/include/c++/6/bits/basic_string.h ****       */
2416:/usr/include/c++/6/bits/basic_string.h ****       int
2417:/usr/include/c++/6/bits/basic_string.h ****       compare(const basic_string& __str) const
2418:/usr/include/c++/6/bits/basic_string.h ****       {
2419:/usr/include/c++/6/bits/basic_string.h **** 	const size_type __size = this->size();
2420:/usr/include/c++/6/bits/basic_string.h **** 	const size_type __osize = __str.size();
2421:/usr/include/c++/6/bits/basic_string.h **** 	const size_type __len = std::min(__size, __osize);
2422:/usr/include/c++/6/bits/basic_string.h **** 
2423:/usr/include/c++/6/bits/basic_string.h **** 	int __r = traits_type::compare(_M_data(), __str.data(), __len);
2424:/usr/include/c++/6/bits/basic_string.h **** 	if (!__r)
2425:/usr/include/c++/6/bits/basic_string.h **** 	  __r = _S_compare(__size, __osize);
2426:/usr/include/c++/6/bits/basic_string.h **** 	return __r;
2427:/usr/include/c++/6/bits/basic_string.h ****       }
2428:/usr/include/c++/6/bits/basic_string.h **** 
2429:/usr/include/c++/6/bits/basic_string.h ****       /**
2430:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Compare substring to a string.
2431:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
2432:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters in substring.
2433:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  String to compare against.
2434:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2435:/usr/include/c++/6/bits/basic_string.h ****        *
2436:/usr/include/c++/6/bits/basic_string.h ****        *  Form the substring of this string from the @a __n characters
2437:/usr/include/c++/6/bits/basic_string.h ****        *  starting at @a __pos.  Returns an integer < 0 if the
2438:/usr/include/c++/6/bits/basic_string.h ****        *  substring is ordered before @a __str, 0 if their values are
2439:/usr/include/c++/6/bits/basic_string.h ****        *  equivalent, or > 0 if the substring is ordered after @a
2440:/usr/include/c++/6/bits/basic_string.h ****        *  __str.  Determines the effective length rlen of the strings
2441:/usr/include/c++/6/bits/basic_string.h ****        *  to compare as the smallest of the length of the substring
2442:/usr/include/c++/6/bits/basic_string.h ****        *  and @a __str.size().  The function then compares the two
2443:/usr/include/c++/6/bits/basic_string.h ****        *  strings by calling
2444:/usr/include/c++/6/bits/basic_string.h ****        *  traits::compare(substring.data(),str.data(),rlen).  If the
2445:/usr/include/c++/6/bits/basic_string.h ****        *  result of the comparison is nonzero returns it, otherwise
2446:/usr/include/c++/6/bits/basic_string.h ****        *  the shorter one is ordered first.
2447:/usr/include/c++/6/bits/basic_string.h ****       */
2448:/usr/include/c++/6/bits/basic_string.h ****       int
2449:/usr/include/c++/6/bits/basic_string.h ****       compare(size_type __pos, size_type __n, const basic_string& __str) const;
2450:/usr/include/c++/6/bits/basic_string.h **** 
2451:/usr/include/c++/6/bits/basic_string.h ****       /**
2452:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Compare substring to a substring.
2453:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos1  Index of first character of substring.
2454:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
2455:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  String to compare against.
2456:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos2  Index of first character of substring of str.
2457:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n2  Number of characters in substring of str.
2458:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2459:/usr/include/c++/6/bits/basic_string.h ****        *
2460:/usr/include/c++/6/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
2461:/usr/include/c++/6/bits/basic_string.h ****        *  characters starting at @a __pos1.  Form the substring of @a
2462:/usr/include/c++/6/bits/basic_string.h ****        *  __str from the @a __n2 characters starting at @a __pos2.
2463:/usr/include/c++/6/bits/basic_string.h ****        *  Returns an integer < 0 if this substring is ordered before
GAS LISTING /tmp/ccvmoMuv.s 			page 352


2464:/usr/include/c++/6/bits/basic_string.h ****        *  the substring of @a __str, 0 if their values are equivalent,
2465:/usr/include/c++/6/bits/basic_string.h ****        *  or > 0 if this substring is ordered after the substring of
2466:/usr/include/c++/6/bits/basic_string.h ****        *  @a __str.  Determines the effective length rlen of the
2467:/usr/include/c++/6/bits/basic_string.h ****        *  strings to compare as the smallest of the lengths of the
2468:/usr/include/c++/6/bits/basic_string.h ****        *  substrings.  The function then compares the two strings by
2469:/usr/include/c++/6/bits/basic_string.h ****        *  calling
2470:/usr/include/c++/6/bits/basic_string.h ****        *  traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen).
2471:/usr/include/c++/6/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
2472:/usr/include/c++/6/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
2473:/usr/include/c++/6/bits/basic_string.h ****       */
2474:/usr/include/c++/6/bits/basic_string.h ****       int
2475:/usr/include/c++/6/bits/basic_string.h ****       compare(size_type __pos1, size_type __n1, const basic_string& __str,
2476:/usr/include/c++/6/bits/basic_string.h **** 	      size_type __pos2, size_type __n2) const;
2477:/usr/include/c++/6/bits/basic_string.h **** 
2478:/usr/include/c++/6/bits/basic_string.h ****       /**
2479:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Compare to a C string.
2480:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string to compare against.
2481:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2482:/usr/include/c++/6/bits/basic_string.h ****        *
2483:/usr/include/c++/6/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a __s, 0 if
2484:/usr/include/c++/6/bits/basic_string.h ****        *  their values are equivalent, or > 0 if this string is ordered after
2485:/usr/include/c++/6/bits/basic_string.h ****        *  @a __s.  Determines the effective length rlen of the strings to
2486:/usr/include/c++/6/bits/basic_string.h ****        *  compare as the smallest of size() and the length of a string
2487:/usr/include/c++/6/bits/basic_string.h ****        *  constructed from @a __s.  The function then compares the two strings
2488:/usr/include/c++/6/bits/basic_string.h ****        *  by calling traits::compare(data(),s,rlen).  If the result of the
2489:/usr/include/c++/6/bits/basic_string.h ****        *  comparison is nonzero returns it, otherwise the shorter one is
2490:/usr/include/c++/6/bits/basic_string.h ****        *  ordered first.
2491:/usr/include/c++/6/bits/basic_string.h ****       */
2492:/usr/include/c++/6/bits/basic_string.h ****       int
2493:/usr/include/c++/6/bits/basic_string.h ****       compare(const _CharT* __s) const;
2494:/usr/include/c++/6/bits/basic_string.h **** 
2495:/usr/include/c++/6/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
2496:/usr/include/c++/6/bits/basic_string.h ****       // 5 String::compare specification questionable
2497:/usr/include/c++/6/bits/basic_string.h ****       /**
2498:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Compare substring to a C string.
2499:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
2500:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
2501:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string to compare against.
2502:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2503:/usr/include/c++/6/bits/basic_string.h ****        *
2504:/usr/include/c++/6/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
2505:/usr/include/c++/6/bits/basic_string.h ****        *  characters starting at @a pos.  Returns an integer < 0 if
2506:/usr/include/c++/6/bits/basic_string.h ****        *  the substring is ordered before @a __s, 0 if their values
2507:/usr/include/c++/6/bits/basic_string.h ****        *  are equivalent, or > 0 if the substring is ordered after @a
2508:/usr/include/c++/6/bits/basic_string.h ****        *  __s.  Determines the effective length rlen of the strings to
2509:/usr/include/c++/6/bits/basic_string.h ****        *  compare as the smallest of the length of the substring and
2510:/usr/include/c++/6/bits/basic_string.h ****        *  the length of a string constructed from @a __s.  The
2511:/usr/include/c++/6/bits/basic_string.h ****        *  function then compares the two string by calling
2512:/usr/include/c++/6/bits/basic_string.h ****        *  traits::compare(substring.data(),__s,rlen).  If the result of
2513:/usr/include/c++/6/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
2514:/usr/include/c++/6/bits/basic_string.h ****        *  one is ordered first.
2515:/usr/include/c++/6/bits/basic_string.h ****       */
2516:/usr/include/c++/6/bits/basic_string.h ****       int
2517:/usr/include/c++/6/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s) const;
2518:/usr/include/c++/6/bits/basic_string.h **** 
2519:/usr/include/c++/6/bits/basic_string.h ****       /**
2520:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Compare substring against a character %array.
GAS LISTING /tmp/ccvmoMuv.s 			page 353


2521:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
2522:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
2523:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  character %array to compare against.
2524:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n2  Number of characters of s.
2525:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2526:/usr/include/c++/6/bits/basic_string.h ****        *
2527:/usr/include/c++/6/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
2528:/usr/include/c++/6/bits/basic_string.h ****        *  characters starting at @a __pos.  Form a string from the
2529:/usr/include/c++/6/bits/basic_string.h ****        *  first @a __n2 characters of @a __s.  Returns an integer < 0
2530:/usr/include/c++/6/bits/basic_string.h ****        *  if this substring is ordered before the string from @a __s,
2531:/usr/include/c++/6/bits/basic_string.h ****        *  0 if their values are equivalent, or > 0 if this substring
2532:/usr/include/c++/6/bits/basic_string.h ****        *  is ordered after the string from @a __s.  Determines the
2533:/usr/include/c++/6/bits/basic_string.h ****        *  effective length rlen of the strings to compare as the
2534:/usr/include/c++/6/bits/basic_string.h ****        *  smallest of the length of the substring and @a __n2.  The
2535:/usr/include/c++/6/bits/basic_string.h ****        *  function then compares the two strings by calling
2536:/usr/include/c++/6/bits/basic_string.h ****        *  traits::compare(substring.data(),s,rlen).  If the result of
2537:/usr/include/c++/6/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
2538:/usr/include/c++/6/bits/basic_string.h ****        *  one is ordered first.
2539:/usr/include/c++/6/bits/basic_string.h ****        *
2540:/usr/include/c++/6/bits/basic_string.h ****        *  NB: s must have at least n2 characters, &apos;\\0&apos; has
2541:/usr/include/c++/6/bits/basic_string.h ****        *  no special meaning.
2542:/usr/include/c++/6/bits/basic_string.h ****       */
2543:/usr/include/c++/6/bits/basic_string.h ****       int
2544:/usr/include/c++/6/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s,
2545:/usr/include/c++/6/bits/basic_string.h **** 	      size_type __n2) const;
2546:/usr/include/c++/6/bits/basic_string.h ****   };
2547:/usr/include/c++/6/bits/basic_string.h **** _GLIBCXX_END_NAMESPACE_CXX11
2548:/usr/include/c++/6/bits/basic_string.h **** #else  // !_GLIBCXX_USE_CXX11_ABI
2549:/usr/include/c++/6/bits/basic_string.h ****   // Reference-counted COW string implentation
2550:/usr/include/c++/6/bits/basic_string.h **** 
2551:/usr/include/c++/6/bits/basic_string.h ****   /**
2552:/usr/include/c++/6/bits/basic_string.h ****    *  @class basic_string basic_string.h <string>
2553:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Managing sequences of characters and character-like objects.
2554:/usr/include/c++/6/bits/basic_string.h ****    *
2555:/usr/include/c++/6/bits/basic_string.h ****    *  @ingroup strings
2556:/usr/include/c++/6/bits/basic_string.h ****    *  @ingroup sequences
2557:/usr/include/c++/6/bits/basic_string.h ****    *
2558:/usr/include/c++/6/bits/basic_string.h ****    *  @tparam _CharT  Type of character
2559:/usr/include/c++/6/bits/basic_string.h ****    *  @tparam _Traits  Traits for character type, defaults to
2560:/usr/include/c++/6/bits/basic_string.h ****    *                   char_traits<_CharT>.
2561:/usr/include/c++/6/bits/basic_string.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
2562:/usr/include/c++/6/bits/basic_string.h ****    *
2563:/usr/include/c++/6/bits/basic_string.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
2564:/usr/include/c++/6/bits/basic_string.h ****    *  <a href="tables.html#66">reversible container</a>, and a
2565:/usr/include/c++/6/bits/basic_string.h ****    *  <a href="tables.html#67">sequence</a>.  Of the
2566:/usr/include/c++/6/bits/basic_string.h ****    *  <a href="tables.html#68">optional sequence requirements</a>, only
2567:/usr/include/c++/6/bits/basic_string.h ****    *  @c push_back, @c at, and @c %array access are supported.
2568:/usr/include/c++/6/bits/basic_string.h ****    *
2569:/usr/include/c++/6/bits/basic_string.h ****    *  @doctodo
2570:/usr/include/c++/6/bits/basic_string.h ****    *
2571:/usr/include/c++/6/bits/basic_string.h ****    *
2572:/usr/include/c++/6/bits/basic_string.h ****    *  Documentation?  What's that?
2573:/usr/include/c++/6/bits/basic_string.h ****    *  Nathan Myers <ncm@cantrip.org>.
2574:/usr/include/c++/6/bits/basic_string.h ****    *
2575:/usr/include/c++/6/bits/basic_string.h ****    *  A string looks like this:
2576:/usr/include/c++/6/bits/basic_string.h ****    *
2577:/usr/include/c++/6/bits/basic_string.h ****    *  @code
GAS LISTING /tmp/ccvmoMuv.s 			page 354


2578:/usr/include/c++/6/bits/basic_string.h ****    *                                        [_Rep]
2579:/usr/include/c++/6/bits/basic_string.h ****    *                                        _M_length
2580:/usr/include/c++/6/bits/basic_string.h ****    *   [basic_string<char_type>]            _M_capacity
2581:/usr/include/c++/6/bits/basic_string.h ****    *   _M_dataplus                          _M_refcount
2582:/usr/include/c++/6/bits/basic_string.h ****    *   _M_p ---------------->               unnamed array of char_type
2583:/usr/include/c++/6/bits/basic_string.h ****    *  @endcode
2584:/usr/include/c++/6/bits/basic_string.h ****    *
2585:/usr/include/c++/6/bits/basic_string.h ****    *  Where the _M_p points to the first character in the string, and
2586:/usr/include/c++/6/bits/basic_string.h ****    *  you cast it to a pointer-to-_Rep and subtract 1 to get a
2587:/usr/include/c++/6/bits/basic_string.h ****    *  pointer to the header.
2588:/usr/include/c++/6/bits/basic_string.h ****    *
2589:/usr/include/c++/6/bits/basic_string.h ****    *  This approach has the enormous advantage that a string object
2590:/usr/include/c++/6/bits/basic_string.h ****    *  requires only one allocation.  All the ugliness is confined
2591:/usr/include/c++/6/bits/basic_string.h ****    *  within a single %pair of inline functions, which each compile to
2592:/usr/include/c++/6/bits/basic_string.h ****    *  a single @a add instruction: _Rep::_M_data(), and
2593:/usr/include/c++/6/bits/basic_string.h ****    *  string::_M_rep(); and the allocation function which gets a
2594:/usr/include/c++/6/bits/basic_string.h ****    *  block of raw bytes and with room enough and constructs a _Rep
2595:/usr/include/c++/6/bits/basic_string.h ****    *  object at the front.
2596:/usr/include/c++/6/bits/basic_string.h ****    *
2597:/usr/include/c++/6/bits/basic_string.h ****    *  The reason you want _M_data pointing to the character %array and
2598:/usr/include/c++/6/bits/basic_string.h ****    *  not the _Rep is so that the debugger can see the string
2599:/usr/include/c++/6/bits/basic_string.h ****    *  contents. (Probably we should add a non-inline member to get
2600:/usr/include/c++/6/bits/basic_string.h ****    *  the _Rep for the debugger to use, so users can check the actual
2601:/usr/include/c++/6/bits/basic_string.h ****    *  string length.)
2602:/usr/include/c++/6/bits/basic_string.h ****    *
2603:/usr/include/c++/6/bits/basic_string.h ****    *  Note that the _Rep object is a POD so that you can have a
2604:/usr/include/c++/6/bits/basic_string.h ****    *  static <em>empty string</em> _Rep object already @a constructed before
2605:/usr/include/c++/6/bits/basic_string.h ****    *  static constructors have run.  The reference-count encoding is
2606:/usr/include/c++/6/bits/basic_string.h ****    *  chosen so that a 0 indicates one reference, so you never try to
2607:/usr/include/c++/6/bits/basic_string.h ****    *  destroy the empty-string _Rep object.
2608:/usr/include/c++/6/bits/basic_string.h ****    *
2609:/usr/include/c++/6/bits/basic_string.h ****    *  All but the last paragraph is considered pretty conventional
2610:/usr/include/c++/6/bits/basic_string.h ****    *  for a C++ string implementation.
2611:/usr/include/c++/6/bits/basic_string.h ****   */
2612:/usr/include/c++/6/bits/basic_string.h ****   // 21.3  Template class basic_string
2613:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2614:/usr/include/c++/6/bits/basic_string.h ****     class basic_string
2615:/usr/include/c++/6/bits/basic_string.h ****     {
2616:/usr/include/c++/6/bits/basic_string.h ****       typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;
2617:/usr/include/c++/6/bits/basic_string.h **** 
2618:/usr/include/c++/6/bits/basic_string.h ****       // Types:
2619:/usr/include/c++/6/bits/basic_string.h ****     public:
2620:/usr/include/c++/6/bits/basic_string.h ****       typedef _Traits					    traits_type;
2621:/usr/include/c++/6/bits/basic_string.h ****       typedef typename _Traits::char_type		    value_type;
2622:/usr/include/c++/6/bits/basic_string.h ****       typedef _Alloc					    allocator_type;
2623:/usr/include/c++/6/bits/basic_string.h ****       typedef typename _CharT_alloc_type::size_type	    size_type;
2624:/usr/include/c++/6/bits/basic_string.h ****       typedef typename _CharT_alloc_type::difference_type   difference_type;
2625:/usr/include/c++/6/bits/basic_string.h ****       typedef typename _CharT_alloc_type::reference	    reference;
2626:/usr/include/c++/6/bits/basic_string.h ****       typedef typename _CharT_alloc_type::const_reference   const_reference;
2627:/usr/include/c++/6/bits/basic_string.h ****       typedef typename _CharT_alloc_type::pointer	    pointer;
2628:/usr/include/c++/6/bits/basic_string.h ****       typedef typename _CharT_alloc_type::const_pointer	    const_pointer;
2629:/usr/include/c++/6/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;
2630:/usr/include/c++/6/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
2631:/usr/include/c++/6/bits/basic_string.h ****                                                             const_iterator;
2632:/usr/include/c++/6/bits/basic_string.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
2633:/usr/include/c++/6/bits/basic_string.h ****       typedef std::reverse_iterator<iterator>		    reverse_iterator;
2634:/usr/include/c++/6/bits/basic_string.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 355


2635:/usr/include/c++/6/bits/basic_string.h ****     private:
2636:/usr/include/c++/6/bits/basic_string.h ****       // _Rep: string representation
2637:/usr/include/c++/6/bits/basic_string.h ****       //   Invariants:
2638:/usr/include/c++/6/bits/basic_string.h ****       //   1. String really contains _M_length + 1 characters: due to 21.3.4
2639:/usr/include/c++/6/bits/basic_string.h ****       //      must be kept null-terminated.
2640:/usr/include/c++/6/bits/basic_string.h ****       //   2. _M_capacity >= _M_length
2641:/usr/include/c++/6/bits/basic_string.h ****       //      Allocated memory is always (_M_capacity + 1) * sizeof(_CharT).
2642:/usr/include/c++/6/bits/basic_string.h ****       //   3. _M_refcount has three states:
2643:/usr/include/c++/6/bits/basic_string.h ****       //      -1: leaked, one reference, no ref-copies allowed, non-const.
2644:/usr/include/c++/6/bits/basic_string.h ****       //       0: one reference, non-const.
2645:/usr/include/c++/6/bits/basic_string.h ****       //     n>0: n + 1 references, operations require a lock, const.
2646:/usr/include/c++/6/bits/basic_string.h ****       //   4. All fields==0 is an empty string, given the extra storage
2647:/usr/include/c++/6/bits/basic_string.h ****       //      beyond-the-end for a null terminator; thus, the shared
2648:/usr/include/c++/6/bits/basic_string.h ****       //      empty string representation needs no constructor.
2649:/usr/include/c++/6/bits/basic_string.h **** 
2650:/usr/include/c++/6/bits/basic_string.h ****       struct _Rep_base
2651:/usr/include/c++/6/bits/basic_string.h ****       {
2652:/usr/include/c++/6/bits/basic_string.h **** 	size_type		_M_length;
2653:/usr/include/c++/6/bits/basic_string.h **** 	size_type		_M_capacity;
2654:/usr/include/c++/6/bits/basic_string.h **** 	_Atomic_word		_M_refcount;
2655:/usr/include/c++/6/bits/basic_string.h ****       };
2656:/usr/include/c++/6/bits/basic_string.h **** 
2657:/usr/include/c++/6/bits/basic_string.h ****       struct _Rep : _Rep_base
2658:/usr/include/c++/6/bits/basic_string.h ****       {
2659:/usr/include/c++/6/bits/basic_string.h **** 	// Types:
2660:/usr/include/c++/6/bits/basic_string.h **** 	typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
2661:/usr/include/c++/6/bits/basic_string.h **** 
2662:/usr/include/c++/6/bits/basic_string.h **** 	// (Public) Data members:
2663:/usr/include/c++/6/bits/basic_string.h **** 
2664:/usr/include/c++/6/bits/basic_string.h **** 	// The maximum number of individual char_type elements of an
2665:/usr/include/c++/6/bits/basic_string.h **** 	// individual string is determined by _S_max_size. This is the
2666:/usr/include/c++/6/bits/basic_string.h **** 	// value that will be returned by max_size().  (Whereas npos
2667:/usr/include/c++/6/bits/basic_string.h **** 	// is the maximum number of bytes the allocator can allocate.)
2668:/usr/include/c++/6/bits/basic_string.h **** 	// If one was to divvy up the theoretical largest size string,
2669:/usr/include/c++/6/bits/basic_string.h **** 	// with a terminating character and m _CharT elements, it'd
2670:/usr/include/c++/6/bits/basic_string.h **** 	// look like this:
2671:/usr/include/c++/6/bits/basic_string.h **** 	// npos = sizeof(_Rep) + (m * sizeof(_CharT)) + sizeof(_CharT)
2672:/usr/include/c++/6/bits/basic_string.h **** 	// Solving for m:
2673:/usr/include/c++/6/bits/basic_string.h **** 	// m = ((npos - sizeof(_Rep))/sizeof(CharT)) - 1
2674:/usr/include/c++/6/bits/basic_string.h **** 	// In addition, this implementation quarters this amount.
2675:/usr/include/c++/6/bits/basic_string.h **** 	static const size_type	_S_max_size;
2676:/usr/include/c++/6/bits/basic_string.h **** 	static const _CharT	_S_terminal;
2677:/usr/include/c++/6/bits/basic_string.h **** 
2678:/usr/include/c++/6/bits/basic_string.h **** 	// The following storage is init'd to 0 by the linker, resulting
2679:/usr/include/c++/6/bits/basic_string.h ****         // (carefully) in an empty string with one reference.
2680:/usr/include/c++/6/bits/basic_string.h ****         static size_type _S_empty_rep_storage[];
2681:/usr/include/c++/6/bits/basic_string.h **** 
2682:/usr/include/c++/6/bits/basic_string.h ****         static _Rep&
2683:/usr/include/c++/6/bits/basic_string.h ****         _S_empty_rep() _GLIBCXX_NOEXCEPT
2684:/usr/include/c++/6/bits/basic_string.h ****         { 
2685:/usr/include/c++/6/bits/basic_string.h **** 	  // NB: Mild hack to avoid strict-aliasing warnings.  Note that
2686:/usr/include/c++/6/bits/basic_string.h **** 	  // _S_empty_rep_storage is never modified and the punning should
2687:/usr/include/c++/6/bits/basic_string.h **** 	  // be reasonably safe in this case.
2688:/usr/include/c++/6/bits/basic_string.h **** 	  void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);
2689:/usr/include/c++/6/bits/basic_string.h **** 	  return *reinterpret_cast<_Rep*>(__p);
2690:/usr/include/c++/6/bits/basic_string.h **** 	}
2691:/usr/include/c++/6/bits/basic_string.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 356


2692:/usr/include/c++/6/bits/basic_string.h ****         bool
2693:/usr/include/c++/6/bits/basic_string.h **** 	_M_is_leaked() const _GLIBCXX_NOEXCEPT
2694:/usr/include/c++/6/bits/basic_string.h ****         {
2695:/usr/include/c++/6/bits/basic_string.h **** #if defined(__GTHREADS)
2696:/usr/include/c++/6/bits/basic_string.h ****           // _M_refcount is mutated concurrently by _M_refcopy/_M_dispose,
2697:/usr/include/c++/6/bits/basic_string.h ****           // so we need to use an atomic load. However, _M_is_leaked
2698:/usr/include/c++/6/bits/basic_string.h ****           // predicate does not change concurrently (i.e. the string is either
2699:/usr/include/c++/6/bits/basic_string.h ****           // leaked or not), so a relaxed load is enough.
2700:/usr/include/c++/6/bits/basic_string.h ****           return __atomic_load_n(&this->_M_refcount, __ATOMIC_RELAXED) < 0;
2701:/usr/include/c++/6/bits/basic_string.h **** #else
2702:/usr/include/c++/6/bits/basic_string.h ****           return this->_M_refcount < 0;
2703:/usr/include/c++/6/bits/basic_string.h **** #endif
2704:/usr/include/c++/6/bits/basic_string.h ****         }
2705:/usr/include/c++/6/bits/basic_string.h **** 
2706:/usr/include/c++/6/bits/basic_string.h ****         bool
2707:/usr/include/c++/6/bits/basic_string.h **** 	_M_is_shared() const _GLIBCXX_NOEXCEPT
2708:/usr/include/c++/6/bits/basic_string.h **** 	{
2709:/usr/include/c++/6/bits/basic_string.h **** #if defined(__GTHREADS)
2710:/usr/include/c++/6/bits/basic_string.h ****           // _M_refcount is mutated concurrently by _M_refcopy/_M_dispose,
2711:/usr/include/c++/6/bits/basic_string.h ****           // so we need to use an atomic load. Another thread can drop last
2712:/usr/include/c++/6/bits/basic_string.h ****           // but one reference concurrently with this check, so we need this
2713:/usr/include/c++/6/bits/basic_string.h ****           // load to be acquire to synchronize with release fetch_and_add in
2714:/usr/include/c++/6/bits/basic_string.h ****           // _M_dispose.
2715:/usr/include/c++/6/bits/basic_string.h ****           return __atomic_load_n(&this->_M_refcount, __ATOMIC_ACQUIRE) > 0;
2716:/usr/include/c++/6/bits/basic_string.h **** #else
2717:/usr/include/c++/6/bits/basic_string.h ****           return this->_M_refcount > 0;
2718:/usr/include/c++/6/bits/basic_string.h **** #endif
2719:/usr/include/c++/6/bits/basic_string.h ****         }
2720:/usr/include/c++/6/bits/basic_string.h **** 
2721:/usr/include/c++/6/bits/basic_string.h ****         void
2722:/usr/include/c++/6/bits/basic_string.h **** 	_M_set_leaked() _GLIBCXX_NOEXCEPT
2723:/usr/include/c++/6/bits/basic_string.h ****         { this->_M_refcount = -1; }
2724:/usr/include/c++/6/bits/basic_string.h **** 
2725:/usr/include/c++/6/bits/basic_string.h ****         void
2726:/usr/include/c++/6/bits/basic_string.h **** 	_M_set_sharable() _GLIBCXX_NOEXCEPT
2727:/usr/include/c++/6/bits/basic_string.h ****         { this->_M_refcount = 0; }
2728:/usr/include/c++/6/bits/basic_string.h **** 
2729:/usr/include/c++/6/bits/basic_string.h **** 	void
2730:/usr/include/c++/6/bits/basic_string.h **** 	_M_set_length_and_sharable(size_type __n) _GLIBCXX_NOEXCEPT
2731:/usr/include/c++/6/bits/basic_string.h **** 	{
2732:/usr/include/c++/6/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
2733:/usr/include/c++/6/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
2734:/usr/include/c++/6/bits/basic_string.h **** #endif
2735:/usr/include/c++/6/bits/basic_string.h **** 	    {
2736:/usr/include/c++/6/bits/basic_string.h **** 	      this->_M_set_sharable();  // One reference.
2737:/usr/include/c++/6/bits/basic_string.h **** 	      this->_M_length = __n;
2738:/usr/include/c++/6/bits/basic_string.h **** 	      traits_type::assign(this->_M_refdata()[__n], _S_terminal);
2739:/usr/include/c++/6/bits/basic_string.h **** 	      // grrr. (per 21.3.4)
2740:/usr/include/c++/6/bits/basic_string.h **** 	      // You cannot leave those LWG people alone for a second.
2741:/usr/include/c++/6/bits/basic_string.h **** 	    }
2742:/usr/include/c++/6/bits/basic_string.h **** 	}
2743:/usr/include/c++/6/bits/basic_string.h **** 
2744:/usr/include/c++/6/bits/basic_string.h **** 	_CharT*
2745:/usr/include/c++/6/bits/basic_string.h **** 	_M_refdata() throw()
2746:/usr/include/c++/6/bits/basic_string.h **** 	{ return reinterpret_cast<_CharT*>(this + 1); }
2747:/usr/include/c++/6/bits/basic_string.h **** 
2748:/usr/include/c++/6/bits/basic_string.h **** 	_CharT*
GAS LISTING /tmp/ccvmoMuv.s 			page 357


2749:/usr/include/c++/6/bits/basic_string.h **** 	_M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
2750:/usr/include/c++/6/bits/basic_string.h **** 	{
2751:/usr/include/c++/6/bits/basic_string.h **** 	  return (!_M_is_leaked() && __alloc1 == __alloc2)
2752:/usr/include/c++/6/bits/basic_string.h **** 	          ? _M_refcopy() : _M_clone(__alloc1);
2753:/usr/include/c++/6/bits/basic_string.h **** 	}
2754:/usr/include/c++/6/bits/basic_string.h **** 
2755:/usr/include/c++/6/bits/basic_string.h **** 	// Create & Destroy
2756:/usr/include/c++/6/bits/basic_string.h **** 	static _Rep*
2757:/usr/include/c++/6/bits/basic_string.h **** 	_S_create(size_type, size_type, const _Alloc&);
2758:/usr/include/c++/6/bits/basic_string.h **** 
2759:/usr/include/c++/6/bits/basic_string.h **** 	void
2760:/usr/include/c++/6/bits/basic_string.h **** 	_M_dispose(const _Alloc& __a) _GLIBCXX_NOEXCEPT
2761:/usr/include/c++/6/bits/basic_string.h **** 	{
2762:/usr/include/c++/6/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
2763:/usr/include/c++/6/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
2764:/usr/include/c++/6/bits/basic_string.h **** #endif
2765:/usr/include/c++/6/bits/basic_string.h **** 	    {
2766:/usr/include/c++/6/bits/basic_string.h **** 	      // Be race-detector-friendly.  For more info see bits/c++config.
2767:/usr/include/c++/6/bits/basic_string.h **** 	      _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&this->_M_refcount);
2768:/usr/include/c++/6/bits/basic_string.h ****               // Decrement of _M_refcount is acq_rel, because:
2769:/usr/include/c++/6/bits/basic_string.h ****               // - all but last decrements need to release to synchronize with
2770:/usr/include/c++/6/bits/basic_string.h ****               //   the last decrement that will delete the object.
2771:/usr/include/c++/6/bits/basic_string.h ****               // - the last decrement needs to acquire to synchronize with
2772:/usr/include/c++/6/bits/basic_string.h ****               //   all the previous decrements.
2773:/usr/include/c++/6/bits/basic_string.h ****               // - last but one decrement needs to release to synchronize with
2774:/usr/include/c++/6/bits/basic_string.h ****               //   the acquire load in _M_is_shared that will conclude that
2775:/usr/include/c++/6/bits/basic_string.h ****               //   the object is not shared anymore.
2776:/usr/include/c++/6/bits/basic_string.h **** 	      if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
2777:/usr/include/c++/6/bits/basic_string.h **** 							 -1) <= 0)
2778:/usr/include/c++/6/bits/basic_string.h **** 		{
2779:/usr/include/c++/6/bits/basic_string.h **** 		  _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&this->_M_refcount);
2780:/usr/include/c++/6/bits/basic_string.h **** 		  _M_destroy(__a);
2781:/usr/include/c++/6/bits/basic_string.h **** 		}
2782:/usr/include/c++/6/bits/basic_string.h **** 	    }
2783:/usr/include/c++/6/bits/basic_string.h **** 	}  // XXX MT
2784:/usr/include/c++/6/bits/basic_string.h **** 
2785:/usr/include/c++/6/bits/basic_string.h **** 	void
2786:/usr/include/c++/6/bits/basic_string.h **** 	_M_destroy(const _Alloc&) throw();
2787:/usr/include/c++/6/bits/basic_string.h **** 
2788:/usr/include/c++/6/bits/basic_string.h **** 	_CharT*
2789:/usr/include/c++/6/bits/basic_string.h **** 	_M_refcopy() throw()
2790:/usr/include/c++/6/bits/basic_string.h **** 	{
2791:/usr/include/c++/6/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
2792:/usr/include/c++/6/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
2793:/usr/include/c++/6/bits/basic_string.h **** #endif
2794:/usr/include/c++/6/bits/basic_string.h ****             __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);
2795:/usr/include/c++/6/bits/basic_string.h **** 	  return _M_refdata();
2796:/usr/include/c++/6/bits/basic_string.h **** 	}  // XXX MT
2797:/usr/include/c++/6/bits/basic_string.h **** 
2798:/usr/include/c++/6/bits/basic_string.h **** 	_CharT*
2799:/usr/include/c++/6/bits/basic_string.h **** 	_M_clone(const _Alloc&, size_type __res = 0);
2800:/usr/include/c++/6/bits/basic_string.h ****       };
2801:/usr/include/c++/6/bits/basic_string.h **** 
2802:/usr/include/c++/6/bits/basic_string.h ****       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
2803:/usr/include/c++/6/bits/basic_string.h ****       struct _Alloc_hider : _Alloc
2804:/usr/include/c++/6/bits/basic_string.h ****       {
2805:/usr/include/c++/6/bits/basic_string.h **** 	_Alloc_hider(_CharT* __dat, const _Alloc& __a) _GLIBCXX_NOEXCEPT
GAS LISTING /tmp/ccvmoMuv.s 			page 358


2806:/usr/include/c++/6/bits/basic_string.h **** 	: _Alloc(__a), _M_p(__dat) { }
2807:/usr/include/c++/6/bits/basic_string.h **** 
2808:/usr/include/c++/6/bits/basic_string.h **** 	_CharT* _M_p; // The actual data.
2809:/usr/include/c++/6/bits/basic_string.h ****       };
2810:/usr/include/c++/6/bits/basic_string.h **** 
2811:/usr/include/c++/6/bits/basic_string.h ****     public:
2812:/usr/include/c++/6/bits/basic_string.h ****       // Data Members (public):
2813:/usr/include/c++/6/bits/basic_string.h ****       // NB: This is an unsigned type, and thus represents the maximum
2814:/usr/include/c++/6/bits/basic_string.h ****       // size that the allocator can hold.
2815:/usr/include/c++/6/bits/basic_string.h ****       ///  Value returned by various member functions when they fail.
2816:/usr/include/c++/6/bits/basic_string.h ****       static const size_type	npos = static_cast<size_type>(-1);
2817:/usr/include/c++/6/bits/basic_string.h **** 
2818:/usr/include/c++/6/bits/basic_string.h ****     private:
2819:/usr/include/c++/6/bits/basic_string.h ****       // Data Members (private):
2820:/usr/include/c++/6/bits/basic_string.h ****       mutable _Alloc_hider	_M_dataplus;
2821:/usr/include/c++/6/bits/basic_string.h **** 
2822:/usr/include/c++/6/bits/basic_string.h ****       _CharT*
2823:/usr/include/c++/6/bits/basic_string.h ****       _M_data() const _GLIBCXX_NOEXCEPT
2824:/usr/include/c++/6/bits/basic_string.h ****       { return  _M_dataplus._M_p; }
2825:/usr/include/c++/6/bits/basic_string.h **** 
2826:/usr/include/c++/6/bits/basic_string.h ****       _CharT*
2827:/usr/include/c++/6/bits/basic_string.h ****       _M_data(_CharT* __p) _GLIBCXX_NOEXCEPT
2828:/usr/include/c++/6/bits/basic_string.h ****       { return (_M_dataplus._M_p = __p); }
2829:/usr/include/c++/6/bits/basic_string.h **** 
2830:/usr/include/c++/6/bits/basic_string.h ****       _Rep*
2831:/usr/include/c++/6/bits/basic_string.h ****       _M_rep() const _GLIBCXX_NOEXCEPT
2832:/usr/include/c++/6/bits/basic_string.h ****       { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }
2833:/usr/include/c++/6/bits/basic_string.h **** 
2834:/usr/include/c++/6/bits/basic_string.h ****       // For the internal use we have functions similar to `begin'/`end'
2835:/usr/include/c++/6/bits/basic_string.h ****       // but they do not call _M_leak.
2836:/usr/include/c++/6/bits/basic_string.h ****       iterator
2837:/usr/include/c++/6/bits/basic_string.h ****       _M_ibegin() const _GLIBCXX_NOEXCEPT
2838:/usr/include/c++/6/bits/basic_string.h ****       { return iterator(_M_data()); }
2839:/usr/include/c++/6/bits/basic_string.h **** 
2840:/usr/include/c++/6/bits/basic_string.h ****       iterator
2841:/usr/include/c++/6/bits/basic_string.h ****       _M_iend() const _GLIBCXX_NOEXCEPT
2842:/usr/include/c++/6/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
2843:/usr/include/c++/6/bits/basic_string.h **** 
2844:/usr/include/c++/6/bits/basic_string.h ****       void
2845:/usr/include/c++/6/bits/basic_string.h ****       _M_leak()    // for use in begin() & non-const op[]
2846:/usr/include/c++/6/bits/basic_string.h ****       {
2847:/usr/include/c++/6/bits/basic_string.h **** 	if (!_M_rep()->_M_is_leaked())
2848:/usr/include/c++/6/bits/basic_string.h **** 	  _M_leak_hard();
2849:/usr/include/c++/6/bits/basic_string.h ****       }
2850:/usr/include/c++/6/bits/basic_string.h **** 
2851:/usr/include/c++/6/bits/basic_string.h ****       size_type
2852:/usr/include/c++/6/bits/basic_string.h ****       _M_check(size_type __pos, const char* __s) const
2853:/usr/include/c++/6/bits/basic_string.h ****       {
2854:/usr/include/c++/6/bits/basic_string.h **** 	if (__pos > this->size())
2855:/usr/include/c++/6/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
2856:/usr/include/c++/6/bits/basic_string.h **** 				       "this->size() (which is %zu)"),
2857:/usr/include/c++/6/bits/basic_string.h **** 				   __s, __pos, this->size());
2858:/usr/include/c++/6/bits/basic_string.h **** 	return __pos;
2859:/usr/include/c++/6/bits/basic_string.h ****       }
2860:/usr/include/c++/6/bits/basic_string.h **** 
2861:/usr/include/c++/6/bits/basic_string.h ****       void
2862:/usr/include/c++/6/bits/basic_string.h ****       _M_check_length(size_type __n1, size_type __n2, const char* __s) const
GAS LISTING /tmp/ccvmoMuv.s 			page 359


2863:/usr/include/c++/6/bits/basic_string.h ****       {
2864:/usr/include/c++/6/bits/basic_string.h **** 	if (this->max_size() - (this->size() - __n1) < __n2)
2865:/usr/include/c++/6/bits/basic_string.h **** 	  __throw_length_error(__N(__s));
2866:/usr/include/c++/6/bits/basic_string.h ****       }
2867:/usr/include/c++/6/bits/basic_string.h **** 
2868:/usr/include/c++/6/bits/basic_string.h ****       // NB: _M_limit doesn't check for a bad __pos value.
2869:/usr/include/c++/6/bits/basic_string.h ****       size_type
2870:/usr/include/c++/6/bits/basic_string.h ****       _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
2871:/usr/include/c++/6/bits/basic_string.h ****       {
2872:/usr/include/c++/6/bits/basic_string.h **** 	const bool __testoff =  __off < this->size() - __pos;
2873:/usr/include/c++/6/bits/basic_string.h **** 	return __testoff ? __off : this->size() - __pos;
2874:/usr/include/c++/6/bits/basic_string.h ****       }
2875:/usr/include/c++/6/bits/basic_string.h **** 
2876:/usr/include/c++/6/bits/basic_string.h ****       // True if _Rep and source do not overlap.
2877:/usr/include/c++/6/bits/basic_string.h ****       bool
2878:/usr/include/c++/6/bits/basic_string.h ****       _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
2879:/usr/include/c++/6/bits/basic_string.h ****       {
2880:/usr/include/c++/6/bits/basic_string.h **** 	return (less<const _CharT*>()(__s, _M_data())
2881:/usr/include/c++/6/bits/basic_string.h **** 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
2882:/usr/include/c++/6/bits/basic_string.h ****       }
2883:/usr/include/c++/6/bits/basic_string.h **** 
2884:/usr/include/c++/6/bits/basic_string.h ****       // When __n = 1 way faster than the general multichar
2885:/usr/include/c++/6/bits/basic_string.h ****       // traits_type::copy/move/assign.
2886:/usr/include/c++/6/bits/basic_string.h ****       static void
2887:/usr/include/c++/6/bits/basic_string.h ****       _M_copy(_CharT* __d, const _CharT* __s, size_type __n) _GLIBCXX_NOEXCEPT
2888:/usr/include/c++/6/bits/basic_string.h ****       {
2889:/usr/include/c++/6/bits/basic_string.h **** 	if (__n == 1)
2890:/usr/include/c++/6/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
2891:/usr/include/c++/6/bits/basic_string.h **** 	else
2892:/usr/include/c++/6/bits/basic_string.h **** 	  traits_type::copy(__d, __s, __n);
2893:/usr/include/c++/6/bits/basic_string.h ****       }
2894:/usr/include/c++/6/bits/basic_string.h **** 
2895:/usr/include/c++/6/bits/basic_string.h ****       static void
2896:/usr/include/c++/6/bits/basic_string.h ****       _M_move(_CharT* __d, const _CharT* __s, size_type __n) _GLIBCXX_NOEXCEPT
2897:/usr/include/c++/6/bits/basic_string.h ****       {
2898:/usr/include/c++/6/bits/basic_string.h **** 	if (__n == 1)
2899:/usr/include/c++/6/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
2900:/usr/include/c++/6/bits/basic_string.h **** 	else
2901:/usr/include/c++/6/bits/basic_string.h **** 	  traits_type::move(__d, __s, __n);	  
2902:/usr/include/c++/6/bits/basic_string.h ****       }
2903:/usr/include/c++/6/bits/basic_string.h **** 
2904:/usr/include/c++/6/bits/basic_string.h ****       static void
2905:/usr/include/c++/6/bits/basic_string.h ****       _M_assign(_CharT* __d, size_type __n, _CharT __c) _GLIBCXX_NOEXCEPT
2906:/usr/include/c++/6/bits/basic_string.h ****       {
2907:/usr/include/c++/6/bits/basic_string.h **** 	if (__n == 1)
2908:/usr/include/c++/6/bits/basic_string.h **** 	  traits_type::assign(*__d, __c);
2909:/usr/include/c++/6/bits/basic_string.h **** 	else
2910:/usr/include/c++/6/bits/basic_string.h **** 	  traits_type::assign(__d, __n, __c);	  
2911:/usr/include/c++/6/bits/basic_string.h ****       }
2912:/usr/include/c++/6/bits/basic_string.h **** 
2913:/usr/include/c++/6/bits/basic_string.h ****       // _S_copy_chars is a separate template to permit specialization
2914:/usr/include/c++/6/bits/basic_string.h ****       // to optimize for the common case of pointers as iterators.
2915:/usr/include/c++/6/bits/basic_string.h ****       template<class _Iterator>
2916:/usr/include/c++/6/bits/basic_string.h ****         static void
2917:/usr/include/c++/6/bits/basic_string.h ****         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
2918:/usr/include/c++/6/bits/basic_string.h ****         {
2919:/usr/include/c++/6/bits/basic_string.h **** 	  for (; __k1 != __k2; ++__k1, (void)++__p)
GAS LISTING /tmp/ccvmoMuv.s 			page 360


2920:/usr/include/c++/6/bits/basic_string.h **** 	    traits_type::assign(*__p, *__k1); // These types are off.
2921:/usr/include/c++/6/bits/basic_string.h **** 	}
2922:/usr/include/c++/6/bits/basic_string.h **** 
2923:/usr/include/c++/6/bits/basic_string.h ****       static void
2924:/usr/include/c++/6/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT
2925:/usr/include/c++/6/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
2926:/usr/include/c++/6/bits/basic_string.h **** 
2927:/usr/include/c++/6/bits/basic_string.h ****       static void
2928:/usr/include/c++/6/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
2929:/usr/include/c++/6/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2930:/usr/include/c++/6/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
2931:/usr/include/c++/6/bits/basic_string.h **** 
2932:/usr/include/c++/6/bits/basic_string.h ****       static void
2933:/usr/include/c++/6/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
2934:/usr/include/c++/6/bits/basic_string.h ****       { _M_copy(__p, __k1, __k2 - __k1); }
2935:/usr/include/c++/6/bits/basic_string.h **** 
2936:/usr/include/c++/6/bits/basic_string.h ****       static void
2937:/usr/include/c++/6/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
2938:/usr/include/c++/6/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2939:/usr/include/c++/6/bits/basic_string.h ****       { _M_copy(__p, __k1, __k2 - __k1); }
2940:/usr/include/c++/6/bits/basic_string.h **** 
2941:/usr/include/c++/6/bits/basic_string.h ****       static int
2942:/usr/include/c++/6/bits/basic_string.h ****       _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
2943:/usr/include/c++/6/bits/basic_string.h ****       {
2944:/usr/include/c++/6/bits/basic_string.h **** 	const difference_type __d = difference_type(__n1 - __n2);
2945:/usr/include/c++/6/bits/basic_string.h **** 
2946:/usr/include/c++/6/bits/basic_string.h **** 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
2947:/usr/include/c++/6/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__max;
2948:/usr/include/c++/6/bits/basic_string.h **** 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
2949:/usr/include/c++/6/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__min;
2950:/usr/include/c++/6/bits/basic_string.h **** 	else
2951:/usr/include/c++/6/bits/basic_string.h **** 	  return int(__d);
2952:/usr/include/c++/6/bits/basic_string.h ****       }
2953:/usr/include/c++/6/bits/basic_string.h **** 
2954:/usr/include/c++/6/bits/basic_string.h ****       void
2955:/usr/include/c++/6/bits/basic_string.h ****       _M_mutate(size_type __pos, size_type __len1, size_type __len2);
2956:/usr/include/c++/6/bits/basic_string.h **** 
2957:/usr/include/c++/6/bits/basic_string.h ****       void
2958:/usr/include/c++/6/bits/basic_string.h ****       _M_leak_hard();
2959:/usr/include/c++/6/bits/basic_string.h **** 
2960:/usr/include/c++/6/bits/basic_string.h ****       static _Rep&
2961:/usr/include/c++/6/bits/basic_string.h ****       _S_empty_rep() _GLIBCXX_NOEXCEPT
2962:/usr/include/c++/6/bits/basic_string.h ****       { return _Rep::_S_empty_rep(); }
2963:/usr/include/c++/6/bits/basic_string.h **** 
2964:/usr/include/c++/6/bits/basic_string.h ****     public:
2965:/usr/include/c++/6/bits/basic_string.h ****       // Construct/copy/destroy:
2966:/usr/include/c++/6/bits/basic_string.h ****       // NB: We overload ctors in some cases instead of using default
2967:/usr/include/c++/6/bits/basic_string.h ****       // arguments, per 17.4.4.4 para. 2 item 2.
2968:/usr/include/c++/6/bits/basic_string.h **** 
2969:/usr/include/c++/6/bits/basic_string.h ****       /**
2970:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Default constructor creates an empty string.
2971:/usr/include/c++/6/bits/basic_string.h ****        */
2972:/usr/include/c++/6/bits/basic_string.h ****       basic_string()
2973:/usr/include/c++/6/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
2974:/usr/include/c++/6/bits/basic_string.h ****       : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }
2975:/usr/include/c++/6/bits/basic_string.h **** #else
2976:/usr/include/c++/6/bits/basic_string.h ****       : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc()){ }
GAS LISTING /tmp/ccvmoMuv.s 			page 361


2977:/usr/include/c++/6/bits/basic_string.h **** #endif
2978:/usr/include/c++/6/bits/basic_string.h **** 
2979:/usr/include/c++/6/bits/basic_string.h ****       /**
2980:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Construct an empty string using allocator @a a.
2981:/usr/include/c++/6/bits/basic_string.h ****        */
2982:/usr/include/c++/6/bits/basic_string.h ****       explicit
2983:/usr/include/c++/6/bits/basic_string.h ****       basic_string(const _Alloc& __a);
2984:/usr/include/c++/6/bits/basic_string.h **** 
2985:/usr/include/c++/6/bits/basic_string.h ****       // NB: per LWG issue 42, semantics different from IS:
2986:/usr/include/c++/6/bits/basic_string.h ****       /**
2987:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Construct string with copy of value of @a str.
2988:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __str  Source string.
2989:/usr/include/c++/6/bits/basic_string.h ****        */
2990:/usr/include/c++/6/bits/basic_string.h ****       basic_string(const basic_string& __str);
2991:/usr/include/c++/6/bits/basic_string.h ****       /**
2992:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
2993:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __str  Source string.
2994:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
2995:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __n  Number of characters to copy (default remainder).
2996:/usr/include/c++/6/bits/basic_string.h ****        */
2997:/usr/include/c++/6/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
2998:/usr/include/c++/6/bits/basic_string.h **** 		   size_type __n = npos);
2999:/usr/include/c++/6/bits/basic_string.h ****       /**
3000:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
3001:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __str  Source string.
3002:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
3003:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
3004:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __a  Allocator to use.
3005:/usr/include/c++/6/bits/basic_string.h ****        */
3006:/usr/include/c++/6/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
3007:/usr/include/c++/6/bits/basic_string.h **** 		   size_type __n, const _Alloc& __a);
3008:/usr/include/c++/6/bits/basic_string.h **** 
3009:/usr/include/c++/6/bits/basic_string.h ****       /**
3010:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Construct string initialized by a character %array.
3011:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __s  Source character %array.
3012:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
3013:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3014:/usr/include/c++/6/bits/basic_string.h ****        *
3015:/usr/include/c++/6/bits/basic_string.h ****        *  NB: @a __s must have at least @a __n characters, &apos;\\0&apos;
3016:/usr/include/c++/6/bits/basic_string.h ****        *  has no special meaning.
3017:/usr/include/c++/6/bits/basic_string.h ****        */
3018:/usr/include/c++/6/bits/basic_string.h ****       basic_string(const _CharT* __s, size_type __n,
3019:/usr/include/c++/6/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc());
3020:/usr/include/c++/6/bits/basic_string.h ****       /**
3021:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Construct string as copy of a C string.
3022:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __s  Source C string.
3023:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3024:/usr/include/c++/6/bits/basic_string.h ****        */
3025:/usr/include/c++/6/bits/basic_string.h ****       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());
3026:/usr/include/c++/6/bits/basic_string.h ****       /**
3027:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Construct string as multiple characters.
3028:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __n  Number of characters.
3029:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __c  Character to use.
3030:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3031:/usr/include/c++/6/bits/basic_string.h ****        */
3032:/usr/include/c++/6/bits/basic_string.h ****       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());
3033:/usr/include/c++/6/bits/basic_string.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 362


3034:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
3035:/usr/include/c++/6/bits/basic_string.h ****       /**
3036:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Move construct string.
3037:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __str  Source string.
3038:/usr/include/c++/6/bits/basic_string.h ****        *
3039:/usr/include/c++/6/bits/basic_string.h ****        *  The newly-created string contains the exact contents of @a __str.
3040:/usr/include/c++/6/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
3041:/usr/include/c++/6/bits/basic_string.h ****        **/
3042:/usr/include/c++/6/bits/basic_string.h ****       basic_string(basic_string&& __str)
3043:/usr/include/c++/6/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3044:/usr/include/c++/6/bits/basic_string.h ****       noexcept // FIXME C++11: should always be noexcept.
3045:/usr/include/c++/6/bits/basic_string.h **** #endif
3046:/usr/include/c++/6/bits/basic_string.h ****       : _M_dataplus(__str._M_dataplus)
3047:/usr/include/c++/6/bits/basic_string.h ****       {
3048:/usr/include/c++/6/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3049:/usr/include/c++/6/bits/basic_string.h **** 	__str._M_data(_S_empty_rep()._M_refdata());
3050:/usr/include/c++/6/bits/basic_string.h **** #else
3051:/usr/include/c++/6/bits/basic_string.h **** 	__str._M_data(_S_construct(size_type(), _CharT(), get_allocator()));
3052:/usr/include/c++/6/bits/basic_string.h **** #endif
3053:/usr/include/c++/6/bits/basic_string.h ****       }
3054:/usr/include/c++/6/bits/basic_string.h **** 
3055:/usr/include/c++/6/bits/basic_string.h ****       /**
3056:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Construct string from an initializer %list.
3057:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __l  std::initializer_list of characters.
3058:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3059:/usr/include/c++/6/bits/basic_string.h ****        */
3060:/usr/include/c++/6/bits/basic_string.h ****       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc());
3061:/usr/include/c++/6/bits/basic_string.h **** #endif // C++11
3062:/usr/include/c++/6/bits/basic_string.h **** 
3063:/usr/include/c++/6/bits/basic_string.h ****       /**
3064:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Construct string as copy of a range.
3065:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __beg  Start of range.
3066:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __end  End of range.
3067:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3068:/usr/include/c++/6/bits/basic_string.h ****        */
3069:/usr/include/c++/6/bits/basic_string.h ****       template<class _InputIterator>
3070:/usr/include/c++/6/bits/basic_string.h ****         basic_string(_InputIterator __beg, _InputIterator __end,
3071:/usr/include/c++/6/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc());
3072:/usr/include/c++/6/bits/basic_string.h **** 
3073:/usr/include/c++/6/bits/basic_string.h ****       /**
3074:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Destroy the string instance.
3075:/usr/include/c++/6/bits/basic_string.h ****        */
3076:/usr/include/c++/6/bits/basic_string.h ****       ~basic_string() _GLIBCXX_NOEXCEPT
3077:/usr/include/c++/6/bits/basic_string.h ****       { _M_rep()->_M_dispose(this->get_allocator()); }
3078:/usr/include/c++/6/bits/basic_string.h **** 
3079:/usr/include/c++/6/bits/basic_string.h ****       /**
3080:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Assign the value of @a str to this string.
3081:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __str  Source string.
3082:/usr/include/c++/6/bits/basic_string.h ****        */
3083:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3084:/usr/include/c++/6/bits/basic_string.h ****       operator=(const basic_string& __str) 
3085:/usr/include/c++/6/bits/basic_string.h ****       { return this->assign(__str); }
3086:/usr/include/c++/6/bits/basic_string.h **** 
3087:/usr/include/c++/6/bits/basic_string.h ****       /**
3088:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Copy contents of @a s into this string.
3089:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __s  Source null-terminated string.
3090:/usr/include/c++/6/bits/basic_string.h ****        */
GAS LISTING /tmp/ccvmoMuv.s 			page 363


3091:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3092:/usr/include/c++/6/bits/basic_string.h ****       operator=(const _CharT* __s) 
3093:/usr/include/c++/6/bits/basic_string.h ****       { return this->assign(__s); }
3094:/usr/include/c++/6/bits/basic_string.h **** 
3095:/usr/include/c++/6/bits/basic_string.h ****       /**
3096:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Set value to string of length 1.
3097:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __c  Source character.
3098:/usr/include/c++/6/bits/basic_string.h ****        *
3099:/usr/include/c++/6/bits/basic_string.h ****        *  Assigning to a character makes this string length 1 and
3100:/usr/include/c++/6/bits/basic_string.h ****        *  (*this)[0] == @a c.
3101:/usr/include/c++/6/bits/basic_string.h ****        */
3102:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3103:/usr/include/c++/6/bits/basic_string.h ****       operator=(_CharT __c) 
3104:/usr/include/c++/6/bits/basic_string.h ****       { 
3105:/usr/include/c++/6/bits/basic_string.h **** 	this->assign(1, __c); 
3106:/usr/include/c++/6/bits/basic_string.h **** 	return *this;
3107:/usr/include/c++/6/bits/basic_string.h ****       }
3108:/usr/include/c++/6/bits/basic_string.h **** 
3109:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
3110:/usr/include/c++/6/bits/basic_string.h ****       /**
3111:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Move assign the value of @a str to this string.
3112:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __str  Source string.
3113:/usr/include/c++/6/bits/basic_string.h ****        *
3114:/usr/include/c++/6/bits/basic_string.h ****        *  The contents of @a str are moved into this string (without copying).
3115:/usr/include/c++/6/bits/basic_string.h ****        *  @a str is a valid, but unspecified string.
3116:/usr/include/c++/6/bits/basic_string.h ****        **/
3117:/usr/include/c++/6/bits/basic_string.h ****       // PR 58265, this should be noexcept.
3118:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3119:/usr/include/c++/6/bits/basic_string.h ****       operator=(basic_string&& __str)
3120:/usr/include/c++/6/bits/basic_string.h ****       {
3121:/usr/include/c++/6/bits/basic_string.h **** 	// NB: DR 1204.
3122:/usr/include/c++/6/bits/basic_string.h **** 	this->swap(__str);
3123:/usr/include/c++/6/bits/basic_string.h **** 	return *this;
3124:/usr/include/c++/6/bits/basic_string.h ****       }
3125:/usr/include/c++/6/bits/basic_string.h **** 
3126:/usr/include/c++/6/bits/basic_string.h ****       /**
3127:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Set value to string constructed from initializer %list.
3128:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __l  std::initializer_list.
3129:/usr/include/c++/6/bits/basic_string.h ****        */
3130:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3131:/usr/include/c++/6/bits/basic_string.h ****       operator=(initializer_list<_CharT> __l)
3132:/usr/include/c++/6/bits/basic_string.h ****       {
3133:/usr/include/c++/6/bits/basic_string.h **** 	this->assign(__l.begin(), __l.size());
3134:/usr/include/c++/6/bits/basic_string.h **** 	return *this;
3135:/usr/include/c++/6/bits/basic_string.h ****       }
3136:/usr/include/c++/6/bits/basic_string.h **** #endif // C++11
3137:/usr/include/c++/6/bits/basic_string.h **** 
3138:/usr/include/c++/6/bits/basic_string.h ****       // Iterators:
3139:/usr/include/c++/6/bits/basic_string.h ****       /**
3140:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read/write iterator that points to the first character in
3141:/usr/include/c++/6/bits/basic_string.h ****        *  the %string.  Unshares the string.
3142:/usr/include/c++/6/bits/basic_string.h ****        */
3143:/usr/include/c++/6/bits/basic_string.h ****       iterator
3144:/usr/include/c++/6/bits/basic_string.h ****       begin() // FIXME C++11: should be noexcept.
3145:/usr/include/c++/6/bits/basic_string.h ****       {
3146:/usr/include/c++/6/bits/basic_string.h **** 	_M_leak();
3147:/usr/include/c++/6/bits/basic_string.h **** 	return iterator(_M_data());
GAS LISTING /tmp/ccvmoMuv.s 			page 364


3148:/usr/include/c++/6/bits/basic_string.h ****       }
3149:/usr/include/c++/6/bits/basic_string.h **** 
3150:/usr/include/c++/6/bits/basic_string.h ****       /**
3151:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
3152:/usr/include/c++/6/bits/basic_string.h ****        *  character in the %string.
3153:/usr/include/c++/6/bits/basic_string.h ****        */
3154:/usr/include/c++/6/bits/basic_string.h ****       const_iterator
3155:/usr/include/c++/6/bits/basic_string.h ****       begin() const _GLIBCXX_NOEXCEPT
3156:/usr/include/c++/6/bits/basic_string.h ****       { return const_iterator(_M_data()); }
3157:/usr/include/c++/6/bits/basic_string.h **** 
3158:/usr/include/c++/6/bits/basic_string.h ****       /**
3159:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read/write iterator that points one past the last
3160:/usr/include/c++/6/bits/basic_string.h ****        *  character in the %string.  Unshares the string.
3161:/usr/include/c++/6/bits/basic_string.h ****        */
3162:/usr/include/c++/6/bits/basic_string.h ****       iterator
3163:/usr/include/c++/6/bits/basic_string.h ****       end() // FIXME C++11: should be noexcept.
3164:/usr/include/c++/6/bits/basic_string.h ****       {
3165:/usr/include/c++/6/bits/basic_string.h **** 	_M_leak();
3166:/usr/include/c++/6/bits/basic_string.h **** 	return iterator(_M_data() + this->size());
3167:/usr/include/c++/6/bits/basic_string.h ****       }
3168:/usr/include/c++/6/bits/basic_string.h **** 
3169:/usr/include/c++/6/bits/basic_string.h ****       /**
3170:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
3171:/usr/include/c++/6/bits/basic_string.h ****        *  last character in the %string.
3172:/usr/include/c++/6/bits/basic_string.h ****        */
3173:/usr/include/c++/6/bits/basic_string.h ****       const_iterator
3174:/usr/include/c++/6/bits/basic_string.h ****       end() const _GLIBCXX_NOEXCEPT
3175:/usr/include/c++/6/bits/basic_string.h ****       { return const_iterator(_M_data() + this->size()); }
3176:/usr/include/c++/6/bits/basic_string.h **** 
3177:/usr/include/c++/6/bits/basic_string.h ****       /**
3178:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to the last
3179:/usr/include/c++/6/bits/basic_string.h ****        *  character in the %string.  Iteration is done in reverse element
3180:/usr/include/c++/6/bits/basic_string.h ****        *  order.  Unshares the string.
3181:/usr/include/c++/6/bits/basic_string.h ****        */
3182:/usr/include/c++/6/bits/basic_string.h ****       reverse_iterator
3183:/usr/include/c++/6/bits/basic_string.h ****       rbegin() // FIXME C++11: should be noexcept.
3184:/usr/include/c++/6/bits/basic_string.h ****       { return reverse_iterator(this->end()); }
3185:/usr/include/c++/6/bits/basic_string.h **** 
3186:/usr/include/c++/6/bits/basic_string.h ****       /**
3187:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3188:/usr/include/c++/6/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
3189:/usr/include/c++/6/bits/basic_string.h ****        *  reverse element order.
3190:/usr/include/c++/6/bits/basic_string.h ****        */
3191:/usr/include/c++/6/bits/basic_string.h ****       const_reverse_iterator
3192:/usr/include/c++/6/bits/basic_string.h ****       rbegin() const _GLIBCXX_NOEXCEPT
3193:/usr/include/c++/6/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
3194:/usr/include/c++/6/bits/basic_string.h **** 
3195:/usr/include/c++/6/bits/basic_string.h ****       /**
3196:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to one before the
3197:/usr/include/c++/6/bits/basic_string.h ****        *  first character in the %string.  Iteration is done in reverse
3198:/usr/include/c++/6/bits/basic_string.h ****        *  element order.  Unshares the string.
3199:/usr/include/c++/6/bits/basic_string.h ****        */
3200:/usr/include/c++/6/bits/basic_string.h ****       reverse_iterator
3201:/usr/include/c++/6/bits/basic_string.h ****       rend() // FIXME C++11: should be noexcept.
3202:/usr/include/c++/6/bits/basic_string.h ****       { return reverse_iterator(this->begin()); }
3203:/usr/include/c++/6/bits/basic_string.h **** 
3204:/usr/include/c++/6/bits/basic_string.h ****       /**
GAS LISTING /tmp/ccvmoMuv.s 			page 365


3205:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3206:/usr/include/c++/6/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
3207:/usr/include/c++/6/bits/basic_string.h ****        *  is done in reverse element order.
3208:/usr/include/c++/6/bits/basic_string.h ****        */
3209:/usr/include/c++/6/bits/basic_string.h ****       const_reverse_iterator
3210:/usr/include/c++/6/bits/basic_string.h ****       rend() const _GLIBCXX_NOEXCEPT
3211:/usr/include/c++/6/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
3212:/usr/include/c++/6/bits/basic_string.h **** 
3213:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
3214:/usr/include/c++/6/bits/basic_string.h ****       /**
3215:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
3216:/usr/include/c++/6/bits/basic_string.h ****        *  character in the %string.
3217:/usr/include/c++/6/bits/basic_string.h ****        */
3218:/usr/include/c++/6/bits/basic_string.h ****       const_iterator
3219:/usr/include/c++/6/bits/basic_string.h ****       cbegin() const noexcept
3220:/usr/include/c++/6/bits/basic_string.h ****       { return const_iterator(this->_M_data()); }
3221:/usr/include/c++/6/bits/basic_string.h **** 
3222:/usr/include/c++/6/bits/basic_string.h ****       /**
3223:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
3224:/usr/include/c++/6/bits/basic_string.h ****        *  last character in the %string.
3225:/usr/include/c++/6/bits/basic_string.h ****        */
3226:/usr/include/c++/6/bits/basic_string.h ****       const_iterator
3227:/usr/include/c++/6/bits/basic_string.h ****       cend() const noexcept
3228:/usr/include/c++/6/bits/basic_string.h ****       { return const_iterator(this->_M_data() + this->size()); }
3229:/usr/include/c++/6/bits/basic_string.h **** 
3230:/usr/include/c++/6/bits/basic_string.h ****       /**
3231:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3232:/usr/include/c++/6/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
3233:/usr/include/c++/6/bits/basic_string.h ****        *  reverse element order.
3234:/usr/include/c++/6/bits/basic_string.h ****        */
3235:/usr/include/c++/6/bits/basic_string.h ****       const_reverse_iterator
3236:/usr/include/c++/6/bits/basic_string.h ****       crbegin() const noexcept
3237:/usr/include/c++/6/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
3238:/usr/include/c++/6/bits/basic_string.h **** 
3239:/usr/include/c++/6/bits/basic_string.h ****       /**
3240:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3241:/usr/include/c++/6/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
3242:/usr/include/c++/6/bits/basic_string.h ****        *  is done in reverse element order.
3243:/usr/include/c++/6/bits/basic_string.h ****        */
3244:/usr/include/c++/6/bits/basic_string.h ****       const_reverse_iterator
3245:/usr/include/c++/6/bits/basic_string.h ****       crend() const noexcept
3246:/usr/include/c++/6/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
3247:/usr/include/c++/6/bits/basic_string.h **** #endif
3248:/usr/include/c++/6/bits/basic_string.h **** 
3249:/usr/include/c++/6/bits/basic_string.h ****     public:
3250:/usr/include/c++/6/bits/basic_string.h ****       // Capacity:
3251:/usr/include/c++/6/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
3252:/usr/include/c++/6/bits/basic_string.h ****       ///  null-termination.
3253:/usr/include/c++/6/bits/basic_string.h ****       size_type
3254:/usr/include/c++/6/bits/basic_string.h ****       size() const _GLIBCXX_NOEXCEPT
3255:/usr/include/c++/6/bits/basic_string.h ****       { return _M_rep()->_M_length; }
3256:/usr/include/c++/6/bits/basic_string.h **** 
3257:/usr/include/c++/6/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
3258:/usr/include/c++/6/bits/basic_string.h ****       ///  null-termination.
3259:/usr/include/c++/6/bits/basic_string.h ****       size_type
3260:/usr/include/c++/6/bits/basic_string.h ****       length() const _GLIBCXX_NOEXCEPT
3261:/usr/include/c++/6/bits/basic_string.h ****       { return _M_rep()->_M_length; }
GAS LISTING /tmp/ccvmoMuv.s 			page 366


3262:/usr/include/c++/6/bits/basic_string.h **** 
3263:/usr/include/c++/6/bits/basic_string.h ****       ///  Returns the size() of the largest possible %string.
3264:/usr/include/c++/6/bits/basic_string.h ****       size_type
3265:/usr/include/c++/6/bits/basic_string.h ****       max_size() const _GLIBCXX_NOEXCEPT
3266:/usr/include/c++/6/bits/basic_string.h ****       { return _Rep::_S_max_size; }
3267:/usr/include/c++/6/bits/basic_string.h **** 
3268:/usr/include/c++/6/bits/basic_string.h ****       /**
3269:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
3270:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
3271:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __c  Character to fill any new elements.
3272:/usr/include/c++/6/bits/basic_string.h ****        *
3273:/usr/include/c++/6/bits/basic_string.h ****        *  This function will %resize the %string to the specified
3274:/usr/include/c++/6/bits/basic_string.h ****        *  number of characters.  If the number is smaller than the
3275:/usr/include/c++/6/bits/basic_string.h ****        *  %string's current size the %string is truncated, otherwise
3276:/usr/include/c++/6/bits/basic_string.h ****        *  the %string is extended and new elements are %set to @a __c.
3277:/usr/include/c++/6/bits/basic_string.h ****        */
3278:/usr/include/c++/6/bits/basic_string.h ****       void
3279:/usr/include/c++/6/bits/basic_string.h ****       resize(size_type __n, _CharT __c);
3280:/usr/include/c++/6/bits/basic_string.h **** 
3281:/usr/include/c++/6/bits/basic_string.h ****       /**
3282:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
3283:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
3284:/usr/include/c++/6/bits/basic_string.h ****        *
3285:/usr/include/c++/6/bits/basic_string.h ****        *  This function will resize the %string to the specified length.  If
3286:/usr/include/c++/6/bits/basic_string.h ****        *  the new size is smaller than the %string's current size the %string
3287:/usr/include/c++/6/bits/basic_string.h ****        *  is truncated, otherwise the %string is extended and new characters
3288:/usr/include/c++/6/bits/basic_string.h ****        *  are default-constructed.  For basic types such as char, this means
3289:/usr/include/c++/6/bits/basic_string.h ****        *  setting them to 0.
3290:/usr/include/c++/6/bits/basic_string.h ****        */
3291:/usr/include/c++/6/bits/basic_string.h ****       void
3292:/usr/include/c++/6/bits/basic_string.h ****       resize(size_type __n)
3293:/usr/include/c++/6/bits/basic_string.h ****       { this->resize(__n, _CharT()); }
3294:/usr/include/c++/6/bits/basic_string.h **** 
3295:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
3296:/usr/include/c++/6/bits/basic_string.h ****       ///  A non-binding request to reduce capacity() to size().
3297:/usr/include/c++/6/bits/basic_string.h ****       void
3298:/usr/include/c++/6/bits/basic_string.h ****       shrink_to_fit() _GLIBCXX_NOEXCEPT
3299:/usr/include/c++/6/bits/basic_string.h ****       {
3300:/usr/include/c++/6/bits/basic_string.h **** #if __cpp_exceptions
3301:/usr/include/c++/6/bits/basic_string.h **** 	if (capacity() > size())
3302:/usr/include/c++/6/bits/basic_string.h **** 	  {
3303:/usr/include/c++/6/bits/basic_string.h **** 	    try
3304:/usr/include/c++/6/bits/basic_string.h **** 	      { reserve(0); }
3305:/usr/include/c++/6/bits/basic_string.h **** 	    catch(...)
3306:/usr/include/c++/6/bits/basic_string.h **** 	      { }
3307:/usr/include/c++/6/bits/basic_string.h **** 	  }
3308:/usr/include/c++/6/bits/basic_string.h **** #endif
3309:/usr/include/c++/6/bits/basic_string.h ****       }
3310:/usr/include/c++/6/bits/basic_string.h **** #endif
3311:/usr/include/c++/6/bits/basic_string.h **** 
3312:/usr/include/c++/6/bits/basic_string.h ****       /**
3313:/usr/include/c++/6/bits/basic_string.h ****        *  Returns the total number of characters that the %string can hold
3314:/usr/include/c++/6/bits/basic_string.h ****        *  before needing to allocate more memory.
3315:/usr/include/c++/6/bits/basic_string.h ****        */
3316:/usr/include/c++/6/bits/basic_string.h ****       size_type
3317:/usr/include/c++/6/bits/basic_string.h ****       capacity() const _GLIBCXX_NOEXCEPT
3318:/usr/include/c++/6/bits/basic_string.h ****       { return _M_rep()->_M_capacity; }
GAS LISTING /tmp/ccvmoMuv.s 			page 367


3319:/usr/include/c++/6/bits/basic_string.h **** 
3320:/usr/include/c++/6/bits/basic_string.h ****       /**
3321:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
3322:/usr/include/c++/6/bits/basic_string.h ****        *          characters.
3323:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __res_arg  Number of characters required.
3324:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If @a __res_arg exceeds @c max_size().
3325:/usr/include/c++/6/bits/basic_string.h ****        *
3326:/usr/include/c++/6/bits/basic_string.h ****        *  This function attempts to reserve enough memory for the
3327:/usr/include/c++/6/bits/basic_string.h ****        *  %string to hold the specified number of characters.  If the
3328:/usr/include/c++/6/bits/basic_string.h ****        *  number requested is more than max_size(), length_error is
3329:/usr/include/c++/6/bits/basic_string.h ****        *  thrown.
3330:/usr/include/c++/6/bits/basic_string.h ****        *
3331:/usr/include/c++/6/bits/basic_string.h ****        *  The advantage of this function is that if optimal code is a
3332:/usr/include/c++/6/bits/basic_string.h ****        *  necessity and the user can determine the string length that will be
3333:/usr/include/c++/6/bits/basic_string.h ****        *  required, the user can reserve the memory in %advance, and thus
3334:/usr/include/c++/6/bits/basic_string.h ****        *  prevent a possible reallocation of memory and copying of %string
3335:/usr/include/c++/6/bits/basic_string.h ****        *  data.
3336:/usr/include/c++/6/bits/basic_string.h ****        */
3337:/usr/include/c++/6/bits/basic_string.h ****       void
3338:/usr/include/c++/6/bits/basic_string.h ****       reserve(size_type __res_arg = 0);
3339:/usr/include/c++/6/bits/basic_string.h **** 
3340:/usr/include/c++/6/bits/basic_string.h ****       /**
3341:/usr/include/c++/6/bits/basic_string.h ****        *  Erases the string, making it empty.
3342:/usr/include/c++/6/bits/basic_string.h ****        */
3343:/usr/include/c++/6/bits/basic_string.h ****       // PR 56166: this should not throw.
3344:/usr/include/c++/6/bits/basic_string.h ****       void
3345:/usr/include/c++/6/bits/basic_string.h ****       clear()
3346:/usr/include/c++/6/bits/basic_string.h ****       { _M_mutate(0, this->size(), 0); }
3347:/usr/include/c++/6/bits/basic_string.h **** 
3348:/usr/include/c++/6/bits/basic_string.h ****       /**
3349:/usr/include/c++/6/bits/basic_string.h ****        *  Returns true if the %string is empty.  Equivalent to 
3350:/usr/include/c++/6/bits/basic_string.h ****        *  <code>*this == ""</code>.
3351:/usr/include/c++/6/bits/basic_string.h ****        */
3352:/usr/include/c++/6/bits/basic_string.h ****       bool
3353:/usr/include/c++/6/bits/basic_string.h ****       empty() const _GLIBCXX_NOEXCEPT
3354:/usr/include/c++/6/bits/basic_string.h ****       { return this->size() == 0; }
3355:/usr/include/c++/6/bits/basic_string.h **** 
3356:/usr/include/c++/6/bits/basic_string.h ****       // Element access:
3357:/usr/include/c++/6/bits/basic_string.h ****       /**
3358:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
3359:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
3360:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Read-only (constant) reference to the character.
3361:/usr/include/c++/6/bits/basic_string.h ****        *
3362:/usr/include/c++/6/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
3363:/usr/include/c++/6/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
3364:/usr/include/c++/6/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
3365:/usr/include/c++/6/bits/basic_string.h ****        *  see at().)
3366:/usr/include/c++/6/bits/basic_string.h ****        */
3367:/usr/include/c++/6/bits/basic_string.h ****       const_reference
3368:/usr/include/c++/6/bits/basic_string.h ****       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
3369:/usr/include/c++/6/bits/basic_string.h ****       {
3370:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
3371:/usr/include/c++/6/bits/basic_string.h **** 	return _M_data()[__pos];
3372:/usr/include/c++/6/bits/basic_string.h ****       }
3373:/usr/include/c++/6/bits/basic_string.h **** 
3374:/usr/include/c++/6/bits/basic_string.h ****       /**
3375:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
GAS LISTING /tmp/ccvmoMuv.s 			page 368


3376:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
3377:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Read/write reference to the character.
3378:/usr/include/c++/6/bits/basic_string.h ****        *
3379:/usr/include/c++/6/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
3380:/usr/include/c++/6/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
3381:/usr/include/c++/6/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
3382:/usr/include/c++/6/bits/basic_string.h ****        *  see at().)  Unshares the string.
3383:/usr/include/c++/6/bits/basic_string.h ****        */
3384:/usr/include/c++/6/bits/basic_string.h ****       reference
3385:/usr/include/c++/6/bits/basic_string.h ****       operator[](size_type __pos)
3386:/usr/include/c++/6/bits/basic_string.h ****       {
3387:/usr/include/c++/6/bits/basic_string.h ****         // Allow pos == size() both in C++98 mode, as v3 extension,
3388:/usr/include/c++/6/bits/basic_string.h **** 	// and in C++11 mode.
3389:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
3390:/usr/include/c++/6/bits/basic_string.h ****         // In pedantic mode be strict in C++98 mode.
3391:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());
3392:/usr/include/c++/6/bits/basic_string.h **** 	_M_leak();
3393:/usr/include/c++/6/bits/basic_string.h **** 	return _M_data()[__pos];
3394:/usr/include/c++/6/bits/basic_string.h ****       }
3395:/usr/include/c++/6/bits/basic_string.h **** 
3396:/usr/include/c++/6/bits/basic_string.h ****       /**
3397:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
3398:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n The index of the character to access.
3399:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Read-only (const) reference to the character.
3400:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
3401:/usr/include/c++/6/bits/basic_string.h ****        *
3402:/usr/include/c++/6/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
3403:/usr/include/c++/6/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
3404:/usr/include/c++/6/bits/basic_string.h ****        *  throws out_of_range if the check fails.
3405:/usr/include/c++/6/bits/basic_string.h ****        */
3406:/usr/include/c++/6/bits/basic_string.h ****       const_reference
3407:/usr/include/c++/6/bits/basic_string.h ****       at(size_type __n) const
3408:/usr/include/c++/6/bits/basic_string.h ****       {
3409:/usr/include/c++/6/bits/basic_string.h **** 	if (__n >= this->size())
3410:/usr/include/c++/6/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
3411:/usr/include/c++/6/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
3412:/usr/include/c++/6/bits/basic_string.h **** 				       "(which is %zu)"),
3413:/usr/include/c++/6/bits/basic_string.h **** 				   __n, this->size());
3414:/usr/include/c++/6/bits/basic_string.h **** 	return _M_data()[__n];
3415:/usr/include/c++/6/bits/basic_string.h ****       }
3416:/usr/include/c++/6/bits/basic_string.h **** 
3417:/usr/include/c++/6/bits/basic_string.h ****       /**
3418:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
3419:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n The index of the character to access.
3420:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Read/write reference to the character.
3421:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
3422:/usr/include/c++/6/bits/basic_string.h ****        *
3423:/usr/include/c++/6/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
3424:/usr/include/c++/6/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
3425:/usr/include/c++/6/bits/basic_string.h ****        *  throws out_of_range if the check fails.  Success results in
3426:/usr/include/c++/6/bits/basic_string.h ****        *  unsharing the string.
3427:/usr/include/c++/6/bits/basic_string.h ****        */
3428:/usr/include/c++/6/bits/basic_string.h ****       reference
3429:/usr/include/c++/6/bits/basic_string.h ****       at(size_type __n)
3430:/usr/include/c++/6/bits/basic_string.h ****       {
3431:/usr/include/c++/6/bits/basic_string.h **** 	if (__n >= size())
3432:/usr/include/c++/6/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
GAS LISTING /tmp/ccvmoMuv.s 			page 369


3433:/usr/include/c++/6/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
3434:/usr/include/c++/6/bits/basic_string.h **** 				       "(which is %zu)"),
3435:/usr/include/c++/6/bits/basic_string.h **** 				   __n, this->size());
3436:/usr/include/c++/6/bits/basic_string.h **** 	_M_leak();
3437:/usr/include/c++/6/bits/basic_string.h **** 	return _M_data()[__n];
3438:/usr/include/c++/6/bits/basic_string.h ****       }
3439:/usr/include/c++/6/bits/basic_string.h **** 
3440:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
3441:/usr/include/c++/6/bits/basic_string.h ****       /**
3442:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read/write reference to the data at the first
3443:/usr/include/c++/6/bits/basic_string.h ****        *  element of the %string.
3444:/usr/include/c++/6/bits/basic_string.h ****        */
3445:/usr/include/c++/6/bits/basic_string.h ****       reference
3446:/usr/include/c++/6/bits/basic_string.h ****       front()
3447:/usr/include/c++/6/bits/basic_string.h ****       {
3448:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_assert(!empty());
3449:/usr/include/c++/6/bits/basic_string.h **** 	return operator[](0);
3450:/usr/include/c++/6/bits/basic_string.h ****       }
3451:/usr/include/c++/6/bits/basic_string.h **** 
3452:/usr/include/c++/6/bits/basic_string.h ****       /**
3453:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the first
3454:/usr/include/c++/6/bits/basic_string.h ****        *  element of the %string.
3455:/usr/include/c++/6/bits/basic_string.h ****        */
3456:/usr/include/c++/6/bits/basic_string.h ****       const_reference
3457:/usr/include/c++/6/bits/basic_string.h ****       front() const noexcept
3458:/usr/include/c++/6/bits/basic_string.h ****       {
3459:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_assert(!empty());
3460:/usr/include/c++/6/bits/basic_string.h **** 	return operator[](0);
3461:/usr/include/c++/6/bits/basic_string.h ****       }
3462:/usr/include/c++/6/bits/basic_string.h **** 
3463:/usr/include/c++/6/bits/basic_string.h ****       /**
3464:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read/write reference to the data at the last
3465:/usr/include/c++/6/bits/basic_string.h ****        *  element of the %string.
3466:/usr/include/c++/6/bits/basic_string.h ****        */
3467:/usr/include/c++/6/bits/basic_string.h ****       reference
3468:/usr/include/c++/6/bits/basic_string.h ****       back()
3469:/usr/include/c++/6/bits/basic_string.h ****       {
3470:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_assert(!empty());
3471:/usr/include/c++/6/bits/basic_string.h **** 	return operator[](this->size() - 1);
3472:/usr/include/c++/6/bits/basic_string.h ****       }
3473:/usr/include/c++/6/bits/basic_string.h **** 
3474:/usr/include/c++/6/bits/basic_string.h ****       /**
3475:/usr/include/c++/6/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the
3476:/usr/include/c++/6/bits/basic_string.h ****        *  last element of the %string.
3477:/usr/include/c++/6/bits/basic_string.h ****        */
3478:/usr/include/c++/6/bits/basic_string.h ****       const_reference
3479:/usr/include/c++/6/bits/basic_string.h ****       back() const noexcept
3480:/usr/include/c++/6/bits/basic_string.h ****       {
3481:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_assert(!empty());
3482:/usr/include/c++/6/bits/basic_string.h **** 	return operator[](this->size() - 1);
3483:/usr/include/c++/6/bits/basic_string.h ****       }
3484:/usr/include/c++/6/bits/basic_string.h **** #endif
3485:/usr/include/c++/6/bits/basic_string.h **** 
3486:/usr/include/c++/6/bits/basic_string.h ****       // Modifiers:
3487:/usr/include/c++/6/bits/basic_string.h ****       /**
3488:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Append a string to this string.
3489:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  The string to append.
GAS LISTING /tmp/ccvmoMuv.s 			page 370


3490:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3491:/usr/include/c++/6/bits/basic_string.h ****        */
3492:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3493:/usr/include/c++/6/bits/basic_string.h ****       operator+=(const basic_string& __str)
3494:/usr/include/c++/6/bits/basic_string.h ****       { return this->append(__str); }
3495:/usr/include/c++/6/bits/basic_string.h **** 
3496:/usr/include/c++/6/bits/basic_string.h ****       /**
3497:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Append a C string.
3498:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  The C string to append.
3499:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3500:/usr/include/c++/6/bits/basic_string.h ****        */
3501:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3502:/usr/include/c++/6/bits/basic_string.h ****       operator+=(const _CharT* __s)
3503:/usr/include/c++/6/bits/basic_string.h ****       { return this->append(__s); }
3504:/usr/include/c++/6/bits/basic_string.h **** 
3505:/usr/include/c++/6/bits/basic_string.h ****       /**
3506:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Append a character.
3507:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  The character to append.
3508:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3509:/usr/include/c++/6/bits/basic_string.h ****        */
3510:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3511:/usr/include/c++/6/bits/basic_string.h ****       operator+=(_CharT __c)
3512:/usr/include/c++/6/bits/basic_string.h ****       { 
3513:/usr/include/c++/6/bits/basic_string.h **** 	this->push_back(__c);
3514:/usr/include/c++/6/bits/basic_string.h **** 	return *this;
3515:/usr/include/c++/6/bits/basic_string.h ****       }
3516:/usr/include/c++/6/bits/basic_string.h **** 
3517:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
3518:/usr/include/c++/6/bits/basic_string.h ****       /**
3519:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
3520:/usr/include/c++/6/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to be appended.
3521:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3522:/usr/include/c++/6/bits/basic_string.h ****        */
3523:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3524:/usr/include/c++/6/bits/basic_string.h ****       operator+=(initializer_list<_CharT> __l)
3525:/usr/include/c++/6/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
3526:/usr/include/c++/6/bits/basic_string.h **** #endif // C++11
3527:/usr/include/c++/6/bits/basic_string.h **** 
3528:/usr/include/c++/6/bits/basic_string.h ****       /**
3529:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Append a string to this string.
3530:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  The string to append.
3531:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3532:/usr/include/c++/6/bits/basic_string.h ****        */
3533:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3534:/usr/include/c++/6/bits/basic_string.h ****       append(const basic_string& __str);
3535:/usr/include/c++/6/bits/basic_string.h **** 
3536:/usr/include/c++/6/bits/basic_string.h ****       /**
3537:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Append a substring.
3538:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  The string to append.
3539:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of the first character of str to append.
3540:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  The number of characters to append.
3541:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3542:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range if @a __pos is not a valid index.
3543:/usr/include/c++/6/bits/basic_string.h ****        *
3544:/usr/include/c++/6/bits/basic_string.h ****        *  This function appends @a __n characters from @a __str
3545:/usr/include/c++/6/bits/basic_string.h ****        *  starting at @a __pos to this string.  If @a __n is is larger
3546:/usr/include/c++/6/bits/basic_string.h ****        *  than the number of available characters in @a __str, the
GAS LISTING /tmp/ccvmoMuv.s 			page 371


3547:/usr/include/c++/6/bits/basic_string.h ****        *  remainder of @a __str is appended.
3548:/usr/include/c++/6/bits/basic_string.h ****        */
3549:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3550:/usr/include/c++/6/bits/basic_string.h ****       append(const basic_string& __str, size_type __pos, size_type __n);
3551:/usr/include/c++/6/bits/basic_string.h **** 
3552:/usr/include/c++/6/bits/basic_string.h ****       /**
3553:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Append a C substring.
3554:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  The C string to append.
3555:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  The number of characters to append.
3556:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3557:/usr/include/c++/6/bits/basic_string.h ****        */
3558:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3559:/usr/include/c++/6/bits/basic_string.h ****       append(const _CharT* __s, size_type __n);
3560:/usr/include/c++/6/bits/basic_string.h **** 
3561:/usr/include/c++/6/bits/basic_string.h ****       /**
3562:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Append a C string.
3563:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  The C string to append.
3564:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3565:/usr/include/c++/6/bits/basic_string.h ****        */
3566:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3567:/usr/include/c++/6/bits/basic_string.h ****       append(const _CharT* __s)
3568:/usr/include/c++/6/bits/basic_string.h ****       {
3569:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
3570:/usr/include/c++/6/bits/basic_string.h **** 	return this->append(__s, traits_type::length(__s));
3571:/usr/include/c++/6/bits/basic_string.h ****       }
3572:/usr/include/c++/6/bits/basic_string.h **** 
3573:/usr/include/c++/6/bits/basic_string.h ****       /**
3574:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Append multiple characters.
3575:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  The number of characters to append.
3576:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  The character to use.
3577:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3578:/usr/include/c++/6/bits/basic_string.h ****        *
3579:/usr/include/c++/6/bits/basic_string.h ****        *  Appends __n copies of __c to this string.
3580:/usr/include/c++/6/bits/basic_string.h ****        */
3581:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3582:/usr/include/c++/6/bits/basic_string.h ****       append(size_type __n, _CharT __c);
3583:/usr/include/c++/6/bits/basic_string.h **** 
3584:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
3585:/usr/include/c++/6/bits/basic_string.h ****       /**
3586:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
3587:/usr/include/c++/6/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to append.
3588:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3589:/usr/include/c++/6/bits/basic_string.h ****        */
3590:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3591:/usr/include/c++/6/bits/basic_string.h ****       append(initializer_list<_CharT> __l)
3592:/usr/include/c++/6/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
3593:/usr/include/c++/6/bits/basic_string.h **** #endif // C++11
3594:/usr/include/c++/6/bits/basic_string.h **** 
3595:/usr/include/c++/6/bits/basic_string.h ****       /**
3596:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Append a range of characters.
3597:/usr/include/c++/6/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
3598:/usr/include/c++/6/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
3599:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3600:/usr/include/c++/6/bits/basic_string.h ****        *
3601:/usr/include/c++/6/bits/basic_string.h ****        *  Appends characters in the range [__first,__last) to this string.
3602:/usr/include/c++/6/bits/basic_string.h ****        */
3603:/usr/include/c++/6/bits/basic_string.h ****       template<class _InputIterator>
GAS LISTING /tmp/ccvmoMuv.s 			page 372


3604:/usr/include/c++/6/bits/basic_string.h ****         basic_string&
3605:/usr/include/c++/6/bits/basic_string.h ****         append(_InputIterator __first, _InputIterator __last)
3606:/usr/include/c++/6/bits/basic_string.h ****         { return this->replace(_M_iend(), _M_iend(), __first, __last); }
3607:/usr/include/c++/6/bits/basic_string.h **** 
3608:/usr/include/c++/6/bits/basic_string.h ****       /**
3609:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Append a single character.
3610:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  Character to append.
3611:/usr/include/c++/6/bits/basic_string.h ****        */
3612:/usr/include/c++/6/bits/basic_string.h ****       void
3613:/usr/include/c++/6/bits/basic_string.h ****       push_back(_CharT __c)
3614:/usr/include/c++/6/bits/basic_string.h ****       { 
3615:/usr/include/c++/6/bits/basic_string.h **** 	const size_type __len = 1 + this->size();
3616:/usr/include/c++/6/bits/basic_string.h **** 	if (__len > this->capacity() || _M_rep()->_M_is_shared())
3617:/usr/include/c++/6/bits/basic_string.h **** 	  this->reserve(__len);
3618:/usr/include/c++/6/bits/basic_string.h **** 	traits_type::assign(_M_data()[this->size()], __c);
3619:/usr/include/c++/6/bits/basic_string.h **** 	_M_rep()->_M_set_length_and_sharable(__len);
3620:/usr/include/c++/6/bits/basic_string.h ****       }
3621:/usr/include/c++/6/bits/basic_string.h **** 
3622:/usr/include/c++/6/bits/basic_string.h ****       /**
3623:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
3624:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __str  Source string to use.
3625:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3626:/usr/include/c++/6/bits/basic_string.h ****        */
3627:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3628:/usr/include/c++/6/bits/basic_string.h ****       assign(const basic_string& __str);
3629:/usr/include/c++/6/bits/basic_string.h **** 
3630:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
3631:/usr/include/c++/6/bits/basic_string.h ****       /**
3632:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
3633:/usr/include/c++/6/bits/basic_string.h ****        *  @param  __str  Source string to use.
3634:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3635:/usr/include/c++/6/bits/basic_string.h ****        *
3636:/usr/include/c++/6/bits/basic_string.h ****        *  This function sets this string to the exact contents of @a __str.
3637:/usr/include/c++/6/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
3638:/usr/include/c++/6/bits/basic_string.h ****        */
3639:/usr/include/c++/6/bits/basic_string.h ****       // PR 58265, this should be noexcept.
3640:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3641:/usr/include/c++/6/bits/basic_string.h ****       assign(basic_string&& __str)
3642:/usr/include/c++/6/bits/basic_string.h ****       {
3643:/usr/include/c++/6/bits/basic_string.h **** 	this->swap(__str);
3644:/usr/include/c++/6/bits/basic_string.h **** 	return *this;
3645:/usr/include/c++/6/bits/basic_string.h ****       }
3646:/usr/include/c++/6/bits/basic_string.h **** #endif // C++11
3647:/usr/include/c++/6/bits/basic_string.h **** 
3648:/usr/include/c++/6/bits/basic_string.h ****       /**
3649:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Set value to a substring of a string.
3650:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  The string to use.
3651:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of the first character of str.
3652:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters to use.
3653:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3654:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range if @a pos is not a valid index.
3655:/usr/include/c++/6/bits/basic_string.h ****        *
3656:/usr/include/c++/6/bits/basic_string.h ****        *  This function sets this string to the substring of @a __str
3657:/usr/include/c++/6/bits/basic_string.h ****        *  consisting of @a __n characters at @a __pos.  If @a __n is
3658:/usr/include/c++/6/bits/basic_string.h ****        *  is larger than the number of available characters in @a
3659:/usr/include/c++/6/bits/basic_string.h ****        *  __str, the remainder of @a __str is used.
3660:/usr/include/c++/6/bits/basic_string.h ****        */
GAS LISTING /tmp/ccvmoMuv.s 			page 373


3661:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3662:/usr/include/c++/6/bits/basic_string.h ****       assign(const basic_string& __str, size_type __pos, size_type __n)
3663:/usr/include/c++/6/bits/basic_string.h ****       { return this->assign(__str._M_data()
3664:/usr/include/c++/6/bits/basic_string.h **** 			    + __str._M_check(__pos, "basic_string::assign"),
3665:/usr/include/c++/6/bits/basic_string.h **** 			    __str._M_limit(__pos, __n)); }
3666:/usr/include/c++/6/bits/basic_string.h **** 
3667:/usr/include/c++/6/bits/basic_string.h ****       /**
3668:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Set value to a C substring.
3669:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  The C string to use.
3670:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters to use.
3671:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3672:/usr/include/c++/6/bits/basic_string.h ****        *
3673:/usr/include/c++/6/bits/basic_string.h ****        *  This function sets the value of this string to the first @a __n
3674:/usr/include/c++/6/bits/basic_string.h ****        *  characters of @a __s.  If @a __n is is larger than the number of
3675:/usr/include/c++/6/bits/basic_string.h ****        *  available characters in @a __s, the remainder of @a __s is used.
3676:/usr/include/c++/6/bits/basic_string.h ****        */
3677:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3678:/usr/include/c++/6/bits/basic_string.h ****       assign(const _CharT* __s, size_type __n);
3679:/usr/include/c++/6/bits/basic_string.h **** 
3680:/usr/include/c++/6/bits/basic_string.h ****       /**
3681:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Set value to contents of a C string.
3682:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  The C string to use.
3683:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3684:/usr/include/c++/6/bits/basic_string.h ****        *
3685:/usr/include/c++/6/bits/basic_string.h ****        *  This function sets the value of this string to the value of @a __s.
3686:/usr/include/c++/6/bits/basic_string.h ****        *  The data is copied, so there is no dependence on @a __s once the
3687:/usr/include/c++/6/bits/basic_string.h ****        *  function returns.
3688:/usr/include/c++/6/bits/basic_string.h ****        */
3689:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3690:/usr/include/c++/6/bits/basic_string.h ****       assign(const _CharT* __s)
3691:/usr/include/c++/6/bits/basic_string.h ****       {
3692:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
3693:/usr/include/c++/6/bits/basic_string.h **** 	return this->assign(__s, traits_type::length(__s));
3694:/usr/include/c++/6/bits/basic_string.h ****       }
3695:/usr/include/c++/6/bits/basic_string.h **** 
3696:/usr/include/c++/6/bits/basic_string.h ****       /**
3697:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Set value to multiple characters.
3698:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Length of the resulting string.
3699:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  The character to use.
3700:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3701:/usr/include/c++/6/bits/basic_string.h ****        *
3702:/usr/include/c++/6/bits/basic_string.h ****        *  This function sets the value of this string to @a __n copies of
3703:/usr/include/c++/6/bits/basic_string.h ****        *  character @a __c.
3704:/usr/include/c++/6/bits/basic_string.h ****        */
3705:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3706:/usr/include/c++/6/bits/basic_string.h ****       assign(size_type __n, _CharT __c)
3707:/usr/include/c++/6/bits/basic_string.h ****       { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
3708:/usr/include/c++/6/bits/basic_string.h **** 
3709:/usr/include/c++/6/bits/basic_string.h ****       /**
3710:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Set value to a range of characters.
3711:/usr/include/c++/6/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
3712:/usr/include/c++/6/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
3713:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3714:/usr/include/c++/6/bits/basic_string.h ****        *
3715:/usr/include/c++/6/bits/basic_string.h ****        *  Sets value of string to characters in the range [__first,__last).
3716:/usr/include/c++/6/bits/basic_string.h ****       */
3717:/usr/include/c++/6/bits/basic_string.h ****       template<class _InputIterator>
GAS LISTING /tmp/ccvmoMuv.s 			page 374


3718:/usr/include/c++/6/bits/basic_string.h ****         basic_string&
3719:/usr/include/c++/6/bits/basic_string.h ****         assign(_InputIterator __first, _InputIterator __last)
3720:/usr/include/c++/6/bits/basic_string.h ****         { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }
3721:/usr/include/c++/6/bits/basic_string.h **** 
3722:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
3723:/usr/include/c++/6/bits/basic_string.h ****       /**
3724:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Set value to an initializer_list of characters.
3725:/usr/include/c++/6/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to assign.
3726:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3727:/usr/include/c++/6/bits/basic_string.h ****        */
3728:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3729:/usr/include/c++/6/bits/basic_string.h ****       assign(initializer_list<_CharT> __l)
3730:/usr/include/c++/6/bits/basic_string.h ****       { return this->assign(__l.begin(), __l.size()); }
3731:/usr/include/c++/6/bits/basic_string.h **** #endif // C++11
3732:/usr/include/c++/6/bits/basic_string.h **** 
3733:/usr/include/c++/6/bits/basic_string.h ****       /**
3734:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Insert multiple characters.
3735:/usr/include/c++/6/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
3736:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters to insert
3737:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  The character to insert.
3738:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3739:/usr/include/c++/6/bits/basic_string.h ****        *
3740:/usr/include/c++/6/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
3741:/usr/include/c++/6/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
3742:/usr/include/c++/6/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
3743:/usr/include/c++/6/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
3744:/usr/include/c++/6/bits/basic_string.h ****        *  change if an error is thrown.
3745:/usr/include/c++/6/bits/basic_string.h ****       */
3746:/usr/include/c++/6/bits/basic_string.h ****       void
3747:/usr/include/c++/6/bits/basic_string.h ****       insert(iterator __p, size_type __n, _CharT __c)
3748:/usr/include/c++/6/bits/basic_string.h ****       {	this->replace(__p, __p, __n, __c);  }
3749:/usr/include/c++/6/bits/basic_string.h **** 
3750:/usr/include/c++/6/bits/basic_string.h ****       /**
3751:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Insert a range of characters.
3752:/usr/include/c++/6/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
3753:/usr/include/c++/6/bits/basic_string.h ****        *  @param __beg  Start of range.
3754:/usr/include/c++/6/bits/basic_string.h ****        *  @param __end  End of range.
3755:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3756:/usr/include/c++/6/bits/basic_string.h ****        *
3757:/usr/include/c++/6/bits/basic_string.h ****        *  Inserts characters in range [__beg,__end).  If adding
3758:/usr/include/c++/6/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
3759:/usr/include/c++/6/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
3760:/usr/include/c++/6/bits/basic_string.h ****        *  change if an error is thrown.
3761:/usr/include/c++/6/bits/basic_string.h ****       */
3762:/usr/include/c++/6/bits/basic_string.h ****       template<class _InputIterator>
3763:/usr/include/c++/6/bits/basic_string.h ****         void
3764:/usr/include/c++/6/bits/basic_string.h ****         insert(iterator __p, _InputIterator __beg, _InputIterator __end)
3765:/usr/include/c++/6/bits/basic_string.h ****         { this->replace(__p, __p, __beg, __end); }
3766:/usr/include/c++/6/bits/basic_string.h **** 
3767:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
3768:/usr/include/c++/6/bits/basic_string.h ****       /**
3769:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Insert an initializer_list of characters.
3770:/usr/include/c++/6/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
3771:/usr/include/c++/6/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
3772:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3773:/usr/include/c++/6/bits/basic_string.h ****        */
3774:/usr/include/c++/6/bits/basic_string.h ****       void
GAS LISTING /tmp/ccvmoMuv.s 			page 375


3775:/usr/include/c++/6/bits/basic_string.h ****       insert(iterator __p, initializer_list<_CharT> __l)
3776:/usr/include/c++/6/bits/basic_string.h ****       {
3777:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());
3778:/usr/include/c++/6/bits/basic_string.h **** 	this->insert(__p - _M_ibegin(), __l.begin(), __l.size());
3779:/usr/include/c++/6/bits/basic_string.h ****       }
3780:/usr/include/c++/6/bits/basic_string.h **** #endif // C++11
3781:/usr/include/c++/6/bits/basic_string.h **** 
3782:/usr/include/c++/6/bits/basic_string.h ****       /**
3783:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Insert value of a string.
3784:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
3785:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  The string to insert.
3786:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3787:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3788:/usr/include/c++/6/bits/basic_string.h ****        *
3789:/usr/include/c++/6/bits/basic_string.h ****        *  Inserts value of @a __str starting at @a __pos1.  If adding
3790:/usr/include/c++/6/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
3791:/usr/include/c++/6/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
3792:/usr/include/c++/6/bits/basic_string.h ****        *  change if an error is thrown.
3793:/usr/include/c++/6/bits/basic_string.h ****       */
3794:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3795:/usr/include/c++/6/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str)
3796:/usr/include/c++/6/bits/basic_string.h ****       { return this->insert(__pos1, __str, size_type(0), __str.size()); }
3797:/usr/include/c++/6/bits/basic_string.h **** 
3798:/usr/include/c++/6/bits/basic_string.h ****       /**
3799:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Insert a substring.
3800:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
3801:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  The string to insert.
3802:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
3803:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
3804:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3805:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3806:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size() or
3807:/usr/include/c++/6/bits/basic_string.h ****        *  @a __pos2 > @a str.size().
3808:/usr/include/c++/6/bits/basic_string.h ****        *
3809:/usr/include/c++/6/bits/basic_string.h ****        *  Starting at @a pos1, insert @a __n character of @a __str
3810:/usr/include/c++/6/bits/basic_string.h ****        *  beginning with @a __pos2.  If adding characters causes the
3811:/usr/include/c++/6/bits/basic_string.h ****        *  length to exceed max_size(), length_error is thrown.  If @a
3812:/usr/include/c++/6/bits/basic_string.h ****        *  __pos1 is beyond the end of this string or @a __pos2 is
3813:/usr/include/c++/6/bits/basic_string.h ****        *  beyond the end of @a __str, out_of_range is thrown.  The
3814:/usr/include/c++/6/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
3815:/usr/include/c++/6/bits/basic_string.h ****       */
3816:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3817:/usr/include/c++/6/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str,
3818:/usr/include/c++/6/bits/basic_string.h **** 	     size_type __pos2, size_type __n)
3819:/usr/include/c++/6/bits/basic_string.h ****       { return this->insert(__pos1, __str._M_data()
3820:/usr/include/c++/6/bits/basic_string.h **** 			    + __str._M_check(__pos2, "basic_string::insert"),
3821:/usr/include/c++/6/bits/basic_string.h **** 			    __str._M_limit(__pos2, __n)); }
3822:/usr/include/c++/6/bits/basic_string.h **** 
3823:/usr/include/c++/6/bits/basic_string.h ****       /**
3824:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Insert a C substring.
3825:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
3826:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  The C string to insert.
3827:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  The number of characters to insert.
3828:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3829:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3830:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
3831:/usr/include/c++/6/bits/basic_string.h ****        *  string.
GAS LISTING /tmp/ccvmoMuv.s 			page 376


3832:/usr/include/c++/6/bits/basic_string.h ****        *
3833:/usr/include/c++/6/bits/basic_string.h ****        *  Inserts the first @a __n characters of @a __s starting at @a
3834:/usr/include/c++/6/bits/basic_string.h ****        *  __pos.  If adding characters causes the length to exceed
3835:/usr/include/c++/6/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos is beyond
3836:/usr/include/c++/6/bits/basic_string.h ****        *  end(), out_of_range is thrown.  The value of the string
3837:/usr/include/c++/6/bits/basic_string.h ****        *  doesn't change if an error is thrown.
3838:/usr/include/c++/6/bits/basic_string.h ****       */
3839:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3840:/usr/include/c++/6/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s, size_type __n);
3841:/usr/include/c++/6/bits/basic_string.h **** 
3842:/usr/include/c++/6/bits/basic_string.h ****       /**
3843:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Insert a C string.
3844:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
3845:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  The C string to insert.
3846:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3847:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3848:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
3849:/usr/include/c++/6/bits/basic_string.h ****        *  string.
3850:/usr/include/c++/6/bits/basic_string.h ****        *
3851:/usr/include/c++/6/bits/basic_string.h ****        *  Inserts the first @a n characters of @a __s starting at @a __pos.  If
3852:/usr/include/c++/6/bits/basic_string.h ****        *  adding characters causes the length to exceed max_size(),
3853:/usr/include/c++/6/bits/basic_string.h ****        *  length_error is thrown.  If @a __pos is beyond end(), out_of_range is
3854:/usr/include/c++/6/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error is
3855:/usr/include/c++/6/bits/basic_string.h ****        *  thrown.
3856:/usr/include/c++/6/bits/basic_string.h ****       */
3857:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3858:/usr/include/c++/6/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s)
3859:/usr/include/c++/6/bits/basic_string.h ****       {
3860:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
3861:/usr/include/c++/6/bits/basic_string.h **** 	return this->insert(__pos, __s, traits_type::length(__s));
3862:/usr/include/c++/6/bits/basic_string.h ****       }
3863:/usr/include/c++/6/bits/basic_string.h **** 
3864:/usr/include/c++/6/bits/basic_string.h ****       /**
3865:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Insert multiple characters.
3866:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index in string to insert at.
3867:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters to insert
3868:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  The character to insert.
3869:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3870:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3871:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
3872:/usr/include/c++/6/bits/basic_string.h ****        *  string.
3873:/usr/include/c++/6/bits/basic_string.h ****        *
3874:/usr/include/c++/6/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at index
3875:/usr/include/c++/6/bits/basic_string.h ****        *  @a __pos.  If adding characters causes the length to exceed
3876:/usr/include/c++/6/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos > length(),
3877:/usr/include/c++/6/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
3878:/usr/include/c++/6/bits/basic_string.h ****        *  change if an error is thrown.
3879:/usr/include/c++/6/bits/basic_string.h ****       */
3880:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3881:/usr/include/c++/6/bits/basic_string.h ****       insert(size_type __pos, size_type __n, _CharT __c)
3882:/usr/include/c++/6/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
3883:/usr/include/c++/6/bits/basic_string.h **** 			      size_type(0), __n, __c); }
3884:/usr/include/c++/6/bits/basic_string.h **** 
3885:/usr/include/c++/6/bits/basic_string.h ****       /**
3886:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Insert one character.
3887:/usr/include/c++/6/bits/basic_string.h ****        *  @param __p  Iterator referencing position in string to insert at.
3888:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  The character to insert.
GAS LISTING /tmp/ccvmoMuv.s 			page 377


3889:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Iterator referencing newly inserted char.
3890:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3891:/usr/include/c++/6/bits/basic_string.h ****        *
3892:/usr/include/c++/6/bits/basic_string.h ****        *  Inserts character @a __c at position referenced by @a __p.
3893:/usr/include/c++/6/bits/basic_string.h ****        *  If adding character causes the length to exceed max_size(),
3894:/usr/include/c++/6/bits/basic_string.h ****        *  length_error is thrown.  If @a __p is beyond end of string,
3895:/usr/include/c++/6/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
3896:/usr/include/c++/6/bits/basic_string.h ****        *  change if an error is thrown.
3897:/usr/include/c++/6/bits/basic_string.h ****       */
3898:/usr/include/c++/6/bits/basic_string.h ****       iterator
3899:/usr/include/c++/6/bits/basic_string.h ****       insert(iterator __p, _CharT __c)
3900:/usr/include/c++/6/bits/basic_string.h ****       {
3901:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());
3902:/usr/include/c++/6/bits/basic_string.h **** 	const size_type __pos = __p - _M_ibegin();
3903:/usr/include/c++/6/bits/basic_string.h **** 	_M_replace_aux(__pos, size_type(0), size_type(1), __c);
3904:/usr/include/c++/6/bits/basic_string.h **** 	_M_rep()->_M_set_leaked();
3905:/usr/include/c++/6/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
3906:/usr/include/c++/6/bits/basic_string.h ****       }
3907:/usr/include/c++/6/bits/basic_string.h **** 
3908:/usr/include/c++/6/bits/basic_string.h ****       /**
3909:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Remove characters.
3910:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of first character to remove (default 0).
3911:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters to remove (default remainder).
3912:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3913:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
3914:/usr/include/c++/6/bits/basic_string.h ****        *  string.
3915:/usr/include/c++/6/bits/basic_string.h ****        *
3916:/usr/include/c++/6/bits/basic_string.h ****        *  Removes @a __n characters from this string starting at @a
3917:/usr/include/c++/6/bits/basic_string.h ****        *  __pos.  The length of the string is reduced by @a __n.  If
3918:/usr/include/c++/6/bits/basic_string.h ****        *  there are < @a __n characters to remove, the remainder of
3919:/usr/include/c++/6/bits/basic_string.h ****        *  the string is truncated.  If @a __p is beyond end of string,
3920:/usr/include/c++/6/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
3921:/usr/include/c++/6/bits/basic_string.h ****        *  change if an error is thrown.
3922:/usr/include/c++/6/bits/basic_string.h ****       */
3923:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3924:/usr/include/c++/6/bits/basic_string.h ****       erase(size_type __pos = 0, size_type __n = npos)
3925:/usr/include/c++/6/bits/basic_string.h ****       { 
3926:/usr/include/c++/6/bits/basic_string.h **** 	_M_mutate(_M_check(__pos, "basic_string::erase"),
3927:/usr/include/c++/6/bits/basic_string.h **** 		  _M_limit(__pos, __n), size_type(0));
3928:/usr/include/c++/6/bits/basic_string.h **** 	return *this;
3929:/usr/include/c++/6/bits/basic_string.h ****       }
3930:/usr/include/c++/6/bits/basic_string.h **** 
3931:/usr/include/c++/6/bits/basic_string.h ****       /**
3932:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Remove one character.
3933:/usr/include/c++/6/bits/basic_string.h ****        *  @param __position  Iterator referencing the character to remove.
3934:/usr/include/c++/6/bits/basic_string.h ****        *  @return  iterator referencing same location after removal.
3935:/usr/include/c++/6/bits/basic_string.h ****        *
3936:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the character at @a __position from this string. The value
3937:/usr/include/c++/6/bits/basic_string.h ****        *  of the string doesn't change if an error is thrown.
3938:/usr/include/c++/6/bits/basic_string.h ****       */
3939:/usr/include/c++/6/bits/basic_string.h ****       iterator
3940:/usr/include/c++/6/bits/basic_string.h ****       erase(iterator __position)
3941:/usr/include/c++/6/bits/basic_string.h ****       {
3942:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__position >= _M_ibegin()
3943:/usr/include/c++/6/bits/basic_string.h **** 				 && __position < _M_iend());
3944:/usr/include/c++/6/bits/basic_string.h **** 	const size_type __pos = __position - _M_ibegin();
3945:/usr/include/c++/6/bits/basic_string.h **** 	_M_mutate(__pos, size_type(1), size_type(0));
GAS LISTING /tmp/ccvmoMuv.s 			page 378


3946:/usr/include/c++/6/bits/basic_string.h **** 	_M_rep()->_M_set_leaked();
3947:/usr/include/c++/6/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
3948:/usr/include/c++/6/bits/basic_string.h ****       }
3949:/usr/include/c++/6/bits/basic_string.h **** 
3950:/usr/include/c++/6/bits/basic_string.h ****       /**
3951:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Remove a range of characters.
3952:/usr/include/c++/6/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to remove.
3953:/usr/include/c++/6/bits/basic_string.h ****        *  @param __last  Iterator referencing the end of the range.
3954:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Iterator referencing location of first after removal.
3955:/usr/include/c++/6/bits/basic_string.h ****        *
3956:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the characters in the range [first,last) from this string.
3957:/usr/include/c++/6/bits/basic_string.h ****        *  The value of the string doesn't change if an error is thrown.
3958:/usr/include/c++/6/bits/basic_string.h ****       */
3959:/usr/include/c++/6/bits/basic_string.h ****       iterator
3960:/usr/include/c++/6/bits/basic_string.h ****       erase(iterator __first, iterator __last);
3961:/usr/include/c++/6/bits/basic_string.h ****  
3962:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
3963:/usr/include/c++/6/bits/basic_string.h ****       /**
3964:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Remove the last character.
3965:/usr/include/c++/6/bits/basic_string.h ****        *
3966:/usr/include/c++/6/bits/basic_string.h ****        *  The string must be non-empty.
3967:/usr/include/c++/6/bits/basic_string.h ****        */
3968:/usr/include/c++/6/bits/basic_string.h ****       void
3969:/usr/include/c++/6/bits/basic_string.h ****       pop_back() // FIXME C++11: should be noexcept.
3970:/usr/include/c++/6/bits/basic_string.h ****       {
3971:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_assert(!empty());
3972:/usr/include/c++/6/bits/basic_string.h **** 	erase(size() - 1, 1);
3973:/usr/include/c++/6/bits/basic_string.h ****       }
3974:/usr/include/c++/6/bits/basic_string.h **** #endif // C++11
3975:/usr/include/c++/6/bits/basic_string.h **** 
3976:/usr/include/c++/6/bits/basic_string.h ****       /**
3977:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
3978:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
3979:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters to be replaced.
3980:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  String to insert.
3981:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
3982:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
3983:/usr/include/c++/6/bits/basic_string.h ****        *  string.
3984:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3985:/usr/include/c++/6/bits/basic_string.h ****        *
3986:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos+__n) from
3987:/usr/include/c++/6/bits/basic_string.h ****        *  this string.  In place, the value of @a __str is inserted.
3988:/usr/include/c++/6/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
3989:/usr/include/c++/6/bits/basic_string.h ****        *  If the length of the result exceeds max_size(), length_error
3990:/usr/include/c++/6/bits/basic_string.h ****        *  is thrown.  The value of the string doesn't change if an
3991:/usr/include/c++/6/bits/basic_string.h ****        *  error is thrown.
3992:/usr/include/c++/6/bits/basic_string.h ****       */
3993:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
3994:/usr/include/c++/6/bits/basic_string.h ****       replace(size_type __pos, size_type __n, const basic_string& __str)
3995:/usr/include/c++/6/bits/basic_string.h ****       { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
3996:/usr/include/c++/6/bits/basic_string.h **** 
3997:/usr/include/c++/6/bits/basic_string.h ****       /**
3998:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
3999:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos1  Index of first character to replace.
4000:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
4001:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  String to insert.
4002:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos2  Index of first character of str to use.
GAS LISTING /tmp/ccvmoMuv.s 			page 379


4003:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n2  Number of characters from str to use.
4004:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
4005:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos1 > size() or @a __pos2 >
4006:/usr/include/c++/6/bits/basic_string.h ****        *  __str.size().
4007:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4008:/usr/include/c++/6/bits/basic_string.h ****        *
4009:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the characters in the range [__pos1,__pos1 + n) from this
4010:/usr/include/c++/6/bits/basic_string.h ****        *  string.  In place, the value of @a __str is inserted.  If @a __pos is
4011:/usr/include/c++/6/bits/basic_string.h ****        *  beyond end of string, out_of_range is thrown.  If the length of the
4012:/usr/include/c++/6/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The value of the
4013:/usr/include/c++/6/bits/basic_string.h ****        *  string doesn't change if an error is thrown.
4014:/usr/include/c++/6/bits/basic_string.h ****       */
4015:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
4016:/usr/include/c++/6/bits/basic_string.h ****       replace(size_type __pos1, size_type __n1, const basic_string& __str,
4017:/usr/include/c++/6/bits/basic_string.h **** 	      size_type __pos2, size_type __n2)
4018:/usr/include/c++/6/bits/basic_string.h ****       { return this->replace(__pos1, __n1, __str._M_data()
4019:/usr/include/c++/6/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::replace"),
4020:/usr/include/c++/6/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n2)); }
4021:/usr/include/c++/6/bits/basic_string.h **** 
4022:/usr/include/c++/6/bits/basic_string.h ****       /**
4023:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Replace characters with value of a C substring.
4024:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
4025:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
4026:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string to insert.
4027:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n2  Number of characters from @a s to use.
4028:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
4029:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size().
4030:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4031:/usr/include/c++/6/bits/basic_string.h ****        *
4032:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
4033:/usr/include/c++/6/bits/basic_string.h ****        *  from this string.  In place, the first @a __n2 characters of
4034:/usr/include/c++/6/bits/basic_string.h ****        *  @a __s are inserted, or all of @a __s if @a __n2 is too large.  If
4035:/usr/include/c++/6/bits/basic_string.h ****        *  @a __pos is beyond end of string, out_of_range is thrown.  If
4036:/usr/include/c++/6/bits/basic_string.h ****        *  the length of result exceeds max_size(), length_error is
4037:/usr/include/c++/6/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
4038:/usr/include/c++/6/bits/basic_string.h ****        *  is thrown.
4039:/usr/include/c++/6/bits/basic_string.h ****       */
4040:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
4041:/usr/include/c++/6/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s,
4042:/usr/include/c++/6/bits/basic_string.h **** 	      size_type __n2);
4043:/usr/include/c++/6/bits/basic_string.h **** 
4044:/usr/include/c++/6/bits/basic_string.h ****       /**
4045:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Replace characters with value of a C string.
4046:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
4047:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
4048:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string to insert.
4049:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
4050:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos > size().
4051:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4052:/usr/include/c++/6/bits/basic_string.h ****        *
4053:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
4054:/usr/include/c++/6/bits/basic_string.h ****        *  from this string.  In place, the characters of @a __s are
4055:/usr/include/c++/6/bits/basic_string.h ****        *  inserted.  If @a __pos is beyond end of string, out_of_range
4056:/usr/include/c++/6/bits/basic_string.h ****        *  is thrown.  If the length of result exceeds max_size(),
4057:/usr/include/c++/6/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
4058:/usr/include/c++/6/bits/basic_string.h ****        *  change if an error is thrown.
4059:/usr/include/c++/6/bits/basic_string.h ****       */
GAS LISTING /tmp/ccvmoMuv.s 			page 380


4060:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
4061:/usr/include/c++/6/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s)
4062:/usr/include/c++/6/bits/basic_string.h ****       {
4063:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4064:/usr/include/c++/6/bits/basic_string.h **** 	return this->replace(__pos, __n1, __s, traits_type::length(__s));
4065:/usr/include/c++/6/bits/basic_string.h ****       }
4066:/usr/include/c++/6/bits/basic_string.h **** 
4067:/usr/include/c++/6/bits/basic_string.h ****       /**
4068:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Replace characters with multiple characters.
4069:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
4070:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
4071:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n2  Number of characters to insert.
4072:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  Character to insert.
4073:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
4074:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos > size().
4075:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4076:/usr/include/c++/6/bits/basic_string.h ****        *
4077:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the characters in the range [pos,pos + n1) from this
4078:/usr/include/c++/6/bits/basic_string.h ****        *  string.  In place, @a __n2 copies of @a __c are inserted.
4079:/usr/include/c++/6/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
4080:/usr/include/c++/6/bits/basic_string.h ****        *  If the length of result exceeds max_size(), length_error is
4081:/usr/include/c++/6/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
4082:/usr/include/c++/6/bits/basic_string.h ****        *  is thrown.
4083:/usr/include/c++/6/bits/basic_string.h ****       */
4084:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
4085:/usr/include/c++/6/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
4086:/usr/include/c++/6/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
4087:/usr/include/c++/6/bits/basic_string.h **** 			      _M_limit(__pos, __n1), __n2, __c); }
4088:/usr/include/c++/6/bits/basic_string.h **** 
4089:/usr/include/c++/6/bits/basic_string.h ****       /**
4090:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Replace range of characters with string.
4091:/usr/include/c++/6/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4092:/usr/include/c++/6/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4093:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  String value to insert.
4094:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
4095:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4096:/usr/include/c++/6/bits/basic_string.h ****        *
4097:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4098:/usr/include/c++/6/bits/basic_string.h ****        *  the value of @a __str is inserted.  If the length of result
4099:/usr/include/c++/6/bits/basic_string.h ****        *  exceeds max_size(), length_error is thrown.  The value of
4100:/usr/include/c++/6/bits/basic_string.h ****        *  the string doesn't change if an error is thrown.
4101:/usr/include/c++/6/bits/basic_string.h ****       */
4102:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
4103:/usr/include/c++/6/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const basic_string& __str)
4104:/usr/include/c++/6/bits/basic_string.h ****       { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
4105:/usr/include/c++/6/bits/basic_string.h **** 
4106:/usr/include/c++/6/bits/basic_string.h ****       /**
4107:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Replace range of characters with C substring.
4108:/usr/include/c++/6/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4109:/usr/include/c++/6/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4110:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string value to insert.
4111:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters from s to insert.
4112:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
4113:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4114:/usr/include/c++/6/bits/basic_string.h ****        *
4115:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4116:/usr/include/c++/6/bits/basic_string.h ****        *  the first @a __n characters of @a __s are inserted.  If the
GAS LISTING /tmp/ccvmoMuv.s 			page 381


4117:/usr/include/c++/6/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
4118:/usr/include/c++/6/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
4119:/usr/include/c++/6/bits/basic_string.h ****        *  thrown.
4120:/usr/include/c++/6/bits/basic_string.h ****       */
4121:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
4122:/usr/include/c++/6/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
4123:/usr/include/c++/6/bits/basic_string.h ****       {
4124:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4125:/usr/include/c++/6/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4126:/usr/include/c++/6/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
4127:/usr/include/c++/6/bits/basic_string.h ****       }
4128:/usr/include/c++/6/bits/basic_string.h **** 
4129:/usr/include/c++/6/bits/basic_string.h ****       /**
4130:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Replace range of characters with C string.
4131:/usr/include/c++/6/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4132:/usr/include/c++/6/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4133:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string value to insert.
4134:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
4135:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4136:/usr/include/c++/6/bits/basic_string.h ****        *
4137:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4138:/usr/include/c++/6/bits/basic_string.h ****        *  the characters of @a __s are inserted.  If the length of
4139:/usr/include/c++/6/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
4140:/usr/include/c++/6/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
4141:/usr/include/c++/6/bits/basic_string.h ****       */
4142:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
4143:/usr/include/c++/6/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const _CharT* __s)
4144:/usr/include/c++/6/bits/basic_string.h ****       {
4145:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4146:/usr/include/c++/6/bits/basic_string.h **** 	return this->replace(__i1, __i2, __s, traits_type::length(__s));
4147:/usr/include/c++/6/bits/basic_string.h ****       }
4148:/usr/include/c++/6/bits/basic_string.h **** 
4149:/usr/include/c++/6/bits/basic_string.h ****       /**
4150:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Replace range of characters with multiple characters
4151:/usr/include/c++/6/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4152:/usr/include/c++/6/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4153:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
4154:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  Character to insert.
4155:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
4156:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4157:/usr/include/c++/6/bits/basic_string.h ****        *
4158:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4159:/usr/include/c++/6/bits/basic_string.h ****        *  @a __n copies of @a __c are inserted.  If the length of
4160:/usr/include/c++/6/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
4161:/usr/include/c++/6/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
4162:/usr/include/c++/6/bits/basic_string.h ****       */
4163:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
4164:/usr/include/c++/6/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
4165:/usr/include/c++/6/bits/basic_string.h ****       {
4166:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4167:/usr/include/c++/6/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4168:/usr/include/c++/6/bits/basic_string.h **** 	return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
4169:/usr/include/c++/6/bits/basic_string.h ****       }
4170:/usr/include/c++/6/bits/basic_string.h **** 
4171:/usr/include/c++/6/bits/basic_string.h ****       /**
4172:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Replace range of characters with range.
4173:/usr/include/c++/6/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
GAS LISTING /tmp/ccvmoMuv.s 			page 382


4174:/usr/include/c++/6/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4175:/usr/include/c++/6/bits/basic_string.h ****        *  @param __k1  Iterator referencing start of range to insert.
4176:/usr/include/c++/6/bits/basic_string.h ****        *  @param __k2  Iterator referencing end of range to insert.
4177:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
4178:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4179:/usr/include/c++/6/bits/basic_string.h ****        *
4180:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4181:/usr/include/c++/6/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
4182:/usr/include/c++/6/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
4183:/usr/include/c++/6/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
4184:/usr/include/c++/6/bits/basic_string.h ****        *  thrown.
4185:/usr/include/c++/6/bits/basic_string.h ****       */
4186:/usr/include/c++/6/bits/basic_string.h ****       template<class _InputIterator>
4187:/usr/include/c++/6/bits/basic_string.h ****         basic_string&
4188:/usr/include/c++/6/bits/basic_string.h ****         replace(iterator __i1, iterator __i2,
4189:/usr/include/c++/6/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
4190:/usr/include/c++/6/bits/basic_string.h ****         {
4191:/usr/include/c++/6/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4192:/usr/include/c++/6/bits/basic_string.h **** 				   && __i2 <= _M_iend());
4193:/usr/include/c++/6/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
4194:/usr/include/c++/6/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
4195:/usr/include/c++/6/bits/basic_string.h **** 	  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
4196:/usr/include/c++/6/bits/basic_string.h **** 	}
4197:/usr/include/c++/6/bits/basic_string.h **** 
4198:/usr/include/c++/6/bits/basic_string.h ****       // Specializations for the common case of pointer and iterator:
4199:/usr/include/c++/6/bits/basic_string.h ****       // useful to avoid the overhead of temporary buffering in _M_replace.
4200:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
4201:/usr/include/c++/6/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
4202:/usr/include/c++/6/bits/basic_string.h ****       {
4203:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4204:/usr/include/c++/6/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4205:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4206:/usr/include/c++/6/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4207:/usr/include/c++/6/bits/basic_string.h **** 			     __k1, __k2 - __k1);
4208:/usr/include/c++/6/bits/basic_string.h ****       }
4209:/usr/include/c++/6/bits/basic_string.h **** 
4210:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
4211:/usr/include/c++/6/bits/basic_string.h ****       replace(iterator __i1, iterator __i2,
4212:/usr/include/c++/6/bits/basic_string.h **** 	      const _CharT* __k1, const _CharT* __k2)
4213:/usr/include/c++/6/bits/basic_string.h ****       {
4214:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4215:/usr/include/c++/6/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4216:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4217:/usr/include/c++/6/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4218:/usr/include/c++/6/bits/basic_string.h **** 			     __k1, __k2 - __k1);
4219:/usr/include/c++/6/bits/basic_string.h ****       }
4220:/usr/include/c++/6/bits/basic_string.h **** 
4221:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
4222:/usr/include/c++/6/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
4223:/usr/include/c++/6/bits/basic_string.h ****       {
4224:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4225:/usr/include/c++/6/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4226:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4227:/usr/include/c++/6/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4228:/usr/include/c++/6/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
4229:/usr/include/c++/6/bits/basic_string.h ****       }
4230:/usr/include/c++/6/bits/basic_string.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 383


4231:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
4232:/usr/include/c++/6/bits/basic_string.h ****       replace(iterator __i1, iterator __i2,
4233:/usr/include/c++/6/bits/basic_string.h **** 	      const_iterator __k1, const_iterator __k2)
4234:/usr/include/c++/6/bits/basic_string.h ****       {
4235:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4236:/usr/include/c++/6/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4237:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4238:/usr/include/c++/6/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4239:/usr/include/c++/6/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
4240:/usr/include/c++/6/bits/basic_string.h ****       }
4241:/usr/include/c++/6/bits/basic_string.h ****       
4242:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
4243:/usr/include/c++/6/bits/basic_string.h ****       /**
4244:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Replace range of characters with initializer_list.
4245:/usr/include/c++/6/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4246:/usr/include/c++/6/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4247:/usr/include/c++/6/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
4248:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Reference to this string.
4249:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4250:/usr/include/c++/6/bits/basic_string.h ****        *
4251:/usr/include/c++/6/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4252:/usr/include/c++/6/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
4253:/usr/include/c++/6/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
4254:/usr/include/c++/6/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
4255:/usr/include/c++/6/bits/basic_string.h ****        *  thrown.
4256:/usr/include/c++/6/bits/basic_string.h ****       */
4257:/usr/include/c++/6/bits/basic_string.h ****       basic_string& replace(iterator __i1, iterator __i2,
4258:/usr/include/c++/6/bits/basic_string.h **** 			    initializer_list<_CharT> __l)
4259:/usr/include/c++/6/bits/basic_string.h ****       { return this->replace(__i1, __i2, __l.begin(), __l.end()); }
4260:/usr/include/c++/6/bits/basic_string.h **** #endif // C++11
4261:/usr/include/c++/6/bits/basic_string.h **** 
4262:/usr/include/c++/6/bits/basic_string.h ****     private:
4263:/usr/include/c++/6/bits/basic_string.h ****       template<class _Integer>
4264:/usr/include/c++/6/bits/basic_string.h **** 	basic_string&
4265:/usr/include/c++/6/bits/basic_string.h **** 	_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,
4266:/usr/include/c++/6/bits/basic_string.h **** 			    _Integer __val, __true_type)
4267:/usr/include/c++/6/bits/basic_string.h ****         { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }
4268:/usr/include/c++/6/bits/basic_string.h **** 
4269:/usr/include/c++/6/bits/basic_string.h ****       template<class _InputIterator>
4270:/usr/include/c++/6/bits/basic_string.h **** 	basic_string&
4271:/usr/include/c++/6/bits/basic_string.h **** 	_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
4272:/usr/include/c++/6/bits/basic_string.h **** 			    _InputIterator __k2, __false_type);
4273:/usr/include/c++/6/bits/basic_string.h **** 
4274:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
4275:/usr/include/c++/6/bits/basic_string.h ****       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
4276:/usr/include/c++/6/bits/basic_string.h **** 		     _CharT __c);
4277:/usr/include/c++/6/bits/basic_string.h **** 
4278:/usr/include/c++/6/bits/basic_string.h ****       basic_string&
4279:/usr/include/c++/6/bits/basic_string.h ****       _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
4280:/usr/include/c++/6/bits/basic_string.h **** 		      size_type __n2);
4281:/usr/include/c++/6/bits/basic_string.h **** 
4282:/usr/include/c++/6/bits/basic_string.h ****       // _S_construct_aux is used to implement the 21.3.1 para 15 which
4283:/usr/include/c++/6/bits/basic_string.h ****       // requires special behaviour if _InIter is an integral type
4284:/usr/include/c++/6/bits/basic_string.h ****       template<class _InIterator>
4285:/usr/include/c++/6/bits/basic_string.h ****         static _CharT*
4286:/usr/include/c++/6/bits/basic_string.h ****         _S_construct_aux(_InIterator __beg, _InIterator __end,
4287:/usr/include/c++/6/bits/basic_string.h **** 			 const _Alloc& __a, __false_type)
GAS LISTING /tmp/ccvmoMuv.s 			page 384


4288:/usr/include/c++/6/bits/basic_string.h **** 	{
4289:/usr/include/c++/6/bits/basic_string.h ****           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
4290:/usr/include/c++/6/bits/basic_string.h ****           return _S_construct(__beg, __end, __a, _Tag());
4291:/usr/include/c++/6/bits/basic_string.h **** 	}
4292:/usr/include/c++/6/bits/basic_string.h **** 
4293:/usr/include/c++/6/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
4294:/usr/include/c++/6/bits/basic_string.h ****       // 438. Ambiguity in the "do the right thing" clause
4295:/usr/include/c++/6/bits/basic_string.h ****       template<class _Integer>
4296:/usr/include/c++/6/bits/basic_string.h ****         static _CharT*
4297:/usr/include/c++/6/bits/basic_string.h ****         _S_construct_aux(_Integer __beg, _Integer __end,
4298:/usr/include/c++/6/bits/basic_string.h **** 			 const _Alloc& __a, __true_type)
4299:/usr/include/c++/6/bits/basic_string.h ****         { return _S_construct_aux_2(static_cast<size_type>(__beg),
4300:/usr/include/c++/6/bits/basic_string.h **** 				    __end, __a); }
4301:/usr/include/c++/6/bits/basic_string.h **** 
4302:/usr/include/c++/6/bits/basic_string.h ****       static _CharT*
4303:/usr/include/c++/6/bits/basic_string.h ****       _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)
4304:/usr/include/c++/6/bits/basic_string.h ****       { return _S_construct(__req, __c, __a); }
4305:/usr/include/c++/6/bits/basic_string.h **** 
4306:/usr/include/c++/6/bits/basic_string.h ****       template<class _InIterator>
4307:/usr/include/c++/6/bits/basic_string.h ****         static _CharT*
4308:/usr/include/c++/6/bits/basic_string.h ****         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)
4309:/usr/include/c++/6/bits/basic_string.h **** 	{
4310:/usr/include/c++/6/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
4311:/usr/include/c++/6/bits/basic_string.h **** 	  return _S_construct_aux(__beg, __end, __a, _Integral());
4312:/usr/include/c++/6/bits/basic_string.h ****         }
4313:/usr/include/c++/6/bits/basic_string.h **** 
4314:/usr/include/c++/6/bits/basic_string.h ****       // For Input Iterators, used in istreambuf_iterators, etc.
4315:/usr/include/c++/6/bits/basic_string.h ****       template<class _InIterator>
4316:/usr/include/c++/6/bits/basic_string.h ****         static _CharT*
4317:/usr/include/c++/6/bits/basic_string.h ****          _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
4318:/usr/include/c++/6/bits/basic_string.h **** 		      input_iterator_tag);
4319:/usr/include/c++/6/bits/basic_string.h **** 
4320:/usr/include/c++/6/bits/basic_string.h ****       // For forward_iterators up to random_access_iterators, used for
4321:/usr/include/c++/6/bits/basic_string.h ****       // string::iterator, _CharT*, etc.
4322:/usr/include/c++/6/bits/basic_string.h ****       template<class _FwdIterator>
4323:/usr/include/c++/6/bits/basic_string.h ****         static _CharT*
4324:/usr/include/c++/6/bits/basic_string.h ****         _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,
4325:/usr/include/c++/6/bits/basic_string.h **** 		     forward_iterator_tag);
4326:/usr/include/c++/6/bits/basic_string.h **** 
4327:/usr/include/c++/6/bits/basic_string.h ****       static _CharT*
4328:/usr/include/c++/6/bits/basic_string.h ****       _S_construct(size_type __req, _CharT __c, const _Alloc& __a);
4329:/usr/include/c++/6/bits/basic_string.h **** 
4330:/usr/include/c++/6/bits/basic_string.h ****     public:
4331:/usr/include/c++/6/bits/basic_string.h **** 
4332:/usr/include/c++/6/bits/basic_string.h ****       /**
4333:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Copy substring into C string.
4334:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string to copy value into.
4335:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters to copy.
4336:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of first character to copy.
4337:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Number of characters actually copied
4338:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
4339:/usr/include/c++/6/bits/basic_string.h ****        *
4340:/usr/include/c++/6/bits/basic_string.h ****        *  Copies up to @a __n characters starting at @a __pos into the
4341:/usr/include/c++/6/bits/basic_string.h ****        *  C string @a __s.  If @a __pos is %greater than size(),
4342:/usr/include/c++/6/bits/basic_string.h ****        *  out_of_range is thrown.
4343:/usr/include/c++/6/bits/basic_string.h ****       */
4344:/usr/include/c++/6/bits/basic_string.h ****       size_type
GAS LISTING /tmp/ccvmoMuv.s 			page 385


4345:/usr/include/c++/6/bits/basic_string.h ****       copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
4346:/usr/include/c++/6/bits/basic_string.h **** 
4347:/usr/include/c++/6/bits/basic_string.h ****       /**
4348:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Swap contents with another string.
4349:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  String to swap with.
4350:/usr/include/c++/6/bits/basic_string.h ****        *
4351:/usr/include/c++/6/bits/basic_string.h ****        *  Exchanges the contents of this string with that of @a __s in constant
4352:/usr/include/c++/6/bits/basic_string.h ****        *  time.
4353:/usr/include/c++/6/bits/basic_string.h ****       */
4354:/usr/include/c++/6/bits/basic_string.h ****       // PR 58265, this should be noexcept.
4355:/usr/include/c++/6/bits/basic_string.h ****       void
4356:/usr/include/c++/6/bits/basic_string.h ****       swap(basic_string& __s);
4357:/usr/include/c++/6/bits/basic_string.h **** 
4358:/usr/include/c++/6/bits/basic_string.h ****       // String operations:
4359:/usr/include/c++/6/bits/basic_string.h ****       /**
4360:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Return const pointer to null-terminated contents.
4361:/usr/include/c++/6/bits/basic_string.h ****        *
4362:/usr/include/c++/6/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
4363:/usr/include/c++/6/bits/basic_string.h ****        *  happen.
4364:/usr/include/c++/6/bits/basic_string.h ****       */
4365:/usr/include/c++/6/bits/basic_string.h ****       const _CharT*
4366:/usr/include/c++/6/bits/basic_string.h ****       c_str() const _GLIBCXX_NOEXCEPT
4367:/usr/include/c++/6/bits/basic_string.h ****       { return _M_data(); }
4368:/usr/include/c++/6/bits/basic_string.h **** 
4369:/usr/include/c++/6/bits/basic_string.h ****       /**
4370:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Return const pointer to contents.
4371:/usr/include/c++/6/bits/basic_string.h ****        *
4372:/usr/include/c++/6/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
4373:/usr/include/c++/6/bits/basic_string.h ****        *  happen.
4374:/usr/include/c++/6/bits/basic_string.h ****       */
4375:/usr/include/c++/6/bits/basic_string.h ****       const _CharT*
4376:/usr/include/c++/6/bits/basic_string.h ****       data() const _GLIBCXX_NOEXCEPT
4377:/usr/include/c++/6/bits/basic_string.h ****       { return _M_data(); }
4378:/usr/include/c++/6/bits/basic_string.h **** 
4379:/usr/include/c++/6/bits/basic_string.h ****       /**
4380:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Return copy of allocator used to construct this string.
4381:/usr/include/c++/6/bits/basic_string.h ****       */
4382:/usr/include/c++/6/bits/basic_string.h ****       allocator_type
4383:/usr/include/c++/6/bits/basic_string.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
4384:/usr/include/c++/6/bits/basic_string.h ****       { return _M_dataplus; }
4385:/usr/include/c++/6/bits/basic_string.h **** 
4386:/usr/include/c++/6/bits/basic_string.h ****       /**
4387:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find position of a C substring.
4388:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string to locate.
4389:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
4390:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters from @a s to search for.
4391:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
4392:/usr/include/c++/6/bits/basic_string.h ****        *
4393:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the first @a
4394:/usr/include/c++/6/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
4395:/usr/include/c++/6/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
4396:/usr/include/c++/6/bits/basic_string.h ****        *  npos.
4397:/usr/include/c++/6/bits/basic_string.h ****       */
4398:/usr/include/c++/6/bits/basic_string.h ****       size_type
4399:/usr/include/c++/6/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos, size_type __n) const;
4400:/usr/include/c++/6/bits/basic_string.h **** 
4401:/usr/include/c++/6/bits/basic_string.h ****       /**
GAS LISTING /tmp/ccvmoMuv.s 			page 386


4402:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find position of a string.
4403:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  String to locate.
4404:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4405:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
4406:/usr/include/c++/6/bits/basic_string.h ****        *
4407:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for value of @a __str within
4408:/usr/include/c++/6/bits/basic_string.h ****        *  this string.  If found, returns the index where it begins.  If not
4409:/usr/include/c++/6/bits/basic_string.h ****        *  found, returns npos.
4410:/usr/include/c++/6/bits/basic_string.h ****       */
4411:/usr/include/c++/6/bits/basic_string.h ****       size_type
4412:/usr/include/c++/6/bits/basic_string.h ****       find(const basic_string& __str, size_type __pos = 0) const
4413:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
4414:/usr/include/c++/6/bits/basic_string.h ****       { return this->find(__str.data(), __pos, __str.size()); }
4415:/usr/include/c++/6/bits/basic_string.h **** 
4416:/usr/include/c++/6/bits/basic_string.h ****       /**
4417:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find position of a C string.
4418:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string to locate.
4419:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4420:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
4421:/usr/include/c++/6/bits/basic_string.h ****        *
4422:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the value of @a
4423:/usr/include/c++/6/bits/basic_string.h ****        *  __s within this string.  If found, returns the index where
4424:/usr/include/c++/6/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
4425:/usr/include/c++/6/bits/basic_string.h ****       */
4426:/usr/include/c++/6/bits/basic_string.h ****       size_type
4427:/usr/include/c++/6/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos = 0) const
4428:/usr/include/c++/6/bits/basic_string.h ****       {
4429:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4430:/usr/include/c++/6/bits/basic_string.h **** 	return this->find(__s, __pos, traits_type::length(__s));
4431:/usr/include/c++/6/bits/basic_string.h ****       }
4432:/usr/include/c++/6/bits/basic_string.h **** 
4433:/usr/include/c++/6/bits/basic_string.h ****       /**
4434:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find position of a character.
4435:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  Character to locate.
4436:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4437:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of first occurrence.
4438:/usr/include/c++/6/bits/basic_string.h ****        *
4439:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for @a __c within
4440:/usr/include/c++/6/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
4441:/usr/include/c++/6/bits/basic_string.h ****        *  found.  If not found, returns npos.
4442:/usr/include/c++/6/bits/basic_string.h ****       */
4443:/usr/include/c++/6/bits/basic_string.h ****       size_type
4444:/usr/include/c++/6/bits/basic_string.h ****       find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;
4445:/usr/include/c++/6/bits/basic_string.h **** 
4446:/usr/include/c++/6/bits/basic_string.h ****       /**
4447:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find last position of a string.
4448:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  String to locate.
4449:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
4450:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
4451:/usr/include/c++/6/bits/basic_string.h ****        *
4452:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for value of @a
4453:/usr/include/c++/6/bits/basic_string.h ****        *  __str within this string.  If found, returns the index where
4454:/usr/include/c++/6/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
4455:/usr/include/c++/6/bits/basic_string.h ****       */
4456:/usr/include/c++/6/bits/basic_string.h ****       size_type
4457:/usr/include/c++/6/bits/basic_string.h ****       rfind(const basic_string& __str, size_type __pos = npos) const
4458:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
GAS LISTING /tmp/ccvmoMuv.s 			page 387


4459:/usr/include/c++/6/bits/basic_string.h ****       { return this->rfind(__str.data(), __pos, __str.size()); }
4460:/usr/include/c++/6/bits/basic_string.h **** 
4461:/usr/include/c++/6/bits/basic_string.h ****       /**
4462:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find last position of a C substring.
4463:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string to locate.
4464:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
4465:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
4466:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
4467:/usr/include/c++/6/bits/basic_string.h ****        *
4468:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the first @a
4469:/usr/include/c++/6/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
4470:/usr/include/c++/6/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
4471:/usr/include/c++/6/bits/basic_string.h ****        *  npos.
4472:/usr/include/c++/6/bits/basic_string.h ****       */
4473:/usr/include/c++/6/bits/basic_string.h ****       size_type
4474:/usr/include/c++/6/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos, size_type __n) const;
4475:/usr/include/c++/6/bits/basic_string.h **** 
4476:/usr/include/c++/6/bits/basic_string.h ****       /**
4477:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find last position of a C string.
4478:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string to locate.
4479:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to start search at (default end).
4480:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of start of  last occurrence.
4481:/usr/include/c++/6/bits/basic_string.h ****        *
4482:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the value of
4483:/usr/include/c++/6/bits/basic_string.h ****        *  @a __s within this string.  If found, returns the index
4484:/usr/include/c++/6/bits/basic_string.h ****        *  where it begins.  If not found, returns npos.
4485:/usr/include/c++/6/bits/basic_string.h ****       */
4486:/usr/include/c++/6/bits/basic_string.h ****       size_type
4487:/usr/include/c++/6/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos = npos) const
4488:/usr/include/c++/6/bits/basic_string.h ****       {
4489:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4490:/usr/include/c++/6/bits/basic_string.h **** 	return this->rfind(__s, __pos, traits_type::length(__s));
4491:/usr/include/c++/6/bits/basic_string.h ****       }
4492:/usr/include/c++/6/bits/basic_string.h **** 
4493:/usr/include/c++/6/bits/basic_string.h ****       /**
4494:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find last position of a character.
4495:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  Character to locate.
4496:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
4497:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of last occurrence.
4498:/usr/include/c++/6/bits/basic_string.h ****        *
4499:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
4500:/usr/include/c++/6/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
4501:/usr/include/c++/6/bits/basic_string.h ****        *  found.  If not found, returns npos.
4502:/usr/include/c++/6/bits/basic_string.h ****       */
4503:/usr/include/c++/6/bits/basic_string.h ****       size_type
4504:/usr/include/c++/6/bits/basic_string.h ****       rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;
4505:/usr/include/c++/6/bits/basic_string.h **** 
4506:/usr/include/c++/6/bits/basic_string.h ****       /**
4507:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find position of a character of string.
4508:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
4509:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4510:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of first occurrence.
4511:/usr/include/c++/6/bits/basic_string.h ****        *
4512:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
4513:/usr/include/c++/6/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
4514:/usr/include/c++/6/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
4515:/usr/include/c++/6/bits/basic_string.h ****        *  npos.
GAS LISTING /tmp/ccvmoMuv.s 			page 388


4516:/usr/include/c++/6/bits/basic_string.h ****       */
4517:/usr/include/c++/6/bits/basic_string.h ****       size_type
4518:/usr/include/c++/6/bits/basic_string.h ****       find_first_of(const basic_string& __str, size_type __pos = 0) const
4519:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
4520:/usr/include/c++/6/bits/basic_string.h ****       { return this->find_first_of(__str.data(), __pos, __str.size()); }
4521:/usr/include/c++/6/bits/basic_string.h **** 
4522:/usr/include/c++/6/bits/basic_string.h ****       /**
4523:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find position of a character of C substring.
4524:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
4525:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
4526:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
4527:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of first occurrence.
4528:/usr/include/c++/6/bits/basic_string.h ****        *
4529:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
4530:/usr/include/c++/6/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
4531:/usr/include/c++/6/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
4532:/usr/include/c++/6/bits/basic_string.h ****        *  returns npos.
4533:/usr/include/c++/6/bits/basic_string.h ****       */
4534:/usr/include/c++/6/bits/basic_string.h ****       size_type
4535:/usr/include/c++/6/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;
4536:/usr/include/c++/6/bits/basic_string.h **** 
4537:/usr/include/c++/6/bits/basic_string.h ****       /**
4538:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find position of a character of C string.
4539:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
4540:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4541:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of first occurrence.
4542:/usr/include/c++/6/bits/basic_string.h ****        *
4543:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
4544:/usr/include/c++/6/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
4545:/usr/include/c++/6/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
4546:/usr/include/c++/6/bits/basic_string.h ****       */
4547:/usr/include/c++/6/bits/basic_string.h ****       size_type
4548:/usr/include/c++/6/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos = 0) const
4549:/usr/include/c++/6/bits/basic_string.h ****       {
4550:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4551:/usr/include/c++/6/bits/basic_string.h **** 	return this->find_first_of(__s, __pos, traits_type::length(__s));
4552:/usr/include/c++/6/bits/basic_string.h ****       }
4553:/usr/include/c++/6/bits/basic_string.h **** 
4554:/usr/include/c++/6/bits/basic_string.h ****       /**
4555:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find position of a character.
4556:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  Character to locate.
4557:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4558:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of first occurrence.
4559:/usr/include/c++/6/bits/basic_string.h ****        *
4560:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the character
4561:/usr/include/c++/6/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index
4562:/usr/include/c++/6/bits/basic_string.h ****        *  where it was found.  If not found, returns npos.
4563:/usr/include/c++/6/bits/basic_string.h ****        *
4564:/usr/include/c++/6/bits/basic_string.h ****        *  Note: equivalent to find(__c, __pos).
4565:/usr/include/c++/6/bits/basic_string.h ****       */
4566:/usr/include/c++/6/bits/basic_string.h ****       size_type
4567:/usr/include/c++/6/bits/basic_string.h ****       find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
4568:/usr/include/c++/6/bits/basic_string.h ****       { return this->find(__c, __pos); }
4569:/usr/include/c++/6/bits/basic_string.h **** 
4570:/usr/include/c++/6/bits/basic_string.h ****       /**
4571:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
4572:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
GAS LISTING /tmp/ccvmoMuv.s 			page 389


4573:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
4574:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of last occurrence.
4575:/usr/include/c++/6/bits/basic_string.h ****        *
4576:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
4577:/usr/include/c++/6/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
4578:/usr/include/c++/6/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
4579:/usr/include/c++/6/bits/basic_string.h ****        *  npos.
4580:/usr/include/c++/6/bits/basic_string.h ****       */
4581:/usr/include/c++/6/bits/basic_string.h ****       size_type
4582:/usr/include/c++/6/bits/basic_string.h ****       find_last_of(const basic_string& __str, size_type __pos = npos) const
4583:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
4584:/usr/include/c++/6/bits/basic_string.h ****       { return this->find_last_of(__str.data(), __pos, __str.size()); }
4585:/usr/include/c++/6/bits/basic_string.h **** 
4586:/usr/include/c++/6/bits/basic_string.h ****       /**
4587:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find last position of a character of C substring.
4588:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
4589:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
4590:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
4591:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of last occurrence.
4592:/usr/include/c++/6/bits/basic_string.h ****        *
4593:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
4594:/usr/include/c++/6/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
4595:/usr/include/c++/6/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
4596:/usr/include/c++/6/bits/basic_string.h ****        *  returns npos.
4597:/usr/include/c++/6/bits/basic_string.h ****       */
4598:/usr/include/c++/6/bits/basic_string.h ****       size_type
4599:/usr/include/c++/6/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;
4600:/usr/include/c++/6/bits/basic_string.h **** 
4601:/usr/include/c++/6/bits/basic_string.h ****       /**
4602:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find last position of a character of C string.
4603:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
4604:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
4605:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of last occurrence.
4606:/usr/include/c++/6/bits/basic_string.h ****        *
4607:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
4608:/usr/include/c++/6/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
4609:/usr/include/c++/6/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
4610:/usr/include/c++/6/bits/basic_string.h ****       */
4611:/usr/include/c++/6/bits/basic_string.h ****       size_type
4612:/usr/include/c++/6/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos = npos) const
4613:/usr/include/c++/6/bits/basic_string.h ****       {
4614:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4615:/usr/include/c++/6/bits/basic_string.h **** 	return this->find_last_of(__s, __pos, traits_type::length(__s));
4616:/usr/include/c++/6/bits/basic_string.h ****       }
4617:/usr/include/c++/6/bits/basic_string.h **** 
4618:/usr/include/c++/6/bits/basic_string.h ****       /**
4619:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find last position of a character.
4620:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  Character to locate.
4621:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
4622:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of last occurrence.
4623:/usr/include/c++/6/bits/basic_string.h ****        *
4624:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
4625:/usr/include/c++/6/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
4626:/usr/include/c++/6/bits/basic_string.h ****        *  found.  If not found, returns npos.
4627:/usr/include/c++/6/bits/basic_string.h ****        *
4628:/usr/include/c++/6/bits/basic_string.h ****        *  Note: equivalent to rfind(__c, __pos).
4629:/usr/include/c++/6/bits/basic_string.h ****       */
GAS LISTING /tmp/ccvmoMuv.s 			page 390


4630:/usr/include/c++/6/bits/basic_string.h ****       size_type
4631:/usr/include/c++/6/bits/basic_string.h ****       find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT
4632:/usr/include/c++/6/bits/basic_string.h ****       { return this->rfind(__c, __pos); }
4633:/usr/include/c++/6/bits/basic_string.h **** 
4634:/usr/include/c++/6/bits/basic_string.h ****       /**
4635:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find position of a character not in string.
4636:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
4637:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4638:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of first occurrence.
4639:/usr/include/c++/6/bits/basic_string.h ****        *
4640:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not contained
4641:/usr/include/c++/6/bits/basic_string.h ****        *  in @a __str within this string.  If found, returns the index where it
4642:/usr/include/c++/6/bits/basic_string.h ****        *  was found.  If not found, returns npos.
4643:/usr/include/c++/6/bits/basic_string.h ****       */
4644:/usr/include/c++/6/bits/basic_string.h ****       size_type
4645:/usr/include/c++/6/bits/basic_string.h ****       find_first_not_of(const basic_string& __str, size_type __pos = 0) const
4646:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
4647:/usr/include/c++/6/bits/basic_string.h ****       { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
4648:/usr/include/c++/6/bits/basic_string.h **** 
4649:/usr/include/c++/6/bits/basic_string.h ****       /**
4650:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find position of a character not in C substring.
4651:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
4652:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
4653:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters from __s to consider.
4654:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of first occurrence.
4655:/usr/include/c++/6/bits/basic_string.h ****        *
4656:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
4657:/usr/include/c++/6/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within
4658:/usr/include/c++/6/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
4659:/usr/include/c++/6/bits/basic_string.h ****        *  found.  If not found, returns npos.
4660:/usr/include/c++/6/bits/basic_string.h ****       */
4661:/usr/include/c++/6/bits/basic_string.h ****       size_type
4662:/usr/include/c++/6/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos,
4663:/usr/include/c++/6/bits/basic_string.h **** 			size_type __n) const;
4664:/usr/include/c++/6/bits/basic_string.h **** 
4665:/usr/include/c++/6/bits/basic_string.h ****       /**
4666:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find position of a character not in C string.
4667:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
4668:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4669:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of first occurrence.
4670:/usr/include/c++/6/bits/basic_string.h ****        *
4671:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
4672:/usr/include/c++/6/bits/basic_string.h ****        *  contained in @a __s within this string.  If found, returns
4673:/usr/include/c++/6/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
4674:/usr/include/c++/6/bits/basic_string.h ****       */
4675:/usr/include/c++/6/bits/basic_string.h ****       size_type
4676:/usr/include/c++/6/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos = 0) const
4677:/usr/include/c++/6/bits/basic_string.h ****       {
4678:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4679:/usr/include/c++/6/bits/basic_string.h **** 	return this->find_first_not_of(__s, __pos, traits_type::length(__s));
4680:/usr/include/c++/6/bits/basic_string.h ****       }
4681:/usr/include/c++/6/bits/basic_string.h **** 
4682:/usr/include/c++/6/bits/basic_string.h ****       /**
4683:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find position of a different character.
4684:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  Character to avoid.
4685:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4686:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of first occurrence.
GAS LISTING /tmp/ccvmoMuv.s 			page 391


4687:/usr/include/c++/6/bits/basic_string.h ****        *
4688:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character
4689:/usr/include/c++/6/bits/basic_string.h ****        *  other than @a __c within this string.  If found, returns the
4690:/usr/include/c++/6/bits/basic_string.h ****        *  index where it was found.  If not found, returns npos.
4691:/usr/include/c++/6/bits/basic_string.h ****       */
4692:/usr/include/c++/6/bits/basic_string.h ****       size_type
4693:/usr/include/c++/6/bits/basic_string.h ****       find_first_not_of(_CharT __c, size_type __pos = 0) const
4694:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT;
4695:/usr/include/c++/6/bits/basic_string.h **** 
4696:/usr/include/c++/6/bits/basic_string.h ****       /**
4697:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find last position of a character not in string.
4698:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
4699:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
4700:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of last occurrence.
4701:/usr/include/c++/6/bits/basic_string.h ****        *
4702:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
4703:/usr/include/c++/6/bits/basic_string.h ****        *  not contained in @a __str within this string.  If found,
4704:/usr/include/c++/6/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
4705:/usr/include/c++/6/bits/basic_string.h ****        *  npos.
4706:/usr/include/c++/6/bits/basic_string.h ****       */
4707:/usr/include/c++/6/bits/basic_string.h ****       size_type
4708:/usr/include/c++/6/bits/basic_string.h ****       find_last_not_of(const basic_string& __str, size_type __pos = npos) const
4709:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
4710:/usr/include/c++/6/bits/basic_string.h ****       { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
4711:/usr/include/c++/6/bits/basic_string.h **** 
4712:/usr/include/c++/6/bits/basic_string.h ****       /**
4713:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find last position of a character not in C substring.
4714:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
4715:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
4716:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters from s to consider.
4717:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of last occurrence.
4718:/usr/include/c++/6/bits/basic_string.h ****        *
4719:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character not
4720:/usr/include/c++/6/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within this string.
4721:/usr/include/c++/6/bits/basic_string.h ****        *  If found, returns the index where it was found.  If not found,
4722:/usr/include/c++/6/bits/basic_string.h ****        *  returns npos.
4723:/usr/include/c++/6/bits/basic_string.h ****       */
4724:/usr/include/c++/6/bits/basic_string.h ****       size_type
4725:/usr/include/c++/6/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos,
4726:/usr/include/c++/6/bits/basic_string.h **** 		       size_type __n) const;
4727:/usr/include/c++/6/bits/basic_string.h ****       /**
4728:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find last position of a character not in C string.
4729:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
4730:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
4731:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of last occurrence.
4732:/usr/include/c++/6/bits/basic_string.h ****        *
4733:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
4734:/usr/include/c++/6/bits/basic_string.h ****        *  not contained in @a __s within this string.  If found,
4735:/usr/include/c++/6/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
4736:/usr/include/c++/6/bits/basic_string.h ****        *  npos.
4737:/usr/include/c++/6/bits/basic_string.h ****       */
4738:/usr/include/c++/6/bits/basic_string.h ****       size_type
4739:/usr/include/c++/6/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos = npos) const
4740:/usr/include/c++/6/bits/basic_string.h ****       {
4741:/usr/include/c++/6/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4742:/usr/include/c++/6/bits/basic_string.h **** 	return this->find_last_not_of(__s, __pos, traits_type::length(__s));
4743:/usr/include/c++/6/bits/basic_string.h ****       }
GAS LISTING /tmp/ccvmoMuv.s 			page 392


4744:/usr/include/c++/6/bits/basic_string.h **** 
4745:/usr/include/c++/6/bits/basic_string.h ****       /**
4746:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Find last position of a different character.
4747:/usr/include/c++/6/bits/basic_string.h ****        *  @param __c  Character to avoid.
4748:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
4749:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Index of last occurrence.
4750:/usr/include/c++/6/bits/basic_string.h ****        *
4751:/usr/include/c++/6/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character other than
4752:/usr/include/c++/6/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index where it was
4753:/usr/include/c++/6/bits/basic_string.h ****        *  found.  If not found, returns npos.
4754:/usr/include/c++/6/bits/basic_string.h ****       */
4755:/usr/include/c++/6/bits/basic_string.h ****       size_type
4756:/usr/include/c++/6/bits/basic_string.h ****       find_last_not_of(_CharT __c, size_type __pos = npos) const
4757:/usr/include/c++/6/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT;
4758:/usr/include/c++/6/bits/basic_string.h **** 
4759:/usr/include/c++/6/bits/basic_string.h ****       /**
4760:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Get a substring.
4761:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of first character (default 0).
4762:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters in substring (default remainder).
4763:/usr/include/c++/6/bits/basic_string.h ****        *  @return  The new string.
4764:/usr/include/c++/6/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
4765:/usr/include/c++/6/bits/basic_string.h ****        *
4766:/usr/include/c++/6/bits/basic_string.h ****        *  Construct and return a new string using the @a __n
4767:/usr/include/c++/6/bits/basic_string.h ****        *  characters starting at @a __pos.  If the string is too
4768:/usr/include/c++/6/bits/basic_string.h ****        *  short, use the remainder of the characters.  If @a __pos is
4769:/usr/include/c++/6/bits/basic_string.h ****        *  beyond the end of the string, out_of_range is thrown.
4770:/usr/include/c++/6/bits/basic_string.h ****       */
4771:/usr/include/c++/6/bits/basic_string.h ****       basic_string
4772:/usr/include/c++/6/bits/basic_string.h ****       substr(size_type __pos = 0, size_type __n = npos) const
4773:/usr/include/c++/6/bits/basic_string.h ****       { return basic_string(*this,
4774:/usr/include/c++/6/bits/basic_string.h **** 			    _M_check(__pos, "basic_string::substr"), __n); }
4775:/usr/include/c++/6/bits/basic_string.h **** 
4776:/usr/include/c++/6/bits/basic_string.h ****       /**
4777:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Compare to a string.
4778:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  String to compare against.
4779:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
4780:/usr/include/c++/6/bits/basic_string.h ****        *
4781:/usr/include/c++/6/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a
4782:/usr/include/c++/6/bits/basic_string.h ****        *  __str, 0 if their values are equivalent, or > 0 if this
4783:/usr/include/c++/6/bits/basic_string.h ****        *  string is ordered after @a __str.  Determines the effective
4784:/usr/include/c++/6/bits/basic_string.h ****        *  length rlen of the strings to compare as the smallest of
4785:/usr/include/c++/6/bits/basic_string.h ****        *  size() and str.size().  The function then compares the two
4786:/usr/include/c++/6/bits/basic_string.h ****        *  strings by calling traits::compare(data(), str.data(),rlen).
4787:/usr/include/c++/6/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
4788:/usr/include/c++/6/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
4789:/usr/include/c++/6/bits/basic_string.h ****       */
4790:/usr/include/c++/6/bits/basic_string.h ****       int
4791:/usr/include/c++/6/bits/basic_string.h ****       compare(const basic_string& __str) const
4792:/usr/include/c++/6/bits/basic_string.h ****       {
4793:/usr/include/c++/6/bits/basic_string.h **** 	const size_type __size = this->size();
4794:/usr/include/c++/6/bits/basic_string.h **** 	const size_type __osize = __str.size();
4795:/usr/include/c++/6/bits/basic_string.h **** 	const size_type __len = std::min(__size, __osize);
4796:/usr/include/c++/6/bits/basic_string.h **** 
4797:/usr/include/c++/6/bits/basic_string.h **** 	int __r = traits_type::compare(_M_data(), __str.data(), __len);
4798:/usr/include/c++/6/bits/basic_string.h **** 	if (!__r)
4799:/usr/include/c++/6/bits/basic_string.h **** 	  __r = _S_compare(__size, __osize);
4800:/usr/include/c++/6/bits/basic_string.h **** 	return __r;
GAS LISTING /tmp/ccvmoMuv.s 			page 393


4801:/usr/include/c++/6/bits/basic_string.h ****       }
4802:/usr/include/c++/6/bits/basic_string.h **** 
4803:/usr/include/c++/6/bits/basic_string.h ****       /**
4804:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Compare substring to a string.
4805:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
4806:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n  Number of characters in substring.
4807:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  String to compare against.
4808:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
4809:/usr/include/c++/6/bits/basic_string.h ****        *
4810:/usr/include/c++/6/bits/basic_string.h ****        *  Form the substring of this string from the @a __n characters
4811:/usr/include/c++/6/bits/basic_string.h ****        *  starting at @a __pos.  Returns an integer < 0 if the
4812:/usr/include/c++/6/bits/basic_string.h ****        *  substring is ordered before @a __str, 0 if their values are
4813:/usr/include/c++/6/bits/basic_string.h ****        *  equivalent, or > 0 if the substring is ordered after @a
4814:/usr/include/c++/6/bits/basic_string.h ****        *  __str.  Determines the effective length rlen of the strings
4815:/usr/include/c++/6/bits/basic_string.h ****        *  to compare as the smallest of the length of the substring
4816:/usr/include/c++/6/bits/basic_string.h ****        *  and @a __str.size().  The function then compares the two
4817:/usr/include/c++/6/bits/basic_string.h ****        *  strings by calling
4818:/usr/include/c++/6/bits/basic_string.h ****        *  traits::compare(substring.data(),str.data(),rlen).  If the
4819:/usr/include/c++/6/bits/basic_string.h ****        *  result of the comparison is nonzero returns it, otherwise
4820:/usr/include/c++/6/bits/basic_string.h ****        *  the shorter one is ordered first.
4821:/usr/include/c++/6/bits/basic_string.h ****       */
4822:/usr/include/c++/6/bits/basic_string.h ****       int
4823:/usr/include/c++/6/bits/basic_string.h ****       compare(size_type __pos, size_type __n, const basic_string& __str) const;
4824:/usr/include/c++/6/bits/basic_string.h **** 
4825:/usr/include/c++/6/bits/basic_string.h ****       /**
4826:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Compare substring to a substring.
4827:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos1  Index of first character of substring.
4828:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
4829:/usr/include/c++/6/bits/basic_string.h ****        *  @param __str  String to compare against.
4830:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos2  Index of first character of substring of str.
4831:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n2  Number of characters in substring of str.
4832:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
4833:/usr/include/c++/6/bits/basic_string.h ****        *
4834:/usr/include/c++/6/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
4835:/usr/include/c++/6/bits/basic_string.h ****        *  characters starting at @a __pos1.  Form the substring of @a
4836:/usr/include/c++/6/bits/basic_string.h ****        *  __str from the @a __n2 characters starting at @a __pos2.
4837:/usr/include/c++/6/bits/basic_string.h ****        *  Returns an integer < 0 if this substring is ordered before
4838:/usr/include/c++/6/bits/basic_string.h ****        *  the substring of @a __str, 0 if their values are equivalent,
4839:/usr/include/c++/6/bits/basic_string.h ****        *  or > 0 if this substring is ordered after the substring of
4840:/usr/include/c++/6/bits/basic_string.h ****        *  @a __str.  Determines the effective length rlen of the
4841:/usr/include/c++/6/bits/basic_string.h ****        *  strings to compare as the smallest of the lengths of the
4842:/usr/include/c++/6/bits/basic_string.h ****        *  substrings.  The function then compares the two strings by
4843:/usr/include/c++/6/bits/basic_string.h ****        *  calling
4844:/usr/include/c++/6/bits/basic_string.h ****        *  traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen).
4845:/usr/include/c++/6/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
4846:/usr/include/c++/6/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
4847:/usr/include/c++/6/bits/basic_string.h ****       */
4848:/usr/include/c++/6/bits/basic_string.h ****       int
4849:/usr/include/c++/6/bits/basic_string.h ****       compare(size_type __pos1, size_type __n1, const basic_string& __str,
4850:/usr/include/c++/6/bits/basic_string.h **** 	      size_type __pos2, size_type __n2) const;
4851:/usr/include/c++/6/bits/basic_string.h **** 
4852:/usr/include/c++/6/bits/basic_string.h ****       /**
4853:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Compare to a C string.
4854:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string to compare against.
4855:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
4856:/usr/include/c++/6/bits/basic_string.h ****        *
4857:/usr/include/c++/6/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a __s, 0 if
GAS LISTING /tmp/ccvmoMuv.s 			page 394


4858:/usr/include/c++/6/bits/basic_string.h ****        *  their values are equivalent, or > 0 if this string is ordered after
4859:/usr/include/c++/6/bits/basic_string.h ****        *  @a __s.  Determines the effective length rlen of the strings to
4860:/usr/include/c++/6/bits/basic_string.h ****        *  compare as the smallest of size() and the length of a string
4861:/usr/include/c++/6/bits/basic_string.h ****        *  constructed from @a __s.  The function then compares the two strings
4862:/usr/include/c++/6/bits/basic_string.h ****        *  by calling traits::compare(data(),s,rlen).  If the result of the
4863:/usr/include/c++/6/bits/basic_string.h ****        *  comparison is nonzero returns it, otherwise the shorter one is
4864:/usr/include/c++/6/bits/basic_string.h ****        *  ordered first.
4865:/usr/include/c++/6/bits/basic_string.h ****       */
4866:/usr/include/c++/6/bits/basic_string.h ****       int
4867:/usr/include/c++/6/bits/basic_string.h ****       compare(const _CharT* __s) const;
4868:/usr/include/c++/6/bits/basic_string.h **** 
4869:/usr/include/c++/6/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
4870:/usr/include/c++/6/bits/basic_string.h ****       // 5 String::compare specification questionable
4871:/usr/include/c++/6/bits/basic_string.h ****       /**
4872:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Compare substring to a C string.
4873:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
4874:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
4875:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  C string to compare against.
4876:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
4877:/usr/include/c++/6/bits/basic_string.h ****        *
4878:/usr/include/c++/6/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
4879:/usr/include/c++/6/bits/basic_string.h ****        *  characters starting at @a pos.  Returns an integer < 0 if
4880:/usr/include/c++/6/bits/basic_string.h ****        *  the substring is ordered before @a __s, 0 if their values
4881:/usr/include/c++/6/bits/basic_string.h ****        *  are equivalent, or > 0 if the substring is ordered after @a
4882:/usr/include/c++/6/bits/basic_string.h ****        *  __s.  Determines the effective length rlen of the strings to
4883:/usr/include/c++/6/bits/basic_string.h ****        *  compare as the smallest of the length of the substring and
4884:/usr/include/c++/6/bits/basic_string.h ****        *  the length of a string constructed from @a __s.  The
4885:/usr/include/c++/6/bits/basic_string.h ****        *  function then compares the two string by calling
4886:/usr/include/c++/6/bits/basic_string.h ****        *  traits::compare(substring.data(),__s,rlen).  If the result of
4887:/usr/include/c++/6/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
4888:/usr/include/c++/6/bits/basic_string.h ****        *  one is ordered first.
4889:/usr/include/c++/6/bits/basic_string.h ****       */
4890:/usr/include/c++/6/bits/basic_string.h ****       int
4891:/usr/include/c++/6/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s) const;
4892:/usr/include/c++/6/bits/basic_string.h **** 
4893:/usr/include/c++/6/bits/basic_string.h ****       /**
4894:/usr/include/c++/6/bits/basic_string.h ****        *  @brief  Compare substring against a character %array.
4895:/usr/include/c++/6/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
4896:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
4897:/usr/include/c++/6/bits/basic_string.h ****        *  @param __s  character %array to compare against.
4898:/usr/include/c++/6/bits/basic_string.h ****        *  @param __n2  Number of characters of s.
4899:/usr/include/c++/6/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
4900:/usr/include/c++/6/bits/basic_string.h ****        *
4901:/usr/include/c++/6/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
4902:/usr/include/c++/6/bits/basic_string.h ****        *  characters starting at @a __pos.  Form a string from the
4903:/usr/include/c++/6/bits/basic_string.h ****        *  first @a __n2 characters of @a __s.  Returns an integer < 0
4904:/usr/include/c++/6/bits/basic_string.h ****        *  if this substring is ordered before the string from @a __s,
4905:/usr/include/c++/6/bits/basic_string.h ****        *  0 if their values are equivalent, or > 0 if this substring
4906:/usr/include/c++/6/bits/basic_string.h ****        *  is ordered after the string from @a __s.  Determines the
4907:/usr/include/c++/6/bits/basic_string.h ****        *  effective length rlen of the strings to compare as the
4908:/usr/include/c++/6/bits/basic_string.h ****        *  smallest of the length of the substring and @a __n2.  The
4909:/usr/include/c++/6/bits/basic_string.h ****        *  function then compares the two strings by calling
4910:/usr/include/c++/6/bits/basic_string.h ****        *  traits::compare(substring.data(),s,rlen).  If the result of
4911:/usr/include/c++/6/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
4912:/usr/include/c++/6/bits/basic_string.h ****        *  one is ordered first.
4913:/usr/include/c++/6/bits/basic_string.h ****        *
4914:/usr/include/c++/6/bits/basic_string.h ****        *  NB: s must have at least n2 characters, &apos;\\0&apos; has
GAS LISTING /tmp/ccvmoMuv.s 			page 395


4915:/usr/include/c++/6/bits/basic_string.h ****        *  no special meaning.
4916:/usr/include/c++/6/bits/basic_string.h ****       */
4917:/usr/include/c++/6/bits/basic_string.h ****       int
4918:/usr/include/c++/6/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s,
4919:/usr/include/c++/6/bits/basic_string.h **** 	      size_type __n2) const;
4920:/usr/include/c++/6/bits/basic_string.h **** 
4921:/usr/include/c++/6/bits/basic_string.h **** # ifdef _GLIBCXX_TM_TS_INTERNAL
4922:/usr/include/c++/6/bits/basic_string.h ****       friend void
4923:/usr/include/c++/6/bits/basic_string.h ****       ::_txnal_cow_string_C1_for_exceptions(void* that, const char* s,
4924:/usr/include/c++/6/bits/basic_string.h **** 					    void* exc);
4925:/usr/include/c++/6/bits/basic_string.h ****       friend const char*
4926:/usr/include/c++/6/bits/basic_string.h ****       ::_txnal_cow_string_c_str(const void *that);
4927:/usr/include/c++/6/bits/basic_string.h ****       friend void
4928:/usr/include/c++/6/bits/basic_string.h ****       ::_txnal_cow_string_D1(void *that);
4929:/usr/include/c++/6/bits/basic_string.h ****       friend void
4930:/usr/include/c++/6/bits/basic_string.h ****       ::_txnal_cow_string_D1_commit(void *that);
4931:/usr/include/c++/6/bits/basic_string.h **** # endif
4932:/usr/include/c++/6/bits/basic_string.h ****   };
4933:/usr/include/c++/6/bits/basic_string.h **** #endif  // !_GLIBCXX_USE_CXX11_ABI
4934:/usr/include/c++/6/bits/basic_string.h **** 
4935:/usr/include/c++/6/bits/basic_string.h ****   // operator+
4936:/usr/include/c++/6/bits/basic_string.h ****   /**
4937:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Concatenate two strings.
4938:/usr/include/c++/6/bits/basic_string.h ****    *  @param __lhs  First string.
4939:/usr/include/c++/6/bits/basic_string.h ****    *  @param __rhs  Last string.
4940:/usr/include/c++/6/bits/basic_string.h ****    *  @return  New string with value of @a __lhs followed by @a __rhs.
4941:/usr/include/c++/6/bits/basic_string.h ****    */
4942:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
4943:/usr/include/c++/6/bits/basic_string.h ****     basic_string<_CharT, _Traits, _Alloc>
4944:/usr/include/c++/6/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
4945:/usr/include/c++/6/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
4946:/usr/include/c++/6/bits/basic_string.h ****     {
4947:/usr/include/c++/6/bits/basic_string.h ****       basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
4948:/usr/include/c++/6/bits/basic_string.h ****       __str.append(__rhs);
4949:/usr/include/c++/6/bits/basic_string.h ****       return __str;
4950:/usr/include/c++/6/bits/basic_string.h ****     }
4951:/usr/include/c++/6/bits/basic_string.h **** 
4952:/usr/include/c++/6/bits/basic_string.h ****   /**
4953:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Concatenate C string and string.
4954:/usr/include/c++/6/bits/basic_string.h ****    *  @param __lhs  First string.
4955:/usr/include/c++/6/bits/basic_string.h ****    *  @param __rhs  Last string.
4956:/usr/include/c++/6/bits/basic_string.h ****    *  @return  New string with value of @a __lhs followed by @a __rhs.
4957:/usr/include/c++/6/bits/basic_string.h ****    */
4958:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
4959:/usr/include/c++/6/bits/basic_string.h ****     basic_string<_CharT,_Traits,_Alloc>
4960:/usr/include/c++/6/bits/basic_string.h ****     operator+(const _CharT* __lhs,
4961:/usr/include/c++/6/bits/basic_string.h **** 	      const basic_string<_CharT,_Traits,_Alloc>& __rhs);
4962:/usr/include/c++/6/bits/basic_string.h **** 
4963:/usr/include/c++/6/bits/basic_string.h ****   /**
4964:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Concatenate character and string.
4965:/usr/include/c++/6/bits/basic_string.h ****    *  @param __lhs  First string.
4966:/usr/include/c++/6/bits/basic_string.h ****    *  @param __rhs  Last string.
4967:/usr/include/c++/6/bits/basic_string.h ****    *  @return  New string with @a __lhs followed by @a __rhs.
4968:/usr/include/c++/6/bits/basic_string.h ****    */
4969:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
4970:/usr/include/c++/6/bits/basic_string.h ****     basic_string<_CharT,_Traits,_Alloc>
4971:/usr/include/c++/6/bits/basic_string.h ****     operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);
GAS LISTING /tmp/ccvmoMuv.s 			page 396


4972:/usr/include/c++/6/bits/basic_string.h **** 
4973:/usr/include/c++/6/bits/basic_string.h ****   /**
4974:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Concatenate string and C string.
4975:/usr/include/c++/6/bits/basic_string.h ****    *  @param __lhs  First string.
4976:/usr/include/c++/6/bits/basic_string.h ****    *  @param __rhs  Last string.
4977:/usr/include/c++/6/bits/basic_string.h ****    *  @return  New string with @a __lhs followed by @a __rhs.
4978:/usr/include/c++/6/bits/basic_string.h ****    */
4979:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
4980:/usr/include/c++/6/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
4981:/usr/include/c++/6/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
4982:/usr/include/c++/6/bits/basic_string.h **** 	      const _CharT* __rhs)
4983:/usr/include/c++/6/bits/basic_string.h ****     {
4984:/usr/include/c++/6/bits/basic_string.h ****       basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
4985:/usr/include/c++/6/bits/basic_string.h ****       __str.append(__rhs);
4986:/usr/include/c++/6/bits/basic_string.h ****       return __str;
4987:/usr/include/c++/6/bits/basic_string.h ****     }
4988:/usr/include/c++/6/bits/basic_string.h **** 
4989:/usr/include/c++/6/bits/basic_string.h ****   /**
4990:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Concatenate string and character.
4991:/usr/include/c++/6/bits/basic_string.h ****    *  @param __lhs  First string.
4992:/usr/include/c++/6/bits/basic_string.h ****    *  @param __rhs  Last string.
4993:/usr/include/c++/6/bits/basic_string.h ****    *  @return  New string with @a __lhs followed by @a __rhs.
4994:/usr/include/c++/6/bits/basic_string.h ****    */
4995:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
4996:/usr/include/c++/6/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
4997:/usr/include/c++/6/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
4998:/usr/include/c++/6/bits/basic_string.h ****     {
4999:/usr/include/c++/6/bits/basic_string.h ****       typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
5000:/usr/include/c++/6/bits/basic_string.h ****       typedef typename __string_type::size_type		__size_type;
5001:/usr/include/c++/6/bits/basic_string.h ****       __string_type __str(__lhs);
5002:/usr/include/c++/6/bits/basic_string.h ****       __str.append(__size_type(1), __rhs);
5003:/usr/include/c++/6/bits/basic_string.h ****       return __str;
5004:/usr/include/c++/6/bits/basic_string.h ****     }
5005:/usr/include/c++/6/bits/basic_string.h **** 
5006:/usr/include/c++/6/bits/basic_string.h **** #if __cplusplus >= 201103L
5007:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5008:/usr/include/c++/6/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
5009:/usr/include/c++/6/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
5010:/usr/include/c++/6/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
5011:/usr/include/c++/6/bits/basic_string.h ****     { return std::move(__lhs.append(__rhs)); }
5012:/usr/include/c++/6/bits/basic_string.h **** 
5013:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5014:/usr/include/c++/6/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
5015:/usr/include/c++/6/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
5016:/usr/include/c++/6/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
5017:/usr/include/c++/6/bits/basic_string.h ****     { return std::move(__rhs.insert(0, __lhs)); }
5018:/usr/include/c++/6/bits/basic_string.h **** 
5019:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5020:/usr/include/c++/6/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
5021:/usr/include/c++/6/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
5022:/usr/include/c++/6/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
5023:/usr/include/c++/6/bits/basic_string.h ****     {
5024:/usr/include/c++/6/bits/basic_string.h ****       const auto __size = __lhs.size() + __rhs.size();
5025:/usr/include/c++/6/bits/basic_string.h ****       const bool __cond = (__size > __lhs.capacity()
5026:/usr/include/c++/6/bits/basic_string.h **** 			   && __size <= __rhs.capacity());
5027:/usr/include/c++/6/bits/basic_string.h ****       return __cond ? std::move(__rhs.insert(0, __lhs))
5028:/usr/include/c++/6/bits/basic_string.h **** 	            : std::move(__lhs.append(__rhs));
GAS LISTING /tmp/ccvmoMuv.s 			page 397


5029:/usr/include/c++/6/bits/basic_string.h ****     }
5030:/usr/include/c++/6/bits/basic_string.h **** 
5031:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5032:/usr/include/c++/6/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
5033:/usr/include/c++/6/bits/basic_string.h ****     operator+(const _CharT* __lhs,
5034:/usr/include/c++/6/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
5035:/usr/include/c++/6/bits/basic_string.h ****     { return std::move(__rhs.insert(0, __lhs)); }
5036:/usr/include/c++/6/bits/basic_string.h **** 
5037:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5038:/usr/include/c++/6/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
5039:/usr/include/c++/6/bits/basic_string.h ****     operator+(_CharT __lhs,
5040:/usr/include/c++/6/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
5041:/usr/include/c++/6/bits/basic_string.h ****     { return std::move(__rhs.insert(0, 1, __lhs)); }
5042:/usr/include/c++/6/bits/basic_string.h **** 
5043:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5044:/usr/include/c++/6/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
5045:/usr/include/c++/6/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
5046:/usr/include/c++/6/bits/basic_string.h **** 	      const _CharT* __rhs)
5047:/usr/include/c++/6/bits/basic_string.h ****     { return std::move(__lhs.append(__rhs)); }
5048:/usr/include/c++/6/bits/basic_string.h **** 
5049:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5050:/usr/include/c++/6/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
5051:/usr/include/c++/6/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
5052:/usr/include/c++/6/bits/basic_string.h **** 	      _CharT __rhs)
5053:/usr/include/c++/6/bits/basic_string.h ****     { return std::move(__lhs.append(1, __rhs)); }
5054:/usr/include/c++/6/bits/basic_string.h **** #endif
5055:/usr/include/c++/6/bits/basic_string.h **** 
5056:/usr/include/c++/6/bits/basic_string.h ****   // operator ==
5057:/usr/include/c++/6/bits/basic_string.h ****   /**
5058:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Test equivalence of two strings.
5059:/usr/include/c++/6/bits/basic_string.h ****    *  @param __lhs  First string.
5060:/usr/include/c++/6/bits/basic_string.h ****    *  @param __rhs  Second string.
5061:/usr/include/c++/6/bits/basic_string.h ****    *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
5062:/usr/include/c++/6/bits/basic_string.h ****    */
5063:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5064:/usr/include/c++/6/bits/basic_string.h ****     inline bool
5065:/usr/include/c++/6/bits/basic_string.h ****     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
5066:/usr/include/c++/6/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
5067:/usr/include/c++/6/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT
5068:/usr/include/c++/6/bits/basic_string.h ****     { return __lhs.compare(__rhs) == 0; }
5069:/usr/include/c++/6/bits/basic_string.h **** 
5070:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT>
5071:/usr/include/c++/6/bits/basic_string.h ****     inline
5072:/usr/include/c++/6/bits/basic_string.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
5073:/usr/include/c++/6/bits/basic_string.h ****     operator==(const basic_string<_CharT>& __lhs,
5074:/usr/include/c++/6/bits/basic_string.h **** 	       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT
5075:/usr/include/c++/6/bits/basic_string.h ****     { return (__lhs.size() == __rhs.size()
5076:/usr/include/c++/6/bits/basic_string.h **** 	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
5077:/usr/include/c++/6/bits/basic_string.h **** 						    __lhs.size())); }
5078:/usr/include/c++/6/bits/basic_string.h **** 
5079:/usr/include/c++/6/bits/basic_string.h ****   /**
5080:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Test equivalence of C string and string.
5081:/usr/include/c++/6/bits/basic_string.h ****    *  @param __lhs  C string.
5082:/usr/include/c++/6/bits/basic_string.h ****    *  @param __rhs  String.
5083:/usr/include/c++/6/bits/basic_string.h ****    *  @return  True if @a __rhs.compare(@a __lhs) == 0.  False otherwise.
5084:/usr/include/c++/6/bits/basic_string.h ****    */
5085:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
GAS LISTING /tmp/ccvmoMuv.s 			page 398


5086:/usr/include/c++/6/bits/basic_string.h ****     inline bool
5087:/usr/include/c++/6/bits/basic_string.h ****     operator==(const _CharT* __lhs,
5088:/usr/include/c++/6/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
5089:/usr/include/c++/6/bits/basic_string.h ****     { return __rhs.compare(__lhs) == 0; }
5090:/usr/include/c++/6/bits/basic_string.h **** 
5091:/usr/include/c++/6/bits/basic_string.h ****   /**
5092:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Test equivalence of string and C string.
5093:/usr/include/c++/6/bits/basic_string.h ****    *  @param __lhs  String.
5094:/usr/include/c++/6/bits/basic_string.h ****    *  @param __rhs  C string.
5095:/usr/include/c++/6/bits/basic_string.h ****    *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
5096:/usr/include/c++/6/bits/basic_string.h ****    */
5097:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5098:/usr/include/c++/6/bits/basic_string.h ****     inline bool
5099:/usr/include/c++/6/bits/basic_string.h ****     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
5100:/usr/include/c++/6/bits/basic_string.h **** 	       const _CharT* __rhs)
5101:/usr/include/c++/6/bits/basic_string.h ****     { return __lhs.compare(__rhs) == 0; }
5102:/usr/include/c++/6/bits/basic_string.h **** 
5103:/usr/include/c++/6/bits/basic_string.h ****   // operator !=
5104:/usr/include/c++/6/bits/basic_string.h ****   /**
5105:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Test difference of two strings.
5106:/usr/include/c++/6/bits/basic_string.h ****    *  @param __lhs  First string.
5107:/usr/include/c++/6/bits/basic_string.h ****    *  @param __rhs  Second string.
5108:/usr/include/c++/6/bits/basic_string.h ****    *  @return  True if @a __lhs.compare(@a __rhs) != 0.  False otherwise.
5109:/usr/include/c++/6/bits/basic_string.h ****    */
5110:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5111:/usr/include/c++/6/bits/basic_string.h ****     inline bool
5112:/usr/include/c++/6/bits/basic_string.h ****     operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
5113:/usr/include/c++/6/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
5114:/usr/include/c++/6/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT
5115:/usr/include/c++/6/bits/basic_string.h ****     { return !(__lhs == __rhs); }
5116:/usr/include/c++/6/bits/basic_string.h **** 
5117:/usr/include/c++/6/bits/basic_string.h ****   /**
5118:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Test difference of C string and string.
5119:/usr/include/c++/6/bits/basic_string.h ****    *  @param __lhs  C string.
5120:/usr/include/c++/6/bits/basic_string.h ****    *  @param __rhs  String.
5121:/usr/include/c++/6/bits/basic_string.h ****    *  @return  True if @a __rhs.compare(@a __lhs) != 0.  False otherwise.
5122:/usr/include/c++/6/bits/basic_string.h ****    */
5123:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5124:/usr/include/c++/6/bits/basic_string.h ****     inline bool
5125:/usr/include/c++/6/bits/basic_string.h ****     operator!=(const _CharT* __lhs,
5126:/usr/include/c++/6/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
5127:/usr/include/c++/6/bits/basic_string.h ****     { return !(__lhs == __rhs); }
5128:/usr/include/c++/6/bits/basic_string.h **** 
5129:/usr/include/c++/6/bits/basic_string.h ****   /**
5130:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Test difference of string and C string.
5131:/usr/include/c++/6/bits/basic_string.h ****    *  @param __lhs  String.
5132:/usr/include/c++/6/bits/basic_string.h ****    *  @param __rhs  C string.
5133:/usr/include/c++/6/bits/basic_string.h ****    *  @return  True if @a __lhs.compare(@a __rhs) != 0.  False otherwise.
5134:/usr/include/c++/6/bits/basic_string.h ****    */
5135:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5136:/usr/include/c++/6/bits/basic_string.h ****     inline bool
5137:/usr/include/c++/6/bits/basic_string.h ****     operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
5138:/usr/include/c++/6/bits/basic_string.h **** 	       const _CharT* __rhs)
5139:/usr/include/c++/6/bits/basic_string.h ****     { return !(__lhs == __rhs); }
5140:/usr/include/c++/6/bits/basic_string.h **** 
5141:/usr/include/c++/6/bits/basic_string.h ****   // operator <
5142:/usr/include/c++/6/bits/basic_string.h ****   /**
GAS LISTING /tmp/ccvmoMuv.s 			page 399


5143:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Test if string precedes string.
5144:/usr/include/c++/6/bits/basic_string.h ****    *  @param __lhs  First string.
5145:/usr/include/c++/6/bits/basic_string.h ****    *  @param __rhs  Second string.
5146:/usr/include/c++/6/bits/basic_string.h ****    *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
5147:/usr/include/c++/6/bits/basic_string.h ****    */
5148:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5149:/usr/include/c++/6/bits/basic_string.h ****     inline bool
5150:/usr/include/c++/6/bits/basic_string.h ****     operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
5151:/usr/include/c++/6/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
5152:/usr/include/c++/6/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT
5153:/usr/include/c++/6/bits/basic_string.h ****     { return __lhs.compare(__rhs) < 0; }
5154:/usr/include/c++/6/bits/basic_string.h **** 
5155:/usr/include/c++/6/bits/basic_string.h ****   /**
5156:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Test if string precedes C string.
5157:/usr/include/c++/6/bits/basic_string.h ****    *  @param __lhs  String.
5158:/usr/include/c++/6/bits/basic_string.h ****    *  @param __rhs  C string.
5159:/usr/include/c++/6/bits/basic_string.h ****    *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
5160:/usr/include/c++/6/bits/basic_string.h ****    */
5161:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5162:/usr/include/c++/6/bits/basic_string.h ****     inline bool
5163:/usr/include/c++/6/bits/basic_string.h ****     operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
5164:/usr/include/c++/6/bits/basic_string.h **** 	      const _CharT* __rhs)
5165:/usr/include/c++/6/bits/basic_string.h ****     { return __lhs.compare(__rhs) < 0; }
5166:/usr/include/c++/6/bits/basic_string.h **** 
5167:/usr/include/c++/6/bits/basic_string.h ****   /**
5168:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Test if C string precedes string.
5169:/usr/include/c++/6/bits/basic_string.h ****    *  @param __lhs  C string.
5170:/usr/include/c++/6/bits/basic_string.h ****    *  @param __rhs  String.
5171:/usr/include/c++/6/bits/basic_string.h ****    *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
5172:/usr/include/c++/6/bits/basic_string.h ****    */
5173:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5174:/usr/include/c++/6/bits/basic_string.h ****     inline bool
5175:/usr/include/c++/6/bits/basic_string.h ****     operator<(const _CharT* __lhs,
5176:/usr/include/c++/6/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
5177:/usr/include/c++/6/bits/basic_string.h ****     { return __rhs.compare(__lhs) > 0; }
5178:/usr/include/c++/6/bits/basic_string.h **** 
5179:/usr/include/c++/6/bits/basic_string.h ****   // operator >
5180:/usr/include/c++/6/bits/basic_string.h ****   /**
5181:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Test if string follows string.
5182:/usr/include/c++/6/bits/basic_string.h ****    *  @param __lhs  First string.
5183:/usr/include/c++/6/bits/basic_string.h ****    *  @param __rhs  Second string.
5184:/usr/include/c++/6/bits/basic_string.h ****    *  @return  True if @a __lhs follows @a __rhs.  False otherwise.
5185:/usr/include/c++/6/bits/basic_string.h ****    */
5186:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5187:/usr/include/c++/6/bits/basic_string.h ****     inline bool
5188:/usr/include/c++/6/bits/basic_string.h ****     operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
5189:/usr/include/c++/6/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
5190:/usr/include/c++/6/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT
5191:/usr/include/c++/6/bits/basic_string.h ****     { return __lhs.compare(__rhs) > 0; }
5192:/usr/include/c++/6/bits/basic_string.h **** 
5193:/usr/include/c++/6/bits/basic_string.h ****   /**
5194:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Test if string follows C string.
5195:/usr/include/c++/6/bits/basic_string.h ****    *  @param __lhs  String.
5196:/usr/include/c++/6/bits/basic_string.h ****    *  @param __rhs  C string.
5197:/usr/include/c++/6/bits/basic_string.h ****    *  @return  True if @a __lhs follows @a __rhs.  False otherwise.
5198:/usr/include/c++/6/bits/basic_string.h ****    */
5199:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
GAS LISTING /tmp/ccvmoMuv.s 			page 400


5200:/usr/include/c++/6/bits/basic_string.h ****     inline bool
5201:/usr/include/c++/6/bits/basic_string.h ****     operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
5202:/usr/include/c++/6/bits/basic_string.h **** 	      const _CharT* __rhs)
5203:/usr/include/c++/6/bits/basic_string.h ****     { return __lhs.compare(__rhs) > 0; }
5204:/usr/include/c++/6/bits/basic_string.h **** 
5205:/usr/include/c++/6/bits/basic_string.h ****   /**
5206:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Test if C string follows string.
5207:/usr/include/c++/6/bits/basic_string.h ****    *  @param __lhs  C string.
5208:/usr/include/c++/6/bits/basic_string.h ****    *  @param __rhs  String.
5209:/usr/include/c++/6/bits/basic_string.h ****    *  @return  True if @a __lhs follows @a __rhs.  False otherwise.
5210:/usr/include/c++/6/bits/basic_string.h ****    */
5211:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5212:/usr/include/c++/6/bits/basic_string.h ****     inline bool
5213:/usr/include/c++/6/bits/basic_string.h ****     operator>(const _CharT* __lhs,
5214:/usr/include/c++/6/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
5215:/usr/include/c++/6/bits/basic_string.h ****     { return __rhs.compare(__lhs) < 0; }
5216:/usr/include/c++/6/bits/basic_string.h **** 
5217:/usr/include/c++/6/bits/basic_string.h ****   // operator <=
5218:/usr/include/c++/6/bits/basic_string.h ****   /**
5219:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Test if string doesn't follow string.
5220:/usr/include/c++/6/bits/basic_string.h ****    *  @param __lhs  First string.
5221:/usr/include/c++/6/bits/basic_string.h ****    *  @param __rhs  Second string.
5222:/usr/include/c++/6/bits/basic_string.h ****    *  @return  True if @a __lhs doesn't follow @a __rhs.  False otherwise.
5223:/usr/include/c++/6/bits/basic_string.h ****    */
5224:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5225:/usr/include/c++/6/bits/basic_string.h ****     inline bool
5226:/usr/include/c++/6/bits/basic_string.h ****     operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
5227:/usr/include/c++/6/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
5228:/usr/include/c++/6/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT
5229:/usr/include/c++/6/bits/basic_string.h ****     { return __lhs.compare(__rhs) <= 0; }
5230:/usr/include/c++/6/bits/basic_string.h **** 
5231:/usr/include/c++/6/bits/basic_string.h ****   /**
5232:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Test if string doesn't follow C string.
5233:/usr/include/c++/6/bits/basic_string.h ****    *  @param __lhs  String.
5234:/usr/include/c++/6/bits/basic_string.h ****    *  @param __rhs  C string.
5235:/usr/include/c++/6/bits/basic_string.h ****    *  @return  True if @a __lhs doesn't follow @a __rhs.  False otherwise.
5236:/usr/include/c++/6/bits/basic_string.h ****    */
5237:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5238:/usr/include/c++/6/bits/basic_string.h ****     inline bool
5239:/usr/include/c++/6/bits/basic_string.h ****     operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
5240:/usr/include/c++/6/bits/basic_string.h **** 	       const _CharT* __rhs)
5241:/usr/include/c++/6/bits/basic_string.h ****     { return __lhs.compare(__rhs) <= 0; }
5242:/usr/include/c++/6/bits/basic_string.h **** 
5243:/usr/include/c++/6/bits/basic_string.h ****   /**
5244:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Test if C string doesn't follow string.
5245:/usr/include/c++/6/bits/basic_string.h ****    *  @param __lhs  C string.
5246:/usr/include/c++/6/bits/basic_string.h ****    *  @param __rhs  String.
5247:/usr/include/c++/6/bits/basic_string.h ****    *  @return  True if @a __lhs doesn't follow @a __rhs.  False otherwise.
5248:/usr/include/c++/6/bits/basic_string.h ****    */
5249:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5250:/usr/include/c++/6/bits/basic_string.h ****     inline bool
5251:/usr/include/c++/6/bits/basic_string.h ****     operator<=(const _CharT* __lhs,
5252:/usr/include/c++/6/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
5253:/usr/include/c++/6/bits/basic_string.h ****     { return __rhs.compare(__lhs) >= 0; }
5254:/usr/include/c++/6/bits/basic_string.h **** 
5255:/usr/include/c++/6/bits/basic_string.h ****   // operator >=
5256:/usr/include/c++/6/bits/basic_string.h ****   /**
GAS LISTING /tmp/ccvmoMuv.s 			page 401


5257:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Test if string doesn't precede string.
5258:/usr/include/c++/6/bits/basic_string.h ****    *  @param __lhs  First string.
5259:/usr/include/c++/6/bits/basic_string.h ****    *  @param __rhs  Second string.
5260:/usr/include/c++/6/bits/basic_string.h ****    *  @return  True if @a __lhs doesn't precede @a __rhs.  False otherwise.
5261:/usr/include/c++/6/bits/basic_string.h ****    */
5262:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5263:/usr/include/c++/6/bits/basic_string.h ****     inline bool
5264:/usr/include/c++/6/bits/basic_string.h ****     operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
5265:/usr/include/c++/6/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
5266:/usr/include/c++/6/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT
5267:/usr/include/c++/6/bits/basic_string.h ****     { return __lhs.compare(__rhs) >= 0; }
5268:/usr/include/c++/6/bits/basic_string.h **** 
5269:/usr/include/c++/6/bits/basic_string.h ****   /**
5270:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Test if string doesn't precede C string.
5271:/usr/include/c++/6/bits/basic_string.h ****    *  @param __lhs  String.
5272:/usr/include/c++/6/bits/basic_string.h ****    *  @param __rhs  C string.
5273:/usr/include/c++/6/bits/basic_string.h ****    *  @return  True if @a __lhs doesn't precede @a __rhs.  False otherwise.
5274:/usr/include/c++/6/bits/basic_string.h ****    */
5275:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5276:/usr/include/c++/6/bits/basic_string.h ****     inline bool
5277:/usr/include/c++/6/bits/basic_string.h ****     operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
5278:/usr/include/c++/6/bits/basic_string.h **** 	       const _CharT* __rhs)
5279:/usr/include/c++/6/bits/basic_string.h ****     { return __lhs.compare(__rhs) >= 0; }
5280:/usr/include/c++/6/bits/basic_string.h **** 
5281:/usr/include/c++/6/bits/basic_string.h ****   /**
5282:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Test if C string doesn't precede string.
5283:/usr/include/c++/6/bits/basic_string.h ****    *  @param __lhs  C string.
5284:/usr/include/c++/6/bits/basic_string.h ****    *  @param __rhs  String.
5285:/usr/include/c++/6/bits/basic_string.h ****    *  @return  True if @a __lhs doesn't precede @a __rhs.  False otherwise.
5286:/usr/include/c++/6/bits/basic_string.h ****    */
5287:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5288:/usr/include/c++/6/bits/basic_string.h ****     inline bool
5289:/usr/include/c++/6/bits/basic_string.h ****     operator>=(const _CharT* __lhs,
5290:/usr/include/c++/6/bits/basic_string.h **** 	     const basic_string<_CharT, _Traits, _Alloc>& __rhs)
5291:/usr/include/c++/6/bits/basic_string.h ****     { return __rhs.compare(__lhs) <= 0; }
5292:/usr/include/c++/6/bits/basic_string.h **** 
5293:/usr/include/c++/6/bits/basic_string.h ****   /**
5294:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Swap contents of two strings.
5295:/usr/include/c++/6/bits/basic_string.h ****    *  @param __lhs  First string.
5296:/usr/include/c++/6/bits/basic_string.h ****    *  @param __rhs  Second string.
5297:/usr/include/c++/6/bits/basic_string.h ****    *
5298:/usr/include/c++/6/bits/basic_string.h ****    *  Exchanges the contents of @a __lhs and @a __rhs in constant time.
5299:/usr/include/c++/6/bits/basic_string.h ****    */
5300:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5301:/usr/include/c++/6/bits/basic_string.h ****     inline void
5302:/usr/include/c++/6/bits/basic_string.h ****     swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
5303:/usr/include/c++/6/bits/basic_string.h **** 	 basic_string<_CharT, _Traits, _Alloc>& __rhs)
5304:/usr/include/c++/6/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT_IF(noexcept(__lhs.swap(__rhs)))
5305:/usr/include/c++/6/bits/basic_string.h ****     { __lhs.swap(__rhs); }
5306:/usr/include/c++/6/bits/basic_string.h **** 
5307:/usr/include/c++/6/bits/basic_string.h **** 
5308:/usr/include/c++/6/bits/basic_string.h ****   /**
5309:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Read stream into a string.
5310:/usr/include/c++/6/bits/basic_string.h ****    *  @param __is  Input stream.
5311:/usr/include/c++/6/bits/basic_string.h ****    *  @param __str  Buffer to store into.
5312:/usr/include/c++/6/bits/basic_string.h ****    *  @return  Reference to the input stream.
5313:/usr/include/c++/6/bits/basic_string.h ****    *
GAS LISTING /tmp/ccvmoMuv.s 			page 402


5314:/usr/include/c++/6/bits/basic_string.h ****    *  Stores characters from @a __is into @a __str until whitespace is
5315:/usr/include/c++/6/bits/basic_string.h ****    *  found, the end of the stream is encountered, or str.max_size()
5316:/usr/include/c++/6/bits/basic_string.h ****    *  is reached.  If is.width() is non-zero, that is the limit on the
5317:/usr/include/c++/6/bits/basic_string.h ****    *  number of characters stored into @a __str.  Any previous
5318:/usr/include/c++/6/bits/basic_string.h ****    *  contents of @a __str are erased.
5319:/usr/include/c++/6/bits/basic_string.h ****    */
5320:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5321:/usr/include/c++/6/bits/basic_string.h ****     basic_istream<_CharT, _Traits>&
5322:/usr/include/c++/6/bits/basic_string.h ****     operator>>(basic_istream<_CharT, _Traits>& __is,
5323:/usr/include/c++/6/bits/basic_string.h **** 	       basic_string<_CharT, _Traits, _Alloc>& __str);
5324:/usr/include/c++/6/bits/basic_string.h **** 
5325:/usr/include/c++/6/bits/basic_string.h ****   template<>
5326:/usr/include/c++/6/bits/basic_string.h ****     basic_istream<char>&
5327:/usr/include/c++/6/bits/basic_string.h ****     operator>>(basic_istream<char>& __is, basic_string<char>& __str);
5328:/usr/include/c++/6/bits/basic_string.h **** 
5329:/usr/include/c++/6/bits/basic_string.h ****   /**
5330:/usr/include/c++/6/bits/basic_string.h ****    *  @brief  Write string to a stream.
5331:/usr/include/c++/6/bits/basic_string.h ****    *  @param __os  Output stream.
5332:/usr/include/c++/6/bits/basic_string.h ****    *  @param __str  String to write out.
5333:/usr/include/c++/6/bits/basic_string.h ****    *  @return  Reference to the output stream.
5334:/usr/include/c++/6/bits/basic_string.h ****    *
5335:/usr/include/c++/6/bits/basic_string.h ****    *  Output characters of @a __str into os following the same rules as for
5336:/usr/include/c++/6/bits/basic_string.h ****    *  writing a C string.
5337:/usr/include/c++/6/bits/basic_string.h ****    */
5338:/usr/include/c++/6/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5339:/usr/include/c++/6/bits/basic_string.h ****     inline basic_ostream<_CharT, _Traits>&
5340:/usr/include/c++/6/bits/basic_string.h ****     operator<<(basic_ostream<_CharT, _Traits>& __os,
5341:/usr/include/c++/6/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __str)
5342:/usr/include/c++/6/bits/basic_string.h ****     {
5343:/usr/include/c++/6/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
5344:/usr/include/c++/6/bits/basic_string.h ****       // 586. string inserter not a formatted function
5345:/usr/include/c++/6/bits/basic_string.h ****       return __ostream_insert(__os, __str.data(), __str.size());
 4023              		.loc 10 5345 0
 4024 0249 488B5424 		movq	40(%rsp), %rdx
 4024      28
 4025 024e 488B7424 		movq	32(%rsp), %rsi
 4025      20
 4026 0253 4C89EF   		movq	%r13, %rdi
 4027              	.LEHB18:
 4028 0256 E8000000 		call	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT
 4028      00
 4029              	.LVL343:
 4030              	.LEHE18:
 4031 025b 488B7C24 		movq	32(%rsp), %rdi
 4031      20
 4032              	.LVL344:
 4033              	.LBE14216:
 4034              	.LBE14215:
 4035              	.LBB14217:
 4036              	.LBB14218:
 4037              	.LBB14219:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 4038              		.loc 10 180 0
 4039 0260 4C39E7   		cmpq	%r12, %rdi
 4040 0263 7405     		je	.L231
 4041              	.LVL345:
 4042              	.LBB14220:
GAS LISTING /tmp/ccvmoMuv.s 			page 403


 4043              	.LBB14221:
 4044              	.LBB14222:
 4045              	.LBB14223:
 4046              		.loc 12 110 0
 4047 0265 E8000000 		call	_ZdlPv@PLT
 4047      00
 4048              	.LVL346:
 4049              	.L231:
 4050              	.LBE14223:
 4051              	.LBE14222:
 4052              	.LBE14221:
 4053              	.LBE14220:
 4054              	.LBE14219:
 4055              	.LBE14218:
 4056              	.LBE14217:
 4057              	.LBE14120:
 4058              	.LBB14235:
 4059              	.LBB14236:
 288:/usr/include/c++/6/bits/stl_tree.h **** 	return *this;
 4060              		.loc 19 288 0
 4061 026a 4889DF   		movq	%rbx, %rdi
 4062 026d E8000000 		call	_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base@PLT
 4062      00
 4063              	.LVL347:
 4064              	.LBE14236:
 4065              	.LBE14235:
 137:/usr/include/boost/exception/info.hpp ****                         {
 4066              		.loc 3 137 0
 4067 0272 48390424 		cmpq	%rax, (%rsp)
 4068 0276 7458     		je	.L233
 4069              	.LVL348:
 4070 0278 488B7028 		movq	40(%rax), %rsi
 4071 027c 4889C3   		movq	%rax, %rbx
 4072              	.LBB14237:
 4073              	.LBB14224:
 4074              	.LBB14125:
 4075              		.loc 27 703 0
 4076 027f 4885F6   		testq	%rsi, %rsi
 4077 0282 0F844103 		je	.L222
 4077      0000
 4078              	.LVL349:
 4079              	.L221:
 4080              	.LBE14125:
 4081              	.LBE14224:
 140:/usr/include/boost/exception/info.hpp ****                         }
 4082              		.loc 3 140 0
 4083 0288 488B06   		movq	(%rsi), %rax
 4084 028b 488D0D00 		leaq	_ZNK5boost10error_infoINS_27tag_original_exception_typeEPKSt9type_infoE17name_value_stringB5c
 4084      000000
 4085 0292 488B00   		movq	(%rax), %rax
 4086 0295 4839C8   		cmpq	%rcx, %rax
 4087 0298 0F8442FF 		je	.L277
 4087      FFFF
 4088 029e 4C89F7   		movq	%r14, %rdi
 4089              	.LEHB19:
 4090 02a1 FFD0     		call	*%rax
 4091              	.LVL350:
GAS LISTING /tmp/ccvmoMuv.s 			page 404


 4092              	.LEHE19:
 4093 02a3 EBA4     		jmp	.L226
 4094              	.LVL351:
 4095              		.p2align 4,,10
 4096 02a5 0F1F00   		.p2align 3
 4097              	.L225:
 4098              	.LBB14225:
 4099              	.LBB14213:
 4100              	.LBB14211:
 4101              	.LBB14209:
 4102              	.LBB14207:
 4103              	.LBB14205:
 4104              	.LBB14203:
 4105              	.LBB14192:
 4106              	.LBB14185:
 4107              	.LBB14161:
 4108              	.LBB14160:
 456:/usr/include/c++/6/bits/basic_string.h **** 
 4109              		.loc 10 456 0
 4110 02a8 4D85FF   		testq	%r15, %r15
 4111 02ab 48C7C2FF 		movq	$-1, %rdx
 4111      FFFFFF
 4112 02b2 740C     		je	.L227
 4113              	.LVL352:
 4114              	.LBB14154:
 4115              	.LBB14155:
 267:/usr/include/c++/6/bits/char_traits.h **** 
 4116              		.loc 9 267 0
 4117 02b4 4C89FF   		movq	%r15, %rdi
 4118 02b7 E8000000 		call	strlen@PLT
 4118      00
 4119              	.LVL353:
 4120              	.LBE14155:
 4121              	.LBE14154:
 456:/usr/include/c++/6/bits/basic_string.h **** 
 4122              		.loc 10 456 0
 4123 02bc 498D1407 		leaq	(%r15,%rax), %rdx
 4124              	.L227:
 4125              	.LVL354:
 4126              	.LBB14156:
 4127              	.LBB14157:
 4128              	.LBB14158:
 4129              	.LBB14159:
 196:/usr/include/c++/6/bits/basic_string.h **** 	}
 4130              		.loc 10 196 0
 4131 02c0 4C89FE   		movq	%r15, %rsi
 4132 02c3 4C89F7   		movq	%r14, %rdi
 4133              	.LEHB20:
 4134 02c6 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_it
 4134      00
 4135              	.LVL355:
 4136              	.LEHE20:
 4137 02cb E971FFFF 		jmp	.L228
 4137      FF
 4138              	.LVL356:
 4139              		.p2align 4,,10
 4140              		.p2align 3
GAS LISTING /tmp/ccvmoMuv.s 			page 405


 4141              	.L233:
 4142              	.LBE14159:
 4143              	.LBE14158:
 4144              	.LBE14157:
 4145              	.LBE14156:
 4146              	.LBE14160:
 4147              	.LBE14161:
 4148              	.LBE14185:
 4149              	.LBE14192:
 4150              	.LBE14203:
 4151              	.LBE14205:
 4152              	.LBE14207:
 4153              	.LBE14209:
 4154              	.LBE14211:
 4155              	.LBE14213:
 4156              	.LBE14225:
 4157              	.LBE14237:
 4158              	.LBE14116:
 142:/usr/include/boost/exception/info.hpp ****                     }
 4159              		.loc 3 142 0
 4160 02d0 488B4424 		movq	24(%rsp), %rax
 4160      18
 4161              	.LBB14240:
 4162              	.LBB14241:
 4163              	.LBB14242:
 4164              	.LBB14243:
 4165              	.LBB14244:
 4166              	.LBB14245:
 110:/usr/include/c++/6/bits/basic_string.h **** 
 4167              		.loc 10 110 0
 4168 02d5 488D5C24 		leaq	64(%rsp), %rbx
 4168      40
 4169              	.LBE14245:
 4170              	.LBE14244:
 4171              	.LBB14247:
 4172              	.LBB14248:
 4173              	.LBB14249:
 132:/usr/include/c++/6/bits/basic_string.h **** 
 4174              		.loc 10 132 0
 4175 02da 48C74424 		movq	$0, 72(%rsp)
 4175      48000000 
 4175      00
 4176              	.LBE14249:
 4177              	.LBE14248:
 4178              	.LBB14250:
 4179              	.LBB14251:
 243:/usr/include/c++/6/bits/char_traits.h **** 
 4180              		.loc 9 243 0
 4181 02e3 C6442450 		movb	$0, 80(%rsp)
 4181      00
 4182              	.LBE14251:
 4183              	.LBE14250:
 4184              	.LBE14247:
 4185              	.LBE14243:
 4186              	.LBE14242:
 4187              	.LBE14241:
 4188              	.LBE14240:
GAS LISTING /tmp/ccvmoMuv.s 			page 406


 142:/usr/include/boost/exception/info.hpp ****                     }
 4189              		.loc 3 142 0
 4190 02e8 4C8D6038 		leaq	56(%rax), %r12
 4191              	.LVL357:
 4192              	.LBB14402:
 4193              	.LBB14399:
 4194              	.LBB14396:
 4195              	.LBB14253:
 4196              	.LBB14252:
 4197              	.LBB14246:
 110:/usr/include/c++/6/bits/basic_string.h **** 
 4198              		.loc 10 110 0
 4199 02ec 488D4310 		leaq	16(%rbx), %rax
 4200 02f0 48894424 		movq	%rax, 64(%rsp)
 4200      40
 4201              	.LVL358:
 4202 02f5 488B8424 		movq	208(%rsp), %rax
 4202      D0000000 
 4203              	.LVL359:
 4204              	.LBE14246:
 4205              	.LBE14252:
 4206              	.LBE14253:
 169:/usr/include/c++/6/sstream **** 	  {
 4207              		.loc 32 169 0
 4208 02fd 4885C0   		testq	%rax, %rax
 4209 0300 0F845502 		je	.L278
 4209      0000
 4210              	.LVL360:
 4211 0306 488B9424 		movq	192(%rsp), %rdx
 4211      C0000000 
 4212              	.LVL361:
 172:/usr/include/c++/6/sstream **** 	      __ret = __string_type(this->pbase(), this->pptr());
 4213              		.loc 32 172 0
 4214 030e 4839D0   		cmpq	%rdx, %rax
 4215 0311 0F876901 		ja	.L279
 4215      0000
 4216              	.LVL362:
 4217              	.LBB14254:
 4218              	.LBB14255:
 4219              	.LBB14256:
 4220              	.LBB14257:
 4221              	.LBB14258:
 110:/usr/include/c++/6/bits/basic_string.h **** 
 4222              		.loc 10 110 0
 4223 0317 488D6C24 		leaq	96(%rsp), %rbp
 4223      60
 4224              	.LVL363:
 4225              	.LBE14258:
 4226              	.LBE14257:
 4227              	.LBE14256:
 4228              	.LBB14263:
 4229              	.LBB14264:
 4230              	.LBB14265:
 4231              	.LBB14266:
 196:/usr/include/c++/6/bits/basic_string.h **** 	}
 4232              		.loc 10 196 0
 4233 031c 488BB424 		movq	200(%rsp), %rsi
GAS LISTING /tmp/ccvmoMuv.s 			page 407


 4233      C8000000 
 4234              	.LBE14266:
 4235              	.LBE14265:
 4236              	.LBE14264:
 4237              	.LBE14263:
 4238              	.LBB14273:
 4239              	.LBB14261:
 4240              	.LBB14259:
 110:/usr/include/c++/6/bits/basic_string.h **** 
 4241              		.loc 10 110 0
 4242 0324 488D4510 		leaq	16(%rbp), %rax
 4243              	.LBE14259:
 4244              	.LBE14261:
 4245              	.LBE14273:
 4246              	.LBB14274:
 4247              	.LBB14271:
 4248              	.LBB14269:
 4249              	.LBB14267:
 196:/usr/include/c++/6/bits/basic_string.h **** 	}
 4250              		.loc 10 196 0
 4251 0328 4889EF   		movq	%rbp, %rdi
 4252              	.LBE14267:
 4253              	.LBE14269:
 4254              	.LBE14271:
 4255              	.LBE14274:
 4256              	.LBB14275:
 4257              	.LBB14262:
 4258              	.LBB14260:
 110:/usr/include/c++/6/bits/basic_string.h **** 
 4259              		.loc 10 110 0
 4260 032b 48894424 		movq	%rax, 96(%rsp)
 4260      60
 4261              	.LVL364:
 4262              	.LEHB21:
 4263              	.LBE14260:
 4264              	.LBE14262:
 4265              	.LBE14275:
 4266              	.LBB14276:
 4267              	.LBB14272:
 4268              	.LBB14270:
 4269              	.LBB14268:
 196:/usr/include/c++/6/bits/basic_string.h **** 	}
 4270              		.loc 10 196 0
 4271 0330 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_ite
 4271      00
 4272              	.LVL365:
 4273 0335 488B5424 		movq	96(%rsp), %rdx
 4273      60
 4274              	.LBE14268:
 4275              	.LBE14270:
 4276              	.LBE14272:
 4277              	.LBE14276:
 4278              	.LBE14255:
 4279              	.LBE14254:
 4280              	.LBB14277:
 4281              	.LBB14278:
 648:/usr/include/c++/6/bits/basic_string.h **** 	    && (_Alloc_traits::_S_propagate_on_move_assign()
GAS LISTING /tmp/ccvmoMuv.s 			page 408


 4282              		.loc 10 648 0
 4283 033a 488D4D10 		leaq	16(%rbp), %rcx
 4284 033e 488B4424 		movq	64(%rsp), %rax
 4284      40
 4285              	.LVL366:
 4286 0343 4839CA   		cmpq	%rcx, %rdx
 4287 0346 0F845002 		je	.L241
 4287      0000
 4288              	.LVL367:
 4289              	.LBB14279:
 654:/usr/include/c++/6/bits/basic_string.h **** 	      {
 4290              		.loc 10 654 0
 4291 034c 488D4B10 		leaq	16(%rbx), %rcx
 4292 0350 4839C8   		cmpq	%rcx, %rax
 4293 0353 0F84DB01 		je	.L242
 4293      0000
 4294              	.LVL368:
 4295              	.LBB14280:
 4296              	.LBB14281:
 128:/usr/include/c++/6/bits/basic_string.h **** 
 4297              		.loc 10 128 0
 4298 0359 48895424 		movq	%rdx, 64(%rsp)
 4298      40
 4299              	.LBE14281:
 4300              	.LBE14280:
 4301              	.LBB14283:
 4302              	.LBB14284:
 132:/usr/include/c++/6/bits/basic_string.h **** 
 4303              		.loc 10 132 0
 4304 035e 488B5424 		movq	104(%rsp), %rdx
 4304      68
 4305              	.LBE14284:
 4306              	.LBE14283:
 668:/usr/include/c++/6/bits/basic_string.h **** 	      {
 4307              		.loc 10 668 0
 4308 0363 4885C0   		testq	%rax, %rax
 659:/usr/include/c++/6/bits/basic_string.h **** 		  }
 4309              		.loc 10 659 0
 4310 0366 488B4C24 		movq	80(%rsp), %rcx
 4310      50
 4311              	.LVL369:
 4312              	.LBB14288:
 4313              	.LBB14285:
 132:/usr/include/c++/6/bits/basic_string.h **** 
 4314              		.loc 10 132 0
 4315 036b 48895424 		movq	%rdx, 72(%rsp)
 4315      48
 4316              	.LVL370:
 4317              	.LBE14285:
 4318              	.LBE14288:
 4319              	.LBB14289:
 4320              	.LBB14290:
 160:/usr/include/c++/6/bits/basic_string.h **** 
 4321              		.loc 10 160 0
 4322 0370 488B5424 		movq	112(%rsp), %rdx
 4322      70
 4323 0375 48895424 		movq	%rdx, 80(%rsp)
GAS LISTING /tmp/ccvmoMuv.s 			page 409


 4323      50
 4324              	.LVL371:
 4325              	.LBE14290:
 4326              	.LBE14289:
 668:/usr/include/c++/6/bits/basic_string.h **** 	      {
 4327              		.loc 10 668 0
 4328 037a 0F84CD01 		je	.L243
 4328      0000
 4329              	.LVL372:
 4330              	.LBB14292:
 4331              	.LBB14293:
 128:/usr/include/c++/6/bits/basic_string.h **** 
 4332              		.loc 10 128 0
 4333 0380 48894424 		movq	%rax, 96(%rsp)
 4333      60
 4334              	.LVL373:
 4335              	.LBE14293:
 4336              	.LBE14292:
 4337              	.LBB14294:
 4338              	.LBB14295:
 160:/usr/include/c++/6/bits/basic_string.h **** 
 4339              		.loc 10 160 0
 4340 0385 48894C24 		movq	%rcx, 112(%rsp)
 4340      70
 4341              	.LVL374:
 4342              	.L244:
 4343              	.LBE14295:
 4344              	.LBE14294:
 4345              	.LBE14279:
 4346              	.LBE14278:
 4347              	.LBB14305:
 4348              	.LBB14306:
 4349              	.LBB14307:
 4350              	.LBB14308:
 132:/usr/include/c++/6/bits/basic_string.h **** 
 4351              		.loc 10 132 0
 4352 038a 48C74424 		movq	$0, 104(%rsp)
 4352      68000000 
 4352      00
 4353              	.LVL375:
 4354              	.LBE14308:
 4355              	.LBE14307:
 4356              	.LBB14309:
 4357              	.LBB14310:
 243:/usr/include/c++/6/bits/char_traits.h **** 
 4358              		.loc 9 243 0
 4359 0393 C60000   		movb	$0, (%rax)
 4360              	.LVL376:
 4361              	.LBE14310:
 4362              	.LBE14309:
 4363              	.LBE14306:
 4364              	.LBE14305:
 4365              	.LBE14277:
 4366              	.LBB14313:
 4367              	.LBB14314:
 4368              	.LBB14315:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
GAS LISTING /tmp/ccvmoMuv.s 			page 410


 4369              		.loc 10 180 0
 4370 0396 4883C510 		addq	$16, %rbp
 4371              	.LVL377:
 4372 039a 488B7C24 		movq	96(%rsp), %rdi
 4372      60
 4373              	.LVL378:
 4374 039f 4839EF   		cmpq	%rbp, %rdi
 4375 03a2 7405     		je	.L240
 4376              	.LVL379:
 4377              	.L274:
 4378              	.LBB14316:
 4379              	.LBB14317:
 4380              	.LBB14318:
 4381              	.LBB14319:
 4382              		.loc 12 110 0
 4383 03a4 E8000000 		call	_ZdlPv@PLT
 4383      00
 4384              	.LVL380:
 4385              	.L240:
 4386              	.LBE14319:
 4387              	.LBE14318:
 4388              	.LBE14317:
 4389              	.LBE14316:
 4390              	.LBE14315:
 4391              	.LBE14314:
 4392              	.LBE14313:
 4393              	.LBE14396:
 4394              	.LBE14399:
 4395              	.LBE14402:
 142:/usr/include/boost/exception/info.hpp ****                     }
 4396              		.loc 3 142 0 discriminator 1
 4397 03a9 4889DF   		movq	%rbx, %rdi
 4398 03ac 4C89E6   		movq	%r12, %rsi
 4399              	.LBB14403:
 4400              	.LBB14404:
 4401              	.LBB14405:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 4402              		.loc 10 180 0 discriminator 1
 4403 03af 4883C310 		addq	$16, %rbx
 4404              	.LBE14405:
 4405              	.LBE14404:
 4406              	.LBE14403:
 142:/usr/include/boost/exception/info.hpp ****                     }
 4407              		.loc 3 142 0 discriminator 1
 4408 03b3 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_@PLT
 4408      00
 4409              	.LVL381:
 4410 03b8 488B7C24 		movq	64(%rsp), %rdi
 4410      40
 4411              	.LVL382:
 4412              	.LBB14412:
 4413              	.LBB14411:
 4414              	.LBB14410:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 4415              		.loc 10 180 0 discriminator 1
 4416 03bd 4839DF   		cmpq	%rbx, %rdi
 4417 03c0 7405     		je	.L248
GAS LISTING /tmp/ccvmoMuv.s 			page 411


 4418              	.LVL383:
 4419              	.LBB14406:
 4420              	.LBB14407:
 4421              	.LBB14408:
 4422              	.LBB14409:
 4423              		.loc 12 110 0
 4424 03c2 E8000000 		call	_ZdlPv@PLT
 4424      00
 4425              	.LVL384:
 4426              	.L248:
 4427              	.LBE14409:
 4428              	.LBE14408:
 4429              	.LBE14407:
 4430              	.LBE14406:
 4431              	.LBE14410:
 4432              	.LBE14411:
 4433              	.LBE14412:
 4434              	.LBB14413:
 4435              	.LBB14414:
 550:/usr/include/c++/6/sstream **** 
 551:/usr/include/c++/6/sstream ****       /**
 552:/usr/include/c++/6/sstream ****        *  @brief  Starts with an existing string buffer.
 553:/usr/include/c++/6/sstream ****        *  @param  __str  A string to copy as a starting buffer.
 554:/usr/include/c++/6/sstream ****        *  @param  __mode  Whether the buffer can read, or write, or both.
 555:/usr/include/c++/6/sstream ****        *
 556:/usr/include/c++/6/sstream ****        *  @c ios_base::out is automatically included in @a mode.
 557:/usr/include/c++/6/sstream ****        *
 558:/usr/include/c++/6/sstream ****        *  Initializes @c sb using @a str and @c mode|out, and passes @c &sb
 559:/usr/include/c++/6/sstream ****        *  to the base class initializer.
 560:/usr/include/c++/6/sstream ****        *
 561:/usr/include/c++/6/sstream ****        *  That's a lie.  We initialize the base class with NULL, because the
 562:/usr/include/c++/6/sstream ****        *  string class does its own memory management.
 563:/usr/include/c++/6/sstream ****       */
 564:/usr/include/c++/6/sstream ****       explicit
 565:/usr/include/c++/6/sstream ****       basic_ostringstream(const __string_type& __str,
 566:/usr/include/c++/6/sstream **** 			  ios_base::openmode __mode = ios_base::out)
 567:/usr/include/c++/6/sstream ****       : __ostream_type(), _M_stringbuf(__str, __mode | ios_base::out)
 568:/usr/include/c++/6/sstream ****       { this->init(&_M_stringbuf); }
 569:/usr/include/c++/6/sstream **** 
 570:/usr/include/c++/6/sstream ****       /**
 571:/usr/include/c++/6/sstream ****        *  @brief  The destructor does nothing.
 572:/usr/include/c++/6/sstream ****        *
 573:/usr/include/c++/6/sstream ****        *  The buffer is deallocated by the stringbuf object, not the
 574:/usr/include/c++/6/sstream ****        *  formatting stream.
 575:/usr/include/c++/6/sstream ****       */
 576:/usr/include/c++/6/sstream ****       ~basic_ostringstream()
 577:/usr/include/c++/6/sstream ****       { }
 4436              		.loc 32 577 0
 4437 03c7 488D0500 		leaq	24+_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax
 4437      000000
 4438 03ce 488BBC24 		movq	240(%rsp), %rdi
 4438      F0000000 
 4439 03d6 48898424 		movq	%rax, 160(%rsp)
 4439      A0000000 
 4440 03de 488D0500 		leaq	64+_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax
 4440      000000
 4441 03e5 48898424 		movq	%rax, 272(%rsp)
GAS LISTING /tmp/ccvmoMuv.s 			page 412


 4441      10010000 
 4442              	.LVL385:
 4443              	.LBB14415:
 4444              	.LBB14416:
  65:/usr/include/c++/6/sstream ****     {
 4445              		.loc 32 65 0
 4446 03ed 488D0500 		leaq	16+_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE(%rip), %rax
 4446      000000
 4447 03f4 48898424 		movq	%rax, 168(%rsp)
 4447      A8000000 
 4448              	.LVL386:
 4449              	.LBB14417:
 4450              	.LBB14418:
 4451              	.LBB14419:
 4452              	.LBB14420:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 4453              		.loc 10 180 0
 4454 03fc 498D4560 		leaq	96(%r13), %rax
 4455 0400 4839C7   		cmpq	%rax, %rdi
 4456 0403 7405     		je	.L249
 4457              	.LVL387:
 4458              	.LBB14421:
 4459              	.LBB14422:
 4460              	.LBB14423:
 4461              	.LBB14424:
 4462              		.loc 12 110 0
 4463 0405 E8000000 		call	_ZdlPv@PLT
 4463      00
 4464              	.LVL388:
 4465              	.L249:
 4466              	.LBE14424:
 4467              	.LBE14423:
 4468              	.LBE14422:
 4469              	.LBE14421:
 4470              	.LBE14420:
 4471              	.LBE14419:
 4472              	.LBE14418:
 4473              	.LBE14417:
 4474              	.LBB14425:
 4475              	.LBB14426:
 198:/usr/include/c++/6/streambuf **** 
 4476              		.loc 33 198 0
 4477 040a 488D0500 		leaq	16+_ZTVSt15basic_streambufIcSt11char_traitsIcEE(%rip), %rax
 4477      000000
 4478 0411 498D7D40 		leaq	64(%r13), %rdi
 4479 0415 48898424 		movq	%rax, 168(%rsp)
 4479      A8000000 
 4480 041d E8000000 		call	_ZNSt6localeD1Ev@PLT
 4480      00
 4481              	.LVL389:
 4482              	.LBE14426:
 4483              	.LBE14425:
 4484              	.LBE14416:
 4485              	.LBE14415:
 4486              	.LBB14427:
 4487              	.LBB14428:
  93:/usr/include/c++/6/ostream **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 413


 4488              		.loc 31 93 0
 4489 0422 488B0500 		movq	8+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax
 4489      000000
 4490 0429 488B0D00 		movq	16+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rcx
 4490      000000
 4491              	.LBE14428:
 4492              	.LBE14427:
 4493              	.LBB14430:
 4494              	.LBB14431:
 282:/usr/include/c++/6/bits/basic_ios.h **** 
 4495              		.loc 30 282 0
 4496 0430 498D7D70 		leaq	112(%r13), %rdi
 4497              	.LBE14431:
 4498              	.LBE14430:
 4499              	.LBB14433:
 4500              	.LBB14429:
  93:/usr/include/c++/6/ostream **** 
 4501              		.loc 31 93 0
 4502 0434 48898424 		movq	%rax, 160(%rsp)
 4502      A0000000 
 4503 043c 488B40E8 		movq	-24(%rax), %rax
 4504 0440 48898C04 		movq	%rcx, 160(%rsp,%rax)
 4504      A0000000 
 4505              	.LVL390:
 4506              	.LBE14429:
 4507              	.LBE14433:
 4508              	.LBB14434:
 4509              	.LBB14432:
 282:/usr/include/c++/6/bits/basic_ios.h **** 
 4510              		.loc 30 282 0
 4511 0448 488D0500 		leaq	16+_ZTVSt9basic_iosIcSt11char_traitsIcEE(%rip), %rax
 4511      000000
 4512 044f 48898424 		movq	%rax, 272(%rsp)
 4512      10010000 
 4513 0457 E8000000 		call	_ZNSt8ios_baseD2Ev@PLT
 4513      00
 4514              	.LVL391:
 4515              	.L212:
 4516              	.LBE14432:
 4517              	.LBE14434:
 4518              	.LBE14414:
 4519              	.LBE14413:
 4520              	.LBE14033:
 4521              	.LBE14441:
 144:/usr/include/boost/exception/info.hpp ****                 }
 4522              		.loc 3 144 0
 4523 045c 488B4424 		movq	24(%rsp), %rax
 4523      18
 4524 0461 488B4038 		movq	56(%rax), %rax
 145:/usr/include/boost/exception/info.hpp **** 
 4525              		.loc 3 145 0
 4526 0465 4881C428 		addq	$552, %rsp
 4526      020000
 4527              		.cfi_remember_state
 4528              		.cfi_def_cfa_offset 56
 4529 046c 5B       		popq	%rbx
 4530              		.cfi_def_cfa_offset 48
GAS LISTING /tmp/ccvmoMuv.s 			page 414


 4531 046d 5D       		popq	%rbp
 4532              		.cfi_def_cfa_offset 40
 4533 046e 415C     		popq	%r12
 4534              		.cfi_def_cfa_offset 32
 4535 0470 415D     		popq	%r13
 4536              		.cfi_def_cfa_offset 24
 4537 0472 415E     		popq	%r14
 4538              		.cfi_def_cfa_offset 16
 4539 0474 415F     		popq	%r15
 4540              		.cfi_def_cfa_offset 8
 4541 0476 C3       		ret
 4542              	.LVL392:
 4543 0477 660F1F84 		.p2align 4,,10
 4543      00000000 
 4543      00
 4544              		.p2align 3
 4545              	.L279:
 4546              		.cfi_restore_state
 4547              	.LBB14442:
 4548              	.LBB14440:
 4549              	.LBB14435:
 4550              	.LBB14400:
 4551              	.LBB14397:
 4552              	.LBB14320:
 4553              	.LBB14321:
 4554              	.LBB14322:
 4555              	.LBB14323:
 4556              	.LBB14324:
 110:/usr/include/c++/6/bits/basic_string.h **** 
 4557              		.loc 10 110 0
 4558 0480 488DAC24 		leaq	128(%rsp), %rbp
 4558      80000000 
 4559              	.LVL393:
 4560              	.LBE14324:
 4561              	.LBE14323:
 4562              	.LBE14322:
 4563              	.LBB14329:
 4564              	.LBB14330:
 4565              	.LBB14331:
 4566              	.LBB14332:
 196:/usr/include/c++/6/bits/basic_string.h **** 	}
 4567              		.loc 10 196 0
 4568 0488 488BB424 		movq	200(%rsp), %rsi
 4568      C8000000 
 4569              	.LBE14332:
 4570              	.LBE14331:
 4571              	.LBE14330:
 4572              	.LBE14329:
 4573              	.LBB14339:
 4574              	.LBB14327:
 4575              	.LBB14325:
 110:/usr/include/c++/6/bits/basic_string.h **** 
 4576              		.loc 10 110 0
 4577 0490 488D5510 		leaq	16(%rbp), %rdx
 4578              	.LBE14325:
 4579              	.LBE14327:
 4580              	.LBE14339:
GAS LISTING /tmp/ccvmoMuv.s 			page 415


 4581              	.LBB14340:
 4582              	.LBB14337:
 4583              	.LBB14335:
 4584              	.LBB14333:
 196:/usr/include/c++/6/bits/basic_string.h **** 	}
 4585              		.loc 10 196 0
 4586 0494 4889EF   		movq	%rbp, %rdi
 4587              	.LBE14333:
 4588              	.LBE14335:
 4589              	.LBE14337:
 4590              	.LBE14340:
 4591              	.LBB14341:
 4592              	.LBB14328:
 4593              	.LBB14326:
 110:/usr/include/c++/6/bits/basic_string.h **** 
 4594              		.loc 10 110 0
 4595 0497 48899424 		movq	%rdx, 128(%rsp)
 4595      80000000 
 4596              	.LVL394:
 4597              	.LBE14326:
 4598              	.LBE14328:
 4599              	.LBE14341:
 4600              	.LBB14342:
 4601              	.LBB14338:
 4602              	.LBB14336:
 4603              	.LBB14334:
 196:/usr/include/c++/6/bits/basic_string.h **** 	}
 4604              		.loc 10 196 0
 4605 049f 4889C2   		movq	%rax, %rdx
 4606 04a2 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_ite
 4606      00
 4607              	.LVL395:
 4608 04a7 488B9424 		movq	128(%rsp), %rdx
 4608      80000000 
 4609              	.LBE14334:
 4610              	.LBE14336:
 4611              	.LBE14338:
 4612              	.LBE14342:
 4613              	.LBE14321:
 4614              	.LBE14320:
 4615              	.LBB14343:
 4616              	.LBB14344:
 648:/usr/include/c++/6/bits/basic_string.h **** 	    && (_Alloc_traits::_S_propagate_on_move_assign()
 4617              		.loc 10 648 0
 4618 04af 488D4D10 		leaq	16(%rbp), %rcx
 4619 04b3 488B4424 		movq	64(%rsp), %rax
 4619      40
 4620              	.LVL396:
 4621 04b8 4839CA   		cmpq	%rcx, %rdx
 4622 04bb 0F84F000 		je	.L235
 4622      0000
 4623              	.LVL397:
 4624              	.LBB14345:
 654:/usr/include/c++/6/bits/basic_string.h **** 	      {
 4625              		.loc 10 654 0
 4626 04c1 488D4B10 		leaq	16(%rbx), %rcx
 4627 04c5 4839C8   		cmpq	%rcx, %rax
GAS LISTING /tmp/ccvmoMuv.s 			page 416


 4628 04c8 0F849E00 		je	.L236
 4628      0000
 4629              	.LVL398:
 4630              	.LBB14346:
 4631              	.LBB14347:
 128:/usr/include/c++/6/bits/basic_string.h **** 
 4632              		.loc 10 128 0
 4633 04ce 48895424 		movq	%rdx, 64(%rsp)
 4633      40
 4634              	.LBE14347:
 4635              	.LBE14346:
 4636              	.LBB14349:
 4637              	.LBB14350:
 132:/usr/include/c++/6/bits/basic_string.h **** 
 4638              		.loc 10 132 0
 4639 04d3 488B9424 		movq	136(%rsp), %rdx
 4639      88000000 
 4640              	.LBE14350:
 4641              	.LBE14349:
 668:/usr/include/c++/6/bits/basic_string.h **** 	      {
 4642              		.loc 10 668 0
 4643 04db 4885C0   		testq	%rax, %rax
 659:/usr/include/c++/6/bits/basic_string.h **** 		  }
 4644              		.loc 10 659 0
 4645 04de 488B4C24 		movq	80(%rsp), %rcx
 4645      50
 4646              	.LVL399:
 4647              	.LBB14354:
 4648              	.LBB14351:
 132:/usr/include/c++/6/bits/basic_string.h **** 
 4649              		.loc 10 132 0
 4650 04e3 48895424 		movq	%rdx, 72(%rsp)
 4650      48
 4651              	.LVL400:
 4652              	.LBE14351:
 4653              	.LBE14354:
 4654              	.LBB14355:
 4655              	.LBB14356:
 160:/usr/include/c++/6/bits/basic_string.h **** 
 4656              		.loc 10 160 0
 4657 04e8 488B9424 		movq	144(%rsp), %rdx
 4657      90000000 
 4658 04f0 48895424 		movq	%rdx, 80(%rsp)
 4658      50
 4659              	.LVL401:
 4660              	.LBE14356:
 4661              	.LBE14355:
 668:/usr/include/c++/6/bits/basic_string.h **** 	      {
 4662              		.loc 10 668 0
 4663 04f5 0F849000 		je	.L237
 4663      0000
 4664              	.LVL402:
 4665              	.LBB14358:
 4666              	.LBB14359:
 128:/usr/include/c++/6/bits/basic_string.h **** 
 4667              		.loc 10 128 0
 4668 04fb 48898424 		movq	%rax, 128(%rsp)
GAS LISTING /tmp/ccvmoMuv.s 			page 417


 4668      80000000 
 4669              	.LVL403:
 4670              	.LBE14359:
 4671              	.LBE14358:
 4672              	.LBB14360:
 4673              	.LBB14361:
 160:/usr/include/c++/6/bits/basic_string.h **** 
 4674              		.loc 10 160 0
 4675 0503 48898C24 		movq	%rcx, 144(%rsp)
 4675      90000000 
 4676              	.LVL404:
 4677              	.L238:
 4678              	.LBE14361:
 4679              	.LBE14360:
 4680              	.LBE14345:
 4681              	.LBE14344:
 4682              	.LBB14371:
 4683              	.LBB14372:
 4684              	.LBB14373:
 4685              	.LBB14374:
 132:/usr/include/c++/6/bits/basic_string.h **** 
 4686              		.loc 10 132 0
 4687 050b 48C78424 		movq	$0, 136(%rsp)
 4687      88000000 
 4687      00000000 
 4688              	.LVL405:
 4689              	.LBE14374:
 4690              	.LBE14373:
 4691              	.LBB14375:
 4692              	.LBB14376:
 243:/usr/include/c++/6/bits/char_traits.h **** 
 4693              		.loc 9 243 0
 4694 0517 C60000   		movb	$0, (%rax)
 4695              	.LVL406:
 4696              	.LBE14376:
 4697              	.LBE14375:
 4698              	.LBE14372:
 4699              	.LBE14371:
 4700              	.LBE14343:
 4701              	.LBB14379:
 4702              	.LBB14380:
 4703              	.LBB14381:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 4704              		.loc 10 180 0
 4705 051a 4883C510 		addq	$16, %rbp
 4706              	.LVL407:
 4707 051e 488BBC24 		movq	128(%rsp), %rdi
 4707      80000000 
 4708              	.LVL408:
 4709 0526 4839EF   		cmpq	%rbp, %rdi
 4710 0529 0F8575FE 		jne	.L274
 4710      FFFF
 4711 052f E975FEFF 		jmp	.L240
 4711      FF
 4712              	.LVL409:
 4713              	.L242:
 4714              	.LBE14381:
GAS LISTING /tmp/ccvmoMuv.s 			page 418


 4715              	.LBE14380:
 4716              	.LBE14379:
 4717              	.LBB14382:
 4718              	.LBB14311:
 4719              	.LBB14302:
 4720              	.LBB14296:
 4721              	.LBB14286:
 132:/usr/include/c++/6/bits/basic_string.h **** 
 4722              		.loc 10 132 0
 4723 0534 488B4424 		movq	104(%rsp), %rax
 4723      68
 4724              	.LBE14286:
 4725              	.LBE14296:
 4726              	.LBB14297:
 4727              	.LBB14282:
 128:/usr/include/c++/6/bits/basic_string.h **** 
 4728              		.loc 10 128 0
 4729 0539 48895424 		movq	%rdx, 64(%rsp)
 4729      40
 4730              	.LVL410:
 4731              	.LBE14282:
 4732              	.LBE14297:
 4733              	.LBB14298:
 4734              	.LBB14287:
 132:/usr/include/c++/6/bits/basic_string.h **** 
 4735              		.loc 10 132 0
 4736 053e 48894424 		movq	%rax, 72(%rsp)
 4736      48
 4737              	.LVL411:
 4738              	.LBE14287:
 4739              	.LBE14298:
 4740              	.LBB14299:
 4741              	.LBB14291:
 160:/usr/include/c++/6/bits/basic_string.h **** 
 4742              		.loc 10 160 0
 4743 0543 488B4424 		movq	112(%rsp), %rax
 4743      70
 4744 0548 48894424 		movq	%rax, 80(%rsp)
 4744      50
 4745              	.LVL412:
 4746              	.L243:
 4747              	.LBE14291:
 4748              	.LBE14299:
 4749              	.LBB14300:
 4750              	.LBB14301:
 128:/usr/include/c++/6/bits/basic_string.h **** 
 4751              		.loc 10 128 0
 4752 054d 488D4510 		leaq	16(%rbp), %rax
 4753 0551 48894424 		movq	%rax, 96(%rsp)
 4753      60
 4754 0556 E92FFEFF 		jmp	.L244
 4754      FF
 4755              	.LVL413:
 4756              	.L278:
 4757              	.LBE14301:
 4758              	.LBE14300:
 4759              	.LBE14302:
GAS LISTING /tmp/ccvmoMuv.s 			page 419


 4760              	.LBE14311:
 4761              	.LBE14382:
 4762              	.LBB14383:
 4763              	.LBB14384:
 4764              	.LBB14385:
1196:/usr/include/c++/6/bits/basic_string.h **** 	return *this;
 4765              		.loc 10 1196 0
 4766 055b 498D7550 		leaq	80(%r13), %rsi
 4767 055f 4889DF   		movq	%rbx, %rdi
 4768 0562 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_@PLT
 4768      00
 4769              	.LVL414:
 4770              	.LEHE21:
 4771 0567 E93DFEFF 		jmp	.L240
 4771      FF
 4772              	.LVL415:
 4773              	.L236:
 4774              	.LBE14385:
 4775              	.LBE14384:
 4776              	.LBE14383:
 4777              	.LBB14386:
 4778              	.LBB14377:
 4779              	.LBB14368:
 4780              	.LBB14362:
 4781              	.LBB14352:
 132:/usr/include/c++/6/bits/basic_string.h **** 
 4782              		.loc 10 132 0
 4783 056c 488B8424 		movq	136(%rsp), %rax
 4783      88000000 
 4784              	.LBE14352:
 4785              	.LBE14362:
 4786              	.LBB14363:
 4787              	.LBB14348:
 128:/usr/include/c++/6/bits/basic_string.h **** 
 4788              		.loc 10 128 0
 4789 0574 48895424 		movq	%rdx, 64(%rsp)
 4789      40
 4790              	.LVL416:
 4791              	.LBE14348:
 4792              	.LBE14363:
 4793              	.LBB14364:
 4794              	.LBB14353:
 132:/usr/include/c++/6/bits/basic_string.h **** 
 4795              		.loc 10 132 0
 4796 0579 48894424 		movq	%rax, 72(%rsp)
 4796      48
 4797              	.LVL417:
 4798              	.LBE14353:
 4799              	.LBE14364:
 4800              	.LBB14365:
 4801              	.LBB14357:
 160:/usr/include/c++/6/bits/basic_string.h **** 
 4802              		.loc 10 160 0
 4803 057e 488B8424 		movq	144(%rsp), %rax
 4803      90000000 
 4804 0586 48894424 		movq	%rax, 80(%rsp)
 4804      50
GAS LISTING /tmp/ccvmoMuv.s 			page 420


 4805              	.LVL418:
 4806              	.L237:
 4807              	.LBE14357:
 4808              	.LBE14365:
 4809              	.LBB14366:
 4810              	.LBB14367:
 128:/usr/include/c++/6/bits/basic_string.h **** 
 4811              		.loc 10 128 0
 4812 058b 488D4510 		leaq	16(%rbp), %rax
 4813 058f 48898424 		movq	%rax, 128(%rsp)
 4813      80000000 
 4814 0597 E96FFFFF 		jmp	.L238
 4814      FF
 4815              	.LVL419:
 4816              	.L241:
 4817              	.LBE14367:
 4818              	.LBE14366:
 4819              	.LBE14368:
 4820              	.LBE14377:
 4821              	.LBE14386:
 4822              	.LBB14387:
 4823              	.LBB14312:
 4824              	.LBB14303:
 4825              	.LBB14304:
1196:/usr/include/c++/6/bits/basic_string.h **** 	return *this;
 4826              		.loc 10 1196 0
 4827 059c 4889EE   		movq	%rbp, %rsi
 4828 059f 4889DF   		movq	%rbx, %rdi
 4829 05a2 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_@PLT
 4829      00
 4830              	.LVL420:
 4831 05a7 488B4424 		movq	96(%rsp), %rax
 4831      60
 4832 05ac E9D9FDFF 		jmp	.L244
 4832      FF
 4833              	.LVL421:
 4834              	.L235:
 4835              	.LBE14304:
 4836              	.LBE14303:
 4837              	.LBE14312:
 4838              	.LBE14387:
 4839              	.LBB14388:
 4840              	.LBB14378:
 4841              	.LBB14369:
 4842              	.LBB14370:
 4843 05b1 4889EE   		movq	%rbp, %rsi
 4844 05b4 4889DF   		movq	%rbx, %rdi
 4845 05b7 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_@PLT
 4845      00
 4846              	.LVL422:
 4847 05bc 488B8424 		movq	128(%rsp), %rax
 4847      80000000 
 4848 05c4 E942FFFF 		jmp	.L238
 4848      FF
 4849              	.LVL423:
 4850              	.L222:
 4851              	.LBE14370:
GAS LISTING /tmp/ccvmoMuv.s 			page 421


 4852              	.LBE14369:
 4853              	.LBE14378:
 4854              	.LBE14388:
 4855              	.LBE14397:
 4856              	.LBE14400:
 4857              	.LBE14435:
 4858              	.LBB14436:
 4859              	.LBB14238:
 4860              	.LBB14226:
 4861              	.LBB14126:
 4862              	.LBB14123:
 4863              	.LBB14124:
 4864              		.loc 27 703 0
 4865 05c9 488D0D00 		leaq	_ZZNK5boost10shared_ptrINS_16exception_detail15error_info_baseEEdeEvE19__PRETTY_FUNCTION__(%r
 4865      000000
 4866 05d0 488D3500 		leaq	.LC9(%rip), %rsi
 4866      000000
 4867 05d7 488D3D00 		leaq	.LC10(%rip), %rdi
 4867      000000
 4868 05de BABF0200 		movl	$703, %edx
 4868      00
 4869 05e3 E8000000 		call	__assert_fail@PLT
 4869      00
 4870              	.LVL424:
 4871              	.L253:
 4872 05e8 4889C3   		movq	%rax, %rbx
 4873              	.LVL425:
 4874              	.L230:
 4875              	.LBE14124:
 4876              	.LBE14123:
 4877              	.LBE14126:
 4878              	.LBE14226:
 4879              	.LBE14238:
 4880              	.LBE14436:
 135:/usr/include/boost/exception/info.hpp ****                     tmp << header;
 4881              		.loc 3 135 0
 4882 05eb 4C89EF   		movq	%r13, %rdi
 4883 05ee E8000000 		call	_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev@PLT
 4883      00
 4884              	.LVL426:
 4885 05f3 4889DF   		movq	%rbx, %rdi
 4886              	.LEHB22:
 4887 05f6 E8000000 		call	_Unwind_Resume@PLT
 4887      00
 4888              	.LVL427:
 4889              	.L254:
 4890 05fb 488B7C24 		movq	32(%rsp), %rdi
 4890      20
 4891              	.LBB14437:
 4892              	.LBB14239:
 4893              	.LBB14227:
 4894              	.LBB14228:
 4895              	.LBB14229:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 4896              		.loc 10 180 0
 4897 0600 4983C610 		addq	$16, %r14
 4898              	.LVL428:
GAS LISTING /tmp/ccvmoMuv.s 			page 422


 4899 0604 4889C3   		movq	%rax, %rbx
 4900              	.LVL429:
 4901 0607 4C39F7   		cmpq	%r14, %rdi
 4902 060a 74DF     		je	.L230
 4903              	.LVL430:
 4904              	.LBB14230:
 4905              	.LBB14231:
 4906              	.LBB14232:
 4907              	.LBB14233:
 4908              		.loc 12 110 0
 4909 060c E8000000 		call	_ZdlPv@PLT
 4909      00
 4910              	.LVL431:
 4911 0611 EBD8     		jmp	.L230
 4912              	.LVL432:
 4913              	.L257:
 4914              	.LBE14233:
 4915              	.LBE14232:
 4916              	.LBE14231:
 4917              	.LBE14230:
 4918              	.LBE14229:
 4919              	.LBE14228:
 4920              	.LBE14227:
 4921              	.LBB14234:
 4922              	.LBB14214:
 4923              	.LBB14212:
 4924              	.LBB14210:
 4925              	.LBB14208:
 4926              	.LBB14206:
 4927              	.LBB14204:
 4928              	.LBB14193:
 4929              	.LBB14186:
 4930              	.LBB14187:
 4931              	.LBB14188:
  90:/usr/include/boost/core/demangle.hpp **** }
 4932              		.loc 25 90 0
 4933 0613 4889EF   		movq	%rbp, %rdi
 4934 0616 4889C3   		movq	%rax, %rbx
 4935              	.LVL433:
 4936 0619 E8000000 		call	free@PLT
 4936      00
 4937              	.LVL434:
 4938 061e EBCB     		jmp	.L230
 4939              	.LVL435:
 4940              	.L256:
 4941 0620 4889C3   		movq	%rax, %rbx
 4942              	.LVL436:
 4943              	.LBE14188:
 4944              	.LBE14187:
 4945              	.LBE14186:
 4946              	.LBE14193:
 4947              	.LBE14204:
 4948              	.LBE14206:
 4949              	.LBE14208:
 4950              	.LBE14210:
 4951              	.LBE14212:
 4952              	.LBE14214:
GAS LISTING /tmp/ccvmoMuv.s 			page 423


 4953              	.LBE14234:
 4954              	.LBE14239:
 4955              	.LBE14437:
 4956              	.LBB14438:
 4957              	.LBB14111:
 4958              	.LBB14110:
 4959              	.LBB14094:
 4960              	.LBB14095:
  65:/usr/include/c++/6/sstream ****     {
 4961              		.loc 32 65 0
 4962 0623 488D0500 		leaq	16+_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE(%rip), %rax
 4962      000000
 4963 062a 488BBC24 		movq	240(%rsp), %rdi
 4963      F0000000 
 4964 0632 48898424 		movq	%rax, 168(%rsp)
 4964      A8000000 
 4965              	.LVL437:
 4966              	.LBB14096:
 4967              	.LBB14097:
 4968              	.LBB14098:
 4969              	.LBB14099:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 4970              		.loc 10 180 0
 4971 063a 498D4560 		leaq	96(%r13), %rax
 4972 063e 4839C7   		cmpq	%rax, %rdi
 4973 0641 7405     		je	.L215
 4974              	.LVL438:
 4975              	.LBB14100:
 4976              	.LBB14101:
 4977              	.LBB14102:
 4978              	.LBB14103:
 4979              		.loc 12 110 0
 4980 0643 E8000000 		call	_ZdlPv@PLT
 4980      00
 4981              	.LVL439:
 4982              	.L215:
 4983              	.LBE14103:
 4984              	.LBE14102:
 4985              	.LBE14101:
 4986              	.LBE14100:
 4987              	.LBE14099:
 4988              	.LBE14098:
 4989              	.LBE14097:
 4990              	.LBE14096:
 4991              	.LBB14104:
 4992              	.LBB14105:
 198:/usr/include/c++/6/streambuf **** 
 4993              		.loc 33 198 0
 4994 0648 488D0500 		leaq	16+_ZTVSt15basic_streambufIcSt11char_traitsIcEE(%rip), %rax
 4994      000000
 4995 064f 498D7D40 		leaq	64(%r13), %rdi
 4996 0653 48898424 		movq	%rax, 168(%rsp)
 4996      A8000000 
 4997 065b E8000000 		call	_ZNSt6localeD1Ev@PLT
 4997      00
 4998              	.LVL440:
 4999              	.LBE14105:
GAS LISTING /tmp/ccvmoMuv.s 			page 424


 5000              	.LBE14104:
 5001              	.LBE14095:
 5002              	.LBE14094:
 5003              	.LBB14106:
 5004              	.LBB14107:
  93:/usr/include/c++/6/ostream **** 
 5005              		.loc 31 93 0
 5006 0660 488B0500 		movq	8+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax
 5006      000000
 5007 0667 488B0D00 		movq	16+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rcx
 5007      000000
 5008 066e 48898424 		movq	%rax, 160(%rsp)
 5008      A0000000 
 5009 0676 488B40E8 		movq	-24(%rax), %rax
 5010 067a 48898C04 		movq	%rcx, 160(%rsp,%rax)
 5010      A0000000 
 5011              	.LVL441:
 5012              	.L216:
 5013              	.LBE14107:
 5014              	.LBE14106:
 5015              	.LBB14108:
 5016              	.LBB14109:
 282:/usr/include/c++/6/bits/basic_ios.h **** 
 5017              		.loc 30 282 0
 5018 0682 488D0500 		leaq	16+_ZTVSt9basic_iosIcSt11char_traitsIcEE(%rip), %rax
 5018      000000
 5019 0689 498D7D70 		leaq	112(%r13), %rdi
 5020 068d 48898424 		movq	%rax, 272(%rsp)
 5020      10010000 
 5021 0695 E8000000 		call	_ZNSt8ios_baseD2Ev@PLT
 5021      00
 5022              	.LVL442:
 5023 069a 4889DF   		movq	%rbx, %rdi
 5024 069d E8000000 		call	_Unwind_Resume@PLT
 5024      00
 5025              	.LVL443:
 5026              	.LEHE22:
 5027              	.L255:
 5028 06a2 4889C3   		movq	%rax, %rbx
 5029              	.LVL444:
 5030 06a5 EBDB     		jmp	.L216
 5031              	.LVL445:
 5032              	.L258:
 5033 06a7 488B7C24 		movq	64(%rsp), %rdi
 5033      40
 5034              	.LBE14109:
 5035              	.LBE14108:
 5036              	.LBE14110:
 5037              	.LBE14111:
 5038              	.LBE14438:
 5039              	.LBB14439:
 5040              	.LBB14401:
 5041              	.LBB14398:
 5042              	.LBB14389:
 5043              	.LBB14390:
 5044              	.LBB14391:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
GAS LISTING /tmp/ccvmoMuv.s 			page 425


 5045              		.loc 10 180 0
 5046 06ac 4883C310 		addq	$16, %rbx
 5047              	.LVL446:
 5048 06b0 4889C5   		movq	%rax, %rbp
 5049              	.LVL447:
 5050 06b3 4839DF   		cmpq	%rbx, %rdi
 5051 06b6 7405     		je	.L247
 5052              	.LVL448:
 5053              	.LBB14392:
 5054              	.LBB14393:
 5055              	.LBB14394:
 5056              	.LBB14395:
 5057              		.loc 12 110 0
 5058 06b8 E8000000 		call	_ZdlPv@PLT
 5058      00
 5059              	.LVL449:
 5060              	.L247:
 5061 06bd 4889EB   		movq	%rbp, %rbx
 5062              	.LVL450:
 5063 06c0 E926FFFF 		jmp	.L230
 5063      FF
 5064              	.LBE14395:
 5065              	.LBE14394:
 5066              	.LBE14393:
 5067              	.LBE14392:
 5068              	.LBE14391:
 5069              	.LBE14390:
 5070              	.LBE14389:
 5071              	.LBE14398:
 5072              	.LBE14401:
 5073              	.LBE14439:
 5074              	.LBE14440:
 5075              	.LBE14442:
 5076              		.cfi_endproc
 5077              	.LFE9851:
 5078              		.section	.gcc_except_table._ZNK5boost16exception_detail25error_info_container_impl22diagnostic_inf
 5079              	.LLSDA9851:
 5080 0000 FF       		.byte	0xff
 5081 0001 FF       		.byte	0xff
 5082 0002 01       		.byte	0x1
 5083 0003 37       		.uleb128 .LLSDACSE9851-.LLSDACSB9851
 5084              	.LLSDACSB9851:
 5085 0004 B001     		.uleb128 .LEHB14-.LFB9851
 5086 0006 05       		.uleb128 .LEHE14-.LEHB14
 5087 0007 A20D     		.uleb128 .L255-.LFB9851
 5088 0009 00       		.uleb128 0
 5089 000a F502     		.uleb128 .LEHB15-.LFB9851
 5090 000c 05       		.uleb128 .LEHE15-.LEHB15
 5091 000d A00C     		.uleb128 .L256-.LFB9851
 5092 000f 00       		.uleb128 0
 5093 0010 8B03     		.uleb128 .LEHB16-.LFB9851
 5094 0012 05       		.uleb128 .LEHE16-.LEHB16
 5095 0013 E80B     		.uleb128 .L253-.LFB9851
 5096 0015 00       		.uleb128 0
 5097 0016 BC04     		.uleb128 .LEHB17-.LFB9851
 5098 0018 05       		.uleb128 .LEHE17-.LEHB17
 5099 0019 930C     		.uleb128 .L257-.LFB9851
GAS LISTING /tmp/ccvmoMuv.s 			page 426


 5100 001b 00       		.uleb128 0
 5101 001c D604     		.uleb128 .LEHB18-.LFB9851
 5102 001e 05       		.uleb128 .LEHE18-.LEHB18
 5103 001f FB0B     		.uleb128 .L254-.LFB9851
 5104 0021 00       		.uleb128 0
 5105 0022 A105     		.uleb128 .LEHB19-.LFB9851
 5106 0024 02       		.uleb128 .LEHE19-.LEHB19
 5107 0025 E80B     		.uleb128 .L253-.LFB9851
 5108 0027 00       		.uleb128 0
 5109 0028 C605     		.uleb128 .LEHB20-.LFB9851
 5110 002a 05       		.uleb128 .LEHE20-.LEHB20
 5111 002b 930C     		.uleb128 .L257-.LFB9851
 5112 002d 00       		.uleb128 0
 5113 002e B006     		.uleb128 .LEHB21-.LFB9851
 5114 0030 B704     		.uleb128 .LEHE21-.LEHB21
 5115 0032 A70D     		.uleb128 .L258-.LFB9851
 5116 0034 00       		.uleb128 0
 5117 0035 F60B     		.uleb128 .LEHB22-.LFB9851
 5118 0037 AC01     		.uleb128 .LEHE22-.LEHB22
 5119 0039 00       		.uleb128 0
 5120 003a 00       		.uleb128 0
 5121              	.LLSDACSE9851:
 5122              		.section	.text._ZNK5boost16exception_detail25error_info_container_impl22diagnostic_informationEPKc
 5124              		.text
 5125 045f 90       		.align 2
 5126              		.p2align 4,,15
 5127              		.globl	_ZN2gr5lfast12costas2_implC2Efi
 5129              	_ZN2gr5lfast12costas2_implC2Efi:
 5130              	.LFB11021:
  68:costas2_impl.cc ****       : gr::sync_block("costas2",
 5131              		.loc 5 68 0
 5132              		.cfi_startproc
 5133              	.LVL451:
 5134              	.LBB14443:
 5135              	.LBB14444:
 5136              	.LBB14445:
 5137              		.loc 14 37 0
 5138 0460 488B4608 		movq	8(%rsi), %rax
 5139 0464 488B48E8 		movq	-24(%rax), %rcx
 5140 0468 488907   		movq	%rax, (%rdi)
 5141 046b 4C8B4610 		movq	16(%rsi), %r8
 5142 046f 488B40E0 		movq	-32(%rax), %rax
 5143 0473 4C89040F 		movq	%r8, (%rdi,%rcx)
 5144 0477 488B4E18 		movq	24(%rsi), %rcx
 5145 047b 48890C07 		movq	%rcx, (%rdi,%rax)
 5146              	.LVL452:
 5147              	.LBE14445:
 5148              	.LBE14444:
  73:costas2_impl.cc ****     {
 5149              		.loc 5 73 0
 5150 047f 488B06   		movq	(%rsi), %rax
 5151 0482 488B48E8 		movq	-24(%rax), %rcx
 5152 0486 488907   		movq	%rax, (%rdi)
 5153 0489 4C8B4620 		movq	32(%rsi), %r8
 5154 048d 488B40E0 		movq	-32(%rax), %rax
 5155 0491 4C89040F 		movq	%r8, (%rdi,%rcx)
 5156 0495 488B4E28 		movq	40(%rsi), %rcx
GAS LISTING /tmp/ccvmoMuv.s 			page 427


 5157 0499 48890C07 		movq	%rcx, (%rdi,%rax)
  76:costas2_impl.cc **** /*
 5158              		.loc 5 76 0
 5159 049d 488D0500 		leaq	_ZNK2gr5lfast12costas2_impl16phase_detector_2ESt7complexIfE(%rip), %rax
 5159      000000
  73:costas2_impl.cc ****     {
 5160              		.loc 5 73 0
 5161 04a4 895708   		movl	%edx, 8(%rdi)
 5162 04a7 C7470C00 		movl	$0x00000000, 12(%rdi)
 5162      000000
 5163 04ae C7471000 		movl	$0x3f800000, 16(%rdi)
 5163      00803F
 5164 04b5 48C74720 		movq	$0, 32(%rdi)
 5164      00000000 
  76:costas2_impl.cc **** /*
 5165              		.loc 5 76 0
 5166 04bd 48894718 		movq	%rax, 24(%rdi)
 5167 04c1 C3       		ret
 5168              	.LBE14443:
 5169              		.cfi_endproc
 5170              	.LFE11021:
 5172              		.section	.rodata.str1.1,"aMS",@progbits,1
 5173              	.LC14:
 5174 0000 636F7374 		.string	"costas2"
 5174      61733200 
 5175              		.text
 5176              		.align 2
 5177 04c2 0F1F4000 		.p2align 4,,15
 5177      662E0F1F 
 5177      84000000 
 5177      0000
 5178              		.globl	_ZN2gr5lfast12costas2_implC1Efi
 5180              	_ZN2gr5lfast12costas2_implC1Efi:
 5181              	.LFB11022:
  68:costas2_impl.cc ****       : gr::sync_block("costas2",
 5182              		.loc 5 68 0
 5183              		.cfi_startproc
 5184              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 5185              		.cfi_lsda 0x1b,.LLSDA11022
 5186              	.LVL453:
 5187 04d0 4157     		pushq	%r15
 5188              		.cfi_def_cfa_offset 16
 5189              		.cfi_offset 15, -16
 5190 04d2 4156     		pushq	%r14
 5191              		.cfi_def_cfa_offset 24
 5192              		.cfi_offset 14, -24
 5193              	.LBB14547:
  71:costas2_impl.cc **** 			  blocks::control_loop(loop_bw, 1.0, -1.0),
 5194              		.loc 5 71 0
 5195 04d4 B9080000 		movl	$8, %ecx
 5195      00
 5196              	.LBE14547:
  68:costas2_impl.cc ****       : gr::sync_block("costas2",
 5197              		.loc 5 68 0
 5198 04d9 4155     		pushq	%r13
 5199              		.cfi_def_cfa_offset 32
 5200              		.cfi_offset 13, -32
GAS LISTING /tmp/ccvmoMuv.s 			page 428


 5201 04db 4154     		pushq	%r12
 5202              		.cfi_def_cfa_offset 40
 5203              		.cfi_offset 12, -40
 5204              	.LBB14655:
  71:costas2_impl.cc **** 			  blocks::control_loop(loop_bw, 1.0, -1.0),
 5205              		.loc 5 71 0
 5206 04dd BA010000 		movl	$1, %edx
 5206      00
 5207              	.LBE14655:
  68:costas2_impl.cc ****       : gr::sync_block("costas2",
 5208              		.loc 5 68 0
 5209 04e2 55       		pushq	%rbp
 5210              		.cfi_def_cfa_offset 48
 5211              		.cfi_offset 6, -48
 5212 04e3 53       		pushq	%rbx
 5213              		.cfi_def_cfa_offset 56
 5214              		.cfi_offset 3, -56
 5215 04e4 4189F5   		movl	%esi, %r13d
 5216 04e7 4889FB   		movq	%rdi, %rbx
 5217              	.LBB14656:
  71:costas2_impl.cc **** 			  blocks::control_loop(loop_bw, 1.0, -1.0),
 5218              		.loc 5 71 0
 5219 04ea BE010000 		movl	$1, %esi
 5219      00
 5220              	.LVL454:
 5221              	.LBE14656:
  68:costas2_impl.cc ****       : gr::sync_block("costas2",
 5222              		.loc 5 68 0
 5223 04ef 4883EC58 		subq	$88, %rsp
 5224              		.cfi_def_cfa_offset 144
 5225              	.LBB14657:
  71:costas2_impl.cc **** 			  blocks::control_loop(loop_bw, 1.0, -1.0),
 5226              		.loc 5 71 0
 5227 04f3 4C8D7C24 		leaq	32(%rsp), %r15
 5227      20
  70:costas2_impl.cc ****               gr::io_signature::make(1, 1, sizeof(gr_complex))),
 5228              		.loc 5 70 0
 5229 04f8 4C8D7424 		leaq	16(%rsp), %r14
 5229      10
 5230              	.LBE14657:
  68:costas2_impl.cc ****       : gr::sync_block("costas2",
 5231              		.loc 5 68 0
 5232 04fd F30F1144 		movss	%xmm0, 12(%rsp)
 5232      240C
 5233              	.LBB14658:
  71:costas2_impl.cc **** 			  blocks::control_loop(loop_bw, 1.0, -1.0),
 5234              		.loc 5 71 0
 5235 0503 4C89FF   		movq	%r15, %rdi
 5236              	.LVL455:
 5237              	.LEHB23:
 5238 0506 E8000000 		call	_ZN2gr12io_signature4makeEiii@PLT
 5238      00
 5239              	.LVL456:
 5240              	.LEHE23:
  70:costas2_impl.cc ****               gr::io_signature::make(1, 1, sizeof(gr_complex))),
 5241              		.loc 5 70 0
 5242 050b B9080000 		movl	$8, %ecx
GAS LISTING /tmp/ccvmoMuv.s 			page 429


 5242      00
 5243 0510 BA010000 		movl	$1, %edx
 5243      00
 5244 0515 BE010000 		movl	$1, %esi
 5244      00
 5245 051a 4C89F7   		movq	%r14, %rdi
 5246              	.LEHB24:
 5247 051d E8000000 		call	_ZN2gr12io_signature4makeEiii@PLT
 5247      00
 5248              	.LVL457:
 5249              	.LEHE24:
 5250              	.LBB14548:
 5251              	.LBB14549:
 5252              	.LBB14550:
 5253              	.LBB14551:
 5254              	.LBB14552:
 5255              	.LBB14553:
 110:/usr/include/c++/6/bits/basic_string.h **** 
 5256              		.loc 10 110 0
 5257 0522 488D6C24 		leaq	48(%rsp), %rbp
 5257      30
 5258              	.LVL458:
 5259              	.LBE14553:
 5260              	.LBE14552:
 5261              	.LBE14551:
 5262              	.LBB14558:
 5263              	.LBB14559:
 5264              	.LBB14560:
 5265              	.LBB14561:
 196:/usr/include/c++/6/bits/basic_string.h **** 	}
 5266              		.loc 10 196 0
 5267 0527 488D1500 		leaq	7+.LC14(%rip), %rdx
 5267      000000
 5268 052e 488D3500 		leaq	.LC14(%rip), %rsi
 5268      000000
 5269              	.LBE14561:
 5270              	.LBE14560:
 5271              	.LBE14559:
 5272              	.LBE14558:
 5273              	.LBB14568:
 5274              	.LBB14556:
 5275              	.LBB14554:
 110:/usr/include/c++/6/bits/basic_string.h **** 
 5276              		.loc 10 110 0
 5277 0535 488D4510 		leaq	16(%rbp), %rax
 5278              	.LBE14554:
 5279              	.LBE14556:
 5280              	.LBE14568:
 5281              	.LBB14569:
 5282              	.LBB14566:
 5283              	.LBB14564:
 5284              	.LBB14562:
 196:/usr/include/c++/6/bits/basic_string.h **** 	}
 5285              		.loc 10 196 0
 5286 0539 4889EF   		movq	%rbp, %rdi
 5287              	.LBE14562:
 5288              	.LBE14564:
GAS LISTING /tmp/ccvmoMuv.s 			page 430


 5289              	.LBE14566:
 5290              	.LBE14569:
 5291              	.LBB14570:
 5292              	.LBB14557:
 5293              	.LBB14555:
 110:/usr/include/c++/6/bits/basic_string.h **** 
 5294              		.loc 10 110 0
 5295 053c 48894424 		movq	%rax, 48(%rsp)
 5295      30
 5296              	.LVL459:
 5297              	.LEHB25:
 5298              	.LBE14555:
 5299              	.LBE14557:
 5300              	.LBE14570:
 5301              	.LBB14571:
 5302              	.LBB14567:
 5303              	.LBB14565:
 5304              	.LBB14563:
 196:/usr/include/c++/6/bits/basic_string.h **** 	}
 5305              		.loc 10 196 0
 5306 0541 E81AFEFF 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_it
 5306      FF
 5307              	.LVL460:
 5308              	.LEHE25:
 5309              	.LBE14563:
 5310              	.LBE14565:
 5311              	.LBE14567:
 5312              	.LBE14571:
 5313              	.LBE14550:
 5314              	.LBE14549:
 5315              	.LBE14548:
  73:costas2_impl.cc ****     {
 5316              		.loc 5 73 0 discriminator 3
 5317 0546 4C8D6328 		leaq	40(%rbx), %r12
 5318 054a 4C89F9   		movq	%r15, %rcx
 5319 054d 4C89F2   		movq	%r14, %rdx
 5320 0550 4889EE   		movq	%rbp, %rsi
 5321 0553 4C89E7   		movq	%r12, %rdi
 5322              	.LEHB26:
 5323 0556 E8000000 		call	_ZN2gr10sync_blockC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN5boost10shared_pt
 5323      00
 5324              	.LVL461:
 5325              	.LEHE26:
 5326 055b 488B7C24 		movq	48(%rsp), %rdi
 5326      30
 5327              	.LVL462:
 5328              	.LBB14572:
 5329              	.LBB14573:
 5330              	.LBB14574:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 5331              		.loc 10 180 0
 5332 0560 4883C510 		addq	$16, %rbp
 5333              	.LVL463:
 5334 0564 4839EF   		cmpq	%rbp, %rdi
 5335 0567 7405     		je	.L282
 5336              	.LVL464:
 5337              	.LBB14575:
GAS LISTING /tmp/ccvmoMuv.s 			page 431


 5338              	.LBB14576:
 5339              	.LBB14577:
 5340              	.LBB14578:
 5341              		.loc 12 110 0
 5342 0569 E8000000 		call	_ZdlPv@PLT
 5342      00
 5343              	.LVL465:
 5344              	.L282:
 5345              	.LBE14578:
 5346              	.LBE14577:
 5347              	.LBE14576:
 5348              	.LBE14575:
 5349              	.LBE14574:
 5350              	.LBE14573:
 5351              	.LBE14572:
 5352              	.LBB14579:
 5353              	.LBB14580:
 5354              	.LBB14581:
 473:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 5355              		.loc 28 473 0
 5356 056e 488B6C24 		movq	24(%rsp), %rbp
 5356      18
 5357              	.LVL466:
 5358 0573 4885ED   		testq	%rbp, %rbp
 5359 0576 7417     		je	.L284
 5360              	.LVL467:
 5361              	.LBB14582:
 5362              	.LBB14583:
 5363              	.LBB14584:
 5364              	.LBB14585:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 5365              		.loc 1 50 0
 5366 0578 41BEFFFF 		movl	$-1, %r14d
 5366      FFFF
 5367              	.LVL468:
 5368 057e 4489F0   		movl	%r14d, %eax
 5369              	#APP
 5370              	# 50 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 5371              		lock
 5372              		xadd %eax, 8(%rbp)
 5373              	# 0 "" 2
 5374              	.LVL469:
 5375              	#NO_APP
 5376              	.LBE14585:
 5377              	.LBE14584:
 144:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
 5378              		.loc 1 144 0
 5379 0586 83F801   		cmpl	$1, %eax
 5380 0589 0F84A100 		je	.L308
 5380      0000
 5381              	.LVL470:
 5382              	.L284:
 5383              	.LBE14583:
 5384              	.LBE14582:
 5385              	.LBE14581:
 5386              	.LBE14580:
 5387              	.LBE14579:
GAS LISTING /tmp/ccvmoMuv.s 			page 432


 5388              	.LBB14608:
 5389              	.LBB14609:
 5390              	.LBB14610:
 473:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 5391              		.loc 28 473 0
 5392 058f 488B6C24 		movq	40(%rsp), %rbp
 5392      28
 5393 0594 4885ED   		testq	%rbp, %rbp
 5394 0597 7417     		je	.L288
 5395              	.LVL471:
 5396              	.LBB14611:
 5397              	.LBB14612:
 5398              	.LBB14613:
 5399              	.LBB14614:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 5400              		.loc 1 50 0
 5401 0599 41BEFFFF 		movl	$-1, %r14d
 5401      FFFF
 5402 059f 4489F0   		movl	%r14d, %eax
 5403              	#APP
 5404              	# 50 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 5405              		lock
 5406              		xadd %eax, 8(%rbp)
 5407              	# 0 "" 2
 5408              	.LVL472:
 5409              	#NO_APP
 5410              	.LBE14614:
 5411              	.LBE14613:
 144:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
 5412              		.loc 1 144 0
 5413 05a7 83F801   		cmpl	$1, %eax
 5414 05aa 0F84C000 		je	.L309
 5414      0000
 5415              	.LVL473:
 5416              	.L288:
 5417              	.LBE14612:
 5418              	.LBE14611:
 5419              	.LBE14610:
 5420              	.LBE14609:
 5421              	.LBE14608:
  73:costas2_impl.cc ****     {
 5422              		.loc 5 73 0
 5423 05b0 488DBB78 		leaq	632(%rbx), %rdi
 5423      020000
 5424 05b7 F30F1015 		movss	.LC15(%rip), %xmm2
 5424      00000000 
 5425 05bf F30F100D 		movss	.LC3(%rip), %xmm1
 5425      00000000 
 5426 05c7 F30F1044 		movss	12(%rsp), %xmm0
 5426      240C
 5427              	.LEHB27:
 5428 05cd E8000000 		call	_ZN2gr6blocks12control_loopC2Efff@PLT
 5428      00
 5429              	.LVL474:
 5430              	.LEHE27:
  73:costas2_impl.cc ****     {
 5431              		.loc 5 73 0 is_stmt 0 discriminator 7
GAS LISTING /tmp/ccvmoMuv.s 			page 433


 5432 05d2 488D0500 		leaq	32+_ZTVN2gr5lfast12costas2_implE(%rip), %rax
 5432      000000
 5433 05d9 44896B08 		movl	%r13d, 8(%rbx)
 5434 05dd C7430C00 		movl	$0x00000000, 12(%rbx)
 5434      000000
 5435 05e4 C7431000 		movl	$0x3f800000, 16(%rbx)
 5435      00803F
 5436 05eb 48C74320 		movq	$0, 32(%rbx)
 5436      00000000 
 5437 05f3 488903   		movq	%rax, (%rbx)
 5438 05f6 488D0500 		leaq	248+_ZTVN2gr5lfast12costas2_implE(%rip), %rax
 5438      000000
 5439 05fd 48894328 		movq	%rax, 40(%rbx)
 5440 0601 488D0500 		leaq	448+_ZTVN2gr5lfast12costas2_implE(%rip), %rax
 5440      000000
 5441 0608 48898378 		movq	%rax, 632(%rbx)
 5441      020000
  76:costas2_impl.cc **** /*
 5442              		.loc 5 76 0 is_stmt 1 discriminator 7
 5443 060f 488D0500 		leaq	_ZNK2gr5lfast12costas2_impl16phase_detector_2ESt7complexIfE(%rip), %rax
 5443      000000
 5444 0616 48894318 		movq	%rax, 24(%rbx)
 5445              	.LBE14658:
  84:costas2_impl.cc **** 
 5446              		.loc 5 84 0 discriminator 7
 5447 061a 4883C458 		addq	$88, %rsp
 5448              		.cfi_remember_state
 5449              		.cfi_def_cfa_offset 56
 5450 061e 5B       		popq	%rbx
 5451              		.cfi_def_cfa_offset 48
 5452              	.LVL475:
 5453 061f 5D       		popq	%rbp
 5454              		.cfi_def_cfa_offset 40
 5455 0620 415C     		popq	%r12
 5456              		.cfi_def_cfa_offset 32
 5457              	.LVL476:
 5458 0622 415D     		popq	%r13
 5459              		.cfi_def_cfa_offset 24
 5460              	.LVL477:
 5461 0624 415E     		popq	%r14
 5462              		.cfi_def_cfa_offset 16
 5463 0626 415F     		popq	%r15
 5464              		.cfi_def_cfa_offset 8
 5465 0628 C3       		ret
 5466              	.LVL478:
 5467 0629 0F1F8000 		.p2align 4,,10
 5467      000000
 5468              		.p2align 3
 5469              	.L308:
 5470              		.cfi_restore_state
 5471              	.LBB14659:
 5472              	.LBB14629:
 5473              	.LBB14606:
 5474              	.LBB14604:
 5475              	.LBB14602:
 5476              	.LBB14600:
 5477              	.LBB14586:
GAS LISTING /tmp/ccvmoMuv.s 			page 434


 5478              	.LBB14587:
 146:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****             weak_release();
 5479              		.loc 1 146 0
 5480 0630 488B4500 		movq	0(%rbp), %rax
 5481 0634 4889EF   		movq	%rbp, %rdi
 5482 0637 FF5010   		call	*16(%rax)
 5483              	.LVL479:
 5484              	.LBB14588:
 5485              	.LBB14589:
 5486              	.LBB14590:
 5487              	.LBB14591:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 5488              		.loc 1 50 0
 5489              	#APP
 5490              	# 50 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 5491              		lock
 5492              		xadd %r14d, 12(%rbp)
 5493              	# 0 "" 2
 5494              	.LVL480:
 5495              	#NO_APP
 5496              	.LBE14591:
 5497              	.LBE14590:
 158:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
 5498              		.loc 1 158 0
 5499 0640 4183FE01 		cmpl	$1, %r14d
 5500 0644 0F8545FF 		jne	.L284
 5500      FFFF
 5501              		.loc 1 160 0
 5502 064a 488B4500 		movq	0(%rbp), %rax
 5503 064e 488D0D00 		leaq	_ZN5boost6detail15sp_counted_base7destroyEv(%rip), %rcx
 5503      000000
 5504              	.LBB14592:
 5505              	.LBB14593:
 126:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     }
 5506              		.loc 1 126 0
 5507 0655 4889EF   		movq	%rbp, %rdi
 5508              	.LBE14593:
 5509              	.LBE14592:
 5510              		.loc 1 160 0
 5511 0658 488B5018 		movq	24(%rax), %rdx
 5512 065c 4839CA   		cmpq	%rcx, %rdx
 5513 065f 754F     		jne	.L286
 5514              	.LVL481:
 5515              	.LBB14595:
 5516              	.LBB14594:
 126:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     }
 5517              		.loc 1 126 0
 5518 0661 FF5008   		call	*8(%rax)
 5519              	.LVL482:
 5520 0664 E926FFFF 		jmp	.L284
 5520      FF
 5521              	.LVL483:
 5522 0669 0F1F8000 		.p2align 4,,10
 5522      000000
 5523              		.p2align 3
 5524              	.L309:
 5525              	.LBE14594:
GAS LISTING /tmp/ccvmoMuv.s 			page 435


 5526              	.LBE14595:
 5527              	.LBE14589:
 5528              	.LBE14588:
 5529              	.LBE14587:
 5530              	.LBE14586:
 5531              	.LBE14600:
 5532              	.LBE14602:
 5533              	.LBE14604:
 5534              	.LBE14606:
 5535              	.LBE14629:
 5536              	.LBB14630:
 5537              	.LBB14628:
 5538              	.LBB14627:
 5539              	.LBB14626:
 5540              	.LBB14625:
 5541              	.LBB14615:
 5542              	.LBB14616:
 146:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****             weak_release();
 5543              		.loc 1 146 0
 5544 0670 488B4500 		movq	0(%rbp), %rax
 5545 0674 4889EF   		movq	%rbp, %rdi
 5546 0677 FF5010   		call	*16(%rax)
 5547              	.LVL484:
 5548              	.LBB14617:
 5549              	.LBB14618:
 5550              	.LBB14619:
 5551              	.LBB14620:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 5552              		.loc 1 50 0
 5553              	#APP
 5554              	# 50 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 5555              		lock
 5556              		xadd %r14d, 12(%rbp)
 5557              	# 0 "" 2
 5558              	.LVL485:
 5559              	#NO_APP
 5560              	.LBE14620:
 5561              	.LBE14619:
 158:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
 5562              		.loc 1 158 0
 5563 0680 4183FE01 		cmpl	$1, %r14d
 5564 0684 0F8526FF 		jne	.L288
 5564      FFFF
 5565              		.loc 1 160 0
 5566 068a 488B4500 		movq	0(%rbp), %rax
 5567 068e 488D0D00 		leaq	_ZN5boost6detail15sp_counted_base7destroyEv(%rip), %rcx
 5567      000000
 5568              	.LBB14621:
 5569              	.LBB14622:
 126:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     }
 5570              		.loc 1 126 0
 5571 0695 4889EF   		movq	%rbp, %rdi
 5572              	.LBE14622:
 5573              	.LBE14621:
 5574              		.loc 1 160 0
 5575 0698 488B5018 		movq	24(%rax), %rdx
 5576 069c 4839CA   		cmpq	%rcx, %rdx
GAS LISTING /tmp/ccvmoMuv.s 			page 436


 5577 069f 7508     		jne	.L290
 5578              	.LVL486:
 5579              	.LBB14624:
 5580              	.LBB14623:
 126:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     }
 5581              		.loc 1 126 0
 5582 06a1 FF5008   		call	*8(%rax)
 5583              	.LVL487:
 5584 06a4 E907FFFF 		jmp	.L288
 5584      FF
 5585              	.LVL488:
 5586              	.L290:
 5587              	.LBE14623:
 5588              	.LBE14624:
 5589              		.loc 1 160 0
 5590 06a9 FFD2     		call	*%rdx
 5591              	.LVL489:
 5592 06ab E900FFFF 		jmp	.L288
 5592      FF
 5593              	.LVL490:
 5594              	.L286:
 5595              	.LBE14618:
 5596              	.LBE14617:
 5597              	.LBE14616:
 5598              	.LBE14615:
 5599              	.LBE14625:
 5600              	.LBE14626:
 5601              	.LBE14627:
 5602              	.LBE14628:
 5603              	.LBE14630:
 5604              	.LBB14631:
 5605              	.LBB14607:
 5606              	.LBB14605:
 5607              	.LBB14603:
 5608              	.LBB14601:
 5609              	.LBB14599:
 5610              	.LBB14598:
 5611              	.LBB14597:
 5612              	.LBB14596:
 5613 06b0 FFD2     		call	*%rdx
 5614              	.LVL491:
 5615 06b2 E9D8FEFF 		jmp	.L284
 5615      FF
 5616              	.LVL492:
 5617              	.L305:
 5618 06b7 4889C5   		movq	%rax, %rbp
 5619              	.LVL493:
 5620              	.LBE14596:
 5621              	.LBE14597:
 5622              	.LBE14598:
 5623              	.LBE14599:
 5624              	.LBE14601:
 5625              	.LBE14603:
 5626              	.LBE14605:
 5627              	.LBE14607:
 5628              	.LBE14631:
 5629              	.LBB14632:
GAS LISTING /tmp/ccvmoMuv.s 			page 437


 5630              	.LBB14633:
 5631              		.loc 15 37 0
 5632 06ba 488D0500 		leaq	16+_ZTVN2gr10sync_blockE(%rip), %rax
 5632      000000
 5633 06c1 4C89E7   		movq	%r12, %rdi
 5634 06c4 48894328 		movq	%rax, 40(%rbx)
 5635 06c8 E8000000 		call	_ZN2gr5blockD2Ev@PLT
 5635      00
 5636              	.LVL494:
 5637 06cd 4889EF   		movq	%rbp, %rdi
 5638              	.LEHB28:
 5639 06d0 E8000000 		call	_Unwind_Resume@PLT
 5639      00
 5640              	.LVL495:
 5641              	.LEHE28:
 5642              	.L303:
 5643 06d5 4889C3   		movq	%rax, %rbx
 5644              	.LVL496:
 5645              	.L293:
 5646              	.LBE14633:
 5647              	.LBE14632:
 5648              	.LBB14634:
 5649              	.LBB14635:
 5650              	.LBB14636:
 473:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 5651              		.loc 28 473 0 discriminator 2
 5652 06d8 488B7C24 		movq	24(%rsp), %rdi
 5652      18
 5653 06dd 4885FF   		testq	%rdi, %rdi
 5654 06e0 7412     		je	.L297
 5655              	.LVL497:
 5656              	.LBB14637:
 5657              	.LBB14638:
 5658              	.LBB14639:
 5659              	.LBB14640:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 5660              		.loc 1 50 0
 5661 06e2 83C8FF   		orl	$-1, %eax
 5662              	#APP
 5663              	# 50 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 5664              		lock
 5665              		xadd %eax, 8(%rdi)
 5666              	# 0 "" 2
 5667              	.LVL498:
 5668              	#NO_APP
 5669              	.LBE14640:
 5670              	.LBE14639:
 144:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
 5671              		.loc 1 144 0
 5672 06ea 83E801   		subl	$1, %eax
 5673 06ed 7505     		jne	.L297
 5674 06ef E8000000 		call	_ZN5boost6detail15sp_counted_base7releaseEv.part.17
 5674      00
 5675              	.LVL499:
 5676              	.L297:
 5677              	.LBE14638:
 5678              	.LBE14637:
GAS LISTING /tmp/ccvmoMuv.s 			page 438


 5679              	.LBE14636:
 5680              	.LBE14635:
 5681              	.LBE14634:
 5682              	.LBB14641:
 5683              	.LBB14642:
 5684              	.LBB14643:
 473:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 5685              		.loc 28 473 0
 5686 06f4 488B7C24 		movq	40(%rsp), %rdi
 5686      28
 5687 06f9 4885FF   		testq	%rdi, %rdi
 5688 06fc 7412     		je	.L299
 5689              	.LVL500:
 5690              	.LBB14644:
 5691              	.LBB14645:
 5692              	.LBB14646:
 5693              	.LBB14647:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 5694              		.loc 1 50 0
 5695 06fe 83C8FF   		orl	$-1, %eax
 5696              	#APP
 5697              	# 50 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 5698              		lock
 5699              		xadd %eax, 8(%rdi)
 5700              	# 0 "" 2
 5701              	.LVL501:
 5702              	#NO_APP
 5703              	.LBE14647:
 5704              	.LBE14646:
 144:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
 5705              		.loc 1 144 0
 5706 0706 83E801   		subl	$1, %eax
 5707 0709 7505     		jne	.L299
 5708 070b E8000000 		call	_ZN5boost6detail15sp_counted_base7releaseEv.part.17
 5708      00
 5709              	.LVL502:
 5710              	.L299:
 5711 0710 4889DF   		movq	%rbx, %rdi
 5712              	.LEHB29:
 5713 0713 E8000000 		call	_Unwind_Resume@PLT
 5713      00
 5714              	.LVL503:
 5715              	.LEHE29:
 5716              	.L304:
 5717 0718 488B7C24 		movq	48(%rsp), %rdi
 5717      30
 5718              	.LBE14645:
 5719              	.LBE14644:
 5720              	.LBE14643:
 5721              	.LBE14642:
 5722              	.LBE14641:
 5723              	.LBB14648:
 5724              	.LBB14649:
 5725              	.LBB14650:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 5726              		.loc 10 180 0
 5727 071d 4883C510 		addq	$16, %rbp
GAS LISTING /tmp/ccvmoMuv.s 			page 439


 5728              	.LVL504:
 5729 0721 4889C3   		movq	%rax, %rbx
 5730              	.LVL505:
 5731 0724 4839EF   		cmpq	%rbp, %rdi
 5732 0727 74AF     		je	.L293
 5733              	.LVL506:
 5734              	.LBB14651:
 5735              	.LBB14652:
 5736              	.LBB14653:
 5737              	.LBB14654:
 5738              		.loc 12 110 0
 5739 0729 E8000000 		call	_ZdlPv@PLT
 5739      00
 5740              	.LVL507:
 5741 072e EBA8     		jmp	.L293
 5742              	.LVL508:
 5743              	.L302:
 5744 0730 4889C3   		movq	%rax, %rbx
 5745              	.LVL509:
 5746 0733 EBBF     		jmp	.L297
 5747              	.LBE14654:
 5748              	.LBE14653:
 5749              	.LBE14652:
 5750              	.LBE14651:
 5751              	.LBE14650:
 5752              	.LBE14649:
 5753              	.LBE14648:
 5754              	.LBE14659:
 5755              		.cfi_endproc
 5756              	.LFE11022:
 5757              		.section	.gcc_except_table,"a",@progbits
 5758              	.LLSDA11022:
 5759 0000 FF       		.byte	0xff
 5760 0001 FF       		.byte	0xff
 5761 0002 01       		.byte	0x1
 5762 0003 24       		.uleb128 .LLSDACSE11022-.LLSDACSB11022
 5763              	.LLSDACSB11022:
 5764 0004 36       		.uleb128 .LEHB23-.LFB11022
 5765 0005 05       		.uleb128 .LEHE23-.LEHB23
 5766 0006 00       		.uleb128 0
 5767 0007 00       		.uleb128 0
 5768 0008 4D       		.uleb128 .LEHB24-.LFB11022
 5769 0009 05       		.uleb128 .LEHE24-.LEHB24
 5770 000a E004     		.uleb128 .L302-.LFB11022
 5771 000c 00       		.uleb128 0
 5772 000d 71       		.uleb128 .LEHB25-.LFB11022
 5773 000e 05       		.uleb128 .LEHE25-.LEHB25
 5774 000f 8504     		.uleb128 .L303-.LFB11022
 5775 0011 00       		.uleb128 0
 5776 0012 8601     		.uleb128 .LEHB26-.LFB11022
 5777 0014 05       		.uleb128 .LEHE26-.LEHB26
 5778 0015 C804     		.uleb128 .L304-.LFB11022
 5779 0017 00       		.uleb128 0
 5780 0018 FD01     		.uleb128 .LEHB27-.LFB11022
 5781 001a 05       		.uleb128 .LEHE27-.LEHB27
 5782 001b E703     		.uleb128 .L305-.LFB11022
 5783 001d 00       		.uleb128 0
GAS LISTING /tmp/ccvmoMuv.s 			page 440


 5784 001e 8004     		.uleb128 .LEHB28-.LFB11022
 5785 0020 05       		.uleb128 .LEHE28-.LEHB28
 5786 0021 00       		.uleb128 0
 5787 0022 00       		.uleb128 0
 5788 0023 C304     		.uleb128 .LEHB29-.LFB11022
 5789 0025 05       		.uleb128 .LEHE29-.LEHB29
 5790 0026 00       		.uleb128 0
 5791 0027 00       		.uleb128 0
 5792              	.LLSDACSE11022:
 5793              		.text
 5795 0735 90       		.align 2
 5796 0736 662E0F1F 		.p2align 4,,15
 5796      84000000 
 5796      0000
 5797              		.globl	_ZN2gr5lfast12costas2_implD2Ev
 5799              	_ZN2gr5lfast12costas2_implD2Ev:
 5800              	.LFB11024:
  89:costas2_impl.cc ****     {
 5801              		.loc 5 89 0
 5802              		.cfi_startproc
 5803              	.LVL510:
 5804              	.LBB14660:
  89:costas2_impl.cc ****     {
 5805              		.loc 5 89 0
 5806 0740 488B06   		movq	(%rsi), %rax
 5807 0743 488907   		movq	%rax, (%rdi)
 5808 0746 488B50E8 		movq	-24(%rax), %rdx
 5809 074a 488B4E20 		movq	32(%rsi), %rcx
 5810 074e 488B40E0 		movq	-32(%rax), %rax
 5811 0752 48890C17 		movq	%rcx, (%rdi,%rdx)
 5812 0756 488B5628 		movq	40(%rsi), %rdx
 5813 075a 48891407 		movq	%rdx, (%rdi,%rax)
 5814              	.LVL511:
 5815              	.LBB14661:
 5816              	.LBB14662:
 5817              		.loc 14 37 0
 5818 075e 488B4608 		movq	8(%rsi), %rax
 5819 0762 488907   		movq	%rax, (%rdi)
 5820 0765 488B50E8 		movq	-24(%rax), %rdx
 5821 0769 488B4E10 		movq	16(%rsi), %rcx
 5822 076d 488B40E0 		movq	-32(%rax), %rax
 5823 0771 48890C17 		movq	%rcx, (%rdi,%rdx)
 5824 0775 488B5618 		movq	24(%rsi), %rdx
 5825 0779 48891407 		movq	%rdx, (%rdi,%rax)
 5826              	.LVL512:
 5827 077d C3       		ret
 5828              	.LBE14662:
 5829              	.LBE14661:
 5830              	.LBE14660:
 5831              		.cfi_endproc
 5832              	.LFE11024:
 5834              		.align 2
 5835 077e 6690     		.p2align 4,,15
 5836              		.globl	_ZN2gr5lfast12costas2_impl16handle_set_noiseEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE
 5838              	_ZN2gr5lfast12costas2_impl16handle_set_noiseEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE:
 5839              	.LFB11028:
 101:costas2_impl.cc ****       if(pmt::is_real(msg)) {
GAS LISTING /tmp/ccvmoMuv.s 			page 441


 5840              		.loc 5 101 0
 5841              		.cfi_startproc
 5842              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 5843              		.cfi_lsda 0x1b,.LLSDA11028
 5844              	.LVL513:
 5845 0780 4155     		pushq	%r13
 5846              		.cfi_def_cfa_offset 16
 5847              		.cfi_offset 13, -16
 5848 0782 4154     		pushq	%r12
 5849              		.cfi_def_cfa_offset 24
 5850              		.cfi_offset 12, -24
 5851 0784 4989F4   		movq	%rsi, %r12
 5852 0787 55       		pushq	%rbp
 5853              		.cfi_def_cfa_offset 32
 5854              		.cfi_offset 6, -32
 5855 0788 53       		pushq	%rbx
 5856              		.cfi_def_cfa_offset 40
 5857              		.cfi_offset 3, -40
 5858 0789 4889FB   		movq	%rdi, %rbx
 5859 078c 4883EC18 		subq	$24, %rsp
 5860              		.cfi_def_cfa_offset 64
 5861              	.LVL514:
 5862              	.LBB14663:
 5863              	.LBB14664:
 5864              	.LBB14665:
 5865              		.file 34 "/usr/include/boost/smart_ptr/intrusive_ptr.hpp"
   1:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #ifndef BOOST_SMART_PTR_INTRUSIVE_PTR_HPP_INCLUDED
   2:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #define BOOST_SMART_PTR_INTRUSIVE_PTR_HPP_INCLUDED
   3:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
   4:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** //
   5:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** //  intrusive_ptr.hpp
   6:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** //
   7:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** //  Copyright (c) 2001, 2002 Peter Dimov
   8:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** //
   9:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** // Distributed under the Boost Software License, Version 1.0. (See
  10:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** // accompanying file LICENSE_1_0.txt or copy at
  11:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** // http://www.boost.org/LICENSE_1_0.txt)
  12:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** //
  13:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** //  See http://www.boost.org/libs/smart_ptr/intrusive_ptr.html for documentation.
  14:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** //
  15:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
  16:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #include <boost/config.hpp>
  17:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
  18:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #include <boost/assert.hpp>
  19:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #include <boost/detail/workaround.hpp>
  20:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #include <boost/smart_ptr/detail/sp_convertible.hpp>
  21:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #include <boost/smart_ptr/detail/sp_nullptr_t.hpp>
  22:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
  23:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #include <boost/config/no_tr1/functional.hpp>           // for std::less
  24:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
  25:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #if !defined(BOOST_NO_IOSTREAM)
  26:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #if !defined(BOOST_NO_IOSFWD)
  27:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #include <iosfwd>               // for std::basic_ostream
  28:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #else
  29:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #include <ostream>
  30:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #endif
  31:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #endif
GAS LISTING /tmp/ccvmoMuv.s 			page 442


  32:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
  33:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
  34:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** namespace boost
  35:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** {
  36:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
  37:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** //
  38:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** //  intrusive_ptr
  39:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** //
  40:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** //  A smart pointer that uses intrusive reference counting.
  41:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** //
  42:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** //  Relies on unqualified calls to
  43:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** //  
  44:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** //      void intrusive_ptr_add_ref(T * p);
  45:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** //      void intrusive_ptr_release(T * p);
  46:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** //
  47:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** //          (p != 0)
  48:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** //
  49:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** //  The object is responsible for destroying itself.
  50:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** //
  51:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
  52:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** template<class T> class intrusive_ptr
  53:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** {
  54:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** private:
  55:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
  56:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     typedef intrusive_ptr this_type;
  57:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
  58:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** public:
  59:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
  60:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     typedef T element_type;
  61:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
  62:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     BOOST_CONSTEXPR intrusive_ptr() BOOST_NOEXCEPT : px( 0 )
  63:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
  64:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
  65:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
  66:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     intrusive_ptr( T * p, bool add_ref = true ): px( p )
  67:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
  68:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         if( px != 0 && add_ref ) intrusive_ptr_add_ref( px );
  69:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
  70:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
  71:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #if !defined(BOOST_NO_MEMBER_TEMPLATES) || defined(BOOST_MSVC6_MEMBER_TEMPLATES)
  72:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
  73:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     template<class U>
  74:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #if !defined( BOOST_SP_NO_SP_CONVERTIBLE )
  75:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
  76:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     intrusive_ptr( intrusive_ptr<U> const & rhs, typename boost::detail::sp_enable_if_convertible<U
  77:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
  78:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #else
  79:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
  80:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     intrusive_ptr( intrusive_ptr<U> const & rhs )
  81:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
  82:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #endif
  83:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     : px( rhs.get() )
  84:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
  85:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         if( px != 0 ) intrusive_ptr_add_ref( px );
  86:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
  87:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
  88:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #endif
GAS LISTING /tmp/ccvmoMuv.s 			page 443


  89:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
  90:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     intrusive_ptr(intrusive_ptr const & rhs): px( rhs.px )
 5866              		.loc 34 90 0
 5867 0790 488B3E   		movq	(%rsi), %rdi
 5868              	.LVL515:
  91:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
  92:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         if( px != 0 ) intrusive_ptr_add_ref( px );
 5869              		.loc 34 92 0
 5870 0793 4885FF   		testq	%rdi, %rdi
  90:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 5871              		.loc 34 90 0
 5872 0796 48897C24 		movq	%rdi, 8(%rsp)
 5872      08
 5873              		.loc 34 92 0
 5874 079b 7405     		je	.L312
 5875              	.LEHB30:
 5876 079d E8000000 		call	_ZN3pmt21intrusive_ptr_add_refEPNS_8pmt_baseE@PLT
 5876      00
 5877              	.LVL516:
 5878              	.LEHE30:
 5879              	.L312:
 5880              	.LBE14665:
 5881              	.LBE14664:
 5882              	.LBE14663:
 102:costas2_impl.cc ****         d_noise = pmt::to_double(msg);
 5883              		.loc 5 102 0
 5884 07a2 488D6C24 		leaq	8(%rsp), %rbp
 5884      08
 5885 07a7 4889EF   		movq	%rbp, %rdi
 5886              	.LEHB31:
 5887 07aa E8000000 		call	_ZN3pmt7is_realEN5boost13intrusive_ptrINS_8pmt_baseEEE@PLT
 5887      00
 5888              	.LVL517:
 5889              	.LEHE31:
 5890              	.LBB14666:
 5891              	.LBB14667:
  93:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
  94:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
  95:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     ~intrusive_ptr()
  96:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
  97:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         if( px != 0 ) intrusive_ptr_release( px );
 5892              		.loc 34 97 0
 5893 07af 488B7C24 		movq	8(%rsp), %rdi
 5893      08
 5894              	.LBE14667:
 5895              	.LBE14666:
 102:costas2_impl.cc ****         d_noise = pmt::to_double(msg);
 5896              		.loc 5 102 0
 5897 07b4 4189C5   		movl	%eax, %r13d
 5898              	.LVL518:
 5899              	.LBB14669:
 5900              	.LBB14668:
 5901              		.loc 34 97 0
 5902 07b7 4885FF   		testq	%rdi, %rdi
 5903 07ba 7405     		je	.L313
 5904 07bc E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 5904      00
GAS LISTING /tmp/ccvmoMuv.s 			page 444


 5905              	.LVL519:
 5906              	.L313:
 5907              	.LBE14668:
 5908              	.LBE14669:
 102:costas2_impl.cc ****         d_noise = pmt::to_double(msg);
 5909              		.loc 5 102 0
 5910 07c1 4584ED   		testb	%r13b, %r13b
 5911 07c4 7452     		je	.L311
 5912              	.LVL520:
 5913              	.LBB14670:
 5914              	.LBB14671:
 5915              	.LBB14672:
  90:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 5916              		.loc 34 90 0
 5917 07c6 498B3C24 		movq	(%r12), %rdi
  92:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 5918              		.loc 34 92 0
 5919 07ca 4885FF   		testq	%rdi, %rdi
  90:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 5920              		.loc 34 90 0
 5921 07cd 48897C24 		movq	%rdi, 8(%rsp)
 5921      08
  92:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 5922              		.loc 34 92 0
 5923 07d2 7405     		je	.L315
 5924              	.LEHB32:
 5925 07d4 E8000000 		call	_ZN3pmt21intrusive_ptr_add_refEPNS_8pmt_baseE@PLT
 5925      00
 5926              	.LVL521:
 5927              	.LEHE32:
 5928              	.L315:
 5929              	.LBE14672:
 5930              	.LBE14671:
 5931              	.LBE14670:
 103:costas2_impl.cc ****         d_noise = powf(10.0f, d_noise/10.0f);
 5932              		.loc 5 103 0
 5933 07d9 4889EF   		movq	%rbp, %rdi
 5934              	.LEHB33:
 5935 07dc E8000000 		call	_ZN3pmt9to_doubleEN5boost13intrusive_ptrINS_8pmt_baseEEE@PLT
 5935      00
 5936              	.LVL522:
 5937              	.LEHE33:
 5938 07e1 660FEFC9 		pxor	%xmm1, %xmm1
 5939              	.LBB14673:
 5940              	.LBB14674:
 5941              		.loc 34 97 0
 5942 07e5 488B7C24 		movq	8(%rsp), %rdi
 5942      08
 5943              	.LBE14674:
 5944              	.LBE14673:
 103:costas2_impl.cc ****         d_noise = powf(10.0f, d_noise/10.0f);
 5945              		.loc 5 103 0
 5946 07ea F20F5AC8 		cvtsd2ss	%xmm0, %xmm1
 5947              	.LBB14677:
 5948              	.LBB14675:
 5949              		.loc 34 97 0
 5950 07ee 4885FF   		testq	%rdi, %rdi
GAS LISTING /tmp/ccvmoMuv.s 			page 445


 5951              	.LBE14675:
 5952              	.LBE14677:
 103:costas2_impl.cc ****         d_noise = powf(10.0f, d_noise/10.0f);
 5953              		.loc 5 103 0
 5954 07f1 F30F114B 		movss	%xmm1, 16(%rbx)
 5954      10
 5955              	.LVL523:
 5956              	.LBB14678:
 5957              	.LBB14676:
 5958              		.loc 34 97 0
 5959 07f6 740A     		je	.L316
 5960 07f8 E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 5960      00
 5961              	.LVL524:
 5962 07fd F30F104B 		movss	16(%rbx), %xmm1
 5962      10
 5963              	.L316:
 5964              	.LVL525:
 5965              	.LBE14676:
 5966              	.LBE14678:
 104:costas2_impl.cc ****       }
 5967              		.loc 5 104 0
 5968 0802 F30F1005 		movss	.LC16(%rip), %xmm0
 5968      00000000 
 5969 080a F30F5EC8 		divss	%xmm0, %xmm1
 5970 080e E8000000 		call	powf@PLT
 5970      00
 5971              	.LVL526:
 5972 0813 F30F1143 		movss	%xmm0, 16(%rbx)
 5972      10
 5973              	.L311:
 106:costas2_impl.cc **** 
 5974              		.loc 5 106 0
 5975 0818 4883C418 		addq	$24, %rsp
 5976              		.cfi_remember_state
 5977              		.cfi_def_cfa_offset 40
 5978 081c 5B       		popq	%rbx
 5979              		.cfi_def_cfa_offset 32
 5980              	.LVL527:
 5981 081d 5D       		popq	%rbp
 5982              		.cfi_def_cfa_offset 24
 5983 081e 415C     		popq	%r12
 5984              		.cfi_def_cfa_offset 16
 5985              	.LVL528:
 5986 0820 415D     		popq	%r13
 5987              		.cfi_def_cfa_offset 8
 5988 0822 C3       		ret
 5989              	.LVL529:
 5990              	.L322:
 5991              		.cfi_restore_state
 5992              	.LBB14679:
 5993              	.LBB14680:
 5994              		.loc 34 97 0
 5995 0823 488B7C24 		movq	8(%rsp), %rdi
 5995      08
 5996 0828 4889C3   		movq	%rax, %rbx
 5997              	.LVL530:
GAS LISTING /tmp/ccvmoMuv.s 			page 446


 5998 082b 4885FF   		testq	%rdi, %rdi
 5999 082e 7405     		je	.L320
 6000 0830 E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 6000      00
 6001              	.LVL531:
 6002              	.L320:
 6003 0835 4889DF   		movq	%rbx, %rdi
 6004              	.LEHB34:
 6005 0838 E8000000 		call	_Unwind_Resume@PLT
 6005      00
 6006              	.LVL532:
 6007              	.LEHE34:
 6008              	.L321:
 6009              	.LBE14680:
 6010              	.LBE14679:
 6011              	.LBB14681:
 6012              	.LBB14682:
 6013 083d 488B7C24 		movq	8(%rsp), %rdi
 6013      08
 6014 0842 4889C3   		movq	%rax, %rbx
 6015              	.LVL533:
 6016 0845 4885FF   		testq	%rdi, %rdi
 6017 0848 74EB     		je	.L320
 6018 084a E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 6018      00
 6019              	.LVL534:
 6020 084f EBE4     		jmp	.L320
 6021              	.LBE14682:
 6022              	.LBE14681:
 6023              		.cfi_endproc
 6024              	.LFE11028:
 6025              		.section	.gcc_except_table
 6026              	.LLSDA11028:
 6027 0028 FF       		.byte	0xff
 6028 0029 FF       		.byte	0xff
 6029 002a 01       		.byte	0x1
 6030 002b 17       		.uleb128 .LLSDACSE11028-.LLSDACSB11028
 6031              	.LLSDACSB11028:
 6032 002c 1D       		.uleb128 .LEHB30-.LFB11028
 6033 002d 05       		.uleb128 .LEHE30-.LEHB30
 6034 002e 00       		.uleb128 0
 6035 002f 00       		.uleb128 0
 6036 0030 2A       		.uleb128 .LEHB31-.LFB11028
 6037 0031 05       		.uleb128 .LEHE31-.LEHB31
 6038 0032 BD01     		.uleb128 .L321-.LFB11028
 6039 0034 00       		.uleb128 0
 6040 0035 54       		.uleb128 .LEHB32-.LFB11028
 6041 0036 05       		.uleb128 .LEHE32-.LEHB32
 6042 0037 00       		.uleb128 0
 6043 0038 00       		.uleb128 0
 6044 0039 5C       		.uleb128 .LEHB33-.LFB11028
 6045 003a 05       		.uleb128 .LEHE33-.LEHB33
 6046 003b A301     		.uleb128 .L322-.LFB11028
 6047 003d 00       		.uleb128 0
 6048 003e B801     		.uleb128 .LEHB34-.LFB11028
 6049 0040 05       		.uleb128 .LEHE34-.LEHB34
 6050 0041 00       		.uleb128 0
GAS LISTING /tmp/ccvmoMuv.s 			page 447


 6051 0042 00       		.uleb128 0
 6052              	.LLSDACSE11028:
 6053              		.text
 6055              		.section	.text._ZN8gnuradio16get_initial_sptrIN2gr5lfast12costas2_implEEEN5boost10shared_ptrIT_EEP
 6056              		.p2align 4,,15
 6057              		.weak	_ZN8gnuradio16get_initial_sptrIN2gr5lfast12costas2_implEEEN5boost10shared_ptrIT_EEPS6_
 6059              	_ZN8gnuradio16get_initial_sptrIN2gr5lfast12costas2_implEEEN5boost10shared_ptrIT_EEPS6_:
 6060              	.LFB12333:
 6061              		.file 35 "/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h"
   1:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h **** /* -*- c++ -*- */
   2:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h **** /*
   3:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****  * Copyright 2008,2013 Free Software Foundation, Inc.
   4:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****  *
   5:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****  * This file is part of GNU Radio
   6:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****  *
   7:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****  * GNU Radio is free software; you can redistribute it and/or modify
   8:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****  * it under the terms of the GNU General Public License as published by
   9:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****  * the Free Software Foundation; either version 3, or (at your option)
  10:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****  * any later version.
  11:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****  *
  12:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****  * GNU Radio is distributed in the hope that it will be useful,
  13:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****  * GNU General Public License for more details.
  16:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****  *
  17:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****  * You should have received a copy of the GNU General Public License along
  18:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****  */
  21:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h **** 
  22:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h **** #ifndef INCLUDED_GR_RUNTIME_SPTR_MAGIC_H
  23:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h **** #define INCLUDED_GR_RUNTIME_SPTR_MAGIC_H
  24:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h **** 
  25:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h **** #include <gnuradio/api.h>
  26:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h **** #include <boost/shared_ptr.hpp>
  27:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h **** 
  28:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h **** namespace gr {
  29:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****   class basic_block;
  30:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****   class hier_block2;
  31:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h **** }
  32:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h **** 
  33:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h **** namespace gnuradio {
  34:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****   namespace detail {
  35:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h **** 
  36:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****     class GR_RUNTIME_API sptr_magic
  37:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****     {
  38:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****     public:
  39:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****       static boost::shared_ptr<gr::basic_block> fetch_initial_sptr(gr::basic_block *p);
  40:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****       static void create_and_stash_initial_sptr(gr::hier_block2 *p);
  41:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****       static void cancel_initial_sptr(gr::hier_block2 *p);
  42:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****     };
  43:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****   };
  44:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h **** 
  45:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****   /*
  46:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****    * \brief New!  Improved!  Standard method to get/create the
  47:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****    * boost::shared_ptr for a block.
  48:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****    */
GAS LISTING /tmp/ccvmoMuv.s 			page 448


  49:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****   template<class T>
  50:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****   boost::shared_ptr<T>
  51:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****   get_initial_sptr(T *p)
 6062              		.loc 35 51 0
 6063              		.cfi_startproc
 6064              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 6065              		.cfi_lsda 0x1b,.LLSDA12333
 6066              	.LVL535:
 6067 0000 4154     		pushq	%r12
 6068              		.cfi_def_cfa_offset 16
 6069              		.cfi_offset 12, -16
 6070 0002 55       		pushq	%rbp
 6071              		.cfi_def_cfa_offset 24
 6072              		.cfi_offset 6, -24
 6073 0003 4889FD   		movq	%rdi, %rbp
 6074 0006 53       		pushq	%rbx
 6075              		.cfi_def_cfa_offset 32
 6076              		.cfi_offset 3, -32
 6077 0007 4883EC10 		subq	$16, %rsp
 6078              		.cfi_def_cfa_offset 48
  52:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****   {
  53:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****     return boost::dynamic_pointer_cast<T, gr::basic_block>
  54:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****       (detail::sptr_magic::fetch_initial_sptr(p));
 6079              		.loc 35 54 0
 6080 000b 4885F6   		testq	%rsi, %rsi
 6081 000e 0F84AC00 		je	.L353
 6081      0000
 6082              		.loc 35 54 0 is_stmt 0 discriminator 1
 6083 0014 488B06   		movq	(%rsi), %rax
 6084 0017 480370E8 		addq	-24(%rax), %rsi
 6085              	.LVL536:
 6086              	.L346:
 6087              		.loc 35 54 0 discriminator 4
 6088 001b 4889E7   		movq	%rsp, %rdi
 6089              	.LVL537:
 6090              	.LEHB35:
 6091 001e E8000000 		call	_ZN8gnuradio6detail10sptr_magic18fetch_initial_sptrEPN2gr11basic_blockE@PLT
 6091      00
 6092              	.LVL538:
 6093              	.LEHE35:
 6094 0023 488B3C24 		movq	(%rsp), %rdi
 6095              	.LVL539:
 6096              	.LBB14714:
 6097              	.LBB14715:
 704:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         return *px;
 705:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 706:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     
 707:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     // never throws (but has a BOOST_ASSERT in it, so not marked with BOOST_NOEXCEPT)
 708:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typename boost::detail::sp_member_access< T >::type operator-> () const 
 709:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 710:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         BOOST_ASSERT( px != 0 );
 711:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         return px;
 712:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 713:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     
 714:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     // never throws (but has a BOOST_ASSERT in it, so not marked with BOOST_NOEXCEPT)
 715:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typename boost::detail::sp_array_access< T >::type operator[] ( std::ptrdiff_t i ) const
 716:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
GAS LISTING /tmp/ccvmoMuv.s 			page 449


 717:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         BOOST_ASSERT( px != 0 );
 718:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         BOOST_ASSERT( i >= 0 && ( i < boost::detail::sp_extent< T >::value || boost::detail::sp_ext
 719:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 720:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         return static_cast< typename boost::detail::sp_array_access< T >::type >( px[ i ] );
 721:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 722:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 723:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     element_type * get() const BOOST_NOEXCEPT
 724:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 725:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         return px;
 726:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 727:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 728:/usr/include/boost/smart_ptr/shared_ptr.hpp **** // implicit conversion to "bool"
 729:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #include <boost/smart_ptr/detail/operator_bool.hpp>
 730:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 731:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     bool unique() const BOOST_NOEXCEPT
 732:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 733:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         return pn.unique();
 734:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 735:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 736:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     long use_count() const BOOST_NOEXCEPT
 737:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 738:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         return pn.use_count();
 739:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 740:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 741:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     void swap( shared_ptr & other ) BOOST_NOEXCEPT
 742:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 743:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         std::swap(px, other.px);
 744:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         pn.swap(other.pn);
 745:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 746:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 747:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Y> bool owner_before( shared_ptr<Y> const & rhs ) const BOOST_NOEXCEPT
 748:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 749:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         return pn < rhs.pn;
 750:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 751:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 752:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Y> bool owner_before( weak_ptr<Y> const & rhs ) const BOOST_NOEXCEPT
 753:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 754:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         return pn < rhs.pn;
 755:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 756:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 757:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     void * _internal_get_deleter( boost::detail::sp_typeinfo const & ti ) const BOOST_NOEXCEPT
 758:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 759:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         return pn.get_deleter( ti );
 760:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 761:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 762:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     void * _internal_get_untyped_deleter() const BOOST_NOEXCEPT
 763:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 764:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         return pn.get_untyped_deleter();
 765:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 766:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 767:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     bool _internal_equiv( shared_ptr const & r ) const BOOST_NOEXCEPT
 768:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 769:/usr/include/boost/smart_ptr/shared_ptr.hpp ****         return px == r.px && pn == r.pn;
 770:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     }
 771:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 772:/usr/include/boost/smart_ptr/shared_ptr.hpp **** // Tasteless as this may seem, making all members public allows member templates
 773:/usr/include/boost/smart_ptr/shared_ptr.hpp **** // to work in the absence of member template friends. (Matthew Langston)
GAS LISTING /tmp/ccvmoMuv.s 			page 450


 774:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 775:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #ifndef BOOST_NO_MEMBER_TEMPLATE_FRIENDS
 776:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 777:/usr/include/boost/smart_ptr/shared_ptr.hpp **** private:
 778:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 779:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Y> friend class shared_ptr;
 780:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     template<class Y> friend class weak_ptr;
 781:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 782:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 783:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif
 784:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 785:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     element_type * px;                 // contained pointer
 786:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     boost::detail::shared_count pn;    // reference counter
 787:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 788:/usr/include/boost/smart_ptr/shared_ptr.hpp **** };  // shared_ptr
 789:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 790:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template<class T, class U> inline bool operator==(shared_ptr<T> const & a, shared_ptr<U> const & b)
 791:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 792:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     return a.get() == b.get();
 793:/usr/include/boost/smart_ptr/shared_ptr.hpp **** }
 794:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 795:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template<class T, class U> inline bool operator!=(shared_ptr<T> const & a, shared_ptr<U> const & b)
 796:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 797:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     return a.get() != b.get();
 798:/usr/include/boost/smart_ptr/shared_ptr.hpp **** }
 799:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 800:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if __GNUC__ == 2 && __GNUC_MINOR__ <= 96
 801:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 802:/usr/include/boost/smart_ptr/shared_ptr.hpp **** // Resolve the ambiguity between our op!= and the one in rel_ops
 803:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 804:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template<class T> inline bool operator!=(shared_ptr<T> const & a, shared_ptr<T> const & b) BOOST_NO
 805:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 806:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     return a.get() != b.get();
 807:/usr/include/boost/smart_ptr/shared_ptr.hpp **** }
 808:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 809:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif
 810:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 811:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #if !defined( BOOST_NO_CXX11_NULLPTR )
 812:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 813:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template<class T> inline bool operator==( shared_ptr<T> const & p, boost::detail::sp_nullptr_t ) BO
 814:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 815:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     return p.get() == 0;
 816:/usr/include/boost/smart_ptr/shared_ptr.hpp **** }
 817:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 818:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template<class T> inline bool operator==( boost::detail::sp_nullptr_t, shared_ptr<T> const & p ) BO
 819:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 820:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     return p.get() == 0;
 821:/usr/include/boost/smart_ptr/shared_ptr.hpp **** }
 822:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 823:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template<class T> inline bool operator!=( shared_ptr<T> const & p, boost::detail::sp_nullptr_t ) BO
 824:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 825:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     return p.get() != 0;
 826:/usr/include/boost/smart_ptr/shared_ptr.hpp **** }
 827:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 828:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template<class T> inline bool operator!=( boost::detail::sp_nullptr_t, shared_ptr<T> const & p ) BO
 829:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 830:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     return p.get() != 0;
GAS LISTING /tmp/ccvmoMuv.s 			page 451


 831:/usr/include/boost/smart_ptr/shared_ptr.hpp **** }
 832:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 833:/usr/include/boost/smart_ptr/shared_ptr.hpp **** #endif
 834:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 835:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template<class T, class U> inline bool operator<(shared_ptr<T> const & a, shared_ptr<U> const & b) 
 836:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 837:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     return a.owner_before( b );
 838:/usr/include/boost/smart_ptr/shared_ptr.hpp **** }
 839:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 840:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template<class T> inline void swap(shared_ptr<T> & a, shared_ptr<T> & b) BOOST_NOEXCEPT
 841:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 842:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     a.swap(b);
 843:/usr/include/boost/smart_ptr/shared_ptr.hpp **** }
 844:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 845:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template<class T, class U> shared_ptr<T> static_pointer_cast( shared_ptr<U> const & r ) BOOST_NOEXC
 846:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 847:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     (void) static_cast< T* >( static_cast< U* >( 0 ) );
 848:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 849:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typedef typename shared_ptr<T>::element_type E;
 850:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 851:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     E * p = static_cast< E* >( r.get() );
 852:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     return shared_ptr<T>( r, p );
 853:/usr/include/boost/smart_ptr/shared_ptr.hpp **** }
 854:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 855:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template<class T, class U> shared_ptr<T> const_pointer_cast( shared_ptr<U> const & r ) BOOST_NOEXCE
 856:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 857:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     (void) const_cast< T* >( static_cast< U* >( 0 ) );
 858:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 859:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typedef typename shared_ptr<T>::element_type E;
 860:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 861:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     E * p = const_cast< E* >( r.get() );
 862:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     return shared_ptr<T>( r, p );
 863:/usr/include/boost/smart_ptr/shared_ptr.hpp **** }
 864:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 865:/usr/include/boost/smart_ptr/shared_ptr.hpp **** template<class T, class U> shared_ptr<T> dynamic_pointer_cast( shared_ptr<U> const & r ) BOOST_NOEX
 866:/usr/include/boost/smart_ptr/shared_ptr.hpp **** {
 867:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     (void) dynamic_cast< T* >( static_cast< U* >( 0 ) );
 868:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 869:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     typedef typename shared_ptr<T>::element_type E;
 870:/usr/include/boost/smart_ptr/shared_ptr.hpp **** 
 871:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     E * p = dynamic_cast< E* >( r.get() );
 6098              		.loc 27 871 0 is_stmt 1 discriminator 4
 6099 0027 4885FF   		testq	%rdi, %rdi
 6100 002a 0F84A000 		je	.L347
 6100      0000
 6101              		.loc 27 871 0 is_stmt 0
 6102 0030 488D1500 		leaq	_ZTIN2gr5lfast12costas2_implE(%rip), %rdx
 6102      000000
 6103 0037 488D3500 		leaq	_ZTIN2gr11basic_blockE(%rip), %rsi
 6103      000000
 6104 003e 48C7C1FF 		movq	$-1, %rcx
 6104      FFFFFF
 6105 0045 E8000000 		call	__dynamic_cast@PLT
 6105      00
 6106              	.LVL540:
 872:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     return p? shared_ptr<T>( r, p ): shared_ptr<T>();
 6107              		.loc 27 872 0 is_stmt 1
GAS LISTING /tmp/ccvmoMuv.s 			page 452


 6108 004a 4885C0   		testq	%rax, %rax
 6109 004d 0F847D00 		je	.L347
 6109      0000
 6110              	.LVL541:
 6111              	.LBB14716:
 6112              	.LBB14717:
 6113              	.LBB14718:
 6114              	.LBB14719:
 479:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 6115              		.loc 28 479 0
 6116 0053 488B5C24 		movq	8(%rsp), %rbx
 6116      08
 6117              	.LBE14719:
 6118              	.LBE14718:
 447:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 6119              		.loc 27 447 0
 6120 0058 48894500 		movq	%rax, 0(%rbp)
 6121              	.LVL542:
 6122              	.LBB14725:
 6123              	.LBB14724:
 6124              		.loc 28 484 0
 6125 005c 4885DB   		testq	%rbx, %rbx
 479:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 6126              		.loc 28 479 0
 6127 005f 48895D08 		movq	%rbx, 8(%rbp)
 6128              		.loc 28 484 0
 6129 0063 741C     		je	.L345
 6130              	.LVL543:
 6131              	.LBB14720:
 6132              	.LBB14721:
 6133              	.LBB14722:
 6134              	.LBB14723:
  66:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** }
 6135              		.loc 1 66 0
 6136              	#APP
 6137              	# 66 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 6138              		lock
 6139              		incl 8(%rbx)
 6140              	# 0 "" 2
 6141              	.LVL544:
 6142              	#NO_APP
 6143              	.L350:
 6144              	.LBE14723:
 6145              	.LBE14722:
 6146              	.LBE14721:
 6147              	.LBE14720:
 6148              	.LBE14724:
 6149              	.LBE14725:
 6150              	.LBE14717:
 6151              	.LBE14716:
 6152              	.LBE14715:
 6153              	.LBE14714:
 6154              	.LBB14731:
 6155              	.LBB14732:
 6156              	.LBB14733:
 473:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 6157              		.loc 28 473 0 discriminator 4
GAS LISTING /tmp/ccvmoMuv.s 			page 453


 6158 0069 4885DB   		testq	%rbx, %rbx
 6159 006c 7413     		je	.L345
 6160              	.LVL545:
 6161              	.LBB14734:
 6162              	.LBB14735:
 6163              	.LBB14736:
 6164              	.LBB14737:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 6165              		.loc 1 50 0
 6166 006e 41BCFFFF 		movl	$-1, %r12d
 6166      FFFF
 6167 0074 4489E0   		movl	%r12d, %eax
 6168              	#APP
 6169              	# 50 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 6170              		lock
 6171              		xadd %eax, 8(%rbx)
 6172              	# 0 "" 2
 6173              	.LVL546:
 6174              	#NO_APP
 6175              	.LBE14737:
 6176              	.LBE14736:
 144:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
 6177              		.loc 1 144 0
 6178 007c 83F801   		cmpl	$1, %eax
 6179 007f 740F     		je	.L364
 6180              	.LVL547:
 6181              	.L345:
 6182              	.LBE14735:
 6183              	.LBE14734:
 6184              	.LBE14733:
 6185              	.LBE14732:
 6186              	.LBE14731:
  55:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****   }
 6187              		.loc 35 55 0
 6188 0081 4883C410 		addq	$16, %rsp
 6189              		.cfi_remember_state
 6190              		.cfi_def_cfa_offset 32
 6191              	.LVL548:
 6192 0085 4889E8   		movq	%rbp, %rax
 6193 0088 5B       		popq	%rbx
 6194              		.cfi_def_cfa_offset 24
 6195 0089 5D       		popq	%rbp
 6196              		.cfi_def_cfa_offset 16
 6197              	.LVL549:
 6198 008a 415C     		popq	%r12
 6199              		.cfi_def_cfa_offset 8
 6200 008c C3       		ret
 6201              	.LVL550:
 6202 008d 0F1F00   		.p2align 4,,10
 6203              		.p2align 3
 6204              	.L364:
 6205              		.cfi_restore_state
 6206              	.LBB14760:
 6207              	.LBB14758:
 6208              	.LBB14756:
 6209              	.LBB14754:
 6210              	.LBB14752:
GAS LISTING /tmp/ccvmoMuv.s 			page 454


 6211              	.LBB14738:
 6212              	.LBB14739:
 146:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****             weak_release();
 6213              		.loc 1 146 0
 6214 0090 488B03   		movq	(%rbx), %rax
 6215 0093 4889DF   		movq	%rbx, %rdi
 6216 0096 FF5010   		call	*16(%rax)
 6217              	.LVL551:
 6218              	.LBB14740:
 6219              	.LBB14741:
 6220              	.LBB14742:
 6221              	.LBB14743:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 6222              		.loc 1 50 0
 6223              	#APP
 6224              	# 50 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 6225              		lock
 6226              		xadd %r12d, 12(%rbx)
 6227              	# 0 "" 2
 6228              	.LVL552:
 6229              	#NO_APP
 6230              	.LBE14743:
 6231              	.LBE14742:
 158:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
 6232              		.loc 1 158 0
 6233 009f 4183FC01 		cmpl	$1, %r12d
 6234 00a3 75DC     		jne	.L345
 6235              		.loc 1 160 0
 6236 00a5 488B03   		movq	(%rbx), %rax
 6237 00a8 488D0D00 		leaq	_ZN5boost6detail15sp_counted_base7destroyEv(%rip), %rcx
 6237      000000
 6238              	.LBB14744:
 6239              	.LBB14745:
 126:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     }
 6240              		.loc 1 126 0
 6241 00af 4889DF   		movq	%rbx, %rdi
 6242              	.LBE14745:
 6243              	.LBE14744:
 6244              		.loc 1 160 0
 6245 00b2 488B5018 		movq	24(%rax), %rdx
 6246 00b6 4839CA   		cmpq	%rcx, %rdx
 6247 00b9 752F     		jne	.L352
 6248              	.LBB14747:
 6249              	.LBB14746:
 126:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     }
 6250              		.loc 1 126 0
 6251 00bb FF5008   		call	*8(%rax)
 6252              	.LVL553:
 6253 00be EBC1     		jmp	.L345
 6254              	.LVL554:
 6255              		.p2align 4,,10
 6256              		.p2align 3
 6257              	.L353:
 6258              	.LBE14746:
 6259              	.LBE14747:
 6260              	.LBE14741:
 6261              	.LBE14740:
GAS LISTING /tmp/ccvmoMuv.s 			page 455


 6262              	.LBE14739:
 6263              	.LBE14738:
 6264              	.LBE14752:
 6265              	.LBE14754:
 6266              	.LBE14756:
 6267              	.LBE14758:
 6268              	.LBE14760:
  54:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****   }
 6269              		.loc 35 54 0
 6270 00c0 31F6     		xorl	%esi, %esi
 6271              	.LVL555:
 6272 00c2 E954FFFF 		jmp	.L346
 6272      FF
 6273              	.LVL556:
 6274 00c7 660F1F84 		.p2align 4,,10
 6274      00000000 
 6274      00
 6275              		.p2align 3
 6276              	.L347:
 6277              	.LBB14761:
 6278              	.LBB14730:
 6279              	.LBB14726:
 6280              	.LBB14727:
 347:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 6281              		.loc 27 347 0
 6282 00d0 48C74500 		movq	$0, 0(%rbp)
 6282      00000000 
 6283              	.LVL557:
 6284              	.LBB14728:
 6285              	.LBB14729:
 121:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 6286              		.loc 28 121 0
 6287 00d8 48C74508 		movq	$0, 8(%rbp)
 6287      00000000 
 6288              	.LVL558:
 6289 00e0 488B5C24 		movq	8(%rsp), %rbx
 6289      08
 6290 00e5 E97FFFFF 		jmp	.L350
 6290      FF
 6291              	.LVL559:
 6292              	.L352:
 6293              	.LBE14729:
 6294              	.LBE14728:
 6295              	.LBE14727:
 6296              	.LBE14726:
 6297              	.LBE14730:
 6298              	.LBE14761:
 6299              	.LBB14762:
 6300              	.LBB14759:
 6301              	.LBB14757:
 6302              	.LBB14755:
 6303              	.LBB14753:
 6304              	.LBB14751:
 6305              	.LBB14750:
 6306              	.LBB14749:
 6307              	.LBB14748:
 6308              		.loc 1 160 0
GAS LISTING /tmp/ccvmoMuv.s 			page 456


 6309 00ea FFD2     		call	*%rdx
 6310              	.LVL560:
 6311              	.LBE14748:
 6312              	.LBE14749:
 6313              	.LBE14750:
 6314              	.LBE14751:
 6315              	.LBE14753:
 6316              	.LBE14755:
 6317              	.LBE14757:
 6318              	.LBE14759:
 6319              	.LBE14762:
  54:/home/mpiscopo/gnuradio/include/gnuradio/sptr_magic.h ****   }
 6320              		.loc 35 54 0
 6321 00ec EB93     		jmp	.L345
 6322              		.cfi_endproc
 6323              	.LFE12333:
 6324              		.section	.gcc_except_table
 6325              	.LLSDA12333:
 6326 0043 FF       		.byte	0xff
 6327 0044 FF       		.byte	0xff
 6328 0045 01       		.byte	0x1
 6329 0046 04       		.uleb128 .LLSDACSE12333-.LLSDACSB12333
 6330              	.LLSDACSB12333:
 6331 0047 1E       		.uleb128 .LEHB35-.LFB12333
 6332 0048 05       		.uleb128 .LEHE35-.LEHB35
 6333 0049 00       		.uleb128 0
 6334 004a 00       		.uleb128 0
 6335              	.LLSDACSE12333:
 6336              		.section	.text._ZN8gnuradio16get_initial_sptrIN2gr5lfast12costas2_implEEEN5boost10shared_ptrIT_EEP
 6338              		.text
 6339 0851 90       		.align 2
 6340 0852 0F1F4000 		.p2align 4,,15
 6340      662E0F1F 
 6340      84000000 
 6340      0000
 6341              		.globl	_ZN2gr5lfast7costas24makeEfi
 6343              	_ZN2gr5lfast7costas24makeEfi:
 6344              	.LFB11002:
  60:costas2_impl.cc ****       return gnuradio::get_initial_sptr
 6345              		.loc 5 60 0
 6346              		.cfi_startproc
 6347              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 6348              		.cfi_lsda 0x1b,.LLSDA11002
 6349              	.LVL561:
 6350 0860 4154     		pushq	%r12
 6351              		.cfi_def_cfa_offset 16
 6352              		.cfi_offset 12, -16
 6353 0862 55       		pushq	%rbp
 6354              		.cfi_def_cfa_offset 24
 6355              		.cfi_offset 6, -24
 6356 0863 4189F4   		movl	%esi, %r12d
 6357 0866 53       		pushq	%rbx
 6358              		.cfi_def_cfa_offset 32
 6359              		.cfi_offset 3, -32
 6360 0867 4889FB   		movq	%rdi, %rbx
  62:costas2_impl.cc ****     }
 6361              		.loc 5 62 0
GAS LISTING /tmp/ccvmoMuv.s 			page 457


 6362 086a BFA00200 		movl	$672, %edi
 6362      00
 6363              	.LVL562:
  60:costas2_impl.cc ****       return gnuradio::get_initial_sptr
 6364              		.loc 5 60 0
 6365 086f 4883EC20 		subq	$32, %rsp
 6366              		.cfi_def_cfa_offset 64
  60:costas2_impl.cc ****       return gnuradio::get_initial_sptr
 6367              		.loc 5 60 0
 6368 0873 F30F1144 		movss	%xmm0, 12(%rsp)
 6368      240C
 6369              	.LEHB36:
  62:costas2_impl.cc ****     }
 6370              		.loc 5 62 0
 6371 0879 E8000000 		call	_Znwm@PLT
 6371      00
 6372              	.LVL563:
 6373              	.LEHE36:
 6374 087e 4489E6   		movl	%r12d, %esi
 6375 0881 F30F1044 		movss	12(%rsp), %xmm0
 6375      240C
 6376 0887 4889C7   		movq	%rax, %rdi
 6377 088a 4889C5   		movq	%rax, %rbp
 6378              	.LEHB37:
 6379 088d E8000000 		call	_ZN2gr5lfast12costas2_implC1Efi
 6379      00
 6380              	.LVL564:
 6381              	.LEHE37:
  62:costas2_impl.cc ****     }
 6382              		.loc 5 62 0 is_stmt 0 discriminator 4
 6383 0892 488D7C24 		leaq	16(%rsp), %rdi
 6383      10
 6384 0897 4889EE   		movq	%rbp, %rsi
 6385              	.LEHB38:
 6386 089a E8000000 		call	_ZN8gnuradio16get_initial_sptrIN2gr5lfast12costas2_implEEEN5boost10shared_ptrIT_EEPS6_
 6386      00
 6387              	.LVL565:
 6388              	.LBB14763:
 6389              	.LBB14764:
 624:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 6390              		.loc 27 624 0 is_stmt 1 discriminator 4
 6391 089f 488B4424 		movq	16(%rsp), %rax
 6391      10
 6392 08a4 488903   		movq	%rax, (%rbx)
 6393              	.LVL566:
 6394              	.LBB14765:
 6395              	.LBB14766:
 485:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 486:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 487:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if !defined( BOOST_NO_CXX11_RVALUE_REFERENCES )
 488:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 489:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     shared_count(shared_count && r): pi_(r.pi_) // nothrow
 490:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 491:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         , id_(shared_count_id)
 492:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 493:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     {
 494:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         r.pi_ = 0;
GAS LISTING /tmp/ccvmoMuv.s 			page 458


 495:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 496:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 497:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #endif
 498:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 499:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     explicit shared_count(weak_count const & r); // throws bad_weak_ptr when r.use_count() == 0
 500:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     shared_count( weak_count const & r, sp_nothrow_tag ); // constructs an empty *this when r.use_c
 501:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 502:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     shared_count & operator= (shared_count const & r) // nothrow
 503:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     {
 504:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         sp_counted_base * tmp = r.pi_;
 505:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 506:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         if( tmp != pi_ )
 507:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         {
 508:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             if( tmp != 0 ) tmp->add_ref_copy();
 509:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             if( pi_ != 0 ) pi_->release();
 510:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****             pi_ = tmp;
 511:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 512:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 513:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         return *this;
 514:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 515:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** 
 516:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     void swap(shared_count & r) // nothrow
 517:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     {
 518:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         sp_counted_base * tmp = r.pi_;
 519:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         r.pi_ = pi_;
 520:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         pi_ = tmp;
 6396              		.loc 28 520 0 discriminator 4
 6397 08a7 488B4424 		movq	24(%rsp), %rax
 6397      18
 6398 08ac 48894308 		movq	%rax, 8(%rbx)
 6399              	.LVL567:
 6400              	.LBE14766:
 6401              	.LBE14765:
 6402              	.LBE14764:
 6403              	.LBE14763:
  63:costas2_impl.cc **** 
 6404              		.loc 5 63 0 discriminator 4
 6405 08b0 4883C420 		addq	$32, %rsp
 6406              		.cfi_remember_state
 6407              		.cfi_def_cfa_offset 32
 6408 08b4 4889D8   		movq	%rbx, %rax
 6409 08b7 5B       		popq	%rbx
 6410              		.cfi_def_cfa_offset 24
 6411              	.LVL568:
 6412 08b8 5D       		popq	%rbp
 6413              		.cfi_def_cfa_offset 16
 6414 08b9 415C     		popq	%r12
 6415              		.cfi_def_cfa_offset 8
 6416              	.LVL569:
 6417 08bb C3       		ret
 6418              	.LVL570:
 6419              	.L367:
 6420              		.cfi_restore_state
 6421 08bc 4889C3   		movq	%rax, %rbx
 6422              	.LVL571:
  62:costas2_impl.cc ****     }
 6423              		.loc 5 62 0
GAS LISTING /tmp/ccvmoMuv.s 			page 459


 6424 08bf 4889EF   		movq	%rbp, %rdi
 6425 08c2 BEA00200 		movl	$672, %esi
 6425      00
 6426 08c7 E8000000 		call	_ZdlPvm@PLT
 6426      00
 6427              	.LVL572:
 6428 08cc 4889DF   		movq	%rbx, %rdi
 6429 08cf E8000000 		call	_Unwind_Resume@PLT
 6429      00
 6430              	.LVL573:
 6431              	.LEHE38:
 6432              		.cfi_endproc
 6433              	.LFE11002:
 6434              		.section	.gcc_except_table
 6435              	.LLSDA11002:
 6436 004b FF       		.byte	0xff
 6437 004c FF       		.byte	0xff
 6438 004d 01       		.byte	0x1
 6439 004e 0C       		.uleb128 .LLSDACSE11002-.LLSDACSB11002
 6440              	.LLSDACSB11002:
 6441 004f 19       		.uleb128 .LEHB36-.LFB11002
 6442 0050 05       		.uleb128 .LEHE36-.LEHB36
 6443 0051 00       		.uleb128 0
 6444 0052 00       		.uleb128 0
 6445 0053 2D       		.uleb128 .LEHB37-.LFB11002
 6446 0054 05       		.uleb128 .LEHE37-.LEHB37
 6447 0055 5C       		.uleb128 .L367-.LFB11002
 6448 0056 00       		.uleb128 0
 6449 0057 3A       		.uleb128 .LEHB38-.LFB11002
 6450 0058 3A       		.uleb128 .LEHE38-.LEHB38
 6451 0059 00       		.uleb128 0
 6452 005a 00       		.uleb128 0
 6453              	.LLSDACSE11002:
 6454              		.text
 6456              		.section	.text._ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFv
 6457              		.align 2
 6458              		.p2align 4,,15
 6459              		.weak	_ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFvS4_EEEESt
 6461              	_ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFvS4_EEEESt10_Sele
 6462              	.LFB12707:
2318:/usr/include/c++/6/bits/stl_tree.h ****     find(const _Key& __k)
 6463              		.loc 19 2318 0
 6464              		.cfi_startproc
 6465              	.LVL574:
 6466 0000 4154     		pushq	%r12
 6467              		.cfi_def_cfa_offset 16
 6468              		.cfi_offset 12, -16
 6469 0002 55       		pushq	%rbp
 6470              		.cfi_def_cfa_offset 24
 6471              		.cfi_offset 6, -24
2321:/usr/include/c++/6/bits/stl_tree.h ****       return (__j == end()
 6472              		.loc 19 2321 0
 6473 0003 4889F2   		movq	%rsi, %rdx
2318:/usr/include/c++/6/bits/stl_tree.h ****     find(const _Key& __k)
 6474              		.loc 19 2318 0
 6475 0006 53       		pushq	%rbx
 6476              		.cfi_def_cfa_offset 32
GAS LISTING /tmp/ccvmoMuv.s 			page 460


 6477              		.cfi_offset 3, -32
 6478              	.LBB14767:
 6479              	.LBB14768:
 677:/usr/include/c++/6/bits/stl_tree.h **** 
 6480              		.loc 19 677 0
 6481 0007 488D5F08 		leaq	8(%rdi), %rbx
 6482              	.LVL575:
 6483              	.LBE14768:
 6484              	.LBE14767:
2321:/usr/include/c++/6/bits/stl_tree.h ****       return (__j == end()
 6485              		.loc 19 2321 0
 6486 000b 488B7F10 		movq	16(%rdi), %rdi
 6487              	.LVL576:
2318:/usr/include/c++/6/bits/stl_tree.h ****     find(const _Key& __k)
 6488              		.loc 19 2318 0
 6489 000f 4989F4   		movq	%rsi, %r12
2321:/usr/include/c++/6/bits/stl_tree.h ****       return (__j == end()
 6490              		.loc 19 2321 0
 6491 0012 4889DE   		movq	%rbx, %rsi
 6492              	.LVL577:
 6493 0015 E8000000 		call	_ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFvS4_EEEESt1
 6493      00
 6494              	.LVL578:
2324:/usr/include/c++/6/bits/stl_tree.h ****     }
 6495              		.loc 19 2324 0
 6496 001a 4839C3   		cmpq	%rax, %rbx
 6497 001d 742B     		je	.L376
 6498              	.LBB14769:
 6499              	.LBB14770:
 6500              	.LBB14771:
 6501              		.loc 20 891 0 discriminator 2
 6502 001f 488D7020 		leaq	32(%rax), %rsi
 6503              	.LBE14771:
 6504              	.LBE14770:
 6505              	.LBE14769:
 6506              	.LBB14772:
 6507              	.LBB14773:
 6508              		.loc 21 907 0 discriminator 2
 6509 0023 4C89E7   		movq	%r12, %rdi
 6510 0026 4889C5   		movq	%rax, %rbp
 6511              	.LVL579:
 6512 0029 E8000000 		call	_ZN3pmt3eqvERKN5boost13intrusive_ptrINS_8pmt_baseEEES5_@PLT
 6512      00
 6513              	.LVL580:
 6514 002e 84C0     		testb	%al, %al
 6515 0030 740E     		je	.L378
 6516              	.LVL581:
 6517              	.L375:
 6518              	.LBE14773:
 6519              	.LBE14772:
2324:/usr/include/c++/6/bits/stl_tree.h ****     }
 6520              		.loc 19 2324 0
 6521 0032 4889E8   		movq	%rbp, %rax
 6522              	.LVL582:
2325:/usr/include/c++/6/bits/stl_tree.h **** 
 6523              		.loc 19 2325 0
 6524 0035 5B       		popq	%rbx
GAS LISTING /tmp/ccvmoMuv.s 			page 461


 6525              		.cfi_remember_state
 6526              		.cfi_def_cfa_offset 24
 6527              	.LVL583:
 6528 0036 5D       		popq	%rbp
 6529              		.cfi_def_cfa_offset 16
 6530 0037 415C     		popq	%r12
 6531              		.cfi_def_cfa_offset 8
 6532              	.LVL584:
 6533 0039 C3       		ret
 6534              	.LVL585:
 6535 003a 660F1F44 		.p2align 4,,10
 6535      0000
 6536              		.p2align 3
 6537              	.L378:
 6538              		.cfi_restore_state
2323:/usr/include/c++/6/bits/stl_tree.h **** 					_S_key(__j._M_node))) ? end() : __j;
 6539              		.loc 19 2323 0
 6540 0040 488B4520 		movq	32(%rbp), %rax
 6541 0044 49390424 		cmpq	%rax, (%r12)
 6542 0048 76E8     		jbe	.L375
 6543              	.LVL586:
 6544              	.L376:
 6545 004a 4889D8   		movq	%rbx, %rax
2325:/usr/include/c++/6/bits/stl_tree.h **** 
 6546              		.loc 19 2325 0
 6547 004d 5B       		popq	%rbx
 6548              		.cfi_def_cfa_offset 24
 6549 004e 5D       		popq	%rbp
 6550              		.cfi_def_cfa_offset 16
 6551 004f 415C     		popq	%r12
 6552              		.cfi_def_cfa_offset 8
 6553              	.LVL587:
 6554 0051 C3       		ret
 6555              		.cfi_endproc
 6556              	.LFE12707:
 6558              		.section	.text._ZN2gr11basic_block15has_msg_handlerEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE,"axG"
 6559              		.align 2
 6560              		.p2align 4,,15
 6561              		.weak	_ZN2gr11basic_block15has_msg_handlerEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE
 6563              	_ZN2gr11basic_block15has_msg_handlerEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE:
 6564              	.LFB8679:
 120:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       return (d_msg_handlers.find(which_port) != d_msg_handlers.end());
 6565              		.loc 2 120 0
 6566              		.cfi_startproc
 6567              	.LVL588:
 6568 0000 53       		pushq	%rbx
 6569              		.cfi_def_cfa_offset 16
 6570              		.cfi_offset 3, -16
 120:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****       return (d_msg_handlers.find(which_port) != d_msg_handlers.end());
 6571              		.loc 2 120 0
 6572 0001 4889FB   		movq	%rdi, %rbx
 6573              	.LBB14782:
 6574              	.LBB14783:
 6575              		.file 36 "/usr/include/c++/6/bits/stl_map.h"
   1:/usr/include/c++/6/bits/stl_map.h **** // Map implementation -*- C++ -*-
   2:/usr/include/c++/6/bits/stl_map.h **** 
   3:/usr/include/c++/6/bits/stl_map.h **** // Copyright (C) 2001-2016 Free Software Foundation, Inc.
GAS LISTING /tmp/ccvmoMuv.s 			page 462


   4:/usr/include/c++/6/bits/stl_map.h **** //
   5:/usr/include/c++/6/bits/stl_map.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/6/bits/stl_map.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/6/bits/stl_map.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/6/bits/stl_map.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/6/bits/stl_map.h **** // any later version.
  10:/usr/include/c++/6/bits/stl_map.h **** 
  11:/usr/include/c++/6/bits/stl_map.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/6/bits/stl_map.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/6/bits/stl_map.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/6/bits/stl_map.h **** // GNU General Public License for more details.
  15:/usr/include/c++/6/bits/stl_map.h **** 
  16:/usr/include/c++/6/bits/stl_map.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/6/bits/stl_map.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/6/bits/stl_map.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/6/bits/stl_map.h **** 
  20:/usr/include/c++/6/bits/stl_map.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/6/bits/stl_map.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/6/bits/stl_map.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/6/bits/stl_map.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/6/bits/stl_map.h **** 
  25:/usr/include/c++/6/bits/stl_map.h **** /*
  26:/usr/include/c++/6/bits/stl_map.h ****  *
  27:/usr/include/c++/6/bits/stl_map.h ****  * Copyright (c) 1994
  28:/usr/include/c++/6/bits/stl_map.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/6/bits/stl_map.h ****  *
  30:/usr/include/c++/6/bits/stl_map.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/6/bits/stl_map.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/6/bits/stl_map.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/6/bits/stl_map.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/6/bits/stl_map.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/6/bits/stl_map.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/6/bits/stl_map.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/6/bits/stl_map.h ****  *
  38:/usr/include/c++/6/bits/stl_map.h ****  *
  39:/usr/include/c++/6/bits/stl_map.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/6/bits/stl_map.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/6/bits/stl_map.h ****  *
  42:/usr/include/c++/6/bits/stl_map.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/6/bits/stl_map.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/6/bits/stl_map.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/6/bits/stl_map.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/6/bits/stl_map.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/6/bits/stl_map.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/6/bits/stl_map.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/6/bits/stl_map.h ****  */
  50:/usr/include/c++/6/bits/stl_map.h **** 
  51:/usr/include/c++/6/bits/stl_map.h **** /** @file bits/stl_map.h
  52:/usr/include/c++/6/bits/stl_map.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/6/bits/stl_map.h ****  *  Do not attempt to use it directly. @headername{map}
  54:/usr/include/c++/6/bits/stl_map.h ****  */
  55:/usr/include/c++/6/bits/stl_map.h **** 
  56:/usr/include/c++/6/bits/stl_map.h **** #ifndef _STL_MAP_H
  57:/usr/include/c++/6/bits/stl_map.h **** #define _STL_MAP_H 1
  58:/usr/include/c++/6/bits/stl_map.h **** 
  59:/usr/include/c++/6/bits/stl_map.h **** #include <bits/functexcept.h>
  60:/usr/include/c++/6/bits/stl_map.h **** #include <bits/concept_check.h>
GAS LISTING /tmp/ccvmoMuv.s 			page 463


  61:/usr/include/c++/6/bits/stl_map.h **** #if __cplusplus >= 201103L
  62:/usr/include/c++/6/bits/stl_map.h **** #include <initializer_list>
  63:/usr/include/c++/6/bits/stl_map.h **** #include <tuple>
  64:/usr/include/c++/6/bits/stl_map.h **** #endif
  65:/usr/include/c++/6/bits/stl_map.h **** 
  66:/usr/include/c++/6/bits/stl_map.h **** namespace std _GLIBCXX_VISIBILITY(default)
  67:/usr/include/c++/6/bits/stl_map.h **** {
  68:/usr/include/c++/6/bits/stl_map.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  69:/usr/include/c++/6/bits/stl_map.h **** 
  70:/usr/include/c++/6/bits/stl_map.h ****   /**
  71:/usr/include/c++/6/bits/stl_map.h ****    *  @brief A standard container made up of (key,value) pairs, which can be
  72:/usr/include/c++/6/bits/stl_map.h ****    *  retrieved based on a key, in logarithmic time.
  73:/usr/include/c++/6/bits/stl_map.h ****    *
  74:/usr/include/c++/6/bits/stl_map.h ****    *  @ingroup associative_containers
  75:/usr/include/c++/6/bits/stl_map.h ****    *
  76:/usr/include/c++/6/bits/stl_map.h ****    *  @tparam _Key  Type of key objects.
  77:/usr/include/c++/6/bits/stl_map.h ****    *  @tparam  _Tp  Type of mapped objects.
  78:/usr/include/c++/6/bits/stl_map.h ****    *  @tparam _Compare  Comparison function object type, defaults to less<_Key>.
  79:/usr/include/c++/6/bits/stl_map.h ****    *  @tparam _Alloc  Allocator type, defaults to 
  80:/usr/include/c++/6/bits/stl_map.h ****    *                  allocator<pair<const _Key, _Tp>.
  81:/usr/include/c++/6/bits/stl_map.h ****    *
  82:/usr/include/c++/6/bits/stl_map.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  83:/usr/include/c++/6/bits/stl_map.h ****    *  <a href="tables.html#66">reversible container</a>, and an
  84:/usr/include/c++/6/bits/stl_map.h ****    *  <a href="tables.html#69">associative container</a> (using unique keys).
  85:/usr/include/c++/6/bits/stl_map.h ****    *  For a @c map<Key,T> the key_type is Key, the mapped_type is T, and the
  86:/usr/include/c++/6/bits/stl_map.h ****    *  value_type is std::pair<const Key,T>.
  87:/usr/include/c++/6/bits/stl_map.h ****    *
  88:/usr/include/c++/6/bits/stl_map.h ****    *  Maps support bidirectional iterators.
  89:/usr/include/c++/6/bits/stl_map.h ****    *
  90:/usr/include/c++/6/bits/stl_map.h ****    *  The private tree data is declared exactly the same way for map and
  91:/usr/include/c++/6/bits/stl_map.h ****    *  multimap; the distinction is made entirely in how the tree functions are
  92:/usr/include/c++/6/bits/stl_map.h ****    *  called (*_unique versus *_equal, same as the standard).
  93:/usr/include/c++/6/bits/stl_map.h ****   */
  94:/usr/include/c++/6/bits/stl_map.h ****   template <typename _Key, typename _Tp, typename _Compare = std::less<_Key>,
  95:/usr/include/c++/6/bits/stl_map.h ****             typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
  96:/usr/include/c++/6/bits/stl_map.h ****     class map
  97:/usr/include/c++/6/bits/stl_map.h ****     {
  98:/usr/include/c++/6/bits/stl_map.h ****     public:
  99:/usr/include/c++/6/bits/stl_map.h ****       typedef _Key                                          key_type;
 100:/usr/include/c++/6/bits/stl_map.h ****       typedef _Tp                                           mapped_type;
 101:/usr/include/c++/6/bits/stl_map.h ****       typedef std::pair<const _Key, _Tp>                    value_type;
 102:/usr/include/c++/6/bits/stl_map.h ****       typedef _Compare                                      key_compare;
 103:/usr/include/c++/6/bits/stl_map.h ****       typedef _Alloc                                        allocator_type;
 104:/usr/include/c++/6/bits/stl_map.h **** 
 105:/usr/include/c++/6/bits/stl_map.h ****     private:
 106:/usr/include/c++/6/bits/stl_map.h ****       // concept requirements
 107:/usr/include/c++/6/bits/stl_map.h ****       typedef typename _Alloc::value_type                   _Alloc_value_type;
 108:/usr/include/c++/6/bits/stl_map.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 109:/usr/include/c++/6/bits/stl_map.h ****       __glibcxx_class_requires4(_Compare, bool, _Key, _Key,
 110:/usr/include/c++/6/bits/stl_map.h **** 				_BinaryFunctionConcept)
 111:/usr/include/c++/6/bits/stl_map.h ****       __glibcxx_class_requires2(value_type, _Alloc_value_type, _SameTypeConcept)
 112:/usr/include/c++/6/bits/stl_map.h **** 
 113:/usr/include/c++/6/bits/stl_map.h ****     public:
 114:/usr/include/c++/6/bits/stl_map.h ****       class value_compare
 115:/usr/include/c++/6/bits/stl_map.h ****       : public std::binary_function<value_type, value_type, bool>
 116:/usr/include/c++/6/bits/stl_map.h ****       {
 117:/usr/include/c++/6/bits/stl_map.h **** 	friend class map<_Key, _Tp, _Compare, _Alloc>;
GAS LISTING /tmp/ccvmoMuv.s 			page 464


 118:/usr/include/c++/6/bits/stl_map.h ****       protected:
 119:/usr/include/c++/6/bits/stl_map.h **** 	_Compare comp;
 120:/usr/include/c++/6/bits/stl_map.h **** 
 121:/usr/include/c++/6/bits/stl_map.h **** 	value_compare(_Compare __c)
 122:/usr/include/c++/6/bits/stl_map.h **** 	: comp(__c) { }
 123:/usr/include/c++/6/bits/stl_map.h **** 
 124:/usr/include/c++/6/bits/stl_map.h ****       public:
 125:/usr/include/c++/6/bits/stl_map.h **** 	bool operator()(const value_type& __x, const value_type& __y) const
 126:/usr/include/c++/6/bits/stl_map.h **** 	{ return comp(__x.first, __y.first); }
 127:/usr/include/c++/6/bits/stl_map.h ****       };
 128:/usr/include/c++/6/bits/stl_map.h **** 
 129:/usr/include/c++/6/bits/stl_map.h ****     private:
 130:/usr/include/c++/6/bits/stl_map.h ****       /// This turns a red-black tree into a [multi]map. 
 131:/usr/include/c++/6/bits/stl_map.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 132:/usr/include/c++/6/bits/stl_map.h **** 	rebind<value_type>::other _Pair_alloc_type;
 133:/usr/include/c++/6/bits/stl_map.h **** 
 134:/usr/include/c++/6/bits/stl_map.h ****       typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
 135:/usr/include/c++/6/bits/stl_map.h **** 		       key_compare, _Pair_alloc_type> _Rep_type;
 136:/usr/include/c++/6/bits/stl_map.h **** 
 137:/usr/include/c++/6/bits/stl_map.h ****       /// The actual tree structure.
 138:/usr/include/c++/6/bits/stl_map.h ****       _Rep_type _M_t;
 139:/usr/include/c++/6/bits/stl_map.h **** 
 140:/usr/include/c++/6/bits/stl_map.h ****       typedef __gnu_cxx::__alloc_traits<_Pair_alloc_type> _Alloc_traits;
 141:/usr/include/c++/6/bits/stl_map.h **** 
 142:/usr/include/c++/6/bits/stl_map.h ****     public:
 143:/usr/include/c++/6/bits/stl_map.h ****       // many of these are specified differently in ISO, but the following are
 144:/usr/include/c++/6/bits/stl_map.h ****       // "functionally equivalent"
 145:/usr/include/c++/6/bits/stl_map.h ****       typedef typename _Alloc_traits::pointer            pointer;
 146:/usr/include/c++/6/bits/stl_map.h ****       typedef typename _Alloc_traits::const_pointer      const_pointer;
 147:/usr/include/c++/6/bits/stl_map.h ****       typedef typename _Alloc_traits::reference          reference;
 148:/usr/include/c++/6/bits/stl_map.h ****       typedef typename _Alloc_traits::const_reference    const_reference;
 149:/usr/include/c++/6/bits/stl_map.h ****       typedef typename _Rep_type::iterator               iterator;
 150:/usr/include/c++/6/bits/stl_map.h ****       typedef typename _Rep_type::const_iterator         const_iterator;
 151:/usr/include/c++/6/bits/stl_map.h ****       typedef typename _Rep_type::size_type              size_type;
 152:/usr/include/c++/6/bits/stl_map.h ****       typedef typename _Rep_type::difference_type        difference_type;
 153:/usr/include/c++/6/bits/stl_map.h ****       typedef typename _Rep_type::reverse_iterator       reverse_iterator;
 154:/usr/include/c++/6/bits/stl_map.h ****       typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
 155:/usr/include/c++/6/bits/stl_map.h **** 
 156:/usr/include/c++/6/bits/stl_map.h ****       // [23.3.1.1] construct/copy/destroy
 157:/usr/include/c++/6/bits/stl_map.h ****       // (get_allocator() is also listed in this section)
 158:/usr/include/c++/6/bits/stl_map.h **** 
 159:/usr/include/c++/6/bits/stl_map.h ****       /**
 160:/usr/include/c++/6/bits/stl_map.h ****        *  @brief  Default constructor creates no elements.
 161:/usr/include/c++/6/bits/stl_map.h ****        */
 162:/usr/include/c++/6/bits/stl_map.h ****       map()
 163:/usr/include/c++/6/bits/stl_map.h ****       _GLIBCXX_NOEXCEPT_IF(
 164:/usr/include/c++/6/bits/stl_map.h **** 	  is_nothrow_default_constructible<allocator_type>::value
 165:/usr/include/c++/6/bits/stl_map.h **** 	  && is_nothrow_default_constructible<key_compare>::value)
 166:/usr/include/c++/6/bits/stl_map.h ****       : _M_t() { }
 167:/usr/include/c++/6/bits/stl_map.h **** 
 168:/usr/include/c++/6/bits/stl_map.h ****       /**
 169:/usr/include/c++/6/bits/stl_map.h ****        *  @brief  Creates a %map with no elements.
 170:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __comp  A comparison object.
 171:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __a  An allocator object.
 172:/usr/include/c++/6/bits/stl_map.h ****        */
 173:/usr/include/c++/6/bits/stl_map.h ****       explicit
 174:/usr/include/c++/6/bits/stl_map.h ****       map(const _Compare& __comp,
GAS LISTING /tmp/ccvmoMuv.s 			page 465


 175:/usr/include/c++/6/bits/stl_map.h **** 	  const allocator_type& __a = allocator_type())
 176:/usr/include/c++/6/bits/stl_map.h ****       : _M_t(__comp, _Pair_alloc_type(__a)) { }
 177:/usr/include/c++/6/bits/stl_map.h **** 
 178:/usr/include/c++/6/bits/stl_map.h ****       /**
 179:/usr/include/c++/6/bits/stl_map.h ****        *  @brief  %Map copy constructor.
 180:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __x  A %map of identical element and allocator types.
 181:/usr/include/c++/6/bits/stl_map.h ****        *
 182:/usr/include/c++/6/bits/stl_map.h ****        *  The newly-created %map uses a copy of the allocation object
 183:/usr/include/c++/6/bits/stl_map.h ****        *  used by @a __x.
 184:/usr/include/c++/6/bits/stl_map.h ****        */
 185:/usr/include/c++/6/bits/stl_map.h ****       map(const map& __x)
 186:/usr/include/c++/6/bits/stl_map.h ****       : _M_t(__x._M_t) { }
 187:/usr/include/c++/6/bits/stl_map.h **** 
 188:/usr/include/c++/6/bits/stl_map.h **** #if __cplusplus >= 201103L
 189:/usr/include/c++/6/bits/stl_map.h ****       /**
 190:/usr/include/c++/6/bits/stl_map.h ****        *  @brief  %Map move constructor.
 191:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __x  A %map of identical element and allocator types.
 192:/usr/include/c++/6/bits/stl_map.h ****        *
 193:/usr/include/c++/6/bits/stl_map.h ****        *  The newly-created %map contains the exact contents of @a __x.
 194:/usr/include/c++/6/bits/stl_map.h ****        *  The contents of @a __x are a valid, but unspecified %map.
 195:/usr/include/c++/6/bits/stl_map.h ****        */
 196:/usr/include/c++/6/bits/stl_map.h ****       map(map&& __x)
 197:/usr/include/c++/6/bits/stl_map.h ****       noexcept(is_nothrow_copy_constructible<_Compare>::value)
 198:/usr/include/c++/6/bits/stl_map.h ****       : _M_t(std::move(__x._M_t)) { }
 199:/usr/include/c++/6/bits/stl_map.h **** 
 200:/usr/include/c++/6/bits/stl_map.h ****       /**
 201:/usr/include/c++/6/bits/stl_map.h ****        *  @brief  Builds a %map from an initializer_list.
 202:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __l  An initializer_list.
 203:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __comp  A comparison object.
 204:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __a  An allocator object.
 205:/usr/include/c++/6/bits/stl_map.h ****        *
 206:/usr/include/c++/6/bits/stl_map.h ****        *  Create a %map consisting of copies of the elements in the
 207:/usr/include/c++/6/bits/stl_map.h ****        *  initializer_list @a __l.
 208:/usr/include/c++/6/bits/stl_map.h ****        *  This is linear in N if the range is already sorted, and NlogN
 209:/usr/include/c++/6/bits/stl_map.h ****        *  otherwise (where N is @a __l.size()).
 210:/usr/include/c++/6/bits/stl_map.h ****        */
 211:/usr/include/c++/6/bits/stl_map.h ****       map(initializer_list<value_type> __l,
 212:/usr/include/c++/6/bits/stl_map.h **** 	  const _Compare& __comp = _Compare(),
 213:/usr/include/c++/6/bits/stl_map.h **** 	  const allocator_type& __a = allocator_type())
 214:/usr/include/c++/6/bits/stl_map.h ****       : _M_t(__comp, _Pair_alloc_type(__a))
 215:/usr/include/c++/6/bits/stl_map.h ****       { _M_t._M_insert_unique(__l.begin(), __l.end()); }
 216:/usr/include/c++/6/bits/stl_map.h **** 
 217:/usr/include/c++/6/bits/stl_map.h ****       /// Allocator-extended default constructor.
 218:/usr/include/c++/6/bits/stl_map.h ****       explicit
 219:/usr/include/c++/6/bits/stl_map.h ****       map(const allocator_type& __a)
 220:/usr/include/c++/6/bits/stl_map.h ****       : _M_t(_Compare(), _Pair_alloc_type(__a)) { }
 221:/usr/include/c++/6/bits/stl_map.h **** 
 222:/usr/include/c++/6/bits/stl_map.h ****       /// Allocator-extended copy constructor.
 223:/usr/include/c++/6/bits/stl_map.h ****       map(const map& __m, const allocator_type& __a)
 224:/usr/include/c++/6/bits/stl_map.h ****       : _M_t(__m._M_t, _Pair_alloc_type(__a)) { }
 225:/usr/include/c++/6/bits/stl_map.h **** 
 226:/usr/include/c++/6/bits/stl_map.h ****       /// Allocator-extended move constructor.
 227:/usr/include/c++/6/bits/stl_map.h ****       map(map&& __m, const allocator_type& __a)
 228:/usr/include/c++/6/bits/stl_map.h ****       noexcept(is_nothrow_copy_constructible<_Compare>::value
 229:/usr/include/c++/6/bits/stl_map.h **** 	       && _Alloc_traits::_S_always_equal())
 230:/usr/include/c++/6/bits/stl_map.h ****       : _M_t(std::move(__m._M_t), _Pair_alloc_type(__a)) { }
 231:/usr/include/c++/6/bits/stl_map.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 466


 232:/usr/include/c++/6/bits/stl_map.h ****       /// Allocator-extended initialier-list constructor.
 233:/usr/include/c++/6/bits/stl_map.h ****       map(initializer_list<value_type> __l, const allocator_type& __a)
 234:/usr/include/c++/6/bits/stl_map.h ****       : _M_t(_Compare(), _Pair_alloc_type(__a))
 235:/usr/include/c++/6/bits/stl_map.h ****       { _M_t._M_insert_unique(__l.begin(), __l.end()); }
 236:/usr/include/c++/6/bits/stl_map.h **** 
 237:/usr/include/c++/6/bits/stl_map.h ****       /// Allocator-extended range constructor.
 238:/usr/include/c++/6/bits/stl_map.h ****       template<typename _InputIterator>
 239:/usr/include/c++/6/bits/stl_map.h ****         map(_InputIterator __first, _InputIterator __last,
 240:/usr/include/c++/6/bits/stl_map.h **** 	    const allocator_type& __a)
 241:/usr/include/c++/6/bits/stl_map.h **** 	: _M_t(_Compare(), _Pair_alloc_type(__a))
 242:/usr/include/c++/6/bits/stl_map.h ****         { _M_t._M_insert_unique(__first, __last); }
 243:/usr/include/c++/6/bits/stl_map.h **** #endif
 244:/usr/include/c++/6/bits/stl_map.h **** 
 245:/usr/include/c++/6/bits/stl_map.h ****       /**
 246:/usr/include/c++/6/bits/stl_map.h ****        *  @brief  Builds a %map from a range.
 247:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __first  An input iterator.
 248:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __last  An input iterator.
 249:/usr/include/c++/6/bits/stl_map.h ****        *
 250:/usr/include/c++/6/bits/stl_map.h ****        *  Create a %map consisting of copies of the elements from
 251:/usr/include/c++/6/bits/stl_map.h ****        *  [__first,__last).  This is linear in N if the range is
 252:/usr/include/c++/6/bits/stl_map.h ****        *  already sorted, and NlogN otherwise (where N is
 253:/usr/include/c++/6/bits/stl_map.h ****        *  distance(__first,__last)).
 254:/usr/include/c++/6/bits/stl_map.h ****        */
 255:/usr/include/c++/6/bits/stl_map.h ****       template<typename _InputIterator>
 256:/usr/include/c++/6/bits/stl_map.h ****         map(_InputIterator __first, _InputIterator __last)
 257:/usr/include/c++/6/bits/stl_map.h **** 	: _M_t()
 258:/usr/include/c++/6/bits/stl_map.h ****         { _M_t._M_insert_unique(__first, __last); }
 259:/usr/include/c++/6/bits/stl_map.h **** 
 260:/usr/include/c++/6/bits/stl_map.h ****       /**
 261:/usr/include/c++/6/bits/stl_map.h ****        *  @brief  Builds a %map from a range.
 262:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __first  An input iterator.
 263:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __last  An input iterator.
 264:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __comp  A comparison functor.
 265:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __a  An allocator object.
 266:/usr/include/c++/6/bits/stl_map.h ****        *
 267:/usr/include/c++/6/bits/stl_map.h ****        *  Create a %map consisting of copies of the elements from
 268:/usr/include/c++/6/bits/stl_map.h ****        *  [__first,__last).  This is linear in N if the range is
 269:/usr/include/c++/6/bits/stl_map.h ****        *  already sorted, and NlogN otherwise (where N is
 270:/usr/include/c++/6/bits/stl_map.h ****        *  distance(__first,__last)).
 271:/usr/include/c++/6/bits/stl_map.h ****        */
 272:/usr/include/c++/6/bits/stl_map.h ****       template<typename _InputIterator>
 273:/usr/include/c++/6/bits/stl_map.h ****         map(_InputIterator __first, _InputIterator __last,
 274:/usr/include/c++/6/bits/stl_map.h **** 	    const _Compare& __comp,
 275:/usr/include/c++/6/bits/stl_map.h **** 	    const allocator_type& __a = allocator_type())
 276:/usr/include/c++/6/bits/stl_map.h **** 	: _M_t(__comp, _Pair_alloc_type(__a))
 277:/usr/include/c++/6/bits/stl_map.h ****         { _M_t._M_insert_unique(__first, __last); }
 278:/usr/include/c++/6/bits/stl_map.h **** 
 279:/usr/include/c++/6/bits/stl_map.h ****       // FIXME There is no dtor declared, but we should have something
 280:/usr/include/c++/6/bits/stl_map.h ****       // generated by Doxygen.  I don't know what tags to add to this
 281:/usr/include/c++/6/bits/stl_map.h ****       // paragraph to make that happen:
 282:/usr/include/c++/6/bits/stl_map.h ****       /**
 283:/usr/include/c++/6/bits/stl_map.h ****        *  The dtor only erases the elements, and note that if the elements
 284:/usr/include/c++/6/bits/stl_map.h ****        *  themselves are pointers, the pointed-to memory is not touched in any
 285:/usr/include/c++/6/bits/stl_map.h ****        *  way.  Managing the pointer is the user's responsibility.
 286:/usr/include/c++/6/bits/stl_map.h ****        */
 287:/usr/include/c++/6/bits/stl_map.h **** 
 288:/usr/include/c++/6/bits/stl_map.h ****       /**
GAS LISTING /tmp/ccvmoMuv.s 			page 467


 289:/usr/include/c++/6/bits/stl_map.h ****        *  @brief  %Map assignment operator.
 290:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __x  A %map of identical element and allocator types.
 291:/usr/include/c++/6/bits/stl_map.h ****        *
 292:/usr/include/c++/6/bits/stl_map.h ****        *  All the elements of @a __x are copied, but unlike the copy
 293:/usr/include/c++/6/bits/stl_map.h ****        *  constructor, the allocator object is not copied.
 294:/usr/include/c++/6/bits/stl_map.h ****        */
 295:/usr/include/c++/6/bits/stl_map.h ****       map&
 296:/usr/include/c++/6/bits/stl_map.h ****       operator=(const map& __x)
 297:/usr/include/c++/6/bits/stl_map.h ****       {
 298:/usr/include/c++/6/bits/stl_map.h **** 	_M_t = __x._M_t;
 299:/usr/include/c++/6/bits/stl_map.h **** 	return *this;
 300:/usr/include/c++/6/bits/stl_map.h ****       }
 301:/usr/include/c++/6/bits/stl_map.h **** 
 302:/usr/include/c++/6/bits/stl_map.h **** #if __cplusplus >= 201103L
 303:/usr/include/c++/6/bits/stl_map.h ****       /// Move assignment operator.
 304:/usr/include/c++/6/bits/stl_map.h ****       map&
 305:/usr/include/c++/6/bits/stl_map.h ****       operator=(map&&) = default;
 306:/usr/include/c++/6/bits/stl_map.h **** 
 307:/usr/include/c++/6/bits/stl_map.h ****       /**
 308:/usr/include/c++/6/bits/stl_map.h ****        *  @brief  %Map list assignment operator.
 309:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __l  An initializer_list.
 310:/usr/include/c++/6/bits/stl_map.h ****        *
 311:/usr/include/c++/6/bits/stl_map.h ****        *  This function fills a %map with copies of the elements in the
 312:/usr/include/c++/6/bits/stl_map.h ****        *  initializer list @a __l.
 313:/usr/include/c++/6/bits/stl_map.h ****        *
 314:/usr/include/c++/6/bits/stl_map.h ****        *  Note that the assignment completely changes the %map and
 315:/usr/include/c++/6/bits/stl_map.h ****        *  that the resulting %map's size is the same as the number
 316:/usr/include/c++/6/bits/stl_map.h ****        *  of elements assigned.  Old data may be lost.
 317:/usr/include/c++/6/bits/stl_map.h ****        */
 318:/usr/include/c++/6/bits/stl_map.h ****       map&
 319:/usr/include/c++/6/bits/stl_map.h ****       operator=(initializer_list<value_type> __l)
 320:/usr/include/c++/6/bits/stl_map.h ****       {
 321:/usr/include/c++/6/bits/stl_map.h **** 	_M_t._M_assign_unique(__l.begin(), __l.end());
 322:/usr/include/c++/6/bits/stl_map.h **** 	return *this;
 323:/usr/include/c++/6/bits/stl_map.h ****       }
 324:/usr/include/c++/6/bits/stl_map.h **** #endif
 325:/usr/include/c++/6/bits/stl_map.h **** 
 326:/usr/include/c++/6/bits/stl_map.h ****       /// Get a copy of the memory allocation object.
 327:/usr/include/c++/6/bits/stl_map.h ****       allocator_type
 328:/usr/include/c++/6/bits/stl_map.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 329:/usr/include/c++/6/bits/stl_map.h ****       { return allocator_type(_M_t.get_allocator()); }
 330:/usr/include/c++/6/bits/stl_map.h **** 
 331:/usr/include/c++/6/bits/stl_map.h ****       // iterators
 332:/usr/include/c++/6/bits/stl_map.h ****       /**
 333:/usr/include/c++/6/bits/stl_map.h ****        *  Returns a read/write iterator that points to the first pair in the
 334:/usr/include/c++/6/bits/stl_map.h ****        *  %map.
 335:/usr/include/c++/6/bits/stl_map.h ****        *  Iteration is done in ascending order according to the keys.
 336:/usr/include/c++/6/bits/stl_map.h ****        */
 337:/usr/include/c++/6/bits/stl_map.h ****       iterator
 338:/usr/include/c++/6/bits/stl_map.h ****       begin() _GLIBCXX_NOEXCEPT
 339:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t.begin(); }
 340:/usr/include/c++/6/bits/stl_map.h **** 
 341:/usr/include/c++/6/bits/stl_map.h ****       /**
 342:/usr/include/c++/6/bits/stl_map.h ****        *  Returns a read-only (constant) iterator that points to the first pair
 343:/usr/include/c++/6/bits/stl_map.h ****        *  in the %map.  Iteration is done in ascending order according to the
 344:/usr/include/c++/6/bits/stl_map.h ****        *  keys.
 345:/usr/include/c++/6/bits/stl_map.h ****        */
GAS LISTING /tmp/ccvmoMuv.s 			page 468


 346:/usr/include/c++/6/bits/stl_map.h ****       const_iterator
 347:/usr/include/c++/6/bits/stl_map.h ****       begin() const _GLIBCXX_NOEXCEPT
 348:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t.begin(); }
 349:/usr/include/c++/6/bits/stl_map.h **** 
 350:/usr/include/c++/6/bits/stl_map.h ****       /**
 351:/usr/include/c++/6/bits/stl_map.h ****        *  Returns a read/write iterator that points one past the last
 352:/usr/include/c++/6/bits/stl_map.h ****        *  pair in the %map.  Iteration is done in ascending order
 353:/usr/include/c++/6/bits/stl_map.h ****        *  according to the keys.
 354:/usr/include/c++/6/bits/stl_map.h ****        */
 355:/usr/include/c++/6/bits/stl_map.h ****       iterator
 356:/usr/include/c++/6/bits/stl_map.h ****       end() _GLIBCXX_NOEXCEPT
 357:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t.end(); }
 358:/usr/include/c++/6/bits/stl_map.h **** 
 359:/usr/include/c++/6/bits/stl_map.h ****       /**
 360:/usr/include/c++/6/bits/stl_map.h ****        *  Returns a read-only (constant) iterator that points one past the last
 361:/usr/include/c++/6/bits/stl_map.h ****        *  pair in the %map.  Iteration is done in ascending order according to
 362:/usr/include/c++/6/bits/stl_map.h ****        *  the keys.
 363:/usr/include/c++/6/bits/stl_map.h ****        */
 364:/usr/include/c++/6/bits/stl_map.h ****       const_iterator
 365:/usr/include/c++/6/bits/stl_map.h ****       end() const _GLIBCXX_NOEXCEPT
 366:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t.end(); }
 367:/usr/include/c++/6/bits/stl_map.h **** 
 368:/usr/include/c++/6/bits/stl_map.h ****       /**
 369:/usr/include/c++/6/bits/stl_map.h ****        *  Returns a read/write reverse iterator that points to the last pair in
 370:/usr/include/c++/6/bits/stl_map.h ****        *  the %map.  Iteration is done in descending order according to the
 371:/usr/include/c++/6/bits/stl_map.h ****        *  keys.
 372:/usr/include/c++/6/bits/stl_map.h ****        */
 373:/usr/include/c++/6/bits/stl_map.h ****       reverse_iterator
 374:/usr/include/c++/6/bits/stl_map.h ****       rbegin() _GLIBCXX_NOEXCEPT
 375:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t.rbegin(); }
 376:/usr/include/c++/6/bits/stl_map.h **** 
 377:/usr/include/c++/6/bits/stl_map.h ****       /**
 378:/usr/include/c++/6/bits/stl_map.h ****        *  Returns a read-only (constant) reverse iterator that points to the
 379:/usr/include/c++/6/bits/stl_map.h ****        *  last pair in the %map.  Iteration is done in descending order
 380:/usr/include/c++/6/bits/stl_map.h ****        *  according to the keys.
 381:/usr/include/c++/6/bits/stl_map.h ****        */
 382:/usr/include/c++/6/bits/stl_map.h ****       const_reverse_iterator
 383:/usr/include/c++/6/bits/stl_map.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 384:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t.rbegin(); }
 385:/usr/include/c++/6/bits/stl_map.h **** 
 386:/usr/include/c++/6/bits/stl_map.h ****       /**
 387:/usr/include/c++/6/bits/stl_map.h ****        *  Returns a read/write reverse iterator that points to one before the
 388:/usr/include/c++/6/bits/stl_map.h ****        *  first pair in the %map.  Iteration is done in descending order
 389:/usr/include/c++/6/bits/stl_map.h ****        *  according to the keys.
 390:/usr/include/c++/6/bits/stl_map.h ****        */
 391:/usr/include/c++/6/bits/stl_map.h ****       reverse_iterator
 392:/usr/include/c++/6/bits/stl_map.h ****       rend() _GLIBCXX_NOEXCEPT
 393:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t.rend(); }
 394:/usr/include/c++/6/bits/stl_map.h **** 
 395:/usr/include/c++/6/bits/stl_map.h ****       /**
 396:/usr/include/c++/6/bits/stl_map.h ****        *  Returns a read-only (constant) reverse iterator that points to one
 397:/usr/include/c++/6/bits/stl_map.h ****        *  before the first pair in the %map.  Iteration is done in descending
 398:/usr/include/c++/6/bits/stl_map.h ****        *  order according to the keys.
 399:/usr/include/c++/6/bits/stl_map.h ****        */
 400:/usr/include/c++/6/bits/stl_map.h ****       const_reverse_iterator
 401:/usr/include/c++/6/bits/stl_map.h ****       rend() const _GLIBCXX_NOEXCEPT
 402:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t.rend(); }
GAS LISTING /tmp/ccvmoMuv.s 			page 469


 403:/usr/include/c++/6/bits/stl_map.h **** 
 404:/usr/include/c++/6/bits/stl_map.h **** #if __cplusplus >= 201103L
 405:/usr/include/c++/6/bits/stl_map.h ****       /**
 406:/usr/include/c++/6/bits/stl_map.h ****        *  Returns a read-only (constant) iterator that points to the first pair
 407:/usr/include/c++/6/bits/stl_map.h ****        *  in the %map.  Iteration is done in ascending order according to the
 408:/usr/include/c++/6/bits/stl_map.h ****        *  keys.
 409:/usr/include/c++/6/bits/stl_map.h ****        */
 410:/usr/include/c++/6/bits/stl_map.h ****       const_iterator
 411:/usr/include/c++/6/bits/stl_map.h ****       cbegin() const noexcept
 412:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t.begin(); }
 413:/usr/include/c++/6/bits/stl_map.h **** 
 414:/usr/include/c++/6/bits/stl_map.h ****       /**
 415:/usr/include/c++/6/bits/stl_map.h ****        *  Returns a read-only (constant) iterator that points one past the last
 416:/usr/include/c++/6/bits/stl_map.h ****        *  pair in the %map.  Iteration is done in ascending order according to
 417:/usr/include/c++/6/bits/stl_map.h ****        *  the keys.
 418:/usr/include/c++/6/bits/stl_map.h ****        */
 419:/usr/include/c++/6/bits/stl_map.h ****       const_iterator
 420:/usr/include/c++/6/bits/stl_map.h ****       cend() const noexcept
 421:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t.end(); }
 422:/usr/include/c++/6/bits/stl_map.h **** 
 423:/usr/include/c++/6/bits/stl_map.h ****       /**
 424:/usr/include/c++/6/bits/stl_map.h ****        *  Returns a read-only (constant) reverse iterator that points to the
 425:/usr/include/c++/6/bits/stl_map.h ****        *  last pair in the %map.  Iteration is done in descending order
 426:/usr/include/c++/6/bits/stl_map.h ****        *  according to the keys.
 427:/usr/include/c++/6/bits/stl_map.h ****        */
 428:/usr/include/c++/6/bits/stl_map.h ****       const_reverse_iterator
 429:/usr/include/c++/6/bits/stl_map.h ****       crbegin() const noexcept
 430:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t.rbegin(); }
 431:/usr/include/c++/6/bits/stl_map.h **** 
 432:/usr/include/c++/6/bits/stl_map.h ****       /**
 433:/usr/include/c++/6/bits/stl_map.h ****        *  Returns a read-only (constant) reverse iterator that points to one
 434:/usr/include/c++/6/bits/stl_map.h ****        *  before the first pair in the %map.  Iteration is done in descending
 435:/usr/include/c++/6/bits/stl_map.h ****        *  order according to the keys.
 436:/usr/include/c++/6/bits/stl_map.h ****        */
 437:/usr/include/c++/6/bits/stl_map.h ****       const_reverse_iterator
 438:/usr/include/c++/6/bits/stl_map.h ****       crend() const noexcept
 439:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t.rend(); }
 440:/usr/include/c++/6/bits/stl_map.h **** #endif
 441:/usr/include/c++/6/bits/stl_map.h **** 
 442:/usr/include/c++/6/bits/stl_map.h ****       // capacity
 443:/usr/include/c++/6/bits/stl_map.h ****       /** Returns true if the %map is empty.  (Thus begin() would equal
 444:/usr/include/c++/6/bits/stl_map.h ****        *  end().)
 445:/usr/include/c++/6/bits/stl_map.h ****       */
 446:/usr/include/c++/6/bits/stl_map.h ****       bool
 447:/usr/include/c++/6/bits/stl_map.h ****       empty() const _GLIBCXX_NOEXCEPT
 448:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t.empty(); }
 449:/usr/include/c++/6/bits/stl_map.h **** 
 450:/usr/include/c++/6/bits/stl_map.h ****       /** Returns the size of the %map.  */
 451:/usr/include/c++/6/bits/stl_map.h ****       size_type
 452:/usr/include/c++/6/bits/stl_map.h ****       size() const _GLIBCXX_NOEXCEPT
 453:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t.size(); }
 454:/usr/include/c++/6/bits/stl_map.h **** 
 455:/usr/include/c++/6/bits/stl_map.h ****       /** Returns the maximum size of the %map.  */
 456:/usr/include/c++/6/bits/stl_map.h ****       size_type
 457:/usr/include/c++/6/bits/stl_map.h ****       max_size() const _GLIBCXX_NOEXCEPT
 458:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t.max_size(); }
 459:/usr/include/c++/6/bits/stl_map.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 470


 460:/usr/include/c++/6/bits/stl_map.h ****       // [23.3.1.2] element access
 461:/usr/include/c++/6/bits/stl_map.h ****       /**
 462:/usr/include/c++/6/bits/stl_map.h ****        *  @brief  Subscript ( @c [] ) access to %map data.
 463:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __k  The key for which data should be retrieved.
 464:/usr/include/c++/6/bits/stl_map.h ****        *  @return  A reference to the data of the (key,data) %pair.
 465:/usr/include/c++/6/bits/stl_map.h ****        *
 466:/usr/include/c++/6/bits/stl_map.h ****        *  Allows for easy lookup with the subscript ( @c [] )
 467:/usr/include/c++/6/bits/stl_map.h ****        *  operator.  Returns data associated with the key specified in
 468:/usr/include/c++/6/bits/stl_map.h ****        *  subscript.  If the key does not exist, a pair with that key
 469:/usr/include/c++/6/bits/stl_map.h ****        *  is created using default values, which is then returned.
 470:/usr/include/c++/6/bits/stl_map.h ****        *
 471:/usr/include/c++/6/bits/stl_map.h ****        *  Lookup requires logarithmic time.
 472:/usr/include/c++/6/bits/stl_map.h ****        */
 473:/usr/include/c++/6/bits/stl_map.h ****       mapped_type&
 474:/usr/include/c++/6/bits/stl_map.h ****       operator[](const key_type& __k)
 475:/usr/include/c++/6/bits/stl_map.h ****       {
 476:/usr/include/c++/6/bits/stl_map.h **** 	// concept requirements
 477:/usr/include/c++/6/bits/stl_map.h **** 	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)
 478:/usr/include/c++/6/bits/stl_map.h **** 
 479:/usr/include/c++/6/bits/stl_map.h **** 	iterator __i = lower_bound(__k);
 480:/usr/include/c++/6/bits/stl_map.h **** 	// __i->first is greater than or equivalent to __k.
 481:/usr/include/c++/6/bits/stl_map.h **** 	if (__i == end() || key_comp()(__k, (*__i).first))
 482:/usr/include/c++/6/bits/stl_map.h **** #if __cplusplus >= 201103L
 483:/usr/include/c++/6/bits/stl_map.h **** 	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 484:/usr/include/c++/6/bits/stl_map.h **** 					    std::tuple<const key_type&>(__k),
 485:/usr/include/c++/6/bits/stl_map.h **** 					    std::tuple<>());
 486:/usr/include/c++/6/bits/stl_map.h **** #else
 487:/usr/include/c++/6/bits/stl_map.h ****           __i = insert(__i, value_type(__k, mapped_type()));
 488:/usr/include/c++/6/bits/stl_map.h **** #endif
 489:/usr/include/c++/6/bits/stl_map.h **** 	return (*__i).second;
 490:/usr/include/c++/6/bits/stl_map.h ****       }
 491:/usr/include/c++/6/bits/stl_map.h **** 
 492:/usr/include/c++/6/bits/stl_map.h **** #if __cplusplus >= 201103L
 493:/usr/include/c++/6/bits/stl_map.h ****       mapped_type&
 494:/usr/include/c++/6/bits/stl_map.h ****       operator[](key_type&& __k)
 495:/usr/include/c++/6/bits/stl_map.h ****       {
 496:/usr/include/c++/6/bits/stl_map.h **** 	// concept requirements
 497:/usr/include/c++/6/bits/stl_map.h **** 	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)
 498:/usr/include/c++/6/bits/stl_map.h **** 
 499:/usr/include/c++/6/bits/stl_map.h **** 	iterator __i = lower_bound(__k);
 500:/usr/include/c++/6/bits/stl_map.h **** 	// __i->first is greater than or equivalent to __k.
 501:/usr/include/c++/6/bits/stl_map.h **** 	if (__i == end() || key_comp()(__k, (*__i).first))
 502:/usr/include/c++/6/bits/stl_map.h **** 	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 503:/usr/include/c++/6/bits/stl_map.h **** 					std::forward_as_tuple(std::move(__k)),
 504:/usr/include/c++/6/bits/stl_map.h **** 					std::tuple<>());
 505:/usr/include/c++/6/bits/stl_map.h **** 	return (*__i).second;
 506:/usr/include/c++/6/bits/stl_map.h ****       }
 507:/usr/include/c++/6/bits/stl_map.h **** #endif
 508:/usr/include/c++/6/bits/stl_map.h **** 
 509:/usr/include/c++/6/bits/stl_map.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 510:/usr/include/c++/6/bits/stl_map.h ****       // DR 464. Suggestion for new member functions in standard containers.
 511:/usr/include/c++/6/bits/stl_map.h ****       /**
 512:/usr/include/c++/6/bits/stl_map.h ****        *  @brief  Access to %map data.
 513:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __k  The key for which data should be retrieved.
 514:/usr/include/c++/6/bits/stl_map.h ****        *  @return  A reference to the data whose key is equivalent to @a __k, if
 515:/usr/include/c++/6/bits/stl_map.h ****        *           such a data is present in the %map.
 516:/usr/include/c++/6/bits/stl_map.h ****        *  @throw  std::out_of_range  If no such data is present.
GAS LISTING /tmp/ccvmoMuv.s 			page 471


 517:/usr/include/c++/6/bits/stl_map.h ****        */
 518:/usr/include/c++/6/bits/stl_map.h ****       mapped_type&
 519:/usr/include/c++/6/bits/stl_map.h ****       at(const key_type& __k)
 520:/usr/include/c++/6/bits/stl_map.h ****       {
 521:/usr/include/c++/6/bits/stl_map.h **** 	iterator __i = lower_bound(__k);
 522:/usr/include/c++/6/bits/stl_map.h **** 	if (__i == end() || key_comp()(__k, (*__i).first))
 523:/usr/include/c++/6/bits/stl_map.h **** 	  __throw_out_of_range(__N("map::at"));
 524:/usr/include/c++/6/bits/stl_map.h **** 	return (*__i).second;
 525:/usr/include/c++/6/bits/stl_map.h ****       }
 526:/usr/include/c++/6/bits/stl_map.h **** 
 527:/usr/include/c++/6/bits/stl_map.h ****       const mapped_type&
 528:/usr/include/c++/6/bits/stl_map.h ****       at(const key_type& __k) const
 529:/usr/include/c++/6/bits/stl_map.h ****       {
 530:/usr/include/c++/6/bits/stl_map.h **** 	const_iterator __i = lower_bound(__k);
 531:/usr/include/c++/6/bits/stl_map.h **** 	if (__i == end() || key_comp()(__k, (*__i).first))
 532:/usr/include/c++/6/bits/stl_map.h **** 	  __throw_out_of_range(__N("map::at"));
 533:/usr/include/c++/6/bits/stl_map.h **** 	return (*__i).second;
 534:/usr/include/c++/6/bits/stl_map.h ****       }
 535:/usr/include/c++/6/bits/stl_map.h **** 
 536:/usr/include/c++/6/bits/stl_map.h ****       // modifiers
 537:/usr/include/c++/6/bits/stl_map.h **** #if __cplusplus >= 201103L
 538:/usr/include/c++/6/bits/stl_map.h ****       /**
 539:/usr/include/c++/6/bits/stl_map.h ****        *  @brief Attempts to build and insert a std::pair into the %map.
 540:/usr/include/c++/6/bits/stl_map.h ****        *
 541:/usr/include/c++/6/bits/stl_map.h ****        *  @param __args  Arguments used to generate a new pair instance (see
 542:/usr/include/c++/6/bits/stl_map.h ****        *	        std::piecewise_contruct for passing arguments to each
 543:/usr/include/c++/6/bits/stl_map.h ****        *	        part of the pair constructor).
 544:/usr/include/c++/6/bits/stl_map.h ****        *
 545:/usr/include/c++/6/bits/stl_map.h ****        *  @return  A pair, of which the first element is an iterator that points
 546:/usr/include/c++/6/bits/stl_map.h ****        *           to the possibly inserted pair, and the second is a bool that
 547:/usr/include/c++/6/bits/stl_map.h ****        *           is true if the pair was actually inserted.
 548:/usr/include/c++/6/bits/stl_map.h ****        *
 549:/usr/include/c++/6/bits/stl_map.h ****        *  This function attempts to build and insert a (key, value) %pair into
 550:/usr/include/c++/6/bits/stl_map.h ****        *  the %map.
 551:/usr/include/c++/6/bits/stl_map.h ****        *  A %map relies on unique keys and thus a %pair is only inserted if its
 552:/usr/include/c++/6/bits/stl_map.h ****        *  first element (the key) is not already present in the %map.
 553:/usr/include/c++/6/bits/stl_map.h ****        *
 554:/usr/include/c++/6/bits/stl_map.h ****        *  Insertion requires logarithmic time.
 555:/usr/include/c++/6/bits/stl_map.h ****        */
 556:/usr/include/c++/6/bits/stl_map.h ****       template<typename... _Args>
 557:/usr/include/c++/6/bits/stl_map.h **** 	std::pair<iterator, bool>
 558:/usr/include/c++/6/bits/stl_map.h **** 	emplace(_Args&&... __args)
 559:/usr/include/c++/6/bits/stl_map.h **** 	{ return _M_t._M_emplace_unique(std::forward<_Args>(__args)...); }
 560:/usr/include/c++/6/bits/stl_map.h **** 
 561:/usr/include/c++/6/bits/stl_map.h ****       /**
 562:/usr/include/c++/6/bits/stl_map.h ****        *  @brief Attempts to build and insert a std::pair into the %map.
 563:/usr/include/c++/6/bits/stl_map.h ****        *
 564:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __pos  An iterator that serves as a hint as to where the pair
 565:/usr/include/c++/6/bits/stl_map.h ****        *                should be inserted.
 566:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __args  Arguments used to generate a new pair instance (see
 567:/usr/include/c++/6/bits/stl_map.h ****        *	         std::piecewise_contruct for passing arguments to each
 568:/usr/include/c++/6/bits/stl_map.h ****        *	         part of the pair constructor).
 569:/usr/include/c++/6/bits/stl_map.h ****        *  @return An iterator that points to the element with key of the
 570:/usr/include/c++/6/bits/stl_map.h ****        *          std::pair built from @a __args (may or may not be that
 571:/usr/include/c++/6/bits/stl_map.h ****        *          std::pair).
 572:/usr/include/c++/6/bits/stl_map.h ****        *
 573:/usr/include/c++/6/bits/stl_map.h ****        *  This function is not concerned about whether the insertion took place,
GAS LISTING /tmp/ccvmoMuv.s 			page 472


 574:/usr/include/c++/6/bits/stl_map.h ****        *  and thus does not return a boolean like the single-argument emplace()
 575:/usr/include/c++/6/bits/stl_map.h ****        *  does.
 576:/usr/include/c++/6/bits/stl_map.h ****        *  Note that the first parameter is only a hint and can potentially
 577:/usr/include/c++/6/bits/stl_map.h ****        *  improve the performance of the insertion process. A bad hint would
 578:/usr/include/c++/6/bits/stl_map.h ****        *  cause no gains in efficiency.
 579:/usr/include/c++/6/bits/stl_map.h ****        *
 580:/usr/include/c++/6/bits/stl_map.h ****        *  See
 581:/usr/include/c++/6/bits/stl_map.h ****        *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.i
 582:/usr/include/c++/6/bits/stl_map.h ****        *  for more on @a hinting.
 583:/usr/include/c++/6/bits/stl_map.h ****        *
 584:/usr/include/c++/6/bits/stl_map.h ****        *  Insertion requires logarithmic time (if the hint is not taken).
 585:/usr/include/c++/6/bits/stl_map.h ****        */
 586:/usr/include/c++/6/bits/stl_map.h ****       template<typename... _Args>
 587:/usr/include/c++/6/bits/stl_map.h **** 	iterator
 588:/usr/include/c++/6/bits/stl_map.h **** 	emplace_hint(const_iterator __pos, _Args&&... __args)
 589:/usr/include/c++/6/bits/stl_map.h **** 	{
 590:/usr/include/c++/6/bits/stl_map.h **** 	  return _M_t._M_emplace_hint_unique(__pos,
 591:/usr/include/c++/6/bits/stl_map.h **** 					     std::forward<_Args>(__args)...);
 592:/usr/include/c++/6/bits/stl_map.h **** 	}
 593:/usr/include/c++/6/bits/stl_map.h **** #endif
 594:/usr/include/c++/6/bits/stl_map.h **** 
 595:/usr/include/c++/6/bits/stl_map.h **** #if __cplusplus > 201402L
 596:/usr/include/c++/6/bits/stl_map.h **** #define __cpp_lib_map_try_emplace 201411
 597:/usr/include/c++/6/bits/stl_map.h ****       /**
 598:/usr/include/c++/6/bits/stl_map.h ****        *  @brief Attempts to build and insert a std::pair into the %map.
 599:/usr/include/c++/6/bits/stl_map.h ****        *
 600:/usr/include/c++/6/bits/stl_map.h ****        *  @param __k    Key to use for finding a possibly existing pair in
 601:/usr/include/c++/6/bits/stl_map.h ****        *                the map.
 602:/usr/include/c++/6/bits/stl_map.h ****        *  @param __args  Arguments used to generate the .second for a new pair 
 603:/usr/include/c++/6/bits/stl_map.h ****        *                instance.
 604:/usr/include/c++/6/bits/stl_map.h ****        *
 605:/usr/include/c++/6/bits/stl_map.h ****        *  @return  A pair, of which the first element is an iterator that points
 606:/usr/include/c++/6/bits/stl_map.h ****        *           to the possibly inserted pair, and the second is a bool that
 607:/usr/include/c++/6/bits/stl_map.h ****        *           is true if the pair was actually inserted.
 608:/usr/include/c++/6/bits/stl_map.h ****        *
 609:/usr/include/c++/6/bits/stl_map.h ****        *  This function attempts to build and insert a (key, value) %pair into
 610:/usr/include/c++/6/bits/stl_map.h ****        *  the %map.
 611:/usr/include/c++/6/bits/stl_map.h ****        *  A %map relies on unique keys and thus a %pair is only inserted if its
 612:/usr/include/c++/6/bits/stl_map.h ****        *  first element (the key) is not already present in the %map.
 613:/usr/include/c++/6/bits/stl_map.h ****        *  If a %pair is not inserted, this function has no effect.
 614:/usr/include/c++/6/bits/stl_map.h ****        *
 615:/usr/include/c++/6/bits/stl_map.h ****        *  Insertion requires logarithmic time.
 616:/usr/include/c++/6/bits/stl_map.h ****        */
 617:/usr/include/c++/6/bits/stl_map.h ****       template <typename... _Args>
 618:/usr/include/c++/6/bits/stl_map.h ****         pair<iterator, bool>
 619:/usr/include/c++/6/bits/stl_map.h ****         try_emplace(const key_type& __k, _Args&&... __args)
 620:/usr/include/c++/6/bits/stl_map.h ****         {
 621:/usr/include/c++/6/bits/stl_map.h ****           iterator __i = lower_bound(__k);
 622:/usr/include/c++/6/bits/stl_map.h ****           if (__i == end() || key_comp()(__k, (*__i).first))
 623:/usr/include/c++/6/bits/stl_map.h ****             {
 624:/usr/include/c++/6/bits/stl_map.h ****               __i = emplace_hint(__i, std::piecewise_construct,
 625:/usr/include/c++/6/bits/stl_map.h ****                                  std::forward_as_tuple(__k),
 626:/usr/include/c++/6/bits/stl_map.h ****                                  std::forward_as_tuple(
 627:/usr/include/c++/6/bits/stl_map.h ****                                    std::forward<_Args>(__args)...));
 628:/usr/include/c++/6/bits/stl_map.h ****               return {__i, true};
 629:/usr/include/c++/6/bits/stl_map.h ****             }
 630:/usr/include/c++/6/bits/stl_map.h ****           return {__i, false};
GAS LISTING /tmp/ccvmoMuv.s 			page 473


 631:/usr/include/c++/6/bits/stl_map.h ****         }
 632:/usr/include/c++/6/bits/stl_map.h **** 
 633:/usr/include/c++/6/bits/stl_map.h ****       // move-capable overload
 634:/usr/include/c++/6/bits/stl_map.h ****       template <typename... _Args>
 635:/usr/include/c++/6/bits/stl_map.h ****         pair<iterator, bool>
 636:/usr/include/c++/6/bits/stl_map.h ****         try_emplace(key_type&& __k, _Args&&... __args)
 637:/usr/include/c++/6/bits/stl_map.h ****         {
 638:/usr/include/c++/6/bits/stl_map.h ****           iterator __i = lower_bound(__k);
 639:/usr/include/c++/6/bits/stl_map.h ****           if (__i == end() || key_comp()(__k, (*__i).first))
 640:/usr/include/c++/6/bits/stl_map.h ****             {
 641:/usr/include/c++/6/bits/stl_map.h ****               __i = emplace_hint(__i, std::piecewise_construct,
 642:/usr/include/c++/6/bits/stl_map.h ****                                  std::forward_as_tuple(std::move(__k)),
 643:/usr/include/c++/6/bits/stl_map.h ****                                  std::forward_as_tuple(
 644:/usr/include/c++/6/bits/stl_map.h ****                                    std::forward<_Args>(__args)...));
 645:/usr/include/c++/6/bits/stl_map.h ****               return {__i, true};
 646:/usr/include/c++/6/bits/stl_map.h ****             }
 647:/usr/include/c++/6/bits/stl_map.h ****           return {__i, false};
 648:/usr/include/c++/6/bits/stl_map.h ****         }
 649:/usr/include/c++/6/bits/stl_map.h **** 
 650:/usr/include/c++/6/bits/stl_map.h ****       /**
 651:/usr/include/c++/6/bits/stl_map.h ****        *  @brief Attempts to build and insert a std::pair into the %map.
 652:/usr/include/c++/6/bits/stl_map.h ****        *
 653:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __hint  An iterator that serves as a hint as to where the
 654:/usr/include/c++/6/bits/stl_map.h ****        *                  pair should be inserted.
 655:/usr/include/c++/6/bits/stl_map.h ****        *  @param __k    Key to use for finding a possibly existing pair in
 656:/usr/include/c++/6/bits/stl_map.h ****        *                the map.
 657:/usr/include/c++/6/bits/stl_map.h ****        *  @param __args  Arguments used to generate the .second for a new pair 
 658:/usr/include/c++/6/bits/stl_map.h ****        *                instance.
 659:/usr/include/c++/6/bits/stl_map.h ****        *  @return An iterator that points to the element with key of the
 660:/usr/include/c++/6/bits/stl_map.h ****        *          std::pair built from @a __args (may or may not be that
 661:/usr/include/c++/6/bits/stl_map.h ****        *          std::pair).
 662:/usr/include/c++/6/bits/stl_map.h ****        *
 663:/usr/include/c++/6/bits/stl_map.h ****        *  This function is not concerned about whether the insertion took place,
 664:/usr/include/c++/6/bits/stl_map.h ****        *  and thus does not return a boolean like the single-argument 
 665:/usr/include/c++/6/bits/stl_map.h ****        *  try_emplace() does. However, if insertion did not take place,
 666:/usr/include/c++/6/bits/stl_map.h ****        *  this function has no effect.
 667:/usr/include/c++/6/bits/stl_map.h ****        *  Note that the first parameter is only a hint and can potentially
 668:/usr/include/c++/6/bits/stl_map.h ****        *  improve the performance of the insertion process. A bad hint would
 669:/usr/include/c++/6/bits/stl_map.h ****        *  cause no gains in efficiency.
 670:/usr/include/c++/6/bits/stl_map.h ****        *
 671:/usr/include/c++/6/bits/stl_map.h ****        *  See
 672:/usr/include/c++/6/bits/stl_map.h ****        *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.i
 673:/usr/include/c++/6/bits/stl_map.h ****        *  for more on @a hinting.
 674:/usr/include/c++/6/bits/stl_map.h ****        *
 675:/usr/include/c++/6/bits/stl_map.h ****        *  Insertion requires logarithmic time (if the hint is not taken).
 676:/usr/include/c++/6/bits/stl_map.h ****        */
 677:/usr/include/c++/6/bits/stl_map.h ****       template <typename... _Args>
 678:/usr/include/c++/6/bits/stl_map.h ****         iterator
 679:/usr/include/c++/6/bits/stl_map.h ****         try_emplace(const_iterator __hint, const key_type& __k,
 680:/usr/include/c++/6/bits/stl_map.h ****                     _Args&&... __args)
 681:/usr/include/c++/6/bits/stl_map.h ****         {
 682:/usr/include/c++/6/bits/stl_map.h ****           iterator __i;
 683:/usr/include/c++/6/bits/stl_map.h ****           auto __true_hint = _M_t._M_get_insert_hint_unique_pos(__hint, __k);
 684:/usr/include/c++/6/bits/stl_map.h ****           if (__true_hint.second)
 685:/usr/include/c++/6/bits/stl_map.h ****             __i = emplace_hint(iterator(__true_hint.second),
 686:/usr/include/c++/6/bits/stl_map.h ****                                std::piecewise_construct,
 687:/usr/include/c++/6/bits/stl_map.h ****                                std::forward_as_tuple(__k),
GAS LISTING /tmp/ccvmoMuv.s 			page 474


 688:/usr/include/c++/6/bits/stl_map.h ****                                std::forward_as_tuple(
 689:/usr/include/c++/6/bits/stl_map.h ****                                  std::forward<_Args>(__args)...));
 690:/usr/include/c++/6/bits/stl_map.h ****           else
 691:/usr/include/c++/6/bits/stl_map.h ****             __i = iterator(__true_hint.first);
 692:/usr/include/c++/6/bits/stl_map.h ****           return __i;
 693:/usr/include/c++/6/bits/stl_map.h ****         }
 694:/usr/include/c++/6/bits/stl_map.h **** 
 695:/usr/include/c++/6/bits/stl_map.h ****       // move-capable overload
 696:/usr/include/c++/6/bits/stl_map.h ****       template <typename... _Args>
 697:/usr/include/c++/6/bits/stl_map.h ****         iterator
 698:/usr/include/c++/6/bits/stl_map.h ****         try_emplace(const_iterator __hint, key_type&& __k, _Args&&... __args)
 699:/usr/include/c++/6/bits/stl_map.h ****         {
 700:/usr/include/c++/6/bits/stl_map.h ****           iterator __i;
 701:/usr/include/c++/6/bits/stl_map.h ****           auto __true_hint = _M_t._M_get_insert_hint_unique_pos(__hint, __k);
 702:/usr/include/c++/6/bits/stl_map.h ****           if (__true_hint.second)
 703:/usr/include/c++/6/bits/stl_map.h ****             __i = emplace_hint(iterator(__true_hint.second),
 704:/usr/include/c++/6/bits/stl_map.h ****                                std::piecewise_construct,
 705:/usr/include/c++/6/bits/stl_map.h ****                                std::forward_as_tuple(std::move(__k)),
 706:/usr/include/c++/6/bits/stl_map.h ****                                std::forward_as_tuple(
 707:/usr/include/c++/6/bits/stl_map.h ****                                  std::forward<_Args>(__args)...));
 708:/usr/include/c++/6/bits/stl_map.h ****           else
 709:/usr/include/c++/6/bits/stl_map.h ****             __i = iterator(__true_hint.first);
 710:/usr/include/c++/6/bits/stl_map.h ****           return __i;
 711:/usr/include/c++/6/bits/stl_map.h ****         }
 712:/usr/include/c++/6/bits/stl_map.h **** #endif
 713:/usr/include/c++/6/bits/stl_map.h **** 
 714:/usr/include/c++/6/bits/stl_map.h ****       /**
 715:/usr/include/c++/6/bits/stl_map.h ****        *  @brief Attempts to insert a std::pair into the %map.
 716:/usr/include/c++/6/bits/stl_map.h **** 
 717:/usr/include/c++/6/bits/stl_map.h ****        *  @param __x Pair to be inserted (see std::make_pair for easy
 718:/usr/include/c++/6/bits/stl_map.h ****        *	     creation of pairs).
 719:/usr/include/c++/6/bits/stl_map.h ****        *
 720:/usr/include/c++/6/bits/stl_map.h ****        *  @return  A pair, of which the first element is an iterator that 
 721:/usr/include/c++/6/bits/stl_map.h ****        *           points to the possibly inserted pair, and the second is 
 722:/usr/include/c++/6/bits/stl_map.h ****        *           a bool that is true if the pair was actually inserted.
 723:/usr/include/c++/6/bits/stl_map.h ****        *
 724:/usr/include/c++/6/bits/stl_map.h ****        *  This function attempts to insert a (key, value) %pair into the %map.
 725:/usr/include/c++/6/bits/stl_map.h ****        *  A %map relies on unique keys and thus a %pair is only inserted if its
 726:/usr/include/c++/6/bits/stl_map.h ****        *  first element (the key) is not already present in the %map.
 727:/usr/include/c++/6/bits/stl_map.h ****        *
 728:/usr/include/c++/6/bits/stl_map.h ****        *  Insertion requires logarithmic time.
 729:/usr/include/c++/6/bits/stl_map.h ****        */
 730:/usr/include/c++/6/bits/stl_map.h ****       std::pair<iterator, bool>
 731:/usr/include/c++/6/bits/stl_map.h ****       insert(const value_type& __x)
 732:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t._M_insert_unique(__x); }
 733:/usr/include/c++/6/bits/stl_map.h **** 
 734:/usr/include/c++/6/bits/stl_map.h **** #if __cplusplus >= 201103L
 735:/usr/include/c++/6/bits/stl_map.h ****       template<typename _Pair, typename = typename
 736:/usr/include/c++/6/bits/stl_map.h **** 	       std::enable_if<std::is_constructible<value_type,
 737:/usr/include/c++/6/bits/stl_map.h **** 						    _Pair&&>::value>::type>
 738:/usr/include/c++/6/bits/stl_map.h ****         std::pair<iterator, bool>
 739:/usr/include/c++/6/bits/stl_map.h ****         insert(_Pair&& __x)
 740:/usr/include/c++/6/bits/stl_map.h ****         { return _M_t._M_insert_unique(std::forward<_Pair>(__x)); }
 741:/usr/include/c++/6/bits/stl_map.h **** #endif
 742:/usr/include/c++/6/bits/stl_map.h **** 
 743:/usr/include/c++/6/bits/stl_map.h **** #if __cplusplus >= 201103L
 744:/usr/include/c++/6/bits/stl_map.h ****       /**
GAS LISTING /tmp/ccvmoMuv.s 			page 475


 745:/usr/include/c++/6/bits/stl_map.h ****        *  @brief Attempts to insert a list of std::pairs into the %map.
 746:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __list  A std::initializer_list<value_type> of pairs to be
 747:/usr/include/c++/6/bits/stl_map.h ****        *                  inserted.
 748:/usr/include/c++/6/bits/stl_map.h ****        *
 749:/usr/include/c++/6/bits/stl_map.h ****        *  Complexity similar to that of the range constructor.
 750:/usr/include/c++/6/bits/stl_map.h ****        */
 751:/usr/include/c++/6/bits/stl_map.h ****       void
 752:/usr/include/c++/6/bits/stl_map.h ****       insert(std::initializer_list<value_type> __list)
 753:/usr/include/c++/6/bits/stl_map.h ****       { insert(__list.begin(), __list.end()); }
 754:/usr/include/c++/6/bits/stl_map.h **** #endif
 755:/usr/include/c++/6/bits/stl_map.h **** 
 756:/usr/include/c++/6/bits/stl_map.h ****       /**
 757:/usr/include/c++/6/bits/stl_map.h ****        *  @brief Attempts to insert a std::pair into the %map.
 758:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __position  An iterator that serves as a hint as to where the
 759:/usr/include/c++/6/bits/stl_map.h ****        *                    pair should be inserted.
 760:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __x  Pair to be inserted (see std::make_pair for easy creation
 761:/usr/include/c++/6/bits/stl_map.h ****        *               of pairs).
 762:/usr/include/c++/6/bits/stl_map.h ****        *  @return An iterator that points to the element with key of
 763:/usr/include/c++/6/bits/stl_map.h ****        *           @a __x (may or may not be the %pair passed in).
 764:/usr/include/c++/6/bits/stl_map.h ****        *
 765:/usr/include/c++/6/bits/stl_map.h **** 
 766:/usr/include/c++/6/bits/stl_map.h ****        *  This function is not concerned about whether the insertion
 767:/usr/include/c++/6/bits/stl_map.h ****        *  took place, and thus does not return a boolean like the
 768:/usr/include/c++/6/bits/stl_map.h ****        *  single-argument insert() does.  Note that the first
 769:/usr/include/c++/6/bits/stl_map.h ****        *  parameter is only a hint and can potentially improve the
 770:/usr/include/c++/6/bits/stl_map.h ****        *  performance of the insertion process.  A bad hint would
 771:/usr/include/c++/6/bits/stl_map.h ****        *  cause no gains in efficiency.
 772:/usr/include/c++/6/bits/stl_map.h ****        *
 773:/usr/include/c++/6/bits/stl_map.h ****        *  See
 774:/usr/include/c++/6/bits/stl_map.h ****        *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.i
 775:/usr/include/c++/6/bits/stl_map.h ****        *  for more on @a hinting.
 776:/usr/include/c++/6/bits/stl_map.h ****        *
 777:/usr/include/c++/6/bits/stl_map.h ****        *  Insertion requires logarithmic time (if the hint is not taken).
 778:/usr/include/c++/6/bits/stl_map.h ****        */
 779:/usr/include/c++/6/bits/stl_map.h ****       iterator
 780:/usr/include/c++/6/bits/stl_map.h **** #if __cplusplus >= 201103L
 781:/usr/include/c++/6/bits/stl_map.h ****       insert(const_iterator __position, const value_type& __x)
 782:/usr/include/c++/6/bits/stl_map.h **** #else
 783:/usr/include/c++/6/bits/stl_map.h ****       insert(iterator __position, const value_type& __x)
 784:/usr/include/c++/6/bits/stl_map.h **** #endif
 785:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t._M_insert_unique_(__position, __x); }
 786:/usr/include/c++/6/bits/stl_map.h **** 
 787:/usr/include/c++/6/bits/stl_map.h **** #if __cplusplus >= 201103L
 788:/usr/include/c++/6/bits/stl_map.h ****       template<typename _Pair, typename = typename
 789:/usr/include/c++/6/bits/stl_map.h **** 	       std::enable_if<std::is_constructible<value_type,
 790:/usr/include/c++/6/bits/stl_map.h **** 						    _Pair&&>::value>::type>
 791:/usr/include/c++/6/bits/stl_map.h ****         iterator
 792:/usr/include/c++/6/bits/stl_map.h ****         insert(const_iterator __position, _Pair&& __x)
 793:/usr/include/c++/6/bits/stl_map.h ****         { return _M_t._M_insert_unique_(__position,
 794:/usr/include/c++/6/bits/stl_map.h **** 					std::forward<_Pair>(__x)); }
 795:/usr/include/c++/6/bits/stl_map.h **** #endif
 796:/usr/include/c++/6/bits/stl_map.h **** 
 797:/usr/include/c++/6/bits/stl_map.h ****       /**
 798:/usr/include/c++/6/bits/stl_map.h ****        *  @brief Template function that attempts to insert a range of elements.
 799:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __first  Iterator pointing to the start of the range to be
 800:/usr/include/c++/6/bits/stl_map.h ****        *                   inserted.
 801:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __last  Iterator pointing to the end of the range.
GAS LISTING /tmp/ccvmoMuv.s 			page 476


 802:/usr/include/c++/6/bits/stl_map.h ****        *
 803:/usr/include/c++/6/bits/stl_map.h ****        *  Complexity similar to that of the range constructor.
 804:/usr/include/c++/6/bits/stl_map.h ****        */
 805:/usr/include/c++/6/bits/stl_map.h ****       template<typename _InputIterator>
 806:/usr/include/c++/6/bits/stl_map.h ****         void
 807:/usr/include/c++/6/bits/stl_map.h ****         insert(_InputIterator __first, _InputIterator __last)
 808:/usr/include/c++/6/bits/stl_map.h ****         { _M_t._M_insert_unique(__first, __last); }
 809:/usr/include/c++/6/bits/stl_map.h **** 
 810:/usr/include/c++/6/bits/stl_map.h **** #if __cplusplus > 201402L
 811:/usr/include/c++/6/bits/stl_map.h **** #define __cpp_lib_map_insertion 201411
 812:/usr/include/c++/6/bits/stl_map.h ****       /**
 813:/usr/include/c++/6/bits/stl_map.h ****        *  @brief Attempts to insert or assign a std::pair into the %map.
 814:/usr/include/c++/6/bits/stl_map.h ****        *  @param __k    Key to use for finding a possibly existing pair in
 815:/usr/include/c++/6/bits/stl_map.h ****        *                the map.
 816:/usr/include/c++/6/bits/stl_map.h ****        *  @param __obj  Argument used to generate the .second for a pair 
 817:/usr/include/c++/6/bits/stl_map.h ****        *                instance.
 818:/usr/include/c++/6/bits/stl_map.h ****        *
 819:/usr/include/c++/6/bits/stl_map.h ****        *  @return  A pair, of which the first element is an iterator that 
 820:/usr/include/c++/6/bits/stl_map.h ****        *           points to the possibly inserted pair, and the second is 
 821:/usr/include/c++/6/bits/stl_map.h ****        *           a bool that is true if the pair was actually inserted.
 822:/usr/include/c++/6/bits/stl_map.h ****        *
 823:/usr/include/c++/6/bits/stl_map.h ****        *  This function attempts to insert a (key, value) %pair into the %map.
 824:/usr/include/c++/6/bits/stl_map.h ****        *  A %map relies on unique keys and thus a %pair is only inserted if its
 825:/usr/include/c++/6/bits/stl_map.h ****        *  first element (the key) is not already present in the %map.
 826:/usr/include/c++/6/bits/stl_map.h ****        *  If the %pair was already in the %map, the .second of the %pair
 827:/usr/include/c++/6/bits/stl_map.h ****        *  is assigned from __obj.
 828:/usr/include/c++/6/bits/stl_map.h ****        *
 829:/usr/include/c++/6/bits/stl_map.h ****        *  Insertion requires logarithmic time.
 830:/usr/include/c++/6/bits/stl_map.h ****        */
 831:/usr/include/c++/6/bits/stl_map.h ****       template <typename _Obj>
 832:/usr/include/c++/6/bits/stl_map.h ****         pair<iterator, bool>
 833:/usr/include/c++/6/bits/stl_map.h ****         insert_or_assign(const key_type& __k, _Obj&& __obj)
 834:/usr/include/c++/6/bits/stl_map.h ****         {
 835:/usr/include/c++/6/bits/stl_map.h ****           iterator __i = lower_bound(__k);
 836:/usr/include/c++/6/bits/stl_map.h ****           if (__i == end() || key_comp()(__k, (*__i).first))
 837:/usr/include/c++/6/bits/stl_map.h ****             {
 838:/usr/include/c++/6/bits/stl_map.h ****               __i = emplace_hint(__i, std::piecewise_construct,
 839:/usr/include/c++/6/bits/stl_map.h ****                                  std::forward_as_tuple(__k),
 840:/usr/include/c++/6/bits/stl_map.h ****                                  std::forward_as_tuple(
 841:/usr/include/c++/6/bits/stl_map.h ****                                    std::forward<_Obj>(__obj)));
 842:/usr/include/c++/6/bits/stl_map.h ****               return {__i, true};
 843:/usr/include/c++/6/bits/stl_map.h ****             }
 844:/usr/include/c++/6/bits/stl_map.h ****           (*__i).second = std::forward<_Obj>(__obj);
 845:/usr/include/c++/6/bits/stl_map.h ****           return {__i, false};
 846:/usr/include/c++/6/bits/stl_map.h ****         }
 847:/usr/include/c++/6/bits/stl_map.h **** 
 848:/usr/include/c++/6/bits/stl_map.h ****       // move-capable overload
 849:/usr/include/c++/6/bits/stl_map.h ****       template <typename _Obj>
 850:/usr/include/c++/6/bits/stl_map.h ****         pair<iterator, bool>
 851:/usr/include/c++/6/bits/stl_map.h ****         insert_or_assign(key_type&& __k, _Obj&& __obj)
 852:/usr/include/c++/6/bits/stl_map.h ****         {
 853:/usr/include/c++/6/bits/stl_map.h ****           iterator __i = lower_bound(__k);
 854:/usr/include/c++/6/bits/stl_map.h ****           if (__i == end() || key_comp()(__k, (*__i).first))
 855:/usr/include/c++/6/bits/stl_map.h ****             {
 856:/usr/include/c++/6/bits/stl_map.h ****               __i = emplace_hint(__i, std::piecewise_construct,
 857:/usr/include/c++/6/bits/stl_map.h ****                                  std::forward_as_tuple(std::move(__k)),
 858:/usr/include/c++/6/bits/stl_map.h ****                                  std::forward_as_tuple(
GAS LISTING /tmp/ccvmoMuv.s 			page 477


 859:/usr/include/c++/6/bits/stl_map.h ****                                    std::forward<_Obj>(__obj)));
 860:/usr/include/c++/6/bits/stl_map.h ****               return {__i, true};
 861:/usr/include/c++/6/bits/stl_map.h ****             }
 862:/usr/include/c++/6/bits/stl_map.h ****           (*__i).second = std::forward<_Obj>(__obj);
 863:/usr/include/c++/6/bits/stl_map.h ****           return {__i, false};
 864:/usr/include/c++/6/bits/stl_map.h ****         }
 865:/usr/include/c++/6/bits/stl_map.h **** 
 866:/usr/include/c++/6/bits/stl_map.h ****       /**
 867:/usr/include/c++/6/bits/stl_map.h ****        *  @brief Attempts to insert or assign a std::pair into the %map.
 868:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __hint  An iterator that serves as a hint as to where the
 869:/usr/include/c++/6/bits/stl_map.h ****        *                  pair should be inserted.
 870:/usr/include/c++/6/bits/stl_map.h ****        *  @param __k    Key to use for finding a possibly existing pair in
 871:/usr/include/c++/6/bits/stl_map.h ****        *                the map.
 872:/usr/include/c++/6/bits/stl_map.h ****        *  @param __obj  Argument used to generate the .second for a pair 
 873:/usr/include/c++/6/bits/stl_map.h ****        *                instance.
 874:/usr/include/c++/6/bits/stl_map.h ****        *
 875:/usr/include/c++/6/bits/stl_map.h ****        *  @return An iterator that points to the element with key of
 876:/usr/include/c++/6/bits/stl_map.h ****        *           @a __x (may or may not be the %pair passed in).
 877:/usr/include/c++/6/bits/stl_map.h ****        *
 878:/usr/include/c++/6/bits/stl_map.h ****        *  This function attempts to insert a (key, value) %pair into the %map.
 879:/usr/include/c++/6/bits/stl_map.h ****        *  A %map relies on unique keys and thus a %pair is only inserted if its
 880:/usr/include/c++/6/bits/stl_map.h ****        *  first element (the key) is not already present in the %map.
 881:/usr/include/c++/6/bits/stl_map.h ****        *  If the %pair was already in the %map, the .second of the %pair
 882:/usr/include/c++/6/bits/stl_map.h ****        *  is assigned from __obj.
 883:/usr/include/c++/6/bits/stl_map.h ****        *
 884:/usr/include/c++/6/bits/stl_map.h ****        *  Insertion requires logarithmic time.
 885:/usr/include/c++/6/bits/stl_map.h ****        */
 886:/usr/include/c++/6/bits/stl_map.h ****       template <typename _Obj>
 887:/usr/include/c++/6/bits/stl_map.h ****         iterator
 888:/usr/include/c++/6/bits/stl_map.h ****         insert_or_assign(const_iterator __hint,
 889:/usr/include/c++/6/bits/stl_map.h ****                          const key_type& __k, _Obj&& __obj)
 890:/usr/include/c++/6/bits/stl_map.h ****         {
 891:/usr/include/c++/6/bits/stl_map.h ****           iterator __i;
 892:/usr/include/c++/6/bits/stl_map.h ****           auto __true_hint = _M_t._M_get_insert_hint_unique_pos(__hint, __k);
 893:/usr/include/c++/6/bits/stl_map.h ****           if (__true_hint.second)
 894:/usr/include/c++/6/bits/stl_map.h ****             {
 895:/usr/include/c++/6/bits/stl_map.h ****               return emplace_hint(iterator(__true_hint.second),
 896:/usr/include/c++/6/bits/stl_map.h ****                                   std::piecewise_construct,
 897:/usr/include/c++/6/bits/stl_map.h ****                                   std::forward_as_tuple(__k),
 898:/usr/include/c++/6/bits/stl_map.h ****                                   std::forward_as_tuple(
 899:/usr/include/c++/6/bits/stl_map.h ****                                     std::forward<_Obj>(__obj)));
 900:/usr/include/c++/6/bits/stl_map.h ****             }
 901:/usr/include/c++/6/bits/stl_map.h ****           __i = iterator(__true_hint.first);
 902:/usr/include/c++/6/bits/stl_map.h ****           (*__i).second = std::forward<_Obj>(__obj);
 903:/usr/include/c++/6/bits/stl_map.h ****           return __i;
 904:/usr/include/c++/6/bits/stl_map.h ****         }
 905:/usr/include/c++/6/bits/stl_map.h **** 
 906:/usr/include/c++/6/bits/stl_map.h ****       // move-capable overload
 907:/usr/include/c++/6/bits/stl_map.h ****       template <typename _Obj>
 908:/usr/include/c++/6/bits/stl_map.h ****         iterator
 909:/usr/include/c++/6/bits/stl_map.h ****         insert_or_assign(const_iterator __hint, key_type&& __k, _Obj&& __obj)
 910:/usr/include/c++/6/bits/stl_map.h ****         {
 911:/usr/include/c++/6/bits/stl_map.h ****           iterator __i;
 912:/usr/include/c++/6/bits/stl_map.h ****           auto __true_hint = _M_t._M_get_insert_hint_unique_pos(__hint, __k);
 913:/usr/include/c++/6/bits/stl_map.h ****           if (__true_hint.second)
 914:/usr/include/c++/6/bits/stl_map.h ****             {
 915:/usr/include/c++/6/bits/stl_map.h ****               return emplace_hint(iterator(__true_hint.second),
GAS LISTING /tmp/ccvmoMuv.s 			page 478


 916:/usr/include/c++/6/bits/stl_map.h ****                                   std::piecewise_construct,
 917:/usr/include/c++/6/bits/stl_map.h ****                                   std::forward_as_tuple(std::move(__k)),
 918:/usr/include/c++/6/bits/stl_map.h ****                                   std::forward_as_tuple(
 919:/usr/include/c++/6/bits/stl_map.h ****                                     std::forward<_Obj>(__obj)));
 920:/usr/include/c++/6/bits/stl_map.h ****             }
 921:/usr/include/c++/6/bits/stl_map.h ****           __i = iterator(__true_hint.first);
 922:/usr/include/c++/6/bits/stl_map.h ****           (*__i).second = std::forward<_Obj>(__obj);
 923:/usr/include/c++/6/bits/stl_map.h ****           return __i;
 924:/usr/include/c++/6/bits/stl_map.h ****         }
 925:/usr/include/c++/6/bits/stl_map.h **** #endif
 926:/usr/include/c++/6/bits/stl_map.h **** 
 927:/usr/include/c++/6/bits/stl_map.h **** #if __cplusplus >= 201103L
 928:/usr/include/c++/6/bits/stl_map.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 929:/usr/include/c++/6/bits/stl_map.h ****       // DR 130. Associative erase should return an iterator.
 930:/usr/include/c++/6/bits/stl_map.h ****       /**
 931:/usr/include/c++/6/bits/stl_map.h ****        *  @brief Erases an element from a %map.
 932:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __position  An iterator pointing to the element to be erased.
 933:/usr/include/c++/6/bits/stl_map.h ****        *  @return An iterator pointing to the element immediately following
 934:/usr/include/c++/6/bits/stl_map.h ****        *          @a position prior to the element being erased. If no such 
 935:/usr/include/c++/6/bits/stl_map.h ****        *          element exists, end() is returned.
 936:/usr/include/c++/6/bits/stl_map.h ****        *
 937:/usr/include/c++/6/bits/stl_map.h ****        *  This function erases an element, pointed to by the given
 938:/usr/include/c++/6/bits/stl_map.h ****        *  iterator, from a %map.  Note that this function only erases
 939:/usr/include/c++/6/bits/stl_map.h ****        *  the element, and that if the element is itself a pointer,
 940:/usr/include/c++/6/bits/stl_map.h ****        *  the pointed-to memory is not touched in any way.  Managing
 941:/usr/include/c++/6/bits/stl_map.h ****        *  the pointer is the user's responsibility.
 942:/usr/include/c++/6/bits/stl_map.h ****        */
 943:/usr/include/c++/6/bits/stl_map.h ****       iterator
 944:/usr/include/c++/6/bits/stl_map.h ****       erase(const_iterator __position)
 945:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t.erase(__position); }
 946:/usr/include/c++/6/bits/stl_map.h **** 
 947:/usr/include/c++/6/bits/stl_map.h ****       // LWG 2059
 948:/usr/include/c++/6/bits/stl_map.h ****       _GLIBCXX_ABI_TAG_CXX11
 949:/usr/include/c++/6/bits/stl_map.h ****       iterator
 950:/usr/include/c++/6/bits/stl_map.h ****       erase(iterator __position)
 951:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t.erase(__position); }
 952:/usr/include/c++/6/bits/stl_map.h **** #else
 953:/usr/include/c++/6/bits/stl_map.h ****       /**
 954:/usr/include/c++/6/bits/stl_map.h ****        *  @brief Erases an element from a %map.
 955:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __position  An iterator pointing to the element to be erased.
 956:/usr/include/c++/6/bits/stl_map.h ****        *
 957:/usr/include/c++/6/bits/stl_map.h ****        *  This function erases an element, pointed to by the given
 958:/usr/include/c++/6/bits/stl_map.h ****        *  iterator, from a %map.  Note that this function only erases
 959:/usr/include/c++/6/bits/stl_map.h ****        *  the element, and that if the element is itself a pointer,
 960:/usr/include/c++/6/bits/stl_map.h ****        *  the pointed-to memory is not touched in any way.  Managing
 961:/usr/include/c++/6/bits/stl_map.h ****        *  the pointer is the user's responsibility.
 962:/usr/include/c++/6/bits/stl_map.h ****        */
 963:/usr/include/c++/6/bits/stl_map.h ****       void
 964:/usr/include/c++/6/bits/stl_map.h ****       erase(iterator __position)
 965:/usr/include/c++/6/bits/stl_map.h ****       { _M_t.erase(__position); }
 966:/usr/include/c++/6/bits/stl_map.h **** #endif
 967:/usr/include/c++/6/bits/stl_map.h **** 
 968:/usr/include/c++/6/bits/stl_map.h ****       /**
 969:/usr/include/c++/6/bits/stl_map.h ****        *  @brief Erases elements according to the provided key.
 970:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __x  Key of element to be erased.
 971:/usr/include/c++/6/bits/stl_map.h ****        *  @return  The number of elements erased.
 972:/usr/include/c++/6/bits/stl_map.h ****        *
GAS LISTING /tmp/ccvmoMuv.s 			page 479


 973:/usr/include/c++/6/bits/stl_map.h ****        *  This function erases all the elements located by the given key from
 974:/usr/include/c++/6/bits/stl_map.h ****        *  a %map.
 975:/usr/include/c++/6/bits/stl_map.h ****        *  Note that this function only erases the element, and that if
 976:/usr/include/c++/6/bits/stl_map.h ****        *  the element is itself a pointer, the pointed-to memory is not touched
 977:/usr/include/c++/6/bits/stl_map.h ****        *  in any way.  Managing the pointer is the user's responsibility.
 978:/usr/include/c++/6/bits/stl_map.h ****        */
 979:/usr/include/c++/6/bits/stl_map.h ****       size_type
 980:/usr/include/c++/6/bits/stl_map.h ****       erase(const key_type& __x)
 981:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t.erase(__x); }
 982:/usr/include/c++/6/bits/stl_map.h **** 
 983:/usr/include/c++/6/bits/stl_map.h **** #if __cplusplus >= 201103L
 984:/usr/include/c++/6/bits/stl_map.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 985:/usr/include/c++/6/bits/stl_map.h ****       // DR 130. Associative erase should return an iterator.
 986:/usr/include/c++/6/bits/stl_map.h ****       /**
 987:/usr/include/c++/6/bits/stl_map.h ****        *  @brief Erases a [first,last) range of elements from a %map.
 988:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __first  Iterator pointing to the start of the range to be
 989:/usr/include/c++/6/bits/stl_map.h ****        *                   erased.
 990:/usr/include/c++/6/bits/stl_map.h ****        *  @param __last Iterator pointing to the end of the range to
 991:/usr/include/c++/6/bits/stl_map.h ****        *                be erased.
 992:/usr/include/c++/6/bits/stl_map.h ****        *  @return The iterator @a __last.
 993:/usr/include/c++/6/bits/stl_map.h ****        *
 994:/usr/include/c++/6/bits/stl_map.h ****        *  This function erases a sequence of elements from a %map.
 995:/usr/include/c++/6/bits/stl_map.h ****        *  Note that this function only erases the element, and that if
 996:/usr/include/c++/6/bits/stl_map.h ****        *  the element is itself a pointer, the pointed-to memory is not touched
 997:/usr/include/c++/6/bits/stl_map.h ****        *  in any way.  Managing the pointer is the user's responsibility.
 998:/usr/include/c++/6/bits/stl_map.h ****        */
 999:/usr/include/c++/6/bits/stl_map.h ****       iterator
1000:/usr/include/c++/6/bits/stl_map.h ****       erase(const_iterator __first, const_iterator __last)
1001:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t.erase(__first, __last); }
1002:/usr/include/c++/6/bits/stl_map.h **** #else
1003:/usr/include/c++/6/bits/stl_map.h ****       /**
1004:/usr/include/c++/6/bits/stl_map.h ****        *  @brief Erases a [__first,__last) range of elements from a %map.
1005:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __first  Iterator pointing to the start of the range to be
1006:/usr/include/c++/6/bits/stl_map.h ****        *                   erased.
1007:/usr/include/c++/6/bits/stl_map.h ****        *  @param __last Iterator pointing to the end of the range to
1008:/usr/include/c++/6/bits/stl_map.h ****        *                be erased.
1009:/usr/include/c++/6/bits/stl_map.h ****        *
1010:/usr/include/c++/6/bits/stl_map.h ****        *  This function erases a sequence of elements from a %map.
1011:/usr/include/c++/6/bits/stl_map.h ****        *  Note that this function only erases the element, and that if
1012:/usr/include/c++/6/bits/stl_map.h ****        *  the element is itself a pointer, the pointed-to memory is not touched
1013:/usr/include/c++/6/bits/stl_map.h ****        *  in any way.  Managing the pointer is the user's responsibility.
1014:/usr/include/c++/6/bits/stl_map.h ****        */
1015:/usr/include/c++/6/bits/stl_map.h ****       void
1016:/usr/include/c++/6/bits/stl_map.h ****       erase(iterator __first, iterator __last)
1017:/usr/include/c++/6/bits/stl_map.h ****       { _M_t.erase(__first, __last); }
1018:/usr/include/c++/6/bits/stl_map.h **** #endif
1019:/usr/include/c++/6/bits/stl_map.h **** 
1020:/usr/include/c++/6/bits/stl_map.h ****       /**
1021:/usr/include/c++/6/bits/stl_map.h ****        *  @brief  Swaps data with another %map.
1022:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __x  A %map of the same element and allocator types.
1023:/usr/include/c++/6/bits/stl_map.h ****        *
1024:/usr/include/c++/6/bits/stl_map.h ****        *  This exchanges the elements between two maps in constant
1025:/usr/include/c++/6/bits/stl_map.h ****        *  time.  (It is only swapping a pointer, an integer, and an
1026:/usr/include/c++/6/bits/stl_map.h ****        *  instance of the @c Compare type (which itself is often
1027:/usr/include/c++/6/bits/stl_map.h ****        *  stateless and empty), so it should be quite fast.)  Note
1028:/usr/include/c++/6/bits/stl_map.h ****        *  that the global std::swap() function is specialized such
1029:/usr/include/c++/6/bits/stl_map.h ****        *  that std::swap(m1,m2) will feed to this function.
GAS LISTING /tmp/ccvmoMuv.s 			page 480


1030:/usr/include/c++/6/bits/stl_map.h ****        */
1031:/usr/include/c++/6/bits/stl_map.h ****       void
1032:/usr/include/c++/6/bits/stl_map.h ****       swap(map& __x)
1033:/usr/include/c++/6/bits/stl_map.h ****       _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Compare>::value)
1034:/usr/include/c++/6/bits/stl_map.h ****       { _M_t.swap(__x._M_t); }
1035:/usr/include/c++/6/bits/stl_map.h **** 
1036:/usr/include/c++/6/bits/stl_map.h ****       /**
1037:/usr/include/c++/6/bits/stl_map.h ****        *  Erases all elements in a %map.  Note that this function only
1038:/usr/include/c++/6/bits/stl_map.h ****        *  erases the elements, and that if the elements themselves are
1039:/usr/include/c++/6/bits/stl_map.h ****        *  pointers, the pointed-to memory is not touched in any way.
1040:/usr/include/c++/6/bits/stl_map.h ****        *  Managing the pointer is the user's responsibility.
1041:/usr/include/c++/6/bits/stl_map.h ****        */
1042:/usr/include/c++/6/bits/stl_map.h ****       void
1043:/usr/include/c++/6/bits/stl_map.h ****       clear() _GLIBCXX_NOEXCEPT
1044:/usr/include/c++/6/bits/stl_map.h ****       { _M_t.clear(); }
1045:/usr/include/c++/6/bits/stl_map.h **** 
1046:/usr/include/c++/6/bits/stl_map.h ****       // observers
1047:/usr/include/c++/6/bits/stl_map.h ****       /**
1048:/usr/include/c++/6/bits/stl_map.h ****        *  Returns the key comparison object out of which the %map was
1049:/usr/include/c++/6/bits/stl_map.h ****        *  constructed.
1050:/usr/include/c++/6/bits/stl_map.h ****        */
1051:/usr/include/c++/6/bits/stl_map.h ****       key_compare
1052:/usr/include/c++/6/bits/stl_map.h ****       key_comp() const
1053:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t.key_comp(); }
1054:/usr/include/c++/6/bits/stl_map.h **** 
1055:/usr/include/c++/6/bits/stl_map.h ****       /**
1056:/usr/include/c++/6/bits/stl_map.h ****        *  Returns a value comparison object, built from the key comparison
1057:/usr/include/c++/6/bits/stl_map.h ****        *  object out of which the %map was constructed.
1058:/usr/include/c++/6/bits/stl_map.h ****        */
1059:/usr/include/c++/6/bits/stl_map.h ****       value_compare
1060:/usr/include/c++/6/bits/stl_map.h ****       value_comp() const
1061:/usr/include/c++/6/bits/stl_map.h ****       { return value_compare(_M_t.key_comp()); }
1062:/usr/include/c++/6/bits/stl_map.h **** 
1063:/usr/include/c++/6/bits/stl_map.h ****       // [23.3.1.3] map operations
1064:/usr/include/c++/6/bits/stl_map.h **** 
1065:/usr/include/c++/6/bits/stl_map.h ****       //@{
1066:/usr/include/c++/6/bits/stl_map.h ****       /**
1067:/usr/include/c++/6/bits/stl_map.h ****        *  @brief Tries to locate an element in a %map.
1068:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __x  Key of (key, value) %pair to be located.
1069:/usr/include/c++/6/bits/stl_map.h ****        *  @return  Iterator pointing to sought-after element, or end() if not
1070:/usr/include/c++/6/bits/stl_map.h ****        *           found.
1071:/usr/include/c++/6/bits/stl_map.h ****        *
1072:/usr/include/c++/6/bits/stl_map.h ****        *  This function takes a key and tries to locate the element with which
1073:/usr/include/c++/6/bits/stl_map.h ****        *  the key matches.  If successful the function returns an iterator
1074:/usr/include/c++/6/bits/stl_map.h ****        *  pointing to the sought after %pair.  If unsuccessful it returns the
1075:/usr/include/c++/6/bits/stl_map.h ****        *  past-the-end ( @c end() ) iterator.
1076:/usr/include/c++/6/bits/stl_map.h ****        */
1077:/usr/include/c++/6/bits/stl_map.h **** 
1078:/usr/include/c++/6/bits/stl_map.h ****       iterator
1079:/usr/include/c++/6/bits/stl_map.h ****       find(const key_type& __x)
1080:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t.find(__x); }
 6576              		.loc 36 1080 0
 6577 0004 488D7F18 		leaq	24(%rdi), %rdi
 6578              	.LVL589:
 6579              	.LBE14783:
 6580              	.LBE14782:
 6581              	.LBB14785:
GAS LISTING /tmp/ccvmoMuv.s 			page 481


 6582              	.LBB14786:
 6583              	.LBB14787:
 893:/usr/include/c++/6/bits/stl_tree.h **** 
 6584              		.loc 19 893 0
 6585 0008 4883C320 		addq	$32, %rbx
 6586              	.LVL590:
 6587              	.LBE14787:
 6588              	.LBE14786:
 6589              	.LBE14785:
 6590              	.LBB14788:
 6591              	.LBB14784:
 6592              		.loc 36 1080 0
 6593 000c E8000000 		call	_ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFvS4_EEEESt1
 6593      00
 6594              	.LVL591:
 6595              	.LBE14784:
 6596              	.LBE14788:
 6597              	.LBB14789:
 6598              	.LBB14790:
 242:/usr/include/c++/6/bits/stl_tree.h **** 
 6599              		.loc 19 242 0
 6600 0011 4839D8   		cmpq	%rbx, %rax
 6601 0014 0F95C0   		setne	%al
 6602              	.LBE14790:
 6603              	.LBE14789:
 122:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 6604              		.loc 2 122 0
 6605 0017 5B       		popq	%rbx
 6606              		.cfi_def_cfa_offset 8
 6607              	.LVL592:
 6608 0018 C3       		ret
 6609              		.cfi_endproc
 6610              	.LFE8679:
 6612              		.section	.text._ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrIN
 6613              		.align 2
 6614              		.p2align 4,,15
 6615              		.weak	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15erro
 6617              	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error_info_
 6618              	.LFB12933:
1632:/usr/include/c++/6/bits/stl_tree.h ****     _M_erase(_Link_type __x)
 6619              		.loc 19 1632 0
 6620              		.cfi_startproc
 6621              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 6622              		.cfi_lsda 0x1b,.LLSDA12933
 6623              	.LVL593:
1636:/usr/include/c++/6/bits/stl_tree.h **** 	{
 6624              		.loc 19 1636 0
 6625 0000 4885F6   		testq	%rsi, %rsi
 6626 0003 0F84A500 		je	.L397
 6626      0000
1632:/usr/include/c++/6/bits/stl_tree.h ****     _M_erase(_Link_type __x)
 6627              		.loc 19 1632 0
 6628 0009 4157     		pushq	%r15
 6629              		.cfi_def_cfa_offset 16
 6630              		.cfi_offset 15, -16
 6631 000b 4156     		pushq	%r14
 6632              		.cfi_def_cfa_offset 24
GAS LISTING /tmp/ccvmoMuv.s 			page 482


 6633              		.cfi_offset 14, -24
 6634 000d 4C8D3D00 		leaq	_ZN5boost6detail15sp_counted_base7destroyEv(%rip), %r15
 6634      000000
 6635 0014 4155     		pushq	%r13
 6636              		.cfi_def_cfa_offset 32
 6637              		.cfi_offset 13, -32
 6638 0016 4154     		pushq	%r12
 6639              		.cfi_def_cfa_offset 40
 6640              		.cfi_offset 12, -40
 6641 0018 4989FE   		movq	%rdi, %r14
 6642 001b 55       		pushq	%rbp
 6643              		.cfi_def_cfa_offset 48
 6644              		.cfi_offset 6, -48
 6645 001c 53       		pushq	%rbx
 6646              		.cfi_def_cfa_offset 56
 6647              		.cfi_offset 3, -56
 6648 001d 41BDFFFF 		movl	$-1, %r13d
 6648      FFFF
 6649 0023 4889F3   		movq	%rsi, %rbx
 6650 0026 4883EC08 		subq	$8, %rsp
 6651              		.cfi_def_cfa_offset 64
 6652 002a EB14     		jmp	.L392
 6653              	.LVL594:
 6654 002c 0F1F4000 		.p2align 4,,10
 6655              		.p2align 3
 6656              	.L384:
 6657              	.LBB14820:
 6658              	.LBB14821:
 6659              	.LBB14822:
 6660              	.LBB14823:
 6661              	.LBB14824:
 6662              	.LBB14825:
 6663              		.loc 12 110 0
 6664 0030 4889DF   		movq	%rbx, %rdi
 6665 0033 4C89E3   		movq	%r12, %rbx
 6666              	.LVL595:
 6667 0036 E8000000 		call	_ZdlPv@PLT
 6667      00
 6668              	.LVL596:
 6669              	.LBE14825:
 6670              	.LBE14824:
 6671              	.LBE14823:
 6672              	.LBE14822:
 6673              	.LBE14821:
 6674              	.LBE14820:
1636:/usr/include/c++/6/bits/stl_tree.h **** 	{
 6675              		.loc 19 1636 0
 6676 003b 4D85E4   		testq	%r12, %r12
 6677 003e 7460     		je	.L398
 6678              	.LVL597:
 6679              	.L392:
 6680              	.LBB14866:
1638:/usr/include/c++/6/bits/stl_tree.h **** 	  _Link_type __y = _S_left(__x);
 6681              		.loc 19 1638 0
 6682 0040 488B7318 		movq	24(%rbx), %rsi
 6683 0044 4C89F7   		movq	%r14, %rdi
 6684 0047 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
GAS LISTING /tmp/ccvmoMuv.s 			page 483


 6684      00
 6685              	.LVL598:
 6686              	.LBB14864:
 6687              	.LBB14829:
 6688              	.LBB14830:
 6689              	.LBB14831:
 6690              	.LBB14832:
 6691              	.LBB14833:
 6692              	.LBB14834:
 6693              	.LBB14835:
 473:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 6694              		.loc 28 473 0
 6695 004c 488B6B30 		movq	48(%rbx), %rbp
 6696 0050 4C8B6310 		movq	16(%rbx), %r12
 6697              	.LVL599:
 6698 0054 4885ED   		testq	%rbp, %rbp
 6699 0057 74D7     		je	.L384
 6700              	.LVL600:
 6701              	.LBB14836:
 6702              	.LBB14837:
 6703              	.LBB14838:
 6704              	.LBB14839:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 6705              		.loc 1 50 0
 6706 0059 4489E8   		movl	%r13d, %eax
 6707              	#APP
 6708              	# 50 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 6709              		lock
 6710              		xadd %eax, 8(%rbp)
 6711              	# 0 "" 2
 6712              	.LVL601:
 6713              	#NO_APP
 6714              	.LBE14839:
 6715              	.LBE14838:
 144:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
 6716              		.loc 1 144 0
 6717 0061 83F801   		cmpl	$1, %eax
 6718 0064 75CA     		jne	.L384
 6719              	.LVL602:
 6720              	.LBB14840:
 6721              	.LBB14841:
 146:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****             weak_release();
 6722              		.loc 1 146 0
 6723 0066 488B4500 		movq	0(%rbp), %rax
 6724 006a 4889EF   		movq	%rbp, %rdi
 6725 006d FF5010   		call	*16(%rax)
 6726              	.LVL603:
 6727              	.LBB14842:
 6728              	.LBB14843:
 6729              	.LBB14844:
 6730              	.LBB14845:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 6731              		.loc 1 50 0
 6732 0070 4489E8   		movl	%r13d, %eax
 6733              	#APP
 6734              	# 50 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 6735              		lock
GAS LISTING /tmp/ccvmoMuv.s 			page 484


 6736              		xadd %eax, 12(%rbp)
 6737              	# 0 "" 2
 6738              	.LVL604:
 6739              	#NO_APP
 6740              	.LBE14845:
 6741              	.LBE14844:
 158:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
 6742              		.loc 1 158 0
 6743 0078 83F801   		cmpl	$1, %eax
 6744 007b 75B3     		jne	.L384
 6745              		.loc 1 160 0
 6746 007d 488B4500 		movq	0(%rbp), %rax
 6747              	.LBB14846:
 6748              	.LBB14847:
 126:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     }
 6749              		.loc 1 126 0
 6750 0081 4889EF   		movq	%rbp, %rdi
 6751              	.LBE14847:
 6752              	.LBE14846:
 6753              		.loc 1 160 0
 6754 0084 488B5018 		movq	24(%rax), %rdx
 6755 0088 4C39FA   		cmpq	%r15, %rdx
 6756 008b 7523     		jne	.L386
 6757              	.LBB14849:
 6758              	.LBB14848:
 126:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     }
 6759              		.loc 1 126 0
 6760 008d FF5008   		call	*8(%rax)
 6761              	.LVL605:
 6762              	.LBE14848:
 6763              	.LBE14849:
 6764              	.LBE14843:
 6765              	.LBE14842:
 6766              	.LBE14841:
 6767              	.LBE14840:
 6768              	.LBE14837:
 6769              	.LBE14836:
 6770              	.LBE14835:
 6771              	.LBE14834:
 6772              	.LBE14833:
 6773              	.LBE14832:
 6774              	.LBE14831:
 6775              	.LBE14830:
 6776              	.LBE14829:
 6777              	.LBB14862:
 6778              	.LBB14828:
 6779              	.LBB14827:
 6780              	.LBB14826:
 6781              		.loc 12 110 0
 6782 0090 4889DF   		movq	%rbx, %rdi
 6783 0093 4C89E3   		movq	%r12, %rbx
 6784              	.LVL606:
 6785 0096 E8000000 		call	_ZdlPv@PLT
 6785      00
 6786              	.LVL607:
 6787              	.LBE14826:
 6788              	.LBE14827:
GAS LISTING /tmp/ccvmoMuv.s 			page 485


 6789              	.LBE14828:
 6790              	.LBE14862:
 6791              	.LBE14864:
 6792              	.LBE14866:
1636:/usr/include/c++/6/bits/stl_tree.h **** 	{
 6793              		.loc 19 1636 0
 6794 009b 4D85E4   		testq	%r12, %r12
 6795 009e 75A0     		jne	.L392
 6796              	.LVL608:
 6797              		.p2align 4,,10
 6798              		.p2align 3
 6799              	.L398:
1643:/usr/include/c++/6/bits/stl_tree.h **** 
 6800              		.loc 19 1643 0
 6801 00a0 4883C408 		addq	$8, %rsp
 6802              		.cfi_def_cfa_offset 56
 6803 00a4 5B       		popq	%rbx
 6804              		.cfi_restore 3
 6805              		.cfi_def_cfa_offset 48
 6806              	.LVL609:
 6807 00a5 5D       		popq	%rbp
 6808              		.cfi_restore 6
 6809              		.cfi_def_cfa_offset 40
 6810 00a6 415C     		popq	%r12
 6811              		.cfi_restore 12
 6812              		.cfi_def_cfa_offset 32
 6813              	.LVL610:
 6814 00a8 415D     		popq	%r13
 6815              		.cfi_restore 13
 6816              		.cfi_def_cfa_offset 24
 6817 00aa 415E     		popq	%r14
 6818              		.cfi_restore 14
 6819              		.cfi_def_cfa_offset 16
 6820              	.LVL611:
 6821 00ac 415F     		popq	%r15
 6822              		.cfi_restore 15
 6823              		.cfi_def_cfa_offset 8
 6824              	.LVL612:
 6825              	.L397:
 6826 00ae F3C3     		rep ret
 6827              	.LVL613:
 6828              	.L386:
 6829              		.cfi_def_cfa_offset 64
 6830              		.cfi_offset 3, -56
 6831              		.cfi_offset 6, -48
 6832              		.cfi_offset 12, -40
 6833              		.cfi_offset 13, -32
 6834              		.cfi_offset 14, -24
 6835              		.cfi_offset 15, -16
 6836              	.LBB14867:
 6837              	.LBB14865:
 6838              	.LBB14863:
 6839              	.LBB14861:
 6840              	.LBB14860:
 6841              	.LBB14859:
 6842              	.LBB14858:
 6843              	.LBB14857:
GAS LISTING /tmp/ccvmoMuv.s 			page 486


 6844              	.LBB14856:
 6845              	.LBB14855:
 6846              	.LBB14854:
 6847              	.LBB14853:
 6848              	.LBB14852:
 6849              	.LBB14851:
 6850              	.LBB14850:
 6851              		.loc 1 160 0
 6852 00b0 FFD2     		call	*%rdx
 6853              	.LVL614:
 6854 00b2 E979FFFF 		jmp	.L384
 6854      FF
 6855              	.LBE14850:
 6856              	.LBE14851:
 6857              	.LBE14852:
 6858              	.LBE14853:
 6859              	.LBE14854:
 6860              	.LBE14855:
 6861              	.LBE14856:
 6862              	.LBE14857:
 6863              	.LBE14858:
 6864              	.LBE14859:
 6865              	.LBE14860:
 6866              	.LBE14861:
 6867              	.LBE14863:
 6868              	.LBE14865:
 6869              	.LBE14867:
 6870              		.cfi_endproc
 6871              	.LFE12933:
 6872              		.section	.gcc_except_table
 6873              	.LLSDA12933:
 6874 005b FF       		.byte	0xff
 6875 005c FF       		.byte	0xff
 6876 005d 01       		.byte	0x1
 6877 005e 00       		.uleb128 .LLSDACSE12933-.LLSDACSB12933
 6878              	.LLSDACSB12933:
 6879              	.LLSDACSE12933:
 6880              		.section	.text._ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrIN
 6882              		.section	.text._ZNK5boost16exception_detail25error_info_container_impl7releaseEv,"axG",@progbits,_
 6883              		.align 2
 6884              		.p2align 4,,15
 6885              		.weak	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv
 6887              	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv:
 6888              	.LFB9853:
 163:/usr/include/boost/exception/info.hpp ****                 }
 164:/usr/include/boost/exception/info.hpp **** 
 165:/usr/include/boost/exception/info.hpp ****             bool
 166:/usr/include/boost/exception/info.hpp ****             release() const
 6889              		.loc 3 166 0
 6890              		.cfi_startproc
 6891              	.LVL615:
 167:/usr/include/boost/exception/info.hpp ****                 {
 168:/usr/include/boost/exception/info.hpp ****                 if( --count_ )
 6892              		.loc 3 168 0
 6893 0000 8B4758   		movl	88(%rdi), %eax
 6894 0003 8D50FF   		leal	-1(%rax), %edx
 6895 0006 85D2     		testl	%edx, %edx
GAS LISTING /tmp/ccvmoMuv.s 			page 487


 6896 0008 895758   		movl	%edx, 88(%rdi)
 6897 000b 7403     		je	.L408
 6898 000d 31C0     		xorl	%eax, %eax
 6899 000f C3       		ret
 6900              		.p2align 4,,10
 6901              		.p2align 3
 6902              	.L408:
 6903              	.LBB14894:
 6904              	.LBB14895:
 104:/usr/include/boost/exception/info.hpp ****                 }
 6905              		.loc 3 104 0
 6906 0010 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 6906      000000
 6907              	.LBE14895:
 6908              	.LBE14894:
 166:/usr/include/boost/exception/info.hpp ****                 {
 6909              		.loc 3 166 0
 6910 0017 53       		pushq	%rbx
 6911              		.cfi_def_cfa_offset 16
 6912              		.cfi_offset 3, -16
 6913 0018 4889FB   		movq	%rdi, %rbx
 6914              	.LVL616:
 6915              	.LBB14913:
 6916              	.LBB14912:
 104:/usr/include/boost/exception/info.hpp ****                 }
 6917              		.loc 3 104 0
 6918 001b 488907   		movq	%rax, (%rdi)
 6919              	.LVL617:
 6920 001e 488B7F38 		movq	56(%rdi), %rdi
 6921              	.LVL618:
 6922              	.LBB14896:
 6923              	.LBB14897:
 6924              	.LBB14898:
 6925              	.LBB14899:
 6926              	.LBB14900:
 6927              	.LBB14901:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 6928              		.loc 10 152 0
 6929 0022 488D4348 		leaq	72(%rbx), %rax
 6930              	.LBE14901:
 6931              	.LBE14900:
 6932              	.LBE14899:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 6933              		.loc 10 180 0
 6934 0026 4839C7   		cmpq	%rax, %rdi
 6935 0029 7405     		je	.L401
 6936              	.LVL619:
 6937              	.LBB14902:
 6938              	.LBB14903:
 6939              	.LBB14904:
 6940              	.LBB14905:
 6941              		.loc 12 110 0
 6942 002b E8000000 		call	_ZdlPv@PLT
 6942      00
 6943              	.LVL620:
 6944              	.L401:
 6945              	.LBE14905:
GAS LISTING /tmp/ccvmoMuv.s 			page 488


 6946              	.LBE14904:
 6947              	.LBE14903:
 6948              	.LBE14902:
 6949              	.LBE14898:
 6950              	.LBE14897:
 6951              	.LBE14896:
 6952              	.LBB14906:
 6953              	.LBB14907:
 6954              	.LBB14908:
 6955              	.LBB14909:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 6956              		.loc 19 873 0
 6957 0030 488B7318 		movq	24(%rbx), %rsi
 6958              	.LBE14909:
 6959              	.LBE14908:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 6960              		.loc 36 96 0
 6961 0034 488D7B08 		leaq	8(%rbx), %rdi
 6962              	.LVL621:
 6963              	.LBB14911:
 6964              	.LBB14910:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 6965              		.loc 19 873 0
 6966 0038 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 6966      00
 6967              	.LVL622:
 6968              	.LBE14910:
 6969              	.LBE14911:
 6970              	.LBE14907:
 6971              	.LBE14906:
 6972              	.LBE14912:
 6973              	.LBE14913:
 169:/usr/include/boost/exception/info.hpp ****                     return false;
 170:/usr/include/boost/exception/info.hpp ****                 else
 171:/usr/include/boost/exception/info.hpp ****                     {
 172:/usr/include/boost/exception/info.hpp ****                     delete this;
 6974              		.loc 3 172 0
 6975 003d 4889DF   		movq	%rbx, %rdi
 6976 0040 BE600000 		movl	$96, %esi
 6976      00
 6977 0045 E8000000 		call	_ZdlPvm@PLT
 6977      00
 6978              	.LVL623:
 173:/usr/include/boost/exception/info.hpp ****                     return true;
 6979              		.loc 3 173 0
 6980 004a B8010000 		movl	$1, %eax
 6980      00
 174:/usr/include/boost/exception/info.hpp ****                     }
 175:/usr/include/boost/exception/info.hpp ****                 }
 6981              		.loc 3 175 0
 6982 004f 5B       		popq	%rbx
 6983              		.cfi_restore 3
 6984              		.cfi_def_cfa_offset 8
 6985              	.LVL624:
 6986 0050 C3       		ret
 6987              		.cfi_endproc
 6988              	.LFE9853:
GAS LISTING /tmp/ccvmoMuv.s 			page 489


 6990              		.section	.text._ZN5boost16exception_detail14bad_exception_D2Ev,"axG",@progbits,_ZN5boost16exceptio
 6991              		.align 2
 6992              		.p2align 4,,15
 6993              		.weak	_ZN5boost16exception_detail14bad_exception_D2Ev
 6995              	_ZN5boost16exception_detail14bad_exception_D2Ev:
 6996              	.LFB9898:
  42:/usr/include/boost/exception/detail/exception_ptr.hpp ****         {
  43:/usr/include/boost/exception/detail/exception_ptr.hpp ****         typedef boost::shared_ptr<exception_detail::clone_base const> impl;
  44:/usr/include/boost/exception/detail/exception_ptr.hpp ****         impl ptr_;
  45:/usr/include/boost/exception/detail/exception_ptr.hpp ****         friend void rethrow_exception( exception_ptr const & );
  46:/usr/include/boost/exception/detail/exception_ptr.hpp ****         typedef exception_detail::clone_base const * (impl::*unspecified_bool_type)() const;
  47:/usr/include/boost/exception/detail/exception_ptr.hpp ****         public:
  48:/usr/include/boost/exception/detail/exception_ptr.hpp ****         exception_ptr()
  49:/usr/include/boost/exception/detail/exception_ptr.hpp ****             {
  50:/usr/include/boost/exception/detail/exception_ptr.hpp ****             }
  51:/usr/include/boost/exception/detail/exception_ptr.hpp ****         explicit
  52:/usr/include/boost/exception/detail/exception_ptr.hpp ****         exception_ptr( impl const & ptr ):
  53:/usr/include/boost/exception/detail/exception_ptr.hpp ****             ptr_(ptr)
  54:/usr/include/boost/exception/detail/exception_ptr.hpp ****             {
  55:/usr/include/boost/exception/detail/exception_ptr.hpp ****             }
  56:/usr/include/boost/exception/detail/exception_ptr.hpp ****         bool
  57:/usr/include/boost/exception/detail/exception_ptr.hpp ****         operator==( exception_ptr const & other ) const
  58:/usr/include/boost/exception/detail/exception_ptr.hpp ****             {
  59:/usr/include/boost/exception/detail/exception_ptr.hpp ****             return ptr_==other.ptr_;
  60:/usr/include/boost/exception/detail/exception_ptr.hpp ****             }
  61:/usr/include/boost/exception/detail/exception_ptr.hpp ****         bool
  62:/usr/include/boost/exception/detail/exception_ptr.hpp ****         operator!=( exception_ptr const & other ) const
  63:/usr/include/boost/exception/detail/exception_ptr.hpp ****             {
  64:/usr/include/boost/exception/detail/exception_ptr.hpp ****             return ptr_!=other.ptr_;
  65:/usr/include/boost/exception/detail/exception_ptr.hpp ****             }
  66:/usr/include/boost/exception/detail/exception_ptr.hpp ****         operator unspecified_bool_type() const
  67:/usr/include/boost/exception/detail/exception_ptr.hpp ****             {
  68:/usr/include/boost/exception/detail/exception_ptr.hpp ****             return ptr_?&impl::get:0;
  69:/usr/include/boost/exception/detail/exception_ptr.hpp ****             }
  70:/usr/include/boost/exception/detail/exception_ptr.hpp ****         };
  71:/usr/include/boost/exception/detail/exception_ptr.hpp **** 
  72:/usr/include/boost/exception/detail/exception_ptr.hpp ****     template <class T>
  73:/usr/include/boost/exception/detail/exception_ptr.hpp ****     inline
  74:/usr/include/boost/exception/detail/exception_ptr.hpp ****     exception_ptr
  75:/usr/include/boost/exception/detail/exception_ptr.hpp ****     copy_exception( T const & e )
  76:/usr/include/boost/exception/detail/exception_ptr.hpp ****         {
  77:/usr/include/boost/exception/detail/exception_ptr.hpp ****         try
  78:/usr/include/boost/exception/detail/exception_ptr.hpp ****             {
  79:/usr/include/boost/exception/detail/exception_ptr.hpp ****             throw enable_current_exception(e);
  80:/usr/include/boost/exception/detail/exception_ptr.hpp ****             }
  81:/usr/include/boost/exception/detail/exception_ptr.hpp ****         catch(
  82:/usr/include/boost/exception/detail/exception_ptr.hpp ****         ... )
  83:/usr/include/boost/exception/detail/exception_ptr.hpp ****             {
  84:/usr/include/boost/exception/detail/exception_ptr.hpp ****             return current_exception();
  85:/usr/include/boost/exception/detail/exception_ptr.hpp ****             }
  86:/usr/include/boost/exception/detail/exception_ptr.hpp ****         }
  87:/usr/include/boost/exception/detail/exception_ptr.hpp **** 
  88:/usr/include/boost/exception/detail/exception_ptr.hpp **** #ifndef BOOST_NO_RTTI
  89:/usr/include/boost/exception/detail/exception_ptr.hpp ****     typedef error_info<struct tag_original_exception_type,std::type_info const *> original_exceptio
  90:/usr/include/boost/exception/detail/exception_ptr.hpp **** 
  91:/usr/include/boost/exception/detail/exception_ptr.hpp ****     inline
  92:/usr/include/boost/exception/detail/exception_ptr.hpp ****     std::string
GAS LISTING /tmp/ccvmoMuv.s 			page 490


  93:/usr/include/boost/exception/detail/exception_ptr.hpp ****     to_string( original_exception_type const & x )
  94:/usr/include/boost/exception/detail/exception_ptr.hpp ****         {
  95:/usr/include/boost/exception/detail/exception_ptr.hpp ****         return core::demangle(x.value()->name());
  96:/usr/include/boost/exception/detail/exception_ptr.hpp ****         }
  97:/usr/include/boost/exception/detail/exception_ptr.hpp **** #endif
  98:/usr/include/boost/exception/detail/exception_ptr.hpp **** 
  99:/usr/include/boost/exception/detail/exception_ptr.hpp ****     namespace
 100:/usr/include/boost/exception/detail/exception_ptr.hpp ****     exception_detail
 101:/usr/include/boost/exception/detail/exception_ptr.hpp ****         {
 102:/usr/include/boost/exception/detail/exception_ptr.hpp ****         struct
 103:/usr/include/boost/exception/detail/exception_ptr.hpp ****         bad_alloc_:
 104:/usr/include/boost/exception/detail/exception_ptr.hpp ****             boost::exception,
 105:/usr/include/boost/exception/detail/exception_ptr.hpp ****             std::bad_alloc
 106:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 {
 107:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 ~bad_alloc_() throw() { }
 108:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 };
 109:/usr/include/boost/exception/detail/exception_ptr.hpp **** 
 110:/usr/include/boost/exception/detail/exception_ptr.hpp ****         struct
 111:/usr/include/boost/exception/detail/exception_ptr.hpp ****         bad_exception_:
 112:/usr/include/boost/exception/detail/exception_ptr.hpp ****             boost::exception,
 113:/usr/include/boost/exception/detail/exception_ptr.hpp ****             std::bad_exception
 114:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 {
 115:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 ~bad_exception_() throw() { }
 6997              		.loc 29 115 0
 6998              		.cfi_startproc
 6999              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 7000              		.cfi_lsda 0x1b,.LLSDA9898
 7001              	.LVL625:
 7002              	.LBB14954:
 7003 0000 488D0500 		leaq	16+_ZTVN5boost16exception_detail14bad_exception_E(%rip), %rax
 7003      000000
 7004              	.LBE14954:
 7005 0007 53       		pushq	%rbx
 7006              		.cfi_def_cfa_offset 16
 7007              		.cfi_offset 3, -16
 7008              		.loc 29 115 0
 7009 0008 4889FB   		movq	%rdi, %rbx
 7010              	.LBB14999:
 7011 000b 4883C728 		addq	$40, %rdi
 7012              	.LVL626:
 7013 000f 488947D8 		movq	%rax, -40(%rdi)
 7014 0013 488D0500 		leaq	48+_ZTVN5boost16exception_detail14bad_exception_E(%rip), %rax
 7014      000000
 7015 001a 488907   		movq	%rax, (%rdi)
 7016 001d E8000000 		call	_ZNSt13bad_exceptionD2Ev@PLT
 7016      00
 7017              	.LVL627:
 7018              	.LBB14955:
 7019              	.LBB14956:
 299:/usr/include/boost/exception/exception.hpp ****         {
 7020              		.loc 7 299 0
 7021 0022 488D0500 		leaq	16+_ZTVN5boost9exceptionE(%rip), %rax
 7021      000000
 7022 0029 488903   		movq	%rax, (%rbx)
 7023              	.LVL628:
 7024              	.LBB14957:
 7025              	.LBB14958:
GAS LISTING /tmp/ccvmoMuv.s 			page 491


 7026              	.LBB14959:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 7027              		.loc 7 78 0
 7028 002c 488B5B08 		movq	8(%rbx), %rbx
 7029              	.LVL629:
 7030 0030 4885DB   		testq	%rbx, %rbx
 7031 0033 7419     		je	.L409
 7032 0035 488B03   		movq	(%rbx), %rax
 7033 0038 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 7033      000000
 7034 003f 488B4020 		movq	32(%rax), %rax
 7035 0043 4839D0   		cmpq	%rdx, %rax
 7036 0046 7548     		jne	.L412
 7037              	.LVL630:
 7038              	.LBB14960:
 7039              	.LBB14961:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 7040              		.loc 3 168 0
 7041 0048 836B5801 		subl	$1, 88(%rbx)
 7042 004c 7402     		je	.L416
 7043              	.LVL631:
 7044              	.L409:
 7045              	.LBE14961:
 7046              	.LBE14960:
 7047              	.LBE14959:
 7048              	.LBE14958:
 7049              	.LBE14957:
 7050              	.LBE14956:
 7051              	.LBE14955:
 7052              	.LBE14999:
 7053              		.loc 29 115 0
 7054 004e 5B       		popq	%rbx
 7055              		.cfi_remember_state
 7056              		.cfi_def_cfa_offset 8
 7057 004f C3       		ret
 7058              	.LVL632:
 7059              		.p2align 4,,10
 7060              		.p2align 3
 7061              	.L416:
 7062              		.cfi_restore_state
 7063              	.LBB15000:
 7064              	.LBB14996:
 7065              	.LBB14993:
 7066              	.LBB14990:
 7067              	.LBB14987:
 7068              	.LBB14984:
 7069              	.LBB14982:
 7070              	.LBB14980:
 7071              	.LBB14962:
 7072              	.LBB14963:
 104:/usr/include/boost/exception/info.hpp ****                 }
 7073              		.loc 3 104 0
 7074 0050 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 7074      000000
 7075 0057 488B7B38 		movq	56(%rbx), %rdi
 7076 005b 488903   		movq	%rax, (%rbx)
 7077              	.LVL633:
GAS LISTING /tmp/ccvmoMuv.s 			page 492


 7078              	.LBB14964:
 7079              	.LBB14965:
 7080              	.LBB14966:
 7081              	.LBB14967:
 7082              	.LBB14968:
 7083              	.LBB14969:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 7084              		.loc 10 152 0
 7085 005e 488D4348 		leaq	72(%rbx), %rax
 7086              	.LBE14969:
 7087              	.LBE14968:
 7088              	.LBE14967:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 7089              		.loc 10 180 0
 7090 0062 4839C7   		cmpq	%rax, %rdi
 7091 0065 7405     		je	.L414
 7092              	.LVL634:
 7093              	.LBB14970:
 7094              	.LBB14971:
 7095              	.LBB14972:
 7096              	.LBB14973:
 7097              		.loc 12 110 0
 7098 0067 E8000000 		call	_ZdlPv@PLT
 7098      00
 7099              	.LVL635:
 7100              	.L414:
 7101              	.LBE14973:
 7102              	.LBE14972:
 7103              	.LBE14971:
 7104              	.LBE14970:
 7105              	.LBE14966:
 7106              	.LBE14965:
 7107              	.LBE14964:
 7108              	.LBB14974:
 7109              	.LBB14975:
 7110              	.LBB14976:
 7111              	.LBB14977:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 7112              		.loc 19 873 0
 7113 006c 488B7318 		movq	24(%rbx), %rsi
 7114              	.LBE14977:
 7115              	.LBE14976:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 7116              		.loc 36 96 0
 7117 0070 488D7B08 		leaq	8(%rbx), %rdi
 7118              	.LVL636:
 7119              	.LBB14979:
 7120              	.LBB14978:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 7121              		.loc 19 873 0
 7122 0074 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 7122      00
 7123              	.LVL637:
 7124              	.LBE14978:
 7125              	.LBE14979:
 7126              	.LBE14975:
 7127              	.LBE14974:
GAS LISTING /tmp/ccvmoMuv.s 			page 493


 7128              	.LBE14963:
 7129              	.LBE14962:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 7130              		.loc 3 172 0
 7131 0079 4889DF   		movq	%rbx, %rdi
 7132 007c BE600000 		movl	$96, %esi
 7132      00
 7133              	.LBE14980:
 7134              	.LBE14982:
 7135              	.LBE14984:
 7136              	.LBE14987:
 7137              	.LBE14990:
 7138              	.LBE14993:
 7139              	.LBE14996:
 7140              	.LBE15000:
 7141              		.loc 29 115 0
 7142 0081 5B       		popq	%rbx
 7143              		.cfi_remember_state
 7144              		.cfi_def_cfa_offset 8
 7145              	.LVL638:
 7146              	.LBB15001:
 7147              	.LBB14997:
 7148              	.LBB14994:
 7149              	.LBB14991:
 7150              	.LBB14988:
 7151              	.LBB14985:
 7152              	.LBB14983:
 7153              	.LBB14981:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 7154              		.loc 3 172 0
 7155 0082 E9000000 		jmp	_ZdlPvm@PLT
 7155      00
 7156              	.LVL639:
 7157 0087 660F1F84 		.p2align 4,,10
 7157      00000000 
 7157      00
 7158              		.p2align 3
 7159              	.L412:
 7160              		.cfi_restore_state
 7161              	.LBE14981:
 7162              	.LBE14983:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 7163              		.loc 7 78 0
 7164 0090 4889DF   		movq	%rbx, %rdi
 7165              	.LBE14985:
 7166              	.LBE14988:
 7167              	.LBE14991:
 7168              	.LBE14994:
 7169              	.LBE14997:
 7170              	.LBE15001:
 7171              		.loc 29 115 0
 7172 0093 5B       		popq	%rbx
 7173              		.cfi_def_cfa_offset 8
 7174              	.LBB15002:
 7175              	.LBB14998:
 7176              	.LBB14995:
 7177              	.LBB14992:
GAS LISTING /tmp/ccvmoMuv.s 			page 494


 7178              	.LBB14989:
 7179              	.LBB14986:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 7180              		.loc 7 78 0
 7181 0094 FFE0     		jmp	*%rax
 7182              	.LVL640:
 7183              	.LBE14986:
 7184              	.LBE14989:
 7185              	.LBE14992:
 7186              	.LBE14995:
 7187              	.LBE14998:
 7188              	.LBE15002:
 7189              		.cfi_endproc
 7190              	.LFE9898:
 7191              		.section	.gcc_except_table
 7192              	.LLSDA9898:
 7193 005f FF       		.byte	0xff
 7194 0060 FF       		.byte	0xff
 7195 0061 01       		.byte	0x1
 7196 0062 00       		.uleb128 .LLSDACSE9898-.LLSDACSB9898
 7197              	.LLSDACSB9898:
 7198              	.LLSDACSE9898:
 7199              		.section	.text._ZN5boost16exception_detail14bad_exception_D2Ev,"axG",@progbits,_ZN5boost16exceptio
 7201              		.set	.LTHUNK2,_ZN5boost16exception_detail14bad_exception_D2Ev
 7202 0096 662E0F1F 		.p2align 4,,15
 7202      84000000 
 7202      0000
 7203              		.weak	_ZThn40_N5boost16exception_detail14bad_exception_D1Ev
 7205              	_ZThn40_N5boost16exception_detail14bad_exception_D1Ev:
 7206              	.LFB16011:
 7207              		.loc 29 115 0
 7208              		.cfi_startproc
 7209 00a0 4883EF28 		subq	$40, %rdi
 7210 00a4 E957FFFF 		jmp	.LTHUNK2
 7210      FF
 7211              		.cfi_endproc
 7212              	.LFE16011:
 7214              		.weak	_ZN5boost16exception_detail14bad_exception_D1Ev
 7215              		.set	_ZN5boost16exception_detail14bad_exception_D1Ev,_ZN5boost16exception_detail14bad_exception_D2
 7216              		.section	.text._ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED2Ev,"axG"
 7217              		.align 2
 7218              		.p2align 4,,15
 7219              		.weak	_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED2Ev
 7221              	_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED2Ev:
 7222              	.LFB13801:
 353:/usr/include/boost/exception/exception.hpp ****                 {
 7223              		.loc 7 353 0
 7224              		.cfi_startproc
 7225              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 7226              		.cfi_lsda 0x1b,.LLSDA13801
 7227              	.LVL641:
 7228 0000 55       		pushq	%rbp
 7229              		.cfi_def_cfa_offset 16
 7230              		.cfi_offset 6, -16
 7231 0001 53       		pushq	%rbx
 7232              		.cfi_def_cfa_offset 24
 7233              		.cfi_offset 3, -24
GAS LISTING /tmp/ccvmoMuv.s 			page 495


 7234              	.LBB15047:
 355:/usr/include/boost/exception/exception.hpp ****             };
 7235              		.loc 7 355 0
 7236 0002 488D0500 		leaq	16+_ZTVN5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE(%rip), %rax
 7236      000000
 7237              	.LBE15047:
 353:/usr/include/boost/exception/exception.hpp ****                 {
 7238              		.loc 7 353 0
 7239 0009 4889FB   		movq	%rdi, %rbx
 7240 000c 4883EC08 		subq	$8, %rsp
 7241              		.cfi_def_cfa_offset 32
 7242              	.LBB15092:
 7243              	.LBB15048:
 7244              	.LBB15049:
 7245              	.LBB15050:
 7246              	.LBB15051:
 7247              	.LBB15052:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 7248              		.loc 7 78 0
 7249 0010 488B6F18 		movq	24(%rdi), %rbp
 7250              	.LBE15052:
 7251              	.LBE15051:
 7252              	.LBE15050:
 7253              	.LBE15049:
 7254              	.LBE15048:
 355:/usr/include/boost/exception/exception.hpp ****             };
 7255              		.loc 7 355 0
 7256 0014 488907   		movq	%rax, (%rdi)
 7257              	.LVL642:
 7258              	.LBB15086:
 7259              	.LBB15084:
 299:/usr/include/boost/exception/exception.hpp ****         {
 7260              		.loc 7 299 0
 7261 0017 488D0500 		leaq	16+_ZTVN5boost9exceptionE(%rip), %rax
 7261      000000
 7262              	.LBB15081:
 7263              	.LBB15078:
 7264              	.LBB15075:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 7265              		.loc 7 78 0
 7266 001e 4885ED   		testq	%rbp, %rbp
 7267              	.LBE15075:
 7268              	.LBE15078:
 7269              	.LBE15081:
 299:/usr/include/boost/exception/exception.hpp ****         {
 7270              		.loc 7 299 0
 7271 0021 48894710 		movq	%rax, 16(%rdi)
 7272              	.LVL643:
 7273              	.LBB15082:
 7274              	.LBB15079:
 7275              	.LBB15076:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 7276              		.loc 7 78 0
 7277 0025 741A     		je	.L419
 7278 0027 488B4500 		movq	0(%rbp), %rax
 7279 002b 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 7279      000000
GAS LISTING /tmp/ccvmoMuv.s 			page 496


 7280 0032 488B4020 		movq	32(%rax), %rax
 7281 0036 4839D0   		cmpq	%rdx, %rax
 7282 0039 7565     		jne	.L420
 7283              	.LVL644:
 7284              	.LBB15053:
 7285              	.LBB15054:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 7286              		.loc 3 168 0
 7287 003b 836D5801 		subl	$1, 88(%rbp)
 7288 003f 741F     		je	.L424
 7289              	.LVL645:
 7290              	.L419:
 7291              	.LBE15054:
 7292              	.LBE15053:
 7293              	.LBE15076:
 7294              	.LBE15079:
 7295              	.LBE15082:
 7296              	.LBE15084:
 7297              	.LBE15086:
 7298              	.LBB15087:
 7299              	.LBB15088:
 7300              		.loc 13 696 0
 7301 0041 488D0500 		leaq	16+_ZTVN5boost17bad_function_callE(%rip), %rax
 7301      000000
 7302 0048 4889DF   		movq	%rbx, %rdi
 7303 004b 488903   		movq	%rax, (%rbx)
 7304              	.LBE15088:
 7305              	.LBE15087:
 7306              	.LBE15092:
 355:/usr/include/boost/exception/exception.hpp ****             };
 7307              		.loc 7 355 0
 7308 004e 4883C408 		addq	$8, %rsp
 7309              		.cfi_remember_state
 7310              		.cfi_def_cfa_offset 24
 7311 0052 5B       		popq	%rbx
 7312              		.cfi_def_cfa_offset 16
 7313              	.LVL646:
 7314 0053 5D       		popq	%rbp
 7315              		.cfi_def_cfa_offset 8
 7316              	.LBB15093:
 7317              	.LBB15090:
 7318              	.LBB15089:
 7319              		.loc 13 696 0
 7320 0054 E9000000 		jmp	_ZNSt13runtime_errorD2Ev@PLT
 7320      00
 7321              	.LVL647:
 7322 0059 0F1F8000 		.p2align 4,,10
 7322      000000
 7323              		.p2align 3
 7324              	.L424:
 7325              		.cfi_restore_state
 7326              	.LBE15089:
 7327              	.LBE15090:
 7328              	.LBB15091:
 7329              	.LBB15085:
 7330              	.LBB15083:
 7331              	.LBB15080:
GAS LISTING /tmp/ccvmoMuv.s 			page 497


 7332              	.LBB15077:
 7333              	.LBB15074:
 7334              	.LBB15073:
 7335              	.LBB15055:
 7336              	.LBB15056:
 104:/usr/include/boost/exception/info.hpp ****                 }
 7337              		.loc 3 104 0
 7338 0060 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 7338      000000
 7339 0067 488B7D38 		movq	56(%rbp), %rdi
 7340 006b 48894500 		movq	%rax, 0(%rbp)
 7341              	.LVL648:
 7342              	.LBB15057:
 7343              	.LBB15058:
 7344              	.LBB15059:
 7345              	.LBB15060:
 7346              	.LBB15061:
 7347              	.LBB15062:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 7348              		.loc 10 152 0
 7349 006f 488D4548 		leaq	72(%rbp), %rax
 7350              	.LBE15062:
 7351              	.LBE15061:
 7352              	.LBE15060:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 7353              		.loc 10 180 0
 7354 0073 4839C7   		cmpq	%rax, %rdi
 7355 0076 7405     		je	.L422
 7356              	.LVL649:
 7357              	.LBB15063:
 7358              	.LBB15064:
 7359              	.LBB15065:
 7360              	.LBB15066:
 7361              		.loc 12 110 0
 7362 0078 E8000000 		call	_ZdlPv@PLT
 7362      00
 7363              	.LVL650:
 7364              	.L422:
 7365              	.LBE15066:
 7366              	.LBE15065:
 7367              	.LBE15064:
 7368              	.LBE15063:
 7369              	.LBE15059:
 7370              	.LBE15058:
 7371              	.LBE15057:
 7372              	.LBB15067:
 7373              	.LBB15068:
 7374              	.LBB15069:
 7375              	.LBB15070:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 7376              		.loc 19 873 0
 7377 007d 488B7518 		movq	24(%rbp), %rsi
 7378              	.LBE15070:
 7379              	.LBE15069:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 7380              		.loc 36 96 0
 7381 0081 488D7D08 		leaq	8(%rbp), %rdi
GAS LISTING /tmp/ccvmoMuv.s 			page 498


 7382              	.LVL651:
 7383              	.LBB15072:
 7384              	.LBB15071:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 7385              		.loc 19 873 0
 7386 0085 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 7386      00
 7387              	.LVL652:
 7388              	.LBE15071:
 7389              	.LBE15072:
 7390              	.LBE15068:
 7391              	.LBE15067:
 7392              	.LBE15056:
 7393              	.LBE15055:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 7394              		.loc 3 172 0
 7395 008a BE600000 		movl	$96, %esi
 7395      00
 7396 008f 4889EF   		movq	%rbp, %rdi
 7397 0092 E8000000 		call	_ZdlPvm@PLT
 7397      00
 7398              	.LVL653:
 7399 0097 EBA8     		jmp	.L419
 7400              	.LVL654:
 7401 0099 0F1F8000 		.p2align 4,,10
 7401      000000
 7402              		.p2align 3
 7403              	.L420:
 7404              	.LBE15073:
 7405              	.LBE15074:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 7406              		.loc 7 78 0
 7407 00a0 4889EF   		movq	%rbp, %rdi
 7408 00a3 FFD0     		call	*%rax
 7409              	.LVL655:
 7410 00a5 EB9A     		jmp	.L419
 7411              	.LBE15077:
 7412              	.LBE15080:
 7413              	.LBE15083:
 7414              	.LBE15085:
 7415              	.LBE15091:
 7416              	.LBE15093:
 7417              		.cfi_endproc
 7418              	.LFE13801:
 7419              		.section	.gcc_except_table
 7420              	.LLSDA13801:
 7421 0063 FF       		.byte	0xff
 7422 0064 FF       		.byte	0xff
 7423 0065 01       		.byte	0x1
 7424 0066 00       		.uleb128 .LLSDACSE13801-.LLSDACSB13801
 7425              	.LLSDACSB13801:
 7426              	.LLSDACSE13801:
 7427              		.section	.text._ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED2Ev,"axG"
 7429              		.weak	_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev
 7430              		.set	_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev,_ZN5boost16exce
 7431              		.set	.LTHUNK130,_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev
 7432 00a7 660F1F84 		.p2align 4,,15
GAS LISTING /tmp/ccvmoMuv.s 			page 499


 7432      00000000 
 7432      00
 7433              		.weak	_ZThn16_N5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev
 7435              	_ZThn16_N5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev:
 7436              	.LFB16013:
 353:/usr/include/boost/exception/exception.hpp ****                 {
 7437              		.loc 7 353 0
 7438              		.cfi_startproc
 7439 00b0 4883EF10 		subq	$16, %rdi
 7440 00b4 E947FFFF 		jmp	.LTHUNK130
 7440      FF
 7441              		.cfi_endproc
 7442              	.LFE16013:
 7444              		.section	.text._ZN5boost16exception_detail10bad_alloc_D2Ev,"axG",@progbits,_ZN5boost16exception_de
 7445              		.align 2
 7446              		.p2align 4,,15
 7447              		.weak	_ZN5boost16exception_detail10bad_alloc_D2Ev
 7449              	_ZN5boost16exception_detail10bad_alloc_D2Ev:
 7450              	.LFB9894:
 107:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 };
 7451              		.loc 29 107 0
 7452              		.cfi_startproc
 7453              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 7454              		.cfi_lsda 0x1b,.LLSDA9894
 7455              	.LVL656:
 7456              	.LBB15134:
 7457 0000 488D0500 		leaq	16+_ZTVN5boost16exception_detail10bad_alloc_E(%rip), %rax
 7457      000000
 7458              	.LBE15134:
 7459 0007 53       		pushq	%rbx
 7460              		.cfi_def_cfa_offset 16
 7461              		.cfi_offset 3, -16
 107:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 };
 7462              		.loc 29 107 0
 7463 0008 4889FB   		movq	%rdi, %rbx
 7464              	.LBB15179:
 7465 000b 4883C728 		addq	$40, %rdi
 7466              	.LVL657:
 7467 000f 488947D8 		movq	%rax, -40(%rdi)
 7468 0013 488D0500 		leaq	48+_ZTVN5boost16exception_detail10bad_alloc_E(%rip), %rax
 7468      000000
 7469 001a 488907   		movq	%rax, (%rdi)
 7470 001d E8000000 		call	_ZNSt9bad_allocD2Ev@PLT
 7470      00
 7471              	.LVL658:
 7472              	.LBB15135:
 7473              	.LBB15136:
 299:/usr/include/boost/exception/exception.hpp ****         {
 7474              		.loc 7 299 0
 7475 0022 488D0500 		leaq	16+_ZTVN5boost9exceptionE(%rip), %rax
 7475      000000
 7476 0029 488903   		movq	%rax, (%rbx)
 7477              	.LVL659:
 7478              	.LBB15137:
 7479              	.LBB15138:
 7480              	.LBB15139:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
GAS LISTING /tmp/ccvmoMuv.s 			page 500


 7481              		.loc 7 78 0
 7482 002c 488B5B08 		movq	8(%rbx), %rbx
 7483              	.LVL660:
 7484 0030 4885DB   		testq	%rbx, %rbx
 7485 0033 7419     		je	.L425
 7486 0035 488B03   		movq	(%rbx), %rax
 7487 0038 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 7487      000000
 7488 003f 488B4020 		movq	32(%rax), %rax
 7489 0043 4839D0   		cmpq	%rdx, %rax
 7490 0046 7548     		jne	.L428
 7491              	.LVL661:
 7492              	.LBB15140:
 7493              	.LBB15141:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 7494              		.loc 3 168 0
 7495 0048 836B5801 		subl	$1, 88(%rbx)
 7496 004c 7402     		je	.L432
 7497              	.LVL662:
 7498              	.L425:
 7499              	.LBE15141:
 7500              	.LBE15140:
 7501              	.LBE15139:
 7502              	.LBE15138:
 7503              	.LBE15137:
 7504              	.LBE15136:
 7505              	.LBE15135:
 7506              	.LBE15179:
 107:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 };
 7507              		.loc 29 107 0
 7508 004e 5B       		popq	%rbx
 7509              		.cfi_remember_state
 7510              		.cfi_def_cfa_offset 8
 7511 004f C3       		ret
 7512              	.LVL663:
 7513              		.p2align 4,,10
 7514              		.p2align 3
 7515              	.L432:
 7516              		.cfi_restore_state
 7517              	.LBB15180:
 7518              	.LBB15176:
 7519              	.LBB15173:
 7520              	.LBB15170:
 7521              	.LBB15167:
 7522              	.LBB15164:
 7523              	.LBB15162:
 7524              	.LBB15160:
 7525              	.LBB15142:
 7526              	.LBB15143:
 104:/usr/include/boost/exception/info.hpp ****                 }
 7527              		.loc 3 104 0
 7528 0050 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 7528      000000
 7529 0057 488B7B38 		movq	56(%rbx), %rdi
 7530 005b 488903   		movq	%rax, (%rbx)
 7531              	.LVL664:
 7532              	.LBB15144:
GAS LISTING /tmp/ccvmoMuv.s 			page 501


 7533              	.LBB15145:
 7534              	.LBB15146:
 7535              	.LBB15147:
 7536              	.LBB15148:
 7537              	.LBB15149:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 7538              		.loc 10 152 0
 7539 005e 488D4348 		leaq	72(%rbx), %rax
 7540              	.LBE15149:
 7541              	.LBE15148:
 7542              	.LBE15147:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 7543              		.loc 10 180 0
 7544 0062 4839C7   		cmpq	%rax, %rdi
 7545 0065 7405     		je	.L430
 7546              	.LVL665:
 7547              	.LBB15150:
 7548              	.LBB15151:
 7549              	.LBB15152:
 7550              	.LBB15153:
 7551              		.loc 12 110 0
 7552 0067 E8000000 		call	_ZdlPv@PLT
 7552      00
 7553              	.LVL666:
 7554              	.L430:
 7555              	.LBE15153:
 7556              	.LBE15152:
 7557              	.LBE15151:
 7558              	.LBE15150:
 7559              	.LBE15146:
 7560              	.LBE15145:
 7561              	.LBE15144:
 7562              	.LBB15154:
 7563              	.LBB15155:
 7564              	.LBB15156:
 7565              	.LBB15157:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 7566              		.loc 19 873 0
 7567 006c 488B7318 		movq	24(%rbx), %rsi
 7568              	.LBE15157:
 7569              	.LBE15156:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 7570              		.loc 36 96 0
 7571 0070 488D7B08 		leaq	8(%rbx), %rdi
 7572              	.LVL667:
 7573              	.LBB15159:
 7574              	.LBB15158:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 7575              		.loc 19 873 0
 7576 0074 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 7576      00
 7577              	.LVL668:
 7578              	.LBE15158:
 7579              	.LBE15159:
 7580              	.LBE15155:
 7581              	.LBE15154:
 7582              	.LBE15143:
GAS LISTING /tmp/ccvmoMuv.s 			page 502


 7583              	.LBE15142:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 7584              		.loc 3 172 0
 7585 0079 4889DF   		movq	%rbx, %rdi
 7586 007c BE600000 		movl	$96, %esi
 7586      00
 7587              	.LBE15160:
 7588              	.LBE15162:
 7589              	.LBE15164:
 7590              	.LBE15167:
 7591              	.LBE15170:
 7592              	.LBE15173:
 7593              	.LBE15176:
 7594              	.LBE15180:
 107:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 };
 7595              		.loc 29 107 0
 7596 0081 5B       		popq	%rbx
 7597              		.cfi_remember_state
 7598              		.cfi_def_cfa_offset 8
 7599              	.LVL669:
 7600              	.LBB15181:
 7601              	.LBB15177:
 7602              	.LBB15174:
 7603              	.LBB15171:
 7604              	.LBB15168:
 7605              	.LBB15165:
 7606              	.LBB15163:
 7607              	.LBB15161:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 7608              		.loc 3 172 0
 7609 0082 E9000000 		jmp	_ZdlPvm@PLT
 7609      00
 7610              	.LVL670:
 7611 0087 660F1F84 		.p2align 4,,10
 7611      00000000 
 7611      00
 7612              		.p2align 3
 7613              	.L428:
 7614              		.cfi_restore_state
 7615              	.LBE15161:
 7616              	.LBE15163:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 7617              		.loc 7 78 0
 7618 0090 4889DF   		movq	%rbx, %rdi
 7619              	.LBE15165:
 7620              	.LBE15168:
 7621              	.LBE15171:
 7622              	.LBE15174:
 7623              	.LBE15177:
 7624              	.LBE15181:
 107:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 };
 7625              		.loc 29 107 0
 7626 0093 5B       		popq	%rbx
 7627              		.cfi_def_cfa_offset 8
 7628              	.LBB15182:
 7629              	.LBB15178:
 7630              	.LBB15175:
GAS LISTING /tmp/ccvmoMuv.s 			page 503


 7631              	.LBB15172:
 7632              	.LBB15169:
 7633              	.LBB15166:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 7634              		.loc 7 78 0
 7635 0094 FFE0     		jmp	*%rax
 7636              	.LVL671:
 7637              	.LBE15166:
 7638              	.LBE15169:
 7639              	.LBE15172:
 7640              	.LBE15175:
 7641              	.LBE15178:
 7642              	.LBE15182:
 7643              		.cfi_endproc
 7644              	.LFE9894:
 7645              		.section	.gcc_except_table
 7646              	.LLSDA9894:
 7647 0067 FF       		.byte	0xff
 7648 0068 FF       		.byte	0xff
 7649 0069 01       		.byte	0x1
 7650 006a 00       		.uleb128 .LLSDACSE9894-.LLSDACSB9894
 7651              	.LLSDACSB9894:
 7652              	.LLSDACSE9894:
 7653              		.section	.text._ZN5boost16exception_detail10bad_alloc_D2Ev,"axG",@progbits,_ZN5boost16exception_de
 7655              		.set	.LTHUNK0,_ZN5boost16exception_detail10bad_alloc_D2Ev
 7656 0096 662E0F1F 		.p2align 4,,15
 7656      84000000 
 7656      0000
 7657              		.weak	_ZThn40_N5boost16exception_detail10bad_alloc_D1Ev
 7659              	_ZThn40_N5boost16exception_detail10bad_alloc_D1Ev:
 7660              	.LFB16015:
 107:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 };
 7661              		.loc 29 107 0
 7662              		.cfi_startproc
 7663 00a0 4883EF28 		subq	$40, %rdi
 7664 00a4 E957FFFF 		jmp	.LTHUNK0
 7664      FF
 7665              		.cfi_endproc
 7666              	.LFE16015:
 7668              		.weak	_ZN5boost16exception_detail10bad_alloc_D1Ev
 7669              		.set	_ZN5boost16exception_detail10bad_alloc_D1Ev,_ZN5boost16exception_detail10bad_alloc_D2Ev
 7670              		.section	.text._ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function
 7671              		.align 2
 7672              		.p2align 4,,15
 7673              		.weak	_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE
 7675              	_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev:
 7676              	.LFB13807:
 479:/usr/include/boost/exception/exception.hpp ****                 {
 7677              		.loc 7 479 0
 7678              		.cfi_startproc
 7679              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 7680              		.cfi_lsda 0x1b,.LLSDA13807
 7681              	.LVL672:
 7682 0000 55       		pushq	%rbp
 7683              		.cfi_def_cfa_offset 16
 7684              		.cfi_offset 6, -16
 7685              	.LBB15223:
GAS LISTING /tmp/ccvmoMuv.s 			page 504


 481:/usr/include/boost/exception/exception.hpp **** 
 7686              		.loc 7 481 0
 7687 0001 488D0500 		leaq	136+_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_cal
 7687      000000
 7688              	.LBE15223:
 479:/usr/include/boost/exception/exception.hpp ****                 {
 7689              		.loc 7 479 0
 7690 0008 53       		pushq	%rbx
 7691              		.cfi_def_cfa_offset 24
 7692              		.cfi_offset 3, -24
 7693 0009 4889FB   		movq	%rdi, %rbx
 7694 000c 4883EC08 		subq	$8, %rsp
 7695              		.cfi_def_cfa_offset 32
 7696              	.LBB15272:
 481:/usr/include/boost/exception/exception.hpp **** 
 7697              		.loc 7 481 0
 7698 0010 48894738 		movq	%rax, 56(%rdi)
 7699              	.LVL673:
 7700              	.LBB15224:
 7701              	.LBB15225:
 7702              	.LBB15226:
 7703              	.LBB15227:
 7704              	.LBB15228:
 7705              	.LBB15229:
 7706              	.LBB15230:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 7707              		.loc 7 78 0
 7708 0014 488B6F18 		movq	24(%rdi), %rbp
 7709              	.LBE15230:
 7710              	.LBE15229:
 7711              	.LBE15228:
 7712              	.LBE15227:
 7713              	.LBE15226:
 355:/usr/include/boost/exception/exception.hpp ****             };
 7714              		.loc 7 355 0
 7715 0018 488D0500 		leaq	16+_ZTVN5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE(%rip), %rax
 7715      000000
 7716 001f 488907   		movq	%rax, (%rdi)
 7717              	.LVL674:
 7718              	.LBB15264:
 7719              	.LBB15262:
 299:/usr/include/boost/exception/exception.hpp ****         {
 7720              		.loc 7 299 0
 7721 0022 488D0500 		leaq	16+_ZTVN5boost9exceptionE(%rip), %rax
 7721      000000
 7722              	.LBB15259:
 7723              	.LBB15256:
 7724              	.LBB15253:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 7725              		.loc 7 78 0
 7726 0029 4885ED   		testq	%rbp, %rbp
 7727              	.LBE15253:
 7728              	.LBE15256:
 7729              	.LBE15259:
 299:/usr/include/boost/exception/exception.hpp ****         {
 7730              		.loc 7 299 0
 7731 002c 48894710 		movq	%rax, 16(%rdi)
GAS LISTING /tmp/ccvmoMuv.s 			page 505


 7732              	.LVL675:
 7733              	.LBB15260:
 7734              	.LBB15257:
 7735              	.LBB15254:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 7736              		.loc 7 78 0
 7737 0030 741A     		je	.L435
 7738 0032 488B4500 		movq	0(%rbp), %rax
 7739 0036 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 7739      000000
 7740 003d 488B4020 		movq	32(%rax), %rax
 7741 0041 4839D0   		cmpq	%rdx, %rax
 7742 0044 7562     		jne	.L436
 7743              	.LVL676:
 7744              	.LBB15231:
 7745              	.LBB15232:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 7746              		.loc 3 168 0
 7747 0046 836D5801 		subl	$1, 88(%rbp)
 7748 004a 741C     		je	.L440
 7749              	.LVL677:
 7750              	.L435:
 7751              	.LBE15232:
 7752              	.LBE15231:
 7753              	.LBE15254:
 7754              	.LBE15257:
 7755              	.LBE15260:
 7756              	.LBE15262:
 7757              	.LBE15264:
 7758              	.LBB15265:
 7759              	.LBB15266:
 7760              		.loc 13 696 0
 7761 004c 488D0500 		leaq	16+_ZTVN5boost17bad_function_callE(%rip), %rax
 7761      000000
 7762 0053 4889DF   		movq	%rbx, %rdi
 7763 0056 488903   		movq	%rax, (%rbx)
 7764              	.LBE15266:
 7765              	.LBE15265:
 7766              	.LBE15225:
 7767              	.LBE15224:
 7768              	.LBE15272:
 481:/usr/include/boost/exception/exception.hpp **** 
 7769              		.loc 7 481 0
 7770 0059 4883C408 		addq	$8, %rsp
 7771              		.cfi_remember_state
 7772              		.cfi_def_cfa_offset 24
 7773 005d 5B       		popq	%rbx
 7774              		.cfi_def_cfa_offset 16
 7775              	.LVL678:
 7776 005e 5D       		popq	%rbp
 7777              		.cfi_def_cfa_offset 8
 7778              	.LBB15273:
 7779              	.LBB15271:
 7780              	.LBB15270:
 7781              	.LBB15268:
 7782              	.LBB15267:
 7783              		.loc 13 696 0
GAS LISTING /tmp/ccvmoMuv.s 			page 506


 7784 005f E9000000 		jmp	_ZNSt13runtime_errorD2Ev@PLT
 7784      00
 7785              	.LVL679:
 7786              		.p2align 4,,10
 7787 0064 0F1F4000 		.p2align 3
 7788              	.L440:
 7789              		.cfi_restore_state
 7790              	.LBE15267:
 7791              	.LBE15268:
 7792              	.LBB15269:
 7793              	.LBB15263:
 7794              	.LBB15261:
 7795              	.LBB15258:
 7796              	.LBB15255:
 7797              	.LBB15252:
 7798              	.LBB15251:
 7799              	.LBB15233:
 7800              	.LBB15234:
 104:/usr/include/boost/exception/info.hpp ****                 }
 7801              		.loc 3 104 0
 7802 0068 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 7802      000000
 7803 006f 488B7D38 		movq	56(%rbp), %rdi
 7804 0073 48894500 		movq	%rax, 0(%rbp)
 7805              	.LVL680:
 7806              	.LBB15235:
 7807              	.LBB15236:
 7808              	.LBB15237:
 7809              	.LBB15238:
 7810              	.LBB15239:
 7811              	.LBB15240:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 7812              		.loc 10 152 0
 7813 0077 488D4548 		leaq	72(%rbp), %rax
 7814              	.LBE15240:
 7815              	.LBE15239:
 7816              	.LBE15238:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 7817              		.loc 10 180 0
 7818 007b 4839C7   		cmpq	%rax, %rdi
 7819 007e 7405     		je	.L438
 7820              	.LVL681:
 7821              	.LBB15241:
 7822              	.LBB15242:
 7823              	.LBB15243:
 7824              	.LBB15244:
 7825              		.loc 12 110 0
 7826 0080 E8000000 		call	_ZdlPv@PLT
 7826      00
 7827              	.LVL682:
 7828              	.L438:
 7829              	.LBE15244:
 7830              	.LBE15243:
 7831              	.LBE15242:
 7832              	.LBE15241:
 7833              	.LBE15237:
 7834              	.LBE15236:
GAS LISTING /tmp/ccvmoMuv.s 			page 507


 7835              	.LBE15235:
 7836              	.LBB15245:
 7837              	.LBB15246:
 7838              	.LBB15247:
 7839              	.LBB15248:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 7840              		.loc 19 873 0
 7841 0085 488B7518 		movq	24(%rbp), %rsi
 7842              	.LBE15248:
 7843              	.LBE15247:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 7844              		.loc 36 96 0
 7845 0089 488D7D08 		leaq	8(%rbp), %rdi
 7846              	.LVL683:
 7847              	.LBB15250:
 7848              	.LBB15249:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 7849              		.loc 19 873 0
 7850 008d E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 7850      00
 7851              	.LVL684:
 7852              	.LBE15249:
 7853              	.LBE15250:
 7854              	.LBE15246:
 7855              	.LBE15245:
 7856              	.LBE15234:
 7857              	.LBE15233:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 7858              		.loc 3 172 0
 7859 0092 BE600000 		movl	$96, %esi
 7859      00
 7860 0097 4889EF   		movq	%rbp, %rdi
 7861 009a E8000000 		call	_ZdlPvm@PLT
 7861      00
 7862              	.LVL685:
 7863 009f EBAB     		jmp	.L435
 7864              	.LVL686:
 7865              		.p2align 4,,10
 7866 00a1 0F1F8000 		.p2align 3
 7866      000000
 7867              	.L436:
 7868              	.LBE15251:
 7869              	.LBE15252:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 7870              		.loc 7 78 0
 7871 00a8 4889EF   		movq	%rbp, %rdi
 7872 00ab FFD0     		call	*%rax
 7873              	.LVL687:
 7874 00ad EB9D     		jmp	.L435
 7875              	.LBE15255:
 7876              	.LBE15258:
 7877              	.LBE15261:
 7878              	.LBE15263:
 7879              	.LBE15269:
 7880              	.LBE15270:
 7881              	.LBE15271:
 7882              	.LBE15273:
GAS LISTING /tmp/ccvmoMuv.s 			page 508


 7883              		.cfi_endproc
 7884              	.LFE13807:
 7885              		.section	.gcc_except_table
 7886              	.LLSDA13807:
 7887 006b FF       		.byte	0xff
 7888 006c FF       		.byte	0xff
 7889 006d 01       		.byte	0x1
 7890 006e 00       		.uleb128 .LLSDACSE13807-.LLSDACSB13807
 7891              	.LLSDACSB13807:
 7892              	.LLSDACSE13807:
 7893              		.section	.text._ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function
 7895              		.set	.LTHUNK133,_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_functio
 7896 00af 90       		.p2align 4,,15
 7897              		.weak	_ZThn16_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_ca
 7899              	_ZThn16_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED
 7900              	.LFB16016:
 479:/usr/include/boost/exception/exception.hpp ****                 {
 7901              		.loc 7 479 0
 7902              		.cfi_startproc
 7903 00b0 4883EF10 		subq	$16, %rdi
 7904 00b4 E947FFFF 		jmp	.LTHUNK133
 7904      FF
 7905              		.cfi_endproc
 7906              	.LFE16016:
 7908              		.set	.LTHUNK132,_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_functio
 7909 00b9 0F1F8000 		.p2align 4,,15
 7909      000000
 7910              		.weak	_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_
 7912              	_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEE
 7913              	.LFB16017:
 479:/usr/include/boost/exception/exception.hpp ****                 {
 7914              		.loc 7 479 0
 7915              		.cfi_startproc
 7916 00c0 4C8B17   		movq	(%rdi), %r10
 7917 00c3 49037AD8 		addq	-40(%r10), %rdi
 7918 00c7 E934FFFF 		jmp	.LTHUNK132
 7918      FF
 7919              		.cfi_endproc
 7920              	.LFE16017:
 7922              		.section	.text._ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev,"axG"
 7923              		.align 2
 7924              		.p2align 4,,15
 7925              		.weak	_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev
 7927              	_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev:
 7928              	.LFB13803:
 353:/usr/include/boost/exception/exception.hpp ****                 {
 7929              		.loc 7 353 0
 7930              		.cfi_startproc
 7931              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 7932              		.cfi_lsda 0x1b,.LLSDA13803
 7933              	.LVL688:
 7934 0000 55       		pushq	%rbp
 7935              		.cfi_def_cfa_offset 16
 7936              		.cfi_offset 6, -16
 7937 0001 53       		pushq	%rbx
 7938              		.cfi_def_cfa_offset 24
 7939              		.cfi_offset 3, -24
GAS LISTING /tmp/ccvmoMuv.s 			page 509


 7940              	.LBB15312:
 7941              	.LBB15313:
 355:/usr/include/boost/exception/exception.hpp ****             };
 7942              		.loc 7 355 0
 7943 0002 488D0500 		leaq	16+_ZTVN5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE(%rip), %rax
 7943      000000
 7944              	.LBE15313:
 7945              	.LBE15312:
 353:/usr/include/boost/exception/exception.hpp ****                 {
 7946              		.loc 7 353 0
 7947 0009 4889FB   		movq	%rdi, %rbx
 7948 000c 4883EC08 		subq	$8, %rsp
 7949              		.cfi_def_cfa_offset 32
 7950              	.LBB15358:
 7951              	.LBB15356:
 7952              	.LBB15314:
 7953              	.LBB15315:
 7954              	.LBB15316:
 7955              	.LBB15317:
 7956              	.LBB15318:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 7957              		.loc 7 78 0
 7958 0010 488B6F18 		movq	24(%rdi), %rbp
 7959              	.LBE15318:
 7960              	.LBE15317:
 7961              	.LBE15316:
 7962              	.LBE15315:
 7963              	.LBE15314:
 355:/usr/include/boost/exception/exception.hpp ****             };
 7964              		.loc 7 355 0
 7965 0014 488907   		movq	%rax, (%rdi)
 7966              	.LVL689:
 7967              	.LBB15352:
 7968              	.LBB15350:
 299:/usr/include/boost/exception/exception.hpp ****         {
 7969              		.loc 7 299 0
 7970 0017 488D0500 		leaq	16+_ZTVN5boost9exceptionE(%rip), %rax
 7970      000000
 7971              	.LBB15347:
 7972              	.LBB15344:
 7973              	.LBB15341:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 7974              		.loc 7 78 0
 7975 001e 4885ED   		testq	%rbp, %rbp
 7976              	.LBE15341:
 7977              	.LBE15344:
 7978              	.LBE15347:
 299:/usr/include/boost/exception/exception.hpp ****         {
 7979              		.loc 7 299 0
 7980 0021 48894710 		movq	%rax, 16(%rdi)
 7981              	.LVL690:
 7982              	.LBB15348:
 7983              	.LBB15345:
 7984              	.LBB15342:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 7985              		.loc 7 78 0
 7986 0025 741A     		je	.L443
GAS LISTING /tmp/ccvmoMuv.s 			page 510


 7987 0027 488B4500 		movq	0(%rbp), %rax
 7988 002b 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 7988      000000
 7989 0032 488B4020 		movq	32(%rax), %rax
 7990 0036 4839D0   		cmpq	%rdx, %rax
 7991 0039 7575     		jne	.L444
 7992              	.LVL691:
 7993              	.LBB15319:
 7994              	.LBB15320:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 7995              		.loc 3 168 0
 7996 003b 836D5801 		subl	$1, 88(%rbp)
 7997 003f 742F     		je	.L448
 7998              	.LVL692:
 7999              	.L443:
 8000              	.LBE15320:
 8001              	.LBE15319:
 8002              	.LBE15342:
 8003              	.LBE15345:
 8004              	.LBE15348:
 8005              	.LBE15350:
 8006              	.LBE15352:
 8007              	.LBB15353:
 8008              	.LBB15354:
 8009              		.loc 13 696 0
 8010 0041 488D0500 		leaq	16+_ZTVN5boost17bad_function_callE(%rip), %rax
 8010      000000
 8011 0048 4889DF   		movq	%rbx, %rdi
 8012 004b 488903   		movq	%rax, (%rbx)
 8013 004e E8000000 		call	_ZNSt13runtime_errorD2Ev@PLT
 8013      00
 8014              	.LVL693:
 8015              	.LBE15354:
 8016              	.LBE15353:
 8017              	.LBE15356:
 8018              	.LBE15358:
 355:/usr/include/boost/exception/exception.hpp ****             };
 8019              		.loc 7 355 0
 8020 0053 4883C408 		addq	$8, %rsp
 8021              		.cfi_remember_state
 8022              		.cfi_def_cfa_offset 24
 8023 0057 4889DF   		movq	%rbx, %rdi
 8024 005a BE380000 		movl	$56, %esi
 8024      00
 8025 005f 5B       		popq	%rbx
 8026              		.cfi_def_cfa_offset 16
 8027              	.LVL694:
 8028 0060 5D       		popq	%rbp
 8029              		.cfi_def_cfa_offset 8
 8030 0061 E9000000 		jmp	_ZdlPvm@PLT
 8030      00
 8031              	.LVL695:
 8032 0066 662E0F1F 		.p2align 4,,10
 8032      84000000 
 8032      0000
 8033              		.p2align 3
 8034              	.L448:
GAS LISTING /tmp/ccvmoMuv.s 			page 511


 8035              		.cfi_restore_state
 8036              	.LBB15359:
 8037              	.LBB15357:
 8038              	.LBB15355:
 8039              	.LBB15351:
 8040              	.LBB15349:
 8041              	.LBB15346:
 8042              	.LBB15343:
 8043              	.LBB15340:
 8044              	.LBB15339:
 8045              	.LBB15321:
 8046              	.LBB15322:
 104:/usr/include/boost/exception/info.hpp ****                 }
 8047              		.loc 3 104 0
 8048 0070 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 8048      000000
 8049 0077 488B7D38 		movq	56(%rbp), %rdi
 8050 007b 48894500 		movq	%rax, 0(%rbp)
 8051              	.LVL696:
 8052              	.LBB15323:
 8053              	.LBB15324:
 8054              	.LBB15325:
 8055              	.LBB15326:
 8056              	.LBB15327:
 8057              	.LBB15328:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 8058              		.loc 10 152 0
 8059 007f 488D4548 		leaq	72(%rbp), %rax
 8060              	.LBE15328:
 8061              	.LBE15327:
 8062              	.LBE15326:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 8063              		.loc 10 180 0
 8064 0083 4839C7   		cmpq	%rax, %rdi
 8065 0086 7405     		je	.L446
 8066              	.LVL697:
 8067              	.LBB15329:
 8068              	.LBB15330:
 8069              	.LBB15331:
 8070              	.LBB15332:
 8071              		.loc 12 110 0
 8072 0088 E8000000 		call	_ZdlPv@PLT
 8072      00
 8073              	.LVL698:
 8074              	.L446:
 8075              	.LBE15332:
 8076              	.LBE15331:
 8077              	.LBE15330:
 8078              	.LBE15329:
 8079              	.LBE15325:
 8080              	.LBE15324:
 8081              	.LBE15323:
 8082              	.LBB15333:
 8083              	.LBB15334:
 8084              	.LBB15335:
 8085              	.LBB15336:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 512


 8086              		.loc 19 873 0
 8087 008d 488B7518 		movq	24(%rbp), %rsi
 8088              	.LBE15336:
 8089              	.LBE15335:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 8090              		.loc 36 96 0
 8091 0091 488D7D08 		leaq	8(%rbp), %rdi
 8092              	.LVL699:
 8093              	.LBB15338:
 8094              	.LBB15337:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 8095              		.loc 19 873 0
 8096 0095 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 8096      00
 8097              	.LVL700:
 8098              	.LBE15337:
 8099              	.LBE15338:
 8100              	.LBE15334:
 8101              	.LBE15333:
 8102              	.LBE15322:
 8103              	.LBE15321:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 8104              		.loc 3 172 0
 8105 009a BE600000 		movl	$96, %esi
 8105      00
 8106 009f 4889EF   		movq	%rbp, %rdi
 8107 00a2 E8000000 		call	_ZdlPvm@PLT
 8107      00
 8108              	.LVL701:
 8109 00a7 EB98     		jmp	.L443
 8110              	.LVL702:
 8111 00a9 0F1F8000 		.p2align 4,,10
 8111      000000
 8112              		.p2align 3
 8113              	.L444:
 8114              	.LBE15339:
 8115              	.LBE15340:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 8116              		.loc 7 78 0
 8117 00b0 4889EF   		movq	%rbp, %rdi
 8118 00b3 FFD0     		call	*%rax
 8119              	.LVL703:
 8120 00b5 EB8A     		jmp	.L443
 8121              	.LBE15343:
 8122              	.LBE15346:
 8123              	.LBE15349:
 8124              	.LBE15351:
 8125              	.LBE15355:
 8126              	.LBE15357:
 8127              	.LBE15359:
 8128              		.cfi_endproc
 8129              	.LFE13803:
 8130              		.section	.gcc_except_table
 8131              	.LLSDA13803:
 8132 006f FF       		.byte	0xff
 8133 0070 FF       		.byte	0xff
 8134 0071 01       		.byte	0x1
GAS LISTING /tmp/ccvmoMuv.s 			page 513


 8135 0072 00       		.uleb128 .LLSDACSE13803-.LLSDACSB13803
 8136              	.LLSDACSB13803:
 8137              	.LLSDACSE13803:
 8138              		.section	.text._ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev,"axG"
 8140              		.set	.LTHUNK131,_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev
 8141 00b7 660F1F84 		.p2align 4,,15
 8141      00000000 
 8141      00
 8142              		.weak	_ZThn16_N5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev
 8144              	_ZThn16_N5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev:
 8145              	.LFB16018:
 353:/usr/include/boost/exception/exception.hpp ****                 {
 8146              		.loc 7 353 0
 8147              		.cfi_startproc
 8148 00c0 4883EF10 		subq	$16, %rdi
 8149 00c4 E937FFFF 		jmp	.LTHUNK131
 8149      FF
 8150              		.cfi_endproc
 8151              	.LFE16018:
 8153              		.section	.text._ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function
 8154              		.align 2
 8155              		.p2align 4,,15
 8156              		.weak	_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE
 8158              	_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev:
 8159              	.LFB13808:
 479:/usr/include/boost/exception/exception.hpp ****                 {
 8160              		.loc 7 479 0
 8161              		.cfi_startproc
 8162              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 8163              		.cfi_lsda 0x1b,.LLSDA13808
 8164              	.LVL704:
 8165 0000 55       		pushq	%rbp
 8166              		.cfi_def_cfa_offset 16
 8167              		.cfi_offset 6, -16
 8168              	.LBB15401:
 8169              	.LBB15402:
 481:/usr/include/boost/exception/exception.hpp **** 
 8170              		.loc 7 481 0
 8171 0001 488D0500 		leaq	136+_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_cal
 8171      000000
 8172              	.LBE15402:
 8173              	.LBE15401:
 479:/usr/include/boost/exception/exception.hpp ****                 {
 8174              		.loc 7 479 0
 8175 0008 53       		pushq	%rbx
 8176              		.cfi_def_cfa_offset 24
 8177              		.cfi_offset 3, -24
 8178 0009 4889FB   		movq	%rdi, %rbx
 8179 000c 4883EC08 		subq	$8, %rsp
 8180              		.cfi_def_cfa_offset 32
 8181              	.LBB15451:
 8182              	.LBB15449:
 481:/usr/include/boost/exception/exception.hpp **** 
 8183              		.loc 7 481 0
 8184 0010 48894738 		movq	%rax, 56(%rdi)
 8185              	.LVL705:
 8186              	.LBB15403:
GAS LISTING /tmp/ccvmoMuv.s 			page 514


 8187              	.LBB15404:
 8188              	.LBB15405:
 8189              	.LBB15406:
 8190              	.LBB15407:
 8191              	.LBB15408:
 8192              	.LBB15409:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 8193              		.loc 7 78 0
 8194 0014 488B6F18 		movq	24(%rdi), %rbp
 8195              	.LBE15409:
 8196              	.LBE15408:
 8197              	.LBE15407:
 8198              	.LBE15406:
 8199              	.LBE15405:
 355:/usr/include/boost/exception/exception.hpp ****             };
 8200              		.loc 7 355 0
 8201 0018 488D0500 		leaq	16+_ZTVN5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE(%rip), %rax
 8201      000000
 8202 001f 488907   		movq	%rax, (%rdi)
 8203              	.LVL706:
 8204              	.LBB15443:
 8205              	.LBB15441:
 299:/usr/include/boost/exception/exception.hpp ****         {
 8206              		.loc 7 299 0
 8207 0022 488D0500 		leaq	16+_ZTVN5boost9exceptionE(%rip), %rax
 8207      000000
 8208              	.LBB15438:
 8209              	.LBB15435:
 8210              	.LBB15432:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 8211              		.loc 7 78 0
 8212 0029 4885ED   		testq	%rbp, %rbp
 8213              	.LBE15432:
 8214              	.LBE15435:
 8215              	.LBE15438:
 299:/usr/include/boost/exception/exception.hpp ****         {
 8216              		.loc 7 299 0
 8217 002c 48894710 		movq	%rax, 16(%rdi)
 8218              	.LVL707:
 8219              	.LBB15439:
 8220              	.LBB15436:
 8221              	.LBB15433:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 8222              		.loc 7 78 0
 8223 0030 741A     		je	.L451
 8224 0032 488B4500 		movq	0(%rbp), %rax
 8225 0036 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 8225      000000
 8226 003d 488B4020 		movq	32(%rax), %rax
 8227 0041 4839D0   		cmpq	%rdx, %rax
 8228 0044 7572     		jne	.L452
 8229              	.LVL708:
 8230              	.LBB15410:
 8231              	.LBB15411:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 8232              		.loc 3 168 0
 8233 0046 836D5801 		subl	$1, 88(%rbp)
GAS LISTING /tmp/ccvmoMuv.s 			page 515


 8234 004a 742C     		je	.L456
 8235              	.LVL709:
 8236              	.L451:
 8237              	.LBE15411:
 8238              	.LBE15410:
 8239              	.LBE15433:
 8240              	.LBE15436:
 8241              	.LBE15439:
 8242              	.LBE15441:
 8243              	.LBE15443:
 8244              	.LBB15444:
 8245              	.LBB15445:
 8246              		.loc 13 696 0
 8247 004c 488D0500 		leaq	16+_ZTVN5boost17bad_function_callE(%rip), %rax
 8247      000000
 8248 0053 4889DF   		movq	%rbx, %rdi
 8249 0056 488903   		movq	%rax, (%rbx)
 8250 0059 E8000000 		call	_ZNSt13runtime_errorD2Ev@PLT
 8250      00
 8251              	.LVL710:
 8252              	.LBE15445:
 8253              	.LBE15444:
 8254              	.LBE15404:
 8255              	.LBE15403:
 8256              	.LBE15449:
 8257              	.LBE15451:
 481:/usr/include/boost/exception/exception.hpp **** 
 8258              		.loc 7 481 0
 8259 005e 4883C408 		addq	$8, %rsp
 8260              		.cfi_remember_state
 8261              		.cfi_def_cfa_offset 24
 8262 0062 4889DF   		movq	%rbx, %rdi
 8263 0065 BE400000 		movl	$64, %esi
 8263      00
 8264 006a 5B       		popq	%rbx
 8265              		.cfi_def_cfa_offset 16
 8266              	.LVL711:
 8267 006b 5D       		popq	%rbp
 8268              		.cfi_def_cfa_offset 8
 8269 006c E9000000 		jmp	_ZdlPvm@PLT
 8269      00
 8270              	.LVL712:
 8271              		.p2align 4,,10
 8272 0071 0F1F8000 		.p2align 3
 8272      000000
 8273              	.L456:
 8274              		.cfi_restore_state
 8275              	.LBB15452:
 8276              	.LBB15450:
 8277              	.LBB15448:
 8278              	.LBB15447:
 8279              	.LBB15446:
 8280              	.LBB15442:
 8281              	.LBB15440:
 8282              	.LBB15437:
 8283              	.LBB15434:
 8284              	.LBB15431:
GAS LISTING /tmp/ccvmoMuv.s 			page 516


 8285              	.LBB15430:
 8286              	.LBB15412:
 8287              	.LBB15413:
 104:/usr/include/boost/exception/info.hpp ****                 }
 8288              		.loc 3 104 0
 8289 0078 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 8289      000000
 8290 007f 488B7D38 		movq	56(%rbp), %rdi
 8291 0083 48894500 		movq	%rax, 0(%rbp)
 8292              	.LVL713:
 8293              	.LBB15414:
 8294              	.LBB15415:
 8295              	.LBB15416:
 8296              	.LBB15417:
 8297              	.LBB15418:
 8298              	.LBB15419:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 8299              		.loc 10 152 0
 8300 0087 488D4548 		leaq	72(%rbp), %rax
 8301              	.LBE15419:
 8302              	.LBE15418:
 8303              	.LBE15417:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 8304              		.loc 10 180 0
 8305 008b 4839C7   		cmpq	%rax, %rdi
 8306 008e 7405     		je	.L454
 8307              	.LVL714:
 8308              	.LBB15420:
 8309              	.LBB15421:
 8310              	.LBB15422:
 8311              	.LBB15423:
 8312              		.loc 12 110 0
 8313 0090 E8000000 		call	_ZdlPv@PLT
 8313      00
 8314              	.LVL715:
 8315              	.L454:
 8316              	.LBE15423:
 8317              	.LBE15422:
 8318              	.LBE15421:
 8319              	.LBE15420:
 8320              	.LBE15416:
 8321              	.LBE15415:
 8322              	.LBE15414:
 8323              	.LBB15424:
 8324              	.LBB15425:
 8325              	.LBB15426:
 8326              	.LBB15427:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 8327              		.loc 19 873 0
 8328 0095 488B7518 		movq	24(%rbp), %rsi
 8329              	.LBE15427:
 8330              	.LBE15426:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 8331              		.loc 36 96 0
 8332 0099 488D7D08 		leaq	8(%rbp), %rdi
 8333              	.LVL716:
 8334              	.LBB15429:
GAS LISTING /tmp/ccvmoMuv.s 			page 517


 8335              	.LBB15428:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 8336              		.loc 19 873 0
 8337 009d E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 8337      00
 8338              	.LVL717:
 8339              	.LBE15428:
 8340              	.LBE15429:
 8341              	.LBE15425:
 8342              	.LBE15424:
 8343              	.LBE15413:
 8344              	.LBE15412:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 8345              		.loc 3 172 0
 8346 00a2 BE600000 		movl	$96, %esi
 8346      00
 8347 00a7 4889EF   		movq	%rbp, %rdi
 8348 00aa E8000000 		call	_ZdlPvm@PLT
 8348      00
 8349              	.LVL718:
 8350 00af EB9B     		jmp	.L451
 8351              	.LVL719:
 8352              		.p2align 4,,10
 8353 00b1 0F1F8000 		.p2align 3
 8353      000000
 8354              	.L452:
 8355              	.LBE15430:
 8356              	.LBE15431:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 8357              		.loc 7 78 0
 8358 00b8 4889EF   		movq	%rbp, %rdi
 8359 00bb FFD0     		call	*%rax
 8360              	.LVL720:
 8361 00bd EB8D     		jmp	.L451
 8362              	.LBE15434:
 8363              	.LBE15437:
 8364              	.LBE15440:
 8365              	.LBE15442:
 8366              	.LBE15446:
 8367              	.LBE15447:
 8368              	.LBE15448:
 8369              	.LBE15450:
 8370              	.LBE15452:
 8371              		.cfi_endproc
 8372              	.LFE13808:
 8373              		.section	.gcc_except_table
 8374              	.LLSDA13808:
 8375 0073 FF       		.byte	0xff
 8376 0074 FF       		.byte	0xff
 8377 0075 01       		.byte	0x1
 8378 0076 00       		.uleb128 .LLSDACSE13808-.LLSDACSB13808
 8379              	.LLSDACSB13808:
 8380              	.LLSDACSE13808:
 8381              		.section	.text._ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function
 8383              		.set	.LTHUNK135,_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_functio
 8384 00bf 90       		.p2align 4,,15
 8385              		.weak	_ZThn16_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_ca
GAS LISTING /tmp/ccvmoMuv.s 			page 518


 8387              	_ZThn16_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED
 8388              	.LFB16019:
 479:/usr/include/boost/exception/exception.hpp ****                 {
 8389              		.loc 7 479 0
 8390              		.cfi_startproc
 8391 00c0 4883EF10 		subq	$16, %rdi
 8392 00c4 E937FFFF 		jmp	.LTHUNK135
 8392      FF
 8393              		.cfi_endproc
 8394              	.LFE16019:
 8396              		.set	.LTHUNK134,_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_functio
 8397 00c9 0F1F8000 		.p2align 4,,15
 8397      000000
 8398              		.weak	_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_
 8400              	_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEE
 8401              	.LFB16020:
 479:/usr/include/boost/exception/exception.hpp ****                 {
 8402              		.loc 7 479 0
 8403              		.cfi_startproc
 8404 00d0 4C8B17   		movq	(%rdi), %r10
 8405 00d3 49037AD8 		addq	-40(%r10), %rdi
 8406 00d7 E924FFFF 		jmp	.LTHUNK134
 8406      FF
 8407              		.cfi_endproc
 8408              	.LFE16020:
 8410              		.section	.text._ZN5boost16exception_detail10clone_implINS0_14bad_exception_EED1Ev,"axG",@progbits,
 8411              		.align 2
 8412              		.p2align 4,,15
 8413              		.weak	_ZN5boost16exception_detail10clone_implINS0_14bad_exception_EED1Ev
 8415              	_ZN5boost16exception_detail10clone_implINS0_14bad_exception_EED1Ev:
 8416              	.LFB13011:
 479:/usr/include/boost/exception/exception.hpp ****                 {
 8417              		.loc 7 479 0
 8418              		.cfi_startproc
 8419              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 8420              		.cfi_lsda 0x1b,.LLSDA13011
 8421              	.LVL721:
 8422              	.LBB15491:
 481:/usr/include/boost/exception/exception.hpp **** 
 8423              		.loc 7 481 0
 8424 0000 488D0500 		leaq	136+_ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE(%rip), %rax
 8424      000000
 8425              	.LBE15491:
 479:/usr/include/boost/exception/exception.hpp ****                 {
 8426              		.loc 7 479 0
 8427 0007 53       		pushq	%rbx
 8428              		.cfi_def_cfa_offset 16
 8429              		.cfi_offset 3, -16
 479:/usr/include/boost/exception/exception.hpp ****                 {
 8430              		.loc 7 479 0
 8431 0008 4889FB   		movq	%rdi, %rbx
 8432              	.LBB15546:
 8433              	.LBB15492:
 8434              	.LBB15493:
 8435              		.loc 29 115 0
 8436 000b 4883C728 		addq	$40, %rdi
 8437              	.LVL722:
GAS LISTING /tmp/ccvmoMuv.s 			page 519


 8438              	.LBE15493:
 8439              	.LBE15492:
 481:/usr/include/boost/exception/exception.hpp **** 
 8440              		.loc 7 481 0
 8441 000f 48894708 		movq	%rax, 8(%rdi)
 8442              	.LVL723:
 8443              	.LBB15542:
 8444              	.LBB15538:
 8445              		.loc 29 115 0
 8446 0013 488D0500 		leaq	16+_ZTVN5boost16exception_detail14bad_exception_E(%rip), %rax
 8446      000000
 8447 001a 488947D8 		movq	%rax, -40(%rdi)
 8448 001e 488D0500 		leaq	48+_ZTVN5boost16exception_detail14bad_exception_E(%rip), %rax
 8448      000000
 8449 0025 488907   		movq	%rax, (%rdi)
 8450 0028 E8000000 		call	_ZNSt13bad_exceptionD2Ev@PLT
 8450      00
 8451              	.LVL724:
 8452              	.LBB15494:
 8453              	.LBB15495:
 299:/usr/include/boost/exception/exception.hpp ****         {
 8454              		.loc 7 299 0
 8455 002d 488D0500 		leaq	16+_ZTVN5boost9exceptionE(%rip), %rax
 8455      000000
 8456 0034 488903   		movq	%rax, (%rbx)
 8457              	.LVL725:
 8458              	.LBB15496:
 8459              	.LBB15497:
 8460              	.LBB15498:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 8461              		.loc 7 78 0
 8462 0037 488B5B08 		movq	8(%rbx), %rbx
 8463              	.LVL726:
 8464 003b 4885DB   		testq	%rbx, %rbx
 8465 003e 7419     		je	.L457
 8466 0040 488B03   		movq	(%rbx), %rax
 8467 0043 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 8467      000000
 8468 004a 488B4020 		movq	32(%rax), %rax
 8469 004e 4839D0   		cmpq	%rdx, %rax
 8470 0051 754D     		jne	.L460
 8471              	.LVL727:
 8472              	.LBB15499:
 8473              	.LBB15500:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 8474              		.loc 3 168 0
 8475 0053 836B5801 		subl	$1, 88(%rbx)
 8476 0057 7407     		je	.L464
 8477              	.LVL728:
 8478              	.L457:
 8479              	.LBE15500:
 8480              	.LBE15499:
 8481              	.LBE15498:
 8482              	.LBE15497:
 8483              	.LBE15496:
 8484              	.LBE15495:
 8485              	.LBE15494:
GAS LISTING /tmp/ccvmoMuv.s 			page 520


 8486              	.LBE15538:
 8487              	.LBE15542:
 8488              	.LBE15546:
 481:/usr/include/boost/exception/exception.hpp **** 
 8489              		.loc 7 481 0
 8490 0059 5B       		popq	%rbx
 8491              		.cfi_remember_state
 8492              		.cfi_def_cfa_offset 8
 8493 005a C3       		ret
 8494              	.LVL729:
 8495 005b 0F1F4400 		.p2align 4,,10
 8495      00
 8496              		.p2align 3
 8497              	.L464:
 8498              		.cfi_restore_state
 8499              	.LBB15547:
 8500              	.LBB15543:
 8501              	.LBB15539:
 8502              	.LBB15535:
 8503              	.LBB15532:
 8504              	.LBB15529:
 8505              	.LBB15526:
 8506              	.LBB15523:
 8507              	.LBB15521:
 8508              	.LBB15519:
 8509              	.LBB15501:
 8510              	.LBB15502:
 104:/usr/include/boost/exception/info.hpp ****                 }
 8511              		.loc 3 104 0
 8512 0060 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 8512      000000
 8513 0067 488B7B38 		movq	56(%rbx), %rdi
 8514 006b 488903   		movq	%rax, (%rbx)
 8515              	.LVL730:
 8516              	.LBB15503:
 8517              	.LBB15504:
 8518              	.LBB15505:
 8519              	.LBB15506:
 8520              	.LBB15507:
 8521              	.LBB15508:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 8522              		.loc 10 152 0
 8523 006e 488D4348 		leaq	72(%rbx), %rax
 8524              	.LBE15508:
 8525              	.LBE15507:
 8526              	.LBE15506:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 8527              		.loc 10 180 0
 8528 0072 4839C7   		cmpq	%rax, %rdi
 8529 0075 7405     		je	.L462
 8530              	.LVL731:
 8531              	.LBB15509:
 8532              	.LBB15510:
 8533              	.LBB15511:
 8534              	.LBB15512:
 8535              		.loc 12 110 0
 8536 0077 E8000000 		call	_ZdlPv@PLT
GAS LISTING /tmp/ccvmoMuv.s 			page 521


 8536      00
 8537              	.LVL732:
 8538              	.L462:
 8539              	.LBE15512:
 8540              	.LBE15511:
 8541              	.LBE15510:
 8542              	.LBE15509:
 8543              	.LBE15505:
 8544              	.LBE15504:
 8545              	.LBE15503:
 8546              	.LBB15513:
 8547              	.LBB15514:
 8548              	.LBB15515:
 8549              	.LBB15516:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 8550              		.loc 19 873 0
 8551 007c 488B7318 		movq	24(%rbx), %rsi
 8552              	.LBE15516:
 8553              	.LBE15515:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 8554              		.loc 36 96 0
 8555 0080 488D7B08 		leaq	8(%rbx), %rdi
 8556              	.LVL733:
 8557              	.LBB15518:
 8558              	.LBB15517:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 8559              		.loc 19 873 0
 8560 0084 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 8560      00
 8561              	.LVL734:
 8562              	.LBE15517:
 8563              	.LBE15518:
 8564              	.LBE15514:
 8565              	.LBE15513:
 8566              	.LBE15502:
 8567              	.LBE15501:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 8568              		.loc 3 172 0
 8569 0089 4889DF   		movq	%rbx, %rdi
 8570 008c BE600000 		movl	$96, %esi
 8570      00
 8571              	.LBE15519:
 8572              	.LBE15521:
 8573              	.LBE15523:
 8574              	.LBE15526:
 8575              	.LBE15529:
 8576              	.LBE15532:
 8577              	.LBE15535:
 8578              	.LBE15539:
 8579              	.LBE15543:
 8580              	.LBE15547:
 481:/usr/include/boost/exception/exception.hpp **** 
 8581              		.loc 7 481 0
 8582 0091 5B       		popq	%rbx
 8583              		.cfi_remember_state
 8584              		.cfi_def_cfa_offset 8
 8585              	.LVL735:
GAS LISTING /tmp/ccvmoMuv.s 			page 522


 8586              	.LBB15548:
 8587              	.LBB15544:
 8588              	.LBB15540:
 8589              	.LBB15536:
 8590              	.LBB15533:
 8591              	.LBB15530:
 8592              	.LBB15527:
 8593              	.LBB15524:
 8594              	.LBB15522:
 8595              	.LBB15520:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 8596              		.loc 3 172 0
 8597 0092 E9000000 		jmp	_ZdlPvm@PLT
 8597      00
 8598              	.LVL736:
 8599 0097 660F1F84 		.p2align 4,,10
 8599      00000000 
 8599      00
 8600              		.p2align 3
 8601              	.L460:
 8602              		.cfi_restore_state
 8603              	.LBE15520:
 8604              	.LBE15522:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 8605              		.loc 7 78 0
 8606 00a0 4889DF   		movq	%rbx, %rdi
 8607              	.LBE15524:
 8608              	.LBE15527:
 8609              	.LBE15530:
 8610              	.LBE15533:
 8611              	.LBE15536:
 8612              	.LBE15540:
 8613              	.LBE15544:
 8614              	.LBE15548:
 481:/usr/include/boost/exception/exception.hpp **** 
 8615              		.loc 7 481 0
 8616 00a3 5B       		popq	%rbx
 8617              		.cfi_def_cfa_offset 8
 8618              	.LBB15549:
 8619              	.LBB15545:
 8620              	.LBB15541:
 8621              	.LBB15537:
 8622              	.LBB15534:
 8623              	.LBB15531:
 8624              	.LBB15528:
 8625              	.LBB15525:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 8626              		.loc 7 78 0
 8627 00a4 FFE0     		jmp	*%rax
 8628              	.LVL737:
 8629              	.LBE15525:
 8630              	.LBE15528:
 8631              	.LBE15531:
 8632              	.LBE15534:
 8633              	.LBE15537:
 8634              	.LBE15541:
 8635              	.LBE15545:
GAS LISTING /tmp/ccvmoMuv.s 			page 523


 8636              	.LBE15549:
 8637              		.cfi_endproc
 8638              	.LFE13011:
 8639              		.section	.gcc_except_table
 8640              	.LLSDA13011:
 8641 0077 FF       		.byte	0xff
 8642 0078 FF       		.byte	0xff
 8643 0079 01       		.byte	0x1
 8644 007a 00       		.uleb128 .LLSDACSE13011-.LLSDACSB13011
 8645              	.LLSDACSB13011:
 8646              	.LLSDACSE13011:
 8647              		.section	.text._ZN5boost16exception_detail10clone_implINS0_14bad_exception_EED1Ev,"axG",@progbits,
 8649              		.set	.LTHUNK73,_ZN5boost16exception_detail10clone_implINS0_14bad_exception_EED1Ev
 8650 00a6 662E0F1F 		.p2align 4,,15
 8650      84000000 
 8650      0000
 8651              		.weak	_ZThn40_N5boost16exception_detail10clone_implINS0_14bad_exception_EED1Ev
 8653              	_ZThn40_N5boost16exception_detail10clone_implINS0_14bad_exception_EED1Ev:
 8654              	.LFB16021:
 479:/usr/include/boost/exception/exception.hpp ****                 {
 8655              		.loc 7 479 0
 8656              		.cfi_startproc
 8657 00b0 4883EF28 		subq	$40, %rdi
 8658 00b4 E947FFFF 		jmp	.LTHUNK73
 8658      FF
 8659              		.cfi_endproc
 8660              	.LFE16021:
 8662              		.set	.LTHUNK72,_ZN5boost16exception_detail10clone_implINS0_14bad_exception_EED1Ev
 8663 00b9 0F1F8000 		.p2align 4,,15
 8663      000000
 8664              		.weak	_ZTv0_n40_N5boost16exception_detail10clone_implINS0_14bad_exception_EED1Ev
 8666              	_ZTv0_n40_N5boost16exception_detail10clone_implINS0_14bad_exception_EED1Ev:
 8667              	.LFB16022:
 479:/usr/include/boost/exception/exception.hpp ****                 {
 8668              		.loc 7 479 0
 8669              		.cfi_startproc
 8670 00c0 4C8B17   		movq	(%rdi), %r10
 8671 00c3 49037AD8 		addq	-40(%r10), %rdi
 8672 00c7 E934FFFF 		jmp	.LTHUNK72
 8672      FF
 8673              		.cfi_endproc
 8674              	.LFE16022:
 8676              		.section	.text._ZN5boost16exception_detail14bad_exception_D0Ev,"axG",@progbits,_ZN5boost16exceptio
 8677              		.align 2
 8678              		.p2align 4,,15
 8679              		.weak	_ZN5boost16exception_detail14bad_exception_D0Ev
 8681              	_ZN5boost16exception_detail14bad_exception_D0Ev:
 8682              	.LFB9900:
 8683              		.loc 29 115 0
 8684              		.cfi_startproc
 8685              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 8686              		.cfi_lsda 0x1b,.LLSDA9900
 8687              	.LVL738:
 8688 0000 55       		pushq	%rbp
 8689              		.cfi_def_cfa_offset 16
 8690              		.cfi_offset 6, -16
 8691              	.LBB15586:
GAS LISTING /tmp/ccvmoMuv.s 			page 524


 8692              	.LBB15587:
 8693 0001 488D0500 		leaq	16+_ZTVN5boost16exception_detail14bad_exception_E(%rip), %rax
 8693      000000
 8694              	.LBE15587:
 8695              	.LBE15586:
 8696 0008 53       		pushq	%rbx
 8697              		.cfi_def_cfa_offset 24
 8698              		.cfi_offset 3, -24
 8699 0009 4889FB   		movq	%rdi, %rbx
 8700              	.LBB15626:
 8701              	.LBB15623:
 8702 000c 4883C728 		addq	$40, %rdi
 8703              	.LVL739:
 8704              	.LBE15623:
 8705              	.LBE15626:
 8706 0010 4883EC08 		subq	$8, %rsp
 8707              		.cfi_def_cfa_offset 32
 8708              	.LBB15627:
 8709              	.LBB15624:
 8710              		.loc 29 115 0
 8711 0014 488947D8 		movq	%rax, -40(%rdi)
 8712 0018 488D0500 		leaq	48+_ZTVN5boost16exception_detail14bad_exception_E(%rip), %rax
 8712      000000
 8713 001f 488907   		movq	%rax, (%rdi)
 8714 0022 E8000000 		call	_ZNSt13bad_exceptionD2Ev@PLT
 8714      00
 8715              	.LVL740:
 8716              	.LBB15588:
 8717              	.LBB15589:
 8718              	.LBB15590:
 8719              	.LBB15591:
 8720              	.LBB15592:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 8721              		.loc 7 78 0
 8722 0027 488B6B08 		movq	8(%rbx), %rbp
 8723              	.LBE15592:
 8724              	.LBE15591:
 8725              	.LBE15590:
 299:/usr/include/boost/exception/exception.hpp ****         {
 8726              		.loc 7 299 0
 8727 002b 488D0500 		leaq	16+_ZTVN5boost9exceptionE(%rip), %rax
 8727      000000
 8728 0032 488903   		movq	%rax, (%rbx)
 8729              	.LVL741:
 8730              	.LBB15619:
 8731              	.LBB15617:
 8732              	.LBB15615:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 8733              		.loc 7 78 0
 8734 0035 4885ED   		testq	%rbp, %rbp
 8735 0038 741A     		je	.L467
 8736 003a 488B4500 		movq	0(%rbp), %rax
 8737 003e 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 8737      000000
 8738 0045 488B4020 		movq	32(%rax), %rax
 8739 0049 4839D0   		cmpq	%rdx, %rax
 8740 004c 7562     		jne	.L468
GAS LISTING /tmp/ccvmoMuv.s 			page 525


 8741              	.LVL742:
 8742              	.LBB15593:
 8743              	.LBB15594:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 8744              		.loc 3 168 0
 8745 004e 836D5801 		subl	$1, 88(%rbp)
 8746 0052 741C     		je	.L472
 8747              	.LVL743:
 8748              	.L467:
 8749              	.LBE15594:
 8750              	.LBE15593:
 8751              	.LBE15615:
 8752              	.LBE15617:
 8753              	.LBE15619:
 8754              	.LBE15589:
 8755              	.LBE15588:
 8756              	.LBE15624:
 8757              	.LBE15627:
 8758              		.loc 29 115 0
 8759 0054 4883C408 		addq	$8, %rsp
 8760              		.cfi_remember_state
 8761              		.cfi_def_cfa_offset 24
 8762 0058 4889DF   		movq	%rbx, %rdi
 8763 005b BE300000 		movl	$48, %esi
 8763      00
 8764 0060 5B       		popq	%rbx
 8765              		.cfi_def_cfa_offset 16
 8766              	.LVL744:
 8767 0061 5D       		popq	%rbp
 8768              		.cfi_def_cfa_offset 8
 8769 0062 E9000000 		jmp	_ZdlPvm@PLT
 8769      00
 8770              	.LVL745:
 8771 0067 660F1F84 		.p2align 4,,10
 8771      00000000 
 8771      00
 8772              		.p2align 3
 8773              	.L472:
 8774              		.cfi_restore_state
 8775              	.LBB15628:
 8776              	.LBB15625:
 8777              	.LBB15622:
 8778              	.LBB15621:
 8779              	.LBB15620:
 8780              	.LBB15618:
 8781              	.LBB15616:
 8782              	.LBB15614:
 8783              	.LBB15613:
 8784              	.LBB15595:
 8785              	.LBB15596:
 104:/usr/include/boost/exception/info.hpp ****                 }
 8786              		.loc 3 104 0
 8787 0070 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 8787      000000
 8788 0077 488B7D38 		movq	56(%rbp), %rdi
 8789 007b 48894500 		movq	%rax, 0(%rbp)
 8790              	.LVL746:
GAS LISTING /tmp/ccvmoMuv.s 			page 526


 8791              	.LBB15597:
 8792              	.LBB15598:
 8793              	.LBB15599:
 8794              	.LBB15600:
 8795              	.LBB15601:
 8796              	.LBB15602:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 8797              		.loc 10 152 0
 8798 007f 488D4548 		leaq	72(%rbp), %rax
 8799              	.LBE15602:
 8800              	.LBE15601:
 8801              	.LBE15600:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 8802              		.loc 10 180 0
 8803 0083 4839C7   		cmpq	%rax, %rdi
 8804 0086 7405     		je	.L470
 8805              	.LVL747:
 8806              	.LBB15603:
 8807              	.LBB15604:
 8808              	.LBB15605:
 8809              	.LBB15606:
 8810              		.loc 12 110 0
 8811 0088 E8000000 		call	_ZdlPv@PLT
 8811      00
 8812              	.LVL748:
 8813              	.L470:
 8814              	.LBE15606:
 8815              	.LBE15605:
 8816              	.LBE15604:
 8817              	.LBE15603:
 8818              	.LBE15599:
 8819              	.LBE15598:
 8820              	.LBE15597:
 8821              	.LBB15607:
 8822              	.LBB15608:
 8823              	.LBB15609:
 8824              	.LBB15610:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 8825              		.loc 19 873 0
 8826 008d 488B7518 		movq	24(%rbp), %rsi
 8827              	.LBE15610:
 8828              	.LBE15609:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 8829              		.loc 36 96 0
 8830 0091 488D7D08 		leaq	8(%rbp), %rdi
 8831              	.LVL749:
 8832              	.LBB15612:
 8833              	.LBB15611:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 8834              		.loc 19 873 0
 8835 0095 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 8835      00
 8836              	.LVL750:
 8837              	.LBE15611:
 8838              	.LBE15612:
 8839              	.LBE15608:
 8840              	.LBE15607:
GAS LISTING /tmp/ccvmoMuv.s 			page 527


 8841              	.LBE15596:
 8842              	.LBE15595:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 8843              		.loc 3 172 0
 8844 009a BE600000 		movl	$96, %esi
 8844      00
 8845 009f 4889EF   		movq	%rbp, %rdi
 8846 00a2 E8000000 		call	_ZdlPvm@PLT
 8846      00
 8847              	.LVL751:
 8848 00a7 EBAB     		jmp	.L467
 8849              	.LVL752:
 8850 00a9 0F1F8000 		.p2align 4,,10
 8850      000000
 8851              		.p2align 3
 8852              	.L468:
 8853              	.LBE15613:
 8854              	.LBE15614:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 8855              		.loc 7 78 0
 8856 00b0 4889EF   		movq	%rbp, %rdi
 8857 00b3 FFD0     		call	*%rax
 8858              	.LVL753:
 8859 00b5 EB9D     		jmp	.L467
 8860              	.LBE15616:
 8861              	.LBE15618:
 8862              	.LBE15620:
 8863              	.LBE15621:
 8864              	.LBE15622:
 8865              	.LBE15625:
 8866              	.LBE15628:
 8867              		.cfi_endproc
 8868              	.LFE9900:
 8869              		.section	.gcc_except_table
 8870              	.LLSDA9900:
 8871 007b FF       		.byte	0xff
 8872 007c FF       		.byte	0xff
 8873 007d 01       		.byte	0x1
 8874 007e 00       		.uleb128 .LLSDACSE9900-.LLSDACSB9900
 8875              	.LLSDACSB9900:
 8876              	.LLSDACSE9900:
 8877              		.section	.text._ZN5boost16exception_detail14bad_exception_D0Ev,"axG",@progbits,_ZN5boost16exceptio
 8879              		.set	.LTHUNK3,_ZN5boost16exception_detail14bad_exception_D0Ev
 8880 00b7 660F1F84 		.p2align 4,,15
 8880      00000000 
 8880      00
 8881              		.weak	_ZThn40_N5boost16exception_detail14bad_exception_D0Ev
 8883              	_ZThn40_N5boost16exception_detail14bad_exception_D0Ev:
 8884              	.LFB16023:
 8885              		.loc 29 115 0
 8886              		.cfi_startproc
 8887 00c0 4883EF28 		subq	$40, %rdi
 8888 00c4 E937FFFF 		jmp	.LTHUNK3
 8888      FF
 8889              		.cfi_endproc
 8890              	.LFE16023:
 8892              		.section	.text._ZN5boost16exception_detail10bad_alloc_D0Ev,"axG",@progbits,_ZN5boost16exception_de
GAS LISTING /tmp/ccvmoMuv.s 			page 528


 8893              		.align 2
 8894              		.p2align 4,,15
 8895              		.weak	_ZN5boost16exception_detail10bad_alloc_D0Ev
 8897              	_ZN5boost16exception_detail10bad_alloc_D0Ev:
 8898              	.LFB9896:
 107:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 };
 8899              		.loc 29 107 0
 8900              		.cfi_startproc
 8901              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 8902              		.cfi_lsda 0x1b,.LLSDA9896
 8903              	.LVL754:
 8904 0000 55       		pushq	%rbp
 8905              		.cfi_def_cfa_offset 16
 8906              		.cfi_offset 6, -16
 8907              	.LBB15665:
 8908              	.LBB15666:
 8909 0001 488D0500 		leaq	16+_ZTVN5boost16exception_detail10bad_alloc_E(%rip), %rax
 8909      000000
 8910              	.LBE15666:
 8911              	.LBE15665:
 8912 0008 53       		pushq	%rbx
 8913              		.cfi_def_cfa_offset 24
 8914              		.cfi_offset 3, -24
 8915 0009 4889FB   		movq	%rdi, %rbx
 8916              	.LBB15705:
 8917              	.LBB15702:
 8918 000c 4883C728 		addq	$40, %rdi
 8919              	.LVL755:
 8920              	.LBE15702:
 8921              	.LBE15705:
 8922 0010 4883EC08 		subq	$8, %rsp
 8923              		.cfi_def_cfa_offset 32
 8924              	.LBB15706:
 8925              	.LBB15703:
 107:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 };
 8926              		.loc 29 107 0
 8927 0014 488947D8 		movq	%rax, -40(%rdi)
 8928 0018 488D0500 		leaq	48+_ZTVN5boost16exception_detail10bad_alloc_E(%rip), %rax
 8928      000000
 8929 001f 488907   		movq	%rax, (%rdi)
 8930 0022 E8000000 		call	_ZNSt9bad_allocD2Ev@PLT
 8930      00
 8931              	.LVL756:
 8932              	.LBB15667:
 8933              	.LBB15668:
 8934              	.LBB15669:
 8935              	.LBB15670:
 8936              	.LBB15671:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 8937              		.loc 7 78 0
 8938 0027 488B6B08 		movq	8(%rbx), %rbp
 8939              	.LBE15671:
 8940              	.LBE15670:
 8941              	.LBE15669:
 299:/usr/include/boost/exception/exception.hpp ****         {
 8942              		.loc 7 299 0
 8943 002b 488D0500 		leaq	16+_ZTVN5boost9exceptionE(%rip), %rax
GAS LISTING /tmp/ccvmoMuv.s 			page 529


 8943      000000
 8944 0032 488903   		movq	%rax, (%rbx)
 8945              	.LVL757:
 8946              	.LBB15698:
 8947              	.LBB15696:
 8948              	.LBB15694:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 8949              		.loc 7 78 0
 8950 0035 4885ED   		testq	%rbp, %rbp
 8951 0038 741A     		je	.L475
 8952 003a 488B4500 		movq	0(%rbp), %rax
 8953 003e 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 8953      000000
 8954 0045 488B4020 		movq	32(%rax), %rax
 8955 0049 4839D0   		cmpq	%rdx, %rax
 8956 004c 7562     		jne	.L476
 8957              	.LVL758:
 8958              	.LBB15672:
 8959              	.LBB15673:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 8960              		.loc 3 168 0
 8961 004e 836D5801 		subl	$1, 88(%rbp)
 8962 0052 741C     		je	.L480
 8963              	.LVL759:
 8964              	.L475:
 8965              	.LBE15673:
 8966              	.LBE15672:
 8967              	.LBE15694:
 8968              	.LBE15696:
 8969              	.LBE15698:
 8970              	.LBE15668:
 8971              	.LBE15667:
 8972              	.LBE15703:
 8973              	.LBE15706:
 107:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 };
 8974              		.loc 29 107 0
 8975 0054 4883C408 		addq	$8, %rsp
 8976              		.cfi_remember_state
 8977              		.cfi_def_cfa_offset 24
 8978 0058 4889DF   		movq	%rbx, %rdi
 8979 005b BE300000 		movl	$48, %esi
 8979      00
 8980 0060 5B       		popq	%rbx
 8981              		.cfi_def_cfa_offset 16
 8982              	.LVL760:
 8983 0061 5D       		popq	%rbp
 8984              		.cfi_def_cfa_offset 8
 8985 0062 E9000000 		jmp	_ZdlPvm@PLT
 8985      00
 8986              	.LVL761:
 8987 0067 660F1F84 		.p2align 4,,10
 8987      00000000 
 8987      00
 8988              		.p2align 3
 8989              	.L480:
 8990              		.cfi_restore_state
 8991              	.LBB15707:
GAS LISTING /tmp/ccvmoMuv.s 			page 530


 8992              	.LBB15704:
 8993              	.LBB15701:
 8994              	.LBB15700:
 8995              	.LBB15699:
 8996              	.LBB15697:
 8997              	.LBB15695:
 8998              	.LBB15693:
 8999              	.LBB15692:
 9000              	.LBB15674:
 9001              	.LBB15675:
 104:/usr/include/boost/exception/info.hpp ****                 }
 9002              		.loc 3 104 0
 9003 0070 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 9003      000000
 9004 0077 488B7D38 		movq	56(%rbp), %rdi
 9005 007b 48894500 		movq	%rax, 0(%rbp)
 9006              	.LVL762:
 9007              	.LBB15676:
 9008              	.LBB15677:
 9009              	.LBB15678:
 9010              	.LBB15679:
 9011              	.LBB15680:
 9012              	.LBB15681:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 9013              		.loc 10 152 0
 9014 007f 488D4548 		leaq	72(%rbp), %rax
 9015              	.LBE15681:
 9016              	.LBE15680:
 9017              	.LBE15679:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 9018              		.loc 10 180 0
 9019 0083 4839C7   		cmpq	%rax, %rdi
 9020 0086 7405     		je	.L478
 9021              	.LVL763:
 9022              	.LBB15682:
 9023              	.LBB15683:
 9024              	.LBB15684:
 9025              	.LBB15685:
 9026              		.loc 12 110 0
 9027 0088 E8000000 		call	_ZdlPv@PLT
 9027      00
 9028              	.LVL764:
 9029              	.L478:
 9030              	.LBE15685:
 9031              	.LBE15684:
 9032              	.LBE15683:
 9033              	.LBE15682:
 9034              	.LBE15678:
 9035              	.LBE15677:
 9036              	.LBE15676:
 9037              	.LBB15686:
 9038              	.LBB15687:
 9039              	.LBB15688:
 9040              	.LBB15689:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 9041              		.loc 19 873 0
 9042 008d 488B7518 		movq	24(%rbp), %rsi
GAS LISTING /tmp/ccvmoMuv.s 			page 531


 9043              	.LBE15689:
 9044              	.LBE15688:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 9045              		.loc 36 96 0
 9046 0091 488D7D08 		leaq	8(%rbp), %rdi
 9047              	.LVL765:
 9048              	.LBB15691:
 9049              	.LBB15690:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 9050              		.loc 19 873 0
 9051 0095 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 9051      00
 9052              	.LVL766:
 9053              	.LBE15690:
 9054              	.LBE15691:
 9055              	.LBE15687:
 9056              	.LBE15686:
 9057              	.LBE15675:
 9058              	.LBE15674:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 9059              		.loc 3 172 0
 9060 009a BE600000 		movl	$96, %esi
 9060      00
 9061 009f 4889EF   		movq	%rbp, %rdi
 9062 00a2 E8000000 		call	_ZdlPvm@PLT
 9062      00
 9063              	.LVL767:
 9064 00a7 EBAB     		jmp	.L475
 9065              	.LVL768:
 9066 00a9 0F1F8000 		.p2align 4,,10
 9066      000000
 9067              		.p2align 3
 9068              	.L476:
 9069              	.LBE15692:
 9070              	.LBE15693:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 9071              		.loc 7 78 0
 9072 00b0 4889EF   		movq	%rbp, %rdi
 9073 00b3 FFD0     		call	*%rax
 9074              	.LVL769:
 9075 00b5 EB9D     		jmp	.L475
 9076              	.LBE15695:
 9077              	.LBE15697:
 9078              	.LBE15699:
 9079              	.LBE15700:
 9080              	.LBE15701:
 9081              	.LBE15704:
 9082              	.LBE15707:
 9083              		.cfi_endproc
 9084              	.LFE9896:
 9085              		.section	.gcc_except_table
 9086              	.LLSDA9896:
 9087 007f FF       		.byte	0xff
 9088 0080 FF       		.byte	0xff
 9089 0081 01       		.byte	0x1
 9090 0082 00       		.uleb128 .LLSDACSE9896-.LLSDACSB9896
 9091              	.LLSDACSB9896:
GAS LISTING /tmp/ccvmoMuv.s 			page 532


 9092              	.LLSDACSE9896:
 9093              		.section	.text._ZN5boost16exception_detail10bad_alloc_D0Ev,"axG",@progbits,_ZN5boost16exception_de
 9095              		.set	.LTHUNK1,_ZN5boost16exception_detail10bad_alloc_D0Ev
 9096 00b7 660F1F84 		.p2align 4,,15
 9096      00000000 
 9096      00
 9097              		.weak	_ZThn40_N5boost16exception_detail10bad_alloc_D0Ev
 9099              	_ZThn40_N5boost16exception_detail10bad_alloc_D0Ev:
 9100              	.LFB16024:
 107:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 };
 9101              		.loc 29 107 0
 9102              		.cfi_startproc
 9103 00c0 4883EF28 		subq	$40, %rdi
 9104 00c4 E937FFFF 		jmp	.LTHUNK1
 9104      FF
 9105              		.cfi_endproc
 9106              	.LFE16024:
 9108              		.section	.text._ZN5boost16exception_detail10clone_implINS0_10bad_alloc_EED1Ev,"axG",@progbits,_ZN5
 9109              		.align 2
 9110              		.p2align 4,,15
 9111              		.weak	_ZN5boost16exception_detail10clone_implINS0_10bad_alloc_EED1Ev
 9113              	_ZN5boost16exception_detail10clone_implINS0_10bad_alloc_EED1Ev:
 9114              	.LFB12995:
 479:/usr/include/boost/exception/exception.hpp ****                 {
 9115              		.loc 7 479 0
 9116              		.cfi_startproc
 9117              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 9118              		.cfi_lsda 0x1b,.LLSDA12995
 9119              	.LVL770:
 9120              	.LBB15746:
 481:/usr/include/boost/exception/exception.hpp **** 
 9121              		.loc 7 481 0
 9122 0000 488D0500 		leaq	136+_ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE(%rip), %rax
 9122      000000
 9123              	.LBE15746:
 479:/usr/include/boost/exception/exception.hpp ****                 {
 9124              		.loc 7 479 0
 9125 0007 53       		pushq	%rbx
 9126              		.cfi_def_cfa_offset 16
 9127              		.cfi_offset 3, -16
 479:/usr/include/boost/exception/exception.hpp ****                 {
 9128              		.loc 7 479 0
 9129 0008 4889FB   		movq	%rdi, %rbx
 9130              	.LBB15801:
 9131              	.LBB15747:
 9132              	.LBB15748:
 107:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 };
 9133              		.loc 29 107 0
 9134 000b 4883C728 		addq	$40, %rdi
 9135              	.LVL771:
 9136              	.LBE15748:
 9137              	.LBE15747:
 481:/usr/include/boost/exception/exception.hpp **** 
 9138              		.loc 7 481 0
 9139 000f 48894708 		movq	%rax, 8(%rdi)
 9140              	.LVL772:
 9141              	.LBB15797:
GAS LISTING /tmp/ccvmoMuv.s 			page 533


 9142              	.LBB15793:
 107:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 };
 9143              		.loc 29 107 0
 9144 0013 488D0500 		leaq	16+_ZTVN5boost16exception_detail10bad_alloc_E(%rip), %rax
 9144      000000
 9145 001a 488947D8 		movq	%rax, -40(%rdi)
 9146 001e 488D0500 		leaq	48+_ZTVN5boost16exception_detail10bad_alloc_E(%rip), %rax
 9146      000000
 9147 0025 488907   		movq	%rax, (%rdi)
 9148 0028 E8000000 		call	_ZNSt9bad_allocD2Ev@PLT
 9148      00
 9149              	.LVL773:
 9150              	.LBB15749:
 9151              	.LBB15750:
 299:/usr/include/boost/exception/exception.hpp ****         {
 9152              		.loc 7 299 0
 9153 002d 488D0500 		leaq	16+_ZTVN5boost9exceptionE(%rip), %rax
 9153      000000
 9154 0034 488903   		movq	%rax, (%rbx)
 9155              	.LVL774:
 9156              	.LBB15751:
 9157              	.LBB15752:
 9158              	.LBB15753:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 9159              		.loc 7 78 0
 9160 0037 488B5B08 		movq	8(%rbx), %rbx
 9161              	.LVL775:
 9162 003b 4885DB   		testq	%rbx, %rbx
 9163 003e 7419     		je	.L481
 9164 0040 488B03   		movq	(%rbx), %rax
 9165 0043 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 9165      000000
 9166 004a 488B4020 		movq	32(%rax), %rax
 9167 004e 4839D0   		cmpq	%rdx, %rax
 9168 0051 754D     		jne	.L484
 9169              	.LVL776:
 9170              	.LBB15754:
 9171              	.LBB15755:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 9172              		.loc 3 168 0
 9173 0053 836B5801 		subl	$1, 88(%rbx)
 9174 0057 7407     		je	.L488
 9175              	.LVL777:
 9176              	.L481:
 9177              	.LBE15755:
 9178              	.LBE15754:
 9179              	.LBE15753:
 9180              	.LBE15752:
 9181              	.LBE15751:
 9182              	.LBE15750:
 9183              	.LBE15749:
 9184              	.LBE15793:
 9185              	.LBE15797:
 9186              	.LBE15801:
 481:/usr/include/boost/exception/exception.hpp **** 
 9187              		.loc 7 481 0
 9188 0059 5B       		popq	%rbx
GAS LISTING /tmp/ccvmoMuv.s 			page 534


 9189              		.cfi_remember_state
 9190              		.cfi_def_cfa_offset 8
 9191 005a C3       		ret
 9192              	.LVL778:
 9193 005b 0F1F4400 		.p2align 4,,10
 9193      00
 9194              		.p2align 3
 9195              	.L488:
 9196              		.cfi_restore_state
 9197              	.LBB15802:
 9198              	.LBB15798:
 9199              	.LBB15794:
 9200              	.LBB15790:
 9201              	.LBB15787:
 9202              	.LBB15784:
 9203              	.LBB15781:
 9204              	.LBB15778:
 9205              	.LBB15776:
 9206              	.LBB15774:
 9207              	.LBB15756:
 9208              	.LBB15757:
 104:/usr/include/boost/exception/info.hpp ****                 }
 9209              		.loc 3 104 0
 9210 0060 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 9210      000000
 9211 0067 488B7B38 		movq	56(%rbx), %rdi
 9212 006b 488903   		movq	%rax, (%rbx)
 9213              	.LVL779:
 9214              	.LBB15758:
 9215              	.LBB15759:
 9216              	.LBB15760:
 9217              	.LBB15761:
 9218              	.LBB15762:
 9219              	.LBB15763:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 9220              		.loc 10 152 0
 9221 006e 488D4348 		leaq	72(%rbx), %rax
 9222              	.LBE15763:
 9223              	.LBE15762:
 9224              	.LBE15761:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 9225              		.loc 10 180 0
 9226 0072 4839C7   		cmpq	%rax, %rdi
 9227 0075 7405     		je	.L486
 9228              	.LVL780:
 9229              	.LBB15764:
 9230              	.LBB15765:
 9231              	.LBB15766:
 9232              	.LBB15767:
 9233              		.loc 12 110 0
 9234 0077 E8000000 		call	_ZdlPv@PLT
 9234      00
 9235              	.LVL781:
 9236              	.L486:
 9237              	.LBE15767:
 9238              	.LBE15766:
 9239              	.LBE15765:
GAS LISTING /tmp/ccvmoMuv.s 			page 535


 9240              	.LBE15764:
 9241              	.LBE15760:
 9242              	.LBE15759:
 9243              	.LBE15758:
 9244              	.LBB15768:
 9245              	.LBB15769:
 9246              	.LBB15770:
 9247              	.LBB15771:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 9248              		.loc 19 873 0
 9249 007c 488B7318 		movq	24(%rbx), %rsi
 9250              	.LBE15771:
 9251              	.LBE15770:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 9252              		.loc 36 96 0
 9253 0080 488D7B08 		leaq	8(%rbx), %rdi
 9254              	.LVL782:
 9255              	.LBB15773:
 9256              	.LBB15772:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 9257              		.loc 19 873 0
 9258 0084 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 9258      00
 9259              	.LVL783:
 9260              	.LBE15772:
 9261              	.LBE15773:
 9262              	.LBE15769:
 9263              	.LBE15768:
 9264              	.LBE15757:
 9265              	.LBE15756:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 9266              		.loc 3 172 0
 9267 0089 4889DF   		movq	%rbx, %rdi
 9268 008c BE600000 		movl	$96, %esi
 9268      00
 9269              	.LBE15774:
 9270              	.LBE15776:
 9271              	.LBE15778:
 9272              	.LBE15781:
 9273              	.LBE15784:
 9274              	.LBE15787:
 9275              	.LBE15790:
 9276              	.LBE15794:
 9277              	.LBE15798:
 9278              	.LBE15802:
 481:/usr/include/boost/exception/exception.hpp **** 
 9279              		.loc 7 481 0
 9280 0091 5B       		popq	%rbx
 9281              		.cfi_remember_state
 9282              		.cfi_def_cfa_offset 8
 9283              	.LVL784:
 9284              	.LBB15803:
 9285              	.LBB15799:
 9286              	.LBB15795:
 9287              	.LBB15791:
 9288              	.LBB15788:
 9289              	.LBB15785:
GAS LISTING /tmp/ccvmoMuv.s 			page 536


 9290              	.LBB15782:
 9291              	.LBB15779:
 9292              	.LBB15777:
 9293              	.LBB15775:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 9294              		.loc 3 172 0
 9295 0092 E9000000 		jmp	_ZdlPvm@PLT
 9295      00
 9296              	.LVL785:
 9297 0097 660F1F84 		.p2align 4,,10
 9297      00000000 
 9297      00
 9298              		.p2align 3
 9299              	.L484:
 9300              		.cfi_restore_state
 9301              	.LBE15775:
 9302              	.LBE15777:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 9303              		.loc 7 78 0
 9304 00a0 4889DF   		movq	%rbx, %rdi
 9305              	.LBE15779:
 9306              	.LBE15782:
 9307              	.LBE15785:
 9308              	.LBE15788:
 9309              	.LBE15791:
 9310              	.LBE15795:
 9311              	.LBE15799:
 9312              	.LBE15803:
 481:/usr/include/boost/exception/exception.hpp **** 
 9313              		.loc 7 481 0
 9314 00a3 5B       		popq	%rbx
 9315              		.cfi_def_cfa_offset 8
 9316              	.LBB15804:
 9317              	.LBB15800:
 9318              	.LBB15796:
 9319              	.LBB15792:
 9320              	.LBB15789:
 9321              	.LBB15786:
 9322              	.LBB15783:
 9323              	.LBB15780:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 9324              		.loc 7 78 0
 9325 00a4 FFE0     		jmp	*%rax
 9326              	.LVL786:
 9327              	.LBE15780:
 9328              	.LBE15783:
 9329              	.LBE15786:
 9330              	.LBE15789:
 9331              	.LBE15792:
 9332              	.LBE15796:
 9333              	.LBE15800:
 9334              	.LBE15804:
 9335              		.cfi_endproc
 9336              	.LFE12995:
 9337              		.section	.gcc_except_table
 9338              	.LLSDA12995:
 9339 0083 FF       		.byte	0xff
GAS LISTING /tmp/ccvmoMuv.s 			page 537


 9340 0084 FF       		.byte	0xff
 9341 0085 01       		.byte	0x1
 9342 0086 00       		.uleb128 .LLSDACSE12995-.LLSDACSB12995
 9343              	.LLSDACSB12995:
 9344              	.LLSDACSE12995:
 9345              		.section	.text._ZN5boost16exception_detail10clone_implINS0_10bad_alloc_EED1Ev,"axG",@progbits,_ZN5
 9347              		.set	.LTHUNK69,_ZN5boost16exception_detail10clone_implINS0_10bad_alloc_EED1Ev
 9348 00a6 662E0F1F 		.p2align 4,,15
 9348      84000000 
 9348      0000
 9349              		.weak	_ZThn40_N5boost16exception_detail10clone_implINS0_10bad_alloc_EED1Ev
 9351              	_ZThn40_N5boost16exception_detail10clone_implINS0_10bad_alloc_EED1Ev:
 9352              	.LFB16025:
 479:/usr/include/boost/exception/exception.hpp ****                 {
 9353              		.loc 7 479 0
 9354              		.cfi_startproc
 9355 00b0 4883EF28 		subq	$40, %rdi
 9356 00b4 E947FFFF 		jmp	.LTHUNK69
 9356      FF
 9357              		.cfi_endproc
 9358              	.LFE16025:
 9360              		.set	.LTHUNK68,_ZN5boost16exception_detail10clone_implINS0_10bad_alloc_EED1Ev
 9361 00b9 0F1F8000 		.p2align 4,,15
 9361      000000
 9362              		.weak	_ZTv0_n40_N5boost16exception_detail10clone_implINS0_10bad_alloc_EED1Ev
 9364              	_ZTv0_n40_N5boost16exception_detail10clone_implINS0_10bad_alloc_EED1Ev:
 9365              	.LFB16026:
 479:/usr/include/boost/exception/exception.hpp ****                 {
 9366              		.loc 7 479 0
 9367              		.cfi_startproc
 9368 00c0 4C8B17   		movq	(%rdi), %r10
 9369 00c3 49037AD8 		addq	-40(%r10), %rdi
 9370 00c7 E934FFFF 		jmp	.LTHUNK68
 9370      FF
 9371              		.cfi_endproc
 9372              	.LFE16026:
 9374              		.section	.text._ZN5boost16exception_detail10clone_implINS0_14bad_exception_EED0Ev,"axG",@progbits,
 9375              		.align 2
 9376              		.p2align 4,,15
 9377              		.weak	_ZN5boost16exception_detail10clone_implINS0_14bad_exception_EED0Ev
 9379              	_ZN5boost16exception_detail10clone_implINS0_14bad_exception_EED0Ev:
 9380              	.LFB13012:
 479:/usr/include/boost/exception/exception.hpp ****                 {
 9381              		.loc 7 479 0
 9382              		.cfi_startproc
 9383              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 9384              		.cfi_lsda 0x1b,.LLSDA13012
 9385              	.LVL787:
 9386 0000 55       		pushq	%rbp
 9387              		.cfi_def_cfa_offset 16
 9388              		.cfi_offset 6, -16
 9389              	.LBB15847:
 9390              	.LBB15848:
 481:/usr/include/boost/exception/exception.hpp **** 
 9391              		.loc 7 481 0
 9392 0001 488D0500 		leaq	136+_ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE(%rip), %rax
 9392      000000
GAS LISTING /tmp/ccvmoMuv.s 			page 538


 9393              	.LBE15848:
 9394              	.LBE15847:
 479:/usr/include/boost/exception/exception.hpp ****                 {
 9395              		.loc 7 479 0
 9396 0008 53       		pushq	%rbx
 9397              		.cfi_def_cfa_offset 24
 9398              		.cfi_offset 3, -24
 9399 0009 4889FB   		movq	%rdi, %rbx
 9400              	.LBB15893:
 9401              	.LBB15890:
 9402              	.LBB15849:
 9403              	.LBB15850:
 9404              		.loc 29 115 0
 9405 000c 4883C728 		addq	$40, %rdi
 9406              	.LVL788:
 9407              	.LBE15850:
 9408              	.LBE15849:
 9409              	.LBE15890:
 9410              	.LBE15893:
 479:/usr/include/boost/exception/exception.hpp ****                 {
 9411              		.loc 7 479 0
 9412 0010 4883EC08 		subq	$8, %rsp
 9413              		.cfi_def_cfa_offset 32
 9414              	.LBB15894:
 9415              	.LBB15891:
 481:/usr/include/boost/exception/exception.hpp **** 
 9416              		.loc 7 481 0
 9417 0014 48894708 		movq	%rax, 8(%rdi)
 9418              	.LVL789:
 9419              	.LBB15888:
 9420              	.LBB15886:
 9421              		.loc 29 115 0
 9422 0018 488D0500 		leaq	16+_ZTVN5boost16exception_detail14bad_exception_E(%rip), %rax
 9422      000000
 9423 001f 488947D8 		movq	%rax, -40(%rdi)
 9424 0023 488D0500 		leaq	48+_ZTVN5boost16exception_detail14bad_exception_E(%rip), %rax
 9424      000000
 9425 002a 488907   		movq	%rax, (%rdi)
 9426 002d E8000000 		call	_ZNSt13bad_exceptionD2Ev@PLT
 9426      00
 9427              	.LVL790:
 9428              	.LBB15851:
 9429              	.LBB15852:
 9430              	.LBB15853:
 9431              	.LBB15854:
 9432              	.LBB15855:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 9433              		.loc 7 78 0
 9434 0032 488B6B08 		movq	8(%rbx), %rbp
 9435              	.LBE15855:
 9436              	.LBE15854:
 9437              	.LBE15853:
 299:/usr/include/boost/exception/exception.hpp ****         {
 9438              		.loc 7 299 0
 9439 0036 488D0500 		leaq	16+_ZTVN5boost9exceptionE(%rip), %rax
 9439      000000
 9440 003d 488903   		movq	%rax, (%rbx)
GAS LISTING /tmp/ccvmoMuv.s 			page 539


 9441              	.LVL791:
 9442              	.LBB15882:
 9443              	.LBB15880:
 9444              	.LBB15878:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 9445              		.loc 7 78 0
 9446 0040 4885ED   		testq	%rbp, %rbp
 9447 0043 741A     		je	.L491
 9448 0045 488B4500 		movq	0(%rbp), %rax
 9449 0049 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 9449      000000
 9450 0050 488B4020 		movq	32(%rax), %rax
 9451 0054 4839D0   		cmpq	%rdx, %rax
 9452 0057 755F     		jne	.L492
 9453              	.LVL792:
 9454              	.LBB15856:
 9455              	.LBB15857:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 9456              		.loc 3 168 0
 9457 0059 836D5801 		subl	$1, 88(%rbp)
 9458 005d 7419     		je	.L496
 9459              	.LVL793:
 9460              	.L491:
 9461              	.LBE15857:
 9462              	.LBE15856:
 9463              	.LBE15878:
 9464              	.LBE15880:
 9465              	.LBE15882:
 9466              	.LBE15852:
 9467              	.LBE15851:
 9468              	.LBE15886:
 9469              	.LBE15888:
 9470              	.LBE15891:
 9471              	.LBE15894:
 481:/usr/include/boost/exception/exception.hpp **** 
 9472              		.loc 7 481 0
 9473 005f 4883C408 		addq	$8, %rsp
 9474              		.cfi_remember_state
 9475              		.cfi_def_cfa_offset 24
 9476 0063 4889DF   		movq	%rbx, %rdi
 9477 0066 BE380000 		movl	$56, %esi
 9477      00
 9478 006b 5B       		popq	%rbx
 9479              		.cfi_def_cfa_offset 16
 9480              	.LVL794:
 9481 006c 5D       		popq	%rbp
 9482              		.cfi_def_cfa_offset 8
 9483 006d E9000000 		jmp	_ZdlPvm@PLT
 9483      00
 9484              	.LVL795:
 9485              		.p2align 4,,10
 9486 0072 660F1F44 		.p2align 3
 9486      0000
 9487              	.L496:
 9488              		.cfi_restore_state
 9489              	.LBB15895:
 9490              	.LBB15892:
GAS LISTING /tmp/ccvmoMuv.s 			page 540


 9491              	.LBB15889:
 9492              	.LBB15887:
 9493              	.LBB15885:
 9494              	.LBB15884:
 9495              	.LBB15883:
 9496              	.LBB15881:
 9497              	.LBB15879:
 9498              	.LBB15877:
 9499              	.LBB15876:
 9500              	.LBB15858:
 9501              	.LBB15859:
 104:/usr/include/boost/exception/info.hpp ****                 }
 9502              		.loc 3 104 0
 9503 0078 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 9503      000000
 9504 007f 488B7D38 		movq	56(%rbp), %rdi
 9505 0083 48894500 		movq	%rax, 0(%rbp)
 9506              	.LVL796:
 9507              	.LBB15860:
 9508              	.LBB15861:
 9509              	.LBB15862:
 9510              	.LBB15863:
 9511              	.LBB15864:
 9512              	.LBB15865:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 9513              		.loc 10 152 0
 9514 0087 488D4548 		leaq	72(%rbp), %rax
 9515              	.LBE15865:
 9516              	.LBE15864:
 9517              	.LBE15863:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 9518              		.loc 10 180 0
 9519 008b 4839C7   		cmpq	%rax, %rdi
 9520 008e 7405     		je	.L494
 9521              	.LVL797:
 9522              	.LBB15866:
 9523              	.LBB15867:
 9524              	.LBB15868:
 9525              	.LBB15869:
 9526              		.loc 12 110 0
 9527 0090 E8000000 		call	_ZdlPv@PLT
 9527      00
 9528              	.LVL798:
 9529              	.L494:
 9530              	.LBE15869:
 9531              	.LBE15868:
 9532              	.LBE15867:
 9533              	.LBE15866:
 9534              	.LBE15862:
 9535              	.LBE15861:
 9536              	.LBE15860:
 9537              	.LBB15870:
 9538              	.LBB15871:
 9539              	.LBB15872:
 9540              	.LBB15873:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 9541              		.loc 19 873 0
GAS LISTING /tmp/ccvmoMuv.s 			page 541


 9542 0095 488B7518 		movq	24(%rbp), %rsi
 9543              	.LBE15873:
 9544              	.LBE15872:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 9545              		.loc 36 96 0
 9546 0099 488D7D08 		leaq	8(%rbp), %rdi
 9547              	.LVL799:
 9548              	.LBB15875:
 9549              	.LBB15874:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 9550              		.loc 19 873 0
 9551 009d E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 9551      00
 9552              	.LVL800:
 9553              	.LBE15874:
 9554              	.LBE15875:
 9555              	.LBE15871:
 9556              	.LBE15870:
 9557              	.LBE15859:
 9558              	.LBE15858:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 9559              		.loc 3 172 0
 9560 00a2 BE600000 		movl	$96, %esi
 9560      00
 9561 00a7 4889EF   		movq	%rbp, %rdi
 9562 00aa E8000000 		call	_ZdlPvm@PLT
 9562      00
 9563              	.LVL801:
 9564 00af EBAE     		jmp	.L491
 9565              	.LVL802:
 9566              		.p2align 4,,10
 9567 00b1 0F1F8000 		.p2align 3
 9567      000000
 9568              	.L492:
 9569              	.LBE15876:
 9570              	.LBE15877:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 9571              		.loc 7 78 0
 9572 00b8 4889EF   		movq	%rbp, %rdi
 9573 00bb FFD0     		call	*%rax
 9574              	.LVL803:
 9575 00bd EBA0     		jmp	.L491
 9576              	.LBE15879:
 9577              	.LBE15881:
 9578              	.LBE15883:
 9579              	.LBE15884:
 9580              	.LBE15885:
 9581              	.LBE15887:
 9582              	.LBE15889:
 9583              	.LBE15892:
 9584              	.LBE15895:
 9585              		.cfi_endproc
 9586              	.LFE13012:
 9587              		.section	.gcc_except_table
 9588              	.LLSDA13012:
 9589 0087 FF       		.byte	0xff
 9590 0088 FF       		.byte	0xff
GAS LISTING /tmp/ccvmoMuv.s 			page 542


 9591 0089 01       		.byte	0x1
 9592 008a 00       		.uleb128 .LLSDACSE13012-.LLSDACSB13012
 9593              	.LLSDACSB13012:
 9594              	.LLSDACSE13012:
 9595              		.section	.text._ZN5boost16exception_detail10clone_implINS0_14bad_exception_EED0Ev,"axG",@progbits,
 9597              		.set	.LTHUNK75,_ZN5boost16exception_detail10clone_implINS0_14bad_exception_EED0Ev
 9598 00bf 90       		.p2align 4,,15
 9599              		.weak	_ZThn40_N5boost16exception_detail10clone_implINS0_14bad_exception_EED0Ev
 9601              	_ZThn40_N5boost16exception_detail10clone_implINS0_14bad_exception_EED0Ev:
 9602              	.LFB16028:
 479:/usr/include/boost/exception/exception.hpp ****                 {
 9603              		.loc 7 479 0
 9604              		.cfi_startproc
 9605 00c0 4883EF28 		subq	$40, %rdi
 9606 00c4 E937FFFF 		jmp	.LTHUNK75
 9606      FF
 9607              		.cfi_endproc
 9608              	.LFE16028:
 9610              		.set	.LTHUNK74,_ZN5boost16exception_detail10clone_implINS0_14bad_exception_EED0Ev
 9611 00c9 0F1F8000 		.p2align 4,,15
 9611      000000
 9612              		.weak	_ZTv0_n40_N5boost16exception_detail10clone_implINS0_14bad_exception_EED0Ev
 9614              	_ZTv0_n40_N5boost16exception_detail10clone_implINS0_14bad_exception_EED0Ev:
 9615              	.LFB16029:
 479:/usr/include/boost/exception/exception.hpp ****                 {
 9616              		.loc 7 479 0
 9617              		.cfi_startproc
 9618 00d0 4C8B17   		movq	(%rdi), %r10
 9619 00d3 49037AD8 		addq	-40(%r10), %rdi
 9620 00d7 E924FFFF 		jmp	.LTHUNK74
 9620      FF
 9621              		.cfi_endproc
 9622              	.LFE16029:
 9624              		.section	.text._ZN5boost16exception_detail10clone_implINS0_10bad_alloc_EED0Ev,"axG",@progbits,_ZN5
 9625              		.align 2
 9626              		.p2align 4,,15
 9627              		.weak	_ZN5boost16exception_detail10clone_implINS0_10bad_alloc_EED0Ev
 9629              	_ZN5boost16exception_detail10clone_implINS0_10bad_alloc_EED0Ev:
 9630              	.LFB12996:
 479:/usr/include/boost/exception/exception.hpp ****                 {
 9631              		.loc 7 479 0
 9632              		.cfi_startproc
 9633              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 9634              		.cfi_lsda 0x1b,.LLSDA12996
 9635              	.LVL804:
 9636 0000 55       		pushq	%rbp
 9637              		.cfi_def_cfa_offset 16
 9638              		.cfi_offset 6, -16
 9639              	.LBB15938:
 9640              	.LBB15939:
 481:/usr/include/boost/exception/exception.hpp **** 
 9641              		.loc 7 481 0
 9642 0001 488D0500 		leaq	136+_ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE(%rip), %rax
 9642      000000
 9643              	.LBE15939:
 9644              	.LBE15938:
 479:/usr/include/boost/exception/exception.hpp ****                 {
GAS LISTING /tmp/ccvmoMuv.s 			page 543


 9645              		.loc 7 479 0
 9646 0008 53       		pushq	%rbx
 9647              		.cfi_def_cfa_offset 24
 9648              		.cfi_offset 3, -24
 9649 0009 4889FB   		movq	%rdi, %rbx
 9650              	.LBB15984:
 9651              	.LBB15981:
 9652              	.LBB15940:
 9653              	.LBB15941:
 107:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 };
 9654              		.loc 29 107 0
 9655 000c 4883C728 		addq	$40, %rdi
 9656              	.LVL805:
 9657              	.LBE15941:
 9658              	.LBE15940:
 9659              	.LBE15981:
 9660              	.LBE15984:
 479:/usr/include/boost/exception/exception.hpp ****                 {
 9661              		.loc 7 479 0
 9662 0010 4883EC08 		subq	$8, %rsp
 9663              		.cfi_def_cfa_offset 32
 9664              	.LBB15985:
 9665              	.LBB15982:
 481:/usr/include/boost/exception/exception.hpp **** 
 9666              		.loc 7 481 0
 9667 0014 48894708 		movq	%rax, 8(%rdi)
 9668              	.LVL806:
 9669              	.LBB15979:
 9670              	.LBB15977:
 107:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 };
 9671              		.loc 29 107 0
 9672 0018 488D0500 		leaq	16+_ZTVN5boost16exception_detail10bad_alloc_E(%rip), %rax
 9672      000000
 9673 001f 488947D8 		movq	%rax, -40(%rdi)
 9674 0023 488D0500 		leaq	48+_ZTVN5boost16exception_detail10bad_alloc_E(%rip), %rax
 9674      000000
 9675 002a 488907   		movq	%rax, (%rdi)
 9676 002d E8000000 		call	_ZNSt9bad_allocD2Ev@PLT
 9676      00
 9677              	.LVL807:
 9678              	.LBB15942:
 9679              	.LBB15943:
 9680              	.LBB15944:
 9681              	.LBB15945:
 9682              	.LBB15946:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 9683              		.loc 7 78 0
 9684 0032 488B6B08 		movq	8(%rbx), %rbp
 9685              	.LBE15946:
 9686              	.LBE15945:
 9687              	.LBE15944:
 299:/usr/include/boost/exception/exception.hpp ****         {
 9688              		.loc 7 299 0
 9689 0036 488D0500 		leaq	16+_ZTVN5boost9exceptionE(%rip), %rax
 9689      000000
 9690 003d 488903   		movq	%rax, (%rbx)
 9691              	.LVL808:
GAS LISTING /tmp/ccvmoMuv.s 			page 544


 9692              	.LBB15973:
 9693              	.LBB15971:
 9694              	.LBB15969:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 9695              		.loc 7 78 0
 9696 0040 4885ED   		testq	%rbp, %rbp
 9697 0043 741A     		je	.L499
 9698 0045 488B4500 		movq	0(%rbp), %rax
 9699 0049 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 9699      000000
 9700 0050 488B4020 		movq	32(%rax), %rax
 9701 0054 4839D0   		cmpq	%rdx, %rax
 9702 0057 755F     		jne	.L500
 9703              	.LVL809:
 9704              	.LBB15947:
 9705              	.LBB15948:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 9706              		.loc 3 168 0
 9707 0059 836D5801 		subl	$1, 88(%rbp)
 9708 005d 7419     		je	.L504
 9709              	.LVL810:
 9710              	.L499:
 9711              	.LBE15948:
 9712              	.LBE15947:
 9713              	.LBE15969:
 9714              	.LBE15971:
 9715              	.LBE15973:
 9716              	.LBE15943:
 9717              	.LBE15942:
 9718              	.LBE15977:
 9719              	.LBE15979:
 9720              	.LBE15982:
 9721              	.LBE15985:
 481:/usr/include/boost/exception/exception.hpp **** 
 9722              		.loc 7 481 0
 9723 005f 4883C408 		addq	$8, %rsp
 9724              		.cfi_remember_state
 9725              		.cfi_def_cfa_offset 24
 9726 0063 4889DF   		movq	%rbx, %rdi
 9727 0066 BE380000 		movl	$56, %esi
 9727      00
 9728 006b 5B       		popq	%rbx
 9729              		.cfi_def_cfa_offset 16
 9730              	.LVL811:
 9731 006c 5D       		popq	%rbp
 9732              		.cfi_def_cfa_offset 8
 9733 006d E9000000 		jmp	_ZdlPvm@PLT
 9733      00
 9734              	.LVL812:
 9735              		.p2align 4,,10
 9736 0072 660F1F44 		.p2align 3
 9736      0000
 9737              	.L504:
 9738              		.cfi_restore_state
 9739              	.LBB15986:
 9740              	.LBB15983:
 9741              	.LBB15980:
GAS LISTING /tmp/ccvmoMuv.s 			page 545


 9742              	.LBB15978:
 9743              	.LBB15976:
 9744              	.LBB15975:
 9745              	.LBB15974:
 9746              	.LBB15972:
 9747              	.LBB15970:
 9748              	.LBB15968:
 9749              	.LBB15967:
 9750              	.LBB15949:
 9751              	.LBB15950:
 104:/usr/include/boost/exception/info.hpp ****                 }
 9752              		.loc 3 104 0
 9753 0078 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 9753      000000
 9754 007f 488B7D38 		movq	56(%rbp), %rdi
 9755 0083 48894500 		movq	%rax, 0(%rbp)
 9756              	.LVL813:
 9757              	.LBB15951:
 9758              	.LBB15952:
 9759              	.LBB15953:
 9760              	.LBB15954:
 9761              	.LBB15955:
 9762              	.LBB15956:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 9763              		.loc 10 152 0
 9764 0087 488D4548 		leaq	72(%rbp), %rax
 9765              	.LBE15956:
 9766              	.LBE15955:
 9767              	.LBE15954:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 9768              		.loc 10 180 0
 9769 008b 4839C7   		cmpq	%rax, %rdi
 9770 008e 7405     		je	.L502
 9771              	.LVL814:
 9772              	.LBB15957:
 9773              	.LBB15958:
 9774              	.LBB15959:
 9775              	.LBB15960:
 9776              		.loc 12 110 0
 9777 0090 E8000000 		call	_ZdlPv@PLT
 9777      00
 9778              	.LVL815:
 9779              	.L502:
 9780              	.LBE15960:
 9781              	.LBE15959:
 9782              	.LBE15958:
 9783              	.LBE15957:
 9784              	.LBE15953:
 9785              	.LBE15952:
 9786              	.LBE15951:
 9787              	.LBB15961:
 9788              	.LBB15962:
 9789              	.LBB15963:
 9790              	.LBB15964:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 9791              		.loc 19 873 0
 9792 0095 488B7518 		movq	24(%rbp), %rsi
GAS LISTING /tmp/ccvmoMuv.s 			page 546


 9793              	.LBE15964:
 9794              	.LBE15963:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 9795              		.loc 36 96 0
 9796 0099 488D7D08 		leaq	8(%rbp), %rdi
 9797              	.LVL816:
 9798              	.LBB15966:
 9799              	.LBB15965:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 9800              		.loc 19 873 0
 9801 009d E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 9801      00
 9802              	.LVL817:
 9803              	.LBE15965:
 9804              	.LBE15966:
 9805              	.LBE15962:
 9806              	.LBE15961:
 9807              	.LBE15950:
 9808              	.LBE15949:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 9809              		.loc 3 172 0
 9810 00a2 BE600000 		movl	$96, %esi
 9810      00
 9811 00a7 4889EF   		movq	%rbp, %rdi
 9812 00aa E8000000 		call	_ZdlPvm@PLT
 9812      00
 9813              	.LVL818:
 9814 00af EBAE     		jmp	.L499
 9815              	.LVL819:
 9816              		.p2align 4,,10
 9817 00b1 0F1F8000 		.p2align 3
 9817      000000
 9818              	.L500:
 9819              	.LBE15967:
 9820              	.LBE15968:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 9821              		.loc 7 78 0
 9822 00b8 4889EF   		movq	%rbp, %rdi
 9823 00bb FFD0     		call	*%rax
 9824              	.LVL820:
 9825 00bd EBA0     		jmp	.L499
 9826              	.LBE15970:
 9827              	.LBE15972:
 9828              	.LBE15974:
 9829              	.LBE15975:
 9830              	.LBE15976:
 9831              	.LBE15978:
 9832              	.LBE15980:
 9833              	.LBE15983:
 9834              	.LBE15986:
 9835              		.cfi_endproc
 9836              	.LFE12996:
 9837              		.section	.gcc_except_table
 9838              	.LLSDA12996:
 9839 008b FF       		.byte	0xff
 9840 008c FF       		.byte	0xff
 9841 008d 01       		.byte	0x1
GAS LISTING /tmp/ccvmoMuv.s 			page 547


 9842 008e 00       		.uleb128 .LLSDACSE12996-.LLSDACSB12996
 9843              	.LLSDACSB12996:
 9844              	.LLSDACSE12996:
 9845              		.section	.text._ZN5boost16exception_detail10clone_implINS0_10bad_alloc_EED0Ev,"axG",@progbits,_ZN5
 9847              		.set	.LTHUNK71,_ZN5boost16exception_detail10clone_implINS0_10bad_alloc_EED0Ev
 9848 00bf 90       		.p2align 4,,15
 9849              		.weak	_ZThn40_N5boost16exception_detail10clone_implINS0_10bad_alloc_EED0Ev
 9851              	_ZThn40_N5boost16exception_detail10clone_implINS0_10bad_alloc_EED0Ev:
 9852              	.LFB16031:
 479:/usr/include/boost/exception/exception.hpp ****                 {
 9853              		.loc 7 479 0
 9854              		.cfi_startproc
 9855 00c0 4883EF28 		subq	$40, %rdi
 9856 00c4 E937FFFF 		jmp	.LTHUNK71
 9856      FF
 9857              		.cfi_endproc
 9858              	.LFE16031:
 9860              		.set	.LTHUNK70,_ZN5boost16exception_detail10clone_implINS0_10bad_alloc_EED0Ev
 9861 00c9 0F1F8000 		.p2align 4,,15
 9861      000000
 9862              		.weak	_ZTv0_n40_N5boost16exception_detail10clone_implINS0_10bad_alloc_EED0Ev
 9864              	_ZTv0_n40_N5boost16exception_detail10clone_implINS0_10bad_alloc_EED0Ev:
 9865              	.LFB16032:
 479:/usr/include/boost/exception/exception.hpp ****                 {
 9866              		.loc 7 479 0
 9867              		.cfi_startproc
 9868 00d0 4C8B17   		movq	(%rdi), %r10
 9869 00d3 49037AD8 		addq	-40(%r10), %rdi
 9870 00d7 E924FFFF 		jmp	.LTHUNK70
 9870      FF
 9871              		.cfi_endproc
 9872              	.LFE16032:
 9874              		.section	.text._ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_all
 9875              		.align 2
 9876              		.p2align 4,,15
 9877              		.weak	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEE7d
 9879              	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEE7disposeE
 9880              	.LFB15508:
  73:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     {
 9881              		.loc 6 73 0
 9882              		.cfi_startproc
 9883              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 9884              		.cfi_lsda 0x1b,.LLSDA15508
 9885              	.LVL821:
 9886 0000 55       		pushq	%rbp
 9887              		.cfi_def_cfa_offset 16
 9888              		.cfi_offset 6, -16
 9889 0001 53       		pushq	%rbx
 9890              		.cfi_def_cfa_offset 24
 9891              		.cfi_offset 3, -24
 9892 0002 4883EC08 		subq	$8, %rsp
 9893              		.cfi_def_cfa_offset 32
  78:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     }
 9894              		.loc 6 78 0
 9895 0006 488B5F10 		movq	16(%rdi), %rbx
 9896              	.LVL822:
 9897              	.LBB16030:
GAS LISTING /tmp/ccvmoMuv.s 			page 548


 9898              	.LBB16031:
 9899              		.file 37 "/usr/include/boost/core/checked_delete.hpp"
   1:/usr/include/boost/core/checked_delete.hpp **** #ifndef BOOST_CORE_CHECKED_DELETE_HPP
   2:/usr/include/boost/core/checked_delete.hpp **** #define BOOST_CORE_CHECKED_DELETE_HPP
   3:/usr/include/boost/core/checked_delete.hpp **** 
   4:/usr/include/boost/core/checked_delete.hpp **** // MS compatible compilers support #pragma once
   5:/usr/include/boost/core/checked_delete.hpp **** 
   6:/usr/include/boost/core/checked_delete.hpp **** #if defined(_MSC_VER) && (_MSC_VER >= 1020)
   7:/usr/include/boost/core/checked_delete.hpp **** # pragma once
   8:/usr/include/boost/core/checked_delete.hpp **** #endif
   9:/usr/include/boost/core/checked_delete.hpp **** 
  10:/usr/include/boost/core/checked_delete.hpp **** //
  11:/usr/include/boost/core/checked_delete.hpp **** //  boost/checked_delete.hpp
  12:/usr/include/boost/core/checked_delete.hpp **** //
  13:/usr/include/boost/core/checked_delete.hpp **** //  Copyright (c) 2002, 2003 Peter Dimov
  14:/usr/include/boost/core/checked_delete.hpp **** //  Copyright (c) 2003 Daniel Frey
  15:/usr/include/boost/core/checked_delete.hpp **** //  Copyright (c) 2003 Howard Hinnant
  16:/usr/include/boost/core/checked_delete.hpp **** //
  17:/usr/include/boost/core/checked_delete.hpp **** //  Distributed under the Boost Software License, Version 1.0. (See
  18:/usr/include/boost/core/checked_delete.hpp **** //  accompanying file LICENSE_1_0.txt or copy at
  19:/usr/include/boost/core/checked_delete.hpp **** //  http://www.boost.org/LICENSE_1_0.txt)
  20:/usr/include/boost/core/checked_delete.hpp **** //
  21:/usr/include/boost/core/checked_delete.hpp **** //  See http://www.boost.org/libs/core/doc/html/core/checked_delete.html for documentation.
  22:/usr/include/boost/core/checked_delete.hpp **** //
  23:/usr/include/boost/core/checked_delete.hpp **** 
  24:/usr/include/boost/core/checked_delete.hpp **** namespace boost
  25:/usr/include/boost/core/checked_delete.hpp **** {
  26:/usr/include/boost/core/checked_delete.hpp **** 
  27:/usr/include/boost/core/checked_delete.hpp **** // verify that types are complete for increased safety
  28:/usr/include/boost/core/checked_delete.hpp **** 
  29:/usr/include/boost/core/checked_delete.hpp **** template<class T> inline void checked_delete(T * x)
  30:/usr/include/boost/core/checked_delete.hpp **** {
  31:/usr/include/boost/core/checked_delete.hpp ****     // intentionally complex - simplification causes regressions
  32:/usr/include/boost/core/checked_delete.hpp ****     typedef char type_must_be_complete[ sizeof(T)? 1: -1 ];
  33:/usr/include/boost/core/checked_delete.hpp ****     (void) sizeof(type_must_be_complete);
  34:/usr/include/boost/core/checked_delete.hpp ****     delete x;
 9900              		.loc 37 34 0
 9901 000a 4885DB   		testq	%rbx, %rbx
 9902 000d 0F848500 		je	.L505
 9902      0000
 9903 0013 488B03   		movq	(%rbx), %rax
 9904 0016 488D1500 		leaq	_ZN5boost16exception_detail10clone_implINS0_10bad_alloc_EED0Ev(%rip), %rdx
 9904      000000
 9905 001d 488B4008 		movq	8(%rax), %rax
 9906 0021 4839D0   		cmpq	%rdx, %rax
 9907 0024 0F85B600 		jne	.L507
 9907      0000
 9908              	.LVL823:
 9909              	.LBB16032:
 9910              	.LBB16033:
 9911              	.LBB16034:
 9912              	.LBB16035:
 481:/usr/include/boost/exception/exception.hpp **** 
 9913              		.loc 7 481 0
 9914 002a 488D0500 		leaq	136+_ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE(%rip), %rax
 9914      000000
 9915              	.LBB16036:
GAS LISTING /tmp/ccvmoMuv.s 			page 549


 9916              	.LBB16037:
 107:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 };
 9917              		.loc 29 107 0
 9918 0031 488D7B28 		leaq	40(%rbx), %rdi
 9919              	.LVL824:
 9920              	.LBE16037:
 9921              	.LBE16036:
 481:/usr/include/boost/exception/exception.hpp **** 
 9922              		.loc 7 481 0
 9923 0035 48894330 		movq	%rax, 48(%rbx)
 9924              	.LVL825:
 9925              	.LBB16081:
 9926              	.LBB16078:
 107:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 };
 9927              		.loc 29 107 0
 9928 0039 488D0500 		leaq	16+_ZTVN5boost16exception_detail10bad_alloc_E(%rip), %rax
 9928      000000
 9929 0040 488903   		movq	%rax, (%rbx)
 9930 0043 488D0500 		leaq	48+_ZTVN5boost16exception_detail10bad_alloc_E(%rip), %rax
 9930      000000
 9931 004a 48894328 		movq	%rax, 40(%rbx)
 9932 004e E8000000 		call	_ZNSt9bad_allocD2Ev@PLT
 9932      00
 9933              	.LVL826:
 9934              	.LBB16038:
 9935              	.LBB16039:
 9936              	.LBB16040:
 9937              	.LBB16041:
 9938              	.LBB16042:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 9939              		.loc 7 78 0
 9940 0053 488B6B08 		movq	8(%rbx), %rbp
 9941              	.LBE16042:
 9942              	.LBE16041:
 9943              	.LBE16040:
 299:/usr/include/boost/exception/exception.hpp ****         {
 9944              		.loc 7 299 0
 9945 0057 488D0500 		leaq	16+_ZTVN5boost9exceptionE(%rip), %rax
 9945      000000
 9946 005e 488903   		movq	%rax, (%rbx)
 9947              	.LVL827:
 9948              	.LBB16071:
 9949              	.LBB16068:
 9950              	.LBB16065:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 9951              		.loc 7 78 0
 9952 0061 4885ED   		testq	%rbp, %rbp
 9953 0064 741A     		je	.L509
 9954 0066 488B4500 		movq	0(%rbp), %rax
 9955 006a 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 9955      000000
 9956 0071 488B4020 		movq	32(%rax), %rax
 9957 0075 4839D0   		cmpq	%rdx, %rax
 9958 0078 7576     		jne	.L510
 9959              	.LVL828:
 9960              	.LBB16043:
 9961              	.LBB16044:
GAS LISTING /tmp/ccvmoMuv.s 			page 550


 168:/usr/include/boost/exception/info.hpp ****                     return false;
 9962              		.loc 3 168 0
 9963 007a 836D5801 		subl	$1, 88(%rbp)
 9964 007e 7420     		je	.L514
 9965              	.LVL829:
 9966              	.L509:
 9967              	.LBE16044:
 9968              	.LBE16043:
 9969              	.LBE16065:
 9970              	.LBE16068:
 9971              	.LBE16071:
 9972              	.LBE16039:
 9973              	.LBE16038:
 9974              	.LBE16078:
 9975              	.LBE16081:
 9976              	.LBE16035:
 9977              	.LBE16034:
 9978              	.LBE16033:
 9979              	.LBE16032:
 9980              	.LBE16031:
 9981              	.LBE16030:
  79:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
 9982              		.loc 6 79 0
 9983 0080 4883C408 		addq	$8, %rsp
 9984              		.cfi_remember_state
 9985              		.cfi_def_cfa_offset 24
 9986              	.LBB16101:
 9987              	.LBB16096:
 9988              	.LBB16092:
 9989              	.LBB16088:
 481:/usr/include/boost/exception/exception.hpp **** 
 9990              		.loc 7 481 0
 9991 0084 4889DF   		movq	%rbx, %rdi
 9992 0087 BE380000 		movl	$56, %esi
 9992      00
 9993              	.LBE16088:
 9994              	.LBE16092:
 9995              	.LBE16096:
 9996              	.LBE16101:
  79:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
 9997              		.loc 6 79 0
 9998 008c 5B       		popq	%rbx
 9999              		.cfi_def_cfa_offset 16
 10000              	.LVL830:
 10001 008d 5D       		popq	%rbp
 10002              		.cfi_def_cfa_offset 8
 10003              	.LBB16102:
 10004              	.LBB16097:
 10005              	.LBB16093:
 10006              	.LBB16089:
 481:/usr/include/boost/exception/exception.hpp **** 
 10007              		.loc 7 481 0
 10008 008e E9000000 		jmp	_ZdlPvm@PLT
 10008      00
 10009              	.LVL831:
 10010              		.p2align 4,,10
 10011 0093 0F1F4400 		.p2align 3
GAS LISTING /tmp/ccvmoMuv.s 			page 551


 10011      00
 10012              	.L505:
 10013              		.cfi_restore_state
 10014              	.LBE16089:
 10015              	.LBE16093:
 10016              	.LBE16097:
 10017              	.LBE16102:
  79:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
 10018              		.loc 6 79 0
 10019 0098 4883C408 		addq	$8, %rsp
 10020              		.cfi_remember_state
 10021              		.cfi_def_cfa_offset 24
 10022 009c 5B       		popq	%rbx
 10023              		.cfi_def_cfa_offset 16
 10024              	.LVL832:
 10025 009d 5D       		popq	%rbp
 10026              		.cfi_def_cfa_offset 8
 10027 009e C3       		ret
 10028              	.LVL833:
 10029 009f 90       		.p2align 4,,10
 10030              		.p2align 3
 10031              	.L514:
 10032              		.cfi_restore_state
 10033              	.LBB16103:
 10034              	.LBB16098:
 10035              	.LBB16094:
 10036              	.LBB16090:
 10037              	.LBB16086:
 10038              	.LBB16084:
 10039              	.LBB16082:
 10040              	.LBB16079:
 10041              	.LBB16076:
 10042              	.LBB16074:
 10043              	.LBB16072:
 10044              	.LBB16069:
 10045              	.LBB16066:
 10046              	.LBB16064:
 10047              	.LBB16063:
 10048              	.LBB16045:
 10049              	.LBB16046:
 104:/usr/include/boost/exception/info.hpp ****                 }
 10050              		.loc 3 104 0
 10051 00a0 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 10051      000000
 10052 00a7 488B7D38 		movq	56(%rbp), %rdi
 10053 00ab 48894500 		movq	%rax, 0(%rbp)
 10054              	.LVL834:
 10055              	.LBB16047:
 10056              	.LBB16048:
 10057              	.LBB16049:
 10058              	.LBB16050:
 10059              	.LBB16051:
 10060              	.LBB16052:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 10061              		.loc 10 152 0
 10062 00af 488D4548 		leaq	72(%rbp), %rax
 10063              	.LBE16052:
GAS LISTING /tmp/ccvmoMuv.s 			page 552


 10064              	.LBE16051:
 10065              	.LBE16050:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 10066              		.loc 10 180 0
 10067 00b3 4839C7   		cmpq	%rax, %rdi
 10068 00b6 7405     		je	.L512
 10069              	.LVL835:
 10070              	.LBB16053:
 10071              	.LBB16054:
 10072              	.LBB16055:
 10073              	.LBB16056:
 10074              		.loc 12 110 0
 10075 00b8 E8000000 		call	_ZdlPv@PLT
 10075      00
 10076              	.LVL836:
 10077              	.L512:
 10078              	.LBE16056:
 10079              	.LBE16055:
 10080              	.LBE16054:
 10081              	.LBE16053:
 10082              	.LBE16049:
 10083              	.LBE16048:
 10084              	.LBE16047:
 10085              	.LBB16057:
 10086              	.LBB16058:
 10087              	.LBB16059:
 10088              	.LBB16060:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 10089              		.loc 19 873 0
 10090 00bd 488B7518 		movq	24(%rbp), %rsi
 10091              	.LBE16060:
 10092              	.LBE16059:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 10093              		.loc 36 96 0
 10094 00c1 488D7D08 		leaq	8(%rbp), %rdi
 10095              	.LVL837:
 10096              	.LBB16062:
 10097              	.LBB16061:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 10098              		.loc 19 873 0
 10099 00c5 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 10099      00
 10100              	.LVL838:
 10101              	.LBE16061:
 10102              	.LBE16062:
 10103              	.LBE16058:
 10104              	.LBE16057:
 10105              	.LBE16046:
 10106              	.LBE16045:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 10107              		.loc 3 172 0
 10108 00ca BE600000 		movl	$96, %esi
 10108      00
 10109 00cf 4889EF   		movq	%rbp, %rdi
 10110 00d2 E8000000 		call	_ZdlPvm@PLT
 10110      00
 10111              	.LVL839:
GAS LISTING /tmp/ccvmoMuv.s 			page 553


 10112 00d7 EBA7     		jmp	.L509
 10113              	.LVL840:
 10114 00d9 0F1F8000 		.p2align 4,,10
 10114      000000
 10115              		.p2align 3
 10116              	.L507:
 10117              	.LBE16063:
 10118              	.LBE16064:
 10119              	.LBE16066:
 10120              	.LBE16069:
 10121              	.LBE16072:
 10122              	.LBE16074:
 10123              	.LBE16076:
 10124              	.LBE16079:
 10125              	.LBE16082:
 10126              	.LBE16084:
 10127              	.LBE16086:
 10128              	.LBE16090:
 10129              	.LBE16094:
 10130              	.LBE16098:
 10131              	.LBE16103:
  79:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
 10132              		.loc 6 79 0
 10133 00e0 4883C408 		addq	$8, %rsp
 10134              		.cfi_remember_state
 10135              		.cfi_def_cfa_offset 24
 10136              	.LBB16104:
 10137              	.LBB16099:
 10138              		.loc 37 34 0
 10139 00e4 4889DF   		movq	%rbx, %rdi
 10140              	.LVL841:
 10141              	.LBE16099:
 10142              	.LBE16104:
  79:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
 10143              		.loc 6 79 0
 10144 00e7 5B       		popq	%rbx
 10145              		.cfi_def_cfa_offset 16
 10146              	.LVL842:
 10147 00e8 5D       		popq	%rbp
 10148              		.cfi_def_cfa_offset 8
 10149              	.LBB16105:
 10150              	.LBB16100:
 10151              		.loc 37 34 0
 10152 00e9 FFE0     		jmp	*%rax
 10153              	.LVL843:
 10154 00eb 0F1F4400 		.p2align 4,,10
 10154      00
 10155              		.p2align 3
 10156              	.L510:
 10157              		.cfi_restore_state
 10158              	.LBB16095:
 10159              	.LBB16091:
 10160              	.LBB16087:
 10161              	.LBB16085:
 10162              	.LBB16083:
 10163              	.LBB16080:
 10164              	.LBB16077:
GAS LISTING /tmp/ccvmoMuv.s 			page 554


 10165              	.LBB16075:
 10166              	.LBB16073:
 10167              	.LBB16070:
 10168              	.LBB16067:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 10169              		.loc 7 78 0
 10170 00f0 4889EF   		movq	%rbp, %rdi
 10171 00f3 FFD0     		call	*%rax
 10172              	.LVL844:
 10173 00f5 EB89     		jmp	.L509
 10174              	.LBE16067:
 10175              	.LBE16070:
 10176              	.LBE16073:
 10177              	.LBE16075:
 10178              	.LBE16077:
 10179              	.LBE16080:
 10180              	.LBE16083:
 10181              	.LBE16085:
 10182              	.LBE16087:
 10183              	.LBE16091:
 10184              	.LBE16095:
 10185              	.LBE16100:
 10186              	.LBE16105:
 10187              		.cfi_endproc
 10188              	.LFE15508:
 10189              		.section	.gcc_except_table
 10190              	.LLSDA15508:
 10191 008f FF       		.byte	0xff
 10192 0090 FF       		.byte	0xff
 10193 0091 01       		.byte	0x1
 10194 0092 00       		.uleb128 .LLSDACSE15508-.LLSDACSB15508
 10195              	.LLSDACSB15508:
 10196              	.LLSDACSE15508:
 10197              		.section	.text._ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_all
 10199              		.section	.text._ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exc
 10200              		.align 2
 10201              		.p2align 4,,15
 10202              		.weak	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EE
 10204              	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEE7disp
 10205              	.LFB15505:
  73:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     {
 10206              		.loc 6 73 0
 10207              		.cfi_startproc
 10208              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 10209              		.cfi_lsda 0x1b,.LLSDA15505
 10210              	.LVL845:
 10211 0000 55       		pushq	%rbp
 10212              		.cfi_def_cfa_offset 16
 10213              		.cfi_offset 6, -16
 10214 0001 53       		pushq	%rbx
 10215              		.cfi_def_cfa_offset 24
 10216              		.cfi_offset 3, -24
 10217 0002 4883EC08 		subq	$8, %rsp
 10218              		.cfi_def_cfa_offset 32
  78:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     }
 10219              		.loc 6 78 0
 10220 0006 488B5F10 		movq	16(%rdi), %rbx
GAS LISTING /tmp/ccvmoMuv.s 			page 555


 10221              	.LVL846:
 10222              	.LBB16149:
 10223              	.LBB16150:
 10224              		.loc 37 34 0
 10225 000a 4885DB   		testq	%rbx, %rbx
 10226 000d 0F848500 		je	.L515
 10226      0000
 10227 0013 488B03   		movq	(%rbx), %rax
 10228 0016 488D1500 		leaq	_ZN5boost16exception_detail10clone_implINS0_14bad_exception_EED0Ev(%rip), %rdx
 10228      000000
 10229 001d 488B4008 		movq	8(%rax), %rax
 10230 0021 4839D0   		cmpq	%rdx, %rax
 10231 0024 0F85B600 		jne	.L517
 10231      0000
 10232              	.LVL847:
 10233              	.LBB16151:
 10234              	.LBB16152:
 10235              	.LBB16153:
 10236              	.LBB16154:
 481:/usr/include/boost/exception/exception.hpp **** 
 10237              		.loc 7 481 0
 10238 002a 488D0500 		leaq	136+_ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE(%rip), %rax
 10238      000000
 10239              	.LBB16155:
 10240              	.LBB16156:
 10241              		.loc 29 115 0
 10242 0031 488D7B28 		leaq	40(%rbx), %rdi
 10243              	.LVL848:
 10244              	.LBE16156:
 10245              	.LBE16155:
 481:/usr/include/boost/exception/exception.hpp **** 
 10246              		.loc 7 481 0
 10247 0035 48894330 		movq	%rax, 48(%rbx)
 10248              	.LVL849:
 10249              	.LBB16200:
 10250              	.LBB16197:
 10251              		.loc 29 115 0
 10252 0039 488D0500 		leaq	16+_ZTVN5boost16exception_detail14bad_exception_E(%rip), %rax
 10252      000000
 10253 0040 488903   		movq	%rax, (%rbx)
 10254 0043 488D0500 		leaq	48+_ZTVN5boost16exception_detail14bad_exception_E(%rip), %rax
 10254      000000
 10255 004a 48894328 		movq	%rax, 40(%rbx)
 10256 004e E8000000 		call	_ZNSt13bad_exceptionD2Ev@PLT
 10256      00
 10257              	.LVL850:
 10258              	.LBB16157:
 10259              	.LBB16158:
 10260              	.LBB16159:
 10261              	.LBB16160:
 10262              	.LBB16161:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 10263              		.loc 7 78 0
 10264 0053 488B6B08 		movq	8(%rbx), %rbp
 10265              	.LBE16161:
 10266              	.LBE16160:
 10267              	.LBE16159:
GAS LISTING /tmp/ccvmoMuv.s 			page 556


 299:/usr/include/boost/exception/exception.hpp ****         {
 10268              		.loc 7 299 0
 10269 0057 488D0500 		leaq	16+_ZTVN5boost9exceptionE(%rip), %rax
 10269      000000
 10270 005e 488903   		movq	%rax, (%rbx)
 10271              	.LVL851:
 10272              	.LBB16190:
 10273              	.LBB16187:
 10274              	.LBB16184:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 10275              		.loc 7 78 0
 10276 0061 4885ED   		testq	%rbp, %rbp
 10277 0064 741A     		je	.L519
 10278 0066 488B4500 		movq	0(%rbp), %rax
 10279 006a 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 10279      000000
 10280 0071 488B4020 		movq	32(%rax), %rax
 10281 0075 4839D0   		cmpq	%rdx, %rax
 10282 0078 7576     		jne	.L520
 10283              	.LVL852:
 10284              	.LBB16162:
 10285              	.LBB16163:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 10286              		.loc 3 168 0
 10287 007a 836D5801 		subl	$1, 88(%rbp)
 10288 007e 7420     		je	.L524
 10289              	.LVL853:
 10290              	.L519:
 10291              	.LBE16163:
 10292              	.LBE16162:
 10293              	.LBE16184:
 10294              	.LBE16187:
 10295              	.LBE16190:
 10296              	.LBE16158:
 10297              	.LBE16157:
 10298              	.LBE16197:
 10299              	.LBE16200:
 10300              	.LBE16154:
 10301              	.LBE16153:
 10302              	.LBE16152:
 10303              	.LBE16151:
 10304              	.LBE16150:
 10305              	.LBE16149:
  79:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
 10306              		.loc 6 79 0
 10307 0080 4883C408 		addq	$8, %rsp
 10308              		.cfi_remember_state
 10309              		.cfi_def_cfa_offset 24
 10310              	.LBB16220:
 10311              	.LBB16215:
 10312              	.LBB16211:
 10313              	.LBB16207:
 481:/usr/include/boost/exception/exception.hpp **** 
 10314              		.loc 7 481 0
 10315 0084 4889DF   		movq	%rbx, %rdi
 10316 0087 BE380000 		movl	$56, %esi
 10316      00
GAS LISTING /tmp/ccvmoMuv.s 			page 557


 10317              	.LBE16207:
 10318              	.LBE16211:
 10319              	.LBE16215:
 10320              	.LBE16220:
  79:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
 10321              		.loc 6 79 0
 10322 008c 5B       		popq	%rbx
 10323              		.cfi_def_cfa_offset 16
 10324              	.LVL854:
 10325 008d 5D       		popq	%rbp
 10326              		.cfi_def_cfa_offset 8
 10327              	.LBB16221:
 10328              	.LBB16216:
 10329              	.LBB16212:
 10330              	.LBB16208:
 481:/usr/include/boost/exception/exception.hpp **** 
 10331              		.loc 7 481 0
 10332 008e E9000000 		jmp	_ZdlPvm@PLT
 10332      00
 10333              	.LVL855:
 10334              		.p2align 4,,10
 10335 0093 0F1F4400 		.p2align 3
 10335      00
 10336              	.L515:
 10337              		.cfi_restore_state
 10338              	.LBE16208:
 10339              	.LBE16212:
 10340              	.LBE16216:
 10341              	.LBE16221:
  79:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
 10342              		.loc 6 79 0
 10343 0098 4883C408 		addq	$8, %rsp
 10344              		.cfi_remember_state
 10345              		.cfi_def_cfa_offset 24
 10346 009c 5B       		popq	%rbx
 10347              		.cfi_def_cfa_offset 16
 10348              	.LVL856:
 10349 009d 5D       		popq	%rbp
 10350              		.cfi_def_cfa_offset 8
 10351 009e C3       		ret
 10352              	.LVL857:
 10353 009f 90       		.p2align 4,,10
 10354              		.p2align 3
 10355              	.L524:
 10356              		.cfi_restore_state
 10357              	.LBB16222:
 10358              	.LBB16217:
 10359              	.LBB16213:
 10360              	.LBB16209:
 10361              	.LBB16205:
 10362              	.LBB16203:
 10363              	.LBB16201:
 10364              	.LBB16198:
 10365              	.LBB16195:
 10366              	.LBB16193:
 10367              	.LBB16191:
 10368              	.LBB16188:
GAS LISTING /tmp/ccvmoMuv.s 			page 558


 10369              	.LBB16185:
 10370              	.LBB16183:
 10371              	.LBB16182:
 10372              	.LBB16164:
 10373              	.LBB16165:
 104:/usr/include/boost/exception/info.hpp ****                 }
 10374              		.loc 3 104 0
 10375 00a0 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 10375      000000
 10376 00a7 488B7D38 		movq	56(%rbp), %rdi
 10377 00ab 48894500 		movq	%rax, 0(%rbp)
 10378              	.LVL858:
 10379              	.LBB16166:
 10380              	.LBB16167:
 10381              	.LBB16168:
 10382              	.LBB16169:
 10383              	.LBB16170:
 10384              	.LBB16171:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 10385              		.loc 10 152 0
 10386 00af 488D4548 		leaq	72(%rbp), %rax
 10387              	.LBE16171:
 10388              	.LBE16170:
 10389              	.LBE16169:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 10390              		.loc 10 180 0
 10391 00b3 4839C7   		cmpq	%rax, %rdi
 10392 00b6 7405     		je	.L522
 10393              	.LVL859:
 10394              	.LBB16172:
 10395              	.LBB16173:
 10396              	.LBB16174:
 10397              	.LBB16175:
 10398              		.loc 12 110 0
 10399 00b8 E8000000 		call	_ZdlPv@PLT
 10399      00
 10400              	.LVL860:
 10401              	.L522:
 10402              	.LBE16175:
 10403              	.LBE16174:
 10404              	.LBE16173:
 10405              	.LBE16172:
 10406              	.LBE16168:
 10407              	.LBE16167:
 10408              	.LBE16166:
 10409              	.LBB16176:
 10410              	.LBB16177:
 10411              	.LBB16178:
 10412              	.LBB16179:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 10413              		.loc 19 873 0
 10414 00bd 488B7518 		movq	24(%rbp), %rsi
 10415              	.LBE16179:
 10416              	.LBE16178:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 10417              		.loc 36 96 0
 10418 00c1 488D7D08 		leaq	8(%rbp), %rdi
GAS LISTING /tmp/ccvmoMuv.s 			page 559


 10419              	.LVL861:
 10420              	.LBB16181:
 10421              	.LBB16180:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 10422              		.loc 19 873 0
 10423 00c5 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 10423      00
 10424              	.LVL862:
 10425              	.LBE16180:
 10426              	.LBE16181:
 10427              	.LBE16177:
 10428              	.LBE16176:
 10429              	.LBE16165:
 10430              	.LBE16164:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 10431              		.loc 3 172 0
 10432 00ca BE600000 		movl	$96, %esi
 10432      00
 10433 00cf 4889EF   		movq	%rbp, %rdi
 10434 00d2 E8000000 		call	_ZdlPvm@PLT
 10434      00
 10435              	.LVL863:
 10436 00d7 EBA7     		jmp	.L519
 10437              	.LVL864:
 10438 00d9 0F1F8000 		.p2align 4,,10
 10438      000000
 10439              		.p2align 3
 10440              	.L517:
 10441              	.LBE16182:
 10442              	.LBE16183:
 10443              	.LBE16185:
 10444              	.LBE16188:
 10445              	.LBE16191:
 10446              	.LBE16193:
 10447              	.LBE16195:
 10448              	.LBE16198:
 10449              	.LBE16201:
 10450              	.LBE16203:
 10451              	.LBE16205:
 10452              	.LBE16209:
 10453              	.LBE16213:
 10454              	.LBE16217:
 10455              	.LBE16222:
  79:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
 10456              		.loc 6 79 0
 10457 00e0 4883C408 		addq	$8, %rsp
 10458              		.cfi_remember_state
 10459              		.cfi_def_cfa_offset 24
 10460              	.LBB16223:
 10461              	.LBB16218:
 10462              		.loc 37 34 0
 10463 00e4 4889DF   		movq	%rbx, %rdi
 10464              	.LVL865:
 10465              	.LBE16218:
 10466              	.LBE16223:
  79:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp **** 
 10467              		.loc 6 79 0
GAS LISTING /tmp/ccvmoMuv.s 			page 560


 10468 00e7 5B       		popq	%rbx
 10469              		.cfi_def_cfa_offset 16
 10470              	.LVL866:
 10471 00e8 5D       		popq	%rbp
 10472              		.cfi_def_cfa_offset 8
 10473              	.LBB16224:
 10474              	.LBB16219:
 10475              		.loc 37 34 0
 10476 00e9 FFE0     		jmp	*%rax
 10477              	.LVL867:
 10478 00eb 0F1F4400 		.p2align 4,,10
 10478      00
 10479              		.p2align 3
 10480              	.L520:
 10481              		.cfi_restore_state
 10482              	.LBB16214:
 10483              	.LBB16210:
 10484              	.LBB16206:
 10485              	.LBB16204:
 10486              	.LBB16202:
 10487              	.LBB16199:
 10488              	.LBB16196:
 10489              	.LBB16194:
 10490              	.LBB16192:
 10491              	.LBB16189:
 10492              	.LBB16186:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 10493              		.loc 7 78 0
 10494 00f0 4889EF   		movq	%rbp, %rdi
 10495 00f3 FFD0     		call	*%rax
 10496              	.LVL868:
 10497 00f5 EB89     		jmp	.L519
 10498              	.LBE16186:
 10499              	.LBE16189:
 10500              	.LBE16192:
 10501              	.LBE16194:
 10502              	.LBE16196:
 10503              	.LBE16199:
 10504              	.LBE16202:
 10505              	.LBE16204:
 10506              	.LBE16206:
 10507              	.LBE16210:
 10508              	.LBE16214:
 10509              	.LBE16219:
 10510              	.LBE16224:
 10511              		.cfi_endproc
 10512              	.LFE15505:
 10513              		.section	.gcc_except_table
 10514              	.LLSDA15505:
 10515 0093 FF       		.byte	0xff
 10516 0094 FF       		.byte	0xff
 10517 0095 01       		.byte	0x1
 10518 0096 00       		.uleb128 .LLSDACSE15505-.LLSDACSB15505
 10519              	.LLSDACSB15505:
 10520              	.LLSDACSE15505:
 10521              		.section	.text._ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exc
 10523              		.section	.text._ZNSt6vectorIN2gr5tag_tESaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE,
GAS LISTING /tmp/ccvmoMuv.s 			page 561


 10524              		.align 2
 10525              		.p2align 4,,15
 10526              		.weak	_ZNSt6vectorIN2gr5tag_tESaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE
 10528              	_ZNSt6vectorIN2gr5tag_tESaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE:
 10529              	.LFB13492:
 10530              		.file 38 "/usr/include/c++/6/bits/vector.tcc"
   1:/usr/include/c++/6/bits/vector.tcc **** // Vector implementation (out of line) -*- C++ -*-
   2:/usr/include/c++/6/bits/vector.tcc **** 
   3:/usr/include/c++/6/bits/vector.tcc **** // Copyright (C) 2001-2016 Free Software Foundation, Inc.
   4:/usr/include/c++/6/bits/vector.tcc **** //
   5:/usr/include/c++/6/bits/vector.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/6/bits/vector.tcc **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/6/bits/vector.tcc **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/6/bits/vector.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/6/bits/vector.tcc **** // any later version.
  10:/usr/include/c++/6/bits/vector.tcc **** 
  11:/usr/include/c++/6/bits/vector.tcc **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/6/bits/vector.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/6/bits/vector.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/6/bits/vector.tcc **** // GNU General Public License for more details.
  15:/usr/include/c++/6/bits/vector.tcc **** 
  16:/usr/include/c++/6/bits/vector.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/6/bits/vector.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/6/bits/vector.tcc **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/6/bits/vector.tcc **** 
  20:/usr/include/c++/6/bits/vector.tcc **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/6/bits/vector.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/6/bits/vector.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/6/bits/vector.tcc **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/6/bits/vector.tcc **** 
  25:/usr/include/c++/6/bits/vector.tcc **** /*
  26:/usr/include/c++/6/bits/vector.tcc ****  *
  27:/usr/include/c++/6/bits/vector.tcc ****  * Copyright (c) 1994
  28:/usr/include/c++/6/bits/vector.tcc ****  * Hewlett-Packard Company
  29:/usr/include/c++/6/bits/vector.tcc ****  *
  30:/usr/include/c++/6/bits/vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/6/bits/vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/6/bits/vector.tcc ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/6/bits/vector.tcc ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/6/bits/vector.tcc ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/6/bits/vector.tcc ****  * representations about the suitability of this software for any
  36:/usr/include/c++/6/bits/vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/6/bits/vector.tcc ****  *
  38:/usr/include/c++/6/bits/vector.tcc ****  *
  39:/usr/include/c++/6/bits/vector.tcc ****  * Copyright (c) 1996
  40:/usr/include/c++/6/bits/vector.tcc ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/6/bits/vector.tcc ****  *
  42:/usr/include/c++/6/bits/vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/6/bits/vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/6/bits/vector.tcc ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/6/bits/vector.tcc ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/6/bits/vector.tcc ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/6/bits/vector.tcc ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/6/bits/vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/6/bits/vector.tcc ****  */
  50:/usr/include/c++/6/bits/vector.tcc **** 
  51:/usr/include/c++/6/bits/vector.tcc **** /** @file bits/vector.tcc
GAS LISTING /tmp/ccvmoMuv.s 			page 562


  52:/usr/include/c++/6/bits/vector.tcc ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/6/bits/vector.tcc ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/6/bits/vector.tcc ****  */
  55:/usr/include/c++/6/bits/vector.tcc **** 
  56:/usr/include/c++/6/bits/vector.tcc **** #ifndef _VECTOR_TCC
  57:/usr/include/c++/6/bits/vector.tcc **** #define _VECTOR_TCC 1
  58:/usr/include/c++/6/bits/vector.tcc **** 
  59:/usr/include/c++/6/bits/vector.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/usr/include/c++/6/bits/vector.tcc **** {
  61:/usr/include/c++/6/bits/vector.tcc **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  62:/usr/include/c++/6/bits/vector.tcc **** 
  63:/usr/include/c++/6/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
  64:/usr/include/c++/6/bits/vector.tcc ****     void
  65:/usr/include/c++/6/bits/vector.tcc ****     vector<_Tp, _Alloc>::
  66:/usr/include/c++/6/bits/vector.tcc ****     reserve(size_type __n)
  67:/usr/include/c++/6/bits/vector.tcc ****     {
  68:/usr/include/c++/6/bits/vector.tcc ****       if (__n > this->max_size())
  69:/usr/include/c++/6/bits/vector.tcc **** 	__throw_length_error(__N("vector::reserve"));
  70:/usr/include/c++/6/bits/vector.tcc ****       if (this->capacity() < __n)
  71:/usr/include/c++/6/bits/vector.tcc **** 	{
  72:/usr/include/c++/6/bits/vector.tcc **** 	  const size_type __old_size = size();
  73:/usr/include/c++/6/bits/vector.tcc **** 	  pointer __tmp = _M_allocate_and_copy(__n,
  74:/usr/include/c++/6/bits/vector.tcc **** 	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
  75:/usr/include/c++/6/bits/vector.tcc **** 	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
  76:/usr/include/c++/6/bits/vector.tcc **** 	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  77:/usr/include/c++/6/bits/vector.tcc **** 			_M_get_Tp_allocator());
  78:/usr/include/c++/6/bits/vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
  79:/usr/include/c++/6/bits/vector.tcc **** 			this->_M_impl._M_end_of_storage
  80:/usr/include/c++/6/bits/vector.tcc **** 			- this->_M_impl._M_start);
  81:/usr/include/c++/6/bits/vector.tcc **** 	  this->_M_impl._M_start = __tmp;
  82:/usr/include/c++/6/bits/vector.tcc **** 	  this->_M_impl._M_finish = __tmp + __old_size;
  83:/usr/include/c++/6/bits/vector.tcc **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  84:/usr/include/c++/6/bits/vector.tcc **** 	}
  85:/usr/include/c++/6/bits/vector.tcc ****     }
  86:/usr/include/c++/6/bits/vector.tcc **** 
  87:/usr/include/c++/6/bits/vector.tcc **** #if __cplusplus >= 201103L
  88:/usr/include/c++/6/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
  89:/usr/include/c++/6/bits/vector.tcc ****     template<typename... _Args>
  90:/usr/include/c++/6/bits/vector.tcc ****       void
  91:/usr/include/c++/6/bits/vector.tcc ****       vector<_Tp, _Alloc>::
  92:/usr/include/c++/6/bits/vector.tcc ****       emplace_back(_Args&&... __args)
  93:/usr/include/c++/6/bits/vector.tcc ****       {
  94:/usr/include/c++/6/bits/vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  95:/usr/include/c++/6/bits/vector.tcc **** 	  {
  96:/usr/include/c++/6/bits/vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
  97:/usr/include/c++/6/bits/vector.tcc **** 				     std::forward<_Args>(__args)...);
  98:/usr/include/c++/6/bits/vector.tcc **** 	    ++this->_M_impl._M_finish;
  99:/usr/include/c++/6/bits/vector.tcc **** 	  }
 100:/usr/include/c++/6/bits/vector.tcc **** 	else
 101:/usr/include/c++/6/bits/vector.tcc **** 	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
 102:/usr/include/c++/6/bits/vector.tcc ****       }
 103:/usr/include/c++/6/bits/vector.tcc **** #endif
 104:/usr/include/c++/6/bits/vector.tcc **** 
 105:/usr/include/c++/6/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 106:/usr/include/c++/6/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 107:/usr/include/c++/6/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 108:/usr/include/c++/6/bits/vector.tcc **** #if __cplusplus >= 201103L
GAS LISTING /tmp/ccvmoMuv.s 			page 563


 109:/usr/include/c++/6/bits/vector.tcc ****     insert(const_iterator __position, const value_type& __x)
 110:/usr/include/c++/6/bits/vector.tcc **** #else
 111:/usr/include/c++/6/bits/vector.tcc ****     insert(iterator __position, const value_type& __x)
 112:/usr/include/c++/6/bits/vector.tcc **** #endif
 113:/usr/include/c++/6/bits/vector.tcc ****     {
 114:/usr/include/c++/6/bits/vector.tcc ****       const size_type __n = __position - begin();
 115:/usr/include/c++/6/bits/vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
 116:/usr/include/c++/6/bits/vector.tcc **** 	  && __position == end())
 117:/usr/include/c++/6/bits/vector.tcc **** 	{
 118:/usr/include/c++/6/bits/vector.tcc **** 	  _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish, __x);
 119:/usr/include/c++/6/bits/vector.tcc **** 	  ++this->_M_impl._M_finish;
 120:/usr/include/c++/6/bits/vector.tcc **** 	}
 121:/usr/include/c++/6/bits/vector.tcc ****       else
 122:/usr/include/c++/6/bits/vector.tcc **** 	{
 123:/usr/include/c++/6/bits/vector.tcc **** #if __cplusplus >= 201103L
 124:/usr/include/c++/6/bits/vector.tcc **** 	  const auto __pos = begin() + (__position - cbegin());
 125:/usr/include/c++/6/bits/vector.tcc **** 	  if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 126:/usr/include/c++/6/bits/vector.tcc **** 	    {
 127:/usr/include/c++/6/bits/vector.tcc **** 	      _Tp __x_copy = __x;
 128:/usr/include/c++/6/bits/vector.tcc **** 	      _M_insert_aux(__pos, std::move(__x_copy));
 129:/usr/include/c++/6/bits/vector.tcc **** 	    }
 130:/usr/include/c++/6/bits/vector.tcc **** 	  else
 131:/usr/include/c++/6/bits/vector.tcc **** 	    _M_insert_aux(__pos, __x);
 132:/usr/include/c++/6/bits/vector.tcc **** #else
 133:/usr/include/c++/6/bits/vector.tcc **** 	    _M_insert_aux(__position, __x);
 134:/usr/include/c++/6/bits/vector.tcc **** #endif
 135:/usr/include/c++/6/bits/vector.tcc **** 	}
 136:/usr/include/c++/6/bits/vector.tcc ****       return iterator(this->_M_impl._M_start + __n);
 137:/usr/include/c++/6/bits/vector.tcc ****     }
 138:/usr/include/c++/6/bits/vector.tcc **** 
 139:/usr/include/c++/6/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 140:/usr/include/c++/6/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 141:/usr/include/c++/6/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 10531              		.loc 38 141 0
 10532              		.cfi_startproc
 10533              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 10534              		.cfi_lsda 0x1b,.LLSDA13492
 10535              	.LVL869:
 10536 0000 4157     		pushq	%r15
 10537              		.cfi_def_cfa_offset 16
 10538              		.cfi_offset 15, -16
 10539 0002 4156     		pushq	%r14
 10540              		.cfi_def_cfa_offset 24
 10541              		.cfi_offset 14, -24
 10542              	.LBB16294:
 10543              	.LBB16295:
 10544              		.file 39 "/usr/include/c++/6/bits/stl_iterator.h"
   1:/usr/include/c++/6/bits/stl_iterator.h **** // Iterators -*- C++ -*-
   2:/usr/include/c++/6/bits/stl_iterator.h **** 
   3:/usr/include/c++/6/bits/stl_iterator.h **** // Copyright (C) 2001-2016 Free Software Foundation, Inc.
   4:/usr/include/c++/6/bits/stl_iterator.h **** //
   5:/usr/include/c++/6/bits/stl_iterator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/6/bits/stl_iterator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/6/bits/stl_iterator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/6/bits/stl_iterator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/6/bits/stl_iterator.h **** // any later version.
  10:/usr/include/c++/6/bits/stl_iterator.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 564


  11:/usr/include/c++/6/bits/stl_iterator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/6/bits/stl_iterator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/6/bits/stl_iterator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/6/bits/stl_iterator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/6/bits/stl_iterator.h **** 
  16:/usr/include/c++/6/bits/stl_iterator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/6/bits/stl_iterator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/6/bits/stl_iterator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/6/bits/stl_iterator.h **** 
  20:/usr/include/c++/6/bits/stl_iterator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/6/bits/stl_iterator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/6/bits/stl_iterator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/6/bits/stl_iterator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/6/bits/stl_iterator.h **** 
  25:/usr/include/c++/6/bits/stl_iterator.h **** /*
  26:/usr/include/c++/6/bits/stl_iterator.h ****  *
  27:/usr/include/c++/6/bits/stl_iterator.h ****  * Copyright (c) 1994
  28:/usr/include/c++/6/bits/stl_iterator.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/6/bits/stl_iterator.h ****  *
  30:/usr/include/c++/6/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/6/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/6/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/6/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/6/bits/stl_iterator.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/6/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/6/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/6/bits/stl_iterator.h ****  *
  38:/usr/include/c++/6/bits/stl_iterator.h ****  *
  39:/usr/include/c++/6/bits/stl_iterator.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/6/bits/stl_iterator.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/6/bits/stl_iterator.h ****  *
  42:/usr/include/c++/6/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/6/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/6/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/6/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/6/bits/stl_iterator.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/6/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/6/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/6/bits/stl_iterator.h ****  */
  50:/usr/include/c++/6/bits/stl_iterator.h **** 
  51:/usr/include/c++/6/bits/stl_iterator.h **** /** @file bits/stl_iterator.h
  52:/usr/include/c++/6/bits/stl_iterator.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/6/bits/stl_iterator.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/usr/include/c++/6/bits/stl_iterator.h ****  *
  55:/usr/include/c++/6/bits/stl_iterator.h ****  *  This file implements reverse_iterator, back_insert_iterator,
  56:/usr/include/c++/6/bits/stl_iterator.h ****  *  front_insert_iterator, insert_iterator, __normal_iterator, and their
  57:/usr/include/c++/6/bits/stl_iterator.h ****  *  supporting functions and overloaded operators.
  58:/usr/include/c++/6/bits/stl_iterator.h ****  */
  59:/usr/include/c++/6/bits/stl_iterator.h **** 
  60:/usr/include/c++/6/bits/stl_iterator.h **** #ifndef _STL_ITERATOR_H
  61:/usr/include/c++/6/bits/stl_iterator.h **** #define _STL_ITERATOR_H 1
  62:/usr/include/c++/6/bits/stl_iterator.h **** 
  63:/usr/include/c++/6/bits/stl_iterator.h **** #include <bits/cpp_type_traits.h>
  64:/usr/include/c++/6/bits/stl_iterator.h **** #include <ext/type_traits.h>
  65:/usr/include/c++/6/bits/stl_iterator.h **** #include <bits/move.h>
  66:/usr/include/c++/6/bits/stl_iterator.h **** #include <bits/ptr_traits.h>
  67:/usr/include/c++/6/bits/stl_iterator.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 565


  68:/usr/include/c++/6/bits/stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  69:/usr/include/c++/6/bits/stl_iterator.h **** {
  70:/usr/include/c++/6/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  71:/usr/include/c++/6/bits/stl_iterator.h **** 
  72:/usr/include/c++/6/bits/stl_iterator.h ****   /**
  73:/usr/include/c++/6/bits/stl_iterator.h ****    * @addtogroup iterators
  74:/usr/include/c++/6/bits/stl_iterator.h ****    * @{
  75:/usr/include/c++/6/bits/stl_iterator.h ****    */
  76:/usr/include/c++/6/bits/stl_iterator.h **** 
  77:/usr/include/c++/6/bits/stl_iterator.h ****   // 24.4.1 Reverse iterators
  78:/usr/include/c++/6/bits/stl_iterator.h ****   /**
  79:/usr/include/c++/6/bits/stl_iterator.h ****    *  Bidirectional and random access iterators have corresponding reverse
  80:/usr/include/c++/6/bits/stl_iterator.h ****    *  %iterator adaptors that iterate through the data structure in the
  81:/usr/include/c++/6/bits/stl_iterator.h ****    *  opposite direction.  They have the same signatures as the corresponding
  82:/usr/include/c++/6/bits/stl_iterator.h ****    *  iterators.  The fundamental relation between a reverse %iterator and its
  83:/usr/include/c++/6/bits/stl_iterator.h ****    *  corresponding %iterator @c i is established by the identity:
  84:/usr/include/c++/6/bits/stl_iterator.h ****    *  @code
  85:/usr/include/c++/6/bits/stl_iterator.h ****    *      &*(reverse_iterator(i)) == &*(i - 1)
  86:/usr/include/c++/6/bits/stl_iterator.h ****    *  @endcode
  87:/usr/include/c++/6/bits/stl_iterator.h ****    *
  88:/usr/include/c++/6/bits/stl_iterator.h ****    *  <em>This mapping is dictated by the fact that while there is always a
  89:/usr/include/c++/6/bits/stl_iterator.h ****    *  pointer past the end of an array, there might not be a valid pointer
  90:/usr/include/c++/6/bits/stl_iterator.h ****    *  before the beginning of an array.</em> [24.4.1]/1,2
  91:/usr/include/c++/6/bits/stl_iterator.h ****    *
  92:/usr/include/c++/6/bits/stl_iterator.h ****    *  Reverse iterators can be tricky and surprising at first.  Their
  93:/usr/include/c++/6/bits/stl_iterator.h ****    *  semantics make sense, however, and the trickiness is a side effect of
  94:/usr/include/c++/6/bits/stl_iterator.h ****    *  the requirement that the iterators must be safe.
  95:/usr/include/c++/6/bits/stl_iterator.h ****   */
  96:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _Iterator>
  97:/usr/include/c++/6/bits/stl_iterator.h ****     class reverse_iterator
  98:/usr/include/c++/6/bits/stl_iterator.h ****     : public iterator<typename iterator_traits<_Iterator>::iterator_category,
  99:/usr/include/c++/6/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::value_type,
 100:/usr/include/c++/6/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::difference_type,
 101:/usr/include/c++/6/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::pointer,
 102:/usr/include/c++/6/bits/stl_iterator.h ****                       typename iterator_traits<_Iterator>::reference>
 103:/usr/include/c++/6/bits/stl_iterator.h ****     {
 104:/usr/include/c++/6/bits/stl_iterator.h ****     protected:
 105:/usr/include/c++/6/bits/stl_iterator.h ****       _Iterator current;
 106:/usr/include/c++/6/bits/stl_iterator.h **** 
 107:/usr/include/c++/6/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 108:/usr/include/c++/6/bits/stl_iterator.h **** 
 109:/usr/include/c++/6/bits/stl_iterator.h ****     public:
 110:/usr/include/c++/6/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 111:/usr/include/c++/6/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type	difference_type;
 112:/usr/include/c++/6/bits/stl_iterator.h ****       typedef typename __traits_type::pointer		pointer;
 113:/usr/include/c++/6/bits/stl_iterator.h ****       typedef typename __traits_type::reference		reference;
 114:/usr/include/c++/6/bits/stl_iterator.h **** 
 115:/usr/include/c++/6/bits/stl_iterator.h ****       /**
 116:/usr/include/c++/6/bits/stl_iterator.h ****        *  The default constructor value-initializes member @p current.
 117:/usr/include/c++/6/bits/stl_iterator.h ****        *  If it is a pointer, that means it is zero-initialized.
 118:/usr/include/c++/6/bits/stl_iterator.h ****       */
 119:/usr/include/c++/6/bits/stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 120:/usr/include/c++/6/bits/stl_iterator.h ****       // 235 No specification of default ctor for reverse_iterator
 121:/usr/include/c++/6/bits/stl_iterator.h ****       reverse_iterator() : current() { }
 122:/usr/include/c++/6/bits/stl_iterator.h **** 
 123:/usr/include/c++/6/bits/stl_iterator.h ****       /**
 124:/usr/include/c++/6/bits/stl_iterator.h ****        *  This %iterator will move in the opposite direction that @p x does.
GAS LISTING /tmp/ccvmoMuv.s 			page 566


 125:/usr/include/c++/6/bits/stl_iterator.h ****       */
 126:/usr/include/c++/6/bits/stl_iterator.h ****       explicit
 127:/usr/include/c++/6/bits/stl_iterator.h ****       reverse_iterator(iterator_type __x) : current(__x) { }
 128:/usr/include/c++/6/bits/stl_iterator.h **** 
 129:/usr/include/c++/6/bits/stl_iterator.h ****       /**
 130:/usr/include/c++/6/bits/stl_iterator.h ****        *  The copy constructor is normal.
 131:/usr/include/c++/6/bits/stl_iterator.h ****       */
 132:/usr/include/c++/6/bits/stl_iterator.h ****       reverse_iterator(const reverse_iterator& __x)
 133:/usr/include/c++/6/bits/stl_iterator.h ****       : current(__x.current) { }
 134:/usr/include/c++/6/bits/stl_iterator.h **** 
 135:/usr/include/c++/6/bits/stl_iterator.h ****       /**
 136:/usr/include/c++/6/bits/stl_iterator.h ****        *  A %reverse_iterator across other types can be copied if the
 137:/usr/include/c++/6/bits/stl_iterator.h ****        *  underlying %iterator can be converted to the type of @c current.
 138:/usr/include/c++/6/bits/stl_iterator.h ****       */
 139:/usr/include/c++/6/bits/stl_iterator.h ****       template<typename _Iter>
 140:/usr/include/c++/6/bits/stl_iterator.h ****         reverse_iterator(const reverse_iterator<_Iter>& __x)
 141:/usr/include/c++/6/bits/stl_iterator.h **** 	: current(__x.base()) { }
 142:/usr/include/c++/6/bits/stl_iterator.h **** 
 143:/usr/include/c++/6/bits/stl_iterator.h ****       /**
 144:/usr/include/c++/6/bits/stl_iterator.h ****        *  @return  @c current, the %iterator used for underlying work.
 145:/usr/include/c++/6/bits/stl_iterator.h ****       */
 146:/usr/include/c++/6/bits/stl_iterator.h ****       iterator_type
 147:/usr/include/c++/6/bits/stl_iterator.h ****       base() const
 148:/usr/include/c++/6/bits/stl_iterator.h ****       { return current; }
 149:/usr/include/c++/6/bits/stl_iterator.h **** 
 150:/usr/include/c++/6/bits/stl_iterator.h ****       /**
 151:/usr/include/c++/6/bits/stl_iterator.h ****        *  @return  A reference to the value at @c --current
 152:/usr/include/c++/6/bits/stl_iterator.h ****        *
 153:/usr/include/c++/6/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 154:/usr/include/c++/6/bits/stl_iterator.h ****        *
 155:/usr/include/c++/6/bits/stl_iterator.h ****        *  @warning This implementation requires that for an iterator of the
 156:/usr/include/c++/6/bits/stl_iterator.h ****        *           underlying iterator type, @c x, a reference obtained by
 157:/usr/include/c++/6/bits/stl_iterator.h ****        *           @c *x remains valid after @c x has been modified or
 158:/usr/include/c++/6/bits/stl_iterator.h ****        *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
 159:/usr/include/c++/6/bits/stl_iterator.h ****       */
 160:/usr/include/c++/6/bits/stl_iterator.h ****       reference
 161:/usr/include/c++/6/bits/stl_iterator.h ****       operator*() const
 162:/usr/include/c++/6/bits/stl_iterator.h ****       {
 163:/usr/include/c++/6/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 164:/usr/include/c++/6/bits/stl_iterator.h **** 	return *--__tmp;
 165:/usr/include/c++/6/bits/stl_iterator.h ****       }
 166:/usr/include/c++/6/bits/stl_iterator.h **** 
 167:/usr/include/c++/6/bits/stl_iterator.h ****       /**
 168:/usr/include/c++/6/bits/stl_iterator.h ****        *  @return  A pointer to the value at @c --current
 169:/usr/include/c++/6/bits/stl_iterator.h ****        *
 170:/usr/include/c++/6/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 171:/usr/include/c++/6/bits/stl_iterator.h ****       */
 172:/usr/include/c++/6/bits/stl_iterator.h ****       pointer
 173:/usr/include/c++/6/bits/stl_iterator.h ****       operator->() const
 174:/usr/include/c++/6/bits/stl_iterator.h ****       { return &(operator*()); }
 175:/usr/include/c++/6/bits/stl_iterator.h **** 
 176:/usr/include/c++/6/bits/stl_iterator.h ****       /**
 177:/usr/include/c++/6/bits/stl_iterator.h ****        *  @return  @c *this
 178:/usr/include/c++/6/bits/stl_iterator.h ****        *
 179:/usr/include/c++/6/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 180:/usr/include/c++/6/bits/stl_iterator.h ****       */
 181:/usr/include/c++/6/bits/stl_iterator.h ****       reverse_iterator&
GAS LISTING /tmp/ccvmoMuv.s 			page 567


 182:/usr/include/c++/6/bits/stl_iterator.h ****       operator++()
 183:/usr/include/c++/6/bits/stl_iterator.h ****       {
 184:/usr/include/c++/6/bits/stl_iterator.h **** 	--current;
 185:/usr/include/c++/6/bits/stl_iterator.h **** 	return *this;
 186:/usr/include/c++/6/bits/stl_iterator.h ****       }
 187:/usr/include/c++/6/bits/stl_iterator.h **** 
 188:/usr/include/c++/6/bits/stl_iterator.h ****       /**
 189:/usr/include/c++/6/bits/stl_iterator.h ****        *  @return  The original value of @c *this
 190:/usr/include/c++/6/bits/stl_iterator.h ****        *
 191:/usr/include/c++/6/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 192:/usr/include/c++/6/bits/stl_iterator.h ****       */
 193:/usr/include/c++/6/bits/stl_iterator.h ****       reverse_iterator
 194:/usr/include/c++/6/bits/stl_iterator.h ****       operator++(int)
 195:/usr/include/c++/6/bits/stl_iterator.h ****       {
 196:/usr/include/c++/6/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 197:/usr/include/c++/6/bits/stl_iterator.h **** 	--current;
 198:/usr/include/c++/6/bits/stl_iterator.h **** 	return __tmp;
 199:/usr/include/c++/6/bits/stl_iterator.h ****       }
 200:/usr/include/c++/6/bits/stl_iterator.h **** 
 201:/usr/include/c++/6/bits/stl_iterator.h ****       /**
 202:/usr/include/c++/6/bits/stl_iterator.h ****        *  @return  @c *this
 203:/usr/include/c++/6/bits/stl_iterator.h ****        *
 204:/usr/include/c++/6/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 205:/usr/include/c++/6/bits/stl_iterator.h ****       */
 206:/usr/include/c++/6/bits/stl_iterator.h ****       reverse_iterator&
 207:/usr/include/c++/6/bits/stl_iterator.h ****       operator--()
 208:/usr/include/c++/6/bits/stl_iterator.h ****       {
 209:/usr/include/c++/6/bits/stl_iterator.h **** 	++current;
 210:/usr/include/c++/6/bits/stl_iterator.h **** 	return *this;
 211:/usr/include/c++/6/bits/stl_iterator.h ****       }
 212:/usr/include/c++/6/bits/stl_iterator.h **** 
 213:/usr/include/c++/6/bits/stl_iterator.h ****       /**
 214:/usr/include/c++/6/bits/stl_iterator.h ****        *  @return  A reverse_iterator with the previous value of @c *this
 215:/usr/include/c++/6/bits/stl_iterator.h ****        *
 216:/usr/include/c++/6/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 217:/usr/include/c++/6/bits/stl_iterator.h ****       */
 218:/usr/include/c++/6/bits/stl_iterator.h ****       reverse_iterator
 219:/usr/include/c++/6/bits/stl_iterator.h ****       operator--(int)
 220:/usr/include/c++/6/bits/stl_iterator.h ****       {
 221:/usr/include/c++/6/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 222:/usr/include/c++/6/bits/stl_iterator.h **** 	++current;
 223:/usr/include/c++/6/bits/stl_iterator.h **** 	return __tmp;
 224:/usr/include/c++/6/bits/stl_iterator.h ****       }
 225:/usr/include/c++/6/bits/stl_iterator.h **** 
 226:/usr/include/c++/6/bits/stl_iterator.h ****       /**
 227:/usr/include/c++/6/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 228:/usr/include/c++/6/bits/stl_iterator.h ****        *
 229:/usr/include/c++/6/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 230:/usr/include/c++/6/bits/stl_iterator.h ****       */
 231:/usr/include/c++/6/bits/stl_iterator.h ****       reverse_iterator
 232:/usr/include/c++/6/bits/stl_iterator.h ****       operator+(difference_type __n) const
 233:/usr/include/c++/6/bits/stl_iterator.h ****       { return reverse_iterator(current - __n); }
 234:/usr/include/c++/6/bits/stl_iterator.h **** 
 235:/usr/include/c++/6/bits/stl_iterator.h ****       /**
 236:/usr/include/c++/6/bits/stl_iterator.h ****        *  @return  *this
 237:/usr/include/c++/6/bits/stl_iterator.h ****        *
 238:/usr/include/c++/6/bits/stl_iterator.h ****        *  Moves the underlying iterator backwards @a __n steps.
GAS LISTING /tmp/ccvmoMuv.s 			page 568


 239:/usr/include/c++/6/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 240:/usr/include/c++/6/bits/stl_iterator.h ****       */
 241:/usr/include/c++/6/bits/stl_iterator.h ****       reverse_iterator&
 242:/usr/include/c++/6/bits/stl_iterator.h ****       operator+=(difference_type __n)
 243:/usr/include/c++/6/bits/stl_iterator.h ****       {
 244:/usr/include/c++/6/bits/stl_iterator.h **** 	current -= __n;
 245:/usr/include/c++/6/bits/stl_iterator.h **** 	return *this;
 246:/usr/include/c++/6/bits/stl_iterator.h ****       }
 247:/usr/include/c++/6/bits/stl_iterator.h **** 
 248:/usr/include/c++/6/bits/stl_iterator.h ****       /**
 249:/usr/include/c++/6/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 250:/usr/include/c++/6/bits/stl_iterator.h ****        *
 251:/usr/include/c++/6/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 252:/usr/include/c++/6/bits/stl_iterator.h ****       */
 253:/usr/include/c++/6/bits/stl_iterator.h ****       reverse_iterator
 254:/usr/include/c++/6/bits/stl_iterator.h ****       operator-(difference_type __n) const
 255:/usr/include/c++/6/bits/stl_iterator.h ****       { return reverse_iterator(current + __n); }
 256:/usr/include/c++/6/bits/stl_iterator.h **** 
 257:/usr/include/c++/6/bits/stl_iterator.h ****       /**
 258:/usr/include/c++/6/bits/stl_iterator.h ****        *  @return  *this
 259:/usr/include/c++/6/bits/stl_iterator.h ****        *
 260:/usr/include/c++/6/bits/stl_iterator.h ****        *  Moves the underlying iterator forwards @a __n steps.
 261:/usr/include/c++/6/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 262:/usr/include/c++/6/bits/stl_iterator.h ****       */
 263:/usr/include/c++/6/bits/stl_iterator.h ****       reverse_iterator&
 264:/usr/include/c++/6/bits/stl_iterator.h ****       operator-=(difference_type __n)
 265:/usr/include/c++/6/bits/stl_iterator.h ****       {
 266:/usr/include/c++/6/bits/stl_iterator.h **** 	current += __n;
 267:/usr/include/c++/6/bits/stl_iterator.h **** 	return *this;
 268:/usr/include/c++/6/bits/stl_iterator.h ****       }
 269:/usr/include/c++/6/bits/stl_iterator.h **** 
 270:/usr/include/c++/6/bits/stl_iterator.h ****       /**
 271:/usr/include/c++/6/bits/stl_iterator.h ****        *  @return  The value at @c current - @a __n - 1
 272:/usr/include/c++/6/bits/stl_iterator.h ****        *
 273:/usr/include/c++/6/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 274:/usr/include/c++/6/bits/stl_iterator.h ****       */
 275:/usr/include/c++/6/bits/stl_iterator.h ****       reference
 276:/usr/include/c++/6/bits/stl_iterator.h ****       operator[](difference_type __n) const
 277:/usr/include/c++/6/bits/stl_iterator.h ****       { return *(*this + __n); }
 278:/usr/include/c++/6/bits/stl_iterator.h ****     };
 279:/usr/include/c++/6/bits/stl_iterator.h **** 
 280:/usr/include/c++/6/bits/stl_iterator.h ****   //@{
 281:/usr/include/c++/6/bits/stl_iterator.h ****   /**
 282:/usr/include/c++/6/bits/stl_iterator.h ****    *  @param  __x  A %reverse_iterator.
 283:/usr/include/c++/6/bits/stl_iterator.h ****    *  @param  __y  A %reverse_iterator.
 284:/usr/include/c++/6/bits/stl_iterator.h ****    *  @return  A simple bool.
 285:/usr/include/c++/6/bits/stl_iterator.h ****    *
 286:/usr/include/c++/6/bits/stl_iterator.h ****    *  Reverse iterators forward many operations to their underlying base()
 287:/usr/include/c++/6/bits/stl_iterator.h ****    *  iterators.  Others are implemented in terms of one another.
 288:/usr/include/c++/6/bits/stl_iterator.h ****    *
 289:/usr/include/c++/6/bits/stl_iterator.h ****   */
 290:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _Iterator>
 291:/usr/include/c++/6/bits/stl_iterator.h ****     inline bool
 292:/usr/include/c++/6/bits/stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x,
 293:/usr/include/c++/6/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 294:/usr/include/c++/6/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 295:/usr/include/c++/6/bits/stl_iterator.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 569


 296:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _Iterator>
 297:/usr/include/c++/6/bits/stl_iterator.h ****     inline bool
 298:/usr/include/c++/6/bits/stl_iterator.h ****     operator<(const reverse_iterator<_Iterator>& __x,
 299:/usr/include/c++/6/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 300:/usr/include/c++/6/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 301:/usr/include/c++/6/bits/stl_iterator.h **** 
 302:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _Iterator>
 303:/usr/include/c++/6/bits/stl_iterator.h ****     inline bool
 304:/usr/include/c++/6/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_Iterator>& __x,
 305:/usr/include/c++/6/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 306:/usr/include/c++/6/bits/stl_iterator.h ****     { return !(__x == __y); }
 307:/usr/include/c++/6/bits/stl_iterator.h **** 
 308:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _Iterator>
 309:/usr/include/c++/6/bits/stl_iterator.h ****     inline bool
 310:/usr/include/c++/6/bits/stl_iterator.h ****     operator>(const reverse_iterator<_Iterator>& __x,
 311:/usr/include/c++/6/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 312:/usr/include/c++/6/bits/stl_iterator.h ****     { return __y < __x; }
 313:/usr/include/c++/6/bits/stl_iterator.h **** 
 314:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _Iterator>
 315:/usr/include/c++/6/bits/stl_iterator.h ****     inline bool
 316:/usr/include/c++/6/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_Iterator>& __x,
 317:/usr/include/c++/6/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 318:/usr/include/c++/6/bits/stl_iterator.h ****     { return !(__y < __x); }
 319:/usr/include/c++/6/bits/stl_iterator.h **** 
 320:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _Iterator>
 321:/usr/include/c++/6/bits/stl_iterator.h ****     inline bool
 322:/usr/include/c++/6/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_Iterator>& __x,
 323:/usr/include/c++/6/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 324:/usr/include/c++/6/bits/stl_iterator.h ****     { return !(__x < __y); }
 325:/usr/include/c++/6/bits/stl_iterator.h **** 
 326:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _Iterator>
 327:/usr/include/c++/6/bits/stl_iterator.h **** #if __cplusplus < 201103L
 328:/usr/include/c++/6/bits/stl_iterator.h ****     inline typename reverse_iterator<_Iterator>::difference_type
 329:/usr/include/c++/6/bits/stl_iterator.h ****     operator-(const reverse_iterator<_Iterator>& __x,
 330:/usr/include/c++/6/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 331:/usr/include/c++/6/bits/stl_iterator.h **** #else
 332:/usr/include/c++/6/bits/stl_iterator.h ****     inline auto
 333:/usr/include/c++/6/bits/stl_iterator.h ****     operator-(const reverse_iterator<_Iterator>& __x,
 334:/usr/include/c++/6/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 335:/usr/include/c++/6/bits/stl_iterator.h ****     -> decltype(__x.base() - __y.base())
 336:/usr/include/c++/6/bits/stl_iterator.h **** #endif
 337:/usr/include/c++/6/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 338:/usr/include/c++/6/bits/stl_iterator.h **** 
 339:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _Iterator>
 340:/usr/include/c++/6/bits/stl_iterator.h ****     inline reverse_iterator<_Iterator>
 341:/usr/include/c++/6/bits/stl_iterator.h ****     operator+(typename reverse_iterator<_Iterator>::difference_type __n,
 342:/usr/include/c++/6/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __x)
 343:/usr/include/c++/6/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__x.base() - __n); }
 344:/usr/include/c++/6/bits/stl_iterator.h **** 
 345:/usr/include/c++/6/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 346:/usr/include/c++/6/bits/stl_iterator.h ****   // DR 280. Comparison of reverse_iterator to const reverse_iterator.
 347:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 348:/usr/include/c++/6/bits/stl_iterator.h ****     inline bool
 349:/usr/include/c++/6/bits/stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 350:/usr/include/c++/6/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 351:/usr/include/c++/6/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 352:/usr/include/c++/6/bits/stl_iterator.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 570


 353:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 354:/usr/include/c++/6/bits/stl_iterator.h ****     inline bool
 355:/usr/include/c++/6/bits/stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 356:/usr/include/c++/6/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 357:/usr/include/c++/6/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 358:/usr/include/c++/6/bits/stl_iterator.h **** 
 359:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 360:/usr/include/c++/6/bits/stl_iterator.h ****     inline bool
 361:/usr/include/c++/6/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 362:/usr/include/c++/6/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 363:/usr/include/c++/6/bits/stl_iterator.h ****     { return !(__x == __y); }
 364:/usr/include/c++/6/bits/stl_iterator.h **** 
 365:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 366:/usr/include/c++/6/bits/stl_iterator.h ****     inline bool
 367:/usr/include/c++/6/bits/stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 368:/usr/include/c++/6/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 369:/usr/include/c++/6/bits/stl_iterator.h ****     { return __y < __x; }
 370:/usr/include/c++/6/bits/stl_iterator.h **** 
 371:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 372:/usr/include/c++/6/bits/stl_iterator.h ****     inline bool
 373:/usr/include/c++/6/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 374:/usr/include/c++/6/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 375:/usr/include/c++/6/bits/stl_iterator.h ****     { return !(__y < __x); }
 376:/usr/include/c++/6/bits/stl_iterator.h **** 
 377:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 378:/usr/include/c++/6/bits/stl_iterator.h ****     inline bool
 379:/usr/include/c++/6/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 380:/usr/include/c++/6/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 381:/usr/include/c++/6/bits/stl_iterator.h ****     { return !(__x < __y); }
 382:/usr/include/c++/6/bits/stl_iterator.h **** 
 383:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 384:/usr/include/c++/6/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 385:/usr/include/c++/6/bits/stl_iterator.h ****     // DR 685.
 386:/usr/include/c++/6/bits/stl_iterator.h ****     inline auto
 387:/usr/include/c++/6/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 388:/usr/include/c++/6/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 389:/usr/include/c++/6/bits/stl_iterator.h ****     -> decltype(__y.base() - __x.base())
 390:/usr/include/c++/6/bits/stl_iterator.h **** #else
 391:/usr/include/c++/6/bits/stl_iterator.h ****     inline typename reverse_iterator<_IteratorL>::difference_type
 392:/usr/include/c++/6/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 393:/usr/include/c++/6/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 394:/usr/include/c++/6/bits/stl_iterator.h **** #endif
 395:/usr/include/c++/6/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 396:/usr/include/c++/6/bits/stl_iterator.h ****   //@}
 397:/usr/include/c++/6/bits/stl_iterator.h **** 
 398:/usr/include/c++/6/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 399:/usr/include/c++/6/bits/stl_iterator.h ****   // Same as C++14 make_reverse_iterator but used in C++03 mode too.
 400:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _Iterator>
 401:/usr/include/c++/6/bits/stl_iterator.h ****     inline reverse_iterator<_Iterator>
 402:/usr/include/c++/6/bits/stl_iterator.h ****     __make_reverse_iterator(_Iterator __i)
 403:/usr/include/c++/6/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 404:/usr/include/c++/6/bits/stl_iterator.h **** 
 405:/usr/include/c++/6/bits/stl_iterator.h **** # if __cplusplus > 201103L
 406:/usr/include/c++/6/bits/stl_iterator.h **** #  define __cpp_lib_make_reverse_iterator 201402
 407:/usr/include/c++/6/bits/stl_iterator.h **** 
 408:/usr/include/c++/6/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 409:/usr/include/c++/6/bits/stl_iterator.h ****   // DR 2285. make_reverse_iterator
GAS LISTING /tmp/ccvmoMuv.s 			page 571


 410:/usr/include/c++/6/bits/stl_iterator.h ****   /// Generator function for reverse_iterator.
 411:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _Iterator>
 412:/usr/include/c++/6/bits/stl_iterator.h ****     inline reverse_iterator<_Iterator>
 413:/usr/include/c++/6/bits/stl_iterator.h ****     make_reverse_iterator(_Iterator __i)
 414:/usr/include/c++/6/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 415:/usr/include/c++/6/bits/stl_iterator.h **** # endif
 416:/usr/include/c++/6/bits/stl_iterator.h **** #endif
 417:/usr/include/c++/6/bits/stl_iterator.h **** 
 418:/usr/include/c++/6/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 419:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _Iterator>
 420:/usr/include/c++/6/bits/stl_iterator.h ****     auto
 421:/usr/include/c++/6/bits/stl_iterator.h ****     __niter_base(reverse_iterator<_Iterator> __it)
 422:/usr/include/c++/6/bits/stl_iterator.h ****     -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
 423:/usr/include/c++/6/bits/stl_iterator.h ****     { return __make_reverse_iterator(__niter_base(__it.base())); }
 424:/usr/include/c++/6/bits/stl_iterator.h **** 
 425:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _Iterator>
 426:/usr/include/c++/6/bits/stl_iterator.h ****     struct __is_move_iterator<reverse_iterator<_Iterator> >
 427:/usr/include/c++/6/bits/stl_iterator.h ****       : __is_move_iterator<_Iterator>
 428:/usr/include/c++/6/bits/stl_iterator.h ****     { };
 429:/usr/include/c++/6/bits/stl_iterator.h **** 
 430:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _Iterator>
 431:/usr/include/c++/6/bits/stl_iterator.h ****     auto
 432:/usr/include/c++/6/bits/stl_iterator.h ****     __miter_base(reverse_iterator<_Iterator> __it)
 433:/usr/include/c++/6/bits/stl_iterator.h ****     -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
 434:/usr/include/c++/6/bits/stl_iterator.h ****     { return __make_reverse_iterator(__miter_base(__it.base())); }
 435:/usr/include/c++/6/bits/stl_iterator.h **** #endif
 436:/usr/include/c++/6/bits/stl_iterator.h **** 
 437:/usr/include/c++/6/bits/stl_iterator.h ****   // 24.4.2.2.1 back_insert_iterator
 438:/usr/include/c++/6/bits/stl_iterator.h ****   /**
 439:/usr/include/c++/6/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 440:/usr/include/c++/6/bits/stl_iterator.h ****    *
 441:/usr/include/c++/6/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 442:/usr/include/c++/6/bits/stl_iterator.h ****    *  Assigning a T to the iterator appends it to the container using
 443:/usr/include/c++/6/bits/stl_iterator.h ****    *  push_back.
 444:/usr/include/c++/6/bits/stl_iterator.h ****    *
 445:/usr/include/c++/6/bits/stl_iterator.h ****    *  Tip:  Using the back_inserter function to create these iterators can
 446:/usr/include/c++/6/bits/stl_iterator.h ****    *  save typing.
 447:/usr/include/c++/6/bits/stl_iterator.h ****   */
 448:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _Container>
 449:/usr/include/c++/6/bits/stl_iterator.h ****     class back_insert_iterator
 450:/usr/include/c++/6/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 451:/usr/include/c++/6/bits/stl_iterator.h ****     {
 452:/usr/include/c++/6/bits/stl_iterator.h ****     protected:
 453:/usr/include/c++/6/bits/stl_iterator.h ****       _Container* container;
 454:/usr/include/c++/6/bits/stl_iterator.h **** 
 455:/usr/include/c++/6/bits/stl_iterator.h ****     public:
 456:/usr/include/c++/6/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 457:/usr/include/c++/6/bits/stl_iterator.h ****       typedef _Container          container_type;
 458:/usr/include/c++/6/bits/stl_iterator.h **** 
 459:/usr/include/c++/6/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 460:/usr/include/c++/6/bits/stl_iterator.h ****       explicit
 461:/usr/include/c++/6/bits/stl_iterator.h ****       back_insert_iterator(_Container& __x)
 462:/usr/include/c++/6/bits/stl_iterator.h ****       : container(std::__addressof(__x)) { }
 463:/usr/include/c++/6/bits/stl_iterator.h **** 
 464:/usr/include/c++/6/bits/stl_iterator.h ****       /**
 465:/usr/include/c++/6/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 466:/usr/include/c++/6/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
GAS LISTING /tmp/ccvmoMuv.s 			page 572


 467:/usr/include/c++/6/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 468:/usr/include/c++/6/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 469:/usr/include/c++/6/bits/stl_iterator.h ****        *
 470:/usr/include/c++/6/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 471:/usr/include/c++/6/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 472:/usr/include/c++/6/bits/stl_iterator.h ****        *  the end, if you like).  Assigning a value to the %iterator will
 473:/usr/include/c++/6/bits/stl_iterator.h ****        *  always append the value to the end of the container.
 474:/usr/include/c++/6/bits/stl_iterator.h ****       */
 475:/usr/include/c++/6/bits/stl_iterator.h **** #if __cplusplus < 201103L
 476:/usr/include/c++/6/bits/stl_iterator.h ****       back_insert_iterator&
 477:/usr/include/c++/6/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 478:/usr/include/c++/6/bits/stl_iterator.h ****       {
 479:/usr/include/c++/6/bits/stl_iterator.h **** 	container->push_back(__value);
 480:/usr/include/c++/6/bits/stl_iterator.h **** 	return *this;
 481:/usr/include/c++/6/bits/stl_iterator.h ****       }
 482:/usr/include/c++/6/bits/stl_iterator.h **** #else
 483:/usr/include/c++/6/bits/stl_iterator.h ****       back_insert_iterator&
 484:/usr/include/c++/6/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 485:/usr/include/c++/6/bits/stl_iterator.h ****       {
 486:/usr/include/c++/6/bits/stl_iterator.h **** 	container->push_back(__value);
 487:/usr/include/c++/6/bits/stl_iterator.h **** 	return *this;
 488:/usr/include/c++/6/bits/stl_iterator.h ****       }
 489:/usr/include/c++/6/bits/stl_iterator.h **** 
 490:/usr/include/c++/6/bits/stl_iterator.h ****       back_insert_iterator&
 491:/usr/include/c++/6/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 492:/usr/include/c++/6/bits/stl_iterator.h ****       {
 493:/usr/include/c++/6/bits/stl_iterator.h **** 	container->push_back(std::move(__value));
 494:/usr/include/c++/6/bits/stl_iterator.h **** 	return *this;
 495:/usr/include/c++/6/bits/stl_iterator.h ****       }
 496:/usr/include/c++/6/bits/stl_iterator.h **** #endif
 497:/usr/include/c++/6/bits/stl_iterator.h **** 
 498:/usr/include/c++/6/bits/stl_iterator.h ****       /// Simply returns *this.
 499:/usr/include/c++/6/bits/stl_iterator.h ****       back_insert_iterator&
 500:/usr/include/c++/6/bits/stl_iterator.h ****       operator*()
 501:/usr/include/c++/6/bits/stl_iterator.h ****       { return *this; }
 502:/usr/include/c++/6/bits/stl_iterator.h **** 
 503:/usr/include/c++/6/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 504:/usr/include/c++/6/bits/stl_iterator.h ****       back_insert_iterator&
 505:/usr/include/c++/6/bits/stl_iterator.h ****       operator++()
 506:/usr/include/c++/6/bits/stl_iterator.h ****       { return *this; }
 507:/usr/include/c++/6/bits/stl_iterator.h **** 
 508:/usr/include/c++/6/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 509:/usr/include/c++/6/bits/stl_iterator.h ****       back_insert_iterator
 510:/usr/include/c++/6/bits/stl_iterator.h ****       operator++(int)
 511:/usr/include/c++/6/bits/stl_iterator.h ****       { return *this; }
 512:/usr/include/c++/6/bits/stl_iterator.h ****     };
 513:/usr/include/c++/6/bits/stl_iterator.h **** 
 514:/usr/include/c++/6/bits/stl_iterator.h ****   /**
 515:/usr/include/c++/6/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 516:/usr/include/c++/6/bits/stl_iterator.h ****    *  @return  An instance of back_insert_iterator working on @p __x.
 517:/usr/include/c++/6/bits/stl_iterator.h ****    *
 518:/usr/include/c++/6/bits/stl_iterator.h ****    *  This wrapper function helps in creating back_insert_iterator instances.
 519:/usr/include/c++/6/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 520:/usr/include/c++/6/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 521:/usr/include/c++/6/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 522:/usr/include/c++/6/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 523:/usr/include/c++/6/bits/stl_iterator.h ****    *  types for you.
GAS LISTING /tmp/ccvmoMuv.s 			page 573


 524:/usr/include/c++/6/bits/stl_iterator.h ****   */
 525:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _Container>
 526:/usr/include/c++/6/bits/stl_iterator.h ****     inline back_insert_iterator<_Container>
 527:/usr/include/c++/6/bits/stl_iterator.h ****     back_inserter(_Container& __x)
 528:/usr/include/c++/6/bits/stl_iterator.h ****     { return back_insert_iterator<_Container>(__x); }
 529:/usr/include/c++/6/bits/stl_iterator.h **** 
 530:/usr/include/c++/6/bits/stl_iterator.h ****   /**
 531:/usr/include/c++/6/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 532:/usr/include/c++/6/bits/stl_iterator.h ****    *
 533:/usr/include/c++/6/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 534:/usr/include/c++/6/bits/stl_iterator.h ****    *  Assigning a T to the iterator prepends it to the container using
 535:/usr/include/c++/6/bits/stl_iterator.h ****    *  push_front.
 536:/usr/include/c++/6/bits/stl_iterator.h ****    *
 537:/usr/include/c++/6/bits/stl_iterator.h ****    *  Tip:  Using the front_inserter function to create these iterators can
 538:/usr/include/c++/6/bits/stl_iterator.h ****    *  save typing.
 539:/usr/include/c++/6/bits/stl_iterator.h ****   */
 540:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _Container>
 541:/usr/include/c++/6/bits/stl_iterator.h ****     class front_insert_iterator
 542:/usr/include/c++/6/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 543:/usr/include/c++/6/bits/stl_iterator.h ****     {
 544:/usr/include/c++/6/bits/stl_iterator.h ****     protected:
 545:/usr/include/c++/6/bits/stl_iterator.h ****       _Container* container;
 546:/usr/include/c++/6/bits/stl_iterator.h **** 
 547:/usr/include/c++/6/bits/stl_iterator.h ****     public:
 548:/usr/include/c++/6/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 549:/usr/include/c++/6/bits/stl_iterator.h ****       typedef _Container          container_type;
 550:/usr/include/c++/6/bits/stl_iterator.h **** 
 551:/usr/include/c++/6/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 552:/usr/include/c++/6/bits/stl_iterator.h ****       explicit front_insert_iterator(_Container& __x)
 553:/usr/include/c++/6/bits/stl_iterator.h ****       : container(std::__addressof(__x)) { }
 554:/usr/include/c++/6/bits/stl_iterator.h **** 
 555:/usr/include/c++/6/bits/stl_iterator.h ****       /**
 556:/usr/include/c++/6/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 557:/usr/include/c++/6/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 558:/usr/include/c++/6/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 559:/usr/include/c++/6/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 560:/usr/include/c++/6/bits/stl_iterator.h ****        *
 561:/usr/include/c++/6/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 562:/usr/include/c++/6/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 563:/usr/include/c++/6/bits/stl_iterator.h ****        *  the front, if you like).  Assigning a value to the %iterator will
 564:/usr/include/c++/6/bits/stl_iterator.h ****        *  always prepend the value to the front of the container.
 565:/usr/include/c++/6/bits/stl_iterator.h ****       */
 566:/usr/include/c++/6/bits/stl_iterator.h **** #if __cplusplus < 201103L
 567:/usr/include/c++/6/bits/stl_iterator.h ****       front_insert_iterator&
 568:/usr/include/c++/6/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 569:/usr/include/c++/6/bits/stl_iterator.h ****       {
 570:/usr/include/c++/6/bits/stl_iterator.h **** 	container->push_front(__value);
 571:/usr/include/c++/6/bits/stl_iterator.h **** 	return *this;
 572:/usr/include/c++/6/bits/stl_iterator.h ****       }
 573:/usr/include/c++/6/bits/stl_iterator.h **** #else
 574:/usr/include/c++/6/bits/stl_iterator.h ****       front_insert_iterator&
 575:/usr/include/c++/6/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 576:/usr/include/c++/6/bits/stl_iterator.h ****       {
 577:/usr/include/c++/6/bits/stl_iterator.h **** 	container->push_front(__value);
 578:/usr/include/c++/6/bits/stl_iterator.h **** 	return *this;
 579:/usr/include/c++/6/bits/stl_iterator.h ****       }
 580:/usr/include/c++/6/bits/stl_iterator.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 574


 581:/usr/include/c++/6/bits/stl_iterator.h ****       front_insert_iterator&
 582:/usr/include/c++/6/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 583:/usr/include/c++/6/bits/stl_iterator.h ****       {
 584:/usr/include/c++/6/bits/stl_iterator.h **** 	container->push_front(std::move(__value));
 585:/usr/include/c++/6/bits/stl_iterator.h **** 	return *this;
 586:/usr/include/c++/6/bits/stl_iterator.h ****       }
 587:/usr/include/c++/6/bits/stl_iterator.h **** #endif
 588:/usr/include/c++/6/bits/stl_iterator.h **** 
 589:/usr/include/c++/6/bits/stl_iterator.h ****       /// Simply returns *this.
 590:/usr/include/c++/6/bits/stl_iterator.h ****       front_insert_iterator&
 591:/usr/include/c++/6/bits/stl_iterator.h ****       operator*()
 592:/usr/include/c++/6/bits/stl_iterator.h ****       { return *this; }
 593:/usr/include/c++/6/bits/stl_iterator.h **** 
 594:/usr/include/c++/6/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 595:/usr/include/c++/6/bits/stl_iterator.h ****       front_insert_iterator&
 596:/usr/include/c++/6/bits/stl_iterator.h ****       operator++()
 597:/usr/include/c++/6/bits/stl_iterator.h ****       { return *this; }
 598:/usr/include/c++/6/bits/stl_iterator.h **** 
 599:/usr/include/c++/6/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 600:/usr/include/c++/6/bits/stl_iterator.h ****       front_insert_iterator
 601:/usr/include/c++/6/bits/stl_iterator.h ****       operator++(int)
 602:/usr/include/c++/6/bits/stl_iterator.h ****       { return *this; }
 603:/usr/include/c++/6/bits/stl_iterator.h ****     };
 604:/usr/include/c++/6/bits/stl_iterator.h **** 
 605:/usr/include/c++/6/bits/stl_iterator.h ****   /**
 606:/usr/include/c++/6/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 607:/usr/include/c++/6/bits/stl_iterator.h ****    *  @return  An instance of front_insert_iterator working on @p x.
 608:/usr/include/c++/6/bits/stl_iterator.h ****    *
 609:/usr/include/c++/6/bits/stl_iterator.h ****    *  This wrapper function helps in creating front_insert_iterator instances.
 610:/usr/include/c++/6/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 611:/usr/include/c++/6/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 612:/usr/include/c++/6/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 613:/usr/include/c++/6/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 614:/usr/include/c++/6/bits/stl_iterator.h ****    *  types for you.
 615:/usr/include/c++/6/bits/stl_iterator.h ****   */
 616:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _Container>
 617:/usr/include/c++/6/bits/stl_iterator.h ****     inline front_insert_iterator<_Container>
 618:/usr/include/c++/6/bits/stl_iterator.h ****     front_inserter(_Container& __x)
 619:/usr/include/c++/6/bits/stl_iterator.h ****     { return front_insert_iterator<_Container>(__x); }
 620:/usr/include/c++/6/bits/stl_iterator.h **** 
 621:/usr/include/c++/6/bits/stl_iterator.h ****   /**
 622:/usr/include/c++/6/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 623:/usr/include/c++/6/bits/stl_iterator.h ****    *
 624:/usr/include/c++/6/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 625:/usr/include/c++/6/bits/stl_iterator.h ****    *  Assigning a T to the iterator inserts it in the container at the
 626:/usr/include/c++/6/bits/stl_iterator.h ****    *  %iterator's position, rather than overwriting the value at that
 627:/usr/include/c++/6/bits/stl_iterator.h ****    *  position.
 628:/usr/include/c++/6/bits/stl_iterator.h ****    *
 629:/usr/include/c++/6/bits/stl_iterator.h ****    *  (Sequences will actually insert a @e copy of the value before the
 630:/usr/include/c++/6/bits/stl_iterator.h ****    *  %iterator's position.)
 631:/usr/include/c++/6/bits/stl_iterator.h ****    *
 632:/usr/include/c++/6/bits/stl_iterator.h ****    *  Tip:  Using the inserter function to create these iterators can
 633:/usr/include/c++/6/bits/stl_iterator.h ****    *  save typing.
 634:/usr/include/c++/6/bits/stl_iterator.h ****   */
 635:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _Container>
 636:/usr/include/c++/6/bits/stl_iterator.h ****     class insert_iterator
 637:/usr/include/c++/6/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
GAS LISTING /tmp/ccvmoMuv.s 			page 575


 638:/usr/include/c++/6/bits/stl_iterator.h ****     {
 639:/usr/include/c++/6/bits/stl_iterator.h ****     protected:
 640:/usr/include/c++/6/bits/stl_iterator.h ****       _Container* container;
 641:/usr/include/c++/6/bits/stl_iterator.h ****       typename _Container::iterator iter;
 642:/usr/include/c++/6/bits/stl_iterator.h **** 
 643:/usr/include/c++/6/bits/stl_iterator.h ****     public:
 644:/usr/include/c++/6/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 645:/usr/include/c++/6/bits/stl_iterator.h ****       typedef _Container          container_type;
 646:/usr/include/c++/6/bits/stl_iterator.h **** 
 647:/usr/include/c++/6/bits/stl_iterator.h ****       /**
 648:/usr/include/c++/6/bits/stl_iterator.h ****        *  The only way to create this %iterator is with a container and an
 649:/usr/include/c++/6/bits/stl_iterator.h ****        *  initial position (a normal %iterator into the container).
 650:/usr/include/c++/6/bits/stl_iterator.h ****       */
 651:/usr/include/c++/6/bits/stl_iterator.h ****       insert_iterator(_Container& __x, typename _Container::iterator __i)
 652:/usr/include/c++/6/bits/stl_iterator.h ****       : container(std::__addressof(__x)), iter(__i) {}
 653:/usr/include/c++/6/bits/stl_iterator.h **** 
 654:/usr/include/c++/6/bits/stl_iterator.h ****       /**
 655:/usr/include/c++/6/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 656:/usr/include/c++/6/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 657:/usr/include/c++/6/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 658:/usr/include/c++/6/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 659:/usr/include/c++/6/bits/stl_iterator.h ****        *
 660:/usr/include/c++/6/bits/stl_iterator.h ****        *  This kind of %iterator maintains its own position in the
 661:/usr/include/c++/6/bits/stl_iterator.h ****        *  container.  Assigning a value to the %iterator will insert the
 662:/usr/include/c++/6/bits/stl_iterator.h ****        *  value into the container at the place before the %iterator.
 663:/usr/include/c++/6/bits/stl_iterator.h ****        *
 664:/usr/include/c++/6/bits/stl_iterator.h ****        *  The position is maintained such that subsequent assignments will
 665:/usr/include/c++/6/bits/stl_iterator.h ****        *  insert values immediately after one another.  For example,
 666:/usr/include/c++/6/bits/stl_iterator.h ****        *  @code
 667:/usr/include/c++/6/bits/stl_iterator.h ****        *     // vector v contains A and Z
 668:/usr/include/c++/6/bits/stl_iterator.h ****        *
 669:/usr/include/c++/6/bits/stl_iterator.h ****        *     insert_iterator i (v, ++v.begin());
 670:/usr/include/c++/6/bits/stl_iterator.h ****        *     i = 1;
 671:/usr/include/c++/6/bits/stl_iterator.h ****        *     i = 2;
 672:/usr/include/c++/6/bits/stl_iterator.h ****        *     i = 3;
 673:/usr/include/c++/6/bits/stl_iterator.h ****        *
 674:/usr/include/c++/6/bits/stl_iterator.h ****        *     // vector v contains A, 1, 2, 3, and Z
 675:/usr/include/c++/6/bits/stl_iterator.h ****        *  @endcode
 676:/usr/include/c++/6/bits/stl_iterator.h ****       */
 677:/usr/include/c++/6/bits/stl_iterator.h **** #if __cplusplus < 201103L
 678:/usr/include/c++/6/bits/stl_iterator.h ****       insert_iterator&
 679:/usr/include/c++/6/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 680:/usr/include/c++/6/bits/stl_iterator.h ****       {
 681:/usr/include/c++/6/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 682:/usr/include/c++/6/bits/stl_iterator.h **** 	++iter;
 683:/usr/include/c++/6/bits/stl_iterator.h **** 	return *this;
 684:/usr/include/c++/6/bits/stl_iterator.h ****       }
 685:/usr/include/c++/6/bits/stl_iterator.h **** #else
 686:/usr/include/c++/6/bits/stl_iterator.h ****       insert_iterator&
 687:/usr/include/c++/6/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 688:/usr/include/c++/6/bits/stl_iterator.h ****       {
 689:/usr/include/c++/6/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 690:/usr/include/c++/6/bits/stl_iterator.h **** 	++iter;
 691:/usr/include/c++/6/bits/stl_iterator.h **** 	return *this;
 692:/usr/include/c++/6/bits/stl_iterator.h ****       }
 693:/usr/include/c++/6/bits/stl_iterator.h **** 
 694:/usr/include/c++/6/bits/stl_iterator.h ****       insert_iterator&
GAS LISTING /tmp/ccvmoMuv.s 			page 576


 695:/usr/include/c++/6/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 696:/usr/include/c++/6/bits/stl_iterator.h ****       {
 697:/usr/include/c++/6/bits/stl_iterator.h **** 	iter = container->insert(iter, std::move(__value));
 698:/usr/include/c++/6/bits/stl_iterator.h **** 	++iter;
 699:/usr/include/c++/6/bits/stl_iterator.h **** 	return *this;
 700:/usr/include/c++/6/bits/stl_iterator.h ****       }
 701:/usr/include/c++/6/bits/stl_iterator.h **** #endif
 702:/usr/include/c++/6/bits/stl_iterator.h **** 
 703:/usr/include/c++/6/bits/stl_iterator.h ****       /// Simply returns *this.
 704:/usr/include/c++/6/bits/stl_iterator.h ****       insert_iterator&
 705:/usr/include/c++/6/bits/stl_iterator.h ****       operator*()
 706:/usr/include/c++/6/bits/stl_iterator.h ****       { return *this; }
 707:/usr/include/c++/6/bits/stl_iterator.h **** 
 708:/usr/include/c++/6/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 709:/usr/include/c++/6/bits/stl_iterator.h ****       insert_iterator&
 710:/usr/include/c++/6/bits/stl_iterator.h ****       operator++()
 711:/usr/include/c++/6/bits/stl_iterator.h ****       { return *this; }
 712:/usr/include/c++/6/bits/stl_iterator.h **** 
 713:/usr/include/c++/6/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 714:/usr/include/c++/6/bits/stl_iterator.h ****       insert_iterator&
 715:/usr/include/c++/6/bits/stl_iterator.h ****       operator++(int)
 716:/usr/include/c++/6/bits/stl_iterator.h ****       { return *this; }
 717:/usr/include/c++/6/bits/stl_iterator.h ****     };
 718:/usr/include/c++/6/bits/stl_iterator.h **** 
 719:/usr/include/c++/6/bits/stl_iterator.h ****   /**
 720:/usr/include/c++/6/bits/stl_iterator.h ****    *  @param __x  A container of arbitrary type.
 721:/usr/include/c++/6/bits/stl_iterator.h ****    *  @return  An instance of insert_iterator working on @p __x.
 722:/usr/include/c++/6/bits/stl_iterator.h ****    *
 723:/usr/include/c++/6/bits/stl_iterator.h ****    *  This wrapper function helps in creating insert_iterator instances.
 724:/usr/include/c++/6/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 725:/usr/include/c++/6/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 726:/usr/include/c++/6/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 727:/usr/include/c++/6/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 728:/usr/include/c++/6/bits/stl_iterator.h ****    *  types for you.
 729:/usr/include/c++/6/bits/stl_iterator.h ****   */
 730:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _Container, typename _Iterator>
 731:/usr/include/c++/6/bits/stl_iterator.h ****     inline insert_iterator<_Container>
 732:/usr/include/c++/6/bits/stl_iterator.h ****     inserter(_Container& __x, _Iterator __i)
 733:/usr/include/c++/6/bits/stl_iterator.h ****     {
 734:/usr/include/c++/6/bits/stl_iterator.h ****       return insert_iterator<_Container>(__x,
 735:/usr/include/c++/6/bits/stl_iterator.h **** 					 typename _Container::iterator(__i));
 736:/usr/include/c++/6/bits/stl_iterator.h ****     }
 737:/usr/include/c++/6/bits/stl_iterator.h **** 
 738:/usr/include/c++/6/bits/stl_iterator.h ****   // @} group iterators
 739:/usr/include/c++/6/bits/stl_iterator.h **** 
 740:/usr/include/c++/6/bits/stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
 741:/usr/include/c++/6/bits/stl_iterator.h **** } // namespace
 742:/usr/include/c++/6/bits/stl_iterator.h **** 
 743:/usr/include/c++/6/bits/stl_iterator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
 744:/usr/include/c++/6/bits/stl_iterator.h **** {
 745:/usr/include/c++/6/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 746:/usr/include/c++/6/bits/stl_iterator.h **** 
 747:/usr/include/c++/6/bits/stl_iterator.h ****   // This iterator adapter is @a normal in the sense that it does not
 748:/usr/include/c++/6/bits/stl_iterator.h ****   // change the semantics of any of the operators of its iterator
 749:/usr/include/c++/6/bits/stl_iterator.h ****   // parameter.  Its primary purpose is to convert an iterator that is
 750:/usr/include/c++/6/bits/stl_iterator.h ****   // not a class, e.g. a pointer, into an iterator that is a class.
 751:/usr/include/c++/6/bits/stl_iterator.h ****   // The _Container parameter exists solely so that different containers
GAS LISTING /tmp/ccvmoMuv.s 			page 577


 752:/usr/include/c++/6/bits/stl_iterator.h ****   // using this template can instantiate different types, even if the
 753:/usr/include/c++/6/bits/stl_iterator.h ****   // _Iterator parameter is the same.
 754:/usr/include/c++/6/bits/stl_iterator.h ****   using std::iterator_traits;
 755:/usr/include/c++/6/bits/stl_iterator.h ****   using std::iterator;
 756:/usr/include/c++/6/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 757:/usr/include/c++/6/bits/stl_iterator.h ****     class __normal_iterator
 758:/usr/include/c++/6/bits/stl_iterator.h ****     {
 759:/usr/include/c++/6/bits/stl_iterator.h ****     protected:
 760:/usr/include/c++/6/bits/stl_iterator.h ****       _Iterator _M_current;
 761:/usr/include/c++/6/bits/stl_iterator.h **** 
 762:/usr/include/c++/6/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 763:/usr/include/c++/6/bits/stl_iterator.h **** 
 764:/usr/include/c++/6/bits/stl_iterator.h ****     public:
 765:/usr/include/c++/6/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 766:/usr/include/c++/6/bits/stl_iterator.h ****       typedef typename __traits_type::iterator_category iterator_category;
 767:/usr/include/c++/6/bits/stl_iterator.h ****       typedef typename __traits_type::value_type  	value_type;
 768:/usr/include/c++/6/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type 	difference_type;
 769:/usr/include/c++/6/bits/stl_iterator.h ****       typedef typename __traits_type::reference 	reference;
 770:/usr/include/c++/6/bits/stl_iterator.h ****       typedef typename __traits_type::pointer   	pointer;
 771:/usr/include/c++/6/bits/stl_iterator.h **** 
 772:/usr/include/c++/6/bits/stl_iterator.h ****       _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 773:/usr/include/c++/6/bits/stl_iterator.h ****       : _M_current(_Iterator()) { }
 774:/usr/include/c++/6/bits/stl_iterator.h **** 
 775:/usr/include/c++/6/bits/stl_iterator.h ****       explicit
 776:/usr/include/c++/6/bits/stl_iterator.h ****       __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 777:/usr/include/c++/6/bits/stl_iterator.h ****       : _M_current(__i) { }
 778:/usr/include/c++/6/bits/stl_iterator.h **** 
 779:/usr/include/c++/6/bits/stl_iterator.h ****       // Allow iterator to const_iterator conversion
 780:/usr/include/c++/6/bits/stl_iterator.h ****       template<typename _Iter>
 781:/usr/include/c++/6/bits/stl_iterator.h ****         __normal_iterator(const __normal_iterator<_Iter,
 782:/usr/include/c++/6/bits/stl_iterator.h **** 			  typename __enable_if<
 783:/usr/include/c++/6/bits/stl_iterator.h ****       	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
 784:/usr/include/c++/6/bits/stl_iterator.h **** 		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
 785:/usr/include/c++/6/bits/stl_iterator.h ****         : _M_current(__i.base()) { }
 786:/usr/include/c++/6/bits/stl_iterator.h **** 
 787:/usr/include/c++/6/bits/stl_iterator.h ****       // Forward iterator requirements
 788:/usr/include/c++/6/bits/stl_iterator.h ****       reference
 789:/usr/include/c++/6/bits/stl_iterator.h ****       operator*() const _GLIBCXX_NOEXCEPT
 790:/usr/include/c++/6/bits/stl_iterator.h ****       { return *_M_current; }
 791:/usr/include/c++/6/bits/stl_iterator.h **** 
 792:/usr/include/c++/6/bits/stl_iterator.h ****       pointer
 793:/usr/include/c++/6/bits/stl_iterator.h ****       operator->() const _GLIBCXX_NOEXCEPT
 794:/usr/include/c++/6/bits/stl_iterator.h ****       { return _M_current; }
 795:/usr/include/c++/6/bits/stl_iterator.h **** 
 796:/usr/include/c++/6/bits/stl_iterator.h ****       __normal_iterator&
 797:/usr/include/c++/6/bits/stl_iterator.h ****       operator++() _GLIBCXX_NOEXCEPT
 798:/usr/include/c++/6/bits/stl_iterator.h ****       {
 799:/usr/include/c++/6/bits/stl_iterator.h **** 	++_M_current;
 800:/usr/include/c++/6/bits/stl_iterator.h **** 	return *this;
 801:/usr/include/c++/6/bits/stl_iterator.h ****       }
 802:/usr/include/c++/6/bits/stl_iterator.h **** 
 803:/usr/include/c++/6/bits/stl_iterator.h ****       __normal_iterator
 804:/usr/include/c++/6/bits/stl_iterator.h ****       operator++(int) _GLIBCXX_NOEXCEPT
 805:/usr/include/c++/6/bits/stl_iterator.h ****       { return __normal_iterator(_M_current++); }
 806:/usr/include/c++/6/bits/stl_iterator.h **** 
 807:/usr/include/c++/6/bits/stl_iterator.h ****       // Bidirectional iterator requirements
 808:/usr/include/c++/6/bits/stl_iterator.h ****       __normal_iterator&
GAS LISTING /tmp/ccvmoMuv.s 			page 578


 809:/usr/include/c++/6/bits/stl_iterator.h ****       operator--() _GLIBCXX_NOEXCEPT
 810:/usr/include/c++/6/bits/stl_iterator.h ****       {
 811:/usr/include/c++/6/bits/stl_iterator.h **** 	--_M_current;
 812:/usr/include/c++/6/bits/stl_iterator.h **** 	return *this;
 813:/usr/include/c++/6/bits/stl_iterator.h ****       }
 814:/usr/include/c++/6/bits/stl_iterator.h **** 
 815:/usr/include/c++/6/bits/stl_iterator.h ****       __normal_iterator
 816:/usr/include/c++/6/bits/stl_iterator.h ****       operator--(int) _GLIBCXX_NOEXCEPT
 817:/usr/include/c++/6/bits/stl_iterator.h ****       { return __normal_iterator(_M_current--); }
 818:/usr/include/c++/6/bits/stl_iterator.h **** 
 819:/usr/include/c++/6/bits/stl_iterator.h ****       // Random access iterator requirements
 820:/usr/include/c++/6/bits/stl_iterator.h ****       reference
 821:/usr/include/c++/6/bits/stl_iterator.h ****       operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 822:/usr/include/c++/6/bits/stl_iterator.h ****       { return _M_current[__n]; }
 823:/usr/include/c++/6/bits/stl_iterator.h **** 
 824:/usr/include/c++/6/bits/stl_iterator.h ****       __normal_iterator&
 825:/usr/include/c++/6/bits/stl_iterator.h ****       operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 826:/usr/include/c++/6/bits/stl_iterator.h ****       { _M_current += __n; return *this; }
 827:/usr/include/c++/6/bits/stl_iterator.h **** 
 828:/usr/include/c++/6/bits/stl_iterator.h ****       __normal_iterator
 829:/usr/include/c++/6/bits/stl_iterator.h ****       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 830:/usr/include/c++/6/bits/stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
 10545              		.loc 39 830 0
 10546 0004 488D4638 		leaq	56(%rsi), %rax
 10547              	.LBE16295:
 10548              	.LBE16294:
 10549              		.loc 38 141 0
 10550 0008 4155     		pushq	%r13
 10551              		.cfi_def_cfa_offset 32
 10552              		.cfi_offset 13, -32
 10553 000a 4154     		pushq	%r12
 10554              		.cfi_def_cfa_offset 40
 10555              		.cfi_offset 12, -40
 10556 000c 4989FF   		movq	%rdi, %r15
 10557 000f 55       		pushq	%rbp
 10558              		.cfi_def_cfa_offset 48
 10559              		.cfi_offset 6, -48
 10560 0010 53       		pushq	%rbx
 10561              		.cfi_def_cfa_offset 56
 10562              		.cfi_offset 3, -56
 10563 0011 4989F6   		movq	%rsi, %r14
 10564 0014 4883EC08 		subq	$8, %rsp
 10565              		.cfi_def_cfa_offset 64
 10566              	.LBB16296:
 10567              	.LBB16297:
 10568              	.LBB16298:
 777:/usr/include/c++/6/bits/stl_iterator.h **** 
 10569              		.loc 39 777 0
 10570 0018 488B5F08 		movq	8(%rdi), %rbx
 10571              	.LVL870:
 10572              	.LBE16298:
 10573              	.LBE16297:
 10574              	.LBE16296:
 142:/usr/include/c++/6/bits/vector.tcc ****     _M_erase(iterator __position)
 143:/usr/include/c++/6/bits/vector.tcc ****     {
 144:/usr/include/c++/6/bits/vector.tcc ****       if (__position + 1 != end())
 10575              		.loc 38 144 0
GAS LISTING /tmp/ccvmoMuv.s 			page 579


 10576 001c 4839D8   		cmpq	%rbx, %rax
 10577 001f 0F84AB00 		je	.L526
 10577      0000
 10578              	.LVL871:
 10579              	.LBB16299:
 10580              	.LBB16300:
 10581              	.LBB16301:
 10582              	.LBB16302:
 10583              	.LBB16303:
 10584              	.LBB16304:
 10585              	.LBB16305:
 341:/usr/include/c++/6/bits/stl_algobase.h **** 	    {
 10586              		.loc 24 341 0
 10587 0025 4989DD   		movq	%rbx, %r13
 10588 0028 48BAB76D 		movabsq	$7905747460161236407, %rdx
 10588      DBB66DDB 
 10588      B66D
 10589 0032 4929C5   		subq	%rax, %r13
 10590              	.LVL872:
 10591 0035 4C89E8   		movq	%r13, %rax
 10592              	.LVL873:
 10593 0038 48C1F803 		sarq	$3, %rax
 10594 003c 480FAFC2 		imulq	%rdx, %rax
 10595 0040 4885C0   		testq	%rax, %rax
 10596 0043 0F8E8700 		jle	.L526
 10596      0000
 10597 0049 4901F5   		addq	%rsi, %r13
 10598              	.LVL874:
 10599 004c 4889F3   		movq	%rsi, %rbx
 10600              	.LVL875:
 10601 004f 90       		.p2align 4,,10
 10602              		.p2align 3
 10603              	.L533:
 10604              	.LBB16306:
 10605              	.LBB16307:
 10606              	.LBB16308:
 10607              	.LBB16309:
 10608              	.LBB16310:
  90:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 10609              		.loc 34 90 0
 10610 0050 488B6B40 		movq	64(%rbx), %rbp
 10611              	.LBE16310:
 10612              	.LBE16309:
 10613              	.LBE16308:
 10614              		.file 40 "/home/mpiscopo/gnuradio/include/gnuradio/tags.h"
   1:/home/mpiscopo/gnuradio/include/gnuradio/tags.h **** /* -*- c++ -*- */
   2:/home/mpiscopo/gnuradio/include/gnuradio/tags.h **** /*
   3:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****  * Copyright 2011,2013 Free Software Foundation, Inc.
   4:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****  *
   5:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****  * This file is part of GNU Radio
   6:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****  *
   7:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****  * GNU Radio is free software; you can redistribute it and/or modify
   8:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****  * it under the terms of the GNU General Public License as published by
   9:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****  * the Free Software Foundation; either version 3, or (at your option)
  10:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****  * any later version.
  11:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****  *
  12:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****  * GNU Radio is distributed in the hope that it will be useful,
GAS LISTING /tmp/ccvmoMuv.s 			page 580


  13:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****  * GNU General Public License for more details.
  16:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****  *
  17:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****  * You should have received a copy of the GNU General Public License
  18:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****  * along with GNU Radio; see the file COPYING.  If not, write to
  19:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****  * the Free Software Foundation, Inc., 51 Franklin Street,
  20:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****  * Boston, MA 02110-1301, USA.
  21:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****  */
  22:/home/mpiscopo/gnuradio/include/gnuradio/tags.h **** 
  23:/home/mpiscopo/gnuradio/include/gnuradio/tags.h **** #ifndef INCLUDED_GR_TAGS_H
  24:/home/mpiscopo/gnuradio/include/gnuradio/tags.h **** #define INCLUDED_GR_TAGS_H
  25:/home/mpiscopo/gnuradio/include/gnuradio/tags.h **** 
  26:/home/mpiscopo/gnuradio/include/gnuradio/tags.h **** #include <gnuradio/api.h>
  27:/home/mpiscopo/gnuradio/include/gnuradio/tags.h **** #include <pmt/pmt.h>
  28:/home/mpiscopo/gnuradio/include/gnuradio/tags.h **** 
  29:/home/mpiscopo/gnuradio/include/gnuradio/tags.h **** namespace gr {
  30:/home/mpiscopo/gnuradio/include/gnuradio/tags.h **** 
  31:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****   struct GR_RUNTIME_API tag_t
  32:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****   {
  33:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****     //! the item \p tag occurred at (as a uint64_t)
  34:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****     uint64_t offset;
  35:/home/mpiscopo/gnuradio/include/gnuradio/tags.h **** 
  36:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****     //! the key of \p tag (as a PMT symbol)
  37:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****     pmt::pmt_t key;
  38:/home/mpiscopo/gnuradio/include/gnuradio/tags.h **** 
  39:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****     //! the value of \p tag (as a PMT)
  40:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****     pmt::pmt_t value;
  41:/home/mpiscopo/gnuradio/include/gnuradio/tags.h **** 
  42:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****     //! the source ID of \p tag (as a PMT)
  43:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****     pmt::pmt_t srcid;
  44:/home/mpiscopo/gnuradio/include/gnuradio/tags.h **** 
  45:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****     //! Used by gr_buffer to mark a tagged as deleted by a specific block. You can usually ignore t
  46:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****     std::vector<long> marked_deleted;
  47:/home/mpiscopo/gnuradio/include/gnuradio/tags.h **** 
  48:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****     /*!
  49:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****      * Comparison function to test which tag, \p x or \p y, came
  50:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****      * first in time
  51:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****      */
  52:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****     static inline bool offset_compare(const tag_t &x,
  53:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****                                       const tag_t &y)
  54:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****     {
  55:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****       return x.offset < y.offset;
  56:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****     }
  57:/home/mpiscopo/gnuradio/include/gnuradio/tags.h **** 
  58:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****     inline bool operator == (const tag_t &t) const
  59:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****     {
  60:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****       return (t.key == key) && (t.value == value) && \
  61:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****       (t.srcid == srcid) && (t.offset == offset);
  62:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****     }
  63:/home/mpiscopo/gnuradio/include/gnuradio/tags.h **** 
  64:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****     tag_t()
  65:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****       : offset(0),
  66:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****         key(pmt::PMT_NIL),
  67:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****         value(pmt::PMT_NIL),
  68:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****         srcid(pmt::PMT_F)    // consistent with default srcid value in block::add_item_tag
  69:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****     {
GAS LISTING /tmp/ccvmoMuv.s 			page 581


  70:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****     }
  71:/home/mpiscopo/gnuradio/include/gnuradio/tags.h **** 
  72:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****     tag_t(const tag_t &rhs)
  73:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****       : offset(rhs.offset),
  74:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****         key(rhs.key),
  75:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****         value(rhs.value),
  76:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****         srcid(rhs.srcid)
  77:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****     {
  78:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****     }
  79:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****     tag_t& operator=(const tag_t &rhs)
  80:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****     {
  81:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****       if (this != &rhs) {
  82:/home/mpiscopo/gnuradio/include/gnuradio/tags.h ****         offset = rhs.offset;
 10615              		.loc 40 82 0
 10616 0054 488B4338 		movq	56(%rbx), %rax
 10617 0058 4C8D6338 		leaq	56(%rbx), %r12
 10618              	.LVL876:
 10619              	.LBB16319:
 10620              	.LBB16313:
 10621              	.LBB16311:
  92:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 10622              		.loc 34 92 0
 10623 005c 4885ED   		testq	%rbp, %rbp
 10624              	.LBE16311:
 10625              	.LBE16313:
 10626              	.LBE16319:
 10627              		.loc 40 82 0
 10628 005f 488903   		movq	%rax, (%rbx)
 10629              	.LVL877:
 10630              	.LBB16320:
 10631              	.LBB16314:
 10632              	.LBB16312:
  92:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 10633              		.loc 34 92 0
 10634 0062 7408     		je	.L527
 10635 0064 4889EF   		movq	%rbp, %rdi
 10636              	.LEHB39:
 10637 0067 E8000000 		call	_ZN3pmt21intrusive_ptr_add_refEPNS_8pmt_baseE@PLT
 10637      00
 10638              	.LVL878:
 10639              	.LEHE39:
 10640              	.L527:
 10641              	.LBE16312:
 10642              	.LBE16314:
 10643              	.LBB16315:
 10644              	.LBB16316:
  98:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
  99:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 100:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #if !defined(BOOST_NO_MEMBER_TEMPLATES) || defined(BOOST_MSVC6_MEMBER_TEMPLATES)
 101:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 102:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     template<class U> intrusive_ptr & operator=(intrusive_ptr<U> const & rhs)
 103:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 104:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         this_type(rhs).swap(*this);
 105:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         return *this;
 106:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 107:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 108:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #endif
GAS LISTING /tmp/ccvmoMuv.s 			page 582


 109:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 110:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** // Move support
 111:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 112:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #if !defined( BOOST_NO_CXX11_RVALUE_REFERENCES )
 113:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 114:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     intrusive_ptr(intrusive_ptr && rhs) BOOST_NOEXCEPT : px( rhs.px )
 115:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 116:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         rhs.px = 0;
 117:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 118:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 119:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     intrusive_ptr & operator=(intrusive_ptr && rhs) BOOST_NOEXCEPT
 120:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 121:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         this_type( static_cast< intrusive_ptr && >( rhs ) ).swap(*this);
 122:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         return *this;
 123:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 124:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 125:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     template<class U> friend class intrusive_ptr;
 126:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 127:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     template<class U>
 128:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #if !defined( BOOST_SP_NO_SP_CONVERTIBLE )
 129:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 130:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     intrusive_ptr(intrusive_ptr<U> && rhs, typename boost::detail::sp_enable_if_convertible<U,T>::t
 131:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 132:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #else
 133:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 134:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     intrusive_ptr(intrusive_ptr<U> && rhs)
 135:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 136:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #endif        
 137:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     : px( rhs.px )
 138:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 139:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         rhs.px = 0;
 140:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 141:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 142:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     template<class U>
 143:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     intrusive_ptr & operator=(intrusive_ptr<U> && rhs) BOOST_NOEXCEPT
 144:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 145:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         this_type( static_cast< intrusive_ptr<U> && >( rhs ) ).swap(*this);
 146:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         return *this;
 147:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 148:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 149:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #endif
 150:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 151:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     intrusive_ptr & operator=(intrusive_ptr const & rhs)
 152:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 153:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         this_type(rhs).swap(*this);
 154:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         return *this;
 155:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 156:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 157:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     intrusive_ptr & operator=(T * rhs)
 158:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 159:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         this_type(rhs).swap(*this);
 160:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         return *this;
 161:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 162:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 163:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     void reset() BOOST_NOEXCEPT
 164:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 165:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         this_type().swap( *this );
GAS LISTING /tmp/ccvmoMuv.s 			page 583


 166:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 167:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 168:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     void reset( T * rhs )
 169:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 170:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         this_type( rhs ).swap( *this );
 171:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 172:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 173:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     void reset( T * rhs, bool add_ref )
 174:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 175:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         this_type( rhs, add_ref ).swap( *this );
 176:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 177:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 178:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     T * get() const BOOST_NOEXCEPT
 179:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 180:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         return px;
 181:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 182:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 183:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     T * detach() BOOST_NOEXCEPT
 184:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 185:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         T * ret = px;
 186:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         px = 0;
 187:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         return ret;
 188:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 189:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 190:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     T & operator*() const
 191:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 192:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         BOOST_ASSERT( px != 0 );
 193:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         return *px;
 194:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 195:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 196:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     T * operator->() const
 197:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 198:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         BOOST_ASSERT( px != 0 );
 199:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         return px;
 200:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 201:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 202:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** // implicit conversion to "bool"
 203:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** #include <boost/smart_ptr/detail/operator_bool.hpp>
 204:/usr/include/boost/smart_ptr/intrusive_ptr.hpp **** 
 205:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     void swap(intrusive_ptr & rhs) BOOST_NOEXCEPT
 206:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 207:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         T * tmp = px;
 208:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         px = rhs.px;
 10645              		.loc 34 208 0
 10646 006c 488B7B08 		movq	8(%rbx), %rdi
 209:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         rhs.px = tmp;
 10647              		.loc 34 209 0
 10648 0070 48896B08 		movq	%rbp, 8(%rbx)
 10649              	.LVL879:
 10650              	.LBE16316:
 10651              	.LBE16315:
 10652              	.LBB16317:
 10653              	.LBB16318:
  97:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 10654              		.loc 34 97 0
 10655 0074 4885FF   		testq	%rdi, %rdi
 10656 0077 7405     		je	.L528
GAS LISTING /tmp/ccvmoMuv.s 			page 584


 10657 0079 E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 10657      00
 10658              	.LVL880:
 10659              	.L528:
 10660              	.LBE16318:
 10661              	.LBE16317:
 10662              	.LBE16320:
 10663              	.LBB16321:
 10664              	.LBB16322:
 10665              	.LBB16323:
  90:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 10666              		.loc 34 90 0
 10667 007e 488B6B48 		movq	72(%rbx), %rbp
  92:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 10668              		.loc 34 92 0
 10669 0082 4885ED   		testq	%rbp, %rbp
 10670 0085 7408     		je	.L529
 10671 0087 4889EF   		movq	%rbp, %rdi
 10672              	.LEHB40:
 10673 008a E8000000 		call	_ZN3pmt21intrusive_ptr_add_refEPNS_8pmt_baseE@PLT
 10673      00
 10674              	.LVL881:
 10675              	.LEHE40:
 10676              	.L529:
 10677              	.LBE16323:
 10678              	.LBE16322:
 10679              	.LBB16324:
 10680              	.LBB16325:
 208:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         rhs.px = tmp;
 10681              		.loc 34 208 0
 10682 008f 488B7B10 		movq	16(%rbx), %rdi
 10683              		.loc 34 209 0
 10684 0093 48896B10 		movq	%rbp, 16(%rbx)
 10685              	.LVL882:
 10686              	.LBE16325:
 10687              	.LBE16324:
 10688              	.LBB16326:
 10689              	.LBB16327:
  97:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 10690              		.loc 34 97 0
 10691 0097 4885FF   		testq	%rdi, %rdi
 10692 009a 7405     		je	.L530
 10693 009c E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 10693      00
 10694              	.LVL883:
 10695              	.L530:
 10696              	.LBE16327:
 10697              	.LBE16326:
 10698              	.LBE16321:
 10699              	.LBB16328:
 10700              	.LBB16329:
 10701              	.LBB16330:
  90:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 10702              		.loc 34 90 0
 10703 00a1 488B6B50 		movq	80(%rbx), %rbp
  92:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 10704              		.loc 34 92 0
GAS LISTING /tmp/ccvmoMuv.s 			page 585


 10705 00a5 4885ED   		testq	%rbp, %rbp
 10706 00a8 7408     		je	.L531
 10707 00aa 4889EF   		movq	%rbp, %rdi
 10708              	.LEHB41:
 10709 00ad E8000000 		call	_ZN3pmt21intrusive_ptr_add_refEPNS_8pmt_baseE@PLT
 10709      00
 10710              	.LVL884:
 10711              	.LEHE41:
 10712              	.L531:
 10713              	.LBE16330:
 10714              	.LBE16329:
 10715              	.LBB16331:
 10716              	.LBB16332:
 208:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****         rhs.px = tmp;
 10717              		.loc 34 208 0
 10718 00b2 488B7B18 		movq	24(%rbx), %rdi
 10719              		.loc 34 209 0
 10720 00b6 48896B18 		movq	%rbp, 24(%rbx)
 10721              	.LVL885:
 10722              	.LBE16332:
 10723              	.LBE16331:
 10724              	.LBB16333:
 10725              	.LBB16334:
  97:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 10726              		.loc 34 97 0
 10727 00ba 4885FF   		testq	%rdi, %rdi
 10728 00bd 7405     		je	.L532
 10729 00bf E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 10729      00
 10730              	.LVL886:
 10731              	.L532:
 10732              	.LBE16334:
 10733              	.LBE16333:
 10734              	.LBE16328:
 10735              	.LBE16307:
 10736              	.LBE16306:
 341:/usr/include/c++/6/bits/stl_algobase.h **** 	    {
 10737              		.loc 24 341 0
 10738 00c4 4D39E5   		cmpq	%r12, %r13
 10739 00c7 4C89E3   		movq	%r12, %rbx
 10740 00ca 7584     		jne	.L533
 10741              	.LVL887:
 10742 00cc 498B5F08 		movq	8(%r15), %rbx
 10743              	.LVL888:
 10744              	.L526:
 10745              	.LBE16305:
 10746              	.LBE16304:
 10747              	.LBE16303:
 10748              	.LBE16302:
 10749              	.LBE16301:
 10750              	.LBE16300:
 10751              	.LBE16299:
 10752              	.LBB16335:
 10753              	.LBB16336:
 10754              	.LBB16337:
 10755              	.LBB16338:
 10756              	.LBB16339:
GAS LISTING /tmp/ccvmoMuv.s 			page 586


 426:/usr/include/c++/6/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 10757              		.loc 23 426 0
 10758 00d0 488B7BE8 		movq	-24(%rbx), %rdi
 10759              	.LBE16339:
 10760              	.LBE16338:
 10761              	.LBE16337:
 10762              	.LBE16336:
 10763              	.LBE16335:
 145:/usr/include/c++/6/bits/vector.tcc **** 	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 146:/usr/include/c++/6/bits/vector.tcc ****       --this->_M_impl._M_finish;
 10764              		.loc 38 146 0
 10765 00d4 488D43C8 		leaq	-56(%rbx), %rax
 10766 00d8 49894708 		movq	%rax, 8(%r15)
 10767              	.LVL889:
 10768              	.LBB16356:
 10769              	.LBB16355:
 10770              	.LBB16354:
 10771              	.LBB16347:
 10772              	.LBB16346:
 10773              	.LBB16340:
 10774              	.LBB16341:
 10775              	.LBB16342:
 177:/usr/include/c++/6/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 10776              		.loc 23 177 0
 10777 00dc 4885FF   		testq	%rdi, %rdi
 10778 00df 7405     		je	.L534
 10779              	.LVL890:
 10780              	.LBB16343:
 10781              	.LBB16344:
 10782              	.LBB16345:
 10783              		.loc 12 110 0
 10784 00e1 E8000000 		call	_ZdlPv@PLT
 10784      00
 10785              	.LVL891:
 10786              	.L534:
 10787              	.LBE16345:
 10788              	.LBE16344:
 10789              	.LBE16343:
 10790              	.LBE16342:
 10791              	.LBE16341:
 10792              	.LBE16340:
 10793              	.LBE16346:
 10794              	.LBE16347:
 10795              	.LBB16348:
 10796              	.LBB16349:
  97:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 10797              		.loc 34 97 0
 10798 00e6 488B7BE0 		movq	-32(%rbx), %rdi
 10799 00ea 4885FF   		testq	%rdi, %rdi
 10800 00ed 7405     		je	.L535
 10801 00ef E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 10801      00
 10802              	.LVL892:
 10803              	.L535:
 10804              	.LBE16349:
 10805              	.LBE16348:
 10806              	.LBB16350:
GAS LISTING /tmp/ccvmoMuv.s 			page 587


 10807              	.LBB16351:
 10808 00f4 488B7BD8 		movq	-40(%rbx), %rdi
 10809 00f8 4885FF   		testq	%rdi, %rdi
 10810 00fb 7405     		je	.L536
 10811 00fd E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 10811      00
 10812              	.LVL893:
 10813              	.L536:
 10814              	.LBE16351:
 10815              	.LBE16350:
 10816              	.LBB16352:
 10817              	.LBB16353:
 10818 0102 488B7BD0 		movq	-48(%rbx), %rdi
 10819 0106 4885FF   		testq	%rdi, %rdi
 10820 0109 7405     		je	.L537
 10821 010b E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 10821      00
 10822              	.LVL894:
 10823              	.L537:
 10824              	.LBE16353:
 10825              	.LBE16352:
 10826              	.LBE16354:
 10827              	.LBE16355:
 10828              	.LBE16356:
 147:/usr/include/c++/6/bits/vector.tcc ****       _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 148:/usr/include/c++/6/bits/vector.tcc ****       return __position;
 149:/usr/include/c++/6/bits/vector.tcc ****     }
 10829              		.loc 38 149 0
 10830 0110 4883C408 		addq	$8, %rsp
 10831              		.cfi_def_cfa_offset 56
 10832 0114 4C89F0   		movq	%r14, %rax
 10833 0117 5B       		popq	%rbx
 10834              		.cfi_def_cfa_offset 48
 10835              	.LVL895:
 10836 0118 5D       		popq	%rbp
 10837              		.cfi_def_cfa_offset 40
 10838 0119 415C     		popq	%r12
 10839              		.cfi_def_cfa_offset 32
 10840 011b 415D     		popq	%r13
 10841              		.cfi_def_cfa_offset 24
 10842 011d 415E     		popq	%r14
 10843              		.cfi_def_cfa_offset 16
 10844 011f 415F     		popq	%r15
 10845              		.cfi_def_cfa_offset 8
 10846              	.LVL896:
 10847 0121 C3       		ret
 10848              		.cfi_endproc
 10849              	.LFE13492:
 10850              		.section	.gcc_except_table
 10851              	.LLSDA13492:
 10852 0097 FF       		.byte	0xff
 10853 0098 FF       		.byte	0xff
 10854 0099 01       		.byte	0x1
 10855 009a 0E       		.uleb128 .LLSDACSE13492-.LLSDACSB13492
 10856              	.LLSDACSB13492:
 10857 009b 67       		.uleb128 .LEHB39-.LFB13492
 10858 009c 05       		.uleb128 .LEHE39-.LEHB39
GAS LISTING /tmp/ccvmoMuv.s 			page 588


 10859 009d 00       		.uleb128 0
 10860 009e 00       		.uleb128 0
 10861 009f 8A01     		.uleb128 .LEHB40-.LFB13492
 10862 00a1 05       		.uleb128 .LEHE40-.LEHB40
 10863 00a2 00       		.uleb128 0
 10864 00a3 00       		.uleb128 0
 10865 00a4 AD01     		.uleb128 .LEHB41-.LFB13492
 10866 00a6 05       		.uleb128 .LEHE41-.LEHB41
 10867 00a7 00       		.uleb128 0
 10868 00a8 00       		.uleb128 0
 10869              	.LLSDACSE13492:
 10870              		.section	.text._ZNSt6vectorIN2gr5tag_tESaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE,
 10872              		.text
 10873              		.align 2
 10874 08d4 6690662E 		.p2align 4,,15
 10874      0F1F8400 
 10874      00000000 
 10875              		.globl	_ZN2gr5lfast12costas2_impl13work_originalEiRSt6vectorIPKvSaIS4_EERS2_IPvSaIS8_EE
 10877              	_ZN2gr5lfast12costas2_impl13work_originalEiRSt6vectorIPKvSaIS4_EERS2_IPvSaIS8_EE:
 10878              	.LFB11029:
 112:costas2_impl.cc ****       const gr_complex *iptr = (gr_complex *) input_items[0];
 10879              		.loc 5 112 0
 10880              		.cfi_startproc
 10881              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 10882              		.cfi_lsda 0x1b,.LLSDA11029
 10883              	.LVL897:
 10884 08e0 4157     		pushq	%r15
 10885              		.cfi_def_cfa_offset 16
 10886              		.cfi_offset 15, -16
 10887 08e2 4156     		pushq	%r14
 10888              		.cfi_def_cfa_offset 24
 10889              		.cfi_offset 14, -24
 10890 08e4 4155     		pushq	%r13
 10891              		.cfi_def_cfa_offset 32
 10892              		.cfi_offset 13, -32
 10893 08e6 4154     		pushq	%r12
 10894              		.cfi_def_cfa_offset 40
 10895              		.cfi_offset 12, -40
 10896 08e8 55       		pushq	%rbp
 10897              		.cfi_def_cfa_offset 48
 10898              		.cfi_offset 6, -48
 10899 08e9 53       		pushq	%rbx
 10900              		.cfi_def_cfa_offset 56
 10901              		.cfi_offset 3, -56
 10902 08ea 4889FB   		movq	%rdi, %rbx
 10903 08ed 4881EC98 		subq	$152, %rsp
 10903      000000
 10904              		.cfi_def_cfa_offset 208
 113:costas2_impl.cc ****       gr_complex *optr = (gr_complex *) output_items[0];
 10905              		.loc 5 113 0
 10906 08f4 488B02   		movq	(%rdx), %rax
 10907 08f7 488B11   		movq	(%rcx), %rdx
 10908              	.LVL898:
 112:costas2_impl.cc ****       const gr_complex *iptr = (gr_complex *) input_items[0];
 10909              		.loc 5 112 0
 10910 08fa 8974243C 		movl	%esi, 60(%rsp)
 113:costas2_impl.cc ****       gr_complex *optr = (gr_complex *) output_items[0];
GAS LISTING /tmp/ccvmoMuv.s 			page 589


 10911              		.loc 5 113 0
 10912 08fe 4C8B28   		movq	(%rax), %r13
 10913              	.LVL899:
 10914              	.LBB16523:
 10915              	.LBB16524:
 10916              		.loc 23 656 0
 10917 0901 488B4108 		movq	8(%rcx), %rax
 10918              	.LBE16524:
 10919              	.LBE16523:
 114:costas2_impl.cc ****       float *foptr = (float *) output_items[1];
 10920              		.loc 5 114 0
 10921 0905 4C8B22   		movq	(%rdx), %r12
 10922              	.LVL900:
 115:costas2_impl.cc **** 
 10923              		.loc 5 115 0
 10924 0908 4C8B7A08 		movq	8(%rdx), %r15
 10925              	.LVL901:
 10926              	.LBB16526:
 10927              	.LBB16527:
 10928              	.LBB16528:
 10929              	.LBB16529:
 10930              	.LBB16530:
  87:/usr/include/c++/6/bits/stl_vector.h **** 	{ }
 10931              		.loc 23 87 0
 10932 090c 48C74424 		movq	$0, 112(%rsp)
 10932      70000000 
 10932      00
 10933 0915 48C74424 		movq	$0, 120(%rsp)
 10933      78000000 
 10933      00
 10934              	.LBE16530:
 10935              	.LBE16529:
 10936              	.LBE16528:
 10937              	.LBE16527:
 10938              	.LBE16526:
 10939              	.LBB16535:
 10940              	.LBB16525:
 10941              		.loc 23 656 0
 10942 091e 4829D0   		subq	%rdx, %rax
 10943              	.LVL902:
 10944              	.LBE16525:
 10945              	.LBE16535:
 10946              	.LBB16536:
 10947              	.LBB16534:
 10948              	.LBB16533:
 10949              	.LBB16532:
 10950              	.LBB16531:
  87:/usr/include/c++/6/bits/stl_vector.h **** 	{ }
 10951              		.loc 23 87 0
 10952 0921 48C78424 		movq	$0, 128(%rsp)
 10952      80000000 
 10952      00000000 
 10953              	.LVL903:
 10954              	.LBE16531:
 10955              	.LBE16532:
 10956              	.LBE16533:
 10957              	.LBE16534:
GAS LISTING /tmp/ccvmoMuv.s 			page 590


 10958              	.LBE16536:
 10959              	.LBB16537:
 128:costas2_impl.cc ****         for(int i = 0; i < noutput_items; i++) {
 10960              		.loc 5 128 0
 10961 092d 4883F80F 		cmpq	$15, %rax
 10962 0931 0F866202 		jbe	.L667
 10962      0000
 10963              	.LVL904:
 10964              	.LBB16538:
 129:costas2_impl.cc ****           if(tags.size() > 0) {
 10965              		.loc 5 129 0 discriminator 1
 10966 0937 8B4C243C 		movl	60(%rsp), %ecx
 10967              	.LVL905:
 10968 093b 85C9     		testl	%ecx, %ecx
 10969 093d 0F8E4002 		jle	.L629
 10969      0000
 10970 0943 488B07   		movq	(%rdi), %rax
 10971              	.LVL906:
 10972 0946 F30F103D 		movss	.LC2(%rip), %xmm7
 10972      00000000 
 129:costas2_impl.cc ****           if(tags.size() > 0) {
 10973              		.loc 5 129 0 is_stmt 0
 10974 094e BD010000 		movl	$1, %ebp
 10974      00
 10975 0953 0F293C24 		movaps	%xmm7, (%rsp)
 10976 0957 488B50E0 		movq	-32(%rax), %rdx
 10977              	.LVL907:
 10978 095b 89C8     		movl	%ecx, %eax
 10979 095d 83E801   		subl	$1, %eax
 10980 0960 4883C001 		addq	$1, %rax
 10981 0964 48894424 		movq	%rax, 24(%rsp)
 10981      18
 10982 0969 488D4424 		leaq	84(%rsp), %rax
 10982      54
 10983 096e 48894424 		movq	%rax, 40(%rsp)
 10983      28
 10984 0973 488D4424 		leaq	80(%rsp), %rax
 10984      50
 10985 0978 48894424 		movq	%rax, 32(%rsp)
 10985      20
 132:costas2_impl.cc ****               tags.erase(tags.begin());
 10986              		.loc 5 132 0 is_stmt 1
 10987 097d 488D4424 		leaq	96(%rsp), %rax
 10987      60
 10988 0982 48894424 		movq	%rax, 48(%rsp)
 10988      30
 10989 0987 EB0F     		jmp	.L574
 10990              	.LVL908:
 10991 0989 0F1F8000 		.p2align 4,,10
 10991      000000
 10992              		.p2align 3
 10993              	.L666:
 10994 0990 488B50E0 		movq	-32(%rax), %rdx
 10995              	.LVL909:
 10996              	.L575:
 10997 0994 4883C501 		addq	$1, %rbp
 10998              	.LVL910:
GAS LISTING /tmp/ccvmoMuv.s 			page 591


 10999              	.L574:
 136:costas2_impl.cc **** 
 11000              		.loc 5 136 0
 11001 0998 F30F1044 		movss	8(%rbx,%rdx), %xmm0
 11001      1308
 11002              	.LBB16539:
 11003              	.LBB16540:
 11004              		.file 41 "/home/mpiscopo/gnuradio/include/gnuradio/expj.h"
   1:/home/mpiscopo/gnuradio/include/gnuradio/expj.h **** /* -*- c++ -*- */
   2:/home/mpiscopo/gnuradio/include/gnuradio/expj.h **** /*
   3:/home/mpiscopo/gnuradio/include/gnuradio/expj.h ****  * Copyright 2006 Free Software Foundation, Inc.
   4:/home/mpiscopo/gnuradio/include/gnuradio/expj.h ****  *
   5:/home/mpiscopo/gnuradio/include/gnuradio/expj.h ****  * This file is part of GNU Radio
   6:/home/mpiscopo/gnuradio/include/gnuradio/expj.h ****  *
   7:/home/mpiscopo/gnuradio/include/gnuradio/expj.h ****  * GNU Radio is free software; you can redistribute it and/or modify
   8:/home/mpiscopo/gnuradio/include/gnuradio/expj.h ****  * it under the terms of the GNU General Public License as published by
   9:/home/mpiscopo/gnuradio/include/gnuradio/expj.h ****  * the Free Software Foundation; either version 3, or (at your option)
  10:/home/mpiscopo/gnuradio/include/gnuradio/expj.h ****  * any later version.
  11:/home/mpiscopo/gnuradio/include/gnuradio/expj.h ****  *
  12:/home/mpiscopo/gnuradio/include/gnuradio/expj.h ****  * GNU Radio is distributed in the hope that it will be useful,
  13:/home/mpiscopo/gnuradio/include/gnuradio/expj.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/home/mpiscopo/gnuradio/include/gnuradio/expj.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/home/mpiscopo/gnuradio/include/gnuradio/expj.h ****  * GNU General Public License for more details.
  16:/home/mpiscopo/gnuradio/include/gnuradio/expj.h ****  *
  17:/home/mpiscopo/gnuradio/include/gnuradio/expj.h ****  * You should have received a copy of the GNU General Public License
  18:/home/mpiscopo/gnuradio/include/gnuradio/expj.h ****  * along with GNU Radio; see the file COPYING.  If not, write to
  19:/home/mpiscopo/gnuradio/include/gnuradio/expj.h ****  * the Free Software Foundation, Inc., 51 Franklin Street,
  20:/home/mpiscopo/gnuradio/include/gnuradio/expj.h ****  * Boston, MA 02110-1301, USA.
  21:/home/mpiscopo/gnuradio/include/gnuradio/expj.h ****  */
  22:/home/mpiscopo/gnuradio/include/gnuradio/expj.h **** #ifndef INCLUDED_GR_EXPJ_H
  23:/home/mpiscopo/gnuradio/include/gnuradio/expj.h **** #define INCLUDED_GR_EXPJ_H
  24:/home/mpiscopo/gnuradio/include/gnuradio/expj.h **** 
  25:/home/mpiscopo/gnuradio/include/gnuradio/expj.h **** #include <gnuradio/api.h>
  26:/home/mpiscopo/gnuradio/include/gnuradio/expj.h **** #include <gnuradio/sincos.h>
  27:/home/mpiscopo/gnuradio/include/gnuradio/expj.h **** #include <gnuradio/types.h>
  28:/home/mpiscopo/gnuradio/include/gnuradio/expj.h **** 
  29:/home/mpiscopo/gnuradio/include/gnuradio/expj.h **** static inline gr_complex
  30:/home/mpiscopo/gnuradio/include/gnuradio/expj.h **** gr_expj(float phase)
  31:/home/mpiscopo/gnuradio/include/gnuradio/expj.h **** {
  32:/home/mpiscopo/gnuradio/include/gnuradio/expj.h ****   float	t_imag, t_real;
  33:/home/mpiscopo/gnuradio/include/gnuradio/expj.h ****   gr::sincosf(phase, &t_imag, &t_real);
 11005              		.loc 41 33 0
 11006 099e 488B7424 		movq	40(%rsp), %rsi
 11006      28
 11007              	.LBE16540:
 11008              	.LBE16539:
 136:costas2_impl.cc **** 
 11009              		.loc 5 136 0
 11010 09a3 0F570424 		xorps	(%rsp), %xmm0
 11011              	.LBB16542:
 11012              	.LBB16541:
 11013              		.loc 41 33 0
 11014 09a7 488B7C24 		movq	32(%rsp), %rdi
 11014      20
 11015              	.LEHB42:
 11016 09ac E8000000 		call	_ZN2gr7sincosfEfPfS0_@PLT
 11016      00
GAS LISTING /tmp/ccvmoMuv.s 			page 592


 11017              	.LVL911:
 11018              	.LBE16541:
 11019              	.LBE16542:
 11020              	.LBB16543:
 11021              	.LBB16544:
 11022              	.LBB16545:
 11023              	.LBB16546:
 11024              		.file 42 "/usr/include/c++/6/complex"
   1:/usr/include/c++/6/complex **** // The template and inlines for the -*- C++ -*- complex number classes.
   2:/usr/include/c++/6/complex **** 
   3:/usr/include/c++/6/complex **** // Copyright (C) 1997-2016 Free Software Foundation, Inc.
   4:/usr/include/c++/6/complex **** //
   5:/usr/include/c++/6/complex **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/6/complex **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/6/complex **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/6/complex **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/6/complex **** // any later version.
  10:/usr/include/c++/6/complex **** 
  11:/usr/include/c++/6/complex **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/6/complex **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/6/complex **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/6/complex **** // GNU General Public License for more details.
  15:/usr/include/c++/6/complex **** 
  16:/usr/include/c++/6/complex **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/6/complex **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/6/complex **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/6/complex **** 
  20:/usr/include/c++/6/complex **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/6/complex **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/6/complex **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/6/complex **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/6/complex **** 
  25:/usr/include/c++/6/complex **** /** @file include/complex
  26:/usr/include/c++/6/complex ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/6/complex ****  */
  28:/usr/include/c++/6/complex **** 
  29:/usr/include/c++/6/complex **** //
  30:/usr/include/c++/6/complex **** // ISO C++ 14882: 26.2  Complex Numbers
  31:/usr/include/c++/6/complex **** // Note: this is not a conforming implementation.
  32:/usr/include/c++/6/complex **** // Initially implemented by Ulrich Drepper <drepper@cygnus.com>
  33:/usr/include/c++/6/complex **** // Improved by Gabriel Dos Reis <dosreis@cmla.ens-cachan.fr>
  34:/usr/include/c++/6/complex **** //
  35:/usr/include/c++/6/complex **** 
  36:/usr/include/c++/6/complex **** #ifndef _GLIBCXX_COMPLEX
  37:/usr/include/c++/6/complex **** #define _GLIBCXX_COMPLEX 1
  38:/usr/include/c++/6/complex **** 
  39:/usr/include/c++/6/complex **** #pragma GCC system_header
  40:/usr/include/c++/6/complex **** 
  41:/usr/include/c++/6/complex **** #include <bits/c++config.h>
  42:/usr/include/c++/6/complex **** #include <bits/cpp_type_traits.h>
  43:/usr/include/c++/6/complex **** #include <ext/type_traits.h>
  44:/usr/include/c++/6/complex **** #include <cmath>
  45:/usr/include/c++/6/complex **** #include <sstream>
  46:/usr/include/c++/6/complex **** 
  47:/usr/include/c++/6/complex **** // Get rid of a macro possibly defined in <complex.h>
  48:/usr/include/c++/6/complex **** #undef complex
  49:/usr/include/c++/6/complex **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 593


  50:/usr/include/c++/6/complex **** namespace std _GLIBCXX_VISIBILITY(default)
  51:/usr/include/c++/6/complex **** {
  52:/usr/include/c++/6/complex **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  53:/usr/include/c++/6/complex **** 
  54:/usr/include/c++/6/complex ****   /**
  55:/usr/include/c++/6/complex ****    * @defgroup complex_numbers Complex Numbers
  56:/usr/include/c++/6/complex ****    * @ingroup numerics
  57:/usr/include/c++/6/complex ****    *
  58:/usr/include/c++/6/complex ****    * Classes and functions for complex numbers.
  59:/usr/include/c++/6/complex ****    * @{
  60:/usr/include/c++/6/complex ****    */
  61:/usr/include/c++/6/complex **** 
  62:/usr/include/c++/6/complex ****   // Forward declarations.
  63:/usr/include/c++/6/complex ****   template<typename _Tp> class complex;
  64:/usr/include/c++/6/complex ****   template<> class complex<float>;
  65:/usr/include/c++/6/complex ****   template<> class complex<double>;
  66:/usr/include/c++/6/complex ****   template<> class complex<long double>;
  67:/usr/include/c++/6/complex **** 
  68:/usr/include/c++/6/complex ****   ///  Return magnitude of @a z.
  69:/usr/include/c++/6/complex ****   template<typename _Tp> _Tp abs(const complex<_Tp>&);
  70:/usr/include/c++/6/complex ****   ///  Return phase angle of @a z.
  71:/usr/include/c++/6/complex ****   template<typename _Tp> _Tp arg(const complex<_Tp>&);
  72:/usr/include/c++/6/complex ****   ///  Return @a z magnitude squared.
  73:/usr/include/c++/6/complex ****   template<typename _Tp> _Tp norm(const complex<_Tp>&);
  74:/usr/include/c++/6/complex **** 
  75:/usr/include/c++/6/complex ****   ///  Return complex conjugate of @a z.
  76:/usr/include/c++/6/complex ****   template<typename _Tp> complex<_Tp> conj(const complex<_Tp>&);
  77:/usr/include/c++/6/complex ****   ///  Return complex with magnitude @a rho and angle @a theta.
  78:/usr/include/c++/6/complex ****   template<typename _Tp> complex<_Tp> polar(const _Tp&, const _Tp& = 0);
  79:/usr/include/c++/6/complex **** 
  80:/usr/include/c++/6/complex ****   // Transcendentals:
  81:/usr/include/c++/6/complex ****   /// Return complex cosine of @a z.
  82:/usr/include/c++/6/complex ****   template<typename _Tp> complex<_Tp> cos(const complex<_Tp>&);
  83:/usr/include/c++/6/complex ****   /// Return complex hyperbolic cosine of @a z.
  84:/usr/include/c++/6/complex ****   template<typename _Tp> complex<_Tp> cosh(const complex<_Tp>&);
  85:/usr/include/c++/6/complex ****   /// Return complex base e exponential of @a z.
  86:/usr/include/c++/6/complex ****   template<typename _Tp> complex<_Tp> exp(const complex<_Tp>&);
  87:/usr/include/c++/6/complex ****   /// Return complex natural logarithm of @a z.
  88:/usr/include/c++/6/complex ****   template<typename _Tp> complex<_Tp> log(const complex<_Tp>&);
  89:/usr/include/c++/6/complex ****   /// Return complex base 10 logarithm of @a z.
  90:/usr/include/c++/6/complex ****   template<typename _Tp> complex<_Tp> log10(const complex<_Tp>&);
  91:/usr/include/c++/6/complex ****   /// Return @a x to the @a y'th power.
  92:/usr/include/c++/6/complex ****   template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&, int);
  93:/usr/include/c++/6/complex ****   /// Return @a x to the @a y'th power.
  94:/usr/include/c++/6/complex ****   template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&, const _Tp&);
  95:/usr/include/c++/6/complex ****   /// Return @a x to the @a y'th power.
  96:/usr/include/c++/6/complex ****   template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&, 
  97:/usr/include/c++/6/complex ****                                           const complex<_Tp>&);
  98:/usr/include/c++/6/complex ****   /// Return @a x to the @a y'th power.
  99:/usr/include/c++/6/complex ****   template<typename _Tp> complex<_Tp> pow(const _Tp&, const complex<_Tp>&);
 100:/usr/include/c++/6/complex ****   /// Return complex sine of @a z.
 101:/usr/include/c++/6/complex ****   template<typename _Tp> complex<_Tp> sin(const complex<_Tp>&);
 102:/usr/include/c++/6/complex ****   /// Return complex hyperbolic sine of @a z.
 103:/usr/include/c++/6/complex ****   template<typename _Tp> complex<_Tp> sinh(const complex<_Tp>&);
 104:/usr/include/c++/6/complex ****   /// Return complex square root of @a z.
 105:/usr/include/c++/6/complex ****   template<typename _Tp> complex<_Tp> sqrt(const complex<_Tp>&);
 106:/usr/include/c++/6/complex ****   /// Return complex tangent of @a z.
GAS LISTING /tmp/ccvmoMuv.s 			page 594


 107:/usr/include/c++/6/complex ****   template<typename _Tp> complex<_Tp> tan(const complex<_Tp>&);
 108:/usr/include/c++/6/complex ****   /// Return complex hyperbolic tangent of @a z.
 109:/usr/include/c++/6/complex ****   template<typename _Tp> complex<_Tp> tanh(const complex<_Tp>&);
 110:/usr/include/c++/6/complex ****     
 111:/usr/include/c++/6/complex ****     
 112:/usr/include/c++/6/complex ****   // 26.2.2  Primary template class complex
 113:/usr/include/c++/6/complex ****   /**
 114:/usr/include/c++/6/complex ****    *  Template to represent complex numbers.
 115:/usr/include/c++/6/complex ****    *
 116:/usr/include/c++/6/complex ****    *  Specializations for float, double, and long double are part of the
 117:/usr/include/c++/6/complex ****    *  library.  Results with any other type are not guaranteed.
 118:/usr/include/c++/6/complex ****    *
 119:/usr/include/c++/6/complex ****    *  @param  Tp  Type of real and imaginary values.
 120:/usr/include/c++/6/complex ****   */
 121:/usr/include/c++/6/complex ****   template<typename _Tp>
 122:/usr/include/c++/6/complex ****     struct complex
 123:/usr/include/c++/6/complex ****     {
 124:/usr/include/c++/6/complex ****       /// Value typedef.
 125:/usr/include/c++/6/complex ****       typedef _Tp value_type;
 126:/usr/include/c++/6/complex ****       
 127:/usr/include/c++/6/complex ****       ///  Default constructor.  First parameter is x, second parameter is y.
 128:/usr/include/c++/6/complex ****       ///  Unspecified parameters default to 0.
 129:/usr/include/c++/6/complex ****       _GLIBCXX_CONSTEXPR complex(const _Tp& __r = _Tp(), const _Tp& __i = _Tp())
 130:/usr/include/c++/6/complex ****       : _M_real(__r), _M_imag(__i) { }
 131:/usr/include/c++/6/complex **** 
 132:/usr/include/c++/6/complex ****       // Let the compiler synthesize the copy constructor
 133:/usr/include/c++/6/complex **** #if __cplusplus >= 201103L
 134:/usr/include/c++/6/complex ****       constexpr complex(const complex&) = default;
 135:/usr/include/c++/6/complex **** #endif
 136:/usr/include/c++/6/complex **** 
 137:/usr/include/c++/6/complex ****       ///  Converting constructor.
 138:/usr/include/c++/6/complex ****       template<typename _Up>
 139:/usr/include/c++/6/complex ****         _GLIBCXX_CONSTEXPR complex(const complex<_Up>& __z)
 140:/usr/include/c++/6/complex **** 	: _M_real(__z.real()), _M_imag(__z.imag()) { }
 141:/usr/include/c++/6/complex **** 
 142:/usr/include/c++/6/complex **** #if __cplusplus >= 201103L
 143:/usr/include/c++/6/complex ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 144:/usr/include/c++/6/complex ****       // DR 387. std::complex over-encapsulated.
 145:/usr/include/c++/6/complex ****       _GLIBCXX_ABI_TAG_CXX11
 146:/usr/include/c++/6/complex ****       constexpr _Tp 
 147:/usr/include/c++/6/complex ****       real() const { return _M_real; }
 148:/usr/include/c++/6/complex **** 
 149:/usr/include/c++/6/complex ****       _GLIBCXX_ABI_TAG_CXX11
 150:/usr/include/c++/6/complex ****       constexpr _Tp 
 151:/usr/include/c++/6/complex ****       imag() const { return _M_imag; }
 152:/usr/include/c++/6/complex **** #else
 153:/usr/include/c++/6/complex ****       ///  Return real part of complex number.
 154:/usr/include/c++/6/complex ****       _Tp& 
 155:/usr/include/c++/6/complex ****       real() { return _M_real; }
 156:/usr/include/c++/6/complex **** 
 157:/usr/include/c++/6/complex ****       ///  Return real part of complex number.
 158:/usr/include/c++/6/complex ****       const _Tp& 
 159:/usr/include/c++/6/complex ****       real() const { return _M_real; }
 160:/usr/include/c++/6/complex **** 
 161:/usr/include/c++/6/complex ****       ///  Return imaginary part of complex number.
 162:/usr/include/c++/6/complex ****       _Tp& 
 163:/usr/include/c++/6/complex ****       imag() { return _M_imag; }
GAS LISTING /tmp/ccvmoMuv.s 			page 595


 164:/usr/include/c++/6/complex **** 
 165:/usr/include/c++/6/complex ****       ///  Return imaginary part of complex number.
 166:/usr/include/c++/6/complex ****       const _Tp& 
 167:/usr/include/c++/6/complex ****       imag() const { return _M_imag; }
 168:/usr/include/c++/6/complex **** #endif
 169:/usr/include/c++/6/complex **** 
 170:/usr/include/c++/6/complex ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 171:/usr/include/c++/6/complex ****       // DR 387. std::complex over-encapsulated.
 172:/usr/include/c++/6/complex ****       void 
 173:/usr/include/c++/6/complex ****       real(_Tp __val) { _M_real = __val; }
 174:/usr/include/c++/6/complex **** 
 175:/usr/include/c++/6/complex ****       void 
 176:/usr/include/c++/6/complex ****       imag(_Tp __val) { _M_imag = __val; }
 177:/usr/include/c++/6/complex **** 
 178:/usr/include/c++/6/complex ****       /// Assign a scalar to this complex number.
 179:/usr/include/c++/6/complex ****       complex<_Tp>& operator=(const _Tp&);
 180:/usr/include/c++/6/complex ****       
 181:/usr/include/c++/6/complex ****       /// Add a scalar to this complex number.
 182:/usr/include/c++/6/complex ****       // 26.2.5/1
 183:/usr/include/c++/6/complex ****       complex<_Tp>&
 184:/usr/include/c++/6/complex ****       operator+=(const _Tp& __t)
 185:/usr/include/c++/6/complex ****       {
 186:/usr/include/c++/6/complex **** 	_M_real += __t;
 187:/usr/include/c++/6/complex **** 	return *this;
 188:/usr/include/c++/6/complex ****       }
 189:/usr/include/c++/6/complex **** 
 190:/usr/include/c++/6/complex ****       /// Subtract a scalar from this complex number.
 191:/usr/include/c++/6/complex ****       // 26.2.5/3
 192:/usr/include/c++/6/complex ****       complex<_Tp>&
 193:/usr/include/c++/6/complex ****       operator-=(const _Tp& __t)
 194:/usr/include/c++/6/complex ****       {
 195:/usr/include/c++/6/complex **** 	_M_real -= __t;
 196:/usr/include/c++/6/complex **** 	return *this;
 197:/usr/include/c++/6/complex ****       }
 198:/usr/include/c++/6/complex **** 
 199:/usr/include/c++/6/complex ****       /// Multiply this complex number by a scalar.
 200:/usr/include/c++/6/complex ****       complex<_Tp>& operator*=(const _Tp&);
 201:/usr/include/c++/6/complex ****       /// Divide this complex number by a scalar.
 202:/usr/include/c++/6/complex ****       complex<_Tp>& operator/=(const _Tp&);
 203:/usr/include/c++/6/complex **** 
 204:/usr/include/c++/6/complex ****       // Let the compiler synthesize the copy assignment operator
 205:/usr/include/c++/6/complex **** #if __cplusplus >= 201103L
 206:/usr/include/c++/6/complex ****       complex& operator=(const complex&) = default;
 207:/usr/include/c++/6/complex **** #endif
 208:/usr/include/c++/6/complex **** 
 209:/usr/include/c++/6/complex ****       /// Assign another complex number to this one.
 210:/usr/include/c++/6/complex ****       template<typename _Up>
 211:/usr/include/c++/6/complex ****         complex<_Tp>& operator=(const complex<_Up>&);
 212:/usr/include/c++/6/complex ****       /// Add another complex number to this one.
 213:/usr/include/c++/6/complex ****       template<typename _Up>
 214:/usr/include/c++/6/complex ****         complex<_Tp>& operator+=(const complex<_Up>&);
 215:/usr/include/c++/6/complex ****       /// Subtract another complex number from this one.
 216:/usr/include/c++/6/complex ****       template<typename _Up>
 217:/usr/include/c++/6/complex ****         complex<_Tp>& operator-=(const complex<_Up>&);
 218:/usr/include/c++/6/complex ****       /// Multiply this complex number by another.
 219:/usr/include/c++/6/complex ****       template<typename _Up>
 220:/usr/include/c++/6/complex ****         complex<_Tp>& operator*=(const complex<_Up>&);
GAS LISTING /tmp/ccvmoMuv.s 			page 596


 221:/usr/include/c++/6/complex ****       /// Divide this complex number by another.
 222:/usr/include/c++/6/complex ****       template<typename _Up>
 223:/usr/include/c++/6/complex ****         complex<_Tp>& operator/=(const complex<_Up>&);
 224:/usr/include/c++/6/complex **** 
 225:/usr/include/c++/6/complex ****       _GLIBCXX_CONSTEXPR complex __rep() const
 226:/usr/include/c++/6/complex ****       { return *this; }
 227:/usr/include/c++/6/complex **** 
 228:/usr/include/c++/6/complex ****     private:
 229:/usr/include/c++/6/complex ****       _Tp _M_real;
 230:/usr/include/c++/6/complex ****       _Tp _M_imag;
 231:/usr/include/c++/6/complex ****     };
 232:/usr/include/c++/6/complex **** 
 233:/usr/include/c++/6/complex ****   template<typename _Tp>
 234:/usr/include/c++/6/complex ****     complex<_Tp>&
 235:/usr/include/c++/6/complex ****     complex<_Tp>::operator=(const _Tp& __t)
 236:/usr/include/c++/6/complex ****     {
 237:/usr/include/c++/6/complex ****      _M_real = __t;
 238:/usr/include/c++/6/complex ****      _M_imag = _Tp();
 239:/usr/include/c++/6/complex ****      return *this;
 240:/usr/include/c++/6/complex ****     } 
 241:/usr/include/c++/6/complex **** 
 242:/usr/include/c++/6/complex ****   // 26.2.5/5
 243:/usr/include/c++/6/complex ****   template<typename _Tp>
 244:/usr/include/c++/6/complex ****     complex<_Tp>&
 245:/usr/include/c++/6/complex ****     complex<_Tp>::operator*=(const _Tp& __t)
 246:/usr/include/c++/6/complex ****     {
 247:/usr/include/c++/6/complex ****       _M_real *= __t;
 248:/usr/include/c++/6/complex ****       _M_imag *= __t;
 249:/usr/include/c++/6/complex ****       return *this;
 250:/usr/include/c++/6/complex ****     }
 251:/usr/include/c++/6/complex **** 
 252:/usr/include/c++/6/complex ****   // 26.2.5/7
 253:/usr/include/c++/6/complex ****   template<typename _Tp>
 254:/usr/include/c++/6/complex ****     complex<_Tp>&
 255:/usr/include/c++/6/complex ****     complex<_Tp>::operator/=(const _Tp& __t)
 256:/usr/include/c++/6/complex ****     {
 257:/usr/include/c++/6/complex ****       _M_real /= __t;
 258:/usr/include/c++/6/complex ****       _M_imag /= __t;
 259:/usr/include/c++/6/complex ****       return *this;
 260:/usr/include/c++/6/complex ****     }
 261:/usr/include/c++/6/complex **** 
 262:/usr/include/c++/6/complex ****   template<typename _Tp>
 263:/usr/include/c++/6/complex ****     template<typename _Up>
 264:/usr/include/c++/6/complex ****     complex<_Tp>&
 265:/usr/include/c++/6/complex ****     complex<_Tp>::operator=(const complex<_Up>& __z)
 266:/usr/include/c++/6/complex ****     {
 267:/usr/include/c++/6/complex ****       _M_real = __z.real();
 268:/usr/include/c++/6/complex ****       _M_imag = __z.imag();
 269:/usr/include/c++/6/complex ****       return *this;
 270:/usr/include/c++/6/complex ****     }
 271:/usr/include/c++/6/complex **** 
 272:/usr/include/c++/6/complex ****   // 26.2.5/9
 273:/usr/include/c++/6/complex ****   template<typename _Tp>
 274:/usr/include/c++/6/complex ****     template<typename _Up>
 275:/usr/include/c++/6/complex ****     complex<_Tp>&
 276:/usr/include/c++/6/complex ****     complex<_Tp>::operator+=(const complex<_Up>& __z)
 277:/usr/include/c++/6/complex ****     {
GAS LISTING /tmp/ccvmoMuv.s 			page 597


 278:/usr/include/c++/6/complex ****       _M_real += __z.real();
 279:/usr/include/c++/6/complex ****       _M_imag += __z.imag();
 280:/usr/include/c++/6/complex ****       return *this;
 281:/usr/include/c++/6/complex ****     }
 282:/usr/include/c++/6/complex **** 
 283:/usr/include/c++/6/complex ****   // 26.2.5/11
 284:/usr/include/c++/6/complex ****   template<typename _Tp>
 285:/usr/include/c++/6/complex ****     template<typename _Up>
 286:/usr/include/c++/6/complex ****     complex<_Tp>&
 287:/usr/include/c++/6/complex ****     complex<_Tp>::operator-=(const complex<_Up>& __z)
 288:/usr/include/c++/6/complex ****     {
 289:/usr/include/c++/6/complex ****       _M_real -= __z.real();
 290:/usr/include/c++/6/complex ****       _M_imag -= __z.imag();
 291:/usr/include/c++/6/complex ****       return *this;
 292:/usr/include/c++/6/complex ****     }
 293:/usr/include/c++/6/complex **** 
 294:/usr/include/c++/6/complex ****   // 26.2.5/13
 295:/usr/include/c++/6/complex ****   // XXX: This is a grammar school implementation.
 296:/usr/include/c++/6/complex ****   template<typename _Tp>
 297:/usr/include/c++/6/complex ****     template<typename _Up>
 298:/usr/include/c++/6/complex ****     complex<_Tp>&
 299:/usr/include/c++/6/complex ****     complex<_Tp>::operator*=(const complex<_Up>& __z)
 300:/usr/include/c++/6/complex ****     {
 301:/usr/include/c++/6/complex ****       const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
 302:/usr/include/c++/6/complex ****       _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
 303:/usr/include/c++/6/complex ****       _M_real = __r;
 304:/usr/include/c++/6/complex ****       return *this;
 305:/usr/include/c++/6/complex ****     }
 306:/usr/include/c++/6/complex **** 
 307:/usr/include/c++/6/complex ****   // 26.2.5/15
 308:/usr/include/c++/6/complex ****   // XXX: This is a grammar school implementation.
 309:/usr/include/c++/6/complex ****   template<typename _Tp>
 310:/usr/include/c++/6/complex ****     template<typename _Up>
 311:/usr/include/c++/6/complex ****     complex<_Tp>&
 312:/usr/include/c++/6/complex ****     complex<_Tp>::operator/=(const complex<_Up>& __z)
 313:/usr/include/c++/6/complex ****     {
 314:/usr/include/c++/6/complex ****       const _Tp __r =  _M_real * __z.real() + _M_imag * __z.imag();
 315:/usr/include/c++/6/complex ****       const _Tp __n = std::norm(__z);
 316:/usr/include/c++/6/complex ****       _M_imag = (_M_imag * __z.real() - _M_real * __z.imag()) / __n;
 317:/usr/include/c++/6/complex ****       _M_real = __r / __n;
 318:/usr/include/c++/6/complex ****       return *this;
 319:/usr/include/c++/6/complex ****     }
 320:/usr/include/c++/6/complex ****     
 321:/usr/include/c++/6/complex ****   // Operators:
 322:/usr/include/c++/6/complex ****   //@{
 323:/usr/include/c++/6/complex ****   ///  Return new complex value @a x plus @a y.
 324:/usr/include/c++/6/complex ****   template<typename _Tp>
 325:/usr/include/c++/6/complex ****     inline complex<_Tp>
 326:/usr/include/c++/6/complex ****     operator+(const complex<_Tp>& __x, const complex<_Tp>& __y)
 327:/usr/include/c++/6/complex ****     {
 328:/usr/include/c++/6/complex ****       complex<_Tp> __r = __x;
 329:/usr/include/c++/6/complex ****       __r += __y;
 330:/usr/include/c++/6/complex ****       return __r;
 331:/usr/include/c++/6/complex ****     }
 332:/usr/include/c++/6/complex **** 
 333:/usr/include/c++/6/complex ****   template<typename _Tp>
 334:/usr/include/c++/6/complex ****     inline complex<_Tp>
GAS LISTING /tmp/ccvmoMuv.s 			page 598


 335:/usr/include/c++/6/complex ****     operator+(const complex<_Tp>& __x, const _Tp& __y)
 336:/usr/include/c++/6/complex ****     {
 337:/usr/include/c++/6/complex ****       complex<_Tp> __r = __x;
 338:/usr/include/c++/6/complex ****       __r += __y;
 339:/usr/include/c++/6/complex ****       return __r;
 340:/usr/include/c++/6/complex ****     }
 341:/usr/include/c++/6/complex **** 
 342:/usr/include/c++/6/complex ****   template<typename _Tp>
 343:/usr/include/c++/6/complex ****     inline complex<_Tp>
 344:/usr/include/c++/6/complex ****     operator+(const _Tp& __x, const complex<_Tp>& __y)
 345:/usr/include/c++/6/complex ****     {
 346:/usr/include/c++/6/complex ****       complex<_Tp> __r = __y;
 347:/usr/include/c++/6/complex ****       __r += __x;
 348:/usr/include/c++/6/complex ****       return __r;
 349:/usr/include/c++/6/complex ****     }
 350:/usr/include/c++/6/complex ****   //@}
 351:/usr/include/c++/6/complex **** 
 352:/usr/include/c++/6/complex ****   //@{
 353:/usr/include/c++/6/complex ****   ///  Return new complex value @a x minus @a y.
 354:/usr/include/c++/6/complex ****   template<typename _Tp>
 355:/usr/include/c++/6/complex ****     inline complex<_Tp>
 356:/usr/include/c++/6/complex ****     operator-(const complex<_Tp>& __x, const complex<_Tp>& __y)
 357:/usr/include/c++/6/complex ****     {
 358:/usr/include/c++/6/complex ****       complex<_Tp> __r = __x;
 359:/usr/include/c++/6/complex ****       __r -= __y;
 360:/usr/include/c++/6/complex ****       return __r;
 361:/usr/include/c++/6/complex ****     }
 362:/usr/include/c++/6/complex ****     
 363:/usr/include/c++/6/complex ****   template<typename _Tp>
 364:/usr/include/c++/6/complex ****     inline complex<_Tp>
 365:/usr/include/c++/6/complex ****     operator-(const complex<_Tp>& __x, const _Tp& __y)
 366:/usr/include/c++/6/complex ****     {
 367:/usr/include/c++/6/complex ****       complex<_Tp> __r = __x;
 368:/usr/include/c++/6/complex ****       __r -= __y;
 369:/usr/include/c++/6/complex ****       return __r;
 370:/usr/include/c++/6/complex ****     }
 371:/usr/include/c++/6/complex **** 
 372:/usr/include/c++/6/complex ****   template<typename _Tp>
 373:/usr/include/c++/6/complex ****     inline complex<_Tp>
 374:/usr/include/c++/6/complex ****     operator-(const _Tp& __x, const complex<_Tp>& __y)
 375:/usr/include/c++/6/complex ****     {
 376:/usr/include/c++/6/complex ****       complex<_Tp> __r(__x, -__y.imag());
 377:/usr/include/c++/6/complex ****       __r -= __y.real();
 378:/usr/include/c++/6/complex ****       return __r;
 379:/usr/include/c++/6/complex ****     }
 380:/usr/include/c++/6/complex ****   //@}
 381:/usr/include/c++/6/complex **** 
 382:/usr/include/c++/6/complex ****   //@{
 383:/usr/include/c++/6/complex ****   ///  Return new complex value @a x times @a y.
 384:/usr/include/c++/6/complex ****   template<typename _Tp>
 385:/usr/include/c++/6/complex ****     inline complex<_Tp>
 386:/usr/include/c++/6/complex ****     operator*(const complex<_Tp>& __x, const complex<_Tp>& __y)
 387:/usr/include/c++/6/complex ****     {
 388:/usr/include/c++/6/complex ****       complex<_Tp> __r = __x;
 389:/usr/include/c++/6/complex ****       __r *= __y;
 390:/usr/include/c++/6/complex ****       return __r;
 391:/usr/include/c++/6/complex ****     }
GAS LISTING /tmp/ccvmoMuv.s 			page 599


 392:/usr/include/c++/6/complex **** 
 393:/usr/include/c++/6/complex ****   template<typename _Tp>
 394:/usr/include/c++/6/complex ****     inline complex<_Tp>
 395:/usr/include/c++/6/complex ****     operator*(const complex<_Tp>& __x, const _Tp& __y)
 396:/usr/include/c++/6/complex ****     {
 397:/usr/include/c++/6/complex ****       complex<_Tp> __r = __x;
 398:/usr/include/c++/6/complex ****       __r *= __y;
 399:/usr/include/c++/6/complex ****       return __r;
 400:/usr/include/c++/6/complex ****     }
 401:/usr/include/c++/6/complex **** 
 402:/usr/include/c++/6/complex ****   template<typename _Tp>
 403:/usr/include/c++/6/complex ****     inline complex<_Tp>
 404:/usr/include/c++/6/complex ****     operator*(const _Tp& __x, const complex<_Tp>& __y)
 405:/usr/include/c++/6/complex ****     {
 406:/usr/include/c++/6/complex ****       complex<_Tp> __r = __y;
 407:/usr/include/c++/6/complex ****       __r *= __x;
 408:/usr/include/c++/6/complex ****       return __r;
 409:/usr/include/c++/6/complex ****     }
 410:/usr/include/c++/6/complex ****   //@}
 411:/usr/include/c++/6/complex **** 
 412:/usr/include/c++/6/complex ****   //@{
 413:/usr/include/c++/6/complex ****   ///  Return new complex value @a x divided by @a y.
 414:/usr/include/c++/6/complex ****   template<typename _Tp>
 415:/usr/include/c++/6/complex ****     inline complex<_Tp>
 416:/usr/include/c++/6/complex ****     operator/(const complex<_Tp>& __x, const complex<_Tp>& __y)
 417:/usr/include/c++/6/complex ****     {
 418:/usr/include/c++/6/complex ****       complex<_Tp> __r = __x;
 419:/usr/include/c++/6/complex ****       __r /= __y;
 420:/usr/include/c++/6/complex ****       return __r;
 421:/usr/include/c++/6/complex ****     }
 422:/usr/include/c++/6/complex ****     
 423:/usr/include/c++/6/complex ****   template<typename _Tp>
 424:/usr/include/c++/6/complex ****     inline complex<_Tp>
 425:/usr/include/c++/6/complex ****     operator/(const complex<_Tp>& __x, const _Tp& __y)
 426:/usr/include/c++/6/complex ****     {
 427:/usr/include/c++/6/complex ****       complex<_Tp> __r = __x;
 428:/usr/include/c++/6/complex ****       __r /= __y;
 429:/usr/include/c++/6/complex ****       return __r;
 430:/usr/include/c++/6/complex ****     }
 431:/usr/include/c++/6/complex **** 
 432:/usr/include/c++/6/complex ****   template<typename _Tp>
 433:/usr/include/c++/6/complex ****     inline complex<_Tp>
 434:/usr/include/c++/6/complex ****     operator/(const _Tp& __x, const complex<_Tp>& __y)
 435:/usr/include/c++/6/complex ****     {
 436:/usr/include/c++/6/complex ****       complex<_Tp> __r = __x;
 437:/usr/include/c++/6/complex ****       __r /= __y;
 438:/usr/include/c++/6/complex ****       return __r;
 439:/usr/include/c++/6/complex ****     }
 440:/usr/include/c++/6/complex ****   //@}
 441:/usr/include/c++/6/complex **** 
 442:/usr/include/c++/6/complex ****   ///  Return @a x.
 443:/usr/include/c++/6/complex ****   template<typename _Tp>
 444:/usr/include/c++/6/complex ****     inline complex<_Tp>
 445:/usr/include/c++/6/complex ****     operator+(const complex<_Tp>& __x)
 446:/usr/include/c++/6/complex ****     { return __x; }
 447:/usr/include/c++/6/complex **** 
 448:/usr/include/c++/6/complex ****   ///  Return complex negation of @a x.
GAS LISTING /tmp/ccvmoMuv.s 			page 600


 449:/usr/include/c++/6/complex ****   template<typename _Tp>
 450:/usr/include/c++/6/complex ****     inline complex<_Tp>
 451:/usr/include/c++/6/complex ****     operator-(const complex<_Tp>& __x)
 452:/usr/include/c++/6/complex ****     {  return complex<_Tp>(-__x.real(), -__x.imag()); }
 453:/usr/include/c++/6/complex **** 
 454:/usr/include/c++/6/complex ****   //@{
 455:/usr/include/c++/6/complex ****   ///  Return true if @a x is equal to @a y.
 456:/usr/include/c++/6/complex ****   template<typename _Tp>
 457:/usr/include/c++/6/complex ****     inline _GLIBCXX_CONSTEXPR bool
 458:/usr/include/c++/6/complex ****     operator==(const complex<_Tp>& __x, const complex<_Tp>& __y)
 459:/usr/include/c++/6/complex ****     { return __x.real() == __y.real() && __x.imag() == __y.imag(); }
 460:/usr/include/c++/6/complex **** 
 461:/usr/include/c++/6/complex ****   template<typename _Tp>
 462:/usr/include/c++/6/complex ****     inline _GLIBCXX_CONSTEXPR bool
 463:/usr/include/c++/6/complex ****     operator==(const complex<_Tp>& __x, const _Tp& __y)
 464:/usr/include/c++/6/complex ****     { return __x.real() == __y && __x.imag() == _Tp(); }
 465:/usr/include/c++/6/complex **** 
 466:/usr/include/c++/6/complex ****   template<typename _Tp>
 467:/usr/include/c++/6/complex ****     inline _GLIBCXX_CONSTEXPR bool
 468:/usr/include/c++/6/complex ****     operator==(const _Tp& __x, const complex<_Tp>& __y)
 469:/usr/include/c++/6/complex ****     { return __x == __y.real() && _Tp() == __y.imag(); }
 470:/usr/include/c++/6/complex ****   //@}
 471:/usr/include/c++/6/complex **** 
 472:/usr/include/c++/6/complex ****   //@{
 473:/usr/include/c++/6/complex ****   ///  Return false if @a x is equal to @a y.
 474:/usr/include/c++/6/complex ****   template<typename _Tp>
 475:/usr/include/c++/6/complex ****     inline _GLIBCXX_CONSTEXPR bool
 476:/usr/include/c++/6/complex ****     operator!=(const complex<_Tp>& __x, const complex<_Tp>& __y)
 477:/usr/include/c++/6/complex ****     { return __x.real() != __y.real() || __x.imag() != __y.imag(); }
 478:/usr/include/c++/6/complex **** 
 479:/usr/include/c++/6/complex ****   template<typename _Tp>
 480:/usr/include/c++/6/complex ****     inline _GLIBCXX_CONSTEXPR bool
 481:/usr/include/c++/6/complex ****     operator!=(const complex<_Tp>& __x, const _Tp& __y)
 482:/usr/include/c++/6/complex ****     { return __x.real() != __y || __x.imag() != _Tp(); }
 483:/usr/include/c++/6/complex **** 
 484:/usr/include/c++/6/complex ****   template<typename _Tp>
 485:/usr/include/c++/6/complex ****     inline _GLIBCXX_CONSTEXPR bool
 486:/usr/include/c++/6/complex ****     operator!=(const _Tp& __x, const complex<_Tp>& __y)
 487:/usr/include/c++/6/complex ****     { return __x != __y.real() || _Tp() != __y.imag(); }
 488:/usr/include/c++/6/complex ****   //@}
 489:/usr/include/c++/6/complex **** 
 490:/usr/include/c++/6/complex ****   ///  Extraction operator for complex values.
 491:/usr/include/c++/6/complex ****   template<typename _Tp, typename _CharT, class _Traits>
 492:/usr/include/c++/6/complex ****     basic_istream<_CharT, _Traits>&
 493:/usr/include/c++/6/complex ****     operator>>(basic_istream<_CharT, _Traits>& __is, complex<_Tp>& __x)
 494:/usr/include/c++/6/complex ****     {
 495:/usr/include/c++/6/complex ****       _Tp __re_x, __im_x;
 496:/usr/include/c++/6/complex ****       _CharT __ch;
 497:/usr/include/c++/6/complex ****       __is >> __ch;
 498:/usr/include/c++/6/complex ****       if (__ch == '(') 
 499:/usr/include/c++/6/complex **** 	{
 500:/usr/include/c++/6/complex **** 	  __is >> __re_x >> __ch;
 501:/usr/include/c++/6/complex **** 	  if (__ch == ',') 
 502:/usr/include/c++/6/complex **** 	    {
 503:/usr/include/c++/6/complex **** 	      __is >> __im_x >> __ch;
 504:/usr/include/c++/6/complex **** 	      if (__ch == ')') 
 505:/usr/include/c++/6/complex **** 		__x = complex<_Tp>(__re_x, __im_x);
GAS LISTING /tmp/ccvmoMuv.s 			page 601


 506:/usr/include/c++/6/complex **** 	      else
 507:/usr/include/c++/6/complex **** 		__is.setstate(ios_base::failbit);
 508:/usr/include/c++/6/complex **** 	    }
 509:/usr/include/c++/6/complex **** 	  else if (__ch == ')') 
 510:/usr/include/c++/6/complex **** 	    __x = __re_x;
 511:/usr/include/c++/6/complex **** 	  else
 512:/usr/include/c++/6/complex **** 	    __is.setstate(ios_base::failbit);
 513:/usr/include/c++/6/complex **** 	}
 514:/usr/include/c++/6/complex ****       else 
 515:/usr/include/c++/6/complex **** 	{
 516:/usr/include/c++/6/complex **** 	  __is.putback(__ch);
 517:/usr/include/c++/6/complex **** 	  __is >> __re_x;
 518:/usr/include/c++/6/complex **** 	  __x = __re_x;
 519:/usr/include/c++/6/complex **** 	}
 520:/usr/include/c++/6/complex ****       return __is;
 521:/usr/include/c++/6/complex ****     }
 522:/usr/include/c++/6/complex **** 
 523:/usr/include/c++/6/complex ****   ///  Insertion operator for complex values.
 524:/usr/include/c++/6/complex ****   template<typename _Tp, typename _CharT, class _Traits>
 525:/usr/include/c++/6/complex ****     basic_ostream<_CharT, _Traits>&
 526:/usr/include/c++/6/complex ****     operator<<(basic_ostream<_CharT, _Traits>& __os, const complex<_Tp>& __x)
 527:/usr/include/c++/6/complex ****     {
 528:/usr/include/c++/6/complex ****       basic_ostringstream<_CharT, _Traits> __s;
 529:/usr/include/c++/6/complex ****       __s.flags(__os.flags());
 530:/usr/include/c++/6/complex ****       __s.imbue(__os.getloc());
 531:/usr/include/c++/6/complex ****       __s.precision(__os.precision());
 532:/usr/include/c++/6/complex ****       __s << '(' << __x.real() << ',' << __x.imag() << ')';
 533:/usr/include/c++/6/complex ****       return __os << __s.str();
 534:/usr/include/c++/6/complex ****     }
 535:/usr/include/c++/6/complex **** 
 536:/usr/include/c++/6/complex ****   // Values
 537:/usr/include/c++/6/complex **** #if __cplusplus >= 201103L
 538:/usr/include/c++/6/complex ****   template<typename _Tp>
 539:/usr/include/c++/6/complex ****     constexpr _Tp
 540:/usr/include/c++/6/complex ****     real(const complex<_Tp>& __z)
 541:/usr/include/c++/6/complex ****     { return __z.real(); }
 542:/usr/include/c++/6/complex **** 
 543:/usr/include/c++/6/complex ****   template<typename _Tp>
 544:/usr/include/c++/6/complex ****     constexpr _Tp
 545:/usr/include/c++/6/complex ****     imag(const complex<_Tp>& __z)
 546:/usr/include/c++/6/complex ****     { return __z.imag(); }
 547:/usr/include/c++/6/complex **** #else
 548:/usr/include/c++/6/complex ****   template<typename _Tp>
 549:/usr/include/c++/6/complex ****     inline _Tp&
 550:/usr/include/c++/6/complex ****     real(complex<_Tp>& __z)
 551:/usr/include/c++/6/complex ****     { return __z.real(); }
 552:/usr/include/c++/6/complex ****     
 553:/usr/include/c++/6/complex ****   template<typename _Tp>
 554:/usr/include/c++/6/complex ****     inline const _Tp&
 555:/usr/include/c++/6/complex ****     real(const complex<_Tp>& __z)
 556:/usr/include/c++/6/complex ****     { return __z.real(); }
 557:/usr/include/c++/6/complex ****     
 558:/usr/include/c++/6/complex ****   template<typename _Tp>
 559:/usr/include/c++/6/complex ****     inline _Tp&
 560:/usr/include/c++/6/complex ****     imag(complex<_Tp>& __z)
 561:/usr/include/c++/6/complex ****     { return __z.imag(); }
 562:/usr/include/c++/6/complex ****     
GAS LISTING /tmp/ccvmoMuv.s 			page 602


 563:/usr/include/c++/6/complex ****   template<typename _Tp>
 564:/usr/include/c++/6/complex ****     inline const _Tp&
 565:/usr/include/c++/6/complex ****     imag(const complex<_Tp>& __z)
 566:/usr/include/c++/6/complex ****     { return __z.imag(); }
 567:/usr/include/c++/6/complex **** #endif
 568:/usr/include/c++/6/complex **** 
 569:/usr/include/c++/6/complex ****   // 26.2.7/3 abs(__z):  Returns the magnitude of __z.
 570:/usr/include/c++/6/complex ****   template<typename _Tp>
 571:/usr/include/c++/6/complex ****     inline _Tp
 572:/usr/include/c++/6/complex ****     __complex_abs(const complex<_Tp>& __z)
 573:/usr/include/c++/6/complex ****     {
 574:/usr/include/c++/6/complex ****       _Tp __x = __z.real();
 575:/usr/include/c++/6/complex ****       _Tp __y = __z.imag();
 576:/usr/include/c++/6/complex ****       const _Tp __s = std::max(abs(__x), abs(__y));
 577:/usr/include/c++/6/complex ****       if (__s == _Tp())  // well ...
 578:/usr/include/c++/6/complex ****         return __s;
 579:/usr/include/c++/6/complex ****       __x /= __s; 
 580:/usr/include/c++/6/complex ****       __y /= __s;
 581:/usr/include/c++/6/complex ****       return __s * sqrt(__x * __x + __y * __y);
 582:/usr/include/c++/6/complex ****     }
 583:/usr/include/c++/6/complex **** 
 584:/usr/include/c++/6/complex **** #if _GLIBCXX_USE_C99_COMPLEX
 585:/usr/include/c++/6/complex ****   inline float
 586:/usr/include/c++/6/complex ****   __complex_abs(__complex__ float __z) { return __builtin_cabsf(__z); }
 587:/usr/include/c++/6/complex **** 
 588:/usr/include/c++/6/complex ****   inline double
 589:/usr/include/c++/6/complex ****   __complex_abs(__complex__ double __z) { return __builtin_cabs(__z); }
 590:/usr/include/c++/6/complex **** 
 591:/usr/include/c++/6/complex ****   inline long double
 592:/usr/include/c++/6/complex ****   __complex_abs(const __complex__ long double& __z)
 593:/usr/include/c++/6/complex ****   { return __builtin_cabsl(__z); }
 594:/usr/include/c++/6/complex **** 
 595:/usr/include/c++/6/complex ****   template<typename _Tp>
 596:/usr/include/c++/6/complex ****     inline _Tp
 597:/usr/include/c++/6/complex ****     abs(const complex<_Tp>& __z) { return __complex_abs(__z.__rep()); }
 598:/usr/include/c++/6/complex **** #else
 599:/usr/include/c++/6/complex ****   template<typename _Tp>
 600:/usr/include/c++/6/complex ****     inline _Tp
 601:/usr/include/c++/6/complex ****     abs(const complex<_Tp>& __z) { return __complex_abs(__z); }
 602:/usr/include/c++/6/complex **** #endif  
 603:/usr/include/c++/6/complex **** 
 604:/usr/include/c++/6/complex **** 
 605:/usr/include/c++/6/complex ****   // 26.2.7/4: arg(__z): Returns the phase angle of __z.
 606:/usr/include/c++/6/complex ****   template<typename _Tp>
 607:/usr/include/c++/6/complex ****     inline _Tp
 608:/usr/include/c++/6/complex ****     __complex_arg(const complex<_Tp>& __z)
 609:/usr/include/c++/6/complex ****     { return  atan2(__z.imag(), __z.real()); }
 610:/usr/include/c++/6/complex **** 
 611:/usr/include/c++/6/complex **** #if _GLIBCXX_USE_C99_COMPLEX
 612:/usr/include/c++/6/complex ****   inline float
 613:/usr/include/c++/6/complex ****   __complex_arg(__complex__ float __z) { return __builtin_cargf(__z); }
 614:/usr/include/c++/6/complex **** 
 615:/usr/include/c++/6/complex ****   inline double
 616:/usr/include/c++/6/complex ****   __complex_arg(__complex__ double __z) { return __builtin_carg(__z); }
 617:/usr/include/c++/6/complex **** 
 618:/usr/include/c++/6/complex ****   inline long double
 619:/usr/include/c++/6/complex ****   __complex_arg(const __complex__ long double& __z)
GAS LISTING /tmp/ccvmoMuv.s 			page 603


 620:/usr/include/c++/6/complex ****   { return __builtin_cargl(__z); }
 621:/usr/include/c++/6/complex **** 
 622:/usr/include/c++/6/complex ****   template<typename _Tp>
 623:/usr/include/c++/6/complex ****     inline _Tp
 624:/usr/include/c++/6/complex ****     arg(const complex<_Tp>& __z) { return __complex_arg(__z.__rep()); }
 625:/usr/include/c++/6/complex **** #else
 626:/usr/include/c++/6/complex ****   template<typename _Tp>
 627:/usr/include/c++/6/complex ****     inline _Tp
 628:/usr/include/c++/6/complex ****     arg(const complex<_Tp>& __z) { return __complex_arg(__z); }
 629:/usr/include/c++/6/complex **** #endif
 630:/usr/include/c++/6/complex **** 
 631:/usr/include/c++/6/complex ****   // 26.2.7/5: norm(__z) returns the squared magnitude of __z.
 632:/usr/include/c++/6/complex ****   //     As defined, norm() is -not- a norm is the common mathematical
 633:/usr/include/c++/6/complex ****   //     sense used in numerics.  The helper class _Norm_helper<> tries to
 634:/usr/include/c++/6/complex ****   //     distinguish between builtin floating point and the rest, so as
 635:/usr/include/c++/6/complex ****   //     to deliver an answer as close as possible to the real value.
 636:/usr/include/c++/6/complex ****   template<bool>
 637:/usr/include/c++/6/complex ****     struct _Norm_helper
 638:/usr/include/c++/6/complex ****     {
 639:/usr/include/c++/6/complex ****       template<typename _Tp>
 640:/usr/include/c++/6/complex ****         static inline _Tp _S_do_it(const complex<_Tp>& __z)
 641:/usr/include/c++/6/complex ****         {
 642:/usr/include/c++/6/complex ****           const _Tp __x = __z.real();
 643:/usr/include/c++/6/complex ****           const _Tp __y = __z.imag();
 644:/usr/include/c++/6/complex ****           return __x * __x + __y * __y;
 645:/usr/include/c++/6/complex ****         }
 646:/usr/include/c++/6/complex ****     };
 647:/usr/include/c++/6/complex **** 
 648:/usr/include/c++/6/complex ****   template<>
 649:/usr/include/c++/6/complex ****     struct _Norm_helper<true>
 650:/usr/include/c++/6/complex ****     {
 651:/usr/include/c++/6/complex ****       template<typename _Tp>
 652:/usr/include/c++/6/complex ****         static inline _Tp _S_do_it(const complex<_Tp>& __z)
 653:/usr/include/c++/6/complex ****         {
 654:/usr/include/c++/6/complex ****           _Tp __res = std::abs(__z);
 655:/usr/include/c++/6/complex ****           return __res * __res;
 656:/usr/include/c++/6/complex ****         }
 657:/usr/include/c++/6/complex ****     };
 658:/usr/include/c++/6/complex ****   
 659:/usr/include/c++/6/complex ****   template<typename _Tp>
 660:/usr/include/c++/6/complex ****     inline _Tp
 661:/usr/include/c++/6/complex ****     norm(const complex<_Tp>& __z)
 662:/usr/include/c++/6/complex ****     {
 663:/usr/include/c++/6/complex ****       return _Norm_helper<__is_floating<_Tp>::__value 
 664:/usr/include/c++/6/complex **** 	&& !_GLIBCXX_FAST_MATH>::_S_do_it(__z);
 665:/usr/include/c++/6/complex ****     }
 666:/usr/include/c++/6/complex **** 
 667:/usr/include/c++/6/complex ****   template<typename _Tp>
 668:/usr/include/c++/6/complex ****     inline complex<_Tp>
 669:/usr/include/c++/6/complex ****     polar(const _Tp& __rho, const _Tp& __theta)
 670:/usr/include/c++/6/complex ****     {
 671:/usr/include/c++/6/complex ****       __glibcxx_assert( __rho >= 0 );
 672:/usr/include/c++/6/complex ****       return complex<_Tp>(__rho * cos(__theta), __rho * sin(__theta));
 673:/usr/include/c++/6/complex ****     }
 674:/usr/include/c++/6/complex **** 
 675:/usr/include/c++/6/complex ****   template<typename _Tp>
 676:/usr/include/c++/6/complex ****     inline complex<_Tp>
GAS LISTING /tmp/ccvmoMuv.s 			page 604


 677:/usr/include/c++/6/complex ****     conj(const complex<_Tp>& __z)
 678:/usr/include/c++/6/complex ****     { return complex<_Tp>(__z.real(), -__z.imag()); }
 679:/usr/include/c++/6/complex ****   
 680:/usr/include/c++/6/complex ****   // Transcendentals
 681:/usr/include/c++/6/complex **** 
 682:/usr/include/c++/6/complex ****   // 26.2.8/1 cos(__z):  Returns the cosine of __z.
 683:/usr/include/c++/6/complex ****   template<typename _Tp>
 684:/usr/include/c++/6/complex ****     inline complex<_Tp>
 685:/usr/include/c++/6/complex ****     __complex_cos(const complex<_Tp>& __z)
 686:/usr/include/c++/6/complex ****     {
 687:/usr/include/c++/6/complex ****       const _Tp __x = __z.real();
 688:/usr/include/c++/6/complex ****       const _Tp __y = __z.imag();
 689:/usr/include/c++/6/complex ****       return complex<_Tp>(cos(__x) * cosh(__y), -sin(__x) * sinh(__y));
 690:/usr/include/c++/6/complex ****     }
 691:/usr/include/c++/6/complex **** 
 692:/usr/include/c++/6/complex **** #if _GLIBCXX_USE_C99_COMPLEX
 693:/usr/include/c++/6/complex ****   inline __complex__ float
 694:/usr/include/c++/6/complex ****   __complex_cos(__complex__ float __z) { return __builtin_ccosf(__z); }
 695:/usr/include/c++/6/complex **** 
 696:/usr/include/c++/6/complex ****   inline __complex__ double
 697:/usr/include/c++/6/complex ****   __complex_cos(__complex__ double __z) { return __builtin_ccos(__z); }
 698:/usr/include/c++/6/complex **** 
 699:/usr/include/c++/6/complex ****   inline __complex__ long double
 700:/usr/include/c++/6/complex ****   __complex_cos(const __complex__ long double& __z)
 701:/usr/include/c++/6/complex ****   { return __builtin_ccosl(__z); }
 702:/usr/include/c++/6/complex **** 
 703:/usr/include/c++/6/complex ****   template<typename _Tp>
 704:/usr/include/c++/6/complex ****     inline complex<_Tp>
 705:/usr/include/c++/6/complex ****     cos(const complex<_Tp>& __z) { return __complex_cos(__z.__rep()); }
 706:/usr/include/c++/6/complex **** #else
 707:/usr/include/c++/6/complex ****   template<typename _Tp>
 708:/usr/include/c++/6/complex ****     inline complex<_Tp>
 709:/usr/include/c++/6/complex ****     cos(const complex<_Tp>& __z) { return __complex_cos(__z); }
 710:/usr/include/c++/6/complex **** #endif
 711:/usr/include/c++/6/complex **** 
 712:/usr/include/c++/6/complex ****   // 26.2.8/2 cosh(__z): Returns the hyperbolic cosine of __z.
 713:/usr/include/c++/6/complex ****   template<typename _Tp>
 714:/usr/include/c++/6/complex ****     inline complex<_Tp>
 715:/usr/include/c++/6/complex ****     __complex_cosh(const complex<_Tp>& __z)
 716:/usr/include/c++/6/complex ****     {
 717:/usr/include/c++/6/complex ****       const _Tp __x = __z.real();
 718:/usr/include/c++/6/complex ****       const _Tp __y = __z.imag();
 719:/usr/include/c++/6/complex ****       return complex<_Tp>(cosh(__x) * cos(__y), sinh(__x) * sin(__y));
 720:/usr/include/c++/6/complex ****     }
 721:/usr/include/c++/6/complex **** 
 722:/usr/include/c++/6/complex **** #if _GLIBCXX_USE_C99_COMPLEX
 723:/usr/include/c++/6/complex ****   inline __complex__ float
 724:/usr/include/c++/6/complex ****   __complex_cosh(__complex__ float __z) { return __builtin_ccoshf(__z); }
 725:/usr/include/c++/6/complex **** 
 726:/usr/include/c++/6/complex ****   inline __complex__ double
 727:/usr/include/c++/6/complex ****   __complex_cosh(__complex__ double __z) { return __builtin_ccosh(__z); }
 728:/usr/include/c++/6/complex **** 
 729:/usr/include/c++/6/complex ****   inline __complex__ long double
 730:/usr/include/c++/6/complex ****   __complex_cosh(const __complex__ long double& __z)
 731:/usr/include/c++/6/complex ****   { return __builtin_ccoshl(__z); }
 732:/usr/include/c++/6/complex **** 
 733:/usr/include/c++/6/complex ****   template<typename _Tp>
GAS LISTING /tmp/ccvmoMuv.s 			page 605


 734:/usr/include/c++/6/complex ****     inline complex<_Tp>
 735:/usr/include/c++/6/complex ****     cosh(const complex<_Tp>& __z) { return __complex_cosh(__z.__rep()); }
 736:/usr/include/c++/6/complex **** #else
 737:/usr/include/c++/6/complex ****   template<typename _Tp>
 738:/usr/include/c++/6/complex ****     inline complex<_Tp>
 739:/usr/include/c++/6/complex ****     cosh(const complex<_Tp>& __z) { return __complex_cosh(__z); }
 740:/usr/include/c++/6/complex **** #endif
 741:/usr/include/c++/6/complex **** 
 742:/usr/include/c++/6/complex ****   // 26.2.8/3 exp(__z): Returns the complex base e exponential of x
 743:/usr/include/c++/6/complex ****   template<typename _Tp>
 744:/usr/include/c++/6/complex ****     inline complex<_Tp>
 745:/usr/include/c++/6/complex ****     __complex_exp(const complex<_Tp>& __z)
 746:/usr/include/c++/6/complex ****     { return std::polar<_Tp>(exp(__z.real()), __z.imag()); }
 747:/usr/include/c++/6/complex **** 
 748:/usr/include/c++/6/complex **** #if _GLIBCXX_USE_C99_COMPLEX
 749:/usr/include/c++/6/complex ****   inline __complex__ float
 750:/usr/include/c++/6/complex ****   __complex_exp(__complex__ float __z) { return __builtin_cexpf(__z); }
 751:/usr/include/c++/6/complex **** 
 752:/usr/include/c++/6/complex ****   inline __complex__ double
 753:/usr/include/c++/6/complex ****   __complex_exp(__complex__ double __z) { return __builtin_cexp(__z); }
 754:/usr/include/c++/6/complex **** 
 755:/usr/include/c++/6/complex ****   inline __complex__ long double
 756:/usr/include/c++/6/complex ****   __complex_exp(const __complex__ long double& __z)
 757:/usr/include/c++/6/complex ****   { return __builtin_cexpl(__z); }
 758:/usr/include/c++/6/complex **** 
 759:/usr/include/c++/6/complex ****   template<typename _Tp>
 760:/usr/include/c++/6/complex ****     inline complex<_Tp>
 761:/usr/include/c++/6/complex ****     exp(const complex<_Tp>& __z) { return __complex_exp(__z.__rep()); }
 762:/usr/include/c++/6/complex **** #else
 763:/usr/include/c++/6/complex ****   template<typename _Tp>
 764:/usr/include/c++/6/complex ****     inline complex<_Tp>
 765:/usr/include/c++/6/complex ****     exp(const complex<_Tp>& __z) { return __complex_exp(__z); }
 766:/usr/include/c++/6/complex **** #endif
 767:/usr/include/c++/6/complex **** 
 768:/usr/include/c++/6/complex ****   // 26.2.8/5 log(__z): Returns the natural complex logarithm of __z.
 769:/usr/include/c++/6/complex ****   //                    The branch cut is along the negative axis.
 770:/usr/include/c++/6/complex ****   template<typename _Tp>
 771:/usr/include/c++/6/complex ****     inline complex<_Tp>
 772:/usr/include/c++/6/complex ****     __complex_log(const complex<_Tp>& __z)
 773:/usr/include/c++/6/complex ****     { return complex<_Tp>(log(std::abs(__z)), std::arg(__z)); }
 774:/usr/include/c++/6/complex **** 
 775:/usr/include/c++/6/complex **** #if _GLIBCXX_USE_C99_COMPLEX
 776:/usr/include/c++/6/complex ****   inline __complex__ float
 777:/usr/include/c++/6/complex ****   __complex_log(__complex__ float __z) { return __builtin_clogf(__z); }
 778:/usr/include/c++/6/complex **** 
 779:/usr/include/c++/6/complex ****   inline __complex__ double
 780:/usr/include/c++/6/complex ****   __complex_log(__complex__ double __z) { return __builtin_clog(__z); }
 781:/usr/include/c++/6/complex **** 
 782:/usr/include/c++/6/complex ****   inline __complex__ long double
 783:/usr/include/c++/6/complex ****   __complex_log(const __complex__ long double& __z)
 784:/usr/include/c++/6/complex ****   { return __builtin_clogl(__z); }
 785:/usr/include/c++/6/complex **** 
 786:/usr/include/c++/6/complex ****   template<typename _Tp>
 787:/usr/include/c++/6/complex ****     inline complex<_Tp>
 788:/usr/include/c++/6/complex ****     log(const complex<_Tp>& __z) { return __complex_log(__z.__rep()); }
 789:/usr/include/c++/6/complex **** #else
 790:/usr/include/c++/6/complex ****   template<typename _Tp>
GAS LISTING /tmp/ccvmoMuv.s 			page 606


 791:/usr/include/c++/6/complex ****     inline complex<_Tp>
 792:/usr/include/c++/6/complex ****     log(const complex<_Tp>& __z) { return __complex_log(__z); }
 793:/usr/include/c++/6/complex **** #endif
 794:/usr/include/c++/6/complex **** 
 795:/usr/include/c++/6/complex ****   template<typename _Tp>
 796:/usr/include/c++/6/complex ****     inline complex<_Tp>
 797:/usr/include/c++/6/complex ****     log10(const complex<_Tp>& __z)
 798:/usr/include/c++/6/complex ****     { return std::log(__z) / log(_Tp(10.0)); }
 799:/usr/include/c++/6/complex **** 
 800:/usr/include/c++/6/complex ****   // 26.2.8/10 sin(__z): Returns the sine of __z.
 801:/usr/include/c++/6/complex ****   template<typename _Tp>
 802:/usr/include/c++/6/complex ****     inline complex<_Tp>
 803:/usr/include/c++/6/complex ****     __complex_sin(const complex<_Tp>& __z)
 804:/usr/include/c++/6/complex ****     {
 805:/usr/include/c++/6/complex ****       const _Tp __x = __z.real();
 806:/usr/include/c++/6/complex ****       const _Tp __y = __z.imag();
 807:/usr/include/c++/6/complex ****       return complex<_Tp>(sin(__x) * cosh(__y), cos(__x) * sinh(__y)); 
 808:/usr/include/c++/6/complex ****     }
 809:/usr/include/c++/6/complex **** 
 810:/usr/include/c++/6/complex **** #if _GLIBCXX_USE_C99_COMPLEX
 811:/usr/include/c++/6/complex ****   inline __complex__ float
 812:/usr/include/c++/6/complex ****   __complex_sin(__complex__ float __z) { return __builtin_csinf(__z); }
 813:/usr/include/c++/6/complex **** 
 814:/usr/include/c++/6/complex ****   inline __complex__ double
 815:/usr/include/c++/6/complex ****   __complex_sin(__complex__ double __z) { return __builtin_csin(__z); }
 816:/usr/include/c++/6/complex **** 
 817:/usr/include/c++/6/complex ****   inline __complex__ long double
 818:/usr/include/c++/6/complex ****   __complex_sin(const __complex__ long double& __z)
 819:/usr/include/c++/6/complex ****   { return __builtin_csinl(__z); }
 820:/usr/include/c++/6/complex **** 
 821:/usr/include/c++/6/complex ****   template<typename _Tp>
 822:/usr/include/c++/6/complex ****     inline complex<_Tp>
 823:/usr/include/c++/6/complex ****     sin(const complex<_Tp>& __z) { return __complex_sin(__z.__rep()); }
 824:/usr/include/c++/6/complex **** #else
 825:/usr/include/c++/6/complex ****   template<typename _Tp>
 826:/usr/include/c++/6/complex ****     inline complex<_Tp>
 827:/usr/include/c++/6/complex ****     sin(const complex<_Tp>& __z) { return __complex_sin(__z); }
 828:/usr/include/c++/6/complex **** #endif
 829:/usr/include/c++/6/complex **** 
 830:/usr/include/c++/6/complex ****   // 26.2.8/11 sinh(__z): Returns the hyperbolic sine of __z.
 831:/usr/include/c++/6/complex ****   template<typename _Tp>
 832:/usr/include/c++/6/complex ****     inline complex<_Tp>
 833:/usr/include/c++/6/complex ****     __complex_sinh(const complex<_Tp>& __z)
 834:/usr/include/c++/6/complex ****     {
 835:/usr/include/c++/6/complex ****       const _Tp __x = __z.real();
 836:/usr/include/c++/6/complex ****       const _Tp  __y = __z.imag();
 837:/usr/include/c++/6/complex ****       return complex<_Tp>(sinh(__x) * cos(__y), cosh(__x) * sin(__y));
 838:/usr/include/c++/6/complex ****     }
 839:/usr/include/c++/6/complex **** 
 840:/usr/include/c++/6/complex **** #if _GLIBCXX_USE_C99_COMPLEX
 841:/usr/include/c++/6/complex ****   inline __complex__ float
 842:/usr/include/c++/6/complex ****   __complex_sinh(__complex__ float __z) { return __builtin_csinhf(__z); }      
 843:/usr/include/c++/6/complex **** 
 844:/usr/include/c++/6/complex ****   inline __complex__ double
 845:/usr/include/c++/6/complex ****   __complex_sinh(__complex__ double __z) { return __builtin_csinh(__z); }      
 846:/usr/include/c++/6/complex **** 
 847:/usr/include/c++/6/complex ****   inline __complex__ long double
GAS LISTING /tmp/ccvmoMuv.s 			page 607


 848:/usr/include/c++/6/complex ****   __complex_sinh(const __complex__ long double& __z)
 849:/usr/include/c++/6/complex ****   { return __builtin_csinhl(__z); }      
 850:/usr/include/c++/6/complex **** 
 851:/usr/include/c++/6/complex ****   template<typename _Tp>
 852:/usr/include/c++/6/complex ****     inline complex<_Tp>
 853:/usr/include/c++/6/complex ****     sinh(const complex<_Tp>& __z) { return __complex_sinh(__z.__rep()); }
 854:/usr/include/c++/6/complex **** #else
 855:/usr/include/c++/6/complex ****   template<typename _Tp>
 856:/usr/include/c++/6/complex ****     inline complex<_Tp>
 857:/usr/include/c++/6/complex ****     sinh(const complex<_Tp>& __z) { return __complex_sinh(__z); }
 858:/usr/include/c++/6/complex **** #endif
 859:/usr/include/c++/6/complex **** 
 860:/usr/include/c++/6/complex ****   // 26.2.8/13 sqrt(__z): Returns the complex square root of __z.
 861:/usr/include/c++/6/complex ****   //                     The branch cut is on the negative axis.
 862:/usr/include/c++/6/complex ****   template<typename _Tp>
 863:/usr/include/c++/6/complex ****     complex<_Tp>
 864:/usr/include/c++/6/complex ****     __complex_sqrt(const complex<_Tp>& __z)
 865:/usr/include/c++/6/complex ****     {
 866:/usr/include/c++/6/complex ****       _Tp __x = __z.real();
 867:/usr/include/c++/6/complex ****       _Tp __y = __z.imag();
 868:/usr/include/c++/6/complex **** 
 869:/usr/include/c++/6/complex ****       if (__x == _Tp())
 870:/usr/include/c++/6/complex ****         {
 871:/usr/include/c++/6/complex ****           _Tp __t = sqrt(abs(__y) / 2);
 872:/usr/include/c++/6/complex ****           return complex<_Tp>(__t, __y < _Tp() ? -__t : __t);
 873:/usr/include/c++/6/complex ****         }
 874:/usr/include/c++/6/complex ****       else
 875:/usr/include/c++/6/complex ****         {
 876:/usr/include/c++/6/complex ****           _Tp __t = sqrt(2 * (std::abs(__z) + abs(__x)));
 877:/usr/include/c++/6/complex ****           _Tp __u = __t / 2;
 878:/usr/include/c++/6/complex ****           return __x > _Tp()
 879:/usr/include/c++/6/complex ****             ? complex<_Tp>(__u, __y / __t)
 880:/usr/include/c++/6/complex ****             : complex<_Tp>(abs(__y) / __t, __y < _Tp() ? -__u : __u);
 881:/usr/include/c++/6/complex ****         }
 882:/usr/include/c++/6/complex ****     }
 883:/usr/include/c++/6/complex **** 
 884:/usr/include/c++/6/complex **** #if _GLIBCXX_USE_C99_COMPLEX
 885:/usr/include/c++/6/complex ****   inline __complex__ float
 886:/usr/include/c++/6/complex ****   __complex_sqrt(__complex__ float __z) { return __builtin_csqrtf(__z); }
 887:/usr/include/c++/6/complex **** 
 888:/usr/include/c++/6/complex ****   inline __complex__ double
 889:/usr/include/c++/6/complex ****   __complex_sqrt(__complex__ double __z) { return __builtin_csqrt(__z); }
 890:/usr/include/c++/6/complex **** 
 891:/usr/include/c++/6/complex ****   inline __complex__ long double
 892:/usr/include/c++/6/complex ****   __complex_sqrt(const __complex__ long double& __z)
 893:/usr/include/c++/6/complex ****   { return __builtin_csqrtl(__z); }
 894:/usr/include/c++/6/complex **** 
 895:/usr/include/c++/6/complex ****   template<typename _Tp>
 896:/usr/include/c++/6/complex ****     inline complex<_Tp>
 897:/usr/include/c++/6/complex ****     sqrt(const complex<_Tp>& __z) { return __complex_sqrt(__z.__rep()); }
 898:/usr/include/c++/6/complex **** #else
 899:/usr/include/c++/6/complex ****   template<typename _Tp>
 900:/usr/include/c++/6/complex ****     inline complex<_Tp>
 901:/usr/include/c++/6/complex ****     sqrt(const complex<_Tp>& __z) { return __complex_sqrt(__z); }
 902:/usr/include/c++/6/complex **** #endif
 903:/usr/include/c++/6/complex **** 
 904:/usr/include/c++/6/complex ****   // 26.2.8/14 tan(__z):  Return the complex tangent of __z.
GAS LISTING /tmp/ccvmoMuv.s 			page 608


 905:/usr/include/c++/6/complex ****   
 906:/usr/include/c++/6/complex ****   template<typename _Tp>
 907:/usr/include/c++/6/complex ****     inline complex<_Tp>
 908:/usr/include/c++/6/complex ****     __complex_tan(const complex<_Tp>& __z)
 909:/usr/include/c++/6/complex ****     { return std::sin(__z) / std::cos(__z); }
 910:/usr/include/c++/6/complex **** 
 911:/usr/include/c++/6/complex **** #if _GLIBCXX_USE_C99_COMPLEX
 912:/usr/include/c++/6/complex ****   inline __complex__ float
 913:/usr/include/c++/6/complex ****   __complex_tan(__complex__ float __z) { return __builtin_ctanf(__z); }
 914:/usr/include/c++/6/complex **** 
 915:/usr/include/c++/6/complex ****   inline __complex__ double
 916:/usr/include/c++/6/complex ****   __complex_tan(__complex__ double __z) { return __builtin_ctan(__z); }
 917:/usr/include/c++/6/complex **** 
 918:/usr/include/c++/6/complex ****   inline __complex__ long double
 919:/usr/include/c++/6/complex ****   __complex_tan(const __complex__ long double& __z)
 920:/usr/include/c++/6/complex ****   { return __builtin_ctanl(__z); }
 921:/usr/include/c++/6/complex **** 
 922:/usr/include/c++/6/complex ****   template<typename _Tp>
 923:/usr/include/c++/6/complex ****     inline complex<_Tp>
 924:/usr/include/c++/6/complex ****     tan(const complex<_Tp>& __z) { return __complex_tan(__z.__rep()); }
 925:/usr/include/c++/6/complex **** #else
 926:/usr/include/c++/6/complex ****   template<typename _Tp>
 927:/usr/include/c++/6/complex ****     inline complex<_Tp>
 928:/usr/include/c++/6/complex ****     tan(const complex<_Tp>& __z) { return __complex_tan(__z); }
 929:/usr/include/c++/6/complex **** #endif
 930:/usr/include/c++/6/complex **** 
 931:/usr/include/c++/6/complex **** 
 932:/usr/include/c++/6/complex ****   // 26.2.8/15 tanh(__z):  Returns the hyperbolic tangent of __z.
 933:/usr/include/c++/6/complex ****   
 934:/usr/include/c++/6/complex ****   template<typename _Tp>
 935:/usr/include/c++/6/complex ****     inline complex<_Tp>
 936:/usr/include/c++/6/complex ****     __complex_tanh(const complex<_Tp>& __z)
 937:/usr/include/c++/6/complex ****     { return std::sinh(__z) / std::cosh(__z); }
 938:/usr/include/c++/6/complex **** 
 939:/usr/include/c++/6/complex **** #if _GLIBCXX_USE_C99_COMPLEX
 940:/usr/include/c++/6/complex ****   inline __complex__ float
 941:/usr/include/c++/6/complex ****   __complex_tanh(__complex__ float __z) { return __builtin_ctanhf(__z); }
 942:/usr/include/c++/6/complex **** 
 943:/usr/include/c++/6/complex ****   inline __complex__ double
 944:/usr/include/c++/6/complex ****   __complex_tanh(__complex__ double __z) { return __builtin_ctanh(__z); }
 945:/usr/include/c++/6/complex **** 
 946:/usr/include/c++/6/complex ****   inline __complex__ long double
 947:/usr/include/c++/6/complex ****   __complex_tanh(const __complex__ long double& __z)
 948:/usr/include/c++/6/complex ****   { return __builtin_ctanhl(__z); }
 949:/usr/include/c++/6/complex **** 
 950:/usr/include/c++/6/complex ****   template<typename _Tp>
 951:/usr/include/c++/6/complex ****     inline complex<_Tp>
 952:/usr/include/c++/6/complex ****     tanh(const complex<_Tp>& __z) { return __complex_tanh(__z.__rep()); }
 953:/usr/include/c++/6/complex **** #else
 954:/usr/include/c++/6/complex ****   template<typename _Tp>
 955:/usr/include/c++/6/complex ****     inline complex<_Tp>
 956:/usr/include/c++/6/complex ****     tanh(const complex<_Tp>& __z) { return __complex_tanh(__z); }
 957:/usr/include/c++/6/complex **** #endif
 958:/usr/include/c++/6/complex **** 
 959:/usr/include/c++/6/complex **** 
 960:/usr/include/c++/6/complex ****   // 26.2.8/9  pow(__x, __y): Returns the complex power base of __x
 961:/usr/include/c++/6/complex ****   //                          raised to the __y-th power.  The branch
GAS LISTING /tmp/ccvmoMuv.s 			page 609


 962:/usr/include/c++/6/complex ****   //                          cut is on the negative axis.
 963:/usr/include/c++/6/complex ****   template<typename _Tp>
 964:/usr/include/c++/6/complex ****     complex<_Tp>
 965:/usr/include/c++/6/complex ****     __complex_pow_unsigned(complex<_Tp> __x, unsigned __n)
 966:/usr/include/c++/6/complex ****     {
 967:/usr/include/c++/6/complex ****       complex<_Tp> __y = __n % 2 ? __x : complex<_Tp>(1);
 968:/usr/include/c++/6/complex **** 
 969:/usr/include/c++/6/complex ****       while (__n >>= 1)
 970:/usr/include/c++/6/complex ****         {
 971:/usr/include/c++/6/complex ****           __x *= __x;
 972:/usr/include/c++/6/complex ****           if (__n % 2)
 973:/usr/include/c++/6/complex ****             __y *= __x;
 974:/usr/include/c++/6/complex ****         }
 975:/usr/include/c++/6/complex **** 
 976:/usr/include/c++/6/complex ****       return __y;
 977:/usr/include/c++/6/complex ****     }
 978:/usr/include/c++/6/complex **** 
 979:/usr/include/c++/6/complex ****   // In C++11 mode we used to implement the resolution of
 980:/usr/include/c++/6/complex ****   // DR 844. complex pow return type is ambiguous.
 981:/usr/include/c++/6/complex ****   // thus the following overload was disabled in that mode.  However, doing
 982:/usr/include/c++/6/complex ****   // that causes all sorts of issues, see, for example:
 983:/usr/include/c++/6/complex ****   //   http://gcc.gnu.org/ml/libstdc++/2013-01/msg00058.html
 984:/usr/include/c++/6/complex ****   // and also PR57974.
 985:/usr/include/c++/6/complex ****   template<typename _Tp>
 986:/usr/include/c++/6/complex ****     inline complex<_Tp>
 987:/usr/include/c++/6/complex ****     pow(const complex<_Tp>& __z, int __n)
 988:/usr/include/c++/6/complex ****     {
 989:/usr/include/c++/6/complex ****       return __n < 0
 990:/usr/include/c++/6/complex **** 	? complex<_Tp>(1) / std::__complex_pow_unsigned(__z, -(unsigned)__n)
 991:/usr/include/c++/6/complex ****         : std::__complex_pow_unsigned(__z, __n);
 992:/usr/include/c++/6/complex ****     }
 993:/usr/include/c++/6/complex **** 
 994:/usr/include/c++/6/complex ****   template<typename _Tp>
 995:/usr/include/c++/6/complex ****     complex<_Tp>
 996:/usr/include/c++/6/complex ****     pow(const complex<_Tp>& __x, const _Tp& __y)
 997:/usr/include/c++/6/complex ****     {
 998:/usr/include/c++/6/complex **** #if ! _GLIBCXX_USE_C99_COMPLEX
 999:/usr/include/c++/6/complex ****       if (__x == _Tp())
1000:/usr/include/c++/6/complex **** 	return _Tp();
1001:/usr/include/c++/6/complex **** #endif
1002:/usr/include/c++/6/complex ****       if (__x.imag() == _Tp() && __x.real() > _Tp())
1003:/usr/include/c++/6/complex ****         return pow(__x.real(), __y);
1004:/usr/include/c++/6/complex **** 
1005:/usr/include/c++/6/complex ****       complex<_Tp> __t = std::log(__x);
1006:/usr/include/c++/6/complex ****       return std::polar<_Tp>(exp(__y * __t.real()), __y * __t.imag());
1007:/usr/include/c++/6/complex ****     }
1008:/usr/include/c++/6/complex **** 
1009:/usr/include/c++/6/complex ****   template<typename _Tp>
1010:/usr/include/c++/6/complex ****     inline complex<_Tp>
1011:/usr/include/c++/6/complex ****     __complex_pow(const complex<_Tp>& __x, const complex<_Tp>& __y)
1012:/usr/include/c++/6/complex ****     { return __x == _Tp() ? _Tp() : std::exp(__y * std::log(__x)); }
1013:/usr/include/c++/6/complex **** 
1014:/usr/include/c++/6/complex **** #if _GLIBCXX_USE_C99_COMPLEX
1015:/usr/include/c++/6/complex ****   inline __complex__ float
1016:/usr/include/c++/6/complex ****   __complex_pow(__complex__ float __x, __complex__ float __y)
1017:/usr/include/c++/6/complex ****   { return __builtin_cpowf(__x, __y); }
1018:/usr/include/c++/6/complex **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 610


1019:/usr/include/c++/6/complex ****   inline __complex__ double
1020:/usr/include/c++/6/complex ****   __complex_pow(__complex__ double __x, __complex__ double __y)
1021:/usr/include/c++/6/complex ****   { return __builtin_cpow(__x, __y); }
1022:/usr/include/c++/6/complex **** 
1023:/usr/include/c++/6/complex ****   inline __complex__ long double
1024:/usr/include/c++/6/complex ****   __complex_pow(const __complex__ long double& __x,
1025:/usr/include/c++/6/complex **** 		const __complex__ long double& __y)
1026:/usr/include/c++/6/complex ****   { return __builtin_cpowl(__x, __y); }
1027:/usr/include/c++/6/complex **** 
1028:/usr/include/c++/6/complex ****   template<typename _Tp>
1029:/usr/include/c++/6/complex ****     inline complex<_Tp>
1030:/usr/include/c++/6/complex ****     pow(const complex<_Tp>& __x, const complex<_Tp>& __y)
1031:/usr/include/c++/6/complex ****     { return __complex_pow(__x.__rep(), __y.__rep()); }
1032:/usr/include/c++/6/complex **** #else
1033:/usr/include/c++/6/complex ****   template<typename _Tp>
1034:/usr/include/c++/6/complex ****     inline complex<_Tp>
1035:/usr/include/c++/6/complex ****     pow(const complex<_Tp>& __x, const complex<_Tp>& __y)
1036:/usr/include/c++/6/complex ****     { return __complex_pow(__x, __y); }
1037:/usr/include/c++/6/complex **** #endif
1038:/usr/include/c++/6/complex **** 
1039:/usr/include/c++/6/complex ****   template<typename _Tp>
1040:/usr/include/c++/6/complex ****     inline complex<_Tp>
1041:/usr/include/c++/6/complex ****     pow(const _Tp& __x, const complex<_Tp>& __y)
1042:/usr/include/c++/6/complex ****     {
1043:/usr/include/c++/6/complex ****       return __x > _Tp() ? std::polar<_Tp>(pow(__x, __y.real()),
1044:/usr/include/c++/6/complex **** 					   __y.imag() * log(__x))
1045:/usr/include/c++/6/complex **** 	                 : std::pow(complex<_Tp>(__x), __y);
1046:/usr/include/c++/6/complex ****     }
1047:/usr/include/c++/6/complex **** 
1048:/usr/include/c++/6/complex ****   /// 26.2.3  complex specializations
1049:/usr/include/c++/6/complex ****   /// complex<float> specialization
1050:/usr/include/c++/6/complex ****   template<>
1051:/usr/include/c++/6/complex ****     struct complex<float>
1052:/usr/include/c++/6/complex ****     {
1053:/usr/include/c++/6/complex ****       typedef float value_type;
1054:/usr/include/c++/6/complex ****       typedef __complex__ float _ComplexT;
1055:/usr/include/c++/6/complex **** 
1056:/usr/include/c++/6/complex ****       _GLIBCXX_CONSTEXPR complex(_ComplexT __z) : _M_value(__z) { }
1057:/usr/include/c++/6/complex **** 
1058:/usr/include/c++/6/complex ****       _GLIBCXX_CONSTEXPR complex(float __r = 0.0f, float __i = 0.0f)
1059:/usr/include/c++/6/complex **** #if __cplusplus >= 201103L
1060:/usr/include/c++/6/complex ****       : _M_value{ __r, __i } { }
1061:/usr/include/c++/6/complex **** #else
1062:/usr/include/c++/6/complex ****       {
1063:/usr/include/c++/6/complex **** 	__real__ _M_value = __r;
1064:/usr/include/c++/6/complex **** 	__imag__ _M_value = __i;
1065:/usr/include/c++/6/complex ****       }
1066:/usr/include/c++/6/complex **** #endif
1067:/usr/include/c++/6/complex **** 
1068:/usr/include/c++/6/complex ****       explicit _GLIBCXX_CONSTEXPR complex(const complex<double>&);
1069:/usr/include/c++/6/complex ****       explicit _GLIBCXX_CONSTEXPR complex(const complex<long double>&);	
1070:/usr/include/c++/6/complex **** 
1071:/usr/include/c++/6/complex **** #if __cplusplus >= 201103L
1072:/usr/include/c++/6/complex ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1073:/usr/include/c++/6/complex ****       // DR 387. std::complex over-encapsulated.
1074:/usr/include/c++/6/complex ****       __attribute ((__abi_tag__ ("cxx11")))
1075:/usr/include/c++/6/complex ****       constexpr float 
GAS LISTING /tmp/ccvmoMuv.s 			page 611


1076:/usr/include/c++/6/complex ****       real() const { return __real__ _M_value; }
1077:/usr/include/c++/6/complex **** 
1078:/usr/include/c++/6/complex ****       __attribute ((__abi_tag__ ("cxx11")))
1079:/usr/include/c++/6/complex ****       constexpr float 
1080:/usr/include/c++/6/complex ****       imag() const { return __imag__ _M_value; }
1081:/usr/include/c++/6/complex **** #else
1082:/usr/include/c++/6/complex ****       float& 
1083:/usr/include/c++/6/complex ****       real() { return __real__ _M_value; }
1084:/usr/include/c++/6/complex **** 
1085:/usr/include/c++/6/complex ****       const float& 
1086:/usr/include/c++/6/complex ****       real() const { return __real__ _M_value; }      
1087:/usr/include/c++/6/complex **** 
1088:/usr/include/c++/6/complex ****       float& 
1089:/usr/include/c++/6/complex ****       imag() { return __imag__ _M_value; }
1090:/usr/include/c++/6/complex **** 
1091:/usr/include/c++/6/complex ****       const float& 
1092:/usr/include/c++/6/complex ****       imag() const { return __imag__ _M_value; }
1093:/usr/include/c++/6/complex **** #endif
1094:/usr/include/c++/6/complex **** 
1095:/usr/include/c++/6/complex ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1096:/usr/include/c++/6/complex ****       // DR 387. std::complex over-encapsulated.
1097:/usr/include/c++/6/complex ****       void 
1098:/usr/include/c++/6/complex ****       real(float __val) { __real__ _M_value = __val; }
1099:/usr/include/c++/6/complex **** 
1100:/usr/include/c++/6/complex ****       void 
1101:/usr/include/c++/6/complex ****       imag(float __val) { __imag__ _M_value = __val; }
1102:/usr/include/c++/6/complex **** 
1103:/usr/include/c++/6/complex ****       complex&
1104:/usr/include/c++/6/complex ****       operator=(float __f)
1105:/usr/include/c++/6/complex ****       {
1106:/usr/include/c++/6/complex **** 	_M_value = __f;
1107:/usr/include/c++/6/complex **** 	return *this;
1108:/usr/include/c++/6/complex ****       }
1109:/usr/include/c++/6/complex **** 
1110:/usr/include/c++/6/complex ****       complex&
1111:/usr/include/c++/6/complex ****       operator+=(float __f)
1112:/usr/include/c++/6/complex ****       {
1113:/usr/include/c++/6/complex **** 	_M_value += __f;
1114:/usr/include/c++/6/complex **** 	return *this;
1115:/usr/include/c++/6/complex ****       }
1116:/usr/include/c++/6/complex **** 
1117:/usr/include/c++/6/complex ****       complex&
1118:/usr/include/c++/6/complex ****       operator-=(float __f)
1119:/usr/include/c++/6/complex ****       {
1120:/usr/include/c++/6/complex **** 	_M_value -= __f;
1121:/usr/include/c++/6/complex **** 	return *this;
1122:/usr/include/c++/6/complex ****       }
1123:/usr/include/c++/6/complex **** 
1124:/usr/include/c++/6/complex ****       complex&
1125:/usr/include/c++/6/complex ****       operator*=(float __f)
1126:/usr/include/c++/6/complex ****       {
1127:/usr/include/c++/6/complex **** 	_M_value *= __f;
1128:/usr/include/c++/6/complex **** 	return *this;
1129:/usr/include/c++/6/complex ****       }
1130:/usr/include/c++/6/complex **** 
1131:/usr/include/c++/6/complex ****       complex&
1132:/usr/include/c++/6/complex ****       operator/=(float __f)
GAS LISTING /tmp/ccvmoMuv.s 			page 612


1133:/usr/include/c++/6/complex ****       {
1134:/usr/include/c++/6/complex **** 	_M_value /= __f;
1135:/usr/include/c++/6/complex **** 	return *this;
1136:/usr/include/c++/6/complex ****       }
1137:/usr/include/c++/6/complex **** 
1138:/usr/include/c++/6/complex ****       // Let the compiler synthesize the copy and assignment
1139:/usr/include/c++/6/complex ****       // operator.  It always does a pretty good job.
1140:/usr/include/c++/6/complex ****       // complex& operator=(const complex&);
1141:/usr/include/c++/6/complex **** 
1142:/usr/include/c++/6/complex ****       template<typename _Tp>
1143:/usr/include/c++/6/complex ****         complex&
1144:/usr/include/c++/6/complex ****         operator=(const complex<_Tp>&  __z)
1145:/usr/include/c++/6/complex **** 	{
1146:/usr/include/c++/6/complex **** 	  __real__ _M_value = __z.real();
1147:/usr/include/c++/6/complex **** 	  __imag__ _M_value = __z.imag();
1148:/usr/include/c++/6/complex **** 	  return *this;
1149:/usr/include/c++/6/complex **** 	}
1150:/usr/include/c++/6/complex **** 
1151:/usr/include/c++/6/complex ****       template<typename _Tp>
1152:/usr/include/c++/6/complex ****         complex&
1153:/usr/include/c++/6/complex ****         operator+=(const complex<_Tp>& __z)
1154:/usr/include/c++/6/complex **** 	{
1155:/usr/include/c++/6/complex **** 	  __real__ _M_value += __z.real();
1156:/usr/include/c++/6/complex **** 	  __imag__ _M_value += __z.imag();
1157:/usr/include/c++/6/complex **** 	  return *this;
1158:/usr/include/c++/6/complex **** 	}
1159:/usr/include/c++/6/complex **** 
1160:/usr/include/c++/6/complex ****       template<class _Tp>
1161:/usr/include/c++/6/complex ****         complex&
1162:/usr/include/c++/6/complex ****         operator-=(const complex<_Tp>& __z)
1163:/usr/include/c++/6/complex **** 	{
1164:/usr/include/c++/6/complex **** 	  __real__ _M_value -= __z.real();
1165:/usr/include/c++/6/complex **** 	  __imag__ _M_value -= __z.imag();
1166:/usr/include/c++/6/complex **** 	  return *this;
1167:/usr/include/c++/6/complex **** 	}
1168:/usr/include/c++/6/complex **** 
1169:/usr/include/c++/6/complex ****       template<class _Tp>
1170:/usr/include/c++/6/complex ****         complex&
1171:/usr/include/c++/6/complex ****         operator*=(const complex<_Tp>& __z)
1172:/usr/include/c++/6/complex **** 	{
1173:/usr/include/c++/6/complex **** 	  _ComplexT __t;
1174:/usr/include/c++/6/complex **** 	  __real__ __t = __z.real();
1175:/usr/include/c++/6/complex **** 	  __imag__ __t = __z.imag();
1176:/usr/include/c++/6/complex **** 	  _M_value *= __t;
 11025              		.loc 42 1176 0
 11026 09b1 F3410F10 		movss	-4(%r13,%rbp,8), %xmm1
 11026      4CEDFC
 11027 09b8 F3410F10 		movss	-8(%r13,%rbp,8), %xmm0
 11027      44EDF8
 11028 09bf F30F105C 		movss	80(%rsp), %xmm3
 11028      2450
 11029 09c5 F30F1054 		movss	84(%rsp), %xmm2
 11029      2454
 11030 09cb E8000000 		call	__mulsc3@PLT
 11030      00
 11031              	.LVL912:
 11032 09d0 660FD644 		movq	%xmm0, 72(%rsp)
GAS LISTING /tmp/ccvmoMuv.s 			page 613


 11032      2448
 11033              	.LBE16546:
 11034              	.LBE16545:
 11035              	.LBE16544:
 11036              	.LBE16543:
 143:costas2_impl.cc ****           phase_wrap();
 11037              		.loc 5 143 0
 11038 09d6 488B03   		movq	(%rbx), %rax
 11039 09d9 4889DF   		movq	%rbx, %rdi
 11040              	.LBB16550:
 11041              	.LBB16549:
 11042              	.LBB16548:
 11043              	.LBB16547:
 11044              		.loc 42 1176 0
 11045 09dc F30F1044 		movss	76(%rsp), %xmm0
 11045      244C
 11046 09e2 F30F104C 		movss	72(%rsp), %xmm1
 11046      2448
 11047              	.LVL913:
 11048              	.LBE16547:
 11049              	.LBE16548:
 11050              	.LBE16549:
 11051              	.LBE16550:
 143:costas2_impl.cc ****           phase_wrap();
 11052              		.loc 5 143 0
 11053 09e8 480378E0 		addq	-32(%rax), %rdi
 138:costas2_impl.cc **** 
 11054              		.loc 5 138 0
 11055 09ec F3410F11 		movss	%xmm1, -8(%r12,%rbp,8)
 11055      4CECF8
 11056              	.LBB16551:
 11057              	.LBB16552:
  39:costas2_impl.h ****        }
 11058              		.loc 4 39 0
 11059 09f3 F30F59C8 		mulss	%xmm0, %xmm1
 11060              	.LBE16552:
 11061              	.LBE16551:
 138:costas2_impl.cc **** 
 11062              		.loc 5 138 0
 11063 09f7 F3410F11 		movss	%xmm0, -4(%r12,%rbp,8)
 11063      44ECFC
 11064              	.LVL914:
 11065              	.LBB16553:
 11066              	.LBB16554:
 11067              		.file 43 "/home/mpiscopo/gnuradio/include/gnuradio/math.h"
   1:/home/mpiscopo/gnuradio/include/gnuradio/math.h **** /* -*- c++ -*- */
   2:/home/mpiscopo/gnuradio/include/gnuradio/math.h **** /*
   3:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****  * Copyright 2003,2005,2008,2013 Free Software Foundation, Inc.
   4:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****  *
   5:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****  * This file is part of GNU Radio
   6:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****  *
   7:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****  * GNU Radio is free software; you can redistribute it and/or modify
   8:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****  * it under the terms of the GNU General Public License as published by
   9:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****  * the Free Software Foundation; either version 3, or (at your option)
  10:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****  * any later version.
  11:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****  *
  12:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****  * GNU Radio is distributed in the hope that it will be useful,
GAS LISTING /tmp/ccvmoMuv.s 			page 614


  13:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****  * GNU General Public License for more details.
  16:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****  *
  17:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****  * You should have received a copy of the GNU General Public License
  18:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****  * along with GNU Radio; see the file COPYING.  If not, write to
  19:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****  * the Free Software Foundation, Inc., 51 Franklin Street,
  20:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****  * Boston, MA 02110-1301, USA.
  21:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****  */
  22:/home/mpiscopo/gnuradio/include/gnuradio/math.h **** 
  23:/home/mpiscopo/gnuradio/include/gnuradio/math.h **** /*
  24:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****  * mathematical odds and ends.
  25:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****  */
  26:/home/mpiscopo/gnuradio/include/gnuradio/math.h **** 
  27:/home/mpiscopo/gnuradio/include/gnuradio/math.h **** #ifndef _GR_MATH_H_
  28:/home/mpiscopo/gnuradio/include/gnuradio/math.h **** #define _GR_MATH_H_
  29:/home/mpiscopo/gnuradio/include/gnuradio/math.h **** 
  30:/home/mpiscopo/gnuradio/include/gnuradio/math.h **** #include <cmath>
  31:/home/mpiscopo/gnuradio/include/gnuradio/math.h **** #include <gnuradio/api.h>
  32:/home/mpiscopo/gnuradio/include/gnuradio/math.h **** #include <gnuradio/gr_complex.h>
  33:/home/mpiscopo/gnuradio/include/gnuradio/math.h **** 
  34:/home/mpiscopo/gnuradio/include/gnuradio/math.h **** namespace gr {
  35:/home/mpiscopo/gnuradio/include/gnuradio/math.h **** 
  36:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****   static inline bool
  37:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****   is_power_of_2(long x)
  38:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****   {
  39:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****     return x != 0 && (x & (x-1)) == 0;
  40:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****   }
  41:/home/mpiscopo/gnuradio/include/gnuradio/math.h **** 
  42:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****   /*!
  43:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****    * \brief Fast arc tangent using table lookup and linear interpolation
  44:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****    * \ingroup misc
  45:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****    *
  46:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****    * \param y component of input vector
  47:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****    * \param x component of input vector
  48:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****    * \returns float angle angle of vector (x, y) in radians
  49:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****    *
  50:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****    * This function calculates the angle of the vector (x,y) based on a
  51:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****    * table lookup and linear interpolation. The table uses a 256 point
  52:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****    * table covering -45 to +45 degrees and uses symetry to determine
  53:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****    * the final angle value in the range of -180 to 180 degrees. Note
  54:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****    * that this function uses the small angle approximation for values
  55:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****    * close to zero. This routine calculates the arc tangent with an
  56:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****    * average error of +/- 0.045 degrees.
  57:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****    */
  58:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****   GR_RUNTIME_API float fast_atan2f(float y, float x);
  59:/home/mpiscopo/gnuradio/include/gnuradio/math.h **** 
  60:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****   static inline float
  61:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****   fast_atan2f(gr_complex z)
  62:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****   {
  63:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****     return fast_atan2f(z.imag(), z.real());
  64:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****   }
  65:/home/mpiscopo/gnuradio/include/gnuradio/math.h **** 
  66:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****   /* This bounds x by +/- clip without a branch */
  67:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****   static inline float
  68:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****   branchless_clip(float x, float clip)
  69:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****   {
GAS LISTING /tmp/ccvmoMuv.s 			page 615


  70:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****     float x1 = fabsf(x+clip);
 11068              		.loc 43 70 0
 11069 09fe F30F1005 		movss	.LC3(%rip), %xmm0
 11069      00000000 
 11070              	.LVL915:
 11071 0a06 F30F58C1 		addss	%xmm1, %xmm0
  71:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****     float x2 = fabsf(x-clip);
 11072              		.loc 43 71 0
 11073 0a0a F30F5C0D 		subss	.LC3(%rip), %xmm1
 11073      00000000 
 11074              	.LVL916:
  70:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****     float x2 = fabsf(x-clip);
 11075              		.loc 43 70 0
 11076 0a12 0F540500 		andps	.LC4(%rip), %xmm0
 11076      000000
 11077              		.loc 43 71 0
 11078 0a19 0F540D00 		andps	.LC4(%rip), %xmm1
 11078      000000
  72:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****     x1 -= x2;
 11079              		.loc 43 72 0
 11080 0a20 F30F5CC1 		subss	%xmm1, %xmm0
  73:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****     return 0.5*x1;
 11081              		.loc 43 73 0
 11082 0a24 F30F5905 		mulss	.LC5(%rip), %xmm0
 11082      00000000 
 11083              	.LVL917:
 11084              	.LBE16554:
 11085              	.LBE16553:
 141:costas2_impl.cc **** 
 11086              		.loc 5 141 0
 11087 0a2c F30F1143 		movss	%xmm0, 12(%rbx)
 11087      0C
 143:costas2_impl.cc ****           phase_wrap();
 11088              		.loc 5 143 0
 11089 0a31 E8000000 		call	_ZN2gr6blocks12control_loop12advance_loopEf@PLT
 11089      00
 11090              	.LVL918:
 144:costas2_impl.cc ****           frequency_limit();
 11091              		.loc 5 144 0
 11092 0a36 488B03   		movq	(%rbx), %rax
 11093 0a39 4889DF   		movq	%rbx, %rdi
 11094 0a3c 480378E0 		addq	-32(%rax), %rdi
 11095 0a40 E8000000 		call	_ZN2gr6blocks12control_loop10phase_wrapEv@PLT
 11095      00
 11096              	.LVL919:
 145:costas2_impl.cc **** 
 11097              		.loc 5 145 0
 11098 0a45 488B03   		movq	(%rbx), %rax
 11099 0a48 4889DF   		movq	%rbx, %rdi
 11100 0a4b 480378E0 		addq	-32(%rax), %rdi
 11101 0a4f E8000000 		call	_ZN2gr6blocks12control_loop15frequency_limitEv@PLT
 11101      00
 11102              	.LVL920:
 147:costas2_impl.cc ****         }
 11103              		.loc 5 147 0 discriminator 2
 11104 0a54 488B0B   		movq	(%rbx), %rcx
 129:costas2_impl.cc ****           if(tags.size() > 0) {
GAS LISTING /tmp/ccvmoMuv.s 			page 616


 11105              		.loc 5 129 0 discriminator 2
 11106 0a57 483B6C24 		cmpq	24(%rsp), %rbp
 11106      18
 147:costas2_impl.cc ****         }
 11107              		.loc 5 147 0 discriminator 2
 11108 0a5c 488B51E0 		movq	-32(%rcx), %rdx
 11109 0a60 F30F1044 		movss	12(%rbx,%rdx), %xmm0
 11109      130C
 11110 0a66 F3410F11 		movss	%xmm0, -4(%r15,%rbp,4)
 11110      44AFFC
 11111              	.LVL921:
 129:costas2_impl.cc ****           if(tags.size() > 0) {
 11112              		.loc 5 129 0 discriminator 2
 11113 0a6d 0F84AD00 		je	.L592
 11113      0000
 11114 0a73 488B7424 		movq	112(%rsp), %rsi
 11114      70
 11115              	.LVL922:
 11116              	.LBB16555:
 11117              	.LBB16556:
 11118              		.loc 23 656 0
 11119 0a78 488B4424 		movq	120(%rsp), %rax
 11119      78
 11120 0a7d 48BFB76D 		movabsq	$7905747460161236407, %rdi
 11120      DBB66DDB 
 11120      B66D
 11121 0a87 4829F0   		subq	%rsi, %rax
 11122 0a8a 48C1F803 		sarq	$3, %rax
 11123 0a8e 480FAFC7 		imulq	%rdi, %rax
 11124              	.LBE16556:
 11125              	.LBE16555:
 130:costas2_impl.cc ****             if(tags[0].offset-nitems_read(0) == (size_t)i) {
 11126              		.loc 5 130 0
 11127 0a92 4885C0   		testq	%rax, %rax
 11128 0a95 0F84F9FE 		je	.L575
 11128      FFFF
 11129              	.LVL923:
 131:costas2_impl.cc ****               d_phase = (float)pmt::to_double(tags[0].value);
 11130              		.loc 5 131 0
 11131 0a9b 4889DF   		movq	%rbx, %rdi
 11132 0a9e 480379E8 		addq	-24(%rcx), %rdi
 11133 0aa2 4C8B36   		movq	(%rsi), %r14
 11134 0aa5 31F6     		xorl	%esi, %esi
 11135 0aa7 E8000000 		call	_ZN2gr5block11nitems_readEj@PLT
 11135      00
 11136              	.LVL924:
 11137 0aac 4929C6   		subq	%rax, %r14
 132:costas2_impl.cc ****               tags.erase(tags.begin());
 11138              		.loc 5 132 0
 11139 0aaf 488B03   		movq	(%rbx), %rax
 131:costas2_impl.cc ****               d_phase = (float)pmt::to_double(tags[0].value);
 11140              		.loc 5 131 0
 11141 0ab2 4939EE   		cmpq	%rbp, %r14
 11142 0ab5 0F85D5FE 		jne	.L666
 11142      FFFF
 132:costas2_impl.cc ****               tags.erase(tags.begin());
 11143              		.loc 5 132 0
GAS LISTING /tmp/ccvmoMuv.s 			page 617


 11144 0abb 4989DE   		movq	%rbx, %r14
 11145 0abe 4C0370E0 		addq	-32(%rax), %r14
 11146 0ac2 488B4424 		movq	112(%rsp), %rax
 11146      70
 11147              	.LVL925:
 11148              	.LBB16557:
 11149              	.LBB16558:
 11150              	.LBB16559:
  90:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 11151              		.loc 34 90 0
 11152 0ac7 488B7810 		movq	16(%rax), %rdi
  92:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 11153              		.loc 34 92 0
 11154 0acb 4885FF   		testq	%rdi, %rdi
  90:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 11155              		.loc 34 90 0
 11156 0ace 48897C24 		movq	%rdi, 96(%rsp)
 11156      60
  92:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 11157              		.loc 34 92 0
 11158 0ad3 7405     		je	.L579
 11159 0ad5 E8000000 		call	_ZN3pmt21intrusive_ptr_add_refEPNS_8pmt_baseE@PLT
 11159      00
 11160              	.LVL926:
 11161              	.LEHE42:
 11162              	.L579:
 11163              	.LBE16559:
 11164              	.LBE16558:
 11165              	.LBE16557:
 132:costas2_impl.cc ****               tags.erase(tags.begin());
 11166              		.loc 5 132 0
 11167 0ada 488B7C24 		movq	48(%rsp), %rdi
 11167      30
 11168              	.LEHB43:
 11169 0adf E8000000 		call	_ZN3pmt9to_doubleEN5boost13intrusive_ptrINS_8pmt_baseEEE@PLT
 11169      00
 11170              	.LVL927:
 11171              	.LEHE43:
 11172 0ae4 660FEFF6 		pxor	%xmm6, %xmm6
 11173              	.LBB16560:
 11174              	.LBB16561:
  97:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 11175              		.loc 34 97 0
 11176 0ae8 488B7C24 		movq	96(%rsp), %rdi
 11176      60
 11177              	.LBE16561:
 11178              	.LBE16560:
 132:costas2_impl.cc ****               tags.erase(tags.begin());
 11179              		.loc 5 132 0
 11180 0aed F20F5AF0 		cvtsd2ss	%xmm0, %xmm6
 11181              	.LBB16564:
 11182              	.LBB16562:
  97:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 11183              		.loc 34 97 0
 11184 0af1 4885FF   		testq	%rdi, %rdi
 11185              	.LBE16562:
 11186              	.LBE16564:
GAS LISTING /tmp/ccvmoMuv.s 			page 618


 132:costas2_impl.cc ****               tags.erase(tags.begin());
 11187              		.loc 5 132 0
 11188 0af4 F3410F11 		movss	%xmm6, 8(%r14)
 11188      7608
 11189              	.LVL928:
 11190              	.LBB16565:
 11191              	.LBB16563:
  97:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 11192              		.loc 34 97 0
 11193 0afa 7405     		je	.L580
 11194 0afc E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 11194      00
 11195              	.LVL929:
 11196              	.L580:
 11197              	.LBE16563:
 11198              	.LBE16565:
 11199              	.LBB16566:
 11200              	.LBB16567:
 657:/usr/include/c++/6/bits/stl_vector.h **** 
 658:/usr/include/c++/6/bits/stl_vector.h ****       /**  Returns the size() of the largest possible %vector.  */
 659:/usr/include/c++/6/bits/stl_vector.h ****       size_type
 660:/usr/include/c++/6/bits/stl_vector.h ****       max_size() const _GLIBCXX_NOEXCEPT
 661:/usr/include/c++/6/bits/stl_vector.h ****       { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 662:/usr/include/c++/6/bits/stl_vector.h **** 
 663:/usr/include/c++/6/bits/stl_vector.h **** #if __cplusplus >= 201103L
 664:/usr/include/c++/6/bits/stl_vector.h ****       /**
 665:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 666:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 667:/usr/include/c++/6/bits/stl_vector.h ****        *
 668:/usr/include/c++/6/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 669:/usr/include/c++/6/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 670:/usr/include/c++/6/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 671:/usr/include/c++/6/bits/stl_vector.h ****        *  default constructed elements are appended.
 672:/usr/include/c++/6/bits/stl_vector.h ****        */
 673:/usr/include/c++/6/bits/stl_vector.h ****       void
 674:/usr/include/c++/6/bits/stl_vector.h ****       resize(size_type __new_size)
 675:/usr/include/c++/6/bits/stl_vector.h ****       {
 676:/usr/include/c++/6/bits/stl_vector.h **** 	if (__new_size > size())
 677:/usr/include/c++/6/bits/stl_vector.h **** 	  _M_default_append(__new_size - size());
 678:/usr/include/c++/6/bits/stl_vector.h **** 	else if (__new_size < size())
 679:/usr/include/c++/6/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 680:/usr/include/c++/6/bits/stl_vector.h ****       }
 681:/usr/include/c++/6/bits/stl_vector.h **** 
 682:/usr/include/c++/6/bits/stl_vector.h ****       /**
 683:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 684:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 685:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 686:/usr/include/c++/6/bits/stl_vector.h ****        *
 687:/usr/include/c++/6/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 688:/usr/include/c++/6/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 689:/usr/include/c++/6/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 690:/usr/include/c++/6/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 691:/usr/include/c++/6/bits/stl_vector.h ****        *  given data.
 692:/usr/include/c++/6/bits/stl_vector.h ****        */
 693:/usr/include/c++/6/bits/stl_vector.h ****       void
 694:/usr/include/c++/6/bits/stl_vector.h ****       resize(size_type __new_size, const value_type& __x)
 695:/usr/include/c++/6/bits/stl_vector.h ****       {
GAS LISTING /tmp/ccvmoMuv.s 			page 619


 696:/usr/include/c++/6/bits/stl_vector.h **** 	if (__new_size > size())
 697:/usr/include/c++/6/bits/stl_vector.h **** 	  insert(end(), __new_size - size(), __x);
 698:/usr/include/c++/6/bits/stl_vector.h **** 	else if (__new_size < size())
 699:/usr/include/c++/6/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 700:/usr/include/c++/6/bits/stl_vector.h ****       }
 701:/usr/include/c++/6/bits/stl_vector.h **** #else
 702:/usr/include/c++/6/bits/stl_vector.h ****       /**
 703:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 704:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 705:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 706:/usr/include/c++/6/bits/stl_vector.h ****        *
 707:/usr/include/c++/6/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 708:/usr/include/c++/6/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 709:/usr/include/c++/6/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 710:/usr/include/c++/6/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 711:/usr/include/c++/6/bits/stl_vector.h ****        *  given data.
 712:/usr/include/c++/6/bits/stl_vector.h ****        */
 713:/usr/include/c++/6/bits/stl_vector.h ****       void
 714:/usr/include/c++/6/bits/stl_vector.h ****       resize(size_type __new_size, value_type __x = value_type())
 715:/usr/include/c++/6/bits/stl_vector.h ****       {
 716:/usr/include/c++/6/bits/stl_vector.h **** 	if (__new_size > size())
 717:/usr/include/c++/6/bits/stl_vector.h **** 	  insert(end(), __new_size - size(), __x);
 718:/usr/include/c++/6/bits/stl_vector.h **** 	else if (__new_size < size())
 719:/usr/include/c++/6/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 720:/usr/include/c++/6/bits/stl_vector.h ****       }
 721:/usr/include/c++/6/bits/stl_vector.h **** #endif
 722:/usr/include/c++/6/bits/stl_vector.h **** 
 723:/usr/include/c++/6/bits/stl_vector.h **** #if __cplusplus >= 201103L
 724:/usr/include/c++/6/bits/stl_vector.h ****       /**  A non-binding request to reduce capacity() to size().  */
 725:/usr/include/c++/6/bits/stl_vector.h ****       void
 726:/usr/include/c++/6/bits/stl_vector.h ****       shrink_to_fit()
 727:/usr/include/c++/6/bits/stl_vector.h ****       { _M_shrink_to_fit(); }
 728:/usr/include/c++/6/bits/stl_vector.h **** #endif
 729:/usr/include/c++/6/bits/stl_vector.h **** 
 730:/usr/include/c++/6/bits/stl_vector.h ****       /**
 731:/usr/include/c++/6/bits/stl_vector.h ****        *  Returns the total number of elements that the %vector can
 732:/usr/include/c++/6/bits/stl_vector.h ****        *  hold before needing to allocate more memory.
 733:/usr/include/c++/6/bits/stl_vector.h ****        */
 734:/usr/include/c++/6/bits/stl_vector.h ****       size_type
 735:/usr/include/c++/6/bits/stl_vector.h ****       capacity() const _GLIBCXX_NOEXCEPT
 736:/usr/include/c++/6/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
 737:/usr/include/c++/6/bits/stl_vector.h **** 			 - this->_M_impl._M_start); }
 738:/usr/include/c++/6/bits/stl_vector.h **** 
 739:/usr/include/c++/6/bits/stl_vector.h ****       /**
 740:/usr/include/c++/6/bits/stl_vector.h ****        *  Returns true if the %vector is empty.  (Thus begin() would
 741:/usr/include/c++/6/bits/stl_vector.h ****        *  equal end().)
 742:/usr/include/c++/6/bits/stl_vector.h ****        */
 743:/usr/include/c++/6/bits/stl_vector.h ****       bool
 744:/usr/include/c++/6/bits/stl_vector.h ****       empty() const _GLIBCXX_NOEXCEPT
 745:/usr/include/c++/6/bits/stl_vector.h ****       { return begin() == end(); }
 746:/usr/include/c++/6/bits/stl_vector.h **** 
 747:/usr/include/c++/6/bits/stl_vector.h ****       /**
 748:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
 749:/usr/include/c++/6/bits/stl_vector.h ****        *          elements.
 750:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __n  Number of elements required.
 751:/usr/include/c++/6/bits/stl_vector.h ****        *  @throw  std::length_error  If @a n exceeds @c max_size().
 752:/usr/include/c++/6/bits/stl_vector.h ****        *
GAS LISTING /tmp/ccvmoMuv.s 			page 620


 753:/usr/include/c++/6/bits/stl_vector.h ****        *  This function attempts to reserve enough memory for the
 754:/usr/include/c++/6/bits/stl_vector.h ****        *  %vector to hold the specified number of elements.  If the
 755:/usr/include/c++/6/bits/stl_vector.h ****        *  number requested is more than max_size(), length_error is
 756:/usr/include/c++/6/bits/stl_vector.h ****        *  thrown.
 757:/usr/include/c++/6/bits/stl_vector.h ****        *
 758:/usr/include/c++/6/bits/stl_vector.h ****        *  The advantage of this function is that if optimal code is a
 759:/usr/include/c++/6/bits/stl_vector.h ****        *  necessity and the user can determine the number of elements
 760:/usr/include/c++/6/bits/stl_vector.h ****        *  that will be required, the user can reserve the memory in
 761:/usr/include/c++/6/bits/stl_vector.h ****        *  %advance, and thus prevent a possible reallocation of memory
 762:/usr/include/c++/6/bits/stl_vector.h ****        *  and copying of %vector data.
 763:/usr/include/c++/6/bits/stl_vector.h ****        */
 764:/usr/include/c++/6/bits/stl_vector.h ****       void
 765:/usr/include/c++/6/bits/stl_vector.h ****       reserve(size_type __n);
 766:/usr/include/c++/6/bits/stl_vector.h **** 
 767:/usr/include/c++/6/bits/stl_vector.h ****       // element access
 768:/usr/include/c++/6/bits/stl_vector.h ****       /**
 769:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
 770:/usr/include/c++/6/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 771:/usr/include/c++/6/bits/stl_vector.h ****        *  accessed.
 772:/usr/include/c++/6/bits/stl_vector.h ****        *  @return  Read/write reference to data.
 773:/usr/include/c++/6/bits/stl_vector.h ****        *
 774:/usr/include/c++/6/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
 775:/usr/include/c++/6/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
 776:/usr/include/c++/6/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
 777:/usr/include/c++/6/bits/stl_vector.h ****        *  see at().)
 778:/usr/include/c++/6/bits/stl_vector.h ****        */
 779:/usr/include/c++/6/bits/stl_vector.h ****       reference
 780:/usr/include/c++/6/bits/stl_vector.h ****       operator[](size_type __n) _GLIBCXX_NOEXCEPT
 781:/usr/include/c++/6/bits/stl_vector.h ****       { return *(this->_M_impl._M_start + __n); }
 782:/usr/include/c++/6/bits/stl_vector.h **** 
 783:/usr/include/c++/6/bits/stl_vector.h ****       /**
 784:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
 785:/usr/include/c++/6/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 786:/usr/include/c++/6/bits/stl_vector.h ****        *  accessed.
 787:/usr/include/c++/6/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
 788:/usr/include/c++/6/bits/stl_vector.h ****        *
 789:/usr/include/c++/6/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
 790:/usr/include/c++/6/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
 791:/usr/include/c++/6/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
 792:/usr/include/c++/6/bits/stl_vector.h ****        *  see at().)
 793:/usr/include/c++/6/bits/stl_vector.h ****        */
 794:/usr/include/c++/6/bits/stl_vector.h ****       const_reference
 795:/usr/include/c++/6/bits/stl_vector.h ****       operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 796:/usr/include/c++/6/bits/stl_vector.h ****       { return *(this->_M_impl._M_start + __n); }
 797:/usr/include/c++/6/bits/stl_vector.h **** 
 798:/usr/include/c++/6/bits/stl_vector.h ****     protected:
 799:/usr/include/c++/6/bits/stl_vector.h ****       /// Safety check used only from at().
 800:/usr/include/c++/6/bits/stl_vector.h ****       void
 801:/usr/include/c++/6/bits/stl_vector.h ****       _M_range_check(size_type __n) const
 802:/usr/include/c++/6/bits/stl_vector.h ****       {
 803:/usr/include/c++/6/bits/stl_vector.h **** 	if (__n >= this->size())
 804:/usr/include/c++/6/bits/stl_vector.h **** 	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 805:/usr/include/c++/6/bits/stl_vector.h **** 				       "(which is %zu) >= this->size() "
 806:/usr/include/c++/6/bits/stl_vector.h **** 				       "(which is %zu)"),
 807:/usr/include/c++/6/bits/stl_vector.h **** 				   __n, this->size());
 808:/usr/include/c++/6/bits/stl_vector.h ****       }
 809:/usr/include/c++/6/bits/stl_vector.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 621


 810:/usr/include/c++/6/bits/stl_vector.h ****     public:
 811:/usr/include/c++/6/bits/stl_vector.h ****       /**
 812:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
 813:/usr/include/c++/6/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 814:/usr/include/c++/6/bits/stl_vector.h ****        *  accessed.
 815:/usr/include/c++/6/bits/stl_vector.h ****        *  @return  Read/write reference to data.
 816:/usr/include/c++/6/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
 817:/usr/include/c++/6/bits/stl_vector.h ****        *
 818:/usr/include/c++/6/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
 819:/usr/include/c++/6/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
 820:/usr/include/c++/6/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
 821:/usr/include/c++/6/bits/stl_vector.h ****        */
 822:/usr/include/c++/6/bits/stl_vector.h ****       reference
 823:/usr/include/c++/6/bits/stl_vector.h ****       at(size_type __n)
 824:/usr/include/c++/6/bits/stl_vector.h ****       {
 825:/usr/include/c++/6/bits/stl_vector.h **** 	_M_range_check(__n);
 826:/usr/include/c++/6/bits/stl_vector.h **** 	return (*this)[__n]; 
 827:/usr/include/c++/6/bits/stl_vector.h ****       }
 828:/usr/include/c++/6/bits/stl_vector.h **** 
 829:/usr/include/c++/6/bits/stl_vector.h ****       /**
 830:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
 831:/usr/include/c++/6/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 832:/usr/include/c++/6/bits/stl_vector.h ****        *  accessed.
 833:/usr/include/c++/6/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
 834:/usr/include/c++/6/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
 835:/usr/include/c++/6/bits/stl_vector.h ****        *
 836:/usr/include/c++/6/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
 837:/usr/include/c++/6/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
 838:/usr/include/c++/6/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
 839:/usr/include/c++/6/bits/stl_vector.h ****        */
 840:/usr/include/c++/6/bits/stl_vector.h ****       const_reference
 841:/usr/include/c++/6/bits/stl_vector.h ****       at(size_type __n) const
 842:/usr/include/c++/6/bits/stl_vector.h ****       {
 843:/usr/include/c++/6/bits/stl_vector.h **** 	_M_range_check(__n);
 844:/usr/include/c++/6/bits/stl_vector.h **** 	return (*this)[__n];
 845:/usr/include/c++/6/bits/stl_vector.h ****       }
 846:/usr/include/c++/6/bits/stl_vector.h **** 
 847:/usr/include/c++/6/bits/stl_vector.h ****       /**
 848:/usr/include/c++/6/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the first
 849:/usr/include/c++/6/bits/stl_vector.h ****        *  element of the %vector.
 850:/usr/include/c++/6/bits/stl_vector.h ****        */
 851:/usr/include/c++/6/bits/stl_vector.h ****       reference
 852:/usr/include/c++/6/bits/stl_vector.h ****       front() _GLIBCXX_NOEXCEPT
 853:/usr/include/c++/6/bits/stl_vector.h ****       { return *begin(); }
 854:/usr/include/c++/6/bits/stl_vector.h **** 
 855:/usr/include/c++/6/bits/stl_vector.h ****       /**
 856:/usr/include/c++/6/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the first
 857:/usr/include/c++/6/bits/stl_vector.h ****        *  element of the %vector.
 858:/usr/include/c++/6/bits/stl_vector.h ****        */
 859:/usr/include/c++/6/bits/stl_vector.h ****       const_reference
 860:/usr/include/c++/6/bits/stl_vector.h ****       front() const _GLIBCXX_NOEXCEPT
 861:/usr/include/c++/6/bits/stl_vector.h ****       { return *begin(); }
 862:/usr/include/c++/6/bits/stl_vector.h **** 
 863:/usr/include/c++/6/bits/stl_vector.h ****       /**
 864:/usr/include/c++/6/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the last
 865:/usr/include/c++/6/bits/stl_vector.h ****        *  element of the %vector.
 866:/usr/include/c++/6/bits/stl_vector.h ****        */
GAS LISTING /tmp/ccvmoMuv.s 			page 622


 867:/usr/include/c++/6/bits/stl_vector.h ****       reference
 868:/usr/include/c++/6/bits/stl_vector.h ****       back() _GLIBCXX_NOEXCEPT
 869:/usr/include/c++/6/bits/stl_vector.h ****       { return *(end() - 1); }
 870:/usr/include/c++/6/bits/stl_vector.h ****       
 871:/usr/include/c++/6/bits/stl_vector.h ****       /**
 872:/usr/include/c++/6/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the
 873:/usr/include/c++/6/bits/stl_vector.h ****        *  last element of the %vector.
 874:/usr/include/c++/6/bits/stl_vector.h ****        */
 875:/usr/include/c++/6/bits/stl_vector.h ****       const_reference
 876:/usr/include/c++/6/bits/stl_vector.h ****       back() const _GLIBCXX_NOEXCEPT
 877:/usr/include/c++/6/bits/stl_vector.h ****       { return *(end() - 1); }
 878:/usr/include/c++/6/bits/stl_vector.h **** 
 879:/usr/include/c++/6/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 880:/usr/include/c++/6/bits/stl_vector.h ****       // DR 464. Suggestion for new member functions in standard containers.
 881:/usr/include/c++/6/bits/stl_vector.h ****       // data access
 882:/usr/include/c++/6/bits/stl_vector.h ****       /**
 883:/usr/include/c++/6/bits/stl_vector.h ****        *   Returns a pointer such that [data(), data() + size()) is a valid
 884:/usr/include/c++/6/bits/stl_vector.h ****        *   range.  For a non-empty %vector, data() == &front().
 885:/usr/include/c++/6/bits/stl_vector.h ****        */
 886:/usr/include/c++/6/bits/stl_vector.h **** #if __cplusplus >= 201103L
 887:/usr/include/c++/6/bits/stl_vector.h ****       _Tp*
 888:/usr/include/c++/6/bits/stl_vector.h **** #else
 889:/usr/include/c++/6/bits/stl_vector.h ****       pointer
 890:/usr/include/c++/6/bits/stl_vector.h **** #endif
 891:/usr/include/c++/6/bits/stl_vector.h ****       data() _GLIBCXX_NOEXCEPT
 892:/usr/include/c++/6/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
 893:/usr/include/c++/6/bits/stl_vector.h **** 
 894:/usr/include/c++/6/bits/stl_vector.h **** #if __cplusplus >= 201103L
 895:/usr/include/c++/6/bits/stl_vector.h ****       const _Tp*
 896:/usr/include/c++/6/bits/stl_vector.h **** #else
 897:/usr/include/c++/6/bits/stl_vector.h ****       const_pointer
 898:/usr/include/c++/6/bits/stl_vector.h **** #endif
 899:/usr/include/c++/6/bits/stl_vector.h ****       data() const _GLIBCXX_NOEXCEPT
 900:/usr/include/c++/6/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
 901:/usr/include/c++/6/bits/stl_vector.h **** 
 902:/usr/include/c++/6/bits/stl_vector.h ****       // [23.2.4.3] modifiers
 903:/usr/include/c++/6/bits/stl_vector.h ****       /**
 904:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Add data to the end of the %vector.
 905:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __x  Data to be added.
 906:/usr/include/c++/6/bits/stl_vector.h ****        *
 907:/usr/include/c++/6/bits/stl_vector.h ****        *  This is a typical stack operation.  The function creates an
 908:/usr/include/c++/6/bits/stl_vector.h ****        *  element at the end of the %vector and assigns the given data
 909:/usr/include/c++/6/bits/stl_vector.h ****        *  to it.  Due to the nature of a %vector this operation can be
 910:/usr/include/c++/6/bits/stl_vector.h ****        *  done in constant time if the %vector has preallocated space
 911:/usr/include/c++/6/bits/stl_vector.h ****        *  available.
 912:/usr/include/c++/6/bits/stl_vector.h ****        */
 913:/usr/include/c++/6/bits/stl_vector.h ****       void
 914:/usr/include/c++/6/bits/stl_vector.h ****       push_back(const value_type& __x)
 915:/usr/include/c++/6/bits/stl_vector.h ****       {
 916:/usr/include/c++/6/bits/stl_vector.h **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 917:/usr/include/c++/6/bits/stl_vector.h **** 	  {
 918:/usr/include/c++/6/bits/stl_vector.h **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 919:/usr/include/c++/6/bits/stl_vector.h **** 	                             __x);
 920:/usr/include/c++/6/bits/stl_vector.h **** 	    ++this->_M_impl._M_finish;
 921:/usr/include/c++/6/bits/stl_vector.h **** 	  }
 922:/usr/include/c++/6/bits/stl_vector.h **** 	else
 923:/usr/include/c++/6/bits/stl_vector.h **** #if __cplusplus >= 201103L
GAS LISTING /tmp/ccvmoMuv.s 			page 623


 924:/usr/include/c++/6/bits/stl_vector.h **** 	  _M_emplace_back_aux(__x);
 925:/usr/include/c++/6/bits/stl_vector.h **** #else
 926:/usr/include/c++/6/bits/stl_vector.h **** 	  _M_insert_aux(end(), __x);
 927:/usr/include/c++/6/bits/stl_vector.h **** #endif
 928:/usr/include/c++/6/bits/stl_vector.h ****       }
 929:/usr/include/c++/6/bits/stl_vector.h **** 
 930:/usr/include/c++/6/bits/stl_vector.h **** #if __cplusplus >= 201103L
 931:/usr/include/c++/6/bits/stl_vector.h ****       void
 932:/usr/include/c++/6/bits/stl_vector.h ****       push_back(value_type&& __x)
 933:/usr/include/c++/6/bits/stl_vector.h ****       { emplace_back(std::move(__x)); }
 934:/usr/include/c++/6/bits/stl_vector.h **** 
 935:/usr/include/c++/6/bits/stl_vector.h ****       template<typename... _Args>
 936:/usr/include/c++/6/bits/stl_vector.h ****         void
 937:/usr/include/c++/6/bits/stl_vector.h ****         emplace_back(_Args&&... __args);
 938:/usr/include/c++/6/bits/stl_vector.h **** #endif
 939:/usr/include/c++/6/bits/stl_vector.h **** 
 940:/usr/include/c++/6/bits/stl_vector.h ****       /**
 941:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Removes last element.
 942:/usr/include/c++/6/bits/stl_vector.h ****        *
 943:/usr/include/c++/6/bits/stl_vector.h ****        *  This is a typical stack operation. It shrinks the %vector by one.
 944:/usr/include/c++/6/bits/stl_vector.h ****        *
 945:/usr/include/c++/6/bits/stl_vector.h ****        *  Note that no data is returned, and if the last element's
 946:/usr/include/c++/6/bits/stl_vector.h ****        *  data is needed, it should be retrieved before pop_back() is
 947:/usr/include/c++/6/bits/stl_vector.h ****        *  called.
 948:/usr/include/c++/6/bits/stl_vector.h ****        */
 949:/usr/include/c++/6/bits/stl_vector.h ****       void
 950:/usr/include/c++/6/bits/stl_vector.h ****       pop_back() _GLIBCXX_NOEXCEPT
 951:/usr/include/c++/6/bits/stl_vector.h ****       {
 952:/usr/include/c++/6/bits/stl_vector.h **** 	--this->_M_impl._M_finish;
 953:/usr/include/c++/6/bits/stl_vector.h **** 	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 954:/usr/include/c++/6/bits/stl_vector.h ****       }
 955:/usr/include/c++/6/bits/stl_vector.h **** 
 956:/usr/include/c++/6/bits/stl_vector.h **** #if __cplusplus >= 201103L
 957:/usr/include/c++/6/bits/stl_vector.h ****       /**
 958:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Inserts an object in %vector before specified iterator.
 959:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
 960:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __args  Arguments.
 961:/usr/include/c++/6/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 962:/usr/include/c++/6/bits/stl_vector.h ****        *
 963:/usr/include/c++/6/bits/stl_vector.h ****        *  This function will insert an object of type T constructed
 964:/usr/include/c++/6/bits/stl_vector.h ****        *  with T(std::forward<Args>(args)...) before the specified location.
 965:/usr/include/c++/6/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a %vector
 966:/usr/include/c++/6/bits/stl_vector.h ****        *  and if it is frequently used the user should consider using
 967:/usr/include/c++/6/bits/stl_vector.h ****        *  std::list.
 968:/usr/include/c++/6/bits/stl_vector.h ****        */
 969:/usr/include/c++/6/bits/stl_vector.h ****       template<typename... _Args>
 970:/usr/include/c++/6/bits/stl_vector.h ****         iterator
 971:/usr/include/c++/6/bits/stl_vector.h ****         emplace(const_iterator __position, _Args&&... __args);
 972:/usr/include/c++/6/bits/stl_vector.h **** 
 973:/usr/include/c++/6/bits/stl_vector.h ****       /**
 974:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
 975:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
 976:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
 977:/usr/include/c++/6/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 978:/usr/include/c++/6/bits/stl_vector.h ****        *
 979:/usr/include/c++/6/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
 980:/usr/include/c++/6/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
GAS LISTING /tmp/ccvmoMuv.s 			page 624


 981:/usr/include/c++/6/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
 982:/usr/include/c++/6/bits/stl_vector.h ****        *  used the user should consider using std::list.
 983:/usr/include/c++/6/bits/stl_vector.h ****        */
 984:/usr/include/c++/6/bits/stl_vector.h ****       iterator
 985:/usr/include/c++/6/bits/stl_vector.h ****       insert(const_iterator __position, const value_type& __x);
 986:/usr/include/c++/6/bits/stl_vector.h **** #else
 987:/usr/include/c++/6/bits/stl_vector.h ****       /**
 988:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
 989:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
 990:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
 991:/usr/include/c++/6/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 992:/usr/include/c++/6/bits/stl_vector.h ****        *
 993:/usr/include/c++/6/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
 994:/usr/include/c++/6/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
 995:/usr/include/c++/6/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
 996:/usr/include/c++/6/bits/stl_vector.h ****        *  used the user should consider using std::list.
 997:/usr/include/c++/6/bits/stl_vector.h ****        */
 998:/usr/include/c++/6/bits/stl_vector.h ****       iterator
 999:/usr/include/c++/6/bits/stl_vector.h ****       insert(iterator __position, const value_type& __x);
1000:/usr/include/c++/6/bits/stl_vector.h **** #endif
1001:/usr/include/c++/6/bits/stl_vector.h **** 
1002:/usr/include/c++/6/bits/stl_vector.h **** #if __cplusplus >= 201103L
1003:/usr/include/c++/6/bits/stl_vector.h ****       /**
1004:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Inserts given rvalue into %vector before specified iterator.
1005:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1006:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1007:/usr/include/c++/6/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1008:/usr/include/c++/6/bits/stl_vector.h ****        *
1009:/usr/include/c++/6/bits/stl_vector.h ****        *  This function will insert a copy of the given rvalue before
1010:/usr/include/c++/6/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1011:/usr/include/c++/6/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1012:/usr/include/c++/6/bits/stl_vector.h ****        *  used the user should consider using std::list.
1013:/usr/include/c++/6/bits/stl_vector.h ****        */
1014:/usr/include/c++/6/bits/stl_vector.h ****       iterator
1015:/usr/include/c++/6/bits/stl_vector.h ****       insert(const_iterator __position, value_type&& __x)
1016:/usr/include/c++/6/bits/stl_vector.h ****       { return emplace(__position, std::move(__x)); }
1017:/usr/include/c++/6/bits/stl_vector.h **** 
1018:/usr/include/c++/6/bits/stl_vector.h ****       /**
1019:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Inserts an initializer_list into the %vector.
1020:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1021:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
1022:/usr/include/c++/6/bits/stl_vector.h ****        *
1023:/usr/include/c++/6/bits/stl_vector.h ****        *  This function will insert copies of the data in the 
1024:/usr/include/c++/6/bits/stl_vector.h ****        *  initializer_list @a l into the %vector before the location
1025:/usr/include/c++/6/bits/stl_vector.h ****        *  specified by @a position.
1026:/usr/include/c++/6/bits/stl_vector.h ****        *
1027:/usr/include/c++/6/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1028:/usr/include/c++/6/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1029:/usr/include/c++/6/bits/stl_vector.h ****        *  consider using std::list.
1030:/usr/include/c++/6/bits/stl_vector.h ****        */
1031:/usr/include/c++/6/bits/stl_vector.h ****       iterator
1032:/usr/include/c++/6/bits/stl_vector.h ****       insert(const_iterator __position, initializer_list<value_type> __l)
1033:/usr/include/c++/6/bits/stl_vector.h ****       { return this->insert(__position, __l.begin(), __l.end()); }
1034:/usr/include/c++/6/bits/stl_vector.h **** #endif
1035:/usr/include/c++/6/bits/stl_vector.h **** 
1036:/usr/include/c++/6/bits/stl_vector.h **** #if __cplusplus >= 201103L
1037:/usr/include/c++/6/bits/stl_vector.h ****       /**
GAS LISTING /tmp/ccvmoMuv.s 			page 625


1038:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1039:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1040:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1041:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1042:/usr/include/c++/6/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1043:/usr/include/c++/6/bits/stl_vector.h ****        *
1044:/usr/include/c++/6/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1045:/usr/include/c++/6/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1046:/usr/include/c++/6/bits/stl_vector.h ****        *
1047:/usr/include/c++/6/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1048:/usr/include/c++/6/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1049:/usr/include/c++/6/bits/stl_vector.h ****        *  consider using std::list.
1050:/usr/include/c++/6/bits/stl_vector.h ****        */
1051:/usr/include/c++/6/bits/stl_vector.h ****       iterator
1052:/usr/include/c++/6/bits/stl_vector.h ****       insert(const_iterator __position, size_type __n, const value_type& __x)
1053:/usr/include/c++/6/bits/stl_vector.h ****       {
1054:/usr/include/c++/6/bits/stl_vector.h **** 	difference_type __offset = __position - cbegin();
1055:/usr/include/c++/6/bits/stl_vector.h **** 	_M_fill_insert(begin() + __offset, __n, __x);
1056:/usr/include/c++/6/bits/stl_vector.h **** 	return begin() + __offset;
1057:/usr/include/c++/6/bits/stl_vector.h ****       }
1058:/usr/include/c++/6/bits/stl_vector.h **** #else
1059:/usr/include/c++/6/bits/stl_vector.h ****       /**
1060:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1061:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1062:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1063:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1064:/usr/include/c++/6/bits/stl_vector.h ****        *
1065:/usr/include/c++/6/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1066:/usr/include/c++/6/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1067:/usr/include/c++/6/bits/stl_vector.h ****        *
1068:/usr/include/c++/6/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1069:/usr/include/c++/6/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1070:/usr/include/c++/6/bits/stl_vector.h ****        *  consider using std::list.
1071:/usr/include/c++/6/bits/stl_vector.h ****        */
1072:/usr/include/c++/6/bits/stl_vector.h ****       void
1073:/usr/include/c++/6/bits/stl_vector.h ****       insert(iterator __position, size_type __n, const value_type& __x)
1074:/usr/include/c++/6/bits/stl_vector.h ****       { _M_fill_insert(__position, __n, __x); }
1075:/usr/include/c++/6/bits/stl_vector.h **** #endif
1076:/usr/include/c++/6/bits/stl_vector.h **** 
1077:/usr/include/c++/6/bits/stl_vector.h **** #if __cplusplus >= 201103L
1078:/usr/include/c++/6/bits/stl_vector.h ****       /**
1079:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1080:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1081:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1082:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1083:/usr/include/c++/6/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1084:/usr/include/c++/6/bits/stl_vector.h ****        *
1085:/usr/include/c++/6/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1086:/usr/include/c++/6/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1087:/usr/include/c++/6/bits/stl_vector.h ****        *  by @a pos.
1088:/usr/include/c++/6/bits/stl_vector.h ****        *
1089:/usr/include/c++/6/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1090:/usr/include/c++/6/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1091:/usr/include/c++/6/bits/stl_vector.h ****        *  consider using std::list.
1092:/usr/include/c++/6/bits/stl_vector.h ****        */
1093:/usr/include/c++/6/bits/stl_vector.h ****       template<typename _InputIterator,
1094:/usr/include/c++/6/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
GAS LISTING /tmp/ccvmoMuv.s 			page 626


1095:/usr/include/c++/6/bits/stl_vector.h ****         iterator
1096:/usr/include/c++/6/bits/stl_vector.h ****         insert(const_iterator __position, _InputIterator __first,
1097:/usr/include/c++/6/bits/stl_vector.h **** 	       _InputIterator __last)
1098:/usr/include/c++/6/bits/stl_vector.h ****         {
1099:/usr/include/c++/6/bits/stl_vector.h **** 	  difference_type __offset = __position - cbegin();
1100:/usr/include/c++/6/bits/stl_vector.h **** 	  _M_insert_dispatch(begin() + __offset,
1101:/usr/include/c++/6/bits/stl_vector.h **** 			     __first, __last, __false_type());
1102:/usr/include/c++/6/bits/stl_vector.h **** 	  return begin() + __offset;
1103:/usr/include/c++/6/bits/stl_vector.h **** 	}
1104:/usr/include/c++/6/bits/stl_vector.h **** #else
1105:/usr/include/c++/6/bits/stl_vector.h ****       /**
1106:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1107:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1108:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1109:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1110:/usr/include/c++/6/bits/stl_vector.h ****        *
1111:/usr/include/c++/6/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1112:/usr/include/c++/6/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1113:/usr/include/c++/6/bits/stl_vector.h ****        *  by @a pos.
1114:/usr/include/c++/6/bits/stl_vector.h ****        *
1115:/usr/include/c++/6/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1116:/usr/include/c++/6/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1117:/usr/include/c++/6/bits/stl_vector.h ****        *  consider using std::list.
1118:/usr/include/c++/6/bits/stl_vector.h ****        */
1119:/usr/include/c++/6/bits/stl_vector.h ****       template<typename _InputIterator>
1120:/usr/include/c++/6/bits/stl_vector.h ****         void
1121:/usr/include/c++/6/bits/stl_vector.h ****         insert(iterator __position, _InputIterator __first,
1122:/usr/include/c++/6/bits/stl_vector.h **** 	       _InputIterator __last)
1123:/usr/include/c++/6/bits/stl_vector.h ****         {
1124:/usr/include/c++/6/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
1125:/usr/include/c++/6/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1126:/usr/include/c++/6/bits/stl_vector.h **** 	  _M_insert_dispatch(__position, __first, __last, _Integral());
1127:/usr/include/c++/6/bits/stl_vector.h **** 	}
1128:/usr/include/c++/6/bits/stl_vector.h **** #endif
1129:/usr/include/c++/6/bits/stl_vector.h **** 
1130:/usr/include/c++/6/bits/stl_vector.h ****       /**
1131:/usr/include/c++/6/bits/stl_vector.h ****        *  @brief  Remove element at given position.
1132:/usr/include/c++/6/bits/stl_vector.h ****        *  @param  __position  Iterator pointing to element to be erased.
1133:/usr/include/c++/6/bits/stl_vector.h ****        *  @return  An iterator pointing to the next element (or end()).
1134:/usr/include/c++/6/bits/stl_vector.h ****        *
1135:/usr/include/c++/6/bits/stl_vector.h ****        *  This function will erase the element at the given position and thus
1136:/usr/include/c++/6/bits/stl_vector.h ****        *  shorten the %vector by one.
1137:/usr/include/c++/6/bits/stl_vector.h ****        *
1138:/usr/include/c++/6/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1139:/usr/include/c++/6/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1140:/usr/include/c++/6/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1141:/usr/include/c++/6/bits/stl_vector.h ****        *  the element, and that if the element is itself a pointer,
1142:/usr/include/c++/6/bits/stl_vector.h ****        *  the pointed-to memory is not touched in any way.  Managing
1143:/usr/include/c++/6/bits/stl_vector.h ****        *  the pointer is the user's responsibility.
1144:/usr/include/c++/6/bits/stl_vector.h ****        */
1145:/usr/include/c++/6/bits/stl_vector.h ****       iterator
1146:/usr/include/c++/6/bits/stl_vector.h **** #if __cplusplus >= 201103L
1147:/usr/include/c++/6/bits/stl_vector.h ****       erase(const_iterator __position)
1148:/usr/include/c++/6/bits/stl_vector.h ****       { return _M_erase(begin() + (__position - cbegin())); }
 11201              		.loc 23 1148 0
 11202 0b01 488B7424 		movq	112(%rsp), %rsi
 11202      70
GAS LISTING /tmp/ccvmoMuv.s 			page 627


 11203 0b06 488D7C24 		leaq	112(%rsp), %rdi
 11203      70
 11204              	.LVL930:
 11205              	.LEHB44:
 11206 0b0b E8000000 		call	_ZNSt6vectorIN2gr5tag_tESaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE
 11206      00
 11207              	.LVL931:
 11208              	.LEHE44:
 11209 0b10 488B03   		movq	(%rbx), %rax
 11210 0b13 E978FEFF 		jmp	.L666
 11210      FF
 11211              	.LVL932:
 11212 0b18 0F1F8400 		.p2align 4,,10
 11212      00000000 
 11213              		.p2align 3
 11214              	.L592:
 11215              	.LBE16567:
 11216              	.LBE16566:
 11217              	.LBE16538:
 11218              	.LBE16537:
 11219              	.LBB16607:
 11220              	.LBB16608:
 426:/usr/include/c++/6/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 11221              		.loc 23 426 0
 11222 0b20 488B6C24 		movq	120(%rsp), %rbp
 11222      78
 11223 0b25 488B5C24 		movq	112(%rsp), %rbx
 11223      70
 11224              	.LVL933:
 11225              	.LBB16609:
 11226              	.LBB16610:
 11227              	.LBB16611:
 11228              	.LBB16612:
 11229              	.LBB16613:
 11230              		.file 44 "/usr/include/c++/6/bits/stl_construct.h"
   1:/usr/include/c++/6/bits/stl_construct.h **** // nonstandard construct and destroy functions -*- C++ -*-
   2:/usr/include/c++/6/bits/stl_construct.h **** 
   3:/usr/include/c++/6/bits/stl_construct.h **** // Copyright (C) 2001-2016 Free Software Foundation, Inc.
   4:/usr/include/c++/6/bits/stl_construct.h **** //
   5:/usr/include/c++/6/bits/stl_construct.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/6/bits/stl_construct.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/6/bits/stl_construct.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/6/bits/stl_construct.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/6/bits/stl_construct.h **** // any later version.
  10:/usr/include/c++/6/bits/stl_construct.h **** 
  11:/usr/include/c++/6/bits/stl_construct.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/6/bits/stl_construct.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/6/bits/stl_construct.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/6/bits/stl_construct.h **** // GNU General Public License for more details.
  15:/usr/include/c++/6/bits/stl_construct.h **** 
  16:/usr/include/c++/6/bits/stl_construct.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/6/bits/stl_construct.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/6/bits/stl_construct.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/6/bits/stl_construct.h **** 
  20:/usr/include/c++/6/bits/stl_construct.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/6/bits/stl_construct.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/6/bits/stl_construct.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
GAS LISTING /tmp/ccvmoMuv.s 			page 628


  23:/usr/include/c++/6/bits/stl_construct.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/6/bits/stl_construct.h **** 
  25:/usr/include/c++/6/bits/stl_construct.h **** /*
  26:/usr/include/c++/6/bits/stl_construct.h ****  *
  27:/usr/include/c++/6/bits/stl_construct.h ****  * Copyright (c) 1994
  28:/usr/include/c++/6/bits/stl_construct.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/6/bits/stl_construct.h ****  *
  30:/usr/include/c++/6/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/6/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/6/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/6/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/6/bits/stl_construct.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/6/bits/stl_construct.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/6/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/6/bits/stl_construct.h ****  *
  38:/usr/include/c++/6/bits/stl_construct.h ****  *
  39:/usr/include/c++/6/bits/stl_construct.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/6/bits/stl_construct.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/6/bits/stl_construct.h ****  *
  42:/usr/include/c++/6/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/6/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/6/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/6/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/6/bits/stl_construct.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/6/bits/stl_construct.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/6/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/6/bits/stl_construct.h ****  */
  50:/usr/include/c++/6/bits/stl_construct.h **** 
  51:/usr/include/c++/6/bits/stl_construct.h **** /** @file bits/stl_construct.h
  52:/usr/include/c++/6/bits/stl_construct.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/6/bits/stl_construct.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/c++/6/bits/stl_construct.h ****  */
  55:/usr/include/c++/6/bits/stl_construct.h **** 
  56:/usr/include/c++/6/bits/stl_construct.h **** #ifndef _STL_CONSTRUCT_H
  57:/usr/include/c++/6/bits/stl_construct.h **** #define _STL_CONSTRUCT_H 1
  58:/usr/include/c++/6/bits/stl_construct.h **** 
  59:/usr/include/c++/6/bits/stl_construct.h **** #include <new>
  60:/usr/include/c++/6/bits/stl_construct.h **** #include <bits/move.h>
  61:/usr/include/c++/6/bits/stl_construct.h **** #include <ext/alloc_traits.h>
  62:/usr/include/c++/6/bits/stl_construct.h **** 
  63:/usr/include/c++/6/bits/stl_construct.h **** namespace std _GLIBCXX_VISIBILITY(default)
  64:/usr/include/c++/6/bits/stl_construct.h **** {
  65:/usr/include/c++/6/bits/stl_construct.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  66:/usr/include/c++/6/bits/stl_construct.h **** 
  67:/usr/include/c++/6/bits/stl_construct.h ****   /**
  68:/usr/include/c++/6/bits/stl_construct.h ****    * Constructs an object in existing memory by invoking an allocated
  69:/usr/include/c++/6/bits/stl_construct.h ****    * object's constructor with an initializer.
  70:/usr/include/c++/6/bits/stl_construct.h ****    */
  71:/usr/include/c++/6/bits/stl_construct.h **** #if __cplusplus >= 201103L
  72:/usr/include/c++/6/bits/stl_construct.h ****   template<typename _T1, typename... _Args>
  73:/usr/include/c++/6/bits/stl_construct.h ****     inline void
  74:/usr/include/c++/6/bits/stl_construct.h ****     _Construct(_T1* __p, _Args&&... __args)
  75:/usr/include/c++/6/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  76:/usr/include/c++/6/bits/stl_construct.h **** #else
  77:/usr/include/c++/6/bits/stl_construct.h ****   template<typename _T1, typename _T2>
  78:/usr/include/c++/6/bits/stl_construct.h ****     inline void
  79:/usr/include/c++/6/bits/stl_construct.h ****     _Construct(_T1* __p, const _T2& __value)
GAS LISTING /tmp/ccvmoMuv.s 			page 629


  80:/usr/include/c++/6/bits/stl_construct.h ****     {
  81:/usr/include/c++/6/bits/stl_construct.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  82:/usr/include/c++/6/bits/stl_construct.h ****       // 402. wrong new expression in [some_]allocator::construct
  83:/usr/include/c++/6/bits/stl_construct.h ****       ::new(static_cast<void*>(__p)) _T1(__value);
  84:/usr/include/c++/6/bits/stl_construct.h ****     }
  85:/usr/include/c++/6/bits/stl_construct.h **** #endif
  86:/usr/include/c++/6/bits/stl_construct.h **** 
  87:/usr/include/c++/6/bits/stl_construct.h ****   /**
  88:/usr/include/c++/6/bits/stl_construct.h ****    * Destroy the object pointed to by a pointer type.
  89:/usr/include/c++/6/bits/stl_construct.h ****    */
  90:/usr/include/c++/6/bits/stl_construct.h ****   template<typename _Tp>
  91:/usr/include/c++/6/bits/stl_construct.h ****     inline void
  92:/usr/include/c++/6/bits/stl_construct.h ****     _Destroy(_Tp* __pointer)
  93:/usr/include/c++/6/bits/stl_construct.h ****     { __pointer->~_Tp(); }
  94:/usr/include/c++/6/bits/stl_construct.h **** 
  95:/usr/include/c++/6/bits/stl_construct.h ****   template<bool>
  96:/usr/include/c++/6/bits/stl_construct.h ****     struct _Destroy_aux
  97:/usr/include/c++/6/bits/stl_construct.h ****     {
  98:/usr/include/c++/6/bits/stl_construct.h ****       template<typename _ForwardIterator>
  99:/usr/include/c++/6/bits/stl_construct.h ****         static void
 100:/usr/include/c++/6/bits/stl_construct.h ****         __destroy(_ForwardIterator __first, _ForwardIterator __last)
 101:/usr/include/c++/6/bits/stl_construct.h **** 	{
 102:/usr/include/c++/6/bits/stl_construct.h **** 	  for (; __first != __last; ++__first)
 11231              		.loc 44 102 0
 11232 0b2a 4839DD   		cmpq	%rbx, %rbp
 11233 0b2d 7447     		je	.L582
 11234              	.LVL934:
 11235 0b2f 90       		.p2align 4,,10
 11236              		.p2align 3
 11237              	.L598:
 11238              	.LBB16614:
 11239              	.LBB16615:
 11240              	.LBB16616:
 11241              	.LBB16617:
 426:/usr/include/c++/6/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 11242              		.loc 23 426 0
 11243 0b30 488B7B20 		movq	32(%rbx), %rdi
 11244              	.LVL935:
 11245              	.LBB16618:
 11246              	.LBB16619:
 11247              	.LBB16620:
 177:/usr/include/c++/6/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 11248              		.loc 23 177 0
 11249 0b34 4885FF   		testq	%rdi, %rdi
 11250 0b37 7405     		je	.L594
 11251              	.LVL936:
 11252              	.LBB16621:
 11253              	.LBB16622:
 11254              	.LBB16623:
 11255              		.loc 12 110 0
 11256 0b39 E8000000 		call	_ZdlPv@PLT
 11256      00
 11257              	.LVL937:
 11258              	.L594:
 11259              	.LBE16623:
 11260              	.LBE16622:
 11261              	.LBE16621:
GAS LISTING /tmp/ccvmoMuv.s 			page 630


 11262              	.LBE16620:
 11263              	.LBE16619:
 11264              	.LBE16618:
 11265              	.LBE16617:
 11266              	.LBE16616:
 11267              	.LBB16624:
 11268              	.LBB16625:
  97:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 11269              		.loc 34 97 0
 11270 0b3e 488B7B18 		movq	24(%rbx), %rdi
 11271 0b42 4885FF   		testq	%rdi, %rdi
 11272 0b45 7405     		je	.L595
 11273 0b47 E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 11273      00
 11274              	.LVL938:
 11275              	.L595:
 11276              	.LBE16625:
 11277              	.LBE16624:
 11278              	.LBB16626:
 11279              	.LBB16627:
 11280 0b4c 488B7B10 		movq	16(%rbx), %rdi
 11281 0b50 4885FF   		testq	%rdi, %rdi
 11282 0b53 7405     		je	.L596
 11283 0b55 E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 11283      00
 11284              	.LVL939:
 11285              	.L596:
 11286              	.LBE16627:
 11287              	.LBE16626:
 11288              	.LBB16628:
 11289              	.LBB16629:
 11290 0b5a 488B7B08 		movq	8(%rbx), %rdi
 11291 0b5e 4885FF   		testq	%rdi, %rdi
 11292 0b61 7405     		je	.L597
 11293 0b63 E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 11293      00
 11294              	.LVL940:
 11295              	.L597:
 11296              	.LBE16629:
 11297              	.LBE16628:
 11298              	.LBE16615:
 11299              	.LBE16614:
 11300              		.loc 44 102 0
 11301 0b68 4883C338 		addq	$56, %rbx
 11302              	.LVL941:
 11303 0b6c 4839DD   		cmpq	%rbx, %rbp
 11304 0b6f 75BF     		jne	.L598
 11305 0b71 488B5C24 		movq	112(%rsp), %rbx
 11305      70
 11306              	.LVL942:
 11307              	.L582:
 11308              	.LBE16613:
 11309              	.LBE16612:
 11310              	.LBE16611:
 11311              	.LBE16610:
 11312              	.LBE16609:
 11313              	.LBB16630:
GAS LISTING /tmp/ccvmoMuv.s 			page 631


 11314              	.LBB16631:
 11315              	.LBB16632:
 177:/usr/include/c++/6/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 11316              		.loc 23 177 0
 11317 0b76 4885DB   		testq	%rbx, %rbx
 11318 0b79 7408     		je	.L629
 11319              	.LVL943:
 11320              	.LBB16633:
 11321              	.LBB16634:
 11322              	.LBB16635:
 11323              		.loc 12 110 0
 11324 0b7b 4889DF   		movq	%rbx, %rdi
 11325 0b7e E8000000 		call	_ZdlPv@PLT
 11325      00
 11326              	.LVL944:
 11327              	.L629:
 11328              	.LBE16635:
 11329              	.LBE16634:
 11330              	.LBE16633:
 11331              	.LBE16632:
 11332              	.LBE16631:
 11333              	.LBE16630:
 11334              	.LBE16608:
 11335              	.LBE16607:
 175:costas2_impl.cc **** 
 11336              		.loc 5 175 0
 11337 0b83 8B44243C 		movl	60(%rsp), %eax
 11338 0b87 4881C498 		addq	$152, %rsp
 11338      000000
 11339              		.cfi_remember_state
 11340              		.cfi_def_cfa_offset 56
 11341 0b8e 5B       		popq	%rbx
 11342              		.cfi_def_cfa_offset 48
 11343 0b8f 5D       		popq	%rbp
 11344              		.cfi_def_cfa_offset 40
 11345 0b90 415C     		popq	%r12
 11346              		.cfi_def_cfa_offset 32
 11347 0b92 415D     		popq	%r13
 11348              		.cfi_def_cfa_offset 24
 11349              	.LVL945:
 11350 0b94 415E     		popq	%r14
 11351              		.cfi_def_cfa_offset 16
 11352 0b96 415F     		popq	%r15
 11353              		.cfi_def_cfa_offset 8
 11354 0b98 C3       		ret
 11355              	.LVL946:
 11356              	.L667:
 11357              		.cfi_restore_state
 11358              	.LBB16636:
 11359              	.LBB16570:
 151:costas2_impl.cc ****           if(tags.size() > 0) {
 11360              		.loc 5 151 0 discriminator 1
 11361 0b99 85F6     		testl	%esi, %esi
 11362 0b9b 89F0     		movl	%esi, %eax
 11363              	.LVL947:
 11364 0b9d 7EE4     		jle	.L629
 11365              	.LVL948:
GAS LISTING /tmp/ccvmoMuv.s 			page 632


 11366 0b9f 83E801   		subl	$1, %eax
 11367              	.LVL949:
 11368 0ba2 F30F103D 		movss	.LC2(%rip), %xmm7
 11368      00000000 
 151:costas2_impl.cc ****           if(tags.size() > 0) {
 11369              		.loc 5 151 0 is_stmt 0
 11370 0baa BD010000 		movl	$1, %ebp
 11370      00
 11371 0baf 4883C001 		addq	$1, %rax
 11372 0bb3 4C8D7C24 		leaq	92(%rsp), %r15
 11372      5C
 11373              	.LVL950:
 11374 0bb8 48894424 		movq	%rax, 24(%rsp)
 11374      18
 11375 0bbd 488D4424 		leaq	88(%rsp), %rax
 11375      58
 11376 0bc2 0F293C24 		movaps	%xmm7, (%rsp)
 11377 0bc6 48894424 		movq	%rax, 32(%rsp)
 11377      20
 154:costas2_impl.cc ****               tags.erase(tags.begin());
 11378              		.loc 5 154 0 is_stmt 1
 11379 0bcb 488D4424 		leaq	104(%rsp), %rax
 11379      68
 11380 0bd0 48894424 		movq	%rax, 40(%rsp)
 11380      28
 11381 0bd5 EB11     		jmp	.L573
 11382              	.LVL951:
 11383 0bd7 660F1F84 		.p2align 4,,10
 11383      00000000 
 11383      00
 11384              		.p2align 3
 11385              	.L585:
 11386 0be0 4883C501 		addq	$1, %rbp
 11387              	.LVL952:
 11388 0be4 4983C408 		addq	$8, %r12
 11389              	.LVL953:
 11390              	.L573:
 160:costas2_impl.cc **** 
 11391              		.loc 5 160 0
 11392 0be8 488B03   		movq	(%rbx), %rax
 11393              	.LBB16571:
 11394              	.LBB16572:
 11395              		.loc 41 33 0
 11396 0beb 488B7C24 		movq	32(%rsp), %rdi
 11396      20
 11397 0bf0 4C89FE   		movq	%r15, %rsi
 11398              	.LBE16572:
 11399              	.LBE16571:
 160:costas2_impl.cc **** 
 11400              		.loc 5 160 0
 11401 0bf3 488B40E0 		movq	-32(%rax), %rax
 11402 0bf7 F30F1044 		movss	8(%rbx,%rax), %xmm0
 11402      0308
 11403 0bfd 0F570424 		xorps	(%rsp), %xmm0
 11404              	.LEHB45:
 11405              	.LBB16574:
 11406              	.LBB16573:
GAS LISTING /tmp/ccvmoMuv.s 			page 633


 11407              		.loc 41 33 0
 11408 0c01 E8000000 		call	_ZN2gr7sincosfEfPfS0_@PLT
 11408      00
 11409              	.LVL954:
 11410              	.LBE16573:
 11411              	.LBE16574:
 11412              	.LBB16575:
 11413              	.LBB16576:
 11414              	.LBB16577:
 11415              	.LBB16578:
 11416              		.loc 42 1176 0
 11417 0c06 F3410F10 		movss	-4(%r13,%rbp,8), %xmm1
 11417      4CEDFC
 11418 0c0d F3410F10 		movss	-8(%r13,%rbp,8), %xmm0
 11418      44EDF8
 11419 0c14 F30F105C 		movss	88(%rsp), %xmm3
 11419      2458
 11420 0c1a F30F1054 		movss	92(%rsp), %xmm2
 11420      245C
 11421 0c20 E8000000 		call	__mulsc3@PLT
 11421      00
 11422              	.LVL955:
 11423 0c25 660FD644 		movq	%xmm0, 64(%rsp)
 11423      2440
 11424              	.LBE16578:
 11425              	.LBE16577:
 11426              	.LBE16576:
 11427              	.LBE16575:
 165:costas2_impl.cc ****           d_error = gr::branchless_clip(d_error, 1.0);
 11428              		.loc 5 165 0
 11429 0c2b 4889DF   		movq	%rbx, %rdi
 11430              	.LBB16582:
 11431              	.LBB16581:
 11432              	.LBB16580:
 11433              	.LBB16579:
 11434              		.loc 42 1176 0
 11435 0c2e F30F1044 		movss	68(%rsp), %xmm0
 11435      2444
 11436              	.LVL956:
 11437              	.LBE16579:
 11438              	.LBE16580:
 11439              	.LBE16581:
 11440              	.LBE16582:
 162:costas2_impl.cc **** 
 11441              		.loc 5 162 0
 11442 0c34 F30F104C 		movss	64(%rsp), %xmm1
 11442      2440
 11443 0c3a F3410F11 		movss	%xmm1, (%r12)
 11443      0C24
 11444 0c40 F3410F11 		movss	%xmm0, 4(%r12)
 11444      442404
 165:costas2_impl.cc ****           d_error = gr::branchless_clip(d_error, 1.0);
 11445              		.loc 5 165 0
 11446 0c47 488B4318 		movq	24(%rbx), %rax
 11447 0c4b 48037B20 		addq	32(%rbx), %rdi
 11448 0c4f A801     		testb	$1, %al
 11449 0c51 7408     		je	.L591
GAS LISTING /tmp/ccvmoMuv.s 			page 634


 165:costas2_impl.cc ****           d_error = gr::branchless_clip(d_error, 1.0);
 11450              		.loc 5 165 0 is_stmt 0 discriminator 1
 11451 0c53 488B17   		movq	(%rdi), %rdx
 11452 0c56 488B4402 		movq	-1(%rdx,%rax), %rax
 11452      FF
 11453              	.L591:
 165:costas2_impl.cc ****           d_error = gr::branchless_clip(d_error, 1.0);
 11454              		.loc 5 165 0 discriminator 4
 11455 0c5b F3410F7E 		movq	(%r12), %xmm0
 11455      0424
 11456 0c61 FFD0     		call	*%rax
 11457              	.LVL957:
 11458              	.LBB16583:
 11459              	.LBB16584:
  70:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****     float x2 = fabsf(x-clip);
 11460              		.loc 43 70 0 is_stmt 1 discriminator 4
 11461 0c63 F30F100D 		movss	.LC3(%rip), %xmm1
 11461      00000000 
 11462              	.LBE16584:
 11463              	.LBE16583:
 168:costas2_impl.cc ****           phase_wrap();
 11464              		.loc 5 168 0 discriminator 4
 11465 0c6b 488B03   		movq	(%rbx), %rax
 11466              	.LBB16588:
 11467              	.LBB16585:
  70:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****     float x2 = fabsf(x-clip);
 11468              		.loc 43 70 0 discriminator 4
 11469 0c6e F30F58C8 		addss	%xmm0, %xmm1
 11470              	.LBE16585:
 11471              	.LBE16588:
 168:costas2_impl.cc ****           phase_wrap();
 11472              		.loc 5 168 0 discriminator 4
 11473 0c72 4889DF   		movq	%rbx, %rdi
 11474              	.LBB16589:
 11475              	.LBB16586:
  71:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****     x1 -= x2;
 11476              		.loc 43 71 0 discriminator 4
 11477 0c75 F30F5C05 		subss	.LC3(%rip), %xmm0
 11477      00000000 
 11478              	.LVL958:
 11479              	.LBE16586:
 11480              	.LBE16589:
 168:costas2_impl.cc ****           phase_wrap();
 11481              		.loc 5 168 0 discriminator 4
 11482 0c7d 480378E0 		addq	-32(%rax), %rdi
 11483              	.LBB16590:
 11484              	.LBB16587:
  70:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****     float x2 = fabsf(x-clip);
 11485              		.loc 43 70 0 discriminator 4
 11486 0c81 0F540D00 		andps	.LC4(%rip), %xmm1
 11486      000000
  71:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****     x1 -= x2;
 11487              		.loc 43 71 0 discriminator 4
 11488 0c88 0F540500 		andps	.LC4(%rip), %xmm0
 11488      000000
  72:/home/mpiscopo/gnuradio/include/gnuradio/math.h ****     return 0.5*x1;
 11489              		.loc 43 72 0 discriminator 4
GAS LISTING /tmp/ccvmoMuv.s 			page 635


 11490 0c8f F30F5CC8 		subss	%xmm0, %xmm1
 11491              		.loc 43 73 0 discriminator 4
 11492 0c93 F30F1005 		movss	.LC5(%rip), %xmm0
 11492      00000000 
 11493 0c9b F30F59C1 		mulss	%xmm1, %xmm0
 11494              	.LVL959:
 11495              	.LBE16587:
 11496              	.LBE16590:
 166:costas2_impl.cc **** 
 11497              		.loc 5 166 0 discriminator 4
 11498 0c9f F30F1143 		movss	%xmm0, 12(%rbx)
 11498      0C
 168:costas2_impl.cc ****           phase_wrap();
 11499              		.loc 5 168 0 discriminator 4
 11500 0ca4 E8000000 		call	_ZN2gr6blocks12control_loop12advance_loopEf@PLT
 11500      00
 11501              	.LVL960:
 169:costas2_impl.cc ****           frequency_limit();
 11502              		.loc 5 169 0
 11503 0ca9 488B03   		movq	(%rbx), %rax
 11504 0cac 4889DF   		movq	%rbx, %rdi
 11505 0caf 480378E0 		addq	-32(%rax), %rdi
 11506 0cb3 E8000000 		call	_ZN2gr6blocks12control_loop10phase_wrapEv@PLT
 11506      00
 11507              	.LVL961:
 170:costas2_impl.cc ****         }
 11508              		.loc 5 170 0
 11509 0cb8 488B03   		movq	(%rbx), %rax
 11510 0cbb 4889DF   		movq	%rbx, %rdi
 11511 0cbe 480378E0 		addq	-32(%rax), %rdi
 11512 0cc2 E8000000 		call	_ZN2gr6blocks12control_loop15frequency_limitEv@PLT
 11512      00
 11513              	.LVL962:
 151:costas2_impl.cc ****           if(tags.size() > 0) {
 11514              		.loc 5 151 0 discriminator 2
 11515 0cc7 483B6C24 		cmpq	24(%rsp), %rbp
 11515      18
 11516 0ccc 0F844EFE 		je	.L592
 11516      FFFF
 11517 0cd2 488B5424 		movq	112(%rsp), %rdx
 11517      70
 11518              	.LVL963:
 11519              	.LBB16591:
 11520              	.LBB16592:
 656:/usr/include/c++/6/bits/stl_vector.h **** 
 11521              		.loc 23 656 0
 11522 0cd7 488B4424 		movq	120(%rsp), %rax
 11522      78
 11523 0cdc 48B9B76D 		movabsq	$7905747460161236407, %rcx
 11523      DBB66DDB 
 11523      B66D
 11524 0ce6 4829D0   		subq	%rdx, %rax
 11525 0ce9 48C1F803 		sarq	$3, %rax
 11526 0ced 480FAFC1 		imulq	%rcx, %rax
 11527              	.LBE16592:
 11528              	.LBE16591:
 152:costas2_impl.cc ****             if(tags[0].offset-nitems_read(0) == (size_t)i) {
GAS LISTING /tmp/ccvmoMuv.s 			page 636


 11529              		.loc 5 152 0
 11530 0cf1 4885C0   		testq	%rax, %rax
 11531 0cf4 0F84E6FE 		je	.L585
 11531      FFFF
 11532              	.LVL964:
 153:costas2_impl.cc ****               d_phase = (float)pmt::to_double(tags[0].value);
 11533              		.loc 5 153 0
 11534 0cfa 488B03   		movq	(%rbx), %rax
 11535 0cfd 4889DF   		movq	%rbx, %rdi
 11536 0d00 31F6     		xorl	%esi, %esi
 11537 0d02 4C8B32   		movq	(%rdx), %r14
 11538 0d05 480378E8 		addq	-24(%rax), %rdi
 11539 0d09 E8000000 		call	_ZN2gr5block11nitems_readEj@PLT
 11539      00
 11540              	.LVL965:
 11541 0d0e 4929C6   		subq	%rax, %r14
 11542 0d11 4C39F5   		cmpq	%r14, %rbp
 11543 0d14 0F85C6FE 		jne	.L585
 11543      FFFF
 154:costas2_impl.cc ****               tags.erase(tags.begin());
 11544              		.loc 5 154 0
 11545 0d1a 488B03   		movq	(%rbx), %rax
 11546 0d1d 4989DE   		movq	%rbx, %r14
 11547 0d20 4C0370E0 		addq	-32(%rax), %r14
 11548 0d24 488B4424 		movq	112(%rsp), %rax
 11548      70
 11549              	.LVL966:
 11550              	.LBB16593:
 11551              	.LBB16594:
 11552              	.LBB16595:
  90:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 11553              		.loc 34 90 0
 11554 0d29 488B7810 		movq	16(%rax), %rdi
  92:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 11555              		.loc 34 92 0
 11556 0d2d 4885FF   		testq	%rdi, %rdi
  90:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 11557              		.loc 34 90 0
 11558 0d30 48897C24 		movq	%rdi, 104(%rsp)
 11558      68
  92:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 11559              		.loc 34 92 0
 11560 0d35 7405     		je	.L588
 11561 0d37 E8000000 		call	_ZN3pmt21intrusive_ptr_add_refEPNS_8pmt_baseE@PLT
 11561      00
 11562              	.LVL967:
 11563              	.LEHE45:
 11564              	.L588:
 11565              	.LBE16595:
 11566              	.LBE16594:
 11567              	.LBE16593:
 154:costas2_impl.cc ****               tags.erase(tags.begin());
 11568              		.loc 5 154 0
 11569 0d3c 488B7C24 		movq	40(%rsp), %rdi
 11569      28
 11570              	.LEHB46:
 11571 0d41 E8000000 		call	_ZN3pmt9to_doubleEN5boost13intrusive_ptrINS_8pmt_baseEEE@PLT
GAS LISTING /tmp/ccvmoMuv.s 			page 637


 11571      00
 11572              	.LVL968:
 11573              	.LEHE46:
 11574 0d46 660FEFFF 		pxor	%xmm7, %xmm7
 11575              	.LBB16596:
 11576              	.LBB16597:
  97:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 11577              		.loc 34 97 0
 11578 0d4a 488B7C24 		movq	104(%rsp), %rdi
 11578      68
 11579              	.LBE16597:
 11580              	.LBE16596:
 154:costas2_impl.cc ****               tags.erase(tags.begin());
 11581              		.loc 5 154 0
 11582 0d4f F20F5AF8 		cvtsd2ss	%xmm0, %xmm7
 11583              	.LBB16600:
 11584              	.LBB16598:
  97:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 11585              		.loc 34 97 0
 11586 0d53 4885FF   		testq	%rdi, %rdi
 11587              	.LBE16598:
 11588              	.LBE16600:
 154:costas2_impl.cc ****               tags.erase(tags.begin());
 11589              		.loc 5 154 0
 11590 0d56 F3410F11 		movss	%xmm7, 8(%r14)
 11590      7E08
 11591              	.LVL969:
 11592              	.LBB16601:
 11593              	.LBB16599:
  97:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 11594              		.loc 34 97 0
 11595 0d5c 7405     		je	.L589
 11596 0d5e E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 11596      00
 11597              	.LVL970:
 11598              	.L589:
 11599              	.LBE16599:
 11600              	.LBE16601:
 11601              	.LBB16602:
 11602              	.LBB16603:
 11603              		.loc 23 1148 0
 11604 0d63 488B7424 		movq	112(%rsp), %rsi
 11604      70
 11605 0d68 488D7C24 		leaq	112(%rsp), %rdi
 11605      70
 11606              	.LVL971:
 11607              	.LEHB47:
 11608 0d6d E8000000 		call	_ZNSt6vectorIN2gr5tag_tESaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE
 11608      00
 11609              	.LVL972:
 11610              	.LEHE47:
 11611 0d72 E969FEFF 		jmp	.L585
 11611      FF
 11612              	.LVL973:
 11613              	.L613:
 11614              	.LBE16603:
 11615              	.LBE16602:
GAS LISTING /tmp/ccvmoMuv.s 			page 638


 11616              	.LBB16604:
 11617              	.LBB16605:
  97:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 11618              		.loc 34 97 0
 11619 0d77 488B7C24 		movq	104(%rsp), %rdi
 11619      68
 11620 0d7c 4889C5   		movq	%rax, %rbp
 11621              	.LVL974:
 11622 0d7f 4885FF   		testq	%rdi, %rdi
 11623 0d82 7405     		je	.L601
 11624 0d84 E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 11624      00
 11625              	.LVL975:
 11626              	.L601:
 11627              	.LBE16605:
 11628              	.LBE16604:
 11629              	.LBE16570:
 11630              	.LBE16636:
 11631              	.LBB16637:
 11632              	.LBB16638:
 426:/usr/include/c++/6/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 11633              		.loc 23 426 0
 11634 0d89 4C8B6424 		movq	120(%rsp), %r12
 11634      78
 11635 0d8e 488B5C24 		movq	112(%rsp), %rbx
 11635      70
 11636              	.LVL976:
 11637              	.LBB16639:
 11638              	.LBB16640:
 11639              	.LBB16641:
 11640              	.LBB16642:
 11641              	.LBB16643:
 11642              		.loc 44 102 0
 11643 0d93 4939DC   		cmpq	%rbx, %r12
 11644 0d96 7446     		je	.L604
 11645              	.LVL977:
 11646              	.L609:
 11647              	.LBB16644:
 11648              	.LBB16645:
 11649              	.LBB16646:
 11650              	.LBB16647:
 426:/usr/include/c++/6/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 11651              		.loc 23 426 0
 11652 0d98 488B7B20 		movq	32(%rbx), %rdi
 11653              	.LVL978:
 11654              	.LBB16648:
 11655              	.LBB16649:
 11656              	.LBB16650:
 177:/usr/include/c++/6/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 11657              		.loc 23 177 0
 11658 0d9c 4885FF   		testq	%rdi, %rdi
 11659 0d9f 7405     		je	.L605
 11660              	.LVL979:
 11661              	.LBB16651:
 11662              	.LBB16652:
 11663              	.LBB16653:
 11664              		.loc 12 110 0
GAS LISTING /tmp/ccvmoMuv.s 			page 639


 11665 0da1 E8000000 		call	_ZdlPv@PLT
 11665      00
 11666              	.LVL980:
 11667              	.L605:
 11668              	.LBE16653:
 11669              	.LBE16652:
 11670              	.LBE16651:
 11671              	.LBE16650:
 11672              	.LBE16649:
 11673              	.LBE16648:
 11674              	.LBE16647:
 11675              	.LBE16646:
 11676              	.LBB16654:
 11677              	.LBB16655:
  97:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 11678              		.loc 34 97 0
 11679 0da6 488B7B18 		movq	24(%rbx), %rdi
 11680 0daa 4885FF   		testq	%rdi, %rdi
 11681 0dad 7405     		je	.L606
 11682 0daf E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 11682      00
 11683              	.LVL981:
 11684              	.L606:
 11685              	.LBE16655:
 11686              	.LBE16654:
 11687              	.LBB16656:
 11688              	.LBB16657:
 11689 0db4 488B7B10 		movq	16(%rbx), %rdi
 11690 0db8 4885FF   		testq	%rdi, %rdi
 11691 0dbb 7405     		je	.L607
 11692 0dbd E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 11692      00
 11693              	.LVL982:
 11694              	.L607:
 11695              	.LBE16657:
 11696              	.LBE16656:
 11697              	.LBB16658:
 11698              	.LBB16659:
 11699 0dc2 488B7B08 		movq	8(%rbx), %rdi
 11700 0dc6 4885FF   		testq	%rdi, %rdi
 11701 0dc9 7405     		je	.L608
 11702 0dcb E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 11702      00
 11703              	.LVL983:
 11704              	.L608:
 11705              	.LBE16659:
 11706              	.LBE16658:
 11707              	.LBE16645:
 11708              	.LBE16644:
 11709              		.loc 44 102 0
 11710 0dd0 4883C338 		addq	$56, %rbx
 11711              	.LVL984:
 11712 0dd4 4939DC   		cmpq	%rbx, %r12
 11713 0dd7 75BF     		jne	.L609
 11714 0dd9 488B5C24 		movq	112(%rsp), %rbx
 11714      70
 11715              	.LVL985:
GAS LISTING /tmp/ccvmoMuv.s 			page 640


 11716              	.L604:
 11717              	.LBE16643:
 11718              	.LBE16642:
 11719              	.LBE16641:
 11720              	.LBE16640:
 11721              	.LBE16639:
 11722              	.LBB16660:
 11723              	.LBB16661:
 11724              	.LBB16662:
 177:/usr/include/c++/6/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 11725              		.loc 23 177 0
 11726 0dde 4885DB   		testq	%rbx, %rbx
 11727 0de1 7408     		je	.L610
 11728              	.LVL986:
 11729              	.LBB16663:
 11730              	.LBB16664:
 11731              	.LBB16665:
 11732              		.loc 12 110 0
 11733 0de3 4889DF   		movq	%rbx, %rdi
 11734 0de6 E8000000 		call	_ZdlPv@PLT
 11734      00
 11735              	.LVL987:
 11736              	.L610:
 11737 0deb 4889EF   		movq	%rbp, %rdi
 11738              	.LEHB48:
 11739 0dee E8000000 		call	_Unwind_Resume@PLT
 11739      00
 11740              	.LVL988:
 11741              	.LEHE48:
 11742              	.L612:
 11743              	.LBE16665:
 11744              	.LBE16664:
 11745              	.LBE16663:
 11746              	.LBE16662:
 11747              	.LBE16661:
 11748              	.LBE16660:
 11749              	.LBE16638:
 11750              	.LBE16637:
 11751              	.LBB16666:
 11752              	.LBB16606:
 11753              	.LBB16568:
 11754              	.LBB16569:
  97:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 11755              		.loc 34 97 0
 11756 0df3 488B7C24 		movq	96(%rsp), %rdi
 11756      60
 11757 0df8 4889C5   		movq	%rax, %rbp
 11758              	.LVL989:
 11759 0dfb 4885FF   		testq	%rdi, %rdi
 11760 0dfe 7489     		je	.L601
 11761 0e00 E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 11761      00
 11762              	.LVL990:
 11763 0e05 EB82     		jmp	.L601
 11764              	.LVL991:
 11765              	.L611:
 11766 0e07 4889C5   		movq	%rax, %rbp
GAS LISTING /tmp/ccvmoMuv.s 			page 641


 11767 0e0a E97AFFFF 		jmp	.L601
 11767      FF
 11768              	.LBE16569:
 11769              	.LBE16568:
 11770              	.LBE16606:
 11771              	.LBE16666:
 11772              		.cfi_endproc
 11773              	.LFE11029:
 11774              		.section	.gcc_except_table
 11775              	.LLSDA11029:
 11776 00a9 FF       		.byte	0xff
 11777 00aa FF       		.byte	0xff
 11778 00ab 01       		.byte	0x1
 11779 00ac 2B       		.uleb128 .LLSDACSE11029-.LLSDACSB11029
 11780              	.LLSDACSB11029:
 11781 00ad CC01     		.uleb128 .LEHB42-.LFB11029
 11782 00af AE02     		.uleb128 .LEHE42-.LEHB42
 11783 00b1 A70A     		.uleb128 .L611-.LFB11029
 11784 00b3 00       		.uleb128 0
 11785 00b4 FF03     		.uleb128 .LEHB43-.LFB11029
 11786 00b6 05       		.uleb128 .LEHE43-.LEHB43
 11787 00b7 930A     		.uleb128 .L612-.LFB11029
 11788 00b9 00       		.uleb128 0
 11789 00ba AB04     		.uleb128 .LEHB44-.LFB11029
 11790 00bc 05       		.uleb128 .LEHE44-.LEHB44
 11791 00bd A70A     		.uleb128 .L611-.LFB11029
 11792 00bf 00       		.uleb128 0
 11793 00c0 A106     		.uleb128 .LEHB45-.LFB11029
 11794 00c2 BB02     		.uleb128 .LEHE45-.LEHB45
 11795 00c4 A70A     		.uleb128 .L611-.LFB11029
 11796 00c6 00       		.uleb128 0
 11797 00c7 E108     		.uleb128 .LEHB46-.LFB11029
 11798 00c9 05       		.uleb128 .LEHE46-.LEHB46
 11799 00ca 9709     		.uleb128 .L613-.LFB11029
 11800 00cc 00       		.uleb128 0
 11801 00cd 8D09     		.uleb128 .LEHB47-.LFB11029
 11802 00cf 05       		.uleb128 .LEHE47-.LEHB47
 11803 00d0 A70A     		.uleb128 .L611-.LFB11029
 11804 00d2 00       		.uleb128 0
 11805 00d3 8E0A     		.uleb128 .LEHB48-.LFB11029
 11806 00d5 05       		.uleb128 .LEHE48-.LEHB48
 11807 00d6 00       		.uleb128 0
 11808 00d7 00       		.uleb128 0
 11809              	.LLSDACSE11029:
 11810              		.text
 11812              		.section	.text._ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrIN
 11813              		.align 2
 11814              		.p2align 4,,15
 11815              		.weak	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15erro
 11817              	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error_info_
 11818              	.LFB14011:
1596:/usr/include/c++/6/bits/stl_tree.h ****       _M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen& __node_gen)
 11819              		.loc 19 1596 0
 11820              		.cfi_startproc
 11821              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 11822              		.cfi_lsda 0x1b,.LLSDA14011
 11823              	.LVL992:
GAS LISTING /tmp/ccvmoMuv.s 			page 642


 11824 0000 4157     		pushq	%r15
 11825              		.cfi_def_cfa_offset 16
 11826              		.cfi_offset 15, -16
 11827 0002 4156     		pushq	%r14
 11828              		.cfi_def_cfa_offset 24
 11829              		.cfi_offset 14, -24
 11830 0004 4989FF   		movq	%rdi, %r15
 11831              	.LVL993:
 11832 0007 4155     		pushq	%r13
 11833              		.cfi_def_cfa_offset 32
 11834              		.cfi_offset 13, -32
 11835 0009 4154     		pushq	%r12
 11836              		.cfi_def_cfa_offset 40
 11837              		.cfi_offset 12, -40
 11838 000b 4989CC   		movq	%rcx, %r12
 11839 000e 55       		pushq	%rbp
 11840              		.cfi_def_cfa_offset 48
 11841              		.cfi_offset 6, -48
 11842 000f 53       		pushq	%rbx
 11843              		.cfi_def_cfa_offset 56
 11844              		.cfi_offset 3, -56
 11845 0010 4889F5   		movq	%rsi, %rbp
 11846 0013 4883EC18 		subq	$24, %rsp
 11847              		.cfi_def_cfa_offset 80
 11848              	.LBB16845:
 11849              	.LBB16846:
 11850              	.LBB16847:
 11851              	.LBB16848:
 11852              	.LBB16849:
 11853              	.LBB16850:
 423:/usr/include/c++/6/bits/stl_tree.h **** 	    return _M_nodes;
 11854              		.loc 19 423 0
 11855 0017 488B5908 		movq	8(%rcx), %rbx
 11856 001b 4885DB   		testq	%rbx, %rbx
 11857 001e 0F841E03 		je	.L669
 11857      0000
 11858              	.LVL994:
 427:/usr/include/c++/6/bits/stl_tree.h **** 	  if (_M_nodes)
 11859              		.loc 19 427 0
 11860 0024 488B4308 		movq	8(%rbx), %rax
 428:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 11861              		.loc 19 428 0
 11862 0028 4885C0   		testq	%rax, %rax
 427:/usr/include/c++/6/bits/stl_tree.h **** 	  if (_M_nodes)
 11863              		.loc 19 427 0
 11864 002b 48894108 		movq	%rax, 8(%rcx)
 428:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 11865              		.loc 19 428 0
 11866 002f 0F84BC02 		je	.L670
 11866      0000
 430:/usr/include/c++/6/bits/stl_tree.h **** 		{
 11867              		.loc 19 430 0
 11868 0035 483B5818 		cmpq	24(%rax), %rbx
 11869 0039 0F844D02 		je	.L738
 11869      0000
 446:/usr/include/c++/6/bits/stl_tree.h **** 	    }
 11870              		.loc 19 446 0
GAS LISTING /tmp/ccvmoMuv.s 			page 643


 11871 003f 48C74010 		movq	$0, 16(%rax)
 11871      00000000 
 11872              	.LVL995:
 11873              	.L675:
 11874              	.LBE16850:
 11875              	.LBE16849:
 11876              	.LBB16858:
 11877              	.LBB16859:
 11878              	.LBB16860:
 11879              	.LBB16861:
 11880              	.LBB16862:
 11881              	.LBB16863:
 11882              	.LBB16864:
 473:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 11883              		.loc 28 473 0
 11884 0047 4C8B6B30 		movq	48(%rbx), %r13
 11885 004b 4D85ED   		testq	%r13, %r13
 11886 004e 7418     		je	.L677
 11887              	.LVL996:
 11888              	.LBB16865:
 11889              	.LBB16866:
 11890              	.LBB16867:
 11891              	.LBB16868:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 11892              		.loc 1 50 0
 11893 0050 41BEFFFF 		movl	$-1, %r14d
 11893      FFFF
 11894 0056 4489F0   		movl	%r14d, %eax
 11895              	#APP
 11896              	# 50 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 11897              		lock
 11898              		xadd %eax, 8(%r13)
 11899              	# 0 "" 2
 11900              	.LVL997:
 11901              	#NO_APP
 11902              	.LBE16868:
 11903              	.LBE16867:
 144:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
 11904              		.loc 1 144 0
 11905 005f 83F801   		cmpl	$1, %eax
 11906 0062 0F849502 		je	.L739
 11906      0000
 11907              	.LVL998:
 11908              	.L677:
 11909              	.LBE16866:
 11910              	.LBE16865:
 11911              	.LBE16864:
 11912              	.LBE16863:
 11913              	.LBE16862:
 11914              	.LBE16861:
 11915              	.LBE16860:
 11916              	.LBE16859:
 11917              	.LBE16858:
 11918              	.LBB16897:
 11919              	.LBB16898:
 11920              	.LBB16899:
 11921              	.LBB16900:
GAS LISTING /tmp/ccvmoMuv.s 			page 644


 11922              	.LBB16901:
 11923              		.file 45 "/usr/include/c++/6/bits/stl_pair.h"
   1:/usr/include/c++/6/bits/stl_pair.h **** // Pair implementation -*- C++ -*-
   2:/usr/include/c++/6/bits/stl_pair.h **** 
   3:/usr/include/c++/6/bits/stl_pair.h **** // Copyright (C) 2001-2016 Free Software Foundation, Inc.
   4:/usr/include/c++/6/bits/stl_pair.h **** //
   5:/usr/include/c++/6/bits/stl_pair.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/6/bits/stl_pair.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/6/bits/stl_pair.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/6/bits/stl_pair.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/6/bits/stl_pair.h **** // any later version.
  10:/usr/include/c++/6/bits/stl_pair.h **** 
  11:/usr/include/c++/6/bits/stl_pair.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/6/bits/stl_pair.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/6/bits/stl_pair.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/6/bits/stl_pair.h **** // GNU General Public License for more details.
  15:/usr/include/c++/6/bits/stl_pair.h **** 
  16:/usr/include/c++/6/bits/stl_pair.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/6/bits/stl_pair.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/6/bits/stl_pair.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/6/bits/stl_pair.h **** 
  20:/usr/include/c++/6/bits/stl_pair.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/6/bits/stl_pair.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/6/bits/stl_pair.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/6/bits/stl_pair.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/6/bits/stl_pair.h **** 
  25:/usr/include/c++/6/bits/stl_pair.h **** /*
  26:/usr/include/c++/6/bits/stl_pair.h ****  *
  27:/usr/include/c++/6/bits/stl_pair.h ****  * Copyright (c) 1994
  28:/usr/include/c++/6/bits/stl_pair.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/6/bits/stl_pair.h ****  *
  30:/usr/include/c++/6/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/6/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/6/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/6/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/6/bits/stl_pair.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/6/bits/stl_pair.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/6/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/6/bits/stl_pair.h ****  *
  38:/usr/include/c++/6/bits/stl_pair.h ****  *
  39:/usr/include/c++/6/bits/stl_pair.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/6/bits/stl_pair.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/6/bits/stl_pair.h ****  *
  42:/usr/include/c++/6/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/6/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/6/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/6/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/6/bits/stl_pair.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/6/bits/stl_pair.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/6/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/6/bits/stl_pair.h ****  */
  50:/usr/include/c++/6/bits/stl_pair.h **** 
  51:/usr/include/c++/6/bits/stl_pair.h **** /** @file bits/stl_pair.h
  52:/usr/include/c++/6/bits/stl_pair.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/6/bits/stl_pair.h ****  *  Do not attempt to use it directly. @headername{utility}
  54:/usr/include/c++/6/bits/stl_pair.h ****  */
  55:/usr/include/c++/6/bits/stl_pair.h **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 645


  56:/usr/include/c++/6/bits/stl_pair.h **** #ifndef _STL_PAIR_H
  57:/usr/include/c++/6/bits/stl_pair.h **** #define _STL_PAIR_H 1
  58:/usr/include/c++/6/bits/stl_pair.h **** 
  59:/usr/include/c++/6/bits/stl_pair.h **** #include <bits/move.h> // for std::move / std::forward, and std::swap
  60:/usr/include/c++/6/bits/stl_pair.h **** 
  61:/usr/include/c++/6/bits/stl_pair.h **** #if __cplusplus >= 201103L
  62:/usr/include/c++/6/bits/stl_pair.h **** #include <type_traits> // for std::__decay_and_strip too
  63:/usr/include/c++/6/bits/stl_pair.h **** #endif
  64:/usr/include/c++/6/bits/stl_pair.h **** 
  65:/usr/include/c++/6/bits/stl_pair.h **** namespace std _GLIBCXX_VISIBILITY(default)
  66:/usr/include/c++/6/bits/stl_pair.h **** {
  67:/usr/include/c++/6/bits/stl_pair.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  68:/usr/include/c++/6/bits/stl_pair.h **** 
  69:/usr/include/c++/6/bits/stl_pair.h ****   /**
  70:/usr/include/c++/6/bits/stl_pair.h ****    *  @addtogroup utilities
  71:/usr/include/c++/6/bits/stl_pair.h ****    *  @{
  72:/usr/include/c++/6/bits/stl_pair.h ****    */
  73:/usr/include/c++/6/bits/stl_pair.h **** 
  74:/usr/include/c++/6/bits/stl_pair.h **** #if __cplusplus >= 201103L
  75:/usr/include/c++/6/bits/stl_pair.h ****   /// piecewise_construct_t
  76:/usr/include/c++/6/bits/stl_pair.h ****   struct piecewise_construct_t { explicit piecewise_construct_t() = default; };
  77:/usr/include/c++/6/bits/stl_pair.h **** 
  78:/usr/include/c++/6/bits/stl_pair.h ****   /// piecewise_construct
  79:/usr/include/c++/6/bits/stl_pair.h ****   constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();
  80:/usr/include/c++/6/bits/stl_pair.h **** 
  81:/usr/include/c++/6/bits/stl_pair.h ****   // Forward declarations.
  82:/usr/include/c++/6/bits/stl_pair.h ****   template<typename...>
  83:/usr/include/c++/6/bits/stl_pair.h ****     class tuple;
  84:/usr/include/c++/6/bits/stl_pair.h **** 
  85:/usr/include/c++/6/bits/stl_pair.h ****   template<std::size_t...>
  86:/usr/include/c++/6/bits/stl_pair.h ****     struct _Index_tuple;
  87:/usr/include/c++/6/bits/stl_pair.h **** 
  88:/usr/include/c++/6/bits/stl_pair.h ****   // Concept utility functions, reused in conditionally-explicit
  89:/usr/include/c++/6/bits/stl_pair.h ****   // constructors.
  90:/usr/include/c++/6/bits/stl_pair.h ****   // See PR 70437, don't look at is_constructible or
  91:/usr/include/c++/6/bits/stl_pair.h ****   // is_convertible if the types are the same to
  92:/usr/include/c++/6/bits/stl_pair.h ****   // avoid querying those properties for incomplete types.
  93:/usr/include/c++/6/bits/stl_pair.h ****   template <bool, typename _T1, typename _T2>
  94:/usr/include/c++/6/bits/stl_pair.h ****     struct _PCC
  95:/usr/include/c++/6/bits/stl_pair.h ****     {
  96:/usr/include/c++/6/bits/stl_pair.h ****       template <typename _U1, typename _U2>
  97:/usr/include/c++/6/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
  98:/usr/include/c++/6/bits/stl_pair.h ****       {
  99:/usr/include/c++/6/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 100:/usr/include/c++/6/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&>>::value;
 101:/usr/include/c++/6/bits/stl_pair.h ****       }
 102:/usr/include/c++/6/bits/stl_pair.h **** 
 103:/usr/include/c++/6/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 104:/usr/include/c++/6/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 105:/usr/include/c++/6/bits/stl_pair.h ****       {
 106:/usr/include/c++/6/bits/stl_pair.h **** 	return __and_<is_convertible<const _U1&, _T1>,
 107:/usr/include/c++/6/bits/stl_pair.h **** 		      is_convertible<const _U2&, _T2>>::value;
 108:/usr/include/c++/6/bits/stl_pair.h ****       }
 109:/usr/include/c++/6/bits/stl_pair.h **** 
 110:/usr/include/c++/6/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 111:/usr/include/c++/6/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 112:/usr/include/c++/6/bits/stl_pair.h ****       {
GAS LISTING /tmp/ccvmoMuv.s 			page 646


 113:/usr/include/c++/6/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 114:/usr/include/c++/6/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>>::value;
 115:/usr/include/c++/6/bits/stl_pair.h ****       }
 116:/usr/include/c++/6/bits/stl_pair.h **** 
 117:/usr/include/c++/6/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 118:/usr/include/c++/6/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 119:/usr/include/c++/6/bits/stl_pair.h ****       {
 120:/usr/include/c++/6/bits/stl_pair.h **** 	return __and_<is_convertible<_U1&&, _T1>,
 121:/usr/include/c++/6/bits/stl_pair.h **** 		      is_convertible<_U2&&, _T2>>::value;
 122:/usr/include/c++/6/bits/stl_pair.h ****       }
 123:/usr/include/c++/6/bits/stl_pair.h **** 
 124:/usr/include/c++/6/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 125:/usr/include/c++/6/bits/stl_pair.h ****       static constexpr bool _CopyMovePair()
 126:/usr/include/c++/6/bits/stl_pair.h ****       {
 127:/usr/include/c++/6/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<const _U1&, _T1>,
 128:/usr/include/c++/6/bits/stl_pair.h **** 				  is_convertible<_U2&&, _T2>>;
 129:/usr/include/c++/6/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 130:/usr/include/c++/6/bits/stl_pair.h **** 				       __do_converts,
 131:/usr/include/c++/6/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 132:/usr/include/c++/6/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 133:/usr/include/c++/6/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>,
 134:/usr/include/c++/6/bits/stl_pair.h **** 		      __converts
 135:/usr/include/c++/6/bits/stl_pair.h **** 		      >::value;
 136:/usr/include/c++/6/bits/stl_pair.h ****       }
 137:/usr/include/c++/6/bits/stl_pair.h **** 
 138:/usr/include/c++/6/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 139:/usr/include/c++/6/bits/stl_pair.h ****       static constexpr bool _MoveCopyPair()
 140:/usr/include/c++/6/bits/stl_pair.h ****       {
 141:/usr/include/c++/6/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<_U1&&, _T1>,
 142:/usr/include/c++/6/bits/stl_pair.h **** 				  is_convertible<const _U2&, _T2>>;
 143:/usr/include/c++/6/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 144:/usr/include/c++/6/bits/stl_pair.h **** 				       __do_converts,
 145:/usr/include/c++/6/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 146:/usr/include/c++/6/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 147:/usr/include/c++/6/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&&>,
 148:/usr/include/c++/6/bits/stl_pair.h **** 		      __converts
 149:/usr/include/c++/6/bits/stl_pair.h **** 		      >::value;
 150:/usr/include/c++/6/bits/stl_pair.h ****       }
 151:/usr/include/c++/6/bits/stl_pair.h ****   };
 152:/usr/include/c++/6/bits/stl_pair.h **** 
 153:/usr/include/c++/6/bits/stl_pair.h ****   template <typename _T1, typename _T2>
 154:/usr/include/c++/6/bits/stl_pair.h ****     struct _PCC<false, _T1, _T2>
 155:/usr/include/c++/6/bits/stl_pair.h ****     {
 156:/usr/include/c++/6/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 157:/usr/include/c++/6/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
 158:/usr/include/c++/6/bits/stl_pair.h ****       {
 159:/usr/include/c++/6/bits/stl_pair.h **** 	return false;
 160:/usr/include/c++/6/bits/stl_pair.h ****       }
 161:/usr/include/c++/6/bits/stl_pair.h **** 
 162:/usr/include/c++/6/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 163:/usr/include/c++/6/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 164:/usr/include/c++/6/bits/stl_pair.h ****       {
 165:/usr/include/c++/6/bits/stl_pair.h **** 	return false;
 166:/usr/include/c++/6/bits/stl_pair.h ****       }
 167:/usr/include/c++/6/bits/stl_pair.h **** 
 168:/usr/include/c++/6/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 169:/usr/include/c++/6/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
GAS LISTING /tmp/ccvmoMuv.s 			page 647


 170:/usr/include/c++/6/bits/stl_pair.h ****       {
 171:/usr/include/c++/6/bits/stl_pair.h **** 	return false;
 172:/usr/include/c++/6/bits/stl_pair.h ****       }
 173:/usr/include/c++/6/bits/stl_pair.h **** 
 174:/usr/include/c++/6/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 175:/usr/include/c++/6/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 176:/usr/include/c++/6/bits/stl_pair.h ****       {
 177:/usr/include/c++/6/bits/stl_pair.h **** 	return false;
 178:/usr/include/c++/6/bits/stl_pair.h ****       }
 179:/usr/include/c++/6/bits/stl_pair.h ****   };
 180:/usr/include/c++/6/bits/stl_pair.h **** 
 181:/usr/include/c++/6/bits/stl_pair.h ****   struct __wrap_nonesuch : std::__nonesuch {
 182:/usr/include/c++/6/bits/stl_pair.h ****     explicit __wrap_nonesuch(const __nonesuch&) = delete;
 183:/usr/include/c++/6/bits/stl_pair.h ****   };
 184:/usr/include/c++/6/bits/stl_pair.h ****   
 185:/usr/include/c++/6/bits/stl_pair.h **** #endif
 186:/usr/include/c++/6/bits/stl_pair.h **** 
 187:/usr/include/c++/6/bits/stl_pair.h ****  /**
 188:/usr/include/c++/6/bits/stl_pair.h ****    *  @brief Struct holding two objects of arbitrary type.
 189:/usr/include/c++/6/bits/stl_pair.h ****    *
 190:/usr/include/c++/6/bits/stl_pair.h ****    *  @tparam _T1  Type of first object.
 191:/usr/include/c++/6/bits/stl_pair.h ****    *  @tparam _T2  Type of second object.
 192:/usr/include/c++/6/bits/stl_pair.h ****    */
 193:/usr/include/c++/6/bits/stl_pair.h ****   template<typename _T1, typename _T2>
 194:/usr/include/c++/6/bits/stl_pair.h ****     struct pair
 195:/usr/include/c++/6/bits/stl_pair.h ****     {
 196:/usr/include/c++/6/bits/stl_pair.h ****       typedef _T1 first_type;    /// @c first_type is the first bound type
 197:/usr/include/c++/6/bits/stl_pair.h ****       typedef _T2 second_type;   /// @c second_type is the second bound type
 198:/usr/include/c++/6/bits/stl_pair.h **** 
 199:/usr/include/c++/6/bits/stl_pair.h ****       _T1 first;                 /// @c first is a copy of the first object
 200:/usr/include/c++/6/bits/stl_pair.h ****       _T2 second;                /// @c second is a copy of the second object
 201:/usr/include/c++/6/bits/stl_pair.h **** 
 202:/usr/include/c++/6/bits/stl_pair.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 203:/usr/include/c++/6/bits/stl_pair.h ****       // 265.  std::pair::pair() effects overly restrictive
 204:/usr/include/c++/6/bits/stl_pair.h ****       /** The default constructor creates @c first and @c second using their
 205:/usr/include/c++/6/bits/stl_pair.h ****        *  respective default constructors.  */
 206:/usr/include/c++/6/bits/stl_pair.h **** #if __cplusplus >= 201103L
 207:/usr/include/c++/6/bits/stl_pair.h ****       template <typename _U1 = _T1,
 208:/usr/include/c++/6/bits/stl_pair.h ****                 typename _U2 = _T2,
 209:/usr/include/c++/6/bits/stl_pair.h ****                 typename enable_if<__and_<
 210:/usr/include/c++/6/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U1>,
 211:/usr/include/c++/6/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U2>>
 212:/usr/include/c++/6/bits/stl_pair.h ****                                    ::value, bool>::type = true>
 213:/usr/include/c++/6/bits/stl_pair.h **** #endif
 214:/usr/include/c++/6/bits/stl_pair.h ****       _GLIBCXX_CONSTEXPR pair()
 215:/usr/include/c++/6/bits/stl_pair.h ****       : first(), second() { }
 216:/usr/include/c++/6/bits/stl_pair.h **** 
 217:/usr/include/c++/6/bits/stl_pair.h **** #if __cplusplus >= 201103L
 218:/usr/include/c++/6/bits/stl_pair.h ****       template <typename _U1 = _T1,
 219:/usr/include/c++/6/bits/stl_pair.h ****                 typename _U2 = _T2,
 220:/usr/include/c++/6/bits/stl_pair.h ****                 typename enable_if<__and_<
 221:/usr/include/c++/6/bits/stl_pair.h ****                        is_default_constructible<_U1>,
 222:/usr/include/c++/6/bits/stl_pair.h ****                        is_default_constructible<_U2>,
 223:/usr/include/c++/6/bits/stl_pair.h ****                        __not_<
 224:/usr/include/c++/6/bits/stl_pair.h ****                          __and_<__is_implicitly_default_constructible<_U1>,
 225:/usr/include/c++/6/bits/stl_pair.h ****                                 __is_implicitly_default_constructible<_U2>>>>
 226:/usr/include/c++/6/bits/stl_pair.h ****                                    ::value, bool>::type = false>
GAS LISTING /tmp/ccvmoMuv.s 			page 648


 227:/usr/include/c++/6/bits/stl_pair.h ****       explicit constexpr pair()
 228:/usr/include/c++/6/bits/stl_pair.h ****       : first(), second() { }
 229:/usr/include/c++/6/bits/stl_pair.h **** #endif
 230:/usr/include/c++/6/bits/stl_pair.h **** 
 231:/usr/include/c++/6/bits/stl_pair.h ****       /** Two objects may be passed to a @c pair constructor to be copied.  */
 232:/usr/include/c++/6/bits/stl_pair.h **** #if __cplusplus < 201103L
 233:/usr/include/c++/6/bits/stl_pair.h ****       pair(const _T1& __a, const _T2& __b)
 234:/usr/include/c++/6/bits/stl_pair.h ****       : first(__a), second(__b) { }
 235:/usr/include/c++/6/bits/stl_pair.h **** #else
 236:/usr/include/c++/6/bits/stl_pair.h ****       // Shortcut for constraining the templates that don't take pairs.
 237:/usr/include/c++/6/bits/stl_pair.h ****       using _PCCP = _PCC<true, _T1, _T2>;
 238:/usr/include/c++/6/bits/stl_pair.h **** 
 239:/usr/include/c++/6/bits/stl_pair.h ****       template<typename _U1 = _T1, typename _U2=_T2, typename
 240:/usr/include/c++/6/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 241:/usr/include/c++/6/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 242:/usr/include/c++/6/bits/stl_pair.h **** 	                 && _PCCP::template
 243:/usr/include/c++/6/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 244:/usr/include/c++/6/bits/stl_pair.h ****                          bool>::type=true>
 245:/usr/include/c++/6/bits/stl_pair.h ****       constexpr pair(const _T1& __a, const _T2& __b)
 246:/usr/include/c++/6/bits/stl_pair.h ****       : first(__a), second(__b) { }
 247:/usr/include/c++/6/bits/stl_pair.h **** 
 248:/usr/include/c++/6/bits/stl_pair.h ****        template<typename _U1 = _T1, typename _U2=_T2, typename
 249:/usr/include/c++/6/bits/stl_pair.h **** 		enable_if<_PCCP::template
 250:/usr/include/c++/6/bits/stl_pair.h **** 			    _ConstructiblePair<_U1, _U2>()
 251:/usr/include/c++/6/bits/stl_pair.h **** 	                  && !_PCCP::template
 252:/usr/include/c++/6/bits/stl_pair.h **** 			    _ImplicitlyConvertiblePair<_U1, _U2>(),
 253:/usr/include/c++/6/bits/stl_pair.h ****                          bool>::type=false>
 254:/usr/include/c++/6/bits/stl_pair.h ****       explicit constexpr pair(const _T1& __a, const _T2& __b)
 255:/usr/include/c++/6/bits/stl_pair.h ****       : first(__a), second(__b) { }
 256:/usr/include/c++/6/bits/stl_pair.h **** #endif
 257:/usr/include/c++/6/bits/stl_pair.h **** 
 258:/usr/include/c++/6/bits/stl_pair.h ****       /** There is also a templated copy ctor for the @c pair class itself.  */
 259:/usr/include/c++/6/bits/stl_pair.h **** #if __cplusplus < 201103L
 260:/usr/include/c++/6/bits/stl_pair.h ****       template<typename _U1, typename _U2>
 261:/usr/include/c++/6/bits/stl_pair.h **** 	pair(const pair<_U1, _U2>& __p)
 262:/usr/include/c++/6/bits/stl_pair.h **** 	: first(__p.first), second(__p.second) { }
 263:/usr/include/c++/6/bits/stl_pair.h **** #else
 264:/usr/include/c++/6/bits/stl_pair.h ****       // Shortcut for constraining the templates that take pairs.
 265:/usr/include/c++/6/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 266:/usr/include/c++/6/bits/stl_pair.h ****         using _PCCFP = _PCC<!is_same<_T1, _U1>::value
 267:/usr/include/c++/6/bits/stl_pair.h **** 			    || !is_same<_T2, _U2>::value,
 268:/usr/include/c++/6/bits/stl_pair.h **** 			    _T1, _T2>;
 269:/usr/include/c++/6/bits/stl_pair.h **** 
 270:/usr/include/c++/6/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 271:/usr/include/c++/6/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 272:/usr/include/c++/6/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 273:/usr/include/c++/6/bits/stl_pair.h **** 	                 && _PCCFP<_U1, _U2>::template
 274:/usr/include/c++/6/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 275:/usr/include/c++/6/bits/stl_pair.h **** 			  bool>::type=true>
 276:/usr/include/c++/6/bits/stl_pair.h ****         constexpr pair(const pair<_U1, _U2>& __p)
 277:/usr/include/c++/6/bits/stl_pair.h ****         : first(__p.first), second(__p.second) { }
 278:/usr/include/c++/6/bits/stl_pair.h **** 
 279:/usr/include/c++/6/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 280:/usr/include/c++/6/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 281:/usr/include/c++/6/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 282:/usr/include/c++/6/bits/stl_pair.h **** 			 && !_PCCFP<_U1, _U2>::template
 283:/usr/include/c++/6/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
GAS LISTING /tmp/ccvmoMuv.s 			page 649


 284:/usr/include/c++/6/bits/stl_pair.h ****                          bool>::type=false>
 285:/usr/include/c++/6/bits/stl_pair.h **** 	explicit constexpr pair(const pair<_U1, _U2>& __p)
 286:/usr/include/c++/6/bits/stl_pair.h **** 	: first(__p.first), second(__p.second) { }
 287:/usr/include/c++/6/bits/stl_pair.h **** 
 288:/usr/include/c++/6/bits/stl_pair.h ****       constexpr pair(const pair&) = default;
 11924              		.loc 45 288 0
 11925 0068 488B4520 		movq	32(%rbp), %rax
 11926 006c 48894320 		movq	%rax, 32(%rbx)
 11927              	.LVL999:
 11928              	.LBB16902:
 11929              	.LBB16903:
 405:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 11930              		.loc 27 405 0
 11931 0070 488B4528 		movq	40(%rbp), %rax
 11932 0074 48894328 		movq	%rax, 40(%rbx)
 11933              	.LVL1000:
 11934              	.LBB16904:
 11935              	.LBB16905:
 479:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 11936              		.loc 28 479 0
 11937 0078 488B4530 		movq	48(%rbp), %rax
 484:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 11938              		.loc 28 484 0
 11939 007c 4885C0   		testq	%rax, %rax
 479:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 11940              		.loc 28 479 0
 11941 007f 48894330 		movq	%rax, 48(%rbx)
 484:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 11942              		.loc 28 484 0
 11943 0083 0F845E02 		je	.L706
 11943      0000
 11944              	.LVL1001:
 11945              	.LBB16906:
 11946              	.LBB16907:
 11947              	.LBB16908:
 11948              	.LBB16909:
  66:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** }
 11949              		.loc 1 66 0
 11950 0089 48895C24 		movq	%rbx, 8(%rsp)
 11950      08
 11951              	#APP
 11952              	# 66 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 11953              		lock
 11954              		incl 8(%rax)
 11955              	# 0 "" 2
 11956              	.LVL1002:
 11957              	#NO_APP
 11958              	.L680:
 11959              	.LBE16909:
 11960              	.LBE16908:
 11961              	.LBE16907:
 11962              	.LBE16906:
 11963              	.LBE16905:
 11964              	.LBE16904:
 11965              	.LBE16903:
 11966              	.LBE16902:
 11967              	.LBE16901:
GAS LISTING /tmp/ccvmoMuv.s 			page 650


 11968              	.LBE16900:
 11969              	.LBE16899:
 11970              	.LBE16898:
 11971              	.LBE16897:
 11972              	.LBE16848:
 11973              	.LBE16847:
 584:/usr/include/c++/6/bits/stl_tree.h **** 	  __tmp->_M_left = 0;
 11974              		.loc 19 584 0
 11975 0092 488B4C24 		movq	8(%rsp), %rcx
 11975      08
 11976 0097 8B4500   		movl	0(%rbp), %eax
 586:/usr/include/c++/6/bits/stl_tree.h **** 	  return __tmp;
 11977              		.loc 19 586 0
 11978 009a 48C74118 		movq	$0, 24(%rcx)
 11978      00000000 
 11979              	.LVL1003:
 11980              	.LBE16846:
 11981              	.LBE16845:
 11982              	.LBB16954:
1605:/usr/include/c++/6/bits/stl_tree.h **** 	      __top->_M_right = _M_copy(_S_right(__x), __top, __node_gen);
 11983              		.loc 19 1605 0
 11984 00a2 48837D18 		cmpq	$0, 24(%rbp)
 11984      00
 11985              	.LBE16954:
 11986              	.LBB17076:
 11987              	.LBB16951:
 586:/usr/include/c++/6/bits/stl_tree.h **** 	  return __tmp;
 11988              		.loc 19 586 0
 11989 00a7 4889CB   		movq	%rcx, %rbx
 584:/usr/include/c++/6/bits/stl_tree.h **** 	  __tmp->_M_left = 0;
 11990              		.loc 19 584 0
 11991 00aa 8901     		movl	%eax, (%rcx)
 585:/usr/include/c++/6/bits/stl_tree.h **** 	  __tmp->_M_right = 0;
 11992              		.loc 19 585 0
 11993 00ac 48C74110 		movq	$0, 16(%rcx)
 11993      00000000 
 11994              	.LBE16951:
 11995              	.LBE17076:
1601:/usr/include/c++/6/bits/stl_tree.h **** 
 11996              		.loc 19 1601 0
 11997 00b4 48895108 		movq	%rdx, 8(%rcx)
 11998              	.LBB17077:
1605:/usr/include/c++/6/bits/stl_tree.h **** 	      __top->_M_right = _M_copy(_S_right(__x), __top, __node_gen);
 11999              		.loc 19 1605 0
 12000 00b8 7416     		je	.L681
 12001              	.LVL1004:
1606:/usr/include/c++/6/bits/stl_tree.h **** 	    __p = __top;
 12002              		.loc 19 1606 0
 12003 00ba 488B7518 		movq	24(%rbp), %rsi
 12004 00be 4C89E1   		movq	%r12, %rcx
 12005 00c1 4889DA   		movq	%rbx, %rdx
 12006 00c4 4C89FF   		movq	%r15, %rdi
 12007              	.LEHB49:
 12008 00c7 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 12008      00
 12009              	.LVL1005:
 12010 00cc 48894318 		movq	%rax, 24(%rbx)
GAS LISTING /tmp/ccvmoMuv.s 			page 651


 12011              	.LVL1006:
 12012              	.L681:
1610:/usr/include/c++/6/bits/stl_tree.h **** 	      {
 12013              		.loc 19 1610 0
 12014 00d0 488B6D10 		movq	16(%rbp), %rbp
 12015              	.LVL1007:
 12016 00d4 4C8B6C24 		movq	8(%rsp), %r13
 12016      08
 12017              	.LBB16955:
 12018              	.LBB16956:
 12019              	.LBB16957:
 12020              	.LBB16958:
 12021              	.LBB16959:
 12022              	.LBB16960:
 12023              	.LBB16961:
 12024              	.LBB16962:
 12025              	.LBB16963:
 12026              	.LBB16964:
 12027              	.LBB16965:
 12028              	.LBB16966:
 12029              	.LBB16967:
 12030              	.LBB16968:
 12031              	.LBB16969:
 12032              	.LBB16970:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 12033              		.loc 1 50 0
 12034 00d9 41BEFFFF 		movl	$-1, %r14d
 12034      FFFF
 12035              	.LBE16970:
 12036              	.LBE16969:
 12037              	.LBE16968:
 12038              	.LBE16967:
 12039              	.LBE16966:
 12040              	.LBE16965:
 12041              	.LBE16964:
 12042              	.LBE16963:
 12043              	.LBE16962:
 12044              	.LBE16961:
 12045              	.LBE16960:
 12046              	.LBE16959:
 12047              	.LBE16958:
 12048              	.LBE16957:
 12049              	.LBE16956:
 12050              	.LBE16955:
1610:/usr/include/c++/6/bits/stl_tree.h **** 	      {
 12051              		.loc 19 1610 0
 12052 00df 4885ED   		testq	%rbp, %rbp
 12053 00e2 0F859300 		jne	.L733
 12053      0000
 12054 00e8 E9830100 		jmp	.L668
 12054      00
 12055              	.LVL1008:
 12056 00ed 0F1F00   		.p2align 4,,10
 12057              		.p2align 3
 12058              	.L685:
 12059              	.LBB17072:
 12060              	.LBB17067:
GAS LISTING /tmp/ccvmoMuv.s 			page 652


 12061              	.LBB17062:
 12062              	.LBB17058:
 12063              	.LBB17054:
 12064              	.LBB17009:
 12065              	.LBB17010:
 446:/usr/include/c++/6/bits/stl_tree.h **** 	    }
 12066              		.loc 19 446 0
 12067 00f0 48C74010 		movq	$0, 16(%rax)
 12067      00000000 
 12068              	.L689:
 12069              	.LVL1009:
 12070              	.LBE17010:
 12071              	.LBE17009:
 12072              	.LBB17019:
 12073              	.LBB17006:
 12074              	.LBB17003:
 12075              	.LBB17000:
 12076              	.LBB16997:
 12077              	.LBB16994:
 12078              	.LBB16991:
 473:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 12079              		.loc 28 473 0
 12080 00f8 488B4330 		movq	48(%rbx), %rax
 12081 00fc 4885C0   		testq	%rax, %rax
 12082 00ff 7411     		je	.L691
 12083              	.LVL1010:
 12084              	.LBB16988:
 12085              	.LBB16985:
 12086              	.LBB16972:
 12087              	.LBB16971:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 12088              		.loc 1 50 0
 12089 0101 4489F2   		movl	%r14d, %edx
 12090              	#APP
 12091              	# 50 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 12092              		lock
 12093              		xadd %edx, 8(%rax)
 12094              	# 0 "" 2
 12095              	.LVL1011:
 12096              	#NO_APP
 12097              	.LBE16971:
 12098              	.LBE16972:
 144:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
 12099              		.loc 1 144 0
 12100 0109 83FA01   		cmpl	$1, %edx
 12101 010c 0F84FE00 		je	.L740
 12101      0000
 12102              	.LVL1012:
 12103              	.L691:
 12104              	.LBE16985:
 12105              	.LBE16988:
 12106              	.LBE16991:
 12107              	.LBE16994:
 12108              	.LBE16997:
 12109              	.LBE17000:
 12110              	.LBE17003:
 12111              	.LBE17006:
GAS LISTING /tmp/ccvmoMuv.s 			page 653


 12112              	.LBE17019:
 12113              	.LBB17020:
 12114              	.LBB17021:
 12115              	.LBB17022:
 12116              	.LBB17023:
 12117              	.LBB17024:
 12118              		.loc 45 288 0
 12119 0112 488B4520 		movq	32(%rbp), %rax
 12120 0116 48894320 		movq	%rax, 32(%rbx)
 12121              	.LVL1013:
 12122              	.LBB17025:
 12123              	.LBB17026:
 405:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 12124              		.loc 27 405 0
 12125 011a 488B4528 		movq	40(%rbp), %rax
 12126 011e 48894328 		movq	%rax, 40(%rbx)
 12127              	.LVL1014:
 12128              	.LBB17027:
 12129              	.LBB17028:
 479:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 12130              		.loc 28 479 0
 12131 0122 488B4530 		movq	48(%rbp), %rax
 484:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 12132              		.loc 28 484 0
 12133 0126 4885C0   		testq	%rax, %rax
 479:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 12134              		.loc 28 479 0
 12135 0129 48894330 		movq	%rax, 48(%rbx)
 484:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 12136              		.loc 28 484 0
 12137 012d 7404     		je	.L694
 12138              	.LVL1015:
 12139              	.LBE17028:
 12140              	.LBE17027:
 12141              	.LBE17026:
 12142              	.LBE17025:
 12143              	.LBE17024:
 12144              	.LBE17023:
 12145              	.LBE17022:
 12146              	.LBE17021:
 12147              	.LBE17020:
 12148              	.LBB17029:
 12149              	.LBB17030:
 12150              	.LBB17031:
 12151              	.LBB17032:
 12152              	.LBB17033:
 12153              	.LBB17034:
 12154              	.LBB17035:
 12155              	.LBB17036:
 12156              	.LBB17037:
 12157              	.LBB17038:
 12158              	.LBB17039:
 12159              	.LBB17040:
 12160              	.LBB17041:
 12161              	.LBB17042:
 12162              	.LBB17043:
  66:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** }
GAS LISTING /tmp/ccvmoMuv.s 			page 654


 12163              		.loc 1 66 0
 12164              	#APP
 12165              	# 66 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 12166              		lock
 12167              		incl 8(%rax)
 12168              	# 0 "" 2
 12169              	.LVL1016:
 12170              	#NO_APP
 12171              	.L694:
 12172              	.LBE17043:
 12173              	.LBE17042:
 12174              	.LBE17041:
 12175              	.LBE17040:
 12176              	.LBE17039:
 12177              	.LBE17038:
 12178              	.LBE17037:
 12179              	.LBE17036:
 12180              	.LBE17035:
 12181              	.LBE17034:
 12182              	.LBE17033:
 12183              	.LBE17032:
 12184              	.LBE17031:
 12185              	.LBE17030:
 12186              	.LBE17029:
 12187              	.LBE17054:
 12188              	.LBE17058:
 584:/usr/include/c++/6/bits/stl_tree.h **** 	  __tmp->_M_left = 0;
 12189              		.loc 19 584 0
 12190 0133 8B4500   		movl	0(%rbp), %eax
 586:/usr/include/c++/6/bits/stl_tree.h **** 	  return __tmp;
 12191              		.loc 19 586 0
 12192 0136 48C74318 		movq	$0, 24(%rbx)
 12192      00000000 
 12193              	.LVL1017:
 12194              	.LBE17062:
 12195              	.LBE17067:
1615:/usr/include/c++/6/bits/stl_tree.h **** 		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
 12196              		.loc 19 1615 0
 12197 013e 488B7518 		movq	24(%rbp), %rsi
 12198              	.LBB17068:
 12199              	.LBB17063:
 585:/usr/include/c++/6/bits/stl_tree.h **** 	  __tmp->_M_right = 0;
 12200              		.loc 19 585 0
 12201 0142 48C74310 		movq	$0, 16(%rbx)
 12201      00000000 
 584:/usr/include/c++/6/bits/stl_tree.h **** 	  __tmp->_M_left = 0;
 12202              		.loc 19 584 0
 12203 014a 8903     		movl	%eax, (%rbx)
 12204              	.LBE17063:
 12205              	.LBE17068:
1613:/usr/include/c++/6/bits/stl_tree.h **** 		__y->_M_parent = __p;
 12206              		.loc 19 1613 0
 12207 014c 49895D10 		movq	%rbx, 16(%r13)
1615:/usr/include/c++/6/bits/stl_tree.h **** 		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
 12208              		.loc 19 1615 0
 12209 0150 4885F6   		testq	%rsi, %rsi
1614:/usr/include/c++/6/bits/stl_tree.h **** 		if (__x->_M_right)
GAS LISTING /tmp/ccvmoMuv.s 			page 655


 12210              		.loc 19 1614 0
 12211 0153 4C896B08 		movq	%r13, 8(%rbx)
1615:/usr/include/c++/6/bits/stl_tree.h **** 		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
 12212              		.loc 19 1615 0
 12213 0157 7412     		je	.L695
 12214              	.LVL1018:
1616:/usr/include/c++/6/bits/stl_tree.h **** 		__p = __y;
 12215              		.loc 19 1616 0
 12216 0159 4C89E1   		movq	%r12, %rcx
 12217 015c 4889DA   		movq	%rbx, %rdx
 12218 015f 4C89FF   		movq	%r15, %rdi
 12219 0162 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 12219      00
 12220              	.LVL1019:
 12221              	.LEHE49:
 12222 0167 48894318 		movq	%rax, 24(%rbx)
 12223              	.L695:
 12224              	.LVL1020:
 12225 016b 488B6D10 		movq	16(%rbp), %rbp
 12226              	.LVL1021:
 12227 016f 4989DD   		movq	%rbx, %r13
 12228              	.LBE17072:
1610:/usr/include/c++/6/bits/stl_tree.h **** 	      {
 12229              		.loc 19 1610 0
 12230 0172 4885ED   		testq	%rbp, %rbp
 12231 0175 0F84F500 		je	.L668
 12231      0000
 12232              	.LVL1022:
 12233              	.L733:
 12234              	.LBB17073:
 12235              	.LBB17069:
 12236              	.LBB17064:
 12237              	.LBB17059:
 12238              	.LBB17055:
 12239              	.LBB17049:
 12240              	.LBB17017:
 423:/usr/include/c++/6/bits/stl_tree.h **** 	    return _M_nodes;
 12241              		.loc 19 423 0
 12242 017b 498B5C24 		movq	8(%r12), %rbx
 12242      08
 12243 0180 4885DB   		testq	%rbx, %rbx
 12244 0183 0F84CF00 		je	.L683
 12244      0000
 12245              	.LVL1023:
 427:/usr/include/c++/6/bits/stl_tree.h **** 	  if (_M_nodes)
 12246              		.loc 19 427 0
 12247 0189 488B4308 		movq	8(%rbx), %rax
 428:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 12248              		.loc 19 428 0
 12249 018d 4885C0   		testq	%rax, %rax
 427:/usr/include/c++/6/bits/stl_tree.h **** 	  if (_M_nodes)
 12250              		.loc 19 427 0
 12251 0190 49894424 		movq	%rax, 8(%r12)
 12251      08
 428:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 12252              		.loc 19 428 0
 12253 0195 7469     		je	.L684
GAS LISTING /tmp/ccvmoMuv.s 			page 656


 430:/usr/include/c++/6/bits/stl_tree.h **** 		{
 12254              		.loc 19 430 0
 12255 0197 483B5818 		cmpq	24(%rax), %rbx
 12256 019b 0F854FFF 		jne	.L685
 12256      FFFF
 432:/usr/include/c++/6/bits/stl_tree.h **** 
 12257              		.loc 19 432 0
 12258 01a1 48C74018 		movq	$0, 24(%rax)
 12258      00000000 
 434:/usr/include/c++/6/bits/stl_tree.h **** 		    {
 12259              		.loc 19 434 0
 12260 01a9 488B4010 		movq	16(%rax), %rax
 12261 01ad 4885C0   		testq	%rax, %rax
 12262 01b0 0F8442FF 		je	.L689
 12262      FFFF
 12263              	.LBB17011:
 12264              	.LBB17012:
 438:/usr/include/c++/6/bits/stl_tree.h **** 			_M_nodes = _M_nodes->_M_right;
 12265              		.loc 19 438 0
 12266 01b6 488B5018 		movq	24(%rax), %rdx
 12267              	.LBE17012:
 12268              	.LBE17011:
 436:/usr/include/c++/6/bits/stl_tree.h **** 
 12269              		.loc 19 436 0
 12270 01ba 49894424 		movq	%rax, 8(%r12)
 12270      08
 12271              	.LVL1024:
 12272              	.LBB17015:
 12273              	.LBB17013:
 438:/usr/include/c++/6/bits/stl_tree.h **** 			_M_nodes = _M_nodes->_M_right;
 12274              		.loc 19 438 0
 12275 01bf 4885D2   		testq	%rdx, %rdx
 12276 01c2 750F     		jne	.L688
 12277 01c4 E9BB0000 		jmp	.L741
 12277      00
 12278 01c9 0F1F8000 		.p2align 4,,10
 12278      000000
 12279              		.p2align 3
 12280              	.L708:
 12281 01d0 4889C2   		movq	%rax, %rdx
 12282              	.L688:
 12283 01d3 488B4218 		movq	24(%rdx), %rax
 12284 01d7 4885C0   		testq	%rax, %rax
 12285 01da 75F4     		jne	.L708
 12286 01dc 49895424 		movq	%rdx, 8(%r12)
 12286      08
 12287              	.L687:
 441:/usr/include/c++/6/bits/stl_tree.h **** 			_M_nodes = _M_nodes->_M_left;
 12288              		.loc 19 441 0
 12289 01e1 488B4210 		movq	16(%rdx), %rax
 12290 01e5 4885C0   		testq	%rax, %rax
 12291 01e8 0F840AFF 		je	.L689
 12291      FFFF
 442:/usr/include/c++/6/bits/stl_tree.h **** 		    }
 12292              		.loc 19 442 0
 12293 01ee 49894424 		movq	%rax, 8(%r12)
 12293      08
GAS LISTING /tmp/ccvmoMuv.s 			page 657


 12294 01f3 E900FFFF 		jmp	.L689
 12294      FF
 12295              	.LVL1025:
 12296 01f8 0F1F8400 		.p2align 4,,10
 12296      00000000 
 12297              		.p2align 3
 12298              	.L684:
 12299              	.LBE17013:
 12300              	.LBE17015:
 449:/usr/include/c++/6/bits/stl_tree.h **** 
 12301              		.loc 19 449 0
 12302 0200 49C70424 		movq	$0, (%r12)
 12302      00000000 
 12303 0208 E9EBFEFF 		jmp	.L689
 12303      FF
 12304              	.LVL1026:
 12305 020d 0F1F00   		.p2align 4,,10
 12306              		.p2align 3
 12307              	.L740:
 12308              	.LBE17017:
 12309              	.LBE17049:
 12310              	.LBB17050:
 12311              	.LBB17007:
 12312              	.LBB17004:
 12313              	.LBB17001:
 12314              	.LBB16998:
 12315              	.LBB16995:
 12316              	.LBB16992:
 12317              	.LBB16989:
 12318              	.LBB16986:
 12319              	.LBB16973:
 12320              	.LBB16974:
 146:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****             weak_release();
 12321              		.loc 1 146 0
 12322 0210 488B10   		movq	(%rax), %rdx
 12323 0213 4889C7   		movq	%rax, %rdi
 12324 0216 48890424 		movq	%rax, (%rsp)
 12325 021a FF5210   		call	*16(%rdx)
 12326              	.LVL1027:
 12327              	.LBB16975:
 12328              	.LBB16976:
 12329              	.LBB16977:
 12330              	.LBB16978:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 12331              		.loc 1 50 0
 12332 021d 4489F2   		movl	%r14d, %edx
 12333 0220 488B0424 		movq	(%rsp), %rax
 12334              	#APP
 12335              	# 50 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 12336              		lock
 12337              		xadd %edx, 12(%rax)
 12338              	# 0 "" 2
 12339              	.LVL1028:
 12340              	#NO_APP
 12341              	.LBE16978:
 12342              	.LBE16977:
 158:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
GAS LISTING /tmp/ccvmoMuv.s 			page 658


 12343              		.loc 1 158 0
 12344 0229 83FA01   		cmpl	$1, %edx
 12345 022c 0F85E0FE 		jne	.L691
 12345      FFFF
 12346              		.loc 1 160 0
 12347 0232 488B10   		movq	(%rax), %rdx
 12348 0235 488D3D00 		leaq	_ZN5boost6detail15sp_counted_base7destroyEv(%rip), %rdi
 12348      000000
 12349 023c 488B4A18 		movq	24(%rdx), %rcx
 12350 0240 4839F9   		cmpq	%rdi, %rcx
 12351              	.LBB16979:
 12352              	.LBB16980:
 126:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     }
 12353              		.loc 1 126 0
 12354 0243 4889C7   		movq	%rax, %rdi
 12355 0246 0F859400 		jne	.L693
 12355      0000
 12356 024c FF5208   		call	*8(%rdx)
 12357              	.LVL1029:
 12358 024f E9BEFEFF 		jmp	.L691
 12358      FF
 12359              	.LVL1030:
 12360              		.p2align 4,,10
 12361 0254 0F1F4000 		.p2align 3
 12362              	.L683:
 12363              	.LBE16980:
 12364              	.LBE16979:
 12365              	.LBE16976:
 12366              	.LBE16975:
 12367              	.LBE16974:
 12368              	.LBE16973:
 12369              	.LBE16986:
 12370              	.LBE16989:
 12371              	.LBE16992:
 12372              	.LBE16995:
 12373              	.LBE16998:
 12374              	.LBE17001:
 12375              	.LBE17004:
 12376              	.LBE17007:
 12377              	.LBE17050:
 12378              	.LBB17051:
 12379              	.LBB17048:
 12380              	.LBB17044:
 12381              	.LBB17045:
 12382              	.LBB17046:
 12383              	.LBB17047:
 104:/usr/include/c++/6/ext/new_allocator.h ****       }
 12384              		.loc 12 104 0
 12385 0258 BF380000 		movl	$56, %edi
 12385      00
 12386              	.LEHB50:
 12387 025d E8000000 		call	_Znwm@PLT
 12387      00
 12388              	.LVL1031:
 12389              	.LEHE50:
 12390 0262 4889C3   		movq	%rax, %rbx
 12391              	.LVL1032:
GAS LISTING /tmp/ccvmoMuv.s 			page 659


 12392 0265 E9A8FEFF 		jmp	.L691
 12392      FF
 12393              	.LVL1033:
 12394 026a 660F1F44 		.p2align 4,,10
 12394      0000
 12395              		.p2align 3
 12396              	.L668:
 12397              	.LBE17047:
 12398              	.LBE17046:
 12399              	.LBE17045:
 12400              	.LBE17044:
 12401              	.LBE17048:
 12402              	.LBE17051:
 12403              	.LBE17055:
 12404              	.LBE17059:
 12405              	.LBE17064:
 12406              	.LBE17069:
 12407              	.LBE17073:
 12408              	.LBE17077:
1627:/usr/include/c++/6/bits/stl_tree.h **** 
 12409              		.loc 19 1627 0
 12410 0270 488B4424 		movq	8(%rsp), %rax
 12410      08
 12411 0275 4883C418 		addq	$24, %rsp
 12412              		.cfi_remember_state
 12413              		.cfi_def_cfa_offset 56
 12414 0279 5B       		popq	%rbx
 12415              		.cfi_def_cfa_offset 48
 12416 027a 5D       		popq	%rbp
 12417              		.cfi_def_cfa_offset 40
 12418 027b 415C     		popq	%r12
 12419              		.cfi_def_cfa_offset 32
 12420              	.LVL1034:
 12421 027d 415D     		popq	%r13
 12422              		.cfi_def_cfa_offset 24
 12423              	.LVL1035:
 12424 027f 415E     		popq	%r14
 12425              		.cfi_def_cfa_offset 16
 12426 0281 415F     		popq	%r15
 12427              		.cfi_def_cfa_offset 8
 12428              	.LVL1036:
 12429 0283 C3       		ret
 12430              	.LVL1037:
 12431              	.L741:
 12432              		.cfi_restore_state
 12433              	.LBB17078:
 12434              	.LBB17074:
 12435              	.LBB17070:
 12436              	.LBB17065:
 12437              	.LBB17060:
 12438              	.LBB17056:
 12439              	.LBB17052:
 12440              	.LBB17018:
 12441              	.LBB17016:
 12442              	.LBB17014:
 438:/usr/include/c++/6/bits/stl_tree.h **** 			_M_nodes = _M_nodes->_M_right;
 12443              		.loc 19 438 0
GAS LISTING /tmp/ccvmoMuv.s 			page 660


 12444 0284 4889C2   		movq	%rax, %rdx
 12445 0287 E955FFFF 		jmp	.L687
 12445      FF
 12446              	.LVL1038:
 12447              	.L738:
 12448              	.LBE17014:
 12449              	.LBE17016:
 12450              	.LBE17018:
 12451              	.LBE17052:
 12452              	.LBE17056:
 12453              	.LBE17060:
 12454              	.LBE17065:
 12455              	.LBE17070:
 12456              	.LBE17074:
 12457              	.LBE17078:
 12458              	.LBB17079:
 12459              	.LBB16952:
 12460              	.LBB16949:
 12461              	.LBB16947:
 12462              	.LBB16918:
 12463              	.LBB16855:
 432:/usr/include/c++/6/bits/stl_tree.h **** 
 12464              		.loc 19 432 0
 12465 028c 48C74018 		movq	$0, 24(%rax)
 12465      00000000 
 434:/usr/include/c++/6/bits/stl_tree.h **** 		    {
 12466              		.loc 19 434 0
 12467 0294 488B4010 		movq	16(%rax), %rax
 12468 0298 4885C0   		testq	%rax, %rax
 12469 029b 0F84A6FD 		je	.L675
 12469      FFFF
 436:/usr/include/c++/6/bits/stl_tree.h **** 
 12470              		.loc 19 436 0
 12471 02a1 48894108 		movq	%rax, 8(%rcx)
 12472              	.LVL1039:
 12473              	.LBB16851:
 12474              	.LBB16852:
 438:/usr/include/c++/6/bits/stl_tree.h **** 			_M_nodes = _M_nodes->_M_right;
 12475              		.loc 19 438 0
 12476 02a5 488B4818 		movq	24(%rax), %rcx
 12477              	.LVL1040:
 12478 02a9 4885C9   		testq	%rcx, %rcx
 12479 02ac 750D     		jne	.L674
 12480 02ae E9D30000 		jmp	.L742
 12480      00
 12481              		.p2align 4,,10
 12482 02b3 0F1F4400 		.p2align 3
 12482      00
 12483              	.L705:
 12484 02b8 4889C1   		movq	%rax, %rcx
 12485              	.L674:
 12486 02bb 488B4118 		movq	24(%rcx), %rax
 12487 02bf 4885C0   		testq	%rax, %rax
 12488 02c2 75F4     		jne	.L705
 12489 02c4 49894C24 		movq	%rcx, 8(%r12)
 12489      08
 12490              	.L673:
GAS LISTING /tmp/ccvmoMuv.s 			page 661


 441:/usr/include/c++/6/bits/stl_tree.h **** 			_M_nodes = _M_nodes->_M_left;
 12491              		.loc 19 441 0
 12492 02c9 488B4110 		movq	16(%rcx), %rax
 12493 02cd 4885C0   		testq	%rax, %rax
 12494 02d0 0F8471FD 		je	.L675
 12494      FFFF
 442:/usr/include/c++/6/bits/stl_tree.h **** 		    }
 12495              		.loc 19 442 0
 12496 02d6 49894424 		movq	%rax, 8(%r12)
 12496      08
 12497 02db E967FDFF 		jmp	.L675
 12497      FF
 12498              	.LVL1041:
 12499              	.L693:
 12500              	.LBE16852:
 12501              	.LBE16851:
 12502              	.LBE16855:
 12503              	.LBE16918:
 12504              	.LBE16947:
 12505              	.LBE16949:
 12506              	.LBE16952:
 12507              	.LBE17079:
 12508              	.LBB17080:
 12509              	.LBB17075:
 12510              	.LBB17071:
 12511              	.LBB17066:
 12512              	.LBB17061:
 12513              	.LBB17057:
 12514              	.LBB17053:
 12515              	.LBB17008:
 12516              	.LBB17005:
 12517              	.LBB17002:
 12518              	.LBB16999:
 12519              	.LBB16996:
 12520              	.LBB16993:
 12521              	.LBB16990:
 12522              	.LBB16987:
 12523              	.LBB16984:
 12524              	.LBB16983:
 12525              	.LBB16982:
 12526              	.LBB16981:
 12527              		.loc 1 160 0
 12528 02e0 FFD1     		call	*%rcx
 12529              	.LVL1042:
 12530 02e2 E92BFEFF 		jmp	.L691
 12530      FF
 12531              	.LVL1043:
 12532              	.L706:
 12533              	.LBE16981:
 12534              	.LBE16982:
 12535              	.LBE16983:
 12536              	.LBE16984:
 12537              	.LBE16987:
 12538              	.LBE16990:
 12539              	.LBE16993:
 12540              	.LBE16996:
 12541              	.LBE16999:
GAS LISTING /tmp/ccvmoMuv.s 			page 662


 12542              	.LBE17002:
 12543              	.LBE17005:
 12544              	.LBE17008:
 12545              	.LBE17053:
 12546              	.LBE17057:
 12547              	.LBE17061:
 12548              	.LBE17066:
 12549              	.LBE17071:
 12550              	.LBE17075:
 12551              	.LBE17080:
 12552              	.LBB17081:
 12553              	.LBB16953:
 12554              	.LBB16950:
 12555              	.LBB16948:
 12556              	.LBB16919:
 12557              	.LBB16917:
 12558              	.LBB16916:
 12559              	.LBB16915:
 12560              	.LBB16914:
 12561              	.LBB16913:
 12562              	.LBB16912:
 12563              	.LBB16911:
 12564              	.LBB16910:
 484:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 12565              		.loc 28 484 0
 12566 02e7 48895C24 		movq	%rbx, 8(%rsp)
 12566      08
 12567 02ec E9A1FDFF 		jmp	.L680
 12567      FF
 12568              	.LVL1044:
 12569              	.L670:
 12570              	.LBE16910:
 12571              	.LBE16911:
 12572              	.LBE16912:
 12573              	.LBE16913:
 12574              	.LBE16914:
 12575              	.LBE16915:
 12576              	.LBE16916:
 12577              	.LBE16917:
 12578              	.LBE16919:
 12579              	.LBB16920:
 12580              	.LBB16856:
 449:/usr/include/c++/6/bits/stl_tree.h **** 
 12581              		.loc 19 449 0
 12582 02f1 48C70100 		movq	$0, (%rcx)
 12582      000000
 12583 02f8 E94AFDFF 		jmp	.L675
 12583      FF
 12584              	.LVL1045:
 12585              	.L739:
 12586              	.LBE16856:
 12587              	.LBE16920:
 12588              	.LBB16921:
 12589              	.LBB16895:
 12590              	.LBB16893:
 12591              	.LBB16891:
 12592              	.LBB16889:
GAS LISTING /tmp/ccvmoMuv.s 			page 663


 12593              	.LBB16887:
 12594              	.LBB16885:
 12595              	.LBB16883:
 12596              	.LBB16881:
 12597              	.LBB16869:
 12598              	.LBB16870:
 146:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****             weak_release();
 12599              		.loc 1 146 0
 12600 02fd 498B4500 		movq	0(%r13), %rax
 12601 0301 48891424 		movq	%rdx, (%rsp)
 12602              	.LVL1046:
 12603 0305 4C89EF   		movq	%r13, %rdi
 12604              	.LVL1047:
 12605 0308 FF5010   		call	*16(%rax)
 12606              	.LVL1048:
 12607              	.LBB16871:
 12608              	.LBB16872:
 12609              	.LBB16873:
 12610              	.LBB16874:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 12611              		.loc 1 50 0
 12612              	#APP
 12613              	# 50 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 12614              		lock
 12615              		xadd %r14d, 12(%r13)
 12616              	# 0 "" 2
 12617              	.LVL1049:
 12618              	#NO_APP
 12619              	.LBE16874:
 12620              	.LBE16873:
 158:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
 12621              		.loc 1 158 0
 12622 0311 4183FE01 		cmpl	$1, %r14d
 12623 0315 488B1424 		movq	(%rsp), %rdx
 12624 0319 0F8549FD 		jne	.L677
 12624      FFFF
 12625              		.loc 1 160 0
 12626 031f 498B4D00 		movq	0(%r13), %rcx
 12627 0323 488D3500 		leaq	_ZN5boost6detail15sp_counted_base7destroyEv(%rip), %rsi
 12627      000000
 12628 032a 488B4118 		movq	24(%rcx), %rax
 12629 032e 4839F0   		cmpq	%rsi, %rax
 12630 0331 755B     		jne	.L679
 12631              	.LVL1050:
 12632              	.LBB16875:
 12633              	.LBB16876:
 126:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     }
 12634              		.loc 1 126 0
 12635 0333 4C89EF   		movq	%r13, %rdi
 12636 0336 FF5108   		call	*8(%rcx)
 12637              	.LVL1051:
 12638 0339 488B1424 		movq	(%rsp), %rdx
 12639 033d E926FDFF 		jmp	.L677
 12639      FF
 12640              	.LVL1052:
 12641              	.L669:
 12642              	.LBE16876:
GAS LISTING /tmp/ccvmoMuv.s 			page 664


 12643              	.LBE16875:
 12644              	.LBE16872:
 12645              	.LBE16871:
 12646              	.LBE16870:
 12647              	.LBE16869:
 12648              	.LBE16881:
 12649              	.LBE16883:
 12650              	.LBE16885:
 12651              	.LBE16887:
 12652              	.LBE16889:
 12653              	.LBE16891:
 12654              	.LBE16893:
 12655              	.LBE16895:
 12656              	.LBE16921:
 12657              	.LBB16922:
 12658              	.LBB16923:
 12659              	.LBB16924:
 12660              	.LBB16925:
 12661              	.LBB16926:
 12662              	.LBB16927:
 104:/usr/include/c++/6/ext/new_allocator.h ****       }
 12663              		.loc 12 104 0
 12664 0342 BF380000 		movl	$56, %edi
 12664      00
 12665              	.LVL1053:
 12666 0347 48891424 		movq	%rdx, (%rsp)
 12667              	.LVL1054:
 12668              	.LEHB51:
 12669 034b E8000000 		call	_Znwm@PLT
 12669      00
 12670              	.LVL1055:
 12671              	.LEHE51:
 12672 0350 4889C7   		movq	%rax, %rdi
 12673 0353 48894424 		movq	%rax, 8(%rsp)
 12673      08
 12674              	.LVL1056:
 12675              	.LBE16927:
 12676              	.LBE16926:
 12677              	.LBE16925:
 12678              	.LBE16924:
 12679              	.LBB16928:
 12680              	.LBB16929:
 12681              	.LBB16930:
 12682              	.LBB16931:
 12683              	.LBB16932:
 12684              		.loc 45 288 0
 12685 0358 488B4520 		movq	32(%rbp), %rax
 12686              	.LVL1057:
 12687              	.LBB16933:
 12688              	.LBB16934:
 12689              	.LBB16935:
 12690              	.LBB16936:
 484:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 12691              		.loc 28 484 0
 12692 035c 488B1424 		movq	(%rsp), %rdx
 12693              	.LBE16936:
 12694              	.LBE16935:
GAS LISTING /tmp/ccvmoMuv.s 			page 665


 12695              	.LBE16934:
 12696              	.LBE16933:
 12697              		.loc 45 288 0
 12698 0360 48894720 		movq	%rax, 32(%rdi)
 12699              	.LVL1058:
 12700              	.LBB16944:
 12701              	.LBB16943:
 405:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 12702              		.loc 27 405 0
 12703 0364 488B4528 		movq	40(%rbp), %rax
 12704 0368 48894728 		movq	%rax, 40(%rdi)
 12705              	.LVL1059:
 12706              	.LBB16942:
 12707              	.LBB16941:
 479:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 12708              		.loc 28 479 0
 12709 036c 488B4530 		movq	48(%rbp), %rax
 484:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 12710              		.loc 28 484 0
 12711 0370 4885C0   		testq	%rax, %rax
 479:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 12712              		.loc 28 479 0
 12713 0373 48894730 		movq	%rax, 48(%rdi)
 484:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 12714              		.loc 28 484 0
 12715 0377 0F8415FD 		je	.L680
 12715      FFFF
 12716              	.LVL1060:
 12717              	.LBB16937:
 12718              	.LBB16938:
 12719              	.LBB16939:
 12720              	.LBB16940:
  66:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** }
 12721              		.loc 1 66 0
 12722              	#APP
 12723              	# 66 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 12724              		lock
 12725              		incl 8(%rax)
 12726              	# 0 "" 2
 12727              	.LVL1061:
 12728              	#NO_APP
 12729 0381 E90CFDFF 		jmp	.L680
 12729      FF
 12730              	.LVL1062:
 12731              	.L742:
 12732              	.LBE16940:
 12733              	.LBE16939:
 12734              	.LBE16938:
 12735              	.LBE16937:
 12736              	.LBE16941:
 12737              	.LBE16942:
 12738              	.LBE16943:
 12739              	.LBE16944:
 12740              	.LBE16932:
 12741              	.LBE16931:
 12742              	.LBE16930:
 12743              	.LBE16929:
GAS LISTING /tmp/ccvmoMuv.s 			page 666


 12744              	.LBE16928:
 12745              	.LBE16923:
 12746              	.LBE16922:
 12747              	.LBB16945:
 12748              	.LBB16857:
 12749              	.LBB16854:
 12750              	.LBB16853:
 438:/usr/include/c++/6/bits/stl_tree.h **** 			_M_nodes = _M_nodes->_M_right;
 12751              		.loc 19 438 0
 12752 0386 4889C1   		movq	%rax, %rcx
 12753 0389 E93BFFFF 		jmp	.L673
 12753      FF
 12754              	.LVL1063:
 12755              	.L679:
 12756 038e 48891424 		movq	%rdx, (%rsp)
 12757              	.LVL1064:
 12758              	.LBE16853:
 12759              	.LBE16854:
 12760              	.LBE16857:
 12761              	.LBE16945:
 12762              	.LBB16946:
 12763              	.LBB16896:
 12764              	.LBB16894:
 12765              	.LBB16892:
 12766              	.LBB16890:
 12767              	.LBB16888:
 12768              	.LBB16886:
 12769              	.LBB16884:
 12770              	.LBB16882:
 12771              	.LBB16880:
 12772              	.LBB16879:
 12773              	.LBB16878:
 12774              	.LBB16877:
 12775              		.loc 1 160 0
 12776 0392 4C89EF   		movq	%r13, %rdi
 12777 0395 FFD0     		call	*%rax
 12778              	.LVL1065:
 12779 0397 488B1424 		movq	(%rsp), %rdx
 12780 039b E9C8FCFF 		jmp	.L677
 12780      FF
 12781              	.LVL1066:
 12782              	.L710:
 12783              	.LBE16877:
 12784              	.LBE16878:
 12785              	.LBE16879:
 12786              	.LBE16880:
 12787              	.LBE16882:
 12788              	.LBE16884:
 12789              	.LBE16886:
 12790              	.LBE16888:
 12791              	.LBE16890:
 12792              	.LBE16892:
 12793              	.LBE16894:
 12794              	.LBE16896:
 12795              	.LBE16946:
 12796              	.LBE16948:
 12797              	.LBE16950:
GAS LISTING /tmp/ccvmoMuv.s 			page 667


 12798              	.LBE16953:
 12799              	.LBE17081:
1621:/usr/include/c++/6/bits/stl_tree.h **** 	  {
 12800              		.loc 19 1621 0
 12801 03a0 4889C7   		movq	%rax, %rdi
 12802 03a3 E8000000 		call	__cxa_begin_catch@PLT
 12802      00
 12803              	.LVL1067:
1623:/usr/include/c++/6/bits/stl_tree.h **** 	    __throw_exception_again;
 12804              		.loc 19 1623 0
 12805 03a8 488B7424 		movq	8(%rsp), %rsi
 12805      08
 12806 03ad 4C89FF   		movq	%r15, %rdi
 12807 03b0 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 12807      00
 12808              	.LVL1068:
 12809              	.LEHB52:
1624:/usr/include/c++/6/bits/stl_tree.h **** 	  }
 12810              		.loc 19 1624 0
 12811 03b5 E8000000 		call	__cxa_rethrow@PLT
 12811      00
 12812              	.LVL1069:
 12813              	.LEHE52:
 12814              	.L711:
 12815 03ba 4889C3   		movq	%rax, %rbx
1621:/usr/include/c++/6/bits/stl_tree.h **** 	  {
 12816              		.loc 19 1621 0
 12817 03bd E8000000 		call	__cxa_end_catch@PLT
 12817      00
 12818              	.LVL1070:
 12819 03c2 4889DF   		movq	%rbx, %rdi
 12820              	.LEHB53:
 12821 03c5 E8000000 		call	_Unwind_Resume@PLT
 12821      00
 12822              	.LVL1071:
 12823              	.LEHE53:
 12824              		.cfi_endproc
 12825              	.LFE14011:
 12826              		.section	.gcc_except_table
 12827              		.align 4
 12828              	.LLSDA14011:
 12829 00d8 FF       		.byte	0xff
 12830 00d9 9B       		.byte	0x9b
 12831 00da 25       		.uleb128 .LLSDATT14011-.LLSDATTD14011
 12832              	.LLSDATTD14011:
 12833 00db 01       		.byte	0x1
 12834 00dc 1D       		.uleb128 .LLSDACSE14011-.LLSDACSB14011
 12835              	.LLSDACSB14011:
 12836 00dd C701     		.uleb128 .LEHB49-.LFB14011
 12837 00df A001     		.uleb128 .LEHE49-.LEHB49
 12838 00e1 A007     		.uleb128 .L710-.LFB14011
 12839 00e3 01       		.uleb128 0x1
 12840 00e4 DD04     		.uleb128 .LEHB50-.LFB14011
 12841 00e6 05       		.uleb128 .LEHE50-.LEHB50
 12842 00e7 A007     		.uleb128 .L710-.LFB14011
 12843 00e9 01       		.uleb128 0x1
 12844 00ea CB06     		.uleb128 .LEHB51-.LFB14011
GAS LISTING /tmp/ccvmoMuv.s 			page 668


 12845 00ec 05       		.uleb128 .LEHE51-.LEHB51
 12846 00ed 00       		.uleb128 0
 12847 00ee 00       		.uleb128 0
 12848 00ef B507     		.uleb128 .LEHB52-.LFB14011
 12849 00f1 05       		.uleb128 .LEHE52-.LEHB52
 12850 00f2 BA07     		.uleb128 .L711-.LFB14011
 12851 00f4 00       		.uleb128 0
 12852 00f5 C507     		.uleb128 .LEHB53-.LFB14011
 12853 00f7 05       		.uleb128 .LEHE53-.LEHB53
 12854 00f8 00       		.uleb128 0
 12855 00f9 00       		.uleb128 0
 12856              	.LLSDACSE14011:
 12857 00fa 01       		.byte	0x1
 12858 00fb 00       		.byte	0
 12859              		.align 4
 12860 00fc 00000000 		.long	0
 12861              	
 12862              	.LLSDATT14011:
 12863              		.section	.text._ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrIN
 12865              		.section	.text._ZNK5boost16exception_detail25error_info_container_impl5cloneEv,"axG",@progbits,_ZN
 12866              		.align 2
 12867              		.p2align 4,,15
 12868              		.weak	_ZNK5boost16exception_detail25error_info_container_impl5cloneEv
 12870              	_ZNK5boost16exception_detail25error_info_container_impl5cloneEv:
 12871              	.LFB9854:
 176:/usr/include/boost/exception/info.hpp **** 
 177:/usr/include/boost/exception/info.hpp ****             refcount_ptr<error_info_container>
 178:/usr/include/boost/exception/info.hpp ****             clone() const
 12872              		.loc 3 178 0
 12873              		.cfi_startproc
 12874              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 12875              		.cfi_lsda 0x1b,.LLSDA9854
 12876              	.LVL1072:
 12877 0000 4156     		pushq	%r14
 12878              		.cfi_def_cfa_offset 16
 12879              		.cfi_offset 14, -16
 12880 0002 4155     		pushq	%r13
 12881              		.cfi_def_cfa_offset 24
 12882              		.cfi_offset 13, -24
 12883 0004 4154     		pushq	%r12
 12884              		.cfi_def_cfa_offset 32
 12885              		.cfi_offset 12, -32
 12886 0006 55       		pushq	%rbp
 12887              		.cfi_def_cfa_offset 40
 12888              		.cfi_offset 6, -40
 12889 0007 4889FD   		movq	%rdi, %rbp
 12890 000a 53       		pushq	%rbx
 12891              		.cfi_def_cfa_offset 48
 12892              		.cfi_offset 3, -48
 12893 000b 4989F4   		movq	%rsi, %r12
 12894 000e 4883EC20 		subq	$32, %rsp
 12895              		.cfi_def_cfa_offset 80
 12896              	.LBB17223:
 12897              	.LBB17224:
  28:/usr/include/boost/exception/exception.hpp ****                 {
 12898              		.loc 7 28 0
 12899 0012 48C70700 		movq	$0, (%rdi)
GAS LISTING /tmp/ccvmoMuv.s 			page 669


 12899      000000
 12900              	.LVL1073:
 12901              	.LBE17224:
 12902              	.LBE17223:
 179:/usr/include/boost/exception/info.hpp ****                 {
 180:/usr/include/boost/exception/info.hpp ****                 refcount_ptr<error_info_container> p;
 181:/usr/include/boost/exception/info.hpp ****                 error_info_container_impl * c=new error_info_container_impl;
 12903              		.loc 3 181 0
 12904 0019 BF600000 		movl	$96, %edi
 12904      00
 12905              	.LVL1074:
 12906              	.LEHB54:
 12907 001e E8000000 		call	_Znwm@PLT
 12907      00
 12908              	.LVL1075:
 12909              	.LEHE54:
 12910              	.LBB17225:
 12911              	.LBB17226:
 12912              	.LBB17227:
 12913              	.LBB17228:
 12914              	.LBB17229:
 12915              	.LBB17230:
 12916              	.LBB17231:
 12917              	.LBB17232:
 632:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_right = &this->_M_header;
 12918              		.loc 19 632 0
 12919 0023 4C8D6810 		leaq	16(%rax), %r13
 12920              	.LBE17232:
 12921              	.LBE17231:
 12922              	.LBE17230:
 12923              	.LBE17229:
 12924              	.LBE17228:
 12925              	.LBE17227:
  99:/usr/include/boost/exception/info.hpp ****                 {
 12926              		.loc 3 99 0
 12927 0027 488D1500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rdx
 12927      000000
 12928              	.LBE17226:
 12929              	.LBE17225:
 12930              	.LBB17260:
 12931              	.LBB17261:
 12932              	.LBB17262:
 12933              	.LBB17263:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 12934              		.loc 7 78 0
 12935 002e 4C8B7500 		movq	0(%rbp), %r14
 12936              	.LBE17263:
 12937              	.LBE17262:
 12938              	.LBE17261:
 12939              	.LBE17260:
 12940              		.loc 3 181 0
 12941 0032 4889C3   		movq	%rax, %rbx
 12942              	.LVL1076:
 12943              	.LBB17306:
 12944              	.LBB17258:
 12945              	.LBB17244:
 12946              	.LBB17241:
GAS LISTING /tmp/ccvmoMuv.s 			page 670


 12947              	.LBB17238:
 12948              	.LBB17235:
 602:/usr/include/c++/6/bits/stl_tree.h **** 	  { _M_initialize(); }
 12949              		.loc 19 602 0
 12950 0035 C7401000 		movl	$0, 16(%rax)
 12950      000000
 12951 003c 48C74018 		movq	$0, 24(%rax)
 12951      00000000 
 12952              	.LBE17235:
 12953              	.LBE17238:
 12954              	.LBE17241:
 12955              	.LBE17244:
  99:/usr/include/boost/exception/info.hpp ****                 {
 12956              		.loc 3 99 0
 12957 0044 488910   		movq	%rdx, (%rax)
 12958              	.LVL1077:
 12959              	.LBB17245:
 12960              	.LBB17242:
 12961              	.LBB17239:
 12962              	.LBB17236:
 602:/usr/include/c++/6/bits/stl_tree.h **** 	  { _M_initialize(); }
 12963              		.loc 19 602 0
 12964 0047 48C74030 		movq	$0, 48(%rax)
 12964      00000000 
 12965              	.LVL1078:
 12966              	.LBE17236:
 12967              	.LBE17239:
 12968              	.LBE17242:
 12969              	.LBE17245:
 12970              	.LBB17246:
 12971              	.LBB17247:
 12972              	.LBB17248:
 142:/usr/include/c++/6/bits/basic_string.h **** #else
 12973              		.loc 10 142 0
 12974 004f 488D4048 		leaq	72(%rax), %rax
 12975              	.LVL1079:
 12976              	.LBE17248:
 12977              	.LBE17247:
 12978              	.LBE17246:
 12979              	.LBB17256:
 12980              	.LBB17243:
 12981              	.LBB17240:
 12982              	.LBB17237:
 12983              	.LBB17234:
 12984              	.LBB17233:
 632:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_right = &this->_M_header;
 12985              		.loc 19 632 0
 12986 0053 4C8968D8 		movq	%r13, -40(%rax)
 633:/usr/include/c++/6/bits/stl_tree.h **** 	  }	    
 12987              		.loc 19 633 0
 12988 0057 4C8968E0 		movq	%r13, -32(%rax)
 12989              	.LVL1080:
 12990              	.LBE17233:
 12991              	.LBE17234:
 12992              	.LBE17237:
 12993              	.LBE17240:
 12994              	.LBE17243:
GAS LISTING /tmp/ccvmoMuv.s 			page 671


 12995              	.LBE17256:
 12996              	.LBE17258:
 12997              	.LBE17306:
 12998              	.LBB17307:
 12999              	.LBB17303:
 13000              	.LBB17293:
 13001              	.LBB17289:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 13002              		.loc 7 78 0
 13003 005b 4D85F6   		testq	%r14, %r14
 13004              	.LBE17289:
 13005              	.LBE17293:
 13006              	.LBE17303:
 13007              	.LBE17307:
 13008              	.LBB17308:
 13009              	.LBB17259:
 13010              	.LBB17257:
 13011              	.LBB17250:
 13012              	.LBB17249:
 142:/usr/include/c++/6/bits/basic_string.h **** #else
 13013              		.loc 10 142 0
 13014 005e 48894338 		movq	%rax, 56(%rbx)
 13015              	.LVL1081:
 13016              	.LBE17249:
 13017              	.LBE17250:
 13018              	.LBB17251:
 13019              	.LBB17252:
 13020              	.LBB17253:
 132:/usr/include/c++/6/bits/basic_string.h **** 
 13021              		.loc 10 132 0
 13022 0062 48C74340 		movq	$0, 64(%rbx)
 13022      00000000 
 13023              	.LVL1082:
 13024              	.LBE17253:
 13025              	.LBE17252:
 13026              	.LBB17254:
 13027              	.LBB17255:
 243:/usr/include/c++/6/bits/char_traits.h **** 
 13028              		.loc 9 243 0
 13029 006a C6434800 		movb	$0, 72(%rbx)
 13030              	.LVL1083:
 13031              	.LBE17255:
 13032              	.LBE17254:
 13033              	.LBE17251:
 13034              	.LBE17257:
  99:/usr/include/boost/exception/info.hpp ****                 {
 13035              		.loc 3 99 0
 13036 006e C7435800 		movl	$0, 88(%rbx)
 13036      000000
 13037              	.LVL1084:
 13038              	.LBE17259:
 13039              	.LBE17308:
 13040              	.LBB17309:
 13041              	.LBB17304:
 13042              	.LBB17294:
 13043              	.LBB17290:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
GAS LISTING /tmp/ccvmoMuv.s 			page 672


 13044              		.loc 7 78 0
 13045 0075 7422     		je	.L747
 13046 0077 498B06   		movq	(%r14), %rax
 13047 007a 488D0D00 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rcx
 13047      000000
 13048 0081 488B4020 		movq	32(%rax), %rax
 13049 0085 4839C8   		cmpq	%rcx, %rax
 13050 0088 0F854201 		jne	.L746
 13050      0000
 13051              	.LVL1085:
 13052              	.LBB17264:
 13053              	.LBB17265:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 13054              		.loc 3 168 0
 13055 008e 41836E58 		subl	$1, 88(%r14)
 13055      01
 13056 0093 0F84DF00 		je	.L773
 13056      0000
 13057              	.LVL1086:
 13058              	.L747:
 13059              	.LBE17265:
 13060              	.LBE17264:
 13061              	.LBE17290:
 13062              	.LBE17294:
  54:/usr/include/boost/exception/exception.hpp ****                 add_ref();
 13063              		.loc 7 54 0
 13064 0099 48895D00 		movq	%rbx, 0(%rbp)
 13065              	.LVL1087:
 13066              	.L745:
 13067              	.LBB17295:
 13068              	.LBB17296:
 13069              	.LBB17297:
 13070              	.LBB17298:
 162:/usr/include/boost/exception/info.hpp ****                 }
 13071              		.loc 3 162 0
 13072 009d 83435801 		addl	$1, 88(%rbx)
 13073              	.LVL1088:
 13074              	.L751:
 13075              	.LBE17298:
 13076              	.LBE17297:
 13077              	.LBE17296:
 13078              	.LBE17295:
 13079              	.LBE17304:
 13080              	.LBE17309:
 13081              	.LBB17310:
 13082              	.LBB17311:
 298:/usr/include/c++/6/bits/stl_map.h **** 	return *this;
 13083              		.loc 36 298 0
 13084 00a1 488D7B08 		leaq	8(%rbx), %rdi
 13085              	.LVL1089:
 13086 00a5 498D4424 		leaq	8(%r12), %rax
 13086      08
 13087              	.LVL1090:
 13088              	.LBB17312:
 13089              	.LBB17313:
1480:/usr/include/c++/6/bits/stl_tree.h **** 	{
 13090              		.loc 19 1480 0
GAS LISTING /tmp/ccvmoMuv.s 			page 673


 13091 00aa 4839C7   		cmpq	%rax, %rdi
 13092 00ad 0F84AF00 		je	.L743
 13092      0000
 13093              	.LVL1091:
 13094              	.LBB17314:
 13095              	.LBB17315:
 13096              	.LBB17316:
 13097              	.LBB17317:
 380:/usr/include/c++/6/bits/stl_tree.h **** 	{
 13098              		.loc 19 380 0
 13099 00b3 488B4318 		movq	24(%rbx), %rax
 13100              	.LVL1092:
 13101 00b7 488B5328 		movq	40(%rbx), %rdx
 13102 00bb 48897C24 		movq	%rdi, 16(%rsp)
 13102      10
 382:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 13103              		.loc 19 382 0
 13104 00c0 4885C0   		testq	%rax, %rax
 380:/usr/include/c++/6/bits/stl_tree.h **** 	{
 13105              		.loc 19 380 0
 13106 00c3 48890424 		movq	%rax, (%rsp)
 13107 00c7 48895424 		movq	%rdx, 8(%rsp)
 13107      08
 382:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 13108              		.loc 19 382 0
 13109 00cc 0F840E01 		je	.L753
 13109      0000
 386:/usr/include/c++/6/bits/stl_tree.h **** 		_M_nodes = _M_nodes->_M_left;
 13110              		.loc 19 386 0
 13111 00d2 488B5210 		movq	16(%rdx), %rdx
 384:/usr/include/c++/6/bits/stl_tree.h **** 
 13112              		.loc 19 384 0
 13113 00d6 48C74008 		movq	$0, 8(%rax)
 13113      00000000 
 386:/usr/include/c++/6/bits/stl_tree.h **** 		_M_nodes = _M_nodes->_M_left;
 13114              		.loc 19 386 0
 13115 00de 4885D2   		testq	%rdx, %rdx
 13116 00e1 7405     		je	.L754
 387:/usr/include/c++/6/bits/stl_tree.h **** 	    }
 13117              		.loc 19 387 0
 13118 00e3 48895424 		movq	%rdx, 8(%rsp)
 13118      08
 13119              	.L754:
 13120              	.LVL1093:
 13121 00e8 498B7424 		movq	24(%r12), %rsi
 13121      18
 13122              	.LBE17317:
 13123              	.LBE17316:
 13124              	.LBE17315:
 13125              	.LBB17320:
 13126              	.LBB17321:
 620:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_left = &this->_M_header;
 13127              		.loc 19 620 0
 13128 00ed 48C74318 		movq	$0, 24(%rbx)
 13128      00000000 
 621:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_right = &this->_M_header;
 13129              		.loc 19 621 0
GAS LISTING /tmp/ccvmoMuv.s 			page 674


 13130 00f5 4C896B20 		movq	%r13, 32(%rbx)
 622:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_node_count = 0;
 13131              		.loc 19 622 0
 13132 00f9 4C896B28 		movq	%r13, 40(%rbx)
 623:/usr/include/c++/6/bits/stl_tree.h **** 	  }
 13133              		.loc 19 623 0
 13134 00fd 48C74330 		movq	$0, 48(%rbx)
 13134      00000000 
 13135              	.LVL1094:
 13136              	.LBE17321:
 13137              	.LBE17320:
1502:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 13138              		.loc 19 1502 0
 13139 0105 4885F6   		testq	%rsi, %rsi
 13140 0108 7450     		je	.L755
 13141              	.LVL1095:
1504:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_leftmost() = _S_minimum(_M_root());
 13142              		.loc 19 1504 0
 13143 010a 4889E1   		movq	%rsp, %rcx
 13144 010d 4C89EA   		movq	%r13, %rdx
 13145              	.LEHB55:
 13146 0110 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 13146      00
 13147              	.LVL1096:
 13148              	.LEHE55:
 13149 0115 48894318 		movq	%rax, 24(%rbx)
 13150              	.LVL1097:
 13151 0119 4889C1   		movq	%rax, %rcx
 13152 011c EB05     		jmp	.L756
 13153              	.LVL1098:
 13154 011e 6690     		.p2align 4,,10
 13155              		.p2align 3
 13156              	.L762:
 13157              	.LBB17322:
 13158              	.LBB17323:
 13159              	.LBB17324:
 111:/usr/include/c++/6/bits/stl_tree.h ****       return __x;
 13160              		.loc 19 111 0
 13161 0120 4889D1   		movq	%rdx, %rcx
 13162              	.LVL1099:
 13163              	.L756:
 13164 0123 488B5110 		movq	16(%rcx), %rdx
 13165 0127 4885D2   		testq	%rdx, %rdx
 13166 012a 75F4     		jne	.L762
 13167              	.LVL1100:
 13168              	.LBE17324:
 13169              	.LBE17323:
 13170              	.LBE17322:
1505:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_rightmost() = _S_maximum(_M_root());
 13171              		.loc 19 1505 0
 13172 012c 48894B20 		movq	%rcx, 32(%rbx)
 13173              	.LVL1101:
 13174 0130 EB09     		jmp	.L757
 13175              	.LVL1102:
 13176              		.p2align 4,,10
 13177 0132 660F1F44 		.p2align 3
 13177      0000
GAS LISTING /tmp/ccvmoMuv.s 			page 675


 13178              	.L763:
 13179              	.LBB17325:
 13180              	.LBB17326:
 13181              	.LBB17327:
 125:/usr/include/c++/6/bits/stl_tree.h ****       return __x;
 13182              		.loc 19 125 0
 13183 0138 4889D0   		movq	%rdx, %rax
 13184              	.LVL1103:
 13185              	.L757:
 13186 013b 488B5018 		movq	24(%rax), %rdx
 13187 013f 4885D2   		testq	%rdx, %rdx
 13188 0142 75F4     		jne	.L763
 13189              	.LVL1104:
 13190              	.LBE17327:
 13191              	.LBE17326:
 13192              	.LBE17325:
1506:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_impl._M_node_count = __x._M_impl._M_node_count;
 13193              		.loc 19 1506 0
 13194 0144 48894328 		movq	%rax, 40(%rbx)
1507:/usr/include/c++/6/bits/stl_tree.h **** 	    }
 13195              		.loc 19 1507 0
 13196 0148 498B4424 		movq	48(%r12), %rax
 13196      30
 13197 014d 488B7C24 		movq	16(%rsp), %rdi
 13197      10
 13198 0152 48894330 		movq	%rax, 48(%rbx)
 13199 0156 488B0424 		movq	(%rsp), %rax
 13200              	.LVL1105:
 13201              	.L755:
 13202              	.LBB17328:
 13203              	.LBB17329:
 398:/usr/include/c++/6/bits/stl_tree.h **** 
 13204              		.loc 19 398 0
 13205 015a 4889C6   		movq	%rax, %rsi
 13206 015d E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 13206      00
 13207              	.LVL1106:
 13208              	.L743:
 13209              	.LBE17329:
 13210              	.LBE17328:
 13211              	.LBE17314:
 13212              	.LBE17313:
 13213              	.LBE17312:
 13214              	.LBE17311:
 13215              	.LBE17310:
 182:/usr/include/boost/exception/info.hpp ****                 p.adopt(c);
 183:/usr/include/boost/exception/info.hpp ****                 c->info_ = info_;
 184:/usr/include/boost/exception/info.hpp ****                 return p;
 185:/usr/include/boost/exception/info.hpp ****                 }
 13216              		.loc 3 185 0
 13217 0162 4883C420 		addq	$32, %rsp
 13218              		.cfi_remember_state
 13219              		.cfi_def_cfa_offset 48
 13220 0166 4889E8   		movq	%rbp, %rax
 13221 0169 5B       		popq	%rbx
 13222              		.cfi_def_cfa_offset 40
 13223              	.LVL1107:
GAS LISTING /tmp/ccvmoMuv.s 			page 676


 13224 016a 5D       		popq	%rbp
 13225              		.cfi_def_cfa_offset 32
 13226              	.LVL1108:
 13227 016b 415C     		popq	%r12
 13228              		.cfi_def_cfa_offset 24
 13229              	.LVL1109:
 13230 016d 415D     		popq	%r13
 13231              		.cfi_def_cfa_offset 16
 13232              	.LVL1110:
 13233 016f 415E     		popq	%r14
 13234              		.cfi_def_cfa_offset 8
 13235 0171 C3       		ret
 13236              	.LVL1111:
 13237              		.p2align 4,,10
 13238 0172 660F1F44 		.p2align 3
 13238      0000
 13239              	.L773:
 13240              		.cfi_restore_state
 13241 0178 498B7E38 		movq	56(%r14), %rdi
 13242              	.LBB17337:
 13243              	.LBB17305:
 13244              	.LBB17300:
 13245              	.LBB17291:
 13246              	.LBB17288:
 13247              	.LBB17287:
 13248              	.LBB17266:
 13249              	.LBB17267:
 13250              	.LBB17268:
 13251              	.LBB17269:
 13252              	.LBB17270:
 13253              	.LBB17271:
 13254              	.LBB17272:
 13255              	.LBB17273:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 13256              		.loc 10 152 0
 13257 017c 498D4648 		leaq	72(%r14), %rax
 13258              	.LBE17273:
 13259              	.LBE17272:
 13260              	.LBE17271:
 13261              	.LBE17270:
 13262              	.LBE17269:
 13263              	.LBE17268:
 104:/usr/include/boost/exception/info.hpp ****                 }
 13264              		.loc 3 104 0
 13265 0180 498916   		movq	%rdx, (%r14)
 13266              	.LVL1112:
 13267              	.LBB17280:
 13268              	.LBB17279:
 13269              	.LBB17278:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 13270              		.loc 10 180 0
 13271 0183 4839C7   		cmpq	%rax, %rdi
 13272 0186 7405     		je	.L748
 13273              	.LVL1113:
 13274              	.LBB17274:
 13275              	.LBB17275:
 13276              	.LBB17276:
GAS LISTING /tmp/ccvmoMuv.s 			page 677


 13277              	.LBB17277:
 13278              		.loc 12 110 0
 13279 0188 E8000000 		call	_ZdlPv@PLT
 13279      00
 13280              	.LVL1114:
 13281              	.L748:
 13282              	.LBE17277:
 13283              	.LBE17276:
 13284              	.LBE17275:
 13285              	.LBE17274:
 13286              	.LBE17278:
 13287              	.LBE17279:
 13288              	.LBE17280:
 13289              	.LBB17281:
 13290              	.LBB17282:
 13291              	.LBB17283:
 13292              	.LBB17284:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 13293              		.loc 19 873 0
 13294 018d 498B7618 		movq	24(%r14), %rsi
 13295              	.LBE17284:
 13296              	.LBE17283:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 13297              		.loc 36 96 0
 13298 0191 498D7E08 		leaq	8(%r14), %rdi
 13299              	.LVL1115:
 13300              	.LBB17286:
 13301              	.LBB17285:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 13302              		.loc 19 873 0
 13303 0195 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 13303      00
 13304              	.LVL1116:
 13305              	.LBE17285:
 13306              	.LBE17286:
 13307              	.LBE17282:
 13308              	.LBE17281:
 13309              	.LBE17267:
 13310              	.LBE17266:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 13311              		.loc 3 172 0
 13312 019a BE600000 		movl	$96, %esi
 13312      00
 13313 019f 4C89F7   		movq	%r14, %rdi
 13314 01a2 E8000000 		call	_ZdlPvm@PLT
 13314      00
 13315              	.LVL1117:
 13316 01a7 488B03   		movq	(%rbx), %rax
 13317 01aa 488B4018 		movq	24(%rax), %rax
 13318              	.LVL1118:
 13319              	.L749:
 13320 01ae 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7add_refEv(%rip), %rdx
 13320      000000
 13321              	.LBE17287:
 13322              	.LBE17288:
 13323              	.LBE17291:
 13324              	.LBE17300:
GAS LISTING /tmp/ccvmoMuv.s 			page 678


  54:/usr/include/boost/exception/exception.hpp ****                 add_ref();
 13325              		.loc 7 54 0
 13326 01b5 48895D00 		movq	%rbx, 0(%rbp)
 13327              	.LVL1119:
 13328 01b9 4839D0   		cmpq	%rdx, %rax
 13329 01bc 0F84DBFE 		je	.L745
 13329      FFFF
 13330              	.LBB17301:
 13331              	.LBB17299:
  72:/usr/include/boost/exception/exception.hpp ****                 }
 13332              		.loc 7 72 0
 13333 01c2 4889DF   		movq	%rbx, %rdi
 13334              	.LEHB56:
 13335 01c5 FFD0     		call	*%rax
 13336              	.LVL1120:
 13337 01c7 E9D5FEFF 		jmp	.L751
 13337      FF
 13338              	.LVL1121:
 13339 01cc 0F1F4000 		.p2align 4,,10
 13340              		.p2align 3
 13341              	.L746:
 13342              	.LBE17299:
 13343              	.LBE17301:
 13344              	.LBB17302:
 13345              	.LBB17292:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 13346              		.loc 7 78 0
 13347 01d0 4C89F7   		movq	%r14, %rdi
 13348 01d3 FFD0     		call	*%rax
 13349              	.LVL1122:
 13350              	.LEHE56:
 13351 01d5 488B03   		movq	(%rbx), %rax
 13352 01d8 488B4018 		movq	24(%rax), %rax
 13353 01dc EBD0     		jmp	.L749
 13354              	.LVL1123:
 13355 01de 6690     		.p2align 4,,10
 13356              		.p2align 3
 13357              	.L753:
 13358              	.LBE17292:
 13359              	.LBE17302:
 13360              	.LBE17305:
 13361              	.LBE17337:
 13362              	.LBB17338:
 13363              	.LBB17336:
 13364              	.LBB17335:
 13365              	.LBB17334:
 13366              	.LBB17333:
 13367              	.LBB17330:
 13368              	.LBB17319:
 13369              	.LBB17318:
 390:/usr/include/c++/6/bits/stl_tree.h **** 	}
 13370              		.loc 19 390 0
 13371 01e0 48C74424 		movq	$0, 8(%rsp)
 13371      08000000 
 13371      00
 13372 01e9 E9FAFEFF 		jmp	.L754
 13372      FF
GAS LISTING /tmp/ccvmoMuv.s 			page 679


 13373              	.LVL1124:
 13374              	.L765:
 13375              	.LBE17318:
 13376              	.LBE17319:
 13377              	.LBE17330:
 13378              	.LBB17331:
 13379              	.LBB17332:
 398:/usr/include/c++/6/bits/stl_tree.h **** 
 13380              		.loc 19 398 0
 13381 01ee 488B3424 		movq	(%rsp), %rsi
 13382 01f2 488B7C24 		movq	16(%rsp), %rdi
 13382      10
 13383 01f7 4889C3   		movq	%rax, %rbx
 13384              	.LVL1125:
 13385 01fa E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 13385      00
 13386              	.LVL1126:
 13387              	.L759:
 13388              	.LBE17332:
 13389              	.LBE17331:
 13390              	.LBE17333:
 13391              	.LBE17334:
 13392              	.LBE17335:
 13393              	.LBE17336:
 13394              	.LBE17338:
 13395              	.LBB17339:
 13396              	.LBB17340:
 13397              	.LBB17341:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 13398              		.loc 7 78 0
 13399 01ff 488B7D00 		movq	0(%rbp), %rdi
 13400 0203 4885FF   		testq	%rdi, %rdi
 13401 0206 7406     		je	.L760
 13402 0208 488B07   		movq	(%rdi), %rax
 13403 020b FF5020   		call	*32(%rax)
 13404              	.LVL1127:
 13405              	.L760:
 13406 020e 4889DF   		movq	%rbx, %rdi
 13407              	.LEHB57:
 13408 0211 E8000000 		call	_Unwind_Resume@PLT
 13408      00
 13409              	.LVL1128:
 13410              	.LEHE57:
 13411              	.L764:
 13412 0216 4889C3   		movq	%rax, %rbx
 13413 0219 EBE4     		jmp	.L759
 13414              	.LBE17341:
 13415              	.LBE17340:
 13416              	.LBE17339:
 13417              		.cfi_endproc
 13418              	.LFE9854:
 13419              		.section	.gcc_except_table
 13420              	.LLSDA9854:
 13421 0100 FF       		.byte	0xff
 13422 0101 FF       		.byte	0xff
 13423 0102 01       		.byte	0x1
 13424 0103 16       		.uleb128 .LLSDACSE9854-.LLSDACSB9854
GAS LISTING /tmp/ccvmoMuv.s 			page 680


 13425              	.LLSDACSB9854:
 13426 0104 1E       		.uleb128 .LEHB54-.LFB9854
 13427 0105 05       		.uleb128 .LEHE54-.LEHB54
 13428 0106 9604     		.uleb128 .L764-.LFB9854
 13429 0108 00       		.uleb128 0
 13430 0109 9002     		.uleb128 .LEHB55-.LFB9854
 13431 010b 05       		.uleb128 .LEHE55-.LEHB55
 13432 010c EE03     		.uleb128 .L765-.LFB9854
 13433 010e 00       		.uleb128 0
 13434 010f C503     		.uleb128 .LEHB56-.LFB9854
 13435 0111 10       		.uleb128 .LEHE56-.LEHB56
 13436 0112 9604     		.uleb128 .L764-.LFB9854
 13437 0114 00       		.uleb128 0
 13438 0115 9104     		.uleb128 .LEHB57-.LFB9854
 13439 0117 05       		.uleb128 .LEHE57-.LEHB57
 13440 0118 00       		.uleb128 0
 13441 0119 00       		.uleb128 0
 13442              	.LLSDACSE9854:
 13443              		.section	.text._ZNK5boost16exception_detail25error_info_container_impl5cloneEv,"axG",@progbits,_ZN
 13445              		.section	.rodata._ZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13
 13446              		.align 8
 13447              	.LC17:
 13448 0000 2F757372 		.string	"/usr/include/boost/exception/detail/exception_ptr.hpp"
 13448      2F696E63 
 13448      6C756465 
 13448      2F626F6F 
 13448      73742F65 
 13449              		.section	.text._ZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13ex
 13450              		.p2align 4,,15
 13451              		.weak	_ZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13exception_p
 13453              	_ZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13exception_ptrEv:
 13454              	.LFB12064:
 116:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 };
 117:/usr/include/boost/exception/detail/exception_ptr.hpp **** 
 118:/usr/include/boost/exception/detail/exception_ptr.hpp ****         template <class Exception>
 119:/usr/include/boost/exception/detail/exception_ptr.hpp ****         exception_ptr
 120:/usr/include/boost/exception/detail/exception_ptr.hpp ****         get_static_exception_object()
 13455              		.loc 29 120 0
 13456              		.cfi_startproc
 13457              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 13458              		.cfi_lsda 0x1b,.LLSDA12064
 13459              	.LVL1129:
 13460 0000 4157     		pushq	%r15
 13461              		.cfi_def_cfa_offset 16
 13462              		.cfi_offset 15, -16
 13463 0002 4156     		pushq	%r14
 13464              		.cfi_def_cfa_offset 24
 13465              		.cfi_offset 14, -24
 13466              	.LBB17818:
 13467              	.LBB17819:
 13468              	.LBB17820:
 474:/usr/include/boost/exception/exception.hpp ****                 {
 13469              		.loc 7 474 0
 13470 0004 488D0500 		leaq	72+_ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE(%rip), %rax
 13470      000000
 13471              	.LBE17820:
 13472              	.LBE17819:
GAS LISTING /tmp/ccvmoMuv.s 			page 681


 13473              	.LBE17818:
 13474              		.loc 29 120 0
 13475 000b 4155     		pushq	%r13
 13476              		.cfi_def_cfa_offset 32
 13477              		.cfi_offset 13, -32
 13478 000d 4154     		pushq	%r12
 13479              		.cfi_def_cfa_offset 40
 13480              		.cfi_offset 12, -40
 13481              	.LBB17836:
 13482              	.LBB17832:
 13483              	.LBB17828:
 474:/usr/include/boost/exception/exception.hpp ****                 {
 13484              		.loc 7 474 0
 13485 000f 4C8D3D00 		leaq	24+_ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE(%rip), %r15
 13485      000000
 13486              	.LBE17828:
 13487              	.LBE17832:
 13488              	.LBE17836:
 13489              		.loc 29 120 0
 13490 0016 55       		pushq	%rbp
 13491              		.cfi_def_cfa_offset 48
 13492              		.cfi_offset 6, -48
 13493 0017 53       		pushq	%rbx
 13494              		.cfi_def_cfa_offset 56
 13495              		.cfi_offset 3, -56
 13496              	.LBB17837:
 13497              	.LBB17838:
 103:/usr/include/boost/exception/detail/exception_ptr.hpp ****             boost::exception,
 13498              		.loc 29 103 0
 13499 0018 4C8D2500 		leaq	16+_ZTVN5boost16exception_detail10bad_alloc_E(%rip), %r12
 13499      000000
 13500 001f 488D2D00 		leaq	48+_ZTVN5boost16exception_detail10bad_alloc_E(%rip), %rbp
 13500      000000
 13501              	.LBE17838:
 13502              	.LBE17837:
 13503              	.LBB17850:
 13504              	.LBB17833:
 13505              	.LBB17829:
 474:/usr/include/boost/exception/exception.hpp ****                 {
 13506              		.loc 7 474 0
 13507 0026 4C8D3500 		leaq	136+_ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE(%rip), %r14
 13507      000000
 13508              	.LBE17829:
 13509              	.LBE17833:
 13510              	.LBE17850:
 13511              		.loc 29 120 0
 13512 002d 4889FB   		movq	%rdi, %rbx
 13513 0030 4881EC88 		subq	$136, %rsp
 13513      000000
 13514              		.cfi_def_cfa_offset 192
 13515              	.LVL1130:
 13516 0037 4C8D2D00 		leaq	16+_ZTVN5boost9exceptionE(%rip), %r13
 13516      000000
 13517              	.LBB17851:
 13518              	.LBB17834:
 13519              	.LBB17830:
 474:/usr/include/boost/exception/exception.hpp ****                 {
GAS LISTING /tmp/ccvmoMuv.s 			page 682


 13520              		.loc 7 474 0
 13521 003e 48894424 		movq	%rax, 104(%rsp)
 13521      68
 13522              	.LBE17830:
 13523              	.LBE17834:
 13524              	.LBE17851:
 13525              	.LBB17852:
 13526              	.LBB17853:
 13527              	.LBB17854:
 13528              	.LBB17855:
 186:/usr/include/boost/exception/info.hpp ****             };
 187:/usr/include/boost/exception/info.hpp **** 
 188:/usr/include/boost/exception/info.hpp ****         template <class E,class Tag,class T>
 189:/usr/include/boost/exception/info.hpp ****         inline
 190:/usr/include/boost/exception/info.hpp ****         E const &
 191:/usr/include/boost/exception/info.hpp ****         set_info( E const & x, error_info<Tag,T> const & v )
 192:/usr/include/boost/exception/info.hpp ****             {
 193:/usr/include/boost/exception/info.hpp ****             typedef error_info<Tag,T> error_info_tag_t;
 194:/usr/include/boost/exception/info.hpp ****             shared_ptr<error_info_tag_t> p( new error_info_tag_t(v) );
 195:/usr/include/boost/exception/info.hpp ****             exception_detail::error_info_container * c=x.data_.get();
 196:/usr/include/boost/exception/info.hpp ****             if( !c )
 197:/usr/include/boost/exception/info.hpp ****                 x.data_.adopt(c=new exception_detail::error_info_container_impl);
 198:/usr/include/boost/exception/info.hpp ****             c->set(p,BOOST_EXCEPTION_STATIC_TYPEID(error_info_tag_t));
 199:/usr/include/boost/exception/info.hpp ****             return x;
 200:/usr/include/boost/exception/info.hpp ****             }
 201:/usr/include/boost/exception/info.hpp **** 
 202:/usr/include/boost/exception/info.hpp **** #ifndef BOOST_NO_CXX11_RVALUE_REFERENCES
 203:/usr/include/boost/exception/info.hpp ****         template <class E,class Tag,class T>
 204:/usr/include/boost/exception/info.hpp ****         E const & set_info( E const &, error_info<Tag,T> && );
 205:/usr/include/boost/exception/info.hpp **** 		template <class T>
 206:/usr/include/boost/exception/info.hpp **** 		class set_info_rv;
 207:/usr/include/boost/exception/info.hpp **** 		template <class Tag,class T>
 208:/usr/include/boost/exception/info.hpp **** 		class
 209:/usr/include/boost/exception/info.hpp **** 		set_info_rv<error_info<Tag,T> >
 210:/usr/include/boost/exception/info.hpp **** 			{
 211:/usr/include/boost/exception/info.hpp **** 			template <class E,class Tag1,class T1>
 212:/usr/include/boost/exception/info.hpp **** 			friend E const & set_info( E const &, error_info<Tag1,T1> && );
 213:/usr/include/boost/exception/info.hpp **** 			template <class E>
 214:/usr/include/boost/exception/info.hpp **** 			static
 215:/usr/include/boost/exception/info.hpp **** 			E const &
 216:/usr/include/boost/exception/info.hpp **** 			set( E const & x, error_info<Tag,T> && v )
 217:/usr/include/boost/exception/info.hpp **** 				{
 218:/usr/include/boost/exception/info.hpp **** 				typedef error_info<Tag,T> error_info_tag_t;
 219:/usr/include/boost/exception/info.hpp **** 				shared_ptr<error_info_tag_t> p( new error_info_tag_t(std::move(v)) );
 220:/usr/include/boost/exception/info.hpp **** 				exception_detail::error_info_container * c=x.data_.get();
 221:/usr/include/boost/exception/info.hpp **** 				if( !c )
 222:/usr/include/boost/exception/info.hpp **** 					x.data_.adopt(c=new exception_detail::error_info_container_impl);
 223:/usr/include/boost/exception/info.hpp **** 				c->set(p,BOOST_EXCEPTION_STATIC_TYPEID(error_info_tag_t));
 224:/usr/include/boost/exception/info.hpp **** 				return x;
 225:/usr/include/boost/exception/info.hpp **** 				}
 226:/usr/include/boost/exception/info.hpp **** 			};
 227:/usr/include/boost/exception/info.hpp **** 		template <>
 228:/usr/include/boost/exception/info.hpp **** 		class
 229:/usr/include/boost/exception/info.hpp **** 		set_info_rv<throw_function>
 230:/usr/include/boost/exception/info.hpp **** 			{
 231:/usr/include/boost/exception/info.hpp **** 			template <class E,class Tag1,class T1>
 232:/usr/include/boost/exception/info.hpp **** 			friend E const & set_info( E const &, error_info<Tag1,T1> && );
GAS LISTING /tmp/ccvmoMuv.s 			page 683


 233:/usr/include/boost/exception/info.hpp **** 			template <class E>
 234:/usr/include/boost/exception/info.hpp **** 			static
 235:/usr/include/boost/exception/info.hpp **** 			E const &
 236:/usr/include/boost/exception/info.hpp **** 			set( E const & x, throw_function && y )
 237:/usr/include/boost/exception/info.hpp **** 				{
 238:/usr/include/boost/exception/info.hpp **** 				x.throw_function_=y.v_;
 13529              		.loc 3 238 0
 13530 0043 488D0500 		leaq	_ZZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13exception_p
 13530      000000
 13531              	.LBE17855:
 13532              	.LBE17854:
 13533              	.LBE17853:
 13534              	.LBE17852:
 13535              	.LBB17859:
 13536              	.LBB17848:
 13537              	.LBB17839:
 13538              	.LBB17840:
 13539              	.LBB17841:
 13540              	.LBB17842:
 13541              	.LBB17843:
 13542              	.LBB17844:
  28:/usr/include/boost/exception/exception.hpp ****                 {
 13543              		.loc 7 28 0
 13544 004a 48C74424 		movq	$0, 24(%rsp)
 13544      18000000 
 13544      00
 13545              	.LVL1131:
 13546              	.LBE17844:
 13547              	.LBE17843:
 13548              	.LBE17842:
 233:/usr/include/boost/exception/exception.hpp ****             {
 13549              		.loc 7 233 0
 13550 0053 48C74424 		movq	$0, 32(%rsp)
 13550      20000000 
 13550      00
 13551 005c 48C74424 		movq	$0, 40(%rsp)
 13551      28000000 
 13551      00
 13552              	.LBE17841:
 13553              	.LBE17840:
 13554              	.LBE17839:
 13555              	.LBE17848:
 13556              	.LBE17859:
 13557              	.LBB17860:
 13558              	.LBB17858:
 13559              	.LBB17857:
 13560              	.LBB17856:
 13561              		.loc 3 238 0
 13562 0065 48894424 		movq	%rax, 80(%rsp)
 13562      50
 13563              	.LBE17856:
 13564              	.LBE17857:
 13565              	.LBE17858:
 13566              	.LBE17860:
 13567              	.LBB17861:
 13568              	.LBB17862:
 13569              	.LBB17863:
GAS LISTING /tmp/ccvmoMuv.s 			page 684


 13570              	.LBB17864:
 239:/usr/include/boost/exception/info.hpp **** 				return x;
 240:/usr/include/boost/exception/info.hpp **** 				}
 241:/usr/include/boost/exception/info.hpp **** 			};
 242:/usr/include/boost/exception/info.hpp **** 		template <>
 243:/usr/include/boost/exception/info.hpp **** 		class
 244:/usr/include/boost/exception/info.hpp **** 		set_info_rv<throw_file>
 245:/usr/include/boost/exception/info.hpp **** 			{
 246:/usr/include/boost/exception/info.hpp **** 			template <class E,class Tag1,class T1>
 247:/usr/include/boost/exception/info.hpp **** 			friend E const & set_info( E const &, error_info<Tag1,T1> && );
 248:/usr/include/boost/exception/info.hpp **** 			template <class E>
 249:/usr/include/boost/exception/info.hpp **** 			static
 250:/usr/include/boost/exception/info.hpp **** 			E const &
 251:/usr/include/boost/exception/info.hpp **** 			set( E const & x, throw_file && y )
 252:/usr/include/boost/exception/info.hpp **** 				{
 253:/usr/include/boost/exception/info.hpp **** 				x.throw_file_=y.v_;
 13571              		.loc 3 253 0
 13572 006a 488D0500 		leaq	.LC17(%rip), %rax
 13572      000000
 13573              	.LBE17864:
 13574              	.LBE17863:
 13575              	.LBE17862:
 13576              	.LBE17861:
 13577              	.LBB17868:
 13578              	.LBB17849:
 13579              	.LBB17847:
 13580              	.LBB17846:
 13581              	.LBB17845:
 233:/usr/include/boost/exception/exception.hpp ****             {
 13582              		.loc 7 233 0
 13583 0071 C7442430 		movl	$-1, 48(%rsp)
 13583      FFFFFFFF 
 13584              	.LVL1132:
 13585              	.LBE17845:
 13586              	.LBE17846:
 13587              	.LBE17847:
 103:/usr/include/boost/exception/detail/exception_ptr.hpp ****             boost::exception,
 13588              		.loc 29 103 0
 13589 0079 4C896424 		movq	%r12, 16(%rsp)
 13589      10
 13590 007e 48896C24 		movq	%rbp, 56(%rsp)
 13590      38
 13591              	.LVL1133:
 13592              	.LBE17849:
 13593              	.LBE17868:
 13594              	.LBB17869:
 13595              	.LBB17835:
 13596              	.LBB17831:
 13597              	.LBB17821:
 13598              	.LBB17822:
 13599              	.LBB17823:
 13600              	.LBB17824:
 13601              	.LBB17825:
 13602              	.LBB17826:
 13603              	.LBB17827:
  38:/usr/include/boost/exception/exception.hpp ****                 {
 13604              		.loc 7 38 0
GAS LISTING /tmp/ccvmoMuv.s 			page 685


 13605 0083 48C74424 		movq	$0, 72(%rsp)
 13605      48000000 
 13605      00
 13606              	.LVL1134:
 13607              	.LBE17827:
 13608              	.LBE17826:
 13609              	.LBE17825:
 13610              	.LBE17824:
 13611              	.LBE17823:
 13612              	.LBE17822:
 13613              	.LBE17821:
 474:/usr/include/boost/exception/exception.hpp ****                 {
 13614              		.loc 7 474 0
 13615 008c 4C897C24 		movq	%r15, 64(%rsp)
 13615      40
 13616 0091 4C897424 		movq	%r14, 112(%rsp)
 13616      70
 13617              	.LVL1135:
 13618              	.LBE17831:
 13619              	.LBE17835:
 13620              	.LBE17869:
 13621              	.LBB17870:
 13622              	.LBB17867:
 13623              	.LBB17866:
 13624              	.LBB17865:
 13625              		.loc 3 253 0
 13626 0096 48894424 		movq	%rax, 88(%rsp)
 13626      58
 13627              	.LVL1136:
 13628              	.LBE17865:
 13629              	.LBE17866:
 13630              	.LBE17867:
 13631              	.LBE17870:
 13632              	.LBB17871:
 13633              	.LBB17872:
 13634              	.LBB17873:
 13635              	.LBB17874:
 254:/usr/include/boost/exception/info.hpp **** 				return x;
 255:/usr/include/boost/exception/info.hpp **** 				}
 256:/usr/include/boost/exception/info.hpp **** 			};
 257:/usr/include/boost/exception/info.hpp **** 		template <>
 258:/usr/include/boost/exception/info.hpp **** 		class
 259:/usr/include/boost/exception/info.hpp **** 		set_info_rv<throw_line>
 260:/usr/include/boost/exception/info.hpp **** 			{
 261:/usr/include/boost/exception/info.hpp **** 			template <class E,class Tag1,class T1>
 262:/usr/include/boost/exception/info.hpp **** 			friend E const & set_info( E const &, error_info<Tag1,T1> && );
 263:/usr/include/boost/exception/info.hpp **** 			template <class E>
 264:/usr/include/boost/exception/info.hpp **** 			static
 265:/usr/include/boost/exception/info.hpp **** 			E const &
 266:/usr/include/boost/exception/info.hpp **** 			set( E const & x, throw_line && y )
 267:/usr/include/boost/exception/info.hpp **** 				{
 268:/usr/include/boost/exception/info.hpp **** 				x.throw_line_=y.v_;
 13636              		.loc 3 268 0
 13637 009b C7442460 		movl	$128, 96(%rsp)
 13637      80000000 
 13638              	.LVL1137:
 13639              	.LBE17874:
GAS LISTING /tmp/ccvmoMuv.s 			page 686


 13640              	.LBE17873:
 13641              	.LBE17872:
 13642              	.LBE17871:
 121:/usr/include/boost/exception/detail/exception_ptr.hpp ****             {
 122:/usr/include/boost/exception/detail/exception_ptr.hpp ****             Exception ba;
 123:/usr/include/boost/exception/detail/exception_ptr.hpp ****             exception_detail::clone_impl<Exception> c(ba);
 124:/usr/include/boost/exception/detail/exception_ptr.hpp **** #ifndef BOOST_EXCEPTION_DISABLE
 125:/usr/include/boost/exception/detail/exception_ptr.hpp ****             c <<
 126:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 throw_function(BOOST_CURRENT_FUNCTION) <<
 127:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 throw_file(__FILE__) <<
 128:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 throw_line(__LINE__);
 129:/usr/include/boost/exception/detail/exception_ptr.hpp **** #endif
 130:/usr/include/boost/exception/detail/exception_ptr.hpp ****             static exception_ptr ep(shared_ptr<exception_detail::clone_base const>(new exception_de
 13643              		.loc 29 130 0
 13644 00a3 0FB60500 		movzbl	_ZGVZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13excepti
 13644      000000
 13645 00aa 84C0     		testb	%al, %al
 13646 00ac 0F843E01 		je	.L812
 13646      0000
 13647              	.LVL1138:
 13648              	.L776:
 13649              	.LBB17875:
 13650              	.LBB17876:
 13651              	.LBB17877:
 405:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 13652              		.loc 27 405 0
 13653 00b2 488B0500 		movq	_ZZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13exception_p
 13653      000000
 13654 00b9 488903   		movq	%rax, (%rbx)
 13655              	.LVL1139:
 13656              	.LBB17878:
 13657              	.LBB17879:
 479:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 13658              		.loc 28 479 0
 13659 00bc 488B0500 		movq	8+_ZZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13exception
 13659      000000
 484:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 13660              		.loc 28 484 0
 13661 00c3 4885C0   		testq	%rax, %rax
 479:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 13662              		.loc 28 479 0
 13663 00c6 48894308 		movq	%rax, 8(%rbx)
 484:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 13664              		.loc 28 484 0
 13665 00ca 7404     		je	.L788
 13666              	.LVL1140:
 13667              	.LBB17880:
 13668              	.LBB17881:
 13669              	.LBB17882:
 13670              	.LBB17883:
  66:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** }
 13671              		.loc 1 66 0
 13672              	#APP
 13673              	# 66 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 13674              		lock
 13675              		incl 8(%rax)
 13676              	# 0 "" 2
GAS LISTING /tmp/ccvmoMuv.s 			page 687


 13677              	.LVL1141:
 13678              	#NO_APP
 13679              	.L788:
 13680              	.LBE17883:
 13681              	.LBE17882:
 13682              	.LBE17881:
 13683              	.LBE17880:
 13684              	.LBE17879:
 13685              	.LBE17878:
 13686              	.LBE17877:
 13687              	.LBE17876:
 13688              	.LBE17875:
 13689              	.LBB17884:
 13690              	.LBB17885:
 13691              	.LBB17886:
 13692              	.LBB17887:
 107:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 };
 13693              		.loc 29 107 0
 13694 00d0 488D7C24 		leaq	104(%rsp), %rdi
 13694      68
 13695              	.LBE17887:
 13696              	.LBE17886:
 481:/usr/include/boost/exception/exception.hpp **** 
 13697              		.loc 7 481 0
 13698 00d5 4C897424 		movq	%r14, 112(%rsp)
 13698      70
 13699              	.LVL1142:
 13700              	.LBB17931:
 13701              	.LBB17928:
 107:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 };
 13702              		.loc 29 107 0
 13703 00da 4C896424 		movq	%r12, 64(%rsp)
 13703      40
 13704 00df 48896C24 		movq	%rbp, 104(%rsp)
 13704      68
 13705 00e4 E8000000 		call	_ZNSt9bad_allocD2Ev@PLT
 13705      00
 13706              	.LVL1143:
 13707              	.LBB17888:
 13708              	.LBB17889:
 13709              	.LBB17890:
 13710              	.LBB17891:
 13711              	.LBB17892:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 13712              		.loc 7 78 0
 13713 00e9 4C8B7424 		movq	72(%rsp), %r14
 13713      48
 13714              	.LBE17892:
 13715              	.LBE17891:
 13716              	.LBE17890:
 299:/usr/include/boost/exception/exception.hpp ****         {
 13717              		.loc 7 299 0
 13718 00ee 4C896C24 		movq	%r13, 64(%rsp)
 13718      40
 13719              	.LVL1144:
 13720              	.LBB17921:
 13721              	.LBB17918:
GAS LISTING /tmp/ccvmoMuv.s 			page 688


 13722              	.LBB17915:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 13723              		.loc 7 78 0
 13724 00f3 4D85F6   		testq	%r14, %r14
 13725 00f6 7422     		je	.L790
 13726 00f8 498B06   		movq	(%r14), %rax
 13727 00fb 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 13727      000000
 13728 0102 488B4020 		movq	32(%rax), %rax
 13729 0106 4839D0   		cmpq	%rdx, %rax
 13730 0109 0F852902 		jne	.L791
 13730      0000
 13731              	.LVL1145:
 13732              	.LBB17893:
 13733              	.LBB17894:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 13734              		.loc 3 168 0
 13735 010f 41836E58 		subl	$1, 88(%r14)
 13735      01
 13736 0114 0F849600 		je	.L813
 13736      0000
 13737              	.LVL1146:
 13738              	.L790:
 13739              	.LBE17894:
 13740              	.LBE17893:
 13741              	.LBE17915:
 13742              	.LBE17918:
 13743              	.LBE17921:
 13744              	.LBE17889:
 13745              	.LBE17888:
 13746              	.LBE17928:
 13747              	.LBE17931:
 13748              	.LBE17885:
 13749              	.LBE17884:
 13750              	.LBB17936:
 13751              	.LBB17937:
 107:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 };
 13752              		.loc 29 107 0
 13753 011a 488D7C24 		leaq	56(%rsp), %rdi
 13753      38
 13754 011f 48896C24 		movq	%rbp, 56(%rsp)
 13754      38
 13755 0124 4C896424 		movq	%r12, 16(%rsp)
 13755      10
 13756 0129 E8000000 		call	_ZNSt9bad_allocD2Ev@PLT
 13756      00
 13757              	.LVL1147:
 13758              	.LBB17938:
 13759              	.LBB17939:
 13760              	.LBB17940:
 13761              	.LBB17941:
 13762              	.LBB17942:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 13763              		.loc 7 78 0
 13764 012e 488B6C24 		movq	24(%rsp), %rbp
 13764      18
 13765              	.LBE17942:
GAS LISTING /tmp/ccvmoMuv.s 			page 689


 13766              	.LBE17941:
 13767              	.LBE17940:
 299:/usr/include/boost/exception/exception.hpp ****         {
 13768              		.loc 7 299 0
 13769 0133 4C896C24 		movq	%r13, 16(%rsp)
 13769      10
 13770              	.LVL1148:
 13771              	.LBB17971:
 13772              	.LBB17968:
 13773              	.LBB17965:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 13774              		.loc 7 78 0
 13775 0138 4885ED   		testq	%rbp, %rbp
 13776 013b 741E     		je	.L774
 13777 013d 488B4500 		movq	0(%rbp), %rax
 13778 0141 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 13778      000000
 13779 0148 488B4020 		movq	32(%rax), %rax
 13780 014c 4839D0   		cmpq	%rdx, %rax
 13781 014f 0F85F301 		jne	.L796
 13781      0000
 13782              	.LVL1149:
 13783              	.LBB17943:
 13784              	.LBB17944:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 13785              		.loc 3 168 0
 13786 0155 836D5801 		subl	$1, 88(%rbp)
 13787 0159 7415     		je	.L814
 13788              	.LVL1150:
 13789              	.L774:
 13790              	.LBE17944:
 13791              	.LBE17943:
 13792              	.LBE17965:
 13793              	.LBE17968:
 13794              	.LBE17971:
 13795              	.LBE17939:
 13796              	.LBE17938:
 13797              	.LBE17937:
 13798              	.LBE17936:
 131:/usr/include/boost/exception/detail/exception_ptr.hpp ****             return ep;
 132:/usr/include/boost/exception/detail/exception_ptr.hpp ****             }
 13799              		.loc 29 132 0
 13800 015b 4881C488 		addq	$136, %rsp
 13800      000000
 13801              		.cfi_remember_state
 13802              		.cfi_def_cfa_offset 56
 13803 0162 4889D8   		movq	%rbx, %rax
 13804 0165 5B       		popq	%rbx
 13805              		.cfi_def_cfa_offset 48
 13806              	.LVL1151:
 13807 0166 5D       		popq	%rbp
 13808              		.cfi_def_cfa_offset 40
 13809 0167 415C     		popq	%r12
 13810              		.cfi_def_cfa_offset 32
 13811 0169 415D     		popq	%r13
 13812              		.cfi_def_cfa_offset 24
 13813 016b 415E     		popq	%r14
GAS LISTING /tmp/ccvmoMuv.s 			page 690


 13814              		.cfi_def_cfa_offset 16
 13815 016d 415F     		popq	%r15
 13816              		.cfi_def_cfa_offset 8
 13817 016f C3       		ret
 13818              	.LVL1152:
 13819              		.p2align 4,,10
 13820              		.p2align 3
 13821              	.L814:
 13822              		.cfi_restore_state
 13823              	.LBB17980:
 13824              	.LBB17978:
 13825              	.LBB17976:
 13826              	.LBB17974:
 13827              	.LBB17972:
 13828              	.LBB17969:
 13829              	.LBB17966:
 13830              	.LBB17964:
 13831              	.LBB17963:
 13832              	.LBB17945:
 13833              	.LBB17946:
 104:/usr/include/boost/exception/info.hpp ****                 }
 13834              		.loc 3 104 0
 13835 0170 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 13835      000000
 13836 0177 488B7D38 		movq	56(%rbp), %rdi
 13837 017b 48894500 		movq	%rax, 0(%rbp)
 13838              	.LVL1153:
 13839              	.LBB17947:
 13840              	.LBB17948:
 13841              	.LBB17949:
 13842              	.LBB17950:
 13843              	.LBB17951:
 13844              	.LBB17952:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 13845              		.loc 10 152 0
 13846 017f 488D4548 		leaq	72(%rbp), %rax
 13847              	.LBE17952:
 13848              	.LBE17951:
 13849              	.LBE17950:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 13850              		.loc 10 180 0
 13851 0183 4839C7   		cmpq	%rax, %rdi
 13852 0186 7405     		je	.L798
 13853              	.LVL1154:
 13854              	.LBB17953:
 13855              	.LBB17954:
 13856              	.LBB17955:
 13857              	.LBB17956:
 13858              		.loc 12 110 0
 13859 0188 E8000000 		call	_ZdlPv@PLT
 13859      00
 13860              	.LVL1155:
 13861              	.L798:
 13862              	.LBE17956:
 13863              	.LBE17955:
 13864              	.LBE17954:
 13865              	.LBE17953:
GAS LISTING /tmp/ccvmoMuv.s 			page 691


 13866              	.LBE17949:
 13867              	.LBE17948:
 13868              	.LBE17947:
 13869              	.LBB17957:
 13870              	.LBB17958:
 13871              	.LBB17959:
 13872              	.LBB17960:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 13873              		.loc 19 873 0
 13874 018d 488B7518 		movq	24(%rbp), %rsi
 13875              	.LBE17960:
 13876              	.LBE17959:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 13877              		.loc 36 96 0
 13878 0191 488D7D08 		leaq	8(%rbp), %rdi
 13879              	.LVL1156:
 13880              	.LBB17962:
 13881              	.LBB17961:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 13882              		.loc 19 873 0
 13883 0195 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 13883      00
 13884              	.LVL1157:
 13885              	.LBE17961:
 13886              	.LBE17962:
 13887              	.LBE17958:
 13888              	.LBE17957:
 13889              	.LBE17946:
 13890              	.LBE17945:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 13891              		.loc 3 172 0
 13892 019a BE600000 		movl	$96, %esi
 13892      00
 13893 019f 4889EF   		movq	%rbp, %rdi
 13894 01a2 E8000000 		call	_ZdlPvm@PLT
 13894      00
 13895              	.LVL1158:
 13896 01a7 EBB2     		jmp	.L774
 13897              	.LVL1159:
 13898 01a9 0F1F8000 		.p2align 4,,10
 13898      000000
 13899              		.p2align 3
 13900              	.L813:
 13901              	.LBE17963:
 13902              	.LBE17964:
 13903              	.LBE17966:
 13904              	.LBE17969:
 13905              	.LBE17972:
 13906              	.LBE17974:
 13907              	.LBE17976:
 13908              	.LBE17978:
 13909              	.LBE17980:
 13910              	.LBB17981:
 13911              	.LBB17934:
 13912              	.LBB17932:
 13913              	.LBB17929:
 13914              	.LBB17926:
GAS LISTING /tmp/ccvmoMuv.s 			page 692


 13915              	.LBB17924:
 13916              	.LBB17922:
 13917              	.LBB17919:
 13918              	.LBB17916:
 13919              	.LBB17914:
 13920              	.LBB17913:
 13921              	.LBB17895:
 13922              	.LBB17896:
 104:/usr/include/boost/exception/info.hpp ****                 }
 13923              		.loc 3 104 0
 13924 01b0 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 13924      000000
 13925 01b7 498B7E38 		movq	56(%r14), %rdi
 13926 01bb 498906   		movq	%rax, (%r14)
 13927              	.LVL1160:
 13928              	.LBB17897:
 13929              	.LBB17898:
 13930              	.LBB17899:
 13931              	.LBB17900:
 13932              	.LBB17901:
 13933              	.LBB17902:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 13934              		.loc 10 152 0
 13935 01be 498D4648 		leaq	72(%r14), %rax
 13936              	.LBE17902:
 13937              	.LBE17901:
 13938              	.LBE17900:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 13939              		.loc 10 180 0
 13940 01c2 4839C7   		cmpq	%rax, %rdi
 13941 01c5 7405     		je	.L793
 13942              	.LVL1161:
 13943              	.LBB17903:
 13944              	.LBB17904:
 13945              	.LBB17905:
 13946              	.LBB17906:
 13947              		.loc 12 110 0
 13948 01c7 E8000000 		call	_ZdlPv@PLT
 13948      00
 13949              	.LVL1162:
 13950              	.L793:
 13951              	.LBE17906:
 13952              	.LBE17905:
 13953              	.LBE17904:
 13954              	.LBE17903:
 13955              	.LBE17899:
 13956              	.LBE17898:
 13957              	.LBE17897:
 13958              	.LBB17907:
 13959              	.LBB17908:
 13960              	.LBB17909:
 13961              	.LBB17910:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 13962              		.loc 19 873 0
 13963 01cc 498B7618 		movq	24(%r14), %rsi
 13964              	.LBE17910:
 13965              	.LBE17909:
GAS LISTING /tmp/ccvmoMuv.s 			page 693


  96:/usr/include/c++/6/bits/stl_map.h ****     {
 13966              		.loc 36 96 0
 13967 01d0 498D7E08 		leaq	8(%r14), %rdi
 13968              	.LVL1163:
 13969              	.LBB17912:
 13970              	.LBB17911:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 13971              		.loc 19 873 0
 13972 01d4 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 13972      00
 13973              	.LVL1164:
 13974              	.LBE17911:
 13975              	.LBE17912:
 13976              	.LBE17908:
 13977              	.LBE17907:
 13978              	.LBE17896:
 13979              	.LBE17895:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 13980              		.loc 3 172 0
 13981 01d9 BE600000 		movl	$96, %esi
 13981      00
 13982 01de 4C89F7   		movq	%r14, %rdi
 13983 01e1 E8000000 		call	_ZdlPvm@PLT
 13983      00
 13984              	.LVL1165:
 13985 01e6 E92FFFFF 		jmp	.L790
 13985      FF
 13986              	.LVL1166:
 13987 01eb 0F1F4400 		.p2align 4,,10
 13987      00
 13988              		.p2align 3
 13989              	.L812:
 13990              	.LBE17913:
 13991              	.LBE17914:
 13992              	.LBE17916:
 13993              	.LBE17919:
 13994              	.LBE17922:
 13995              	.LBE17924:
 13996              	.LBE17926:
 13997              	.LBE17929:
 13998              	.LBE17932:
 13999              	.LBE17934:
 14000              	.LBE17981:
 130:/usr/include/boost/exception/detail/exception_ptr.hpp ****             return ep;
 14001              		.loc 29 130 0 discriminator 1
 14002 01f0 488D3D00 		leaq	_ZGVZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13exception
 14002      000000
 14003 01f7 4C8D2D00 		leaq	16+_ZTVN5boost9exceptionE(%rip), %r13
 14003      000000
 14004 01fe E8000000 		call	__cxa_guard_acquire@PLT
 14004      00
 14005              	.LVL1167:
 14006 0203 85C0     		testl	%eax, %eax
 14007 0205 0F84A7FE 		je	.L776
 14007      FFFF
 130:/usr/include/boost/exception/detail/exception_ptr.hpp ****             return ep;
 14008              		.loc 29 130 0 is_stmt 0 discriminator 2
GAS LISTING /tmp/ccvmoMuv.s 			page 694


 14009 020b BF380000 		movl	$56, %edi
 14009      00
 14010              	.LEHB58:
 14011 0210 E8000000 		call	_Znwm@PLT
 14011      00
 14012              	.LVL1168:
 14013              	.LEHE58:
 14014              	.LBB17982:
 14015              	.LBB17983:
 14016              	.LBB17984:
 14017              	.LBB17985:
 14018              	.LBB17986:
 14019              	.LBB17987:
 14020              	.LBB17988:
  38:/usr/include/boost/exception/exception.hpp ****                 {
 14021              		.loc 7 38 0 is_stmt 1 discriminator 2
 14022 0215 488B7C24 		movq	72(%rsp), %rdi
 14022      48
 14023              	.LBE17988:
 14024              	.LBE17987:
 14025              	.LBE17986:
 14026              	.LBE17985:
 14027              	.LBE17984:
 14028              	.LBB18011:
 14029              	.LBB18012:
 415:/usr/include/boost/exception/exception.hpp ****             {
 14030              		.loc 7 415 0 discriminator 2
 14031 021a 488D3500 		leaq	16+_ZTVN5boost16exception_detail10clone_baseE(%rip), %rsi
 14031      000000
 14032              	.LBE18012:
 14033              	.LBE18011:
 14034              	.LBE17983:
 14035              	.LBE17982:
 130:/usr/include/boost/exception/detail/exception_ptr.hpp ****             return ep;
 14036              		.loc 29 130 0 discriminator 2
 14037 0221 48890424 		movq	%rax, (%rsp)
 14038              	.LVL1169:
 14039              	.LBB18023:
 14040              	.LBB18020:
 14041              	.LBB18014:
 14042              	.LBB18006:
 14043              	.LBB18001:
 220:/usr/include/boost/exception/exception.hpp ****         {
 14044              		.loc 7 220 0 discriminator 2
 14045 0225 4C8928   		movq	%r13, (%rax)
 14046              	.LBE18001:
 14047              	.LBE18006:
 14048              	.LBE18014:
 14049              	.LBB18015:
 14050              	.LBB18013:
 415:/usr/include/boost/exception/exception.hpp ****             {
 14051              		.loc 7 415 0 discriminator 2
 14052 0228 48897030 		movq	%rsi, 48(%rax)
 14053              	.LVL1170:
 14054              	.LBE18013:
 14055              	.LBE18015:
 14056              	.LBB18016:
GAS LISTING /tmp/ccvmoMuv.s 			page 695


 14057              	.LBB18007:
 14058              	.LBB18002:
 14059              	.LBB17999:
 14060              	.LBB17997:
 14061              	.LBB17989:
 14062              	.LBB17990:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 14063              		.loc 7 71 0 discriminator 2
 14064 022c 4885FF   		testq	%rdi, %rdi
 14065              	.LBE17990:
 14066              	.LBE17989:
  38:/usr/include/boost/exception/exception.hpp ****                 {
 14067              		.loc 7 38 0 discriminator 2
 14068 022f 48897808 		movq	%rdi, 8(%rax)
 14069              	.LVL1171:
 14070              	.LBB17995:
 14071              	.LBB17993:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 14072              		.loc 7 71 0 discriminator 2
 14073 0233 741B     		je	.L779
  72:/usr/include/boost/exception/exception.hpp ****                 }
 14074              		.loc 7 72 0
 14075 0235 488B07   		movq	(%rdi), %rax
 14076              	.LVL1172:
 14077 0238 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7add_refEv(%rip), %rdx
 14077      000000
 14078 023f 488B4018 		movq	24(%rax), %rax
 14079 0243 4839D0   		cmpq	%rdx, %rax
 14080 0246 0F850C01 		jne	.L780
 14080      0000
 14081              	.LVL1173:
 14082              	.LBB17991:
 14083              	.LBB17992:
 162:/usr/include/boost/exception/info.hpp ****                 }
 14084              		.loc 3 162 0
 14085 024c 83475801 		addl	$1, 88(%rdi)
 14086              	.LVL1174:
 14087              	.L779:
 14088              	.LBE17992:
 14089              	.LBE17991:
 14090              	.LBE17993:
 14091              	.LBE17995:
 14092              	.LBE17997:
 14093              	.LBE17999:
 220:/usr/include/boost/exception/exception.hpp ****         {
 14094              		.loc 7 220 0
 14095 0250 488B0C24 		movq	(%rsp), %rcx
 14096 0254 488B4424 		movq	80(%rsp), %rax
 14096      50
 14097              	.LBE18002:
 14098              	.LBE18007:
 14099              	.LBE18016:
 14100              	.LBE18020:
 14101              	.LBE18023:
 14102              	.LBB18024:
 14103              	.LBB18025:
 14104              	.LBB18026:
GAS LISTING /tmp/ccvmoMuv.s 			page 696


 14105              	.LBB18027:
 14106              	.LBB18028:
 137:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 14107              		.loc 28 137 0
 14108 0259 BF180000 		movl	$24, %edi
 14108      00
 14109              	.LBE18028:
 14110              	.LBE18027:
 14111              	.LBE18026:
 14112              	.LBE18025:
 14113              	.LBE18024:
 14114              	.LBB18061:
 14115              	.LBB18021:
 14116              	.LBB18017:
 14117              	.LBB18008:
 14118              	.LBB18003:
 220:/usr/include/boost/exception/exception.hpp ****         {
 14119              		.loc 7 220 0
 14120 025e 48894110 		movq	%rax, 16(%rcx)
 14121 0262 488B4424 		movq	88(%rsp), %rax
 14121      58
 14122              	.LBE18003:
 14123              	.LBE18008:
 14124              	.LBE18017:
 459:/usr/include/boost/exception/exception.hpp ****             public T,
 14125              		.loc 7 459 0
 14126 0267 4C8939   		movq	%r15, (%rcx)
 14127 026a 4C897130 		movq	%r14, 48(%rcx)
 14128              	.LBB18018:
 14129              	.LBB18009:
 14130              	.LBB18004:
 220:/usr/include/boost/exception/exception.hpp ****         {
 14131              		.loc 7 220 0
 14132 026e 48894118 		movq	%rax, 24(%rcx)
 14133 0272 8B442460 		movl	96(%rsp), %eax
 14134 0276 894120   		movl	%eax, 32(%rcx)
 14135              	.LVL1175:
 14136              	.LBE18004:
 14137              	.LBE18009:
 14138              	.LBE18018:
 459:/usr/include/boost/exception/exception.hpp ****             public T,
 14139              		.loc 7 459 0
 14140 0279 488D0500 		leaq	72+_ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE(%rip), %rax
 14140      000000
 14141 0280 48894128 		movq	%rax, 40(%rcx)
 14142              	.LBE18021:
 14143              	.LBE18061:
 14144              	.LBB18062:
 14145              	.LBB18056:
 360:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 14146              		.loc 27 360 0
 14147 0284 488D4130 		leaq	48(%rcx), %rax
 14148 0288 48894424 		movq	%rax, 8(%rsp)
 14148      08
 14149              	.LEHB59:
 14150              	.LBB18051:
 14151              	.LBB18046:
GAS LISTING /tmp/ccvmoMuv.s 			page 697


 14152              	.LBB18041:
 137:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 14153              		.loc 28 137 0
 14154 028d E8000000 		call	_Znwm@PLT
 14154      00
 14155              	.LVL1176:
 14156              	.LEHE59:
 14157              	.LBB18029:
 14158              	.LBB18030:
  66:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     {
 14159              		.loc 6 66 0
 14160 0292 488B0C24 		movq	(%rsp), %rcx
 14161 0296 488D3500 		leaq	16+_ZTVN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EE
 14161      000000
 14162              	.LBE18030:
 14163              	.LBE18029:
 137:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 14164              		.loc 28 137 0
 14165 029d 4989C7   		movq	%rax, %r15
 14166              	.LVL1177:
 14167              	.LBB18036:
 14168              	.LBB18033:
 14169              	.LBB18031:
 14170              	.LBB18032:
 109:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     {
 14171              		.loc 1 109 0
 14172 02a0 C7400801 		movl	$1, 8(%rax)
 14172      000000
 14173 02a7 C7400C01 		movl	$1, 12(%rax)
 14173      000000
 14174              	.LVL1178:
 14175              	.LBE18032:
 14176              	.LBE18031:
 14177              	.LBE18033:
 14178              	.LBE18036:
 14179              	.LBE18041:
 14180              	.LBE18046:
 14181              	.LBE18051:
 14182              	.LBE18056:
 14183              	.LBE18062:
 130:/usr/include/boost/exception/detail/exception_ptr.hpp ****             return ep;
 14184              		.loc 29 130 0
 14185 02ae 488D3D00 		leaq	_ZGVZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13exception
 14185      000000
 14186              	.LBB18063:
 14187              	.LBB18057:
 14188              	.LBB18052:
 14189              	.LBB18047:
 14190              	.LBB18042:
 14191              	.LBB18037:
 14192              	.LBB18034:
  66:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     {
 14193              		.loc 6 66 0
 14194 02b5 488930   		movq	%rsi, (%rax)
 14195              	.LBE18034:
 14196              	.LBE18037:
 14197              	.LBE18042:
GAS LISTING /tmp/ccvmoMuv.s 			page 698


 14198              	.LBE18047:
 14199              	.LBE18052:
 14200              	.LBE18057:
 14201              	.LBE18063:
 14202              	.LBB18064:
 14203              	.LBB18065:
 14204              	.LBB18066:
 14205              	.LBB18067:
 14206              	.LBB18068:
 14207              	.LBB18069:
 14208              	.LBB18070:
 479:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 14209              		.loc 28 479 0
 14210 02b8 4C893D00 		movq	%r15, 8+_ZZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13exc
 14210      000000
 14211              	.LBE18070:
 14212              	.LBE18069:
 14213              	.LBE18068:
 14214              	.LBE18067:
 14215              	.LBE18066:
 14216              	.LBE18065:
 14217              	.LBE18064:
 14218              	.LBB18081:
 14219              	.LBB18058:
 14220              	.LBB18053:
 14221              	.LBB18048:
 14222              	.LBB18043:
 14223              	.LBB18038:
 14224              	.LBB18035:
  66:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     {
 14225              		.loc 6 66 0
 14226 02bf 48894810 		movq	%rcx, 16(%rax)
 14227              	.LVL1179:
 14228              	.LBE18035:
 14229              	.LBE18038:
 14230              	.LBE18043:
 14231              	.LBE18048:
 14232              	.LBE18053:
 14233              	.LBE18058:
 14234              	.LBE18081:
 14235              	.LBB18082:
 14236              	.LBB18080:
 14237              	.LBB18079:
 14238              	.LBB18078:
 405:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 14239              		.loc 27 405 0
 14240 02c3 488B4424 		movq	8(%rsp), %rax
 14240      08
 14241              	.LBB18077:
 14242              	.LBB18076:
 14243              	.LBB18075:
 14244              	.LBB18071:
 14245              	.LBB18072:
 14246              	.LBB18073:
 14247              	.LBB18074:
  66:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** }
 14248              		.loc 1 66 0
GAS LISTING /tmp/ccvmoMuv.s 			page 699


 14249              	#APP
 14250              	# 66 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 14251              		lock
 14252              		incl 8(%r15)
 14253              	# 0 "" 2
 14254              	#NO_APP
 14255              	.LBE18074:
 14256              	.LBE18073:
 14257              	.LBE18072:
 14258              	.LBE18071:
 14259              	.LBE18075:
 14260              	.LBE18076:
 14261              	.LBE18077:
 405:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 14262              		.loc 27 405 0
 14263 02cd 48890500 		movq	%rax, _ZZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13excep
 14263      000000
 14264              	.LVL1180:
 14265              	.LBE18078:
 14266              	.LBE18079:
 14267              	.LBE18080:
 14268              	.LBE18082:
 130:/usr/include/boost/exception/detail/exception_ptr.hpp ****             return ep;
 14269              		.loc 29 130 0
 14270 02d4 E8000000 		call	__cxa_guard_release@PLT
 14270      00
 14271              	.LVL1181:
 14272 02d9 488D1500 		leaq	__dso_handle(%rip), %rdx
 14272      000000
 14273 02e0 488D3500 		leaq	_ZZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13exception_p
 14273      000000
 14274 02e7 488D3D00 		leaq	_ZN5boost13exception_ptrD1Ev(%rip), %rdi
 14274      000000
 14275 02ee E8000000 		call	__cxa_atexit@PLT
 14275      00
 14276              	.LVL1182:
 14277              	.LBB18083:
 14278              	.LBB18084:
 14279              	.LBB18085:
 14280              	.LBB18086:
 14281              	.LBB18087:
 14282              	.LBB18088:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 14283              		.loc 1 50 0
 14284 02f3 BAFFFFFF 		movl	$-1, %edx
 14284      FF
 14285 02f8 89D0     		movl	%edx, %eax
 14286              	#APP
 14287              	# 50 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 14288              		lock
 14289              		xadd %eax, 8(%r15)
 14290              	# 0 "" 2
 14291              	.LVL1183:
 14292              	#NO_APP
 14293              	.LBE18088:
 14294              	.LBE18087:
 144:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
GAS LISTING /tmp/ccvmoMuv.s 			page 700


 14295              		.loc 1 144 0
 14296 0300 83F801   		cmpl	$1, %eax
 14297 0303 0F85A9FD 		jne	.L776
 14297      FFFF
 14298              	.LBB18089:
 14299              	.LBB18090:
 146:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****             weak_release();
 14300              		.loc 1 146 0
 14301 0309 498B07   		movq	(%r15), %rax
 14302 030c 891424   		movl	%edx, (%rsp)
 14303              	.LVL1184:
 14304 030f 4C89FF   		movq	%r15, %rdi
 14305 0312 FF5010   		call	*16(%rax)
 14306              	.LVL1185:
 14307              	.LBB18091:
 14308              	.LBB18092:
 14309              	.LBB18093:
 14310              	.LBB18094:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 14311              		.loc 1 50 0
 14312 0315 8B1424   		movl	(%rsp), %edx
 14313              	#APP
 14314              	# 50 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 14315              		lock
 14316              		xadd %edx, 12(%r15)
 14317              	# 0 "" 2
 14318              	.LVL1186:
 14319              	#NO_APP
 14320              	.LBE18094:
 14321              	.LBE18093:
 158:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
 14322              		.loc 1 158 0
 14323 031e 83FA01   		cmpl	$1, %edx
 14324 0321 0F858BFD 		jne	.L776
 14324      FFFF
 14325              		.loc 1 160 0
 14326 0327 498B07   		movq	(%r15), %rax
 14327 032a 4C89FF   		movq	%r15, %rdi
 14328 032d FF5018   		call	*24(%rax)
 14329              	.LVL1187:
 14330 0330 E97DFDFF 		jmp	.L776
 14330      FF
 14331              	.LVL1188:
 14332              		.p2align 4,,10
 14333 0335 0F1F00   		.p2align 3
 14334              	.L791:
 14335              	.LBE18092:
 14336              	.LBE18091:
 14337              	.LBE18090:
 14338              	.LBE18089:
 14339              	.LBE18086:
 14340              	.LBE18085:
 14341              	.LBE18084:
 14342              	.LBE18083:
 14343              	.LBB18095:
 14344              	.LBB17935:
 14345              	.LBB17933:
GAS LISTING /tmp/ccvmoMuv.s 			page 701


 14346              	.LBB17930:
 14347              	.LBB17927:
 14348              	.LBB17925:
 14349              	.LBB17923:
 14350              	.LBB17920:
 14351              	.LBB17917:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 14352              		.loc 7 78 0
 14353 0338 4C89F7   		movq	%r14, %rdi
 14354 033b FFD0     		call	*%rax
 14355              	.LVL1189:
 14356 033d E9D8FDFF 		jmp	.L790
 14356      FF
 14357              	.LVL1190:
 14358              		.p2align 4,,10
 14359 0342 660F1F44 		.p2align 3
 14359      0000
 14360              	.L796:
 14361              	.LBE17917:
 14362              	.LBE17920:
 14363              	.LBE17923:
 14364              	.LBE17925:
 14365              	.LBE17927:
 14366              	.LBE17930:
 14367              	.LBE17933:
 14368              	.LBE17935:
 14369              	.LBE18095:
 14370              	.LBB18096:
 14371              	.LBB17979:
 14372              	.LBB17977:
 14373              	.LBB17975:
 14374              	.LBB17973:
 14375              	.LBB17970:
 14376              	.LBB17967:
 14377 0348 4889EF   		movq	%rbp, %rdi
 14378 034b FFD0     		call	*%rax
 14379              	.LVL1191:
 14380              	.LBE17967:
 14381              	.LBE17970:
 14382              	.LBE17973:
 14383              	.LBE17975:
 14384              	.LBE17977:
 14385              	.LBE17979:
 14386              	.LBE18096:
 131:/usr/include/boost/exception/detail/exception_ptr.hpp ****             }
 14387              		.loc 29 131 0
 14388 034d E909FEFF 		jmp	.L774
 14388      FF
 14389              	.LVL1192:
 14390              		.p2align 4,,10
 14391 0352 660F1F44 		.p2align 3
 14391      0000
 14392              	.L780:
 14393              	.LEHB60:
 14394              	.LBB18097:
 14395              	.LBB18022:
 14396              	.LBB18019:
GAS LISTING /tmp/ccvmoMuv.s 			page 702


 14397              	.LBB18010:
 14398              	.LBB18005:
 14399              	.LBB18000:
 14400              	.LBB17998:
 14401              	.LBB17996:
 14402              	.LBB17994:
  72:/usr/include/boost/exception/exception.hpp ****                 }
 14403              		.loc 7 72 0
 14404 0358 FFD0     		call	*%rax
 14405              	.LVL1193:
 14406              	.LEHE60:
 14407 035a E9F1FEFF 		jmp	.L779
 14407      FF
 14408              	.LVL1194:
 14409              	.L803:
 14410              	.LBE17994:
 14411              	.LBE17996:
 14412              	.LBE17998:
 14413              	.LBE18000:
 14414              	.LBE18005:
 14415              	.LBE18010:
 14416              	.LBE18019:
 14417              	.LBE18022:
 14418              	.LBE18097:
 14419              	.LBB18098:
 14420              	.LBB18059:
 14421              	.LBB18054:
 14422              	.LBB18049:
 14423              	.LBB18044:
 139:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         {
 14424              		.loc 28 139 0
 14425 035f 4889C7   		movq	%rax, %rdi
 14426 0362 E8000000 		call	__cxa_begin_catch@PLT
 14426      00
 14427              	.LVL1195:
 14428              	.LBB18039:
 14429              	.LBB18040:
 14430              		.loc 37 34 0
 14431 0367 488B3C24 		movq	(%rsp), %rdi
 14432 036b 488B07   		movq	(%rdi), %rax
 14433 036e FF5008   		call	*8(%rax)
 14434              	.LVL1196:
 14435              	.LEHB61:
 14436              	.LBE18040:
 14437              	.LBE18039:
 142:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 14438              		.loc 28 142 0
 14439 0371 E8000000 		call	__cxa_rethrow@PLT
 14439      00
 14440              	.LVL1197:
 14441              	.LEHE61:
 14442              	.L800:
 14443 0376 4889C3   		movq	%rax, %rbx
 14444              	.LVL1198:
 14445              	.L786:
 14446              	.LBE18044:
 14447              	.LBE18049:
GAS LISTING /tmp/ccvmoMuv.s 			page 703


 14448              	.LBE18054:
 14449              	.LBE18059:
 14450              	.LBE18098:
 130:/usr/include/boost/exception/detail/exception_ptr.hpp ****             return ep;
 14451              		.loc 29 130 0 discriminator 7
 14452 0379 488D3D00 		leaq	_ZGVZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13exception
 14452      000000
 14453 0380 E8000000 		call	__cxa_guard_abort@PLT
 14453      00
 14454              	.LVL1199:
 14455              	.LBB18099:
 14456              	.LBB18100:
 481:/usr/include/boost/exception/exception.hpp **** 
 14457              		.loc 7 481 0 discriminator 7
 14458 0385 488D0500 		leaq	72+_ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE(%rip), %rax
 14458      000000
 14459 038c 488D7C24 		leaq	64(%rsp), %rdi
 14459      40
 14460              	.LVL1200:
 14461 0391 4C897C24 		movq	%r15, 64(%rsp)
 14461      40
 14462 0396 4C897424 		movq	%r14, 112(%rsp)
 14462      70
 14463 039b 48894424 		movq	%rax, 104(%rsp)
 14463      68
 14464 03a0 E8000000 		call	_ZN5boost16exception_detail10bad_alloc_D2Ev
 14464      00
 14465              	.LVL1201:
 14466              	.LBE18100:
 14467              	.LBE18099:
 122:/usr/include/boost/exception/detail/exception_ptr.hpp ****             exception_detail::clone_impl<Exception> c(ba);
 14468              		.loc 29 122 0 discriminator 7
 14469 03a5 488D7C24 		leaq	16(%rsp), %rdi
 14469      10
 14470 03aa E8000000 		call	_ZN5boost16exception_detail10bad_alloc_D1Ev
 14470      00
 14471              	.LVL1202:
 14472 03af 4889DF   		movq	%rbx, %rdi
 14473              	.LEHB62:
 14474 03b2 E8000000 		call	_Unwind_Resume@PLT
 14474      00
 14475              	.LVL1203:
 14476              	.LEHE62:
 14477              	.L801:
 130:/usr/include/boost/exception/detail/exception_ptr.hpp ****             return ep;
 14478              		.loc 29 130 0
 14479 03b7 488B3C24 		movq	(%rsp), %rdi
 14480 03bb BE380000 		movl	$56, %esi
 14480      00
 14481 03c0 4889C3   		movq	%rax, %rbx
 14482              	.LVL1204:
 14483 03c3 E8000000 		call	_ZdlPvm@PLT
 14483      00
 14484              	.LVL1205:
 14485 03c8 EBAF     		jmp	.L786
 14486              	.LVL1206:
 14487              	.L802:
GAS LISTING /tmp/ccvmoMuv.s 			page 704


 14488 03ca 4889C3   		movq	%rax, %rbx
 14489              	.LVL1207:
 14490              	.LBB18101:
 14491              	.LBB18060:
 14492              	.LBB18055:
 14493              	.LBB18050:
 14494              	.LBB18045:
 139:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         {
 14495              		.loc 28 139 0
 14496 03cd E8000000 		call	__cxa_end_catch@PLT
 14496      00
 14497              	.LVL1208:
 14498 03d2 EBA5     		jmp	.L786
 14499              	.LBE18045:
 14500              	.LBE18050:
 14501              	.LBE18055:
 14502              	.LBE18060:
 14503              	.LBE18101:
 14504              		.cfi_endproc
 14505              	.LFE12064:
 14506              		.section	.gcc_except_table
 14507 011a 0000     		.align 4
 14508              	.LLSDA12064:
 14509 011c FF       		.byte	0xff
 14510 011d 9B       		.byte	0x9b
 14511 011e 25       		.uleb128 .LLSDATT12064-.LLSDATTD12064
 14512              	.LLSDATTD12064:
 14513 011f 01       		.byte	0x1
 14514 0120 1D       		.uleb128 .LLSDACSE12064-.LLSDACSB12064
 14515              	.LLSDACSB12064:
 14516 0121 9004     		.uleb128 .LEHB58-.LFB12064
 14517 0123 05       		.uleb128 .LEHE58-.LEHB58
 14518 0124 F606     		.uleb128 .L800-.LFB12064
 14519 0126 00       		.uleb128 0
 14520 0127 8D05     		.uleb128 .LEHB59-.LFB12064
 14521 0129 05       		.uleb128 .LEHE59-.LEHB59
 14522 012a DF06     		.uleb128 .L803-.LFB12064
 14523 012c 01       		.uleb128 0x1
 14524 012d D806     		.uleb128 .LEHB60-.LFB12064
 14525 012f 02       		.uleb128 .LEHE60-.LEHB60
 14526 0130 B707     		.uleb128 .L801-.LFB12064
 14527 0132 00       		.uleb128 0
 14528 0133 F106     		.uleb128 .LEHB61-.LFB12064
 14529 0135 05       		.uleb128 .LEHE61-.LEHB61
 14530 0136 CA07     		.uleb128 .L802-.LFB12064
 14531 0138 00       		.uleb128 0
 14532 0139 B207     		.uleb128 .LEHB62-.LFB12064
 14533 013b 05       		.uleb128 .LEHE62-.LEHB62
 14534 013c 00       		.uleb128 0
 14535 013d 00       		.uleb128 0
 14536              	.LLSDACSE12064:
 14537 013e 01       		.byte	0x1
 14538 013f 00       		.byte	0
 14539              		.align 4
 14540 0140 00000000 		.long	0
 14541              	
 14542              	.LLSDATT12064:
GAS LISTING /tmp/ccvmoMuv.s 			page 705


 14543              		.section	.text._ZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13ex
 14545              		.section	.text._ZNK5boost16exception_detail10clone_implINS0_14bad_exception_EE5cloneEv,"axG",@prog
 14546              		.align 2
 14547              		.p2align 4,,15
 14548              		.weak	_ZNK5boost16exception_detail10clone_implINS0_14bad_exception_EE5cloneEv
 14550              	_ZNK5boost16exception_detail10clone_implINS0_14bad_exception_EE5cloneEv:
 14551              	.LFB15592:
 486:/usr/include/boost/exception/exception.hpp ****                 {
 14552              		.loc 7 486 0
 14553              		.cfi_startproc
 14554              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 14555              		.cfi_lsda 0x1b,.LLSDA15592
 14556              	.LVL1209:
 14557 0000 4157     		pushq	%r15
 14558              		.cfi_def_cfa_offset 16
 14559              		.cfi_offset 15, -16
 14560 0002 4156     		pushq	%r14
 14561              		.cfi_def_cfa_offset 24
 14562              		.cfi_offset 14, -24
 14563 0004 4155     		pushq	%r13
 14564              		.cfi_def_cfa_offset 32
 14565              		.cfi_offset 13, -32
 14566 0006 4154     		pushq	%r12
 14567              		.cfi_def_cfa_offset 40
 14568              		.cfi_offset 12, -40
 14569 0008 4989FD   		movq	%rdi, %r13
 14570 000b 55       		pushq	%rbp
 14571              		.cfi_def_cfa_offset 48
 14572              		.cfi_offset 6, -48
 14573 000c 53       		pushq	%rbx
 14574              		.cfi_def_cfa_offset 56
 14575              		.cfi_offset 3, -56
 488:/usr/include/boost/exception/exception.hpp ****                 }
 14576              		.loc 7 488 0
 14577 000d BF380000 		movl	$56, %edi
 14577      00
 14578              	.LVL1210:
 486:/usr/include/boost/exception/exception.hpp ****                 {
 14579              		.loc 7 486 0
 14580 0012 4883EC48 		subq	$72, %rsp
 14581              		.cfi_def_cfa_offset 128
 14582              	.LEHB63:
 488:/usr/include/boost/exception/exception.hpp ****                 }
 14583              		.loc 7 488 0
 14584 0016 E8000000 		call	_Znwm@PLT
 14584      00
 14585              	.LVL1211:
 14586              	.LEHE63:
 14587              	.LBB18374:
 14588              	.LBB18375:
 14589              	.LBB18376:
 14590              	.LBB18377:
 14591              	.LBB18378:
 14592              	.LBB18379:
 14593              	.LBB18380:
  38:/usr/include/boost/exception/exception.hpp ****                 {
 14594              		.loc 7 38 0
GAS LISTING /tmp/ccvmoMuv.s 			page 706


 14595 001b 498B5D08 		movq	8(%r13), %rbx
 14596              	.LBE18380:
 14597              	.LBE18379:
 14598              	.LBE18378:
 14599              	.LBE18377:
 14600              	.LBE18376:
 14601              	.LBE18375:
 14602              	.LBE18374:
 488:/usr/include/boost/exception/exception.hpp ****                 }
 14603              		.loc 7 488 0
 14604 001f 4889C5   		movq	%rax, %rbp
 14605              	.LVL1212:
 14606              	.LBB18705:
 14607              	.LBB18702:
 14608              	.LBB18411:
 14609              	.LBB18412:
 415:/usr/include/boost/exception/exception.hpp ****             {
 14610              		.loc 7 415 0
 14611 0022 488D0500 		leaq	16+_ZTVN5boost16exception_detail10clone_baseE(%rip), %rax
 14611      000000
 14612              	.LVL1213:
 14613 0029 48894530 		movq	%rax, 48(%rbp)
 14614              	.LVL1214:
 14615              	.LBE18412:
 14616              	.LBE18411:
 14617              	.LBB18413:
 14618              	.LBB18405:
 14619              	.LBB18399:
 220:/usr/include/boost/exception/exception.hpp ****         {
 14620              		.loc 7 220 0
 14621 002d 488D0500 		leaq	16+_ZTVN5boost9exceptionE(%rip), %rax
 14621      000000
 14622              	.LBB18395:
 14623              	.LBB18391:
 14624              	.LBB18381:
 14625              	.LBB18382:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 14626              		.loc 7 71 0
 14627 0034 4885DB   		testq	%rbx, %rbx
 14628              	.LBE18382:
 14629              	.LBE18381:
  38:/usr/include/boost/exception/exception.hpp ****                 {
 14630              		.loc 7 38 0
 14631 0037 48895D08 		movq	%rbx, 8(%rbp)
 14632              	.LBE18391:
 14633              	.LBE18395:
 220:/usr/include/boost/exception/exception.hpp ****         {
 14634              		.loc 7 220 0
 14635 003b 48894500 		movq	%rax, 0(%rbp)
 14636              	.LVL1215:
 14637              	.LBB18396:
 14638              	.LBB18392:
 14639              	.LBB18388:
 14640              	.LBB18385:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 14641              		.loc 7 71 0
 14642 003f 0F84C302 		je	.L816
GAS LISTING /tmp/ccvmoMuv.s 			page 707


 14642      0000
  72:/usr/include/boost/exception/exception.hpp ****                 }
 14643              		.loc 7 72 0
 14644 0045 488B03   		movq	(%rbx), %rax
 14645 0048 4C8D3500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7add_refEv(%rip), %r14
 14645      000000
 14646 004f 488B4018 		movq	24(%rax), %rax
 14647 0053 4C39F0   		cmpq	%r14, %rax
 14648 0056 0F854C04 		jne	.L817
 14648      0000
 14649              	.LVL1216:
 14650              	.LBE18385:
 14651              	.LBE18388:
 14652              	.LBE18392:
 14653              	.LBE18396:
 220:/usr/include/boost/exception/exception.hpp ****         {
 14654              		.loc 7 220 0
 14655 005c 498B4510 		movq	16(%r13), %rax
 14656              	.LBB18397:
 14657              	.LBB18393:
 14658              	.LBB18389:
 14659              	.LBB18386:
 14660              	.LBB18383:
 14661              	.LBB18384:
 162:/usr/include/boost/exception/info.hpp ****                 }
 14662              		.loc 3 162 0
 14663 0060 83435801 		addl	$1, 88(%rbx)
 14664              	.LVL1217:
 14665              	.LBE18384:
 14666              	.LBE18383:
 14667              	.LBE18386:
 14668              	.LBE18389:
 14669              	.LBE18393:
 14670              	.LBE18397:
 220:/usr/include/boost/exception/exception.hpp ****         {
 14671              		.loc 7 220 0
 14672 0064 48894510 		movq	%rax, 16(%rbp)
 14673 0068 498B4518 		movq	24(%r13), %rax
 14674 006c 48894518 		movq	%rax, 24(%rbp)
 14675 0070 418B4520 		movl	32(%r13), %eax
 14676 0074 894520   		movl	%eax, 32(%rbp)
 14677              	.LVL1218:
 14678              	.LBE18399:
 14679              	.LBE18405:
 14680              	.LBE18413:
 465:/usr/include/boost/exception/exception.hpp ****                 {
 14681              		.loc 7 465 0
 14682 0077 488D0500 		leaq	24+_ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE(%rip), %rax
 14682      000000
 14683 007e 48894500 		movq	%rax, 0(%rbp)
 14684 0082 488D0500 		leaq	72+_ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE(%rip), %rax
 14684      000000
 14685 0089 48894528 		movq	%rax, 40(%rbp)
 14686 008d 488D0500 		leaq	136+_ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE(%rip), %rax
 14686      000000
 14687 0094 48894530 		movq	%rax, 48(%rbp)
 14688              	.LVL1219:
GAS LISTING /tmp/ccvmoMuv.s 			page 708


 14689              	.L818:
 14690              	.LBB18414:
 14691              	.LBB18415:
 14692              	.LBB18416:
 439:/usr/include/boost/exception/exception.hpp ****             a->throw_file_ = b->throw_file_;
 14693              		.loc 7 439 0
 14694 0098 488B03   		movq	(%rbx), %rax
 14695 009b 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl5cloneEv(%rip), %rdx
 14695      000000
 14696 00a2 488B4028 		movq	40(%rax), %rax
 14697 00a6 4839D0   		cmpq	%rdx, %rax
 14698 00a9 0F855103 		jne	.L820
 14698      0000
 14699              	.LVL1220:
 14700              	.LBB18417:
 14701              	.LBB18418:
 181:/usr/include/boost/exception/info.hpp ****                 p.adopt(c);
 14702              		.loc 3 181 0
 14703 00af BF600000 		movl	$96, %edi
 14703      00
 14704              	.LBB18419:
 14705              	.LBB18420:
  28:/usr/include/boost/exception/exception.hpp ****                 {
 14706              		.loc 7 28 0
 14707 00b4 48C74424 		movq	$0, 24(%rsp)
 14707      18000000 
 14707      00
 14708              	.LVL1221:
 14709              	.LEHB64:
 14710              	.LBE18420:
 14711              	.LBE18419:
 181:/usr/include/boost/exception/info.hpp ****                 p.adopt(c);
 14712              		.loc 3 181 0
 14713 00bd E8000000 		call	_Znwm@PLT
 14713      00
 14714              	.LVL1222:
 14715              	.LEHE64:
 14716              	.LBB18421:
 14717              	.LBB18422:
 14718              	.LBB18423:
 14719              	.LBB18424:
 14720              	.LBB18425:
 14721              	.LBB18426:
 14722              	.LBB18427:
 14723              	.LBB18428:
 632:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_right = &this->_M_header;
 14724              		.loc 19 632 0
 14725 00c2 4C8D7810 		leaq	16(%rax), %r15
 14726              	.LBE18428:
 14727              	.LBE18427:
 14728              	.LBE18426:
 14729              	.LBE18425:
 14730              	.LBE18424:
 14731              	.LBE18423:
  99:/usr/include/boost/exception/info.hpp ****                 {
 14732              		.loc 3 99 0
 14733 00c6 488D0D00 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rcx
GAS LISTING /tmp/ccvmoMuv.s 			page 709


 14733      000000
 14734              	.LBB18442:
 14735              	.LBB18439:
 14736              	.LBB18436:
 14737              	.LBB18433:
 602:/usr/include/c++/6/bits/stl_tree.h **** 	  { _M_initialize(); }
 14738              		.loc 19 602 0
 14739 00cd C7401000 		movl	$0, 16(%rax)
 14739      000000
 14740 00d4 48C74018 		movq	$0, 24(%rax)
 14740      00000000 
 14741 00dc 48C74030 		movq	$0, 48(%rax)
 14741      00000000 
 14742              	.LBE18433:
 14743              	.LBE18436:
 14744              	.LBE18439:
 14745              	.LBE18442:
 14746              	.LBE18422:
 14747              	.LBE18421:
 181:/usr/include/boost/exception/info.hpp ****                 p.adopt(c);
 14748              		.loc 3 181 0
 14749 00e4 4989C4   		movq	%rax, %r12
 14750              	.LVL1223:
 14751              	.LBB18460:
 14752              	.LBB18458:
  99:/usr/include/boost/exception/info.hpp ****                 {
 14753              		.loc 3 99 0
 14754 00e7 488908   		movq	%rcx, (%rax)
 14755              	.LVL1224:
 14756              	.LBB18443:
 14757              	.LBB18440:
 14758              	.LBB18437:
 14759              	.LBB18434:
 14760              	.LBB18431:
 14761              	.LBB18429:
 632:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_right = &this->_M_header;
 14762              		.loc 19 632 0
 14763 00ea 4C897820 		movq	%r15, 32(%rax)
 14764              	.LBE18429:
 14765              	.LBE18431:
 14766              	.LBE18434:
 14767              	.LBE18437:
 14768              	.LBE18440:
 14769              	.LBE18443:
 14770              	.LBB18444:
 14771              	.LBB18445:
 14772              	.LBB18446:
 142:/usr/include/c++/6/bits/basic_string.h **** #else
 14773              		.loc 10 142 0
 14774 00ee 488D4048 		leaq	72(%rax), %rax
 14775              	.LVL1225:
 14776              	.LBE18446:
 14777              	.LBE18445:
 14778              	.LBE18444:
 14779              	.LBB18455:
 14780              	.LBB18441:
 14781              	.LBB18438:
GAS LISTING /tmp/ccvmoMuv.s 			page 710


 14782              	.LBB18435:
 14783              	.LBB18432:
 14784              	.LBB18430:
 633:/usr/include/c++/6/bits/stl_tree.h **** 	  }	    
 14785              		.loc 19 633 0
 14786 00f2 4C8978E0 		movq	%r15, -32(%rax)
 14787              	.LVL1226:
 14788              	.LBE18430:
 14789              	.LBE18432:
 14790              	.LBE18435:
 14791              	.LBE18438:
 14792              	.LBE18441:
 14793              	.LBE18455:
 14794              	.LBB18456:
 14795              	.LBB18448:
 14796              	.LBB18449:
 14797              	.LBB18450:
 132:/usr/include/c++/6/bits/basic_string.h **** 
 14798              		.loc 10 132 0
 14799 00f6 49C74424 		movq	$0, 64(%r12)
 14799      40000000 
 14799      00
 14800              	.LBE18450:
 14801              	.LBE18449:
 14802              	.LBE18448:
 14803              	.LBB18453:
 14804              	.LBB18447:
 142:/usr/include/c++/6/bits/basic_string.h **** #else
 14805              		.loc 10 142 0
 14806 00ff 49894424 		movq	%rax, 56(%r12)
 14806      38
 14807              	.LVL1227:
 14808              	.LBE18447:
 14809              	.LBE18453:
 14810              	.LBE18456:
 14811              	.LBE18458:
 14812              	.LBE18460:
 14813              	.LBB18461:
 14814              	.LBB18462:
 14815              	.LBB18463:
 14816              	.LBB18464:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 14817              		.loc 7 78 0
 14818 0104 488B4424 		movq	24(%rsp), %rax
 14818      18
 14819              	.LBE18464:
 14820              	.LBE18463:
 14821              	.LBE18462:
 14822              	.LBE18461:
 14823              	.LBB18505:
 14824              	.LBB18459:
 14825              	.LBB18457:
 14826              	.LBB18454:
 14827              	.LBB18451:
 14828              	.LBB18452:
 243:/usr/include/c++/6/bits/char_traits.h **** 
 14829              		.loc 9 243 0
GAS LISTING /tmp/ccvmoMuv.s 			page 711


 14830 0109 41C64424 		movb	$0, 72(%r12)
 14830      4800
 14831              	.LVL1228:
 14832              	.LBE18452:
 14833              	.LBE18451:
 14834              	.LBE18454:
 14835              	.LBE18457:
  99:/usr/include/boost/exception/info.hpp ****                 {
 14836              		.loc 3 99 0
 14837 010f 41C74424 		movl	$0, 88(%r12)
 14837      58000000 
 14837      00
 14838              	.LVL1229:
 14839              	.LBE18459:
 14840              	.LBE18505:
 14841              	.LBB18506:
 14842              	.LBB18502:
 14843              	.LBB18493:
 14844              	.LBB18490:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 14845              		.loc 7 78 0
 14846 0118 4885C0   		testq	%rax, %rax
 14847 011b 7428     		je	.L824
 14848 011d 488B10   		movq	(%rax), %rdx
 14849 0120 488D3500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rsi
 14849      000000
 14850 0127 488B5220 		movq	32(%rdx), %rdx
 14851 012b 4839F2   		cmpq	%rsi, %rdx
 14852 012e 0F85FC03 		jne	.L823
 14852      0000
 14853              	.LVL1230:
 14854              	.LBB18465:
 14855              	.LBB18466:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 14856              		.loc 3 168 0
 14857 0134 8B7058   		movl	88(%rax), %esi
 14858 0137 8D56FF   		leal	-1(%rsi), %edx
 14859 013a 85D2     		testl	%edx, %edx
 14860 013c 895058   		movl	%edx, 88(%rax)
 14861 013f 0F84EB02 		je	.L898
 14861      0000
 14862              	.LVL1231:
 14863              	.L824:
 14864              	.LBE18466:
 14865              	.LBE18465:
 14866              	.LBE18490:
 14867              	.LBE18493:
  54:/usr/include/boost/exception/exception.hpp ****                 add_ref();
 14868              		.loc 7 54 0
 14869 0145 4C896424 		movq	%r12, 24(%rsp)
 14869      18
 14870              	.LVL1232:
 14871              	.L822:
 14872              	.LBB18494:
 14873              	.LBB18495:
 14874              	.LBB18496:
 14875              	.LBB18497:
GAS LISTING /tmp/ccvmoMuv.s 			page 712


 162:/usr/include/boost/exception/info.hpp ****                 }
 14876              		.loc 3 162 0
 14877 014a 41834424 		addl	$1, 88(%r12)
 14877      5801
 14878              	.LVL1233:
 14879              	.L828:
 14880              	.LBE18497:
 14881              	.LBE18496:
 14882              	.LBE18495:
 14883              	.LBE18494:
 14884              	.LBE18502:
 14885              	.LBE18506:
 14886              	.LBB18507:
 14887              	.LBB18508:
 298:/usr/include/c++/6/bits/stl_map.h **** 	return *this;
 14888              		.loc 36 298 0
 14889 0150 498D7C24 		leaq	8(%r12), %rdi
 14889      08
 14890              	.LVL1234:
 14891 0155 488D4308 		leaq	8(%rbx), %rax
 14892              	.LVL1235:
 14893              	.LBB18509:
 14894              	.LBB18510:
1480:/usr/include/c++/6/bits/stl_tree.h **** 	{
 14895              		.loc 19 1480 0
 14896 0159 4839C7   		cmpq	%rax, %rdi
 14897 015c 0F84C200 		je	.L830
 14897      0000
 14898              	.LVL1236:
 14899              	.LBB18511:
 14900              	.LBB18512:
 14901              	.LBB18513:
 14902              	.LBB18514:
 380:/usr/include/c++/6/bits/stl_tree.h **** 	{
 14903              		.loc 19 380 0
 14904 0162 498B4424 		movq	24(%r12), %rax
 14904      18
 14905              	.LVL1237:
 14906 0167 498B5424 		movq	40(%r12), %rdx
 14906      28
 14907 016c 48897C24 		movq	%rdi, 48(%rsp)
 14907      30
 382:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 14908              		.loc 19 382 0
 14909 0171 4885C0   		testq	%rax, %rax
 380:/usr/include/c++/6/bits/stl_tree.h **** 	{
 14910              		.loc 19 380 0
 14911 0174 48894424 		movq	%rax, 32(%rsp)
 14911      20
 14912 0179 48895424 		movq	%rdx, 40(%rsp)
 14912      28
 382:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 14913              		.loc 19 382 0
 14914 017e 0F84C403 		je	.L831
 14914      0000
 386:/usr/include/c++/6/bits/stl_tree.h **** 		_M_nodes = _M_nodes->_M_left;
 14915              		.loc 19 386 0
GAS LISTING /tmp/ccvmoMuv.s 			page 713


 14916 0184 488B5210 		movq	16(%rdx), %rdx
 384:/usr/include/c++/6/bits/stl_tree.h **** 
 14917              		.loc 19 384 0
 14918 0188 48C74008 		movq	$0, 8(%rax)
 14918      00000000 
 386:/usr/include/c++/6/bits/stl_tree.h **** 		_M_nodes = _M_nodes->_M_left;
 14919              		.loc 19 386 0
 14920 0190 4885D2   		testq	%rdx, %rdx
 14921 0193 7405     		je	.L832
 387:/usr/include/c++/6/bits/stl_tree.h **** 	    }
 14922              		.loc 19 387 0
 14923 0195 48895424 		movq	%rdx, 40(%rsp)
 14923      28
 14924              	.L832:
 14925              	.LVL1238:
 14926              	.LBE18514:
 14927              	.LBE18513:
 14928              	.LBE18512:
 14929              	.LBB18517:
 14930              	.LBB18518:
 620:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_left = &this->_M_header;
 14931              		.loc 19 620 0
 14932 019a 49C74424 		movq	$0, 24(%r12)
 14932      18000000 
 14932      00
 621:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_right = &this->_M_header;
 14933              		.loc 19 621 0
 14934 01a3 4D897C24 		movq	%r15, 32(%r12)
 14934      20
 622:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_node_count = 0;
 14935              		.loc 19 622 0
 14936 01a8 4D897C24 		movq	%r15, 40(%r12)
 14936      28
 14937 01ad 488B7318 		movq	24(%rbx), %rsi
 623:/usr/include/c++/6/bits/stl_tree.h **** 	  }
 14938              		.loc 19 623 0
 14939 01b1 49C74424 		movq	$0, 48(%r12)
 14939      30000000 
 14939      00
 14940              	.LVL1239:
 14941              	.LBE18518:
 14942              	.LBE18517:
1502:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 14943              		.loc 19 1502 0
 14944 01ba 4885F6   		testq	%rsi, %rsi
 14945 01bd 745D     		je	.L833
 14946              	.LVL1240:
1504:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_leftmost() = _S_minimum(_M_root());
 14947              		.loc 19 1504 0
 14948 01bf 488D4C24 		leaq	32(%rsp), %rcx
 14948      20
 14949 01c4 4C89FA   		movq	%r15, %rdx
 14950              	.LEHB65:
 14951 01c7 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 14951      00
 14952              	.LVL1241:
 14953              	.LEHE65:
GAS LISTING /tmp/ccvmoMuv.s 			page 714


 14954 01cc 49894424 		movq	%rax, 24(%r12)
 14954      18
 14955              	.LVL1242:
 14956 01d1 4889C1   		movq	%rax, %rcx
 14957 01d4 EB0D     		jmp	.L834
 14958              	.LVL1243:
 14959 01d6 662E0F1F 		.p2align 4,,10
 14959      84000000 
 14959      0000
 14960              		.p2align 3
 14961              	.L868:
 14962              	.LBB18519:
 14963              	.LBB18520:
 14964              	.LBB18521:
 111:/usr/include/c++/6/bits/stl_tree.h ****       return __x;
 14965              		.loc 19 111 0
 14966 01e0 4889D1   		movq	%rdx, %rcx
 14967              	.LVL1244:
 14968              	.L834:
 14969 01e3 488B5110 		movq	16(%rcx), %rdx
 14970 01e7 4885D2   		testq	%rdx, %rdx
 14971 01ea 75F4     		jne	.L868
 14972              	.LVL1245:
 14973              	.LBE18521:
 14974              	.LBE18520:
 14975              	.LBE18519:
1505:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_rightmost() = _S_maximum(_M_root());
 14976              		.loc 19 1505 0
 14977 01ec 49894C24 		movq	%rcx, 32(%r12)
 14977      20
 14978              	.LVL1246:
 14979 01f1 EB08     		jmp	.L835
 14980              	.LVL1247:
 14981              		.p2align 4,,10
 14982 01f3 0F1F4400 		.p2align 3
 14982      00
 14983              	.L869:
 14984              	.LBB18522:
 14985              	.LBB18523:
 14986              	.LBB18524:
 125:/usr/include/c++/6/bits/stl_tree.h ****       return __x;
 14987              		.loc 19 125 0
 14988 01f8 4889D0   		movq	%rdx, %rax
 14989              	.LVL1248:
 14990              	.L835:
 14991 01fb 488B5018 		movq	24(%rax), %rdx
 14992 01ff 4885D2   		testq	%rdx, %rdx
 14993 0202 75F4     		jne	.L869
 14994              	.LVL1249:
 14995              	.LBE18524:
 14996              	.LBE18523:
 14997              	.LBE18522:
1506:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_impl._M_node_count = __x._M_impl._M_node_count;
 14998              		.loc 19 1506 0
 14999 0204 49894424 		movq	%rax, 40(%r12)
 14999      28
1507:/usr/include/c++/6/bits/stl_tree.h **** 	    }
GAS LISTING /tmp/ccvmoMuv.s 			page 715


 15000              		.loc 19 1507 0
 15001 0209 488B4330 		movq	48(%rbx), %rax
 15002 020d 488B7C24 		movq	48(%rsp), %rdi
 15002      30
 15003 0212 49894424 		movq	%rax, 48(%r12)
 15003      30
 15004 0217 488B4424 		movq	32(%rsp), %rax
 15004      20
 15005              	.LVL1250:
 15006              	.L833:
 15007              	.LBB18525:
 15008              	.LBB18526:
 398:/usr/include/c++/6/bits/stl_tree.h **** 
 15009              		.loc 19 398 0
 15010 021c 4889C6   		movq	%rax, %rsi
 15011 021f E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 15011      00
 15012              	.LVL1251:
 15013              	.L830:
 15014              	.LBE18526:
 15015              	.LBE18525:
 15016              	.LBE18511:
 15017              	.LBE18510:
 15018              	.LBE18509:
 15019              	.LBE18508:
 15020              	.LBE18507:
 15021              	.LBE18418:
 15022              	.LBE18417:
 15023              	.LBB18548:
 15024              	.LBB18549:
  46:/usr/include/boost/exception/exception.hpp ****                 return *this;
 15025              		.loc 7 46 0
 15026 0224 488B5C24 		movq	24(%rsp), %rbx
 15026      18
 15027              	.LVL1252:
 15028              	.LBB18550:
 15029              	.LBB18551:
 15030              	.LBB18552:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 15031              		.loc 7 71 0
 15032 0229 4885DB   		testq	%rbx, %rbx
 15033 022c 743B     		je	.L844
  72:/usr/include/boost/exception/exception.hpp ****                 }
 15034              		.loc 7 72 0
 15035 022e 488B03   		movq	(%rbx), %rax
 15036 0231 488B4018 		movq	24(%rax), %rax
 15037 0235 4C39F0   		cmpq	%r14, %rax
 15038 0238 0F85C202 		jne	.L842
 15038      0000
 15039              	.LVL1253:
 15040              	.LBB18553:
 15041              	.LBB18554:
 162:/usr/include/boost/exception/info.hpp ****                 }
 15042              		.loc 3 162 0
 15043 023e 83435801 		addl	$1, 88(%rbx)
 15044              	.LVL1254:
 15045 0242 4989DC   		movq	%rbx, %r12
GAS LISTING /tmp/ccvmoMuv.s 			page 716


 15046              	.LVL1255:
 15047              	.L843:
 15048              	.LBE18554:
 15049              	.LBE18553:
 15050              	.LBE18552:
 15051              	.LBE18551:
 15052              	.LBE18550:
 15053              	.LBE18549:
 15054              	.LBE18548:
 15055              	.LBB18559:
 15056              	.LBB18560:
 15057              	.LBB18561:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 15058              		.loc 7 78 0
 15059 0245 498B0424 		movq	(%r12), %rax
 15060 0249 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 15060      000000
 15061 0250 488B4020 		movq	32(%rax), %rax
 15062 0254 4839D0   		cmpq	%rdx, %rax
 15063 0257 0F85C302 		jne	.L845
 15063      0000
 15064              	.LVL1256:
 15065              	.LBB18562:
 15066              	.LBB18563:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 15067              		.loc 3 168 0
 15068 025d 41836C24 		subl	$1, 88(%r12)
 15068      5801
 15069 0263 0F845701 		je	.L899
 15069      0000
 15070              	.LVL1257:
 15071              	.L844:
 15072 0269 498B5518 		movq	24(%r13), %rdx
 15073 026d 418B4520 		movl	32(%r13), %eax
 15074 0271 498B4D10 		movq	16(%r13), %rcx
 15075              	.LVL1258:
 15076              	.L819:
 15077              	.LBE18563:
 15078              	.LBE18562:
 15079              	.LBE18561:
 15080              	.LBE18560:
 15081              	.LBE18559:
 15082              	.LBE18416:
 15083              	.LBB18597:
 15084              	.LBB18598:
 15085              	.LBB18599:
 15086              	.LBB18600:
 15087              	.LBB18601:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 15088              		.loc 7 78 0
 15089 0275 4C8B6508 		movq	8(%rbp), %r12
 15090              	.LBE18601:
 15091              	.LBE18600:
 15092              	.LBE18599:
 15093              	.LBE18598:
 15094              	.LBE18597:
 440:/usr/include/boost/exception/exception.hpp ****             a->throw_line_ = b->throw_line_;
GAS LISTING /tmp/ccvmoMuv.s 			page 717


 15095              		.loc 7 440 0
 15096 0279 48895518 		movq	%rdx, 24(%rbp)
 441:/usr/include/boost/exception/exception.hpp ****             a->throw_function_ = b->throw_function_;
 15097              		.loc 7 441 0
 15098 027d 894520   		movl	%eax, 32(%rbp)
 442:/usr/include/boost/exception/exception.hpp ****             a->data_ = data;
 15099              		.loc 7 442 0
 15100 0280 48894D10 		movq	%rcx, 16(%rbp)
 15101              	.LVL1259:
 15102              	.LBB18646:
 15103              	.LBB18642:
 15104              	.LBB18638:
 15105              	.LBB18627:
 15106              	.LBB18624:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 15107              		.loc 7 78 0
 15108 0284 4D85E4   		testq	%r12, %r12
 15109 0287 7424     		je	.L848
 15110 0289 498B0424 		movq	(%r12), %rax
 15111 028d 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 15111      000000
 15112 0294 488B4020 		movq	32(%rax), %rax
 15113 0298 4839D0   		cmpq	%rdx, %rax
 15114 029b 0F85F701 		jne	.L849
 15114      0000
 15115              	.LVL1260:
 15116              	.LBB18602:
 15117              	.LBB18603:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 15118              		.loc 3 168 0
 15119 02a1 41836C24 		subl	$1, 88(%r12)
 15119      5801
 15120 02a7 0F84D300 		je	.L900
 15120      0000
 15121              	.LVL1261:
 15122              	.L848:
 15123              	.LBE18603:
 15124              	.LBE18602:
 15125              	.LBE18624:
 15126              	.LBE18627:
 15127              	.LBB18628:
 15128              	.LBB18629:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 15129              		.loc 7 71 0
 15130 02ad 4885DB   		testq	%rbx, %rbx
 15131              	.LBE18629:
 15132              	.LBE18628:
  54:/usr/include/boost/exception/exception.hpp ****                 add_ref();
 15133              		.loc 7 54 0
 15134 02b0 48895D08 		movq	%rbx, 8(%rbp)
 15135              	.LVL1262:
 15136              	.LBB18634:
 15137              	.LBB18632:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 15138              		.loc 7 71 0
 15139 02b4 7435     		je	.L855
  72:/usr/include/boost/exception/exception.hpp ****                 }
GAS LISTING /tmp/ccvmoMuv.s 			page 718


 15140              		.loc 7 72 0
 15141 02b6 488B03   		movq	(%rbx), %rax
 15142 02b9 488D0D00 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7add_refEv(%rip), %rcx
 15142      000000
 15143 02c0 488B5018 		movq	24(%rax), %rdx
 15144 02c4 4839CA   		cmpq	%rcx, %rdx
 15145 02c7 0F855301 		jne	.L856
 15145      0000
 15146              	.LVL1263:
 15147              	.LBB18630:
 15148              	.LBB18631:
 162:/usr/include/boost/exception/info.hpp ****                 }
 15149              		.loc 3 162 0
 15150 02cd 83435801 		addl	$1, 88(%rbx)
 15151              	.LVL1264:
 15152              	.L857:
 15153              	.LBE18631:
 15154              	.LBE18630:
 15155              	.LBE18632:
 15156              	.LBE18634:
 15157              	.LBE18638:
 15158              	.LBE18642:
 15159              	.LBE18646:
 15160              	.LBB18647:
 15161              	.LBB18648:
 15162              	.LBB18649:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 15163              		.loc 7 78 0
 15164 02d1 488B4020 		movq	32(%rax), %rax
 15165 02d5 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 15165      000000
 15166 02dc 4839D0   		cmpq	%rdx, %rax
 15167 02df 0F852B01 		jne	.L901
 15167      0000
 15168              	.LVL1265:
 15169              	.LBB18650:
 15170              	.LBB18651:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 15171              		.loc 3 168 0
 15172 02e5 836B5801 		subl	$1, 88(%rbx)
 15173 02e9 7455     		je	.L902
 15174              	.LVL1266:
 15175              	.L855:
 15176              	.LBE18651:
 15177              	.LBE18650:
 15178              	.LBE18649:
 15179              	.LBE18648:
 15180              	.LBE18647:
 15181              	.LBE18415:
 15182              	.LBE18414:
 15183              	.LBE18702:
 15184              	.LBE18705:
 488:/usr/include/boost/exception/exception.hpp ****                 }
 15185              		.loc 7 488 0
 15186 02eb 488B4500 		movq	0(%rbp), %rax
 15187 02ef 480368E8 		addq	-24(%rax), %rbp
 489:/usr/include/boost/exception/exception.hpp **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 719


 15188              		.loc 7 489 0
 15189 02f3 4883C448 		addq	$72, %rsp
 15190              		.cfi_remember_state
 15191              		.cfi_def_cfa_offset 56
 15192 02f7 5B       		popq	%rbx
 15193              		.cfi_def_cfa_offset 48
 488:/usr/include/boost/exception/exception.hpp ****                 }
 15194              		.loc 7 488 0
 15195 02f8 4889E8   		movq	%rbp, %rax
 489:/usr/include/boost/exception/exception.hpp **** 
 15196              		.loc 7 489 0
 15197 02fb 5D       		popq	%rbp
 15198              		.cfi_def_cfa_offset 40
 15199 02fc 415C     		popq	%r12
 15200              		.cfi_def_cfa_offset 32
 15201 02fe 415D     		popq	%r13
 15202              		.cfi_def_cfa_offset 24
 15203              	.LVL1267:
 15204 0300 415E     		popq	%r14
 15205              		.cfi_def_cfa_offset 16
 15206 0302 415F     		popq	%r15
 15207              		.cfi_def_cfa_offset 8
 15208 0304 C3       		ret
 15209              	.LVL1268:
 15210              		.p2align 4,,10
 15211 0305 0F1F00   		.p2align 3
 15212              	.L816:
 15213              		.cfi_restore_state
 15214              	.LBB18706:
 15215              	.LBB18703:
 465:/usr/include/boost/exception/exception.hpp ****                 {
 15216              		.loc 7 465 0
 15217 0308 488D3500 		leaq	24+_ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE(%rip), %rsi
 15217      000000
 15218              	.LBB18693:
 15219              	.LBB18406:
 15220              	.LBB18400:
 220:/usr/include/boost/exception/exception.hpp ****         {
 15221              		.loc 7 220 0
 15222 030f 498B4D10 		movq	16(%r13), %rcx
 15223 0313 498B5518 		movq	24(%r13), %rdx
 15224 0317 418B4520 		movl	32(%r13), %eax
 15225              	.LVL1269:
 15226              	.LBE18400:
 15227              	.LBE18406:
 15228              	.LBE18693:
 465:/usr/include/boost/exception/exception.hpp ****                 {
 15229              		.loc 7 465 0
 15230 031b 48897500 		movq	%rsi, 0(%rbp)
 15231 031f 488D3500 		leaq	72+_ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE(%rip), %rsi
 15231      000000
 15232 0326 48897528 		movq	%rsi, 40(%rbp)
 15233 032a 488D3500 		leaq	136+_ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE(%rip), %rsi
 15233      000000
 15234 0331 48897530 		movq	%rsi, 48(%rbp)
 15235              	.LVL1270:
 15236 0335 E93BFFFF 		jmp	.L819
GAS LISTING /tmp/ccvmoMuv.s 			page 720


 15236      FF
 15237              	.LVL1271:
 15238 033a 660F1F44 		.p2align 4,,10
 15238      0000
 15239              		.p2align 3
 15240              	.L902:
 15241              	.LBB18694:
 15242              	.LBB18689:
 15243              	.LBB18676:
 15244              	.LBB18674:
 15245              	.LBB18672:
 15246              	.LBB18671:
 15247              	.LBB18670:
 15248              	.LBB18652:
 15249              	.LBB18653:
 104:/usr/include/boost/exception/info.hpp ****                 }
 15250              		.loc 3 104 0
 15251 0340 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 15251      000000
 15252 0347 488B7B38 		movq	56(%rbx), %rdi
 15253 034b 488903   		movq	%rax, (%rbx)
 15254              	.LVL1272:
 15255              	.LBB18654:
 15256              	.LBB18655:
 15257              	.LBB18656:
 15258              	.LBB18657:
 15259              	.LBB18658:
 15260              	.LBB18659:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 15261              		.loc 10 152 0
 15262 034e 488D4348 		leaq	72(%rbx), %rax
 15263              	.LBE18659:
 15264              	.LBE18658:
 15265              	.LBE18657:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 15266              		.loc 10 180 0
 15267 0352 4839C7   		cmpq	%rax, %rdi
 15268 0355 7405     		je	.L860
 15269              	.LVL1273:
 15270              	.LBB18660:
 15271              	.LBB18661:
 15272              	.LBB18662:
 15273              	.LBB18663:
 15274              		.loc 12 110 0
 15275 0357 E8000000 		call	_ZdlPv@PLT
 15275      00
 15276              	.LVL1274:
 15277              	.L860:
 15278              	.LBE18663:
 15279              	.LBE18662:
 15280              	.LBE18661:
 15281              	.LBE18660:
 15282              	.LBE18656:
 15283              	.LBE18655:
 15284              	.LBE18654:
 15285              	.LBB18664:
 15286              	.LBB18665:
GAS LISTING /tmp/ccvmoMuv.s 			page 721


 15287              	.LBB18666:
 15288              	.LBB18667:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 15289              		.loc 19 873 0
 15290 035c 488B7318 		movq	24(%rbx), %rsi
 15291              	.LBE18667:
 15292              	.LBE18666:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 15293              		.loc 36 96 0
 15294 0360 488D7B08 		leaq	8(%rbx), %rdi
 15295              	.LVL1275:
 15296              	.LBB18669:
 15297              	.LBB18668:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 15298              		.loc 19 873 0
 15299 0364 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 15299      00
 15300              	.LVL1276:
 15301              	.LBE18668:
 15302              	.LBE18669:
 15303              	.LBE18665:
 15304              	.LBE18664:
 15305              	.LBE18653:
 15306              	.LBE18652:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 15307              		.loc 3 172 0
 15308 0369 BE600000 		movl	$96, %esi
 15308      00
 15309 036e 4889DF   		movq	%rbx, %rdi
 15310 0371 E8000000 		call	_ZdlPvm@PLT
 15310      00
 15311              	.LVL1277:
 15312 0376 E970FFFF 		jmp	.L855
 15312      FF
 15313              	.LVL1278:
 15314 037b 0F1F4400 		.p2align 4,,10
 15314      00
 15315              		.p2align 3
 15316              	.L900:
 15317              	.LBE18670:
 15318              	.LBE18671:
 15319              	.LBE18672:
 15320              	.LBE18674:
 15321              	.LBE18676:
 15322              	.LBB18677:
 15323              	.LBB18643:
 15324              	.LBB18639:
 15325              	.LBB18635:
 15326              	.LBB18625:
 15327              	.LBB18623:
 15328              	.LBB18622:
 15329              	.LBB18604:
 15330              	.LBB18605:
 104:/usr/include/boost/exception/info.hpp ****                 }
 15331              		.loc 3 104 0
 15332 0380 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 15332      000000
GAS LISTING /tmp/ccvmoMuv.s 			page 722


 15333 0387 498B7C24 		movq	56(%r12), %rdi
 15333      38
 15334 038c 49890424 		movq	%rax, (%r12)
 15335              	.LVL1279:
 15336              	.LBB18606:
 15337              	.LBB18607:
 15338              	.LBB18608:
 15339              	.LBB18609:
 15340              	.LBB18610:
 15341              	.LBB18611:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 15342              		.loc 10 152 0
 15343 0390 498D4424 		leaq	72(%r12), %rax
 15343      48
 15344              	.LBE18611:
 15345              	.LBE18610:
 15346              	.LBE18609:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 15347              		.loc 10 180 0
 15348 0395 4839C7   		cmpq	%rax, %rdi
 15349 0398 7405     		je	.L851
 15350              	.LVL1280:
 15351              	.LBB18612:
 15352              	.LBB18613:
 15353              	.LBB18614:
 15354              	.LBB18615:
 15355              		.loc 12 110 0
 15356 039a E8000000 		call	_ZdlPv@PLT
 15356      00
 15357              	.LVL1281:
 15358              	.L851:
 15359              	.LBE18615:
 15360              	.LBE18614:
 15361              	.LBE18613:
 15362              	.LBE18612:
 15363              	.LBE18608:
 15364              	.LBE18607:
 15365              	.LBE18606:
 15366              	.LBB18616:
 15367              	.LBB18617:
 15368              	.LBB18618:
 15369              	.LBB18619:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 15370              		.loc 19 873 0
 15371 039f 498B7424 		movq	24(%r12), %rsi
 15371      18
 15372              	.LBE18619:
 15373              	.LBE18618:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 15374              		.loc 36 96 0
 15375 03a4 498D7C24 		leaq	8(%r12), %rdi
 15375      08
 15376              	.LVL1282:
 15377              	.LBB18621:
 15378              	.LBB18620:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 15379              		.loc 19 873 0
GAS LISTING /tmp/ccvmoMuv.s 			page 723


 15380 03a9 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 15380      00
 15381              	.LVL1283:
 15382              	.LBE18620:
 15383              	.LBE18621:
 15384              	.LBE18617:
 15385              	.LBE18616:
 15386              	.LBE18605:
 15387              	.LBE18604:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 15388              		.loc 3 172 0
 15389 03ae BE600000 		movl	$96, %esi
 15389      00
 15390 03b3 4C89E7   		movq	%r12, %rdi
 15391 03b6 E8000000 		call	_ZdlPvm@PLT
 15391      00
 15392              	.LVL1284:
 15393 03bb E9EDFEFF 		jmp	.L848
 15393      FF
 15394              	.LVL1285:
 15395              		.p2align 4,,10
 15396              		.p2align 3
 15397              	.L899:
 15398              	.LBE18622:
 15399              	.LBE18623:
 15400              	.LBE18625:
 15401              	.LBE18635:
 15402              	.LBE18639:
 15403              	.LBE18643:
 15404              	.LBE18677:
 15405              	.LBB18678:
 15406              	.LBB18588:
 15407              	.LBB18586:
 15408              	.LBB18584:
 15409              	.LBB18583:
 15410              	.LBB18582:
 15411              	.LBB18564:
 15412              	.LBB18565:
 104:/usr/include/boost/exception/info.hpp ****                 }
 15413              		.loc 3 104 0
 15414 03c0 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 15414      000000
 15415 03c7 498B7C24 		movq	56(%r12), %rdi
 15415      38
 15416 03cc 49890424 		movq	%rax, (%r12)
 15417              	.LVL1286:
 15418              	.LBB18566:
 15419              	.LBB18567:
 15420              	.LBB18568:
 15421              	.LBB18569:
 15422              	.LBB18570:
 15423              	.LBB18571:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 15424              		.loc 10 152 0
 15425 03d0 498D4424 		leaq	72(%r12), %rax
 15425      48
 15426              	.LBE18571:
GAS LISTING /tmp/ccvmoMuv.s 			page 724


 15427              	.LBE18570:
 15428              	.LBE18569:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 15429              		.loc 10 180 0
 15430 03d5 4839C7   		cmpq	%rax, %rdi
 15431 03d8 7405     		je	.L846
 15432              	.LVL1287:
 15433              	.LBB18572:
 15434              	.LBB18573:
 15435              	.LBB18574:
 15436              	.LBB18575:
 15437              		.loc 12 110 0
 15438 03da E8000000 		call	_ZdlPv@PLT
 15438      00
 15439              	.LVL1288:
 15440              	.L846:
 15441              	.LBE18575:
 15442              	.LBE18574:
 15443              	.LBE18573:
 15444              	.LBE18572:
 15445              	.LBE18568:
 15446              	.LBE18567:
 15447              	.LBE18566:
 15448              	.LBB18576:
 15449              	.LBB18577:
 15450              	.LBB18578:
 15451              	.LBB18579:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 15452              		.loc 19 873 0
 15453 03df 498B7424 		movq	24(%r12), %rsi
 15453      18
 15454              	.LBE18579:
 15455              	.LBE18578:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 15456              		.loc 36 96 0
 15457 03e4 498D7C24 		leaq	8(%r12), %rdi
 15457      08
 15458              	.LVL1289:
 15459              	.LBB18581:
 15460              	.LBB18580:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 15461              		.loc 19 873 0
 15462 03e9 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 15462      00
 15463              	.LVL1290:
 15464              	.LBE18580:
 15465              	.LBE18581:
 15466              	.LBE18577:
 15467              	.LBE18576:
 15468              	.LBE18565:
 15469              	.LBE18564:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 15470              		.loc 3 172 0
 15471 03ee BE600000 		movl	$96, %esi
 15471      00
 15472 03f3 4C89E7   		movq	%r12, %rdi
 15473 03f6 E8000000 		call	_ZdlPvm@PLT
GAS LISTING /tmp/ccvmoMuv.s 			page 725


 15473      00
 15474              	.LVL1291:
 15475 03fb E969FEFF 		jmp	.L844
 15475      FF
 15476              	.LVL1292:
 15477              		.p2align 4,,10
 15478              		.p2align 3
 15479              	.L820:
 15480              	.LBE18582:
 15481              	.LBE18583:
 15482              	.LBE18584:
 15483              	.LBE18586:
 15484              	.LBE18588:
 439:/usr/include/boost/exception/exception.hpp ****             a->throw_file_ = b->throw_file_;
 15485              		.loc 7 439 0
 15486 0400 488D7C24 		leaq	24(%rsp), %rdi
 15486      18
 15487 0405 4889DE   		movq	%rbx, %rsi
 15488              	.LEHB66:
 15489 0408 FFD0     		call	*%rax
 15490              	.LVL1293:
 15491              	.LEHE66:
 15492 040a E915FEFF 		jmp	.L830
 15492      FF
 15493              	.LVL1294:
 15494 040f 90       		.p2align 4,,10
 15495              		.p2align 3
 15496              	.L901:
 15497              	.LBE18678:
 15498              	.LBB18679:
 15499              	.LBB18675:
 15500              	.LBB18673:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 15501              		.loc 7 78 0
 15502 0410 4889DF   		movq	%rbx, %rdi
 15503 0413 FFD0     		call	*%rax
 15504              	.LVL1295:
 15505 0415 E9D1FEFF 		jmp	.L855
 15505      FF
 15506              	.LVL1296:
 15507 041a 660F1F44 		.p2align 4,,10
 15507      0000
 15508              		.p2align 3
 15509              	.L856:
 15510              	.LBE18673:
 15511              	.LBE18675:
 15512              	.LBE18679:
 15513              	.LBB18680:
 15514              	.LBB18644:
 15515              	.LBB18640:
 15516              	.LBB18636:
 15517              	.LBB18633:
  72:/usr/include/boost/exception/exception.hpp ****                 }
 15518              		.loc 7 72 0
 15519 0420 4889DF   		movq	%rbx, %rdi
 15520              	.LEHB67:
 15521 0423 FFD2     		call	*%rdx
GAS LISTING /tmp/ccvmoMuv.s 			page 726


 15522              	.LVL1297:
 15523              	.LEHE67:
 15524 0425 488B03   		movq	(%rbx), %rax
 15525 0428 E9A4FEFF 		jmp	.L857
 15525      FF
 15526              	.LVL1298:
 15527 042d 0F1F00   		.p2align 4,,10
 15528              		.p2align 3
 15529              	.L898:
 15530 0430 488B7838 		movq	56(%rax), %rdi
 15531              	.LBE18633:
 15532              	.LBE18636:
 15533              	.LBE18640:
 15534              	.LBE18644:
 15535              	.LBE18680:
 15536              	.LBB18681:
 15537              	.LBB18589:
 15538              	.LBB18545:
 15539              	.LBB18538:
 15540              	.LBB18503:
 15541              	.LBB18499:
 15542              	.LBB18491:
 15543              	.LBB18489:
 15544              	.LBB18488:
 15545              	.LBB18467:
 15546              	.LBB18468:
 15547              	.LBB18469:
 15548              	.LBB18470:
 15549              	.LBB18471:
 15550              	.LBB18472:
 15551              	.LBB18473:
 15552              	.LBB18474:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 15553              		.loc 10 152 0
 15554 0434 488D5048 		leaq	72(%rax), %rdx
 15555              	.LBE18474:
 15556              	.LBE18473:
 15557              	.LBE18472:
 15558              	.LBE18471:
 15559              	.LBE18470:
 15560              	.LBE18469:
 104:/usr/include/boost/exception/info.hpp ****                 }
 15561              		.loc 3 104 0
 15562 0438 488908   		movq	%rcx, (%rax)
 15563              	.LVL1299:
 15564              	.LBB18481:
 15565              	.LBB18480:
 15566              	.LBB18479:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 15567              		.loc 10 180 0
 15568 043b 4839D7   		cmpq	%rdx, %rdi
 15569 043e 740F     		je	.L825
 15570 0440 48894424 		movq	%rax, 8(%rsp)
 15570      08
 15571              	.LVL1300:
 15572              	.LBB18475:
 15573              	.LBB18476:
GAS LISTING /tmp/ccvmoMuv.s 			page 727


 15574              	.LBB18477:
 15575              	.LBB18478:
 15576              		.loc 12 110 0
 15577 0445 E8000000 		call	_ZdlPv@PLT
 15577      00
 15578              	.LVL1301:
 15579 044a 488B4424 		movq	8(%rsp), %rax
 15579      08
 15580              	.LVL1302:
 15581              	.L825:
 15582              	.LBE18478:
 15583              	.LBE18477:
 15584              	.LBE18476:
 15585              	.LBE18475:
 15586              	.LBE18479:
 15587              	.LBE18480:
 15588              	.LBE18481:
 15589              	.LBB18482:
 15590              	.LBB18483:
 15591              	.LBB18484:
 15592              	.LBB18485:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 15593              		.loc 19 873 0
 15594 044f 488B7018 		movq	24(%rax), %rsi
 15595              	.LBE18485:
 15596              	.LBE18484:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 15597              		.loc 36 96 0
 15598 0453 488D7808 		leaq	8(%rax), %rdi
 15599              	.LVL1303:
 15600 0457 48894424 		movq	%rax, 8(%rsp)
 15600      08
 15601              	.LBB18487:
 15602              	.LBB18486:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 15603              		.loc 19 873 0
 15604 045c E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 15604      00
 15605              	.LVL1304:
 15606              	.LBE18486:
 15607              	.LBE18487:
 15608              	.LBE18483:
 15609              	.LBE18482:
 15610              	.LBE18468:
 15611              	.LBE18467:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 15612              		.loc 3 172 0
 15613 0461 488B4424 		movq	8(%rsp), %rax
 15613      08
 15614 0466 BE600000 		movl	$96, %esi
 15614      00
 15615 046b 4889C7   		movq	%rax, %rdi
 15616 046e E8000000 		call	_ZdlPvm@PLT
 15616      00
 15617              	.LVL1305:
 15618 0473 498B0424 		movq	(%r12), %rax
 15619 0477 488B4018 		movq	24(%rax), %rax
GAS LISTING /tmp/ccvmoMuv.s 			page 728


 15620              	.LVL1306:
 15621              	.L826:
 15622 047b 4C39F0   		cmpq	%r14, %rax
 15623              	.LBE18488:
 15624              	.LBE18489:
 15625              	.LBE18491:
 15626              	.LBE18499:
  54:/usr/include/boost/exception/exception.hpp ****                 add_ref();
 15627              		.loc 7 54 0
 15628 047e 4C896424 		movq	%r12, 24(%rsp)
 15628      18
 15629              	.LVL1307:
 15630 0483 0F84C1FC 		je	.L822
 15630      FFFF
 15631              	.LBB18500:
 15632              	.LBB18498:
  72:/usr/include/boost/exception/exception.hpp ****                 }
 15633              		.loc 7 72 0
 15634 0489 4C89E7   		movq	%r12, %rdi
 15635              	.LEHB68:
 15636 048c FFD0     		call	*%rax
 15637              	.LVL1308:
 15638              	.LEHE68:
 15639 048e E9BDFCFF 		jmp	.L828
 15639      FF
 15640              	.LVL1309:
 15641              		.p2align 4,,10
 15642 0493 0F1F4400 		.p2align 3
 15642      00
 15643              	.L849:
 15644              	.LBE18498:
 15645              	.LBE18500:
 15646              	.LBE18503:
 15647              	.LBE18538:
 15648              	.LBE18545:
 15649              	.LBE18589:
 15650              	.LBE18681:
 15651              	.LBB18682:
 15652              	.LBB18645:
 15653              	.LBB18641:
 15654              	.LBB18637:
 15655              	.LBB18626:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 15656              		.loc 7 78 0
 15657 0498 4C89E7   		movq	%r12, %rdi
 15658              	.LEHB69:
 15659 049b FFD0     		call	*%rax
 15660              	.LVL1310:
 15661              	.LEHE69:
 15662 049d E90BFEFF 		jmp	.L848
 15662      FF
 15663              	.LVL1311:
 15664              		.p2align 4,,10
 15665 04a2 660F1F44 		.p2align 3
 15665      0000
 15666              	.L817:
 15667              	.LBE18626:
GAS LISTING /tmp/ccvmoMuv.s 			page 729


 15668              	.LBE18637:
 15669              	.LBE18641:
 15670              	.LBE18645:
 15671              	.LBE18682:
 15672              	.LBE18689:
 15673              	.LBE18694:
 15674              	.LBB18695:
 15675              	.LBB18407:
 15676              	.LBB18401:
 15677              	.LBB18398:
 15678              	.LBB18394:
 15679              	.LBB18390:
 15680              	.LBB18387:
  72:/usr/include/boost/exception/exception.hpp ****                 }
 15681              		.loc 7 72 0
 15682 04a8 4889DF   		movq	%rbx, %rdi
 15683              	.LEHB70:
 15684 04ab FFD0     		call	*%rax
 15685              	.LVL1312:
 15686              	.LEHE70:
 15687              	.LBE18387:
 15688              	.LBE18390:
 15689              	.LBE18394:
 15690              	.LBE18398:
 15691              	.LBE18401:
 15692              	.LBE18407:
 15693              	.LBE18695:
 465:/usr/include/boost/exception/exception.hpp ****                 {
 15694              		.loc 7 465 0
 15695 04ad 488D3500 		leaq	24+_ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE(%rip), %rsi
 15695      000000
 15696 04b4 498B5D08 		movq	8(%r13), %rbx
 15697              	.LVL1313:
 15698              	.LBB18696:
 15699              	.LBB18408:
 15700              	.LBB18402:
 220:/usr/include/boost/exception/exception.hpp ****         {
 15701              		.loc 7 220 0
 15702 04b8 498B4D10 		movq	16(%r13), %rcx
 15703 04bc 498B5518 		movq	24(%r13), %rdx
 15704 04c0 418B4520 		movl	32(%r13), %eax
 15705              	.LBE18402:
 15706              	.LBE18408:
 15707              	.LBE18696:
 465:/usr/include/boost/exception/exception.hpp ****                 {
 15708              		.loc 7 465 0
 15709 04c4 48897500 		movq	%rsi, 0(%rbp)
 15710 04c8 488D3500 		leaq	72+_ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE(%rip), %rsi
 15710      000000
 15711              	.LBB18697:
 15712              	.LBB18690:
 15713              	.LBB18683:
 438:/usr/include/boost/exception/exception.hpp ****                 data = d->clone();
 15714              		.loc 7 438 0
 15715 04cf 4885DB   		testq	%rbx, %rbx
 15716              	.LBE18683:
 15717              	.LBE18690:
GAS LISTING /tmp/ccvmoMuv.s 			page 730


 15718              	.LBE18697:
 15719              	.LBB18698:
 15720              	.LBB18409:
 15721              	.LBB18403:
 220:/usr/include/boost/exception/exception.hpp ****         {
 15722              		.loc 7 220 0
 15723 04d2 48894D10 		movq	%rcx, 16(%rbp)
 15724              	.LBE18403:
 15725              	.LBE18409:
 15726              	.LBE18698:
 465:/usr/include/boost/exception/exception.hpp ****                 {
 15727              		.loc 7 465 0
 15728 04d6 48897528 		movq	%rsi, 40(%rbp)
 15729 04da 488D3500 		leaq	136+_ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE(%rip), %rsi
 15729      000000
 15730              	.LBB18699:
 15731              	.LBB18410:
 15732              	.LBB18404:
 220:/usr/include/boost/exception/exception.hpp ****         {
 15733              		.loc 7 220 0
 15734 04e1 48895518 		movq	%rdx, 24(%rbp)
 15735 04e5 894520   		movl	%eax, 32(%rbp)
 15736              	.LVL1314:
 15737              	.LBE18404:
 15738              	.LBE18410:
 15739              	.LBE18699:
 465:/usr/include/boost/exception/exception.hpp ****                 {
 15740              		.loc 7 465 0
 15741 04e8 48897530 		movq	%rsi, 48(%rbp)
 15742              	.LVL1315:
 15743              	.LBB18700:
 15744              	.LBB18691:
 15745              	.LBB18684:
 438:/usr/include/boost/exception/exception.hpp ****                 data = d->clone();
 15746              		.loc 7 438 0
 15747 04ec 0F85A6FB 		jne	.L818
 15747      FFFF
 15748 04f2 E97EFDFF 		jmp	.L819
 15748      FF
 15749              	.LVL1316:
 15750 04f7 660F1F84 		.p2align 4,,10
 15750      00000000 
 15750      00
 15751              		.p2align 3
 15752              	.L842:
 15753              	.LBB18590:
 15754              	.LBB18558:
 15755              	.LBB18557:
 15756              	.LBB18556:
 15757              	.LBB18555:
  72:/usr/include/boost/exception/exception.hpp ****                 }
 15758              		.loc 7 72 0
 15759 0500 4889DF   		movq	%rbx, %rdi
 15760              	.LEHB71:
 15761 0503 FFD0     		call	*%rax
 15762              	.LVL1317:
 15763              	.LEHE71:
GAS LISTING /tmp/ccvmoMuv.s 			page 731


 15764 0505 4C8B6424 		movq	24(%rsp), %r12
 15764      18
 15765              	.LVL1318:
 15766              	.LBE18555:
 15767              	.LBE18556:
 15768              	.LBE18557:
 15769              	.LBE18558:
 15770              	.LBE18590:
 15771              	.LBB18591:
 15772              	.LBB18587:
 15773              	.LBB18585:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 15774              		.loc 7 78 0
 15775 050a 4D85E4   		testq	%r12, %r12
 15776 050d 0F8456FD 		je	.L844
 15776      FFFF
 15777 0513 E92DFDFF 		jmp	.L843
 15777      FF
 15778 0518 0F1F8400 		.p2align 4,,10
 15778      00000000 
 15779              		.p2align 3
 15780              	.L845:
 15781 0520 4C89E7   		movq	%r12, %rdi
 15782 0523 FFD0     		call	*%rax
 15783              	.LVL1319:
 15784 0525 E93FFDFF 		jmp	.L844
 15784      FF
 15785              	.LVL1320:
 15786 052a 660F1F44 		.p2align 4,,10
 15786      0000
 15787              		.p2align 3
 15788              	.L823:
 15789              	.LBE18585:
 15790              	.LBE18587:
 15791              	.LBE18591:
 15792              	.LBB18592:
 15793              	.LBB18546:
 15794              	.LBB18539:
 15795              	.LBB18504:
 15796              	.LBB18501:
 15797              	.LBB18492:
 15798 0530 4889C7   		movq	%rax, %rdi
 15799              	.LEHB72:
 15800 0533 FFD2     		call	*%rdx
 15801              	.LVL1321:
 15802              	.LEHE72:
 15803 0535 498B0424 		movq	(%r12), %rax
 15804 0539 488B4018 		movq	24(%rax), %rax
 15805 053d E939FFFF 		jmp	.L826
 15805      FF
 15806              	.LVL1322:
 15807              		.p2align 4,,10
 15808 0542 660F1F44 		.p2align 3
 15808      0000
 15809              	.L831:
 15810              	.LBE18492:
 15811              	.LBE18501:
GAS LISTING /tmp/ccvmoMuv.s 			page 732


 15812              	.LBE18504:
 15813              	.LBE18539:
 15814              	.LBB18540:
 15815              	.LBB18536:
 15816              	.LBB18534:
 15817              	.LBB18532:
 15818              	.LBB18530:
 15819              	.LBB18527:
 15820              	.LBB18516:
 15821              	.LBB18515:
 390:/usr/include/c++/6/bits/stl_tree.h **** 	}
 15822              		.loc 19 390 0
 15823 0548 48C74424 		movq	$0, 40(%rsp)
 15823      28000000 
 15823      00
 15824 0551 E944FCFF 		jmp	.L832
 15824      FF
 15825              	.LVL1323:
 15826              	.L874:
 15827 0556 4989C4   		movq	%rax, %r12
 15828              	.LVL1324:
 15829              	.L839:
 15830              	.LBE18515:
 15831              	.LBE18516:
 15832              	.LBE18527:
 15833              	.LBE18530:
 15834              	.LBE18532:
 15835              	.LBE18534:
 15836              	.LBE18536:
 15837              	.LBE18540:
 15838              	.LBE18546:
 15839              	.LBE18592:
 15840              	.LBE18684:
 15841              	.LBE18691:
 15842              	.LBE18700:
 465:/usr/include/boost/exception/exception.hpp ****                 {
 15843              		.loc 7 465 0
 15844 0559 4889EF   		movq	%rbp, %rdi
 15845 055c E8000000 		call	_ZN5boost16exception_detail14bad_exception_D2Ev
 15845      00
 15846              	.LVL1325:
 15847              	.L864:
 15848              	.LBE18703:
 15849              	.LBE18706:
 488:/usr/include/boost/exception/exception.hpp ****                 }
 15850              		.loc 7 488 0 discriminator 3
 15851 0561 4889EF   		movq	%rbp, %rdi
 15852 0564 BE380000 		movl	$56, %esi
 15852      00
 15853 0569 E8000000 		call	_ZdlPvm@PLT
 15853      00
 15854              	.LVL1326:
 15855 056e 4C89E7   		movq	%r12, %rdi
 15856              	.LEHB73:
 15857 0571 E8000000 		call	_Unwind_Resume@PLT
 15857      00
 15858              	.LVL1327:
GAS LISTING /tmp/ccvmoMuv.s 			page 733


 15859              	.LEHE73:
 15860              	.L873:
 15861              	.LBB18707:
 15862              	.LBB18704:
 15863              	.LBB18701:
 15864              	.LBB18692:
 15865              	.LBB18685:
 15866              	.LBB18593:
 15867              	.LBB18547:
 15868              	.LBB18541:
 15869              	.LBB18537:
 15870              	.LBB18535:
 15871              	.LBB18533:
 15872              	.LBB18531:
 15873              	.LBB18528:
 15874              	.LBB18529:
 398:/usr/include/c++/6/bits/stl_tree.h **** 
 15875              		.loc 19 398 0
 15876 0576 488B7424 		movq	32(%rsp), %rsi
 15876      20
 15877 057b 488B7C24 		movq	48(%rsp), %rdi
 15877      30
 15878 0580 4989C4   		movq	%rax, %r12
 15879              	.LVL1328:
 15880 0583 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 15880      00
 15881              	.LVL1329:
 15882              	.L837:
 15883              	.LBE18529:
 15884              	.LBE18528:
 15885              	.LBE18531:
 15886              	.LBE18533:
 15887              	.LBE18535:
 15888              	.LBE18537:
 15889              	.LBE18541:
 15890              	.LBB18542:
 15891              	.LBB18543:
 15892              	.LBB18544:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 15893              		.loc 7 78 0
 15894 0588 488B7C24 		movq	24(%rsp), %rdi
 15894      18
 15895 058d 4885FF   		testq	%rdi, %rdi
 15896 0590 74C7     		je	.L839
 15897 0592 488B07   		movq	(%rdi), %rax
 15898 0595 FF5020   		call	*32(%rax)
 15899              	.LVL1330:
 15900 0598 EBBF     		jmp	.L839
 15901              	.L872:
 15902 059a 4989C4   		movq	%rax, %r12
 15903 059d EBE9     		jmp	.L837
 15904              	.LVL1331:
 15905              	.L871:
 15906              	.LBE18544:
 15907              	.LBE18543:
 15908              	.LBE18542:
 15909              	.LBE18547:
GAS LISTING /tmp/ccvmoMuv.s 			page 734


 15910              	.LBE18593:
 15911              	.LBB18594:
 15912              	.LBB18595:
 15913              	.LBB18596:
 15914 059f 488B7C24 		movq	24(%rsp), %rdi
 15914      18
 15915 05a4 4989C4   		movq	%rax, %r12
 15916              	.LVL1332:
 15917 05a7 4885FF   		testq	%rdi, %rdi
 15918 05aa 7406     		je	.L863
 15919 05ac 488B07   		movq	(%rdi), %rax
 15920 05af FF5020   		call	*32(%rax)
 15921              	.LVL1333:
 15922              	.L863:
 15923              	.LBE18596:
 15924              	.LBE18595:
 15925              	.LBE18594:
 15926              	.LBE18685:
 15927              	.LBB18686:
 15928              	.LBB18687:
 15929              	.LBB18688:
 15930 05b2 488B03   		movq	(%rbx), %rax
 15931 05b5 4889DF   		movq	%rbx, %rdi
 15932 05b8 FF5020   		call	*32(%rax)
 15933              	.LVL1334:
 15934 05bb EB9C     		jmp	.L839
 15935              	.LVL1335:
 15936              	.L870:
 15937 05bd 4989C4   		movq	%rax, %r12
 15938 05c0 EB9F     		jmp	.L864
 15939              	.LVL1336:
 15940              	.L875:
 15941 05c2 4885DB   		testq	%rbx, %rbx
 15942 05c5 4989C4   		movq	%rax, %r12
 15943              	.LVL1337:
 15944 05c8 75E8     		jne	.L863
 15945 05ca EB8D     		jmp	.L839
 15946              	.LVL1338:
 15947              	.L876:
 15948 05cc 4989C4   		movq	%rax, %r12
 15949 05cf EBE1     		jmp	.L863
 15950              	.LBE18688:
 15951              	.LBE18687:
 15952              	.LBE18686:
 15953              	.LBE18692:
 15954              	.LBE18701:
 15955              	.LBE18704:
 15956              	.LBE18707:
 15957              		.cfi_endproc
 15958              	.LFE15592:
 15959              		.section	.gcc_except_table
 15960              	.LLSDA15592:
 15961 0144 FF       		.byte	0xff
 15962 0145 FF       		.byte	0xff
 15963 0146 01       		.byte	0x1
 15964 0147 3F       		.uleb128 .LLSDACSE15592-.LLSDACSB15592
 15965              	.LLSDACSB15592:
GAS LISTING /tmp/ccvmoMuv.s 			page 735


 15966 0148 16       		.uleb128 .LEHB63-.LFB15592
 15967 0149 05       		.uleb128 .LEHE63-.LEHB63
 15968 014a 00       		.uleb128 0
 15969 014b 00       		.uleb128 0
 15970 014c BD01     		.uleb128 .LEHB64-.LFB15592
 15971 014e 05       		.uleb128 .LEHE64-.LEHB64
 15972 014f 9A0B     		.uleb128 .L872-.LFB15592
 15973 0151 00       		.uleb128 0
 15974 0152 C703     		.uleb128 .LEHB65-.LFB15592
 15975 0154 05       		.uleb128 .LEHE65-.LEHB65
 15976 0155 F60A     		.uleb128 .L873-.LFB15592
 15977 0157 00       		.uleb128 0
 15978 0158 8808     		.uleb128 .LEHB66-.LFB15592
 15979 015a 02       		.uleb128 .LEHE66-.LEHB66
 15980 015b D60A     		.uleb128 .L874-.LFB15592
 15981 015d 00       		.uleb128 0
 15982 015e A308     		.uleb128 .LEHB67-.LFB15592
 15983 0160 02       		.uleb128 .LEHE67-.LEHB67
 15984 0161 CC0B     		.uleb128 .L876-.LFB15592
 15985 0163 00       		.uleb128 0
 15986 0164 8C09     		.uleb128 .LEHB68-.LFB15592
 15987 0166 02       		.uleb128 .LEHE68-.LEHB68
 15988 0167 9A0B     		.uleb128 .L872-.LFB15592
 15989 0169 00       		.uleb128 0
 15990 016a 9B09     		.uleb128 .LEHB69-.LFB15592
 15991 016c 02       		.uleb128 .LEHE69-.LEHB69
 15992 016d C20B     		.uleb128 .L875-.LFB15592
 15993 016f 00       		.uleb128 0
 15994 0170 AB09     		.uleb128 .LEHB70-.LFB15592
 15995 0172 02       		.uleb128 .LEHE70-.LEHB70
 15996 0173 BD0B     		.uleb128 .L870-.LFB15592
 15997 0175 00       		.uleb128 0
 15998 0176 830A     		.uleb128 .LEHB71-.LFB15592
 15999 0178 02       		.uleb128 .LEHE71-.LEHB71
 16000 0179 9F0B     		.uleb128 .L871-.LFB15592
 16001 017b 00       		.uleb128 0
 16002 017c B30A     		.uleb128 .LEHB72-.LFB15592
 16003 017e 02       		.uleb128 .LEHE72-.LEHB72
 16004 017f 9A0B     		.uleb128 .L872-.LFB15592
 16005 0181 00       		.uleb128 0
 16006 0182 F10A     		.uleb128 .LEHB73-.LFB15592
 16007 0184 05       		.uleb128 .LEHE73-.LEHB73
 16008 0185 00       		.uleb128 0
 16009 0186 00       		.uleb128 0
 16010              	.LLSDACSE15592:
 16011              		.section	.text._ZNK5boost16exception_detail10clone_implINS0_14bad_exception_EE5cloneEv,"axG",@prog
 16013              		.set	.LTHUNK264,_ZNK5boost16exception_detail10clone_implINS0_14bad_exception_EE5cloneEv
 16014 05d1 0F1F4400 		.p2align 4,,15
 16014      00662E0F 
 16014      1F840000 
 16014      000000
 16015              		.weak	_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_14bad_exception_EE5cloneEv
 16017              	_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_14bad_exception_EE5cloneEv:
 16018              	.LFB16034:
 486:/usr/include/boost/exception/exception.hpp ****                 {
 16019              		.loc 7 486 0
 16020              		.cfi_startproc
GAS LISTING /tmp/ccvmoMuv.s 			page 736


 16021 05e0 4C8B17   		movq	(%rdi), %r10
 16022 05e3 49037AE8 		addq	-24(%r10), %rdi
 16023 05e7 E914FAFF 		jmp	.LTHUNK264
 16023      FF
 16024              		.cfi_endproc
 16025              	.LFE16034:
 16027              		.section	.text._ZNK5boost16exception_detail10clone_implINS0_10bad_alloc_EE5cloneEv,"axG",@progbits
 16028              		.align 2
 16029              		.p2align 4,,15
 16030              		.weak	_ZNK5boost16exception_detail10clone_implINS0_10bad_alloc_EE5cloneEv
 16032              	_ZNK5boost16exception_detail10clone_implINS0_10bad_alloc_EE5cloneEv:
 16033              	.LFB15594:
 486:/usr/include/boost/exception/exception.hpp ****                 {
 16034              		.loc 7 486 0
 16035              		.cfi_startproc
 16036              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 16037              		.cfi_lsda 0x1b,.LLSDA15594
 16038              	.LVL1339:
 16039 0000 4157     		pushq	%r15
 16040              		.cfi_def_cfa_offset 16
 16041              		.cfi_offset 15, -16
 16042 0002 4156     		pushq	%r14
 16043              		.cfi_def_cfa_offset 24
 16044              		.cfi_offset 14, -24
 16045 0004 4155     		pushq	%r13
 16046              		.cfi_def_cfa_offset 32
 16047              		.cfi_offset 13, -32
 16048 0006 4154     		pushq	%r12
 16049              		.cfi_def_cfa_offset 40
 16050              		.cfi_offset 12, -40
 16051 0008 4989FD   		movq	%rdi, %r13
 16052 000b 55       		pushq	%rbp
 16053              		.cfi_def_cfa_offset 48
 16054              		.cfi_offset 6, -48
 16055 000c 53       		pushq	%rbx
 16056              		.cfi_def_cfa_offset 56
 16057              		.cfi_offset 3, -56
 488:/usr/include/boost/exception/exception.hpp ****                 }
 16058              		.loc 7 488 0
 16059 000d BF380000 		movl	$56, %edi
 16059      00
 16060              	.LVL1340:
 486:/usr/include/boost/exception/exception.hpp ****                 {
 16061              		.loc 7 486 0
 16062 0012 4883EC48 		subq	$72, %rsp
 16063              		.cfi_def_cfa_offset 128
 16064              	.LEHB74:
 488:/usr/include/boost/exception/exception.hpp ****                 }
 16065              		.loc 7 488 0
 16066 0016 E8000000 		call	_Znwm@PLT
 16066      00
 16067              	.LVL1341:
 16068              	.LEHE74:
 16069              	.LBB18980:
 16070              	.LBB18981:
 16071              	.LBB18982:
 16072              	.LBB18983:
GAS LISTING /tmp/ccvmoMuv.s 			page 737


 16073              	.LBB18984:
 16074              	.LBB18985:
 16075              	.LBB18986:
  38:/usr/include/boost/exception/exception.hpp ****                 {
 16076              		.loc 7 38 0
 16077 001b 498B5D08 		movq	8(%r13), %rbx
 16078              	.LBE18986:
 16079              	.LBE18985:
 16080              	.LBE18984:
 16081              	.LBE18983:
 16082              	.LBE18982:
 16083              	.LBE18981:
 16084              	.LBE18980:
 488:/usr/include/boost/exception/exception.hpp ****                 }
 16085              		.loc 7 488 0
 16086 001f 4889C5   		movq	%rax, %rbp
 16087              	.LVL1342:
 16088              	.LBB19311:
 16089              	.LBB19308:
 16090              	.LBB19017:
 16091              	.LBB19018:
 415:/usr/include/boost/exception/exception.hpp ****             {
 16092              		.loc 7 415 0
 16093 0022 488D0500 		leaq	16+_ZTVN5boost16exception_detail10clone_baseE(%rip), %rax
 16093      000000
 16094              	.LVL1343:
 16095 0029 48894530 		movq	%rax, 48(%rbp)
 16096              	.LVL1344:
 16097              	.LBE19018:
 16098              	.LBE19017:
 16099              	.LBB19019:
 16100              	.LBB19011:
 16101              	.LBB19005:
 220:/usr/include/boost/exception/exception.hpp ****         {
 16102              		.loc 7 220 0
 16103 002d 488D0500 		leaq	16+_ZTVN5boost9exceptionE(%rip), %rax
 16103      000000
 16104              	.LBB19001:
 16105              	.LBB18997:
 16106              	.LBB18987:
 16107              	.LBB18988:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 16108              		.loc 7 71 0
 16109 0034 4885DB   		testq	%rbx, %rbx
 16110              	.LBE18988:
 16111              	.LBE18987:
  38:/usr/include/boost/exception/exception.hpp ****                 {
 16112              		.loc 7 38 0
 16113 0037 48895D08 		movq	%rbx, 8(%rbp)
 16114              	.LBE18997:
 16115              	.LBE19001:
 220:/usr/include/boost/exception/exception.hpp ****         {
 16116              		.loc 7 220 0
 16117 003b 48894500 		movq	%rax, 0(%rbp)
 16118              	.LVL1345:
 16119              	.LBB19002:
 16120              	.LBB18998:
GAS LISTING /tmp/ccvmoMuv.s 			page 738


 16121              	.LBB18994:
 16122              	.LBB18991:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 16123              		.loc 7 71 0
 16124 003f 0F84C302 		je	.L904
 16124      0000
  72:/usr/include/boost/exception/exception.hpp ****                 }
 16125              		.loc 7 72 0
 16126 0045 488B03   		movq	(%rbx), %rax
 16127 0048 4C8D3500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7add_refEv(%rip), %r14
 16127      000000
 16128 004f 488B4018 		movq	24(%rax), %rax
 16129 0053 4C39F0   		cmpq	%r14, %rax
 16130 0056 0F854C04 		jne	.L905
 16130      0000
 16131              	.LVL1346:
 16132              	.LBE18991:
 16133              	.LBE18994:
 16134              	.LBE18998:
 16135              	.LBE19002:
 220:/usr/include/boost/exception/exception.hpp ****         {
 16136              		.loc 7 220 0
 16137 005c 498B4510 		movq	16(%r13), %rax
 16138              	.LBB19003:
 16139              	.LBB18999:
 16140              	.LBB18995:
 16141              	.LBB18992:
 16142              	.LBB18989:
 16143              	.LBB18990:
 162:/usr/include/boost/exception/info.hpp ****                 }
 16144              		.loc 3 162 0
 16145 0060 83435801 		addl	$1, 88(%rbx)
 16146              	.LVL1347:
 16147              	.LBE18990:
 16148              	.LBE18989:
 16149              	.LBE18992:
 16150              	.LBE18995:
 16151              	.LBE18999:
 16152              	.LBE19003:
 220:/usr/include/boost/exception/exception.hpp ****         {
 16153              		.loc 7 220 0
 16154 0064 48894510 		movq	%rax, 16(%rbp)
 16155 0068 498B4518 		movq	24(%r13), %rax
 16156 006c 48894518 		movq	%rax, 24(%rbp)
 16157 0070 418B4520 		movl	32(%r13), %eax
 16158 0074 894520   		movl	%eax, 32(%rbp)
 16159              	.LVL1348:
 16160              	.LBE19005:
 16161              	.LBE19011:
 16162              	.LBE19019:
 465:/usr/include/boost/exception/exception.hpp ****                 {
 16163              		.loc 7 465 0
 16164 0077 488D0500 		leaq	24+_ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE(%rip), %rax
 16164      000000
 16165 007e 48894500 		movq	%rax, 0(%rbp)
 16166 0082 488D0500 		leaq	72+_ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE(%rip), %rax
 16166      000000
GAS LISTING /tmp/ccvmoMuv.s 			page 739


 16167 0089 48894528 		movq	%rax, 40(%rbp)
 16168 008d 488D0500 		leaq	136+_ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE(%rip), %rax
 16168      000000
 16169 0094 48894530 		movq	%rax, 48(%rbp)
 16170              	.LVL1349:
 16171              	.L906:
 16172              	.LBB19020:
 16173              	.LBB19021:
 16174              	.LBB19022:
 439:/usr/include/boost/exception/exception.hpp ****             a->throw_file_ = b->throw_file_;
 16175              		.loc 7 439 0
 16176 0098 488B03   		movq	(%rbx), %rax
 16177 009b 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl5cloneEv(%rip), %rdx
 16177      000000
 16178 00a2 488B4028 		movq	40(%rax), %rax
 16179 00a6 4839D0   		cmpq	%rdx, %rax
 16180 00a9 0F855103 		jne	.L908
 16180      0000
 16181              	.LVL1350:
 16182              	.LBB19023:
 16183              	.LBB19024:
 181:/usr/include/boost/exception/info.hpp ****                 p.adopt(c);
 16184              		.loc 3 181 0
 16185 00af BF600000 		movl	$96, %edi
 16185      00
 16186              	.LBB19025:
 16187              	.LBB19026:
  28:/usr/include/boost/exception/exception.hpp ****                 {
 16188              		.loc 7 28 0
 16189 00b4 48C74424 		movq	$0, 24(%rsp)
 16189      18000000 
 16189      00
 16190              	.LVL1351:
 16191              	.LEHB75:
 16192              	.LBE19026:
 16193              	.LBE19025:
 181:/usr/include/boost/exception/info.hpp ****                 p.adopt(c);
 16194              		.loc 3 181 0
 16195 00bd E8000000 		call	_Znwm@PLT
 16195      00
 16196              	.LVL1352:
 16197              	.LEHE75:
 16198              	.LBB19027:
 16199              	.LBB19028:
 16200              	.LBB19029:
 16201              	.LBB19030:
 16202              	.LBB19031:
 16203              	.LBB19032:
 16204              	.LBB19033:
 16205              	.LBB19034:
 632:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_right = &this->_M_header;
 16206              		.loc 19 632 0
 16207 00c2 4C8D7810 		leaq	16(%rax), %r15
 16208              	.LBE19034:
 16209              	.LBE19033:
 16210              	.LBE19032:
 16211              	.LBE19031:
GAS LISTING /tmp/ccvmoMuv.s 			page 740


 16212              	.LBE19030:
 16213              	.LBE19029:
  99:/usr/include/boost/exception/info.hpp ****                 {
 16214              		.loc 3 99 0
 16215 00c6 488D0D00 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rcx
 16215      000000
 16216              	.LBB19048:
 16217              	.LBB19045:
 16218              	.LBB19042:
 16219              	.LBB19039:
 602:/usr/include/c++/6/bits/stl_tree.h **** 	  { _M_initialize(); }
 16220              		.loc 19 602 0
 16221 00cd C7401000 		movl	$0, 16(%rax)
 16221      000000
 16222 00d4 48C74018 		movq	$0, 24(%rax)
 16222      00000000 
 16223 00dc 48C74030 		movq	$0, 48(%rax)
 16223      00000000 
 16224              	.LBE19039:
 16225              	.LBE19042:
 16226              	.LBE19045:
 16227              	.LBE19048:
 16228              	.LBE19028:
 16229              	.LBE19027:
 181:/usr/include/boost/exception/info.hpp ****                 p.adopt(c);
 16230              		.loc 3 181 0
 16231 00e4 4989C4   		movq	%rax, %r12
 16232              	.LVL1353:
 16233              	.LBB19066:
 16234              	.LBB19064:
  99:/usr/include/boost/exception/info.hpp ****                 {
 16235              		.loc 3 99 0
 16236 00e7 488908   		movq	%rcx, (%rax)
 16237              	.LVL1354:
 16238              	.LBB19049:
 16239              	.LBB19046:
 16240              	.LBB19043:
 16241              	.LBB19040:
 16242              	.LBB19037:
 16243              	.LBB19035:
 632:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_right = &this->_M_header;
 16244              		.loc 19 632 0
 16245 00ea 4C897820 		movq	%r15, 32(%rax)
 16246              	.LBE19035:
 16247              	.LBE19037:
 16248              	.LBE19040:
 16249              	.LBE19043:
 16250              	.LBE19046:
 16251              	.LBE19049:
 16252              	.LBB19050:
 16253              	.LBB19051:
 16254              	.LBB19052:
 142:/usr/include/c++/6/bits/basic_string.h **** #else
 16255              		.loc 10 142 0
 16256 00ee 488D4048 		leaq	72(%rax), %rax
 16257              	.LVL1355:
 16258              	.LBE19052:
GAS LISTING /tmp/ccvmoMuv.s 			page 741


 16259              	.LBE19051:
 16260              	.LBE19050:
 16261              	.LBB19061:
 16262              	.LBB19047:
 16263              	.LBB19044:
 16264              	.LBB19041:
 16265              	.LBB19038:
 16266              	.LBB19036:
 633:/usr/include/c++/6/bits/stl_tree.h **** 	  }	    
 16267              		.loc 19 633 0
 16268 00f2 4C8978E0 		movq	%r15, -32(%rax)
 16269              	.LVL1356:
 16270              	.LBE19036:
 16271              	.LBE19038:
 16272              	.LBE19041:
 16273              	.LBE19044:
 16274              	.LBE19047:
 16275              	.LBE19061:
 16276              	.LBB19062:
 16277              	.LBB19054:
 16278              	.LBB19055:
 16279              	.LBB19056:
 132:/usr/include/c++/6/bits/basic_string.h **** 
 16280              		.loc 10 132 0
 16281 00f6 49C74424 		movq	$0, 64(%r12)
 16281      40000000 
 16281      00
 16282              	.LBE19056:
 16283              	.LBE19055:
 16284              	.LBE19054:
 16285              	.LBB19059:
 16286              	.LBB19053:
 142:/usr/include/c++/6/bits/basic_string.h **** #else
 16287              		.loc 10 142 0
 16288 00ff 49894424 		movq	%rax, 56(%r12)
 16288      38
 16289              	.LVL1357:
 16290              	.LBE19053:
 16291              	.LBE19059:
 16292              	.LBE19062:
 16293              	.LBE19064:
 16294              	.LBE19066:
 16295              	.LBB19067:
 16296              	.LBB19068:
 16297              	.LBB19069:
 16298              	.LBB19070:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 16299              		.loc 7 78 0
 16300 0104 488B4424 		movq	24(%rsp), %rax
 16300      18
 16301              	.LBE19070:
 16302              	.LBE19069:
 16303              	.LBE19068:
 16304              	.LBE19067:
 16305              	.LBB19111:
 16306              	.LBB19065:
 16307              	.LBB19063:
GAS LISTING /tmp/ccvmoMuv.s 			page 742


 16308              	.LBB19060:
 16309              	.LBB19057:
 16310              	.LBB19058:
 243:/usr/include/c++/6/bits/char_traits.h **** 
 16311              		.loc 9 243 0
 16312 0109 41C64424 		movb	$0, 72(%r12)
 16312      4800
 16313              	.LVL1358:
 16314              	.LBE19058:
 16315              	.LBE19057:
 16316              	.LBE19060:
 16317              	.LBE19063:
  99:/usr/include/boost/exception/info.hpp ****                 {
 16318              		.loc 3 99 0
 16319 010f 41C74424 		movl	$0, 88(%r12)
 16319      58000000 
 16319      00
 16320              	.LVL1359:
 16321              	.LBE19065:
 16322              	.LBE19111:
 16323              	.LBB19112:
 16324              	.LBB19108:
 16325              	.LBB19099:
 16326              	.LBB19096:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 16327              		.loc 7 78 0
 16328 0118 4885C0   		testq	%rax, %rax
 16329 011b 7428     		je	.L912
 16330 011d 488B10   		movq	(%rax), %rdx
 16331 0120 488D3500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rsi
 16331      000000
 16332 0127 488B5220 		movq	32(%rdx), %rdx
 16333 012b 4839F2   		cmpq	%rsi, %rdx
 16334 012e 0F85FC03 		jne	.L911
 16334      0000
 16335              	.LVL1360:
 16336              	.LBB19071:
 16337              	.LBB19072:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 16338              		.loc 3 168 0
 16339 0134 8B7058   		movl	88(%rax), %esi
 16340 0137 8D56FF   		leal	-1(%rsi), %edx
 16341 013a 85D2     		testl	%edx, %edx
 16342 013c 895058   		movl	%edx, 88(%rax)
 16343 013f 0F84EB02 		je	.L986
 16343      0000
 16344              	.LVL1361:
 16345              	.L912:
 16346              	.LBE19072:
 16347              	.LBE19071:
 16348              	.LBE19096:
 16349              	.LBE19099:
  54:/usr/include/boost/exception/exception.hpp ****                 add_ref();
 16350              		.loc 7 54 0
 16351 0145 4C896424 		movq	%r12, 24(%rsp)
 16351      18
 16352              	.LVL1362:
GAS LISTING /tmp/ccvmoMuv.s 			page 743


 16353              	.L910:
 16354              	.LBB19100:
 16355              	.LBB19101:
 16356              	.LBB19102:
 16357              	.LBB19103:
 162:/usr/include/boost/exception/info.hpp ****                 }
 16358              		.loc 3 162 0
 16359 014a 41834424 		addl	$1, 88(%r12)
 16359      5801
 16360              	.LVL1363:
 16361              	.L916:
 16362              	.LBE19103:
 16363              	.LBE19102:
 16364              	.LBE19101:
 16365              	.LBE19100:
 16366              	.LBE19108:
 16367              	.LBE19112:
 16368              	.LBB19113:
 16369              	.LBB19114:
 298:/usr/include/c++/6/bits/stl_map.h **** 	return *this;
 16370              		.loc 36 298 0
 16371 0150 498D7C24 		leaq	8(%r12), %rdi
 16371      08
 16372              	.LVL1364:
 16373 0155 488D4308 		leaq	8(%rbx), %rax
 16374              	.LVL1365:
 16375              	.LBB19115:
 16376              	.LBB19116:
1480:/usr/include/c++/6/bits/stl_tree.h **** 	{
 16377              		.loc 19 1480 0
 16378 0159 4839C7   		cmpq	%rax, %rdi
 16379 015c 0F84C200 		je	.L918
 16379      0000
 16380              	.LVL1366:
 16381              	.LBB19117:
 16382              	.LBB19118:
 16383              	.LBB19119:
 16384              	.LBB19120:
 380:/usr/include/c++/6/bits/stl_tree.h **** 	{
 16385              		.loc 19 380 0
 16386 0162 498B4424 		movq	24(%r12), %rax
 16386      18
 16387              	.LVL1367:
 16388 0167 498B5424 		movq	40(%r12), %rdx
 16388      28
 16389 016c 48897C24 		movq	%rdi, 48(%rsp)
 16389      30
 382:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 16390              		.loc 19 382 0
 16391 0171 4885C0   		testq	%rax, %rax
 380:/usr/include/c++/6/bits/stl_tree.h **** 	{
 16392              		.loc 19 380 0
 16393 0174 48894424 		movq	%rax, 32(%rsp)
 16393      20
 16394 0179 48895424 		movq	%rdx, 40(%rsp)
 16394      28
 382:/usr/include/c++/6/bits/stl_tree.h **** 	    {
GAS LISTING /tmp/ccvmoMuv.s 			page 744


 16395              		.loc 19 382 0
 16396 017e 0F84C403 		je	.L919
 16396      0000
 386:/usr/include/c++/6/bits/stl_tree.h **** 		_M_nodes = _M_nodes->_M_left;
 16397              		.loc 19 386 0
 16398 0184 488B5210 		movq	16(%rdx), %rdx
 384:/usr/include/c++/6/bits/stl_tree.h **** 
 16399              		.loc 19 384 0
 16400 0188 48C74008 		movq	$0, 8(%rax)
 16400      00000000 
 386:/usr/include/c++/6/bits/stl_tree.h **** 		_M_nodes = _M_nodes->_M_left;
 16401              		.loc 19 386 0
 16402 0190 4885D2   		testq	%rdx, %rdx
 16403 0193 7405     		je	.L920
 387:/usr/include/c++/6/bits/stl_tree.h **** 	    }
 16404              		.loc 19 387 0
 16405 0195 48895424 		movq	%rdx, 40(%rsp)
 16405      28
 16406              	.L920:
 16407              	.LVL1368:
 16408              	.LBE19120:
 16409              	.LBE19119:
 16410              	.LBE19118:
 16411              	.LBB19123:
 16412              	.LBB19124:
 620:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_left = &this->_M_header;
 16413              		.loc 19 620 0
 16414 019a 49C74424 		movq	$0, 24(%r12)
 16414      18000000 
 16414      00
 621:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_right = &this->_M_header;
 16415              		.loc 19 621 0
 16416 01a3 4D897C24 		movq	%r15, 32(%r12)
 16416      20
 622:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_node_count = 0;
 16417              		.loc 19 622 0
 16418 01a8 4D897C24 		movq	%r15, 40(%r12)
 16418      28
 16419 01ad 488B7318 		movq	24(%rbx), %rsi
 623:/usr/include/c++/6/bits/stl_tree.h **** 	  }
 16420              		.loc 19 623 0
 16421 01b1 49C74424 		movq	$0, 48(%r12)
 16421      30000000 
 16421      00
 16422              	.LVL1369:
 16423              	.LBE19124:
 16424              	.LBE19123:
1502:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 16425              		.loc 19 1502 0
 16426 01ba 4885F6   		testq	%rsi, %rsi
 16427 01bd 745D     		je	.L921
 16428              	.LVL1370:
1504:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_leftmost() = _S_minimum(_M_root());
 16429              		.loc 19 1504 0
 16430 01bf 488D4C24 		leaq	32(%rsp), %rcx
 16430      20
 16431 01c4 4C89FA   		movq	%r15, %rdx
GAS LISTING /tmp/ccvmoMuv.s 			page 745


 16432              	.LEHB76:
 16433 01c7 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 16433      00
 16434              	.LVL1371:
 16435              	.LEHE76:
 16436 01cc 49894424 		movq	%rax, 24(%r12)
 16436      18
 16437              	.LVL1372:
 16438 01d1 4889C1   		movq	%rax, %rcx
 16439 01d4 EB0D     		jmp	.L922
 16440              	.LVL1373:
 16441 01d6 662E0F1F 		.p2align 4,,10
 16441      84000000 
 16441      0000
 16442              		.p2align 3
 16443              	.L956:
 16444              	.LBB19125:
 16445              	.LBB19126:
 16446              	.LBB19127:
 111:/usr/include/c++/6/bits/stl_tree.h ****       return __x;
 16447              		.loc 19 111 0
 16448 01e0 4889D1   		movq	%rdx, %rcx
 16449              	.LVL1374:
 16450              	.L922:
 16451 01e3 488B5110 		movq	16(%rcx), %rdx
 16452 01e7 4885D2   		testq	%rdx, %rdx
 16453 01ea 75F4     		jne	.L956
 16454              	.LVL1375:
 16455              	.LBE19127:
 16456              	.LBE19126:
 16457              	.LBE19125:
1505:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_rightmost() = _S_maximum(_M_root());
 16458              		.loc 19 1505 0
 16459 01ec 49894C24 		movq	%rcx, 32(%r12)
 16459      20
 16460              	.LVL1376:
 16461 01f1 EB08     		jmp	.L923
 16462              	.LVL1377:
 16463              		.p2align 4,,10
 16464 01f3 0F1F4400 		.p2align 3
 16464      00
 16465              	.L957:
 16466              	.LBB19128:
 16467              	.LBB19129:
 16468              	.LBB19130:
 125:/usr/include/c++/6/bits/stl_tree.h ****       return __x;
 16469              		.loc 19 125 0
 16470 01f8 4889D0   		movq	%rdx, %rax
 16471              	.LVL1378:
 16472              	.L923:
 16473 01fb 488B5018 		movq	24(%rax), %rdx
 16474 01ff 4885D2   		testq	%rdx, %rdx
 16475 0202 75F4     		jne	.L957
 16476              	.LVL1379:
 16477              	.LBE19130:
 16478              	.LBE19129:
 16479              	.LBE19128:
GAS LISTING /tmp/ccvmoMuv.s 			page 746


1506:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_impl._M_node_count = __x._M_impl._M_node_count;
 16480              		.loc 19 1506 0
 16481 0204 49894424 		movq	%rax, 40(%r12)
 16481      28
1507:/usr/include/c++/6/bits/stl_tree.h **** 	    }
 16482              		.loc 19 1507 0
 16483 0209 488B4330 		movq	48(%rbx), %rax
 16484 020d 488B7C24 		movq	48(%rsp), %rdi
 16484      30
 16485 0212 49894424 		movq	%rax, 48(%r12)
 16485      30
 16486 0217 488B4424 		movq	32(%rsp), %rax
 16486      20
 16487              	.LVL1380:
 16488              	.L921:
 16489              	.LBB19131:
 16490              	.LBB19132:
 398:/usr/include/c++/6/bits/stl_tree.h **** 
 16491              		.loc 19 398 0
 16492 021c 4889C6   		movq	%rax, %rsi
 16493 021f E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 16493      00
 16494              	.LVL1381:
 16495              	.L918:
 16496              	.LBE19132:
 16497              	.LBE19131:
 16498              	.LBE19117:
 16499              	.LBE19116:
 16500              	.LBE19115:
 16501              	.LBE19114:
 16502              	.LBE19113:
 16503              	.LBE19024:
 16504              	.LBE19023:
 16505              	.LBB19154:
 16506              	.LBB19155:
  46:/usr/include/boost/exception/exception.hpp ****                 return *this;
 16507              		.loc 7 46 0
 16508 0224 488B5C24 		movq	24(%rsp), %rbx
 16508      18
 16509              	.LVL1382:
 16510              	.LBB19156:
 16511              	.LBB19157:
 16512              	.LBB19158:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 16513              		.loc 7 71 0
 16514 0229 4885DB   		testq	%rbx, %rbx
 16515 022c 743B     		je	.L932
  72:/usr/include/boost/exception/exception.hpp ****                 }
 16516              		.loc 7 72 0
 16517 022e 488B03   		movq	(%rbx), %rax
 16518 0231 488B4018 		movq	24(%rax), %rax
 16519 0235 4C39F0   		cmpq	%r14, %rax
 16520 0238 0F85C202 		jne	.L930
 16520      0000
 16521              	.LVL1383:
 16522              	.LBB19159:
 16523              	.LBB19160:
GAS LISTING /tmp/ccvmoMuv.s 			page 747


 162:/usr/include/boost/exception/info.hpp ****                 }
 16524              		.loc 3 162 0
 16525 023e 83435801 		addl	$1, 88(%rbx)
 16526              	.LVL1384:
 16527 0242 4989DC   		movq	%rbx, %r12
 16528              	.LVL1385:
 16529              	.L931:
 16530              	.LBE19160:
 16531              	.LBE19159:
 16532              	.LBE19158:
 16533              	.LBE19157:
 16534              	.LBE19156:
 16535              	.LBE19155:
 16536              	.LBE19154:
 16537              	.LBB19165:
 16538              	.LBB19166:
 16539              	.LBB19167:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 16540              		.loc 7 78 0
 16541 0245 498B0424 		movq	(%r12), %rax
 16542 0249 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 16542      000000
 16543 0250 488B4020 		movq	32(%rax), %rax
 16544 0254 4839D0   		cmpq	%rdx, %rax
 16545 0257 0F85C302 		jne	.L933
 16545      0000
 16546              	.LVL1386:
 16547              	.LBB19168:
 16548              	.LBB19169:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 16549              		.loc 3 168 0
 16550 025d 41836C24 		subl	$1, 88(%r12)
 16550      5801
 16551 0263 0F845701 		je	.L987
 16551      0000
 16552              	.LVL1387:
 16553              	.L932:
 16554 0269 498B5518 		movq	24(%r13), %rdx
 16555 026d 418B4520 		movl	32(%r13), %eax
 16556 0271 498B4D10 		movq	16(%r13), %rcx
 16557              	.LVL1388:
 16558              	.L907:
 16559              	.LBE19169:
 16560              	.LBE19168:
 16561              	.LBE19167:
 16562              	.LBE19166:
 16563              	.LBE19165:
 16564              	.LBE19022:
 16565              	.LBB19203:
 16566              	.LBB19204:
 16567              	.LBB19205:
 16568              	.LBB19206:
 16569              	.LBB19207:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 16570              		.loc 7 78 0
 16571 0275 4C8B6508 		movq	8(%rbp), %r12
 16572              	.LBE19207:
GAS LISTING /tmp/ccvmoMuv.s 			page 748


 16573              	.LBE19206:
 16574              	.LBE19205:
 16575              	.LBE19204:
 16576              	.LBE19203:
 440:/usr/include/boost/exception/exception.hpp ****             a->throw_line_ = b->throw_line_;
 16577              		.loc 7 440 0
 16578 0279 48895518 		movq	%rdx, 24(%rbp)
 441:/usr/include/boost/exception/exception.hpp ****             a->throw_function_ = b->throw_function_;
 16579              		.loc 7 441 0
 16580 027d 894520   		movl	%eax, 32(%rbp)
 442:/usr/include/boost/exception/exception.hpp ****             a->data_ = data;
 16581              		.loc 7 442 0
 16582 0280 48894D10 		movq	%rcx, 16(%rbp)
 16583              	.LVL1389:
 16584              	.LBB19252:
 16585              	.LBB19248:
 16586              	.LBB19244:
 16587              	.LBB19233:
 16588              	.LBB19230:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 16589              		.loc 7 78 0
 16590 0284 4D85E4   		testq	%r12, %r12
 16591 0287 7424     		je	.L936
 16592 0289 498B0424 		movq	(%r12), %rax
 16593 028d 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 16593      000000
 16594 0294 488B4020 		movq	32(%rax), %rax
 16595 0298 4839D0   		cmpq	%rdx, %rax
 16596 029b 0F85F701 		jne	.L937
 16596      0000
 16597              	.LVL1390:
 16598              	.LBB19208:
 16599              	.LBB19209:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 16600              		.loc 3 168 0
 16601 02a1 41836C24 		subl	$1, 88(%r12)
 16601      5801
 16602 02a7 0F84D300 		je	.L988
 16602      0000
 16603              	.LVL1391:
 16604              	.L936:
 16605              	.LBE19209:
 16606              	.LBE19208:
 16607              	.LBE19230:
 16608              	.LBE19233:
 16609              	.LBB19234:
 16610              	.LBB19235:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 16611              		.loc 7 71 0
 16612 02ad 4885DB   		testq	%rbx, %rbx
 16613              	.LBE19235:
 16614              	.LBE19234:
  54:/usr/include/boost/exception/exception.hpp ****                 add_ref();
 16615              		.loc 7 54 0
 16616 02b0 48895D08 		movq	%rbx, 8(%rbp)
 16617              	.LVL1392:
 16618              	.LBB19240:
GAS LISTING /tmp/ccvmoMuv.s 			page 749


 16619              	.LBB19238:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 16620              		.loc 7 71 0
 16621 02b4 7435     		je	.L943
  72:/usr/include/boost/exception/exception.hpp ****                 }
 16622              		.loc 7 72 0
 16623 02b6 488B03   		movq	(%rbx), %rax
 16624 02b9 488D0D00 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7add_refEv(%rip), %rcx
 16624      000000
 16625 02c0 488B5018 		movq	24(%rax), %rdx
 16626 02c4 4839CA   		cmpq	%rcx, %rdx
 16627 02c7 0F855301 		jne	.L944
 16627      0000
 16628              	.LVL1393:
 16629              	.LBB19236:
 16630              	.LBB19237:
 162:/usr/include/boost/exception/info.hpp ****                 }
 16631              		.loc 3 162 0
 16632 02cd 83435801 		addl	$1, 88(%rbx)
 16633              	.LVL1394:
 16634              	.L945:
 16635              	.LBE19237:
 16636              	.LBE19236:
 16637              	.LBE19238:
 16638              	.LBE19240:
 16639              	.LBE19244:
 16640              	.LBE19248:
 16641              	.LBE19252:
 16642              	.LBB19253:
 16643              	.LBB19254:
 16644              	.LBB19255:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 16645              		.loc 7 78 0
 16646 02d1 488B4020 		movq	32(%rax), %rax
 16647 02d5 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 16647      000000
 16648 02dc 4839D0   		cmpq	%rdx, %rax
 16649 02df 0F852B01 		jne	.L989
 16649      0000
 16650              	.LVL1395:
 16651              	.LBB19256:
 16652              	.LBB19257:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 16653              		.loc 3 168 0
 16654 02e5 836B5801 		subl	$1, 88(%rbx)
 16655 02e9 7455     		je	.L990
 16656              	.LVL1396:
 16657              	.L943:
 16658              	.LBE19257:
 16659              	.LBE19256:
 16660              	.LBE19255:
 16661              	.LBE19254:
 16662              	.LBE19253:
 16663              	.LBE19021:
 16664              	.LBE19020:
 16665              	.LBE19308:
 16666              	.LBE19311:
GAS LISTING /tmp/ccvmoMuv.s 			page 750


 488:/usr/include/boost/exception/exception.hpp ****                 }
 16667              		.loc 7 488 0
 16668 02eb 488B4500 		movq	0(%rbp), %rax
 16669 02ef 480368E8 		addq	-24(%rax), %rbp
 489:/usr/include/boost/exception/exception.hpp **** 
 16670              		.loc 7 489 0
 16671 02f3 4883C448 		addq	$72, %rsp
 16672              		.cfi_remember_state
 16673              		.cfi_def_cfa_offset 56
 16674 02f7 5B       		popq	%rbx
 16675              		.cfi_def_cfa_offset 48
 488:/usr/include/boost/exception/exception.hpp ****                 }
 16676              		.loc 7 488 0
 16677 02f8 4889E8   		movq	%rbp, %rax
 489:/usr/include/boost/exception/exception.hpp **** 
 16678              		.loc 7 489 0
 16679 02fb 5D       		popq	%rbp
 16680              		.cfi_def_cfa_offset 40
 16681 02fc 415C     		popq	%r12
 16682              		.cfi_def_cfa_offset 32
 16683 02fe 415D     		popq	%r13
 16684              		.cfi_def_cfa_offset 24
 16685              	.LVL1397:
 16686 0300 415E     		popq	%r14
 16687              		.cfi_def_cfa_offset 16
 16688 0302 415F     		popq	%r15
 16689              		.cfi_def_cfa_offset 8
 16690 0304 C3       		ret
 16691              	.LVL1398:
 16692              		.p2align 4,,10
 16693 0305 0F1F00   		.p2align 3
 16694              	.L904:
 16695              		.cfi_restore_state
 16696              	.LBB19312:
 16697              	.LBB19309:
 465:/usr/include/boost/exception/exception.hpp ****                 {
 16698              		.loc 7 465 0
 16699 0308 488D3500 		leaq	24+_ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE(%rip), %rsi
 16699      000000
 16700              	.LBB19299:
 16701              	.LBB19012:
 16702              	.LBB19006:
 220:/usr/include/boost/exception/exception.hpp ****         {
 16703              		.loc 7 220 0
 16704 030f 498B4D10 		movq	16(%r13), %rcx
 16705 0313 498B5518 		movq	24(%r13), %rdx
 16706 0317 418B4520 		movl	32(%r13), %eax
 16707              	.LVL1399:
 16708              	.LBE19006:
 16709              	.LBE19012:
 16710              	.LBE19299:
 465:/usr/include/boost/exception/exception.hpp ****                 {
 16711              		.loc 7 465 0
 16712 031b 48897500 		movq	%rsi, 0(%rbp)
 16713 031f 488D3500 		leaq	72+_ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE(%rip), %rsi
 16713      000000
 16714 0326 48897528 		movq	%rsi, 40(%rbp)
GAS LISTING /tmp/ccvmoMuv.s 			page 751


 16715 032a 488D3500 		leaq	136+_ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE(%rip), %rsi
 16715      000000
 16716 0331 48897530 		movq	%rsi, 48(%rbp)
 16717              	.LVL1400:
 16718 0335 E93BFFFF 		jmp	.L907
 16718      FF
 16719              	.LVL1401:
 16720 033a 660F1F44 		.p2align 4,,10
 16720      0000
 16721              		.p2align 3
 16722              	.L990:
 16723              	.LBB19300:
 16724              	.LBB19295:
 16725              	.LBB19282:
 16726              	.LBB19280:
 16727              	.LBB19278:
 16728              	.LBB19277:
 16729              	.LBB19276:
 16730              	.LBB19258:
 16731              	.LBB19259:
 104:/usr/include/boost/exception/info.hpp ****                 }
 16732              		.loc 3 104 0
 16733 0340 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 16733      000000
 16734 0347 488B7B38 		movq	56(%rbx), %rdi
 16735 034b 488903   		movq	%rax, (%rbx)
 16736              	.LVL1402:
 16737              	.LBB19260:
 16738              	.LBB19261:
 16739              	.LBB19262:
 16740              	.LBB19263:
 16741              	.LBB19264:
 16742              	.LBB19265:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 16743              		.loc 10 152 0
 16744 034e 488D4348 		leaq	72(%rbx), %rax
 16745              	.LBE19265:
 16746              	.LBE19264:
 16747              	.LBE19263:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 16748              		.loc 10 180 0
 16749 0352 4839C7   		cmpq	%rax, %rdi
 16750 0355 7405     		je	.L948
 16751              	.LVL1403:
 16752              	.LBB19266:
 16753              	.LBB19267:
 16754              	.LBB19268:
 16755              	.LBB19269:
 16756              		.loc 12 110 0
 16757 0357 E8000000 		call	_ZdlPv@PLT
 16757      00
 16758              	.LVL1404:
 16759              	.L948:
 16760              	.LBE19269:
 16761              	.LBE19268:
 16762              	.LBE19267:
 16763              	.LBE19266:
GAS LISTING /tmp/ccvmoMuv.s 			page 752


 16764              	.LBE19262:
 16765              	.LBE19261:
 16766              	.LBE19260:
 16767              	.LBB19270:
 16768              	.LBB19271:
 16769              	.LBB19272:
 16770              	.LBB19273:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 16771              		.loc 19 873 0
 16772 035c 488B7318 		movq	24(%rbx), %rsi
 16773              	.LBE19273:
 16774              	.LBE19272:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 16775              		.loc 36 96 0
 16776 0360 488D7B08 		leaq	8(%rbx), %rdi
 16777              	.LVL1405:
 16778              	.LBB19275:
 16779              	.LBB19274:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 16780              		.loc 19 873 0
 16781 0364 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 16781      00
 16782              	.LVL1406:
 16783              	.LBE19274:
 16784              	.LBE19275:
 16785              	.LBE19271:
 16786              	.LBE19270:
 16787              	.LBE19259:
 16788              	.LBE19258:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 16789              		.loc 3 172 0
 16790 0369 BE600000 		movl	$96, %esi
 16790      00
 16791 036e 4889DF   		movq	%rbx, %rdi
 16792 0371 E8000000 		call	_ZdlPvm@PLT
 16792      00
 16793              	.LVL1407:
 16794 0376 E970FFFF 		jmp	.L943
 16794      FF
 16795              	.LVL1408:
 16796 037b 0F1F4400 		.p2align 4,,10
 16796      00
 16797              		.p2align 3
 16798              	.L988:
 16799              	.LBE19276:
 16800              	.LBE19277:
 16801              	.LBE19278:
 16802              	.LBE19280:
 16803              	.LBE19282:
 16804              	.LBB19283:
 16805              	.LBB19249:
 16806              	.LBB19245:
 16807              	.LBB19241:
 16808              	.LBB19231:
 16809              	.LBB19229:
 16810              	.LBB19228:
 16811              	.LBB19210:
GAS LISTING /tmp/ccvmoMuv.s 			page 753


 16812              	.LBB19211:
 104:/usr/include/boost/exception/info.hpp ****                 }
 16813              		.loc 3 104 0
 16814 0380 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 16814      000000
 16815 0387 498B7C24 		movq	56(%r12), %rdi
 16815      38
 16816 038c 49890424 		movq	%rax, (%r12)
 16817              	.LVL1409:
 16818              	.LBB19212:
 16819              	.LBB19213:
 16820              	.LBB19214:
 16821              	.LBB19215:
 16822              	.LBB19216:
 16823              	.LBB19217:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 16824              		.loc 10 152 0
 16825 0390 498D4424 		leaq	72(%r12), %rax
 16825      48
 16826              	.LBE19217:
 16827              	.LBE19216:
 16828              	.LBE19215:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 16829              		.loc 10 180 0
 16830 0395 4839C7   		cmpq	%rax, %rdi
 16831 0398 7405     		je	.L939
 16832              	.LVL1410:
 16833              	.LBB19218:
 16834              	.LBB19219:
 16835              	.LBB19220:
 16836              	.LBB19221:
 16837              		.loc 12 110 0
 16838 039a E8000000 		call	_ZdlPv@PLT
 16838      00
 16839              	.LVL1411:
 16840              	.L939:
 16841              	.LBE19221:
 16842              	.LBE19220:
 16843              	.LBE19219:
 16844              	.LBE19218:
 16845              	.LBE19214:
 16846              	.LBE19213:
 16847              	.LBE19212:
 16848              	.LBB19222:
 16849              	.LBB19223:
 16850              	.LBB19224:
 16851              	.LBB19225:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 16852              		.loc 19 873 0
 16853 039f 498B7424 		movq	24(%r12), %rsi
 16853      18
 16854              	.LBE19225:
 16855              	.LBE19224:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 16856              		.loc 36 96 0
 16857 03a4 498D7C24 		leaq	8(%r12), %rdi
 16857      08
GAS LISTING /tmp/ccvmoMuv.s 			page 754


 16858              	.LVL1412:
 16859              	.LBB19227:
 16860              	.LBB19226:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 16861              		.loc 19 873 0
 16862 03a9 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 16862      00
 16863              	.LVL1413:
 16864              	.LBE19226:
 16865              	.LBE19227:
 16866              	.LBE19223:
 16867              	.LBE19222:
 16868              	.LBE19211:
 16869              	.LBE19210:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 16870              		.loc 3 172 0
 16871 03ae BE600000 		movl	$96, %esi
 16871      00
 16872 03b3 4C89E7   		movq	%r12, %rdi
 16873 03b6 E8000000 		call	_ZdlPvm@PLT
 16873      00
 16874              	.LVL1414:
 16875 03bb E9EDFEFF 		jmp	.L936
 16875      FF
 16876              	.LVL1415:
 16877              		.p2align 4,,10
 16878              		.p2align 3
 16879              	.L987:
 16880              	.LBE19228:
 16881              	.LBE19229:
 16882              	.LBE19231:
 16883              	.LBE19241:
 16884              	.LBE19245:
 16885              	.LBE19249:
 16886              	.LBE19283:
 16887              	.LBB19284:
 16888              	.LBB19194:
 16889              	.LBB19192:
 16890              	.LBB19190:
 16891              	.LBB19189:
 16892              	.LBB19188:
 16893              	.LBB19170:
 16894              	.LBB19171:
 104:/usr/include/boost/exception/info.hpp ****                 }
 16895              		.loc 3 104 0
 16896 03c0 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 16896      000000
 16897 03c7 498B7C24 		movq	56(%r12), %rdi
 16897      38
 16898 03cc 49890424 		movq	%rax, (%r12)
 16899              	.LVL1416:
 16900              	.LBB19172:
 16901              	.LBB19173:
 16902              	.LBB19174:
 16903              	.LBB19175:
 16904              	.LBB19176:
 16905              	.LBB19177:
GAS LISTING /tmp/ccvmoMuv.s 			page 755


 152:/usr/include/c++/6/bits/basic_string.h **** #else
 16906              		.loc 10 152 0
 16907 03d0 498D4424 		leaq	72(%r12), %rax
 16907      48
 16908              	.LBE19177:
 16909              	.LBE19176:
 16910              	.LBE19175:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 16911              		.loc 10 180 0
 16912 03d5 4839C7   		cmpq	%rax, %rdi
 16913 03d8 7405     		je	.L934
 16914              	.LVL1417:
 16915              	.LBB19178:
 16916              	.LBB19179:
 16917              	.LBB19180:
 16918              	.LBB19181:
 16919              		.loc 12 110 0
 16920 03da E8000000 		call	_ZdlPv@PLT
 16920      00
 16921              	.LVL1418:
 16922              	.L934:
 16923              	.LBE19181:
 16924              	.LBE19180:
 16925              	.LBE19179:
 16926              	.LBE19178:
 16927              	.LBE19174:
 16928              	.LBE19173:
 16929              	.LBE19172:
 16930              	.LBB19182:
 16931              	.LBB19183:
 16932              	.LBB19184:
 16933              	.LBB19185:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 16934              		.loc 19 873 0
 16935 03df 498B7424 		movq	24(%r12), %rsi
 16935      18
 16936              	.LBE19185:
 16937              	.LBE19184:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 16938              		.loc 36 96 0
 16939 03e4 498D7C24 		leaq	8(%r12), %rdi
 16939      08
 16940              	.LVL1419:
 16941              	.LBB19187:
 16942              	.LBB19186:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 16943              		.loc 19 873 0
 16944 03e9 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 16944      00
 16945              	.LVL1420:
 16946              	.LBE19186:
 16947              	.LBE19187:
 16948              	.LBE19183:
 16949              	.LBE19182:
 16950              	.LBE19171:
 16951              	.LBE19170:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
GAS LISTING /tmp/ccvmoMuv.s 			page 756


 16952              		.loc 3 172 0
 16953 03ee BE600000 		movl	$96, %esi
 16953      00
 16954 03f3 4C89E7   		movq	%r12, %rdi
 16955 03f6 E8000000 		call	_ZdlPvm@PLT
 16955      00
 16956              	.LVL1421:
 16957 03fb E969FEFF 		jmp	.L932
 16957      FF
 16958              	.LVL1422:
 16959              		.p2align 4,,10
 16960              		.p2align 3
 16961              	.L908:
 16962              	.LBE19188:
 16963              	.LBE19189:
 16964              	.LBE19190:
 16965              	.LBE19192:
 16966              	.LBE19194:
 439:/usr/include/boost/exception/exception.hpp ****             a->throw_file_ = b->throw_file_;
 16967              		.loc 7 439 0
 16968 0400 488D7C24 		leaq	24(%rsp), %rdi
 16968      18
 16969 0405 4889DE   		movq	%rbx, %rsi
 16970              	.LEHB77:
 16971 0408 FFD0     		call	*%rax
 16972              	.LVL1423:
 16973              	.LEHE77:
 16974 040a E915FEFF 		jmp	.L918
 16974      FF
 16975              	.LVL1424:
 16976 040f 90       		.p2align 4,,10
 16977              		.p2align 3
 16978              	.L989:
 16979              	.LBE19284:
 16980              	.LBB19285:
 16981              	.LBB19281:
 16982              	.LBB19279:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 16983              		.loc 7 78 0
 16984 0410 4889DF   		movq	%rbx, %rdi
 16985 0413 FFD0     		call	*%rax
 16986              	.LVL1425:
 16987 0415 E9D1FEFF 		jmp	.L943
 16987      FF
 16988              	.LVL1426:
 16989 041a 660F1F44 		.p2align 4,,10
 16989      0000
 16990              		.p2align 3
 16991              	.L944:
 16992              	.LBE19279:
 16993              	.LBE19281:
 16994              	.LBE19285:
 16995              	.LBB19286:
 16996              	.LBB19250:
 16997              	.LBB19246:
 16998              	.LBB19242:
 16999              	.LBB19239:
GAS LISTING /tmp/ccvmoMuv.s 			page 757


  72:/usr/include/boost/exception/exception.hpp ****                 }
 17000              		.loc 7 72 0
 17001 0420 4889DF   		movq	%rbx, %rdi
 17002              	.LEHB78:
 17003 0423 FFD2     		call	*%rdx
 17004              	.LVL1427:
 17005              	.LEHE78:
 17006 0425 488B03   		movq	(%rbx), %rax
 17007 0428 E9A4FEFF 		jmp	.L945
 17007      FF
 17008              	.LVL1428:
 17009 042d 0F1F00   		.p2align 4,,10
 17010              		.p2align 3
 17011              	.L986:
 17012 0430 488B7838 		movq	56(%rax), %rdi
 17013              	.LBE19239:
 17014              	.LBE19242:
 17015              	.LBE19246:
 17016              	.LBE19250:
 17017              	.LBE19286:
 17018              	.LBB19287:
 17019              	.LBB19195:
 17020              	.LBB19151:
 17021              	.LBB19144:
 17022              	.LBB19109:
 17023              	.LBB19105:
 17024              	.LBB19097:
 17025              	.LBB19095:
 17026              	.LBB19094:
 17027              	.LBB19073:
 17028              	.LBB19074:
 17029              	.LBB19075:
 17030              	.LBB19076:
 17031              	.LBB19077:
 17032              	.LBB19078:
 17033              	.LBB19079:
 17034              	.LBB19080:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 17035              		.loc 10 152 0
 17036 0434 488D5048 		leaq	72(%rax), %rdx
 17037              	.LBE19080:
 17038              	.LBE19079:
 17039              	.LBE19078:
 17040              	.LBE19077:
 17041              	.LBE19076:
 17042              	.LBE19075:
 104:/usr/include/boost/exception/info.hpp ****                 }
 17043              		.loc 3 104 0
 17044 0438 488908   		movq	%rcx, (%rax)
 17045              	.LVL1429:
 17046              	.LBB19087:
 17047              	.LBB19086:
 17048              	.LBB19085:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 17049              		.loc 10 180 0
 17050 043b 4839D7   		cmpq	%rdx, %rdi
 17051 043e 740F     		je	.L913
GAS LISTING /tmp/ccvmoMuv.s 			page 758


 17052 0440 48894424 		movq	%rax, 8(%rsp)
 17052      08
 17053              	.LVL1430:
 17054              	.LBB19081:
 17055              	.LBB19082:
 17056              	.LBB19083:
 17057              	.LBB19084:
 17058              		.loc 12 110 0
 17059 0445 E8000000 		call	_ZdlPv@PLT
 17059      00
 17060              	.LVL1431:
 17061 044a 488B4424 		movq	8(%rsp), %rax
 17061      08
 17062              	.LVL1432:
 17063              	.L913:
 17064              	.LBE19084:
 17065              	.LBE19083:
 17066              	.LBE19082:
 17067              	.LBE19081:
 17068              	.LBE19085:
 17069              	.LBE19086:
 17070              	.LBE19087:
 17071              	.LBB19088:
 17072              	.LBB19089:
 17073              	.LBB19090:
 17074              	.LBB19091:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 17075              		.loc 19 873 0
 17076 044f 488B7018 		movq	24(%rax), %rsi
 17077              	.LBE19091:
 17078              	.LBE19090:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 17079              		.loc 36 96 0
 17080 0453 488D7808 		leaq	8(%rax), %rdi
 17081              	.LVL1433:
 17082 0457 48894424 		movq	%rax, 8(%rsp)
 17082      08
 17083              	.LBB19093:
 17084              	.LBB19092:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 17085              		.loc 19 873 0
 17086 045c E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 17086      00
 17087              	.LVL1434:
 17088              	.LBE19092:
 17089              	.LBE19093:
 17090              	.LBE19089:
 17091              	.LBE19088:
 17092              	.LBE19074:
 17093              	.LBE19073:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 17094              		.loc 3 172 0
 17095 0461 488B4424 		movq	8(%rsp), %rax
 17095      08
 17096 0466 BE600000 		movl	$96, %esi
 17096      00
 17097 046b 4889C7   		movq	%rax, %rdi
GAS LISTING /tmp/ccvmoMuv.s 			page 759


 17098 046e E8000000 		call	_ZdlPvm@PLT
 17098      00
 17099              	.LVL1435:
 17100 0473 498B0424 		movq	(%r12), %rax
 17101 0477 488B4018 		movq	24(%rax), %rax
 17102              	.LVL1436:
 17103              	.L914:
 17104 047b 4C39F0   		cmpq	%r14, %rax
 17105              	.LBE19094:
 17106              	.LBE19095:
 17107              	.LBE19097:
 17108              	.LBE19105:
  54:/usr/include/boost/exception/exception.hpp ****                 add_ref();
 17109              		.loc 7 54 0
 17110 047e 4C896424 		movq	%r12, 24(%rsp)
 17110      18
 17111              	.LVL1437:
 17112 0483 0F84C1FC 		je	.L910
 17112      FFFF
 17113              	.LBB19106:
 17114              	.LBB19104:
  72:/usr/include/boost/exception/exception.hpp ****                 }
 17115              		.loc 7 72 0
 17116 0489 4C89E7   		movq	%r12, %rdi
 17117              	.LEHB79:
 17118 048c FFD0     		call	*%rax
 17119              	.LVL1438:
 17120              	.LEHE79:
 17121 048e E9BDFCFF 		jmp	.L916
 17121      FF
 17122              	.LVL1439:
 17123              		.p2align 4,,10
 17124 0493 0F1F4400 		.p2align 3
 17124      00
 17125              	.L937:
 17126              	.LBE19104:
 17127              	.LBE19106:
 17128              	.LBE19109:
 17129              	.LBE19144:
 17130              	.LBE19151:
 17131              	.LBE19195:
 17132              	.LBE19287:
 17133              	.LBB19288:
 17134              	.LBB19251:
 17135              	.LBB19247:
 17136              	.LBB19243:
 17137              	.LBB19232:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 17138              		.loc 7 78 0
 17139 0498 4C89E7   		movq	%r12, %rdi
 17140              	.LEHB80:
 17141 049b FFD0     		call	*%rax
 17142              	.LVL1440:
 17143              	.LEHE80:
 17144 049d E90BFEFF 		jmp	.L936
 17144      FF
 17145              	.LVL1441:
GAS LISTING /tmp/ccvmoMuv.s 			page 760


 17146              		.p2align 4,,10
 17147 04a2 660F1F44 		.p2align 3
 17147      0000
 17148              	.L905:
 17149              	.LBE19232:
 17150              	.LBE19243:
 17151              	.LBE19247:
 17152              	.LBE19251:
 17153              	.LBE19288:
 17154              	.LBE19295:
 17155              	.LBE19300:
 17156              	.LBB19301:
 17157              	.LBB19013:
 17158              	.LBB19007:
 17159              	.LBB19004:
 17160              	.LBB19000:
 17161              	.LBB18996:
 17162              	.LBB18993:
  72:/usr/include/boost/exception/exception.hpp ****                 }
 17163              		.loc 7 72 0
 17164 04a8 4889DF   		movq	%rbx, %rdi
 17165              	.LEHB81:
 17166 04ab FFD0     		call	*%rax
 17167              	.LVL1442:
 17168              	.LEHE81:
 17169              	.LBE18993:
 17170              	.LBE18996:
 17171              	.LBE19000:
 17172              	.LBE19004:
 17173              	.LBE19007:
 17174              	.LBE19013:
 17175              	.LBE19301:
 465:/usr/include/boost/exception/exception.hpp ****                 {
 17176              		.loc 7 465 0
 17177 04ad 488D3500 		leaq	24+_ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE(%rip), %rsi
 17177      000000
 17178 04b4 498B5D08 		movq	8(%r13), %rbx
 17179              	.LVL1443:
 17180              	.LBB19302:
 17181              	.LBB19014:
 17182              	.LBB19008:
 220:/usr/include/boost/exception/exception.hpp ****         {
 17183              		.loc 7 220 0
 17184 04b8 498B4D10 		movq	16(%r13), %rcx
 17185 04bc 498B5518 		movq	24(%r13), %rdx
 17186 04c0 418B4520 		movl	32(%r13), %eax
 17187              	.LBE19008:
 17188              	.LBE19014:
 17189              	.LBE19302:
 465:/usr/include/boost/exception/exception.hpp ****                 {
 17190              		.loc 7 465 0
 17191 04c4 48897500 		movq	%rsi, 0(%rbp)
 17192 04c8 488D3500 		leaq	72+_ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE(%rip), %rsi
 17192      000000
 17193              	.LBB19303:
 17194              	.LBB19296:
 17195              	.LBB19289:
GAS LISTING /tmp/ccvmoMuv.s 			page 761


 438:/usr/include/boost/exception/exception.hpp ****                 data = d->clone();
 17196              		.loc 7 438 0
 17197 04cf 4885DB   		testq	%rbx, %rbx
 17198              	.LBE19289:
 17199              	.LBE19296:
 17200              	.LBE19303:
 17201              	.LBB19304:
 17202              	.LBB19015:
 17203              	.LBB19009:
 220:/usr/include/boost/exception/exception.hpp ****         {
 17204              		.loc 7 220 0
 17205 04d2 48894D10 		movq	%rcx, 16(%rbp)
 17206              	.LBE19009:
 17207              	.LBE19015:
 17208              	.LBE19304:
 465:/usr/include/boost/exception/exception.hpp ****                 {
 17209              		.loc 7 465 0
 17210 04d6 48897528 		movq	%rsi, 40(%rbp)
 17211 04da 488D3500 		leaq	136+_ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE(%rip), %rsi
 17211      000000
 17212              	.LBB19305:
 17213              	.LBB19016:
 17214              	.LBB19010:
 220:/usr/include/boost/exception/exception.hpp ****         {
 17215              		.loc 7 220 0
 17216 04e1 48895518 		movq	%rdx, 24(%rbp)
 17217 04e5 894520   		movl	%eax, 32(%rbp)
 17218              	.LVL1444:
 17219              	.LBE19010:
 17220              	.LBE19016:
 17221              	.LBE19305:
 465:/usr/include/boost/exception/exception.hpp ****                 {
 17222              		.loc 7 465 0
 17223 04e8 48897530 		movq	%rsi, 48(%rbp)
 17224              	.LVL1445:
 17225              	.LBB19306:
 17226              	.LBB19297:
 17227              	.LBB19290:
 438:/usr/include/boost/exception/exception.hpp ****                 data = d->clone();
 17228              		.loc 7 438 0
 17229 04ec 0F85A6FB 		jne	.L906
 17229      FFFF
 17230 04f2 E97EFDFF 		jmp	.L907
 17230      FF
 17231              	.LVL1446:
 17232 04f7 660F1F84 		.p2align 4,,10
 17232      00000000 
 17232      00
 17233              		.p2align 3
 17234              	.L930:
 17235              	.LBB19196:
 17236              	.LBB19164:
 17237              	.LBB19163:
 17238              	.LBB19162:
 17239              	.LBB19161:
  72:/usr/include/boost/exception/exception.hpp ****                 }
 17240              		.loc 7 72 0
GAS LISTING /tmp/ccvmoMuv.s 			page 762


 17241 0500 4889DF   		movq	%rbx, %rdi
 17242              	.LEHB82:
 17243 0503 FFD0     		call	*%rax
 17244              	.LVL1447:
 17245              	.LEHE82:
 17246 0505 4C8B6424 		movq	24(%rsp), %r12
 17246      18
 17247              	.LVL1448:
 17248              	.LBE19161:
 17249              	.LBE19162:
 17250              	.LBE19163:
 17251              	.LBE19164:
 17252              	.LBE19196:
 17253              	.LBB19197:
 17254              	.LBB19193:
 17255              	.LBB19191:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 17256              		.loc 7 78 0
 17257 050a 4D85E4   		testq	%r12, %r12
 17258 050d 0F8456FD 		je	.L932
 17258      FFFF
 17259 0513 E92DFDFF 		jmp	.L931
 17259      FF
 17260 0518 0F1F8400 		.p2align 4,,10
 17260      00000000 
 17261              		.p2align 3
 17262              	.L933:
 17263 0520 4C89E7   		movq	%r12, %rdi
 17264 0523 FFD0     		call	*%rax
 17265              	.LVL1449:
 17266 0525 E93FFDFF 		jmp	.L932
 17266      FF
 17267              	.LVL1450:
 17268 052a 660F1F44 		.p2align 4,,10
 17268      0000
 17269              		.p2align 3
 17270              	.L911:
 17271              	.LBE19191:
 17272              	.LBE19193:
 17273              	.LBE19197:
 17274              	.LBB19198:
 17275              	.LBB19152:
 17276              	.LBB19145:
 17277              	.LBB19110:
 17278              	.LBB19107:
 17279              	.LBB19098:
 17280 0530 4889C7   		movq	%rax, %rdi
 17281              	.LEHB83:
 17282 0533 FFD2     		call	*%rdx
 17283              	.LVL1451:
 17284              	.LEHE83:
 17285 0535 498B0424 		movq	(%r12), %rax
 17286 0539 488B4018 		movq	24(%rax), %rax
 17287 053d E939FFFF 		jmp	.L914
 17287      FF
 17288              	.LVL1452:
 17289              		.p2align 4,,10
GAS LISTING /tmp/ccvmoMuv.s 			page 763


 17290 0542 660F1F44 		.p2align 3
 17290      0000
 17291              	.L919:
 17292              	.LBE19098:
 17293              	.LBE19107:
 17294              	.LBE19110:
 17295              	.LBE19145:
 17296              	.LBB19146:
 17297              	.LBB19142:
 17298              	.LBB19140:
 17299              	.LBB19138:
 17300              	.LBB19136:
 17301              	.LBB19133:
 17302              	.LBB19122:
 17303              	.LBB19121:
 390:/usr/include/c++/6/bits/stl_tree.h **** 	}
 17304              		.loc 19 390 0
 17305 0548 48C74424 		movq	$0, 40(%rsp)
 17305      28000000 
 17305      00
 17306 0551 E944FCFF 		jmp	.L920
 17306      FF
 17307              	.LVL1453:
 17308              	.L962:
 17309 0556 4989C4   		movq	%rax, %r12
 17310              	.LVL1454:
 17311              	.L927:
 17312              	.LBE19121:
 17313              	.LBE19122:
 17314              	.LBE19133:
 17315              	.LBE19136:
 17316              	.LBE19138:
 17317              	.LBE19140:
 17318              	.LBE19142:
 17319              	.LBE19146:
 17320              	.LBE19152:
 17321              	.LBE19198:
 17322              	.LBE19290:
 17323              	.LBE19297:
 17324              	.LBE19306:
 465:/usr/include/boost/exception/exception.hpp ****                 {
 17325              		.loc 7 465 0
 17326 0559 4889EF   		movq	%rbp, %rdi
 17327 055c E8000000 		call	_ZN5boost16exception_detail10bad_alloc_D2Ev
 17327      00
 17328              	.LVL1455:
 17329              	.L952:
 17330              	.LBE19309:
 17331              	.LBE19312:
 488:/usr/include/boost/exception/exception.hpp ****                 }
 17332              		.loc 7 488 0 discriminator 3
 17333 0561 4889EF   		movq	%rbp, %rdi
 17334 0564 BE380000 		movl	$56, %esi
 17334      00
 17335 0569 E8000000 		call	_ZdlPvm@PLT
 17335      00
 17336              	.LVL1456:
GAS LISTING /tmp/ccvmoMuv.s 			page 764


 17337 056e 4C89E7   		movq	%r12, %rdi
 17338              	.LEHB84:
 17339 0571 E8000000 		call	_Unwind_Resume@PLT
 17339      00
 17340              	.LVL1457:
 17341              	.LEHE84:
 17342              	.L961:
 17343              	.LBB19313:
 17344              	.LBB19310:
 17345              	.LBB19307:
 17346              	.LBB19298:
 17347              	.LBB19291:
 17348              	.LBB19199:
 17349              	.LBB19153:
 17350              	.LBB19147:
 17351              	.LBB19143:
 17352              	.LBB19141:
 17353              	.LBB19139:
 17354              	.LBB19137:
 17355              	.LBB19134:
 17356              	.LBB19135:
 398:/usr/include/c++/6/bits/stl_tree.h **** 
 17357              		.loc 19 398 0
 17358 0576 488B7424 		movq	32(%rsp), %rsi
 17358      20
 17359 057b 488B7C24 		movq	48(%rsp), %rdi
 17359      30
 17360 0580 4989C4   		movq	%rax, %r12
 17361              	.LVL1458:
 17362 0583 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 17362      00
 17363              	.LVL1459:
 17364              	.L925:
 17365              	.LBE19135:
 17366              	.LBE19134:
 17367              	.LBE19137:
 17368              	.LBE19139:
 17369              	.LBE19141:
 17370              	.LBE19143:
 17371              	.LBE19147:
 17372              	.LBB19148:
 17373              	.LBB19149:
 17374              	.LBB19150:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 17375              		.loc 7 78 0
 17376 0588 488B7C24 		movq	24(%rsp), %rdi
 17376      18
 17377 058d 4885FF   		testq	%rdi, %rdi
 17378 0590 74C7     		je	.L927
 17379 0592 488B07   		movq	(%rdi), %rax
 17380 0595 FF5020   		call	*32(%rax)
 17381              	.LVL1460:
 17382 0598 EBBF     		jmp	.L927
 17383              	.L960:
 17384 059a 4989C4   		movq	%rax, %r12
 17385 059d EBE9     		jmp	.L925
 17386              	.LVL1461:
GAS LISTING /tmp/ccvmoMuv.s 			page 765


 17387              	.L959:
 17388              	.LBE19150:
 17389              	.LBE19149:
 17390              	.LBE19148:
 17391              	.LBE19153:
 17392              	.LBE19199:
 17393              	.LBB19200:
 17394              	.LBB19201:
 17395              	.LBB19202:
 17396 059f 488B7C24 		movq	24(%rsp), %rdi
 17396      18
 17397 05a4 4989C4   		movq	%rax, %r12
 17398              	.LVL1462:
 17399 05a7 4885FF   		testq	%rdi, %rdi
 17400 05aa 7406     		je	.L951
 17401 05ac 488B07   		movq	(%rdi), %rax
 17402 05af FF5020   		call	*32(%rax)
 17403              	.LVL1463:
 17404              	.L951:
 17405              	.LBE19202:
 17406              	.LBE19201:
 17407              	.LBE19200:
 17408              	.LBE19291:
 17409              	.LBB19292:
 17410              	.LBB19293:
 17411              	.LBB19294:
 17412 05b2 488B03   		movq	(%rbx), %rax
 17413 05b5 4889DF   		movq	%rbx, %rdi
 17414 05b8 FF5020   		call	*32(%rax)
 17415              	.LVL1464:
 17416 05bb EB9C     		jmp	.L927
 17417              	.LVL1465:
 17418              	.L958:
 17419 05bd 4989C4   		movq	%rax, %r12
 17420 05c0 EB9F     		jmp	.L952
 17421              	.LVL1466:
 17422              	.L963:
 17423 05c2 4885DB   		testq	%rbx, %rbx
 17424 05c5 4989C4   		movq	%rax, %r12
 17425              	.LVL1467:
 17426 05c8 75E8     		jne	.L951
 17427 05ca EB8D     		jmp	.L927
 17428              	.LVL1468:
 17429              	.L964:
 17430 05cc 4989C4   		movq	%rax, %r12
 17431 05cf EBE1     		jmp	.L951
 17432              	.LBE19294:
 17433              	.LBE19293:
 17434              	.LBE19292:
 17435              	.LBE19298:
 17436              	.LBE19307:
 17437              	.LBE19310:
 17438              	.LBE19313:
 17439              		.cfi_endproc
 17440              	.LFE15594:
 17441              		.section	.gcc_except_table
 17442              	.LLSDA15594:
GAS LISTING /tmp/ccvmoMuv.s 			page 766


 17443 0187 FF       		.byte	0xff
 17444 0188 FF       		.byte	0xff
 17445 0189 01       		.byte	0x1
 17446 018a 3F       		.uleb128 .LLSDACSE15594-.LLSDACSB15594
 17447              	.LLSDACSB15594:
 17448 018b 16       		.uleb128 .LEHB74-.LFB15594
 17449 018c 05       		.uleb128 .LEHE74-.LEHB74
 17450 018d 00       		.uleb128 0
 17451 018e 00       		.uleb128 0
 17452 018f BD01     		.uleb128 .LEHB75-.LFB15594
 17453 0191 05       		.uleb128 .LEHE75-.LEHB75
 17454 0192 9A0B     		.uleb128 .L960-.LFB15594
 17455 0194 00       		.uleb128 0
 17456 0195 C703     		.uleb128 .LEHB76-.LFB15594
 17457 0197 05       		.uleb128 .LEHE76-.LEHB76
 17458 0198 F60A     		.uleb128 .L961-.LFB15594
 17459 019a 00       		.uleb128 0
 17460 019b 8808     		.uleb128 .LEHB77-.LFB15594
 17461 019d 02       		.uleb128 .LEHE77-.LEHB77
 17462 019e D60A     		.uleb128 .L962-.LFB15594
 17463 01a0 00       		.uleb128 0
 17464 01a1 A308     		.uleb128 .LEHB78-.LFB15594
 17465 01a3 02       		.uleb128 .LEHE78-.LEHB78
 17466 01a4 CC0B     		.uleb128 .L964-.LFB15594
 17467 01a6 00       		.uleb128 0
 17468 01a7 8C09     		.uleb128 .LEHB79-.LFB15594
 17469 01a9 02       		.uleb128 .LEHE79-.LEHB79
 17470 01aa 9A0B     		.uleb128 .L960-.LFB15594
 17471 01ac 00       		.uleb128 0
 17472 01ad 9B09     		.uleb128 .LEHB80-.LFB15594
 17473 01af 02       		.uleb128 .LEHE80-.LEHB80
 17474 01b0 C20B     		.uleb128 .L963-.LFB15594
 17475 01b2 00       		.uleb128 0
 17476 01b3 AB09     		.uleb128 .LEHB81-.LFB15594
 17477 01b5 02       		.uleb128 .LEHE81-.LEHB81
 17478 01b6 BD0B     		.uleb128 .L958-.LFB15594
 17479 01b8 00       		.uleb128 0
 17480 01b9 830A     		.uleb128 .LEHB82-.LFB15594
 17481 01bb 02       		.uleb128 .LEHE82-.LEHB82
 17482 01bc 9F0B     		.uleb128 .L959-.LFB15594
 17483 01be 00       		.uleb128 0
 17484 01bf B30A     		.uleb128 .LEHB83-.LFB15594
 17485 01c1 02       		.uleb128 .LEHE83-.LEHB83
 17486 01c2 9A0B     		.uleb128 .L960-.LFB15594
 17487 01c4 00       		.uleb128 0
 17488 01c5 F10A     		.uleb128 .LEHB84-.LFB15594
 17489 01c7 05       		.uleb128 .LEHE84-.LEHB84
 17490 01c8 00       		.uleb128 0
 17491 01c9 00       		.uleb128 0
 17492              	.LLSDACSE15594:
 17493              		.section	.text._ZNK5boost16exception_detail10clone_implINS0_10bad_alloc_EE5cloneEv,"axG",@progbits
 17495              		.set	.LTHUNK266,_ZNK5boost16exception_detail10clone_implINS0_10bad_alloc_EE5cloneEv
 17496 05d1 0F1F4400 		.p2align 4,,15
 17496      00662E0F 
 17496      1F840000 
 17496      000000
 17497              		.weak	_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_10bad_alloc_EE5cloneEv
GAS LISTING /tmp/ccvmoMuv.s 			page 767


 17499              	_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_10bad_alloc_EE5cloneEv:
 17500              	.LFB16035:
 486:/usr/include/boost/exception/exception.hpp ****                 {
 17501              		.loc 7 486 0
 17502              		.cfi_startproc
 17503 05e0 4C8B17   		movq	(%rdi), %r10
 17504 05e3 49037AE8 		addq	-24(%r10), %rdi
 17505 05e7 E914FAFF 		jmp	.LTHUNK266
 17505      FF
 17506              		.cfi_endproc
 17507              	.LFE16035:
 17509              		.section	.text._ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_functio
 17510              		.align 2
 17511              		.p2align 4,,15
 17512              		.weak	_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEE
 17514              	_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE5clone
 17515              	.LFB15580:
 486:/usr/include/boost/exception/exception.hpp ****                 {
 17516              		.loc 7 486 0
 17517              		.cfi_startproc
 17518              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 17519              		.cfi_lsda 0x1b,.LLSDA15580
 17520              	.LVL1469:
 17521 0000 4157     		pushq	%r15
 17522              		.cfi_def_cfa_offset 16
 17523              		.cfi_offset 15, -16
 17524 0002 4156     		pushq	%r14
 17525              		.cfi_def_cfa_offset 24
 17526              		.cfi_offset 14, -24
 17527 0004 4155     		pushq	%r13
 17528              		.cfi_def_cfa_offset 32
 17529              		.cfi_offset 13, -32
 17530 0006 4154     		pushq	%r12
 17531              		.cfi_def_cfa_offset 40
 17532              		.cfi_offset 12, -40
 17533 0008 4989FD   		movq	%rdi, %r13
 17534 000b 55       		pushq	%rbp
 17535              		.cfi_def_cfa_offset 48
 17536              		.cfi_offset 6, -48
 17537 000c 53       		pushq	%rbx
 17538              		.cfi_def_cfa_offset 56
 17539              		.cfi_offset 3, -56
 488:/usr/include/boost/exception/exception.hpp ****                 }
 17540              		.loc 7 488 0
 17541 000d BF400000 		movl	$64, %edi
 17541      00
 17542              	.LVL1470:
 17543              	.LBB19589:
 17544              	.LBB19590:
 17545              	.LBB19591:
 17546              	.LBB19592:
 17547              	.LBB19593:
 17548              		.loc 13 696 0
 17549 0012 4C8D2500 		leaq	16+_ZTVN5boost17bad_function_callE(%rip), %r12
 17549      000000
 17550              	.LBE19593:
 17551              	.LBE19592:
GAS LISTING /tmp/ccvmoMuv.s 			page 768


 17552              	.LBE19591:
 17553              	.LBE19590:
 17554              	.LBE19589:
 486:/usr/include/boost/exception/exception.hpp ****                 {
 17555              		.loc 7 486 0
 17556 0019 4883EC48 		subq	$72, %rsp
 17557              		.cfi_def_cfa_offset 128
 17558              	.LEHB85:
 488:/usr/include/boost/exception/exception.hpp ****                 }
 17559              		.loc 7 488 0
 17560 001d E8000000 		call	_Znwm@PLT
 17560      00
 17561              	.LVL1471:
 17562              	.LEHE85:
 17563 0022 4889C3   		movq	%rax, %rbx
 17564              	.LVL1472:
 17565              	.LBB19934:
 17566              	.LBB19931:
 17567              	.LBB19634:
 17568              	.LBB19635:
 415:/usr/include/boost/exception/exception.hpp ****             {
 17569              		.loc 7 415 0
 17570 0025 488D0500 		leaq	16+_ZTVN5boost16exception_detail10clone_baseE(%rip), %rax
 17570      000000
 17571              	.LVL1473:
 17572              	.LBE19635:
 17573              	.LBE19634:
 17574              	.LBB19637:
 17575              	.LBB19597:
 17576              	.LBB19594:
 17577              		.loc 13 696 0
 17578 002c 4C89EE   		movq	%r13, %rsi
 17579 002f 4889DF   		movq	%rbx, %rdi
 17580              	.LBE19594:
 17581              	.LBE19597:
 17582              	.LBE19637:
 17583              	.LBB19638:
 17584              	.LBB19636:
 415:/usr/include/boost/exception/exception.hpp ****             {
 17585              		.loc 7 415 0
 17586 0032 48894338 		movq	%rax, 56(%rbx)
 17587              	.LVL1474:
 17588              	.LBE19636:
 17589              	.LBE19638:
 17590              	.LBB19639:
 17591              	.LBB19598:
 17592              	.LBB19595:
 17593              		.loc 13 696 0
 17594 0036 E8000000 		call	_ZNSt13runtime_errorC2ERKS_@PLT
 17594      00
 17595              	.LVL1475:
 17596              	.LBE19595:
 17597              	.LBE19598:
 17598              	.LBB19599:
 17599              	.LBB19600:
 17600              	.LBB19601:
 17601              	.LBB19602:
GAS LISTING /tmp/ccvmoMuv.s 			page 769


  38:/usr/include/boost/exception/exception.hpp ****                 {
 17602              		.loc 7 38 0
 17603 003b 498B6D18 		movq	24(%r13), %rbp
 17604              	.LBE19602:
 17605              	.LBE19601:
 220:/usr/include/boost/exception/exception.hpp ****         {
 17606              		.loc 7 220 0
 17607 003f 488D0500 		leaq	16+_ZTVN5boost9exceptionE(%rip), %rax
 17607      000000
 17608              	.LBE19600:
 17609              	.LBE19599:
 17610              	.LBB19625:
 17611              	.LBB19596:
 17612              		.loc 13 696 0
 17613 0046 4C8923   		movq	%r12, (%rbx)
 17614              	.LVL1476:
 17615              	.LBE19596:
 17616              	.LBE19625:
 17617              	.LBB19626:
 17618              	.LBB19619:
 220:/usr/include/boost/exception/exception.hpp ****         {
 17619              		.loc 7 220 0
 17620 0049 48894310 		movq	%rax, 16(%rbx)
 17621              	.LVL1477:
 17622              	.LBB19616:
 17623              	.LBB19613:
 17624              	.LBB19603:
 17625              	.LBB19604:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 17626              		.loc 7 71 0
 17627 004d 4885ED   		testq	%rbp, %rbp
 17628              	.LBE19604:
 17629              	.LBE19603:
  38:/usr/include/boost/exception/exception.hpp ****                 {
 17630              		.loc 7 38 0
 17631 0050 48896B18 		movq	%rbp, 24(%rbx)
 17632              	.LVL1478:
 17633              	.LBB19610:
 17634              	.LBB19607:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 17635              		.loc 7 71 0
 17636 0054 0F844603 		je	.L992
 17636      0000
  72:/usr/include/boost/exception/exception.hpp ****                 }
 17637              		.loc 7 72 0
 17638 005a 488B4500 		movq	0(%rbp), %rax
 17639 005e 4C8D3500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7add_refEv(%rip), %r14
 17639      000000
 17640 0065 488B4018 		movq	24(%rax), %rax
 17641 0069 4C39F0   		cmpq	%r14, %rax
 17642 006c 0F85DE03 		jne	.L993
 17642      0000
 17643              	.LVL1479:
 17644              	.LBE19607:
 17645              	.LBE19610:
 17646              	.LBE19613:
 17647              	.LBE19616:
GAS LISTING /tmp/ccvmoMuv.s 			page 770


 220:/usr/include/boost/exception/exception.hpp ****         {
 17648              		.loc 7 220 0
 17649 0072 498B4520 		movq	32(%r13), %rax
 17650              	.LBB19617:
 17651              	.LBB19614:
 17652              	.LBB19611:
 17653              	.LBB19608:
 17654              	.LBB19605:
 17655              	.LBB19606:
 162:/usr/include/boost/exception/info.hpp ****                 }
 17656              		.loc 3 162 0
 17657 0076 83455801 		addl	$1, 88(%rbp)
 17658              	.LVL1480:
 17659              	.LBE19606:
 17660              	.LBE19605:
 17661              	.LBE19608:
 17662              	.LBE19611:
 17663              	.LBE19614:
 17664              	.LBE19617:
 220:/usr/include/boost/exception/exception.hpp ****         {
 17665              		.loc 7 220 0
 17666 007a 48894320 		movq	%rax, 32(%rbx)
 17667 007e 498B4528 		movq	40(%r13), %rax
 17668 0082 48894328 		movq	%rax, 40(%rbx)
 17669 0086 418B4530 		movl	48(%r13), %eax
 17670 008a 894330   		movl	%eax, 48(%rbx)
 17671              	.LVL1481:
 17672              	.LBE19619:
 17673              	.LBE19626:
 17674              	.LBE19639:
 465:/usr/include/boost/exception/exception.hpp ****                 {
 17675              		.loc 7 465 0
 17676 008d 488D0500 		leaq	24+_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_call
 17676      000000
 17677 0094 488903   		movq	%rax, (%rbx)
 17678 0097 488D0500 		leaq	80+_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_call
 17678      000000
 17679 009e 48894310 		movq	%rax, 16(%rbx)
 17680 00a2 488D0500 		leaq	136+_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_cal
 17680      000000
 17681 00a9 48894338 		movq	%rax, 56(%rbx)
 17682              	.LVL1482:
 17683              	.L994:
 17684              	.LBB19640:
 17685              	.LBB19641:
 17686              	.LBB19642:
 439:/usr/include/boost/exception/exception.hpp ****             a->throw_file_ = b->throw_file_;
 17687              		.loc 7 439 0
 17688 00ad 488B4500 		movq	0(%rbp), %rax
 17689 00b1 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl5cloneEv(%rip), %rdx
 17689      000000
 17690 00b8 488B4028 		movq	40(%rax), %rax
 17691 00bc 4839D0   		cmpq	%rdx, %rax
 17692 00bf 0F855B03 		jne	.L998
 17692      0000
 17693              	.LVL1483:
 17694              	.LBB19643:
GAS LISTING /tmp/ccvmoMuv.s 			page 771


 17695              	.LBB19644:
 181:/usr/include/boost/exception/info.hpp ****                 p.adopt(c);
 17696              		.loc 3 181 0
 17697 00c5 BF600000 		movl	$96, %edi
 17697      00
 17698              	.LBB19645:
 17699              	.LBB19646:
  28:/usr/include/boost/exception/exception.hpp ****                 {
 17700              		.loc 7 28 0
 17701 00ca 48C74424 		movq	$0, 24(%rsp)
 17701      18000000 
 17701      00
 17702              	.LVL1484:
 17703              	.LEHB86:
 17704              	.LBE19646:
 17705              	.LBE19645:
 181:/usr/include/boost/exception/info.hpp ****                 p.adopt(c);
 17706              		.loc 3 181 0
 17707 00d3 E8000000 		call	_Znwm@PLT
 17707      00
 17708              	.LVL1485:
 17709              	.LEHE86:
 17710              	.LBB19647:
 17711              	.LBB19648:
 17712              	.LBB19649:
 17713              	.LBB19650:
 17714              	.LBB19651:
 17715              	.LBB19652:
 17716              	.LBB19653:
 17717              	.LBB19654:
 632:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_right = &this->_M_header;
 17718              		.loc 19 632 0
 17719 00d8 4C8D7810 		leaq	16(%rax), %r15
 17720              	.LBE19654:
 17721              	.LBE19653:
 17722              	.LBE19652:
 17723              	.LBE19651:
 17724              	.LBE19650:
 17725              	.LBE19649:
  99:/usr/include/boost/exception/info.hpp ****                 {
 17726              		.loc 3 99 0
 17727 00dc 488D0D00 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rcx
 17727      000000
 17728              	.LBB19668:
 17729              	.LBB19665:
 17730              	.LBB19662:
 17731              	.LBB19659:
 602:/usr/include/c++/6/bits/stl_tree.h **** 	  { _M_initialize(); }
 17732              		.loc 19 602 0
 17733 00e3 C7401000 		movl	$0, 16(%rax)
 17733      000000
 17734 00ea 48C74018 		movq	$0, 24(%rax)
 17734      00000000 
 17735 00f2 48C74030 		movq	$0, 48(%rax)
 17735      00000000 
 17736              	.LBE19659:
 17737              	.LBE19662:
GAS LISTING /tmp/ccvmoMuv.s 			page 772


 17738              	.LBE19665:
 17739              	.LBE19668:
 17740              	.LBE19648:
 17741              	.LBE19647:
 181:/usr/include/boost/exception/info.hpp ****                 p.adopt(c);
 17742              		.loc 3 181 0
 17743 00fa 4989C4   		movq	%rax, %r12
 17744              	.LVL1486:
 17745              	.LBB19686:
 17746              	.LBB19684:
  99:/usr/include/boost/exception/info.hpp ****                 {
 17747              		.loc 3 99 0
 17748 00fd 488908   		movq	%rcx, (%rax)
 17749              	.LVL1487:
 17750              	.LBB19669:
 17751              	.LBB19666:
 17752              	.LBB19663:
 17753              	.LBB19660:
 17754              	.LBB19657:
 17755              	.LBB19655:
 632:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_right = &this->_M_header;
 17756              		.loc 19 632 0
 17757 0100 4C897820 		movq	%r15, 32(%rax)
 17758              	.LBE19655:
 17759              	.LBE19657:
 17760              	.LBE19660:
 17761              	.LBE19663:
 17762              	.LBE19666:
 17763              	.LBE19669:
 17764              	.LBB19670:
 17765              	.LBB19671:
 17766              	.LBB19672:
 142:/usr/include/c++/6/bits/basic_string.h **** #else
 17767              		.loc 10 142 0
 17768 0104 488D4048 		leaq	72(%rax), %rax
 17769              	.LVL1488:
 17770              	.LBE19672:
 17771              	.LBE19671:
 17772              	.LBE19670:
 17773              	.LBB19681:
 17774              	.LBB19667:
 17775              	.LBB19664:
 17776              	.LBB19661:
 17777              	.LBB19658:
 17778              	.LBB19656:
 633:/usr/include/c++/6/bits/stl_tree.h **** 	  }	    
 17779              		.loc 19 633 0
 17780 0108 4C8978E0 		movq	%r15, -32(%rax)
 17781              	.LVL1489:
 17782              	.LBE19656:
 17783              	.LBE19658:
 17784              	.LBE19661:
 17785              	.LBE19664:
 17786              	.LBE19667:
 17787              	.LBE19681:
 17788              	.LBB19682:
 17789              	.LBB19674:
GAS LISTING /tmp/ccvmoMuv.s 			page 773


 17790              	.LBB19675:
 17791              	.LBB19676:
 132:/usr/include/c++/6/bits/basic_string.h **** 
 17792              		.loc 10 132 0
 17793 010c 49C74424 		movq	$0, 64(%r12)
 17793      40000000 
 17793      00
 17794              	.LBE19676:
 17795              	.LBE19675:
 17796              	.LBE19674:
 17797              	.LBB19679:
 17798              	.LBB19673:
 142:/usr/include/c++/6/bits/basic_string.h **** #else
 17799              		.loc 10 142 0
 17800 0115 49894424 		movq	%rax, 56(%r12)
 17800      38
 17801              	.LVL1490:
 17802              	.LBE19673:
 17803              	.LBE19679:
 17804              	.LBE19682:
 17805              	.LBE19684:
 17806              	.LBE19686:
 17807              	.LBB19687:
 17808              	.LBB19688:
 17809              	.LBB19689:
 17810              	.LBB19690:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 17811              		.loc 7 78 0
 17812 011a 488B4424 		movq	24(%rsp), %rax
 17812      18
 17813              	.LBE19690:
 17814              	.LBE19689:
 17815              	.LBE19688:
 17816              	.LBE19687:
 17817              	.LBB19731:
 17818              	.LBB19685:
 17819              	.LBB19683:
 17820              	.LBB19680:
 17821              	.LBB19677:
 17822              	.LBB19678:
 243:/usr/include/c++/6/bits/char_traits.h **** 
 17823              		.loc 9 243 0
 17824 011f 41C64424 		movb	$0, 72(%r12)
 17824      4800
 17825              	.LVL1491:
 17826              	.LBE19678:
 17827              	.LBE19677:
 17828              	.LBE19680:
 17829              	.LBE19683:
  99:/usr/include/boost/exception/info.hpp ****                 {
 17830              		.loc 3 99 0
 17831 0125 41C74424 		movl	$0, 88(%r12)
 17831      58000000 
 17831      00
 17832              	.LVL1492:
 17833              	.LBE19685:
 17834              	.LBE19731:
GAS LISTING /tmp/ccvmoMuv.s 			page 774


 17835              	.LBB19732:
 17836              	.LBB19728:
 17837              	.LBB19719:
 17838              	.LBB19716:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 17839              		.loc 7 78 0
 17840 012e 4885C0   		testq	%rax, %rax
 17841 0131 7428     		je	.L1002
 17842 0133 488B10   		movq	(%rax), %rdx
 17843 0136 488D3500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rsi
 17843      000000
 17844 013d 488B5220 		movq	32(%rdx), %rdx
 17845 0141 4839F2   		cmpq	%rsi, %rdx
 17846 0144 0F85F603 		jne	.L1001
 17846      0000
 17847              	.LVL1493:
 17848              	.LBB19691:
 17849              	.LBB19692:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 17850              		.loc 3 168 0
 17851 014a 8B7058   		movl	88(%rax), %esi
 17852 014d 8D56FF   		leal	-1(%rsi), %edx
 17853 0150 85D2     		testl	%edx, %edx
 17854 0152 895058   		movl	%edx, 88(%rax)
 17855 0155 0F844503 		je	.L1072
 17855      0000
 17856              	.LVL1494:
 17857              	.L1002:
 17858              	.LBE19692:
 17859              	.LBE19691:
 17860              	.LBE19716:
 17861              	.LBE19719:
  54:/usr/include/boost/exception/exception.hpp ****                 add_ref();
 17862              		.loc 7 54 0
 17863 015b 4C896424 		movq	%r12, 24(%rsp)
 17863      18
 17864              	.LVL1495:
 17865              	.L1000:
 17866              	.LBB19720:
 17867              	.LBB19721:
 17868              	.LBB19722:
 17869              	.LBB19723:
 162:/usr/include/boost/exception/info.hpp ****                 }
 17870              		.loc 3 162 0
 17871 0160 41834424 		addl	$1, 88(%r12)
 17871      5801
 17872              	.LVL1496:
 17873              	.L1006:
 17874              	.LBE19723:
 17875              	.LBE19722:
 17876              	.LBE19721:
 17877              	.LBE19720:
 17878              	.LBE19728:
 17879              	.LBE19732:
 17880              	.LBB19733:
 17881              	.LBB19734:
 298:/usr/include/c++/6/bits/stl_map.h **** 	return *this;
GAS LISTING /tmp/ccvmoMuv.s 			page 775


 17882              		.loc 36 298 0
 17883 0166 498D7C24 		leaq	8(%r12), %rdi
 17883      08
 17884              	.LVL1497:
 17885 016b 488D4508 		leaq	8(%rbp), %rax
 17886              	.LVL1498:
 17887              	.LBB19735:
 17888              	.LBB19736:
1480:/usr/include/c++/6/bits/stl_tree.h **** 	{
 17889              		.loc 19 1480 0
 17890 016f 4839C7   		cmpq	%rax, %rdi
 17891 0172 0F84BC00 		je	.L1008
 17891      0000
 17892              	.LVL1499:
 17893              	.LBB19737:
 17894              	.LBB19738:
 17895              	.LBB19739:
 17896              	.LBB19740:
 380:/usr/include/c++/6/bits/stl_tree.h **** 	{
 17897              		.loc 19 380 0
 17898 0178 498B4424 		movq	24(%r12), %rax
 17898      18
 17899              	.LVL1500:
 17900 017d 498B5424 		movq	40(%r12), %rdx
 17900      28
 17901 0182 48897C24 		movq	%rdi, 48(%rsp)
 17901      30
 382:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 17902              		.loc 19 382 0
 17903 0187 4885C0   		testq	%rax, %rax
 380:/usr/include/c++/6/bits/stl_tree.h **** 	{
 17904              		.loc 19 380 0
 17905 018a 48894424 		movq	%rax, 32(%rsp)
 17905      20
 17906 018f 48895424 		movq	%rdx, 40(%rsp)
 17906      28
 382:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 17907              		.loc 19 382 0
 17908 0194 0F84B603 		je	.L1009
 17908      0000
 386:/usr/include/c++/6/bits/stl_tree.h **** 		_M_nodes = _M_nodes->_M_left;
 17909              		.loc 19 386 0
 17910 019a 488B5210 		movq	16(%rdx), %rdx
 384:/usr/include/c++/6/bits/stl_tree.h **** 
 17911              		.loc 19 384 0
 17912 019e 48C74008 		movq	$0, 8(%rax)
 17912      00000000 
 386:/usr/include/c++/6/bits/stl_tree.h **** 		_M_nodes = _M_nodes->_M_left;
 17913              		.loc 19 386 0
 17914 01a6 4885D2   		testq	%rdx, %rdx
 17915 01a9 7405     		je	.L1010
 387:/usr/include/c++/6/bits/stl_tree.h **** 	    }
 17916              		.loc 19 387 0
 17917 01ab 48895424 		movq	%rdx, 40(%rsp)
 17917      28
 17918              	.L1010:
 17919              	.LVL1501:
GAS LISTING /tmp/ccvmoMuv.s 			page 776


 17920              	.LBE19740:
 17921              	.LBE19739:
 17922              	.LBE19738:
 17923              	.LBB19743:
 17924              	.LBB19744:
 620:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_left = &this->_M_header;
 17925              		.loc 19 620 0
 17926 01b0 49C74424 		movq	$0, 24(%r12)
 17926      18000000 
 17926      00
 621:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_right = &this->_M_header;
 17927              		.loc 19 621 0
 17928 01b9 4D897C24 		movq	%r15, 32(%r12)
 17928      20
 622:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_node_count = 0;
 17929              		.loc 19 622 0
 17930 01be 4D897C24 		movq	%r15, 40(%r12)
 17930      28
 17931 01c3 488B7518 		movq	24(%rbp), %rsi
 623:/usr/include/c++/6/bits/stl_tree.h **** 	  }
 17932              		.loc 19 623 0
 17933 01c7 49C74424 		movq	$0, 48(%r12)
 17933      30000000 
 17933      00
 17934              	.LVL1502:
 17935              	.LBE19744:
 17936              	.LBE19743:
1502:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 17937              		.loc 19 1502 0
 17938 01d0 4885F6   		testq	%rsi, %rsi
 17939 01d3 7457     		je	.L1011
 17940              	.LVL1503:
1504:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_leftmost() = _S_minimum(_M_root());
 17941              		.loc 19 1504 0
 17942 01d5 488D4C24 		leaq	32(%rsp), %rcx
 17942      20
 17943 01da 4C89FA   		movq	%r15, %rdx
 17944              	.LEHB87:
 17945 01dd E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 17945      00
 17946              	.LVL1504:
 17947              	.LEHE87:
 17948 01e2 49894424 		movq	%rax, 24(%r12)
 17948      18
 17949              	.LVL1505:
 17950 01e7 4889C1   		movq	%rax, %rcx
 17951 01ea EB07     		jmp	.L1012
 17952              	.LVL1506:
 17953 01ec 0F1F4000 		.p2align 4,,10
 17954              		.p2align 3
 17955              	.L1045:
 17956              	.LBB19745:
 17957              	.LBB19746:
 17958              	.LBB19747:
 111:/usr/include/c++/6/bits/stl_tree.h ****       return __x;
 17959              		.loc 19 111 0
 17960 01f0 4889D1   		movq	%rdx, %rcx
GAS LISTING /tmp/ccvmoMuv.s 			page 777


 17961              	.LVL1507:
 17962              	.L1012:
 17963 01f3 488B5110 		movq	16(%rcx), %rdx
 17964 01f7 4885D2   		testq	%rdx, %rdx
 17965 01fa 75F4     		jne	.L1045
 17966              	.LVL1508:
 17967              	.LBE19747:
 17968              	.LBE19746:
 17969              	.LBE19745:
1505:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_rightmost() = _S_maximum(_M_root());
 17970              		.loc 19 1505 0
 17971 01fc 49894C24 		movq	%rcx, 32(%r12)
 17971      20
 17972              	.LVL1509:
 17973 0201 EB08     		jmp	.L1013
 17974              	.LVL1510:
 17975              		.p2align 4,,10
 17976 0203 0F1F4400 		.p2align 3
 17976      00
 17977              	.L1046:
 17978              	.LBB19748:
 17979              	.LBB19749:
 17980              	.LBB19750:
 125:/usr/include/c++/6/bits/stl_tree.h ****       return __x;
 17981              		.loc 19 125 0
 17982 0208 4889D0   		movq	%rdx, %rax
 17983              	.LVL1511:
 17984              	.L1013:
 17985 020b 488B5018 		movq	24(%rax), %rdx
 17986 020f 4885D2   		testq	%rdx, %rdx
 17987 0212 75F4     		jne	.L1046
 17988              	.LVL1512:
 17989              	.LBE19750:
 17990              	.LBE19749:
 17991              	.LBE19748:
1506:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_impl._M_node_count = __x._M_impl._M_node_count;
 17992              		.loc 19 1506 0
 17993 0214 49894424 		movq	%rax, 40(%r12)
 17993      28
1507:/usr/include/c++/6/bits/stl_tree.h **** 	    }
 17994              		.loc 19 1507 0
 17995 0219 488B4530 		movq	48(%rbp), %rax
 17996 021d 488B7C24 		movq	48(%rsp), %rdi
 17996      30
 17997 0222 49894424 		movq	%rax, 48(%r12)
 17997      30
 17998 0227 488B4424 		movq	32(%rsp), %rax
 17998      20
 17999              	.LVL1513:
 18000              	.L1011:
 18001              	.LBB19751:
 18002              	.LBB19752:
 398:/usr/include/c++/6/bits/stl_tree.h **** 
 18003              		.loc 19 398 0
 18004 022c 4889C6   		movq	%rax, %rsi
 18005 022f E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 18005      00
GAS LISTING /tmp/ccvmoMuv.s 			page 778


 18006              	.LVL1514:
 18007              	.L1008:
 18008              	.LBE19752:
 18009              	.LBE19751:
 18010              	.LBE19737:
 18011              	.LBE19736:
 18012              	.LBE19735:
 18013              	.LBE19734:
 18014              	.LBE19733:
 18015              	.LBE19644:
 18016              	.LBE19643:
 18017              	.LBB19774:
 18018              	.LBB19775:
  46:/usr/include/boost/exception/exception.hpp ****                 return *this;
 18019              		.loc 7 46 0
 18020 0234 488B6C24 		movq	24(%rsp), %rbp
 18020      18
 18021              	.LVL1515:
 18022              	.LBB19776:
 18023              	.LBB19777:
 18024              	.LBB19778:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 18025              		.loc 7 71 0
 18026 0239 4885ED   		testq	%rbp, %rbp
 18027 023c 743C     		je	.L1022
  72:/usr/include/boost/exception/exception.hpp ****                 }
 18028              		.loc 7 72 0
 18029 023e 488B4500 		movq	0(%rbp), %rax
 18030 0242 488B4018 		movq	24(%rax), %rax
 18031 0246 4C39F0   		cmpq	%r14, %rax
 18032 0249 0F85C902 		jne	.L1020
 18032      0000
 18033              	.LVL1516:
 18034              	.LBB19779:
 18035              	.LBB19780:
 162:/usr/include/boost/exception/info.hpp ****                 }
 18036              		.loc 3 162 0
 18037 024f 83455801 		addl	$1, 88(%rbp)
 18038              	.LVL1517:
 18039 0253 4989EC   		movq	%rbp, %r12
 18040              	.LVL1518:
 18041              	.L1021:
 18042              	.LBE19780:
 18043              	.LBE19779:
 18044              	.LBE19778:
 18045              	.LBE19777:
 18046              	.LBE19776:
 18047              	.LBE19775:
 18048              	.LBE19774:
 18049              	.LBB19785:
 18050              	.LBB19786:
 18051              	.LBB19787:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 18052              		.loc 7 78 0
 18053 0256 498B0424 		movq	(%r12), %rax
 18054 025a 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 18054      000000
GAS LISTING /tmp/ccvmoMuv.s 			page 779


 18055 0261 488B4020 		movq	32(%rax), %rax
 18056 0265 4839D0   		cmpq	%rdx, %rax
 18057 0268 0F85C202 		jne	.L1023
 18057      0000
 18058              	.LVL1519:
 18059              	.LBB19788:
 18060              	.LBB19789:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 18061              		.loc 3 168 0
 18062 026e 41836C24 		subl	$1, 88(%r12)
 18062      5801
 18063 0274 0F845E01 		je	.L1073
 18063      0000
 18064              	.LVL1520:
 18065              	.L1022:
 18066 027a 498B5528 		movq	40(%r13), %rdx
 18067 027e 418B4530 		movl	48(%r13), %eax
 18068 0282 498B4D20 		movq	32(%r13), %rcx
 18069              	.LVL1521:
 18070              	.L995:
 18071              	.LBE19789:
 18072              	.LBE19788:
 18073              	.LBE19787:
 18074              	.LBE19786:
 18075              	.LBE19785:
 18076              	.LBE19642:
 18077              	.LBB19823:
 18078              	.LBB19824:
 18079              	.LBB19825:
 18080              	.LBB19826:
 18081              	.LBB19827:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 18082              		.loc 7 78 0
 18083 0286 4C8B6318 		movq	24(%rbx), %r12
 18084              	.LBE19827:
 18085              	.LBE19826:
 18086              	.LBE19825:
 18087              	.LBE19824:
 18088              	.LBE19823:
 440:/usr/include/boost/exception/exception.hpp ****             a->throw_line_ = b->throw_line_;
 18089              		.loc 7 440 0
 18090 028a 48895328 		movq	%rdx, 40(%rbx)
 441:/usr/include/boost/exception/exception.hpp ****             a->throw_function_ = b->throw_function_;
 18091              		.loc 7 441 0
 18092 028e 894330   		movl	%eax, 48(%rbx)
 442:/usr/include/boost/exception/exception.hpp ****             a->data_ = data;
 18093              		.loc 7 442 0
 18094 0291 48894B20 		movq	%rcx, 32(%rbx)
 18095              	.LVL1522:
 18096              	.LBB19872:
 18097              	.LBB19868:
 18098              	.LBB19864:
 18099              	.LBB19853:
 18100              	.LBB19850:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 18101              		.loc 7 78 0
 18102 0295 4D85E4   		testq	%r12, %r12
GAS LISTING /tmp/ccvmoMuv.s 			page 780


 18103 0298 7424     		je	.L1026
 18104 029a 498B0424 		movq	(%r12), %rax
 18105 029e 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 18105      000000
 18106 02a5 488B4020 		movq	32(%rax), %rax
 18107 02a9 4839D0   		cmpq	%rdx, %rax
 18108 02ac 0F855602 		jne	.L1027
 18108      0000
 18109              	.LVL1523:
 18110              	.LBB19828:
 18111              	.LBB19829:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 18112              		.loc 3 168 0
 18113 02b2 41836C24 		subl	$1, 88(%r12)
 18113      5801
 18114 02b8 0F84A200 		je	.L1074
 18114      0000
 18115              	.LVL1524:
 18116              	.L1026:
 18117              	.LBE19829:
 18118              	.LBE19828:
 18119              	.LBE19850:
 18120              	.LBE19853:
 18121              	.LBB19854:
 18122              	.LBB19855:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 18123              		.loc 7 71 0
 18124 02be 4885ED   		testq	%rbp, %rbp
 18125              	.LBE19855:
 18126              	.LBE19854:
  54:/usr/include/boost/exception/exception.hpp ****                 add_ref();
 18127              		.loc 7 54 0
 18128 02c1 48896B18 		movq	%rbp, 24(%rbx)
 18129              	.LVL1525:
 18130              	.LBB19860:
 18131              	.LBB19858:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 18132              		.loc 7 71 0
 18133 02c5 7436     		je	.L1033
  72:/usr/include/boost/exception/exception.hpp ****                 }
 18134              		.loc 7 72 0
 18135 02c7 488B4500 		movq	0(%rbp), %rax
 18136 02cb 488D0D00 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7add_refEv(%rip), %rcx
 18136      000000
 18137 02d2 488B5018 		movq	24(%rax), %rdx
 18138 02d6 4839CA   		cmpq	%rcx, %rdx
 18139 02d9 0F856101 		jne	.L1034
 18139      0000
 18140              	.LVL1526:
 18141              	.LBB19856:
 18142              	.LBB19857:
 162:/usr/include/boost/exception/info.hpp ****                 }
 18143              		.loc 3 162 0
 18144 02df 83455801 		addl	$1, 88(%rbp)
 18145              	.LVL1527:
 18146              	.L1035:
 18147              	.LBE19857:
GAS LISTING /tmp/ccvmoMuv.s 			page 781


 18148              	.LBE19856:
 18149              	.LBE19858:
 18150              	.LBE19860:
 18151              	.LBE19864:
 18152              	.LBE19868:
 18153              	.LBE19872:
 18154              	.LBB19873:
 18155              	.LBB19874:
 18156              	.LBB19875:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 18157              		.loc 7 78 0
 18158 02e3 488B4020 		movq	32(%rax), %rax
 18159 02e7 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 18159      000000
 18160 02ee 4839D0   		cmpq	%rdx, %rax
 18161 02f1 0F853901 		jne	.L1075
 18161      0000
 18162              	.LVL1528:
 18163              	.LBB19876:
 18164              	.LBB19877:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 18165              		.loc 3 168 0
 18166 02f7 836D5801 		subl	$1, 88(%rbp)
 18167 02fb 7423     		je	.L1076
 18168              	.LVL1529:
 18169              	.L1033:
 18170              	.LBE19877:
 18171              	.LBE19876:
 18172              	.LBE19875:
 18173              	.LBE19874:
 18174              	.LBE19873:
 18175              	.LBE19641:
 18176              	.LBE19640:
 18177              	.LBE19931:
 18178              	.LBE19934:
 488:/usr/include/boost/exception/exception.hpp ****                 }
 18179              		.loc 7 488 0
 18180 02fd 488B03   		movq	(%rbx), %rax
 18181 0300 480358E8 		addq	-24(%rax), %rbx
 489:/usr/include/boost/exception/exception.hpp **** 
 18182              		.loc 7 489 0
 18183 0304 4883C448 		addq	$72, %rsp
 18184              		.cfi_remember_state
 18185              		.cfi_def_cfa_offset 56
 488:/usr/include/boost/exception/exception.hpp ****                 }
 18186              		.loc 7 488 0
 18187 0308 4889D8   		movq	%rbx, %rax
 489:/usr/include/boost/exception/exception.hpp **** 
 18188              		.loc 7 489 0
 18189 030b 5B       		popq	%rbx
 18190              		.cfi_def_cfa_offset 48
 18191 030c 5D       		popq	%rbp
 18192              		.cfi_def_cfa_offset 40
 18193 030d 415C     		popq	%r12
 18194              		.cfi_def_cfa_offset 32
 18195 030f 415D     		popq	%r13
 18196              		.cfi_def_cfa_offset 24
GAS LISTING /tmp/ccvmoMuv.s 			page 782


 18197              	.LVL1530:
 18198 0311 415E     		popq	%r14
 18199              		.cfi_def_cfa_offset 16
 18200 0313 415F     		popq	%r15
 18201              		.cfi_def_cfa_offset 8
 18202 0315 C3       		ret
 18203              	.LVL1531:
 18204 0316 662E0F1F 		.p2align 4,,10
 18204      84000000 
 18204      0000
 18205              		.p2align 3
 18206              	.L1076:
 18207              		.cfi_restore_state
 18208              	.LBB19935:
 18209              	.LBB19932:
 18210              	.LBB19920:
 18211              	.LBB19915:
 18212              	.LBB19902:
 18213              	.LBB19900:
 18214              	.LBB19898:
 18215              	.LBB19897:
 18216              	.LBB19896:
 18217              	.LBB19878:
 18218              	.LBB19879:
 104:/usr/include/boost/exception/info.hpp ****                 }
 18219              		.loc 3 104 0
 18220 0320 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 18220      000000
 18221 0327 488B7D38 		movq	56(%rbp), %rdi
 18222 032b 48894500 		movq	%rax, 0(%rbp)
 18223              	.LVL1532:
 18224              	.LBB19880:
 18225              	.LBB19881:
 18226              	.LBB19882:
 18227              	.LBB19883:
 18228              	.LBB19884:
 18229              	.LBB19885:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 18230              		.loc 10 152 0
 18231 032f 488D4548 		leaq	72(%rbp), %rax
 18232              	.LBE19885:
 18233              	.LBE19884:
 18234              	.LBE19883:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 18235              		.loc 10 180 0
 18236 0333 4839C7   		cmpq	%rax, %rdi
 18237 0336 7405     		je	.L1038
 18238              	.LVL1533:
 18239              	.LBB19886:
 18240              	.LBB19887:
 18241              	.LBB19888:
 18242              	.LBB19889:
 18243              		.loc 12 110 0
 18244 0338 E8000000 		call	_ZdlPv@PLT
 18244      00
 18245              	.LVL1534:
 18246              	.L1038:
GAS LISTING /tmp/ccvmoMuv.s 			page 783


 18247              	.LBE19889:
 18248              	.LBE19888:
 18249              	.LBE19887:
 18250              	.LBE19886:
 18251              	.LBE19882:
 18252              	.LBE19881:
 18253              	.LBE19880:
 18254              	.LBB19890:
 18255              	.LBB19891:
 18256              	.LBB19892:
 18257              	.LBB19893:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 18258              		.loc 19 873 0
 18259 033d 488B7518 		movq	24(%rbp), %rsi
 18260              	.LBE19893:
 18261              	.LBE19892:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 18262              		.loc 36 96 0
 18263 0341 488D7D08 		leaq	8(%rbp), %rdi
 18264              	.LVL1535:
 18265              	.LBB19895:
 18266              	.LBB19894:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 18267              		.loc 19 873 0
 18268 0345 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 18268      00
 18269              	.LVL1536:
 18270              	.LBE19894:
 18271              	.LBE19895:
 18272              	.LBE19891:
 18273              	.LBE19890:
 18274              	.LBE19879:
 18275              	.LBE19878:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 18276              		.loc 3 172 0
 18277 034a BE600000 		movl	$96, %esi
 18277      00
 18278 034f 4889EF   		movq	%rbp, %rdi
 18279 0352 E8000000 		call	_ZdlPvm@PLT
 18279      00
 18280              	.LVL1537:
 18281 0357 EBA4     		jmp	.L1033
 18282              	.LVL1538:
 18283 0359 0F1F8000 		.p2align 4,,10
 18283      000000
 18284              		.p2align 3
 18285              	.L1074:
 18286              	.LBE19896:
 18287              	.LBE19897:
 18288              	.LBE19898:
 18289              	.LBE19900:
 18290              	.LBE19902:
 18291              	.LBB19903:
 18292              	.LBB19869:
 18293              	.LBB19865:
 18294              	.LBB19861:
 18295              	.LBB19851:
GAS LISTING /tmp/ccvmoMuv.s 			page 784


 18296              	.LBB19849:
 18297              	.LBB19848:
 18298              	.LBB19830:
 18299              	.LBB19831:
 104:/usr/include/boost/exception/info.hpp ****                 }
 18300              		.loc 3 104 0
 18301 0360 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 18301      000000
 18302 0367 498B7C24 		movq	56(%r12), %rdi
 18302      38
 18303 036c 49890424 		movq	%rax, (%r12)
 18304              	.LVL1539:
 18305              	.LBB19832:
 18306              	.LBB19833:
 18307              	.LBB19834:
 18308              	.LBB19835:
 18309              	.LBB19836:
 18310              	.LBB19837:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 18311              		.loc 10 152 0
 18312 0370 498D4424 		leaq	72(%r12), %rax
 18312      48
 18313              	.LBE19837:
 18314              	.LBE19836:
 18315              	.LBE19835:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 18316              		.loc 10 180 0
 18317 0375 4839C7   		cmpq	%rax, %rdi
 18318 0378 7405     		je	.L1029
 18319              	.LVL1540:
 18320              	.LBB19838:
 18321              	.LBB19839:
 18322              	.LBB19840:
 18323              	.LBB19841:
 18324              		.loc 12 110 0
 18325 037a E8000000 		call	_ZdlPv@PLT
 18325      00
 18326              	.LVL1541:
 18327              	.L1029:
 18328              	.LBE19841:
 18329              	.LBE19840:
 18330              	.LBE19839:
 18331              	.LBE19838:
 18332              	.LBE19834:
 18333              	.LBE19833:
 18334              	.LBE19832:
 18335              	.LBB19842:
 18336              	.LBB19843:
 18337              	.LBB19844:
 18338              	.LBB19845:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 18339              		.loc 19 873 0
 18340 037f 498B7424 		movq	24(%r12), %rsi
 18340      18
 18341              	.LBE19845:
 18342              	.LBE19844:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
GAS LISTING /tmp/ccvmoMuv.s 			page 785


 18343              		.loc 36 96 0
 18344 0384 498D7C24 		leaq	8(%r12), %rdi
 18344      08
 18345              	.LVL1542:
 18346              	.LBB19847:
 18347              	.LBB19846:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 18348              		.loc 19 873 0
 18349 0389 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 18349      00
 18350              	.LVL1543:
 18351              	.LBE19846:
 18352              	.LBE19847:
 18353              	.LBE19843:
 18354              	.LBE19842:
 18355              	.LBE19831:
 18356              	.LBE19830:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 18357              		.loc 3 172 0
 18358 038e BE600000 		movl	$96, %esi
 18358      00
 18359 0393 4C89E7   		movq	%r12, %rdi
 18360 0396 E8000000 		call	_ZdlPvm@PLT
 18360      00
 18361              	.LVL1544:
 18362 039b E91EFFFF 		jmp	.L1026
 18362      FF
 18363              	.LVL1545:
 18364              		.p2align 4,,10
 18365              		.p2align 3
 18366              	.L992:
 18367              	.LBE19848:
 18368              	.LBE19849:
 18369              	.LBE19851:
 18370              	.LBE19861:
 18371              	.LBE19865:
 18372              	.LBE19869:
 18373              	.LBE19903:
 18374              	.LBE19915:
 18375              	.LBE19920:
 465:/usr/include/boost/exception/exception.hpp ****                 {
 18376              		.loc 7 465 0
 18377 03a0 488D3500 		leaq	24+_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_call
 18377      000000
 18378              	.LBB19921:
 18379              	.LBB19627:
 18380              	.LBB19620:
 220:/usr/include/boost/exception/exception.hpp ****         {
 18381              		.loc 7 220 0
 18382 03a7 498B4D20 		movq	32(%r13), %rcx
 18383 03ab 498B5528 		movq	40(%r13), %rdx
 18384 03af 418B4530 		movl	48(%r13), %eax
 18385              	.LVL1546:
 18386              	.LBE19620:
 18387              	.LBE19627:
 18388              	.LBE19921:
 465:/usr/include/boost/exception/exception.hpp ****                 {
GAS LISTING /tmp/ccvmoMuv.s 			page 786


 18389              		.loc 7 465 0
 18390 03b3 488933   		movq	%rsi, (%rbx)
 18391 03b6 488D3500 		leaq	80+_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_call
 18391      000000
 18392 03bd 48897310 		movq	%rsi, 16(%rbx)
 18393 03c1 488D3500 		leaq	136+_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_cal
 18393      000000
 18394 03c8 48897338 		movq	%rsi, 56(%rbx)
 18395              	.LVL1547:
 18396 03cc E9B5FEFF 		jmp	.L995
 18396      FF
 18397              	.LVL1548:
 18398              		.p2align 4,,10
 18399 03d1 0F1F8000 		.p2align 3
 18399      000000
 18400              	.L1073:
 18401              	.LBB19922:
 18402              	.LBB19916:
 18403              	.LBB19904:
 18404              	.LBB19814:
 18405              	.LBB19812:
 18406              	.LBB19810:
 18407              	.LBB19809:
 18408              	.LBB19808:
 18409              	.LBB19790:
 18410              	.LBB19791:
 104:/usr/include/boost/exception/info.hpp ****                 }
 18411              		.loc 3 104 0
 18412 03d8 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 18412      000000
 18413 03df 498B7C24 		movq	56(%r12), %rdi
 18413      38
 18414 03e4 49890424 		movq	%rax, (%r12)
 18415              	.LVL1549:
 18416              	.LBB19792:
 18417              	.LBB19793:
 18418              	.LBB19794:
 18419              	.LBB19795:
 18420              	.LBB19796:
 18421              	.LBB19797:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 18422              		.loc 10 152 0
 18423 03e8 498D4424 		leaq	72(%r12), %rax
 18423      48
 18424              	.LBE19797:
 18425              	.LBE19796:
 18426              	.LBE19795:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 18427              		.loc 10 180 0
 18428 03ed 4839C7   		cmpq	%rax, %rdi
 18429 03f0 7405     		je	.L1024
 18430              	.LVL1550:
 18431              	.LBB19798:
 18432              	.LBB19799:
 18433              	.LBB19800:
 18434              	.LBB19801:
 18435              		.loc 12 110 0
GAS LISTING /tmp/ccvmoMuv.s 			page 787


 18436 03f2 E8000000 		call	_ZdlPv@PLT
 18436      00
 18437              	.LVL1551:
 18438              	.L1024:
 18439              	.LBE19801:
 18440              	.LBE19800:
 18441              	.LBE19799:
 18442              	.LBE19798:
 18443              	.LBE19794:
 18444              	.LBE19793:
 18445              	.LBE19792:
 18446              	.LBB19802:
 18447              	.LBB19803:
 18448              	.LBB19804:
 18449              	.LBB19805:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 18450              		.loc 19 873 0
 18451 03f7 498B7424 		movq	24(%r12), %rsi
 18451      18
 18452              	.LBE19805:
 18453              	.LBE19804:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 18454              		.loc 36 96 0
 18455 03fc 498D7C24 		leaq	8(%r12), %rdi
 18455      08
 18456              	.LVL1552:
 18457              	.LBB19807:
 18458              	.LBB19806:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 18459              		.loc 19 873 0
 18460 0401 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 18460      00
 18461              	.LVL1553:
 18462              	.LBE19806:
 18463              	.LBE19807:
 18464              	.LBE19803:
 18465              	.LBE19802:
 18466              	.LBE19791:
 18467              	.LBE19790:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 18468              		.loc 3 172 0
 18469 0406 BE600000 		movl	$96, %esi
 18469      00
 18470 040b 4C89E7   		movq	%r12, %rdi
 18471 040e E8000000 		call	_ZdlPvm@PLT
 18471      00
 18472              	.LVL1554:
 18473 0413 E962FEFF 		jmp	.L1022
 18473      FF
 18474              	.LVL1555:
 18475 0418 0F1F8400 		.p2align 4,,10
 18475      00000000 
 18476              		.p2align 3
 18477              	.L998:
 18478              	.LBE19808:
 18479              	.LBE19809:
 18480              	.LBE19810:
GAS LISTING /tmp/ccvmoMuv.s 			page 788


 18481              	.LBE19812:
 18482              	.LBE19814:
 439:/usr/include/boost/exception/exception.hpp ****             a->throw_file_ = b->throw_file_;
 18483              		.loc 7 439 0
 18484 0420 488D7C24 		leaq	24(%rsp), %rdi
 18484      18
 18485 0425 4889EE   		movq	%rbp, %rsi
 18486              	.LEHB88:
 18487 0428 FFD0     		call	*%rax
 18488              	.LVL1556:
 18489              	.LEHE88:
 18490 042a E905FEFF 		jmp	.L1008
 18490      FF
 18491              	.LVL1557:
 18492 042f 90       		.p2align 4,,10
 18493              		.p2align 3
 18494              	.L1075:
 18495              	.LBE19904:
 18496              	.LBB19905:
 18497              	.LBB19901:
 18498              	.LBB19899:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 18499              		.loc 7 78 0
 18500 0430 4889EF   		movq	%rbp, %rdi
 18501 0433 FFD0     		call	*%rax
 18502              	.LVL1558:
 18503 0435 E9C3FEFF 		jmp	.L1033
 18503      FF
 18504              	.LVL1559:
 18505 043a 660F1F44 		.p2align 4,,10
 18505      0000
 18506              		.p2align 3
 18507              	.L1034:
 18508              	.LBE19899:
 18509              	.LBE19901:
 18510              	.LBE19905:
 18511              	.LBB19906:
 18512              	.LBB19870:
 18513              	.LBB19866:
 18514              	.LBB19862:
 18515              	.LBB19859:
  72:/usr/include/boost/exception/exception.hpp ****                 }
 18516              		.loc 7 72 0
 18517 0440 4889EF   		movq	%rbp, %rdi
 18518              	.LEHB89:
 18519 0443 FFD2     		call	*%rdx
 18520              	.LVL1560:
 18521              	.LEHE89:
 18522 0445 488B4500 		movq	0(%rbp), %rax
 18523 0449 E995FEFF 		jmp	.L1035
 18523      FF
 18524              	.LVL1561:
 18525 044e 6690     		.p2align 4,,10
 18526              		.p2align 3
 18527              	.L993:
 18528              	.LBE19859:
 18529              	.LBE19862:
GAS LISTING /tmp/ccvmoMuv.s 			page 789


 18530              	.LBE19866:
 18531              	.LBE19870:
 18532              	.LBE19906:
 18533              	.LBE19916:
 18534              	.LBE19922:
 18535              	.LBB19923:
 18536              	.LBB19628:
 18537              	.LBB19621:
 18538              	.LBB19618:
 18539              	.LBB19615:
 18540              	.LBB19612:
 18541              	.LBB19609:
 18542 0450 4889EF   		movq	%rbp, %rdi
 18543              	.LEHB90:
 18544 0453 FFD0     		call	*%rax
 18545              	.LVL1562:
 18546              	.LEHE90:
 18547              	.LBE19609:
 18548              	.LBE19612:
 18549              	.LBE19615:
 18550              	.LBE19618:
 18551              	.LBE19621:
 18552              	.LBE19628:
 18553              	.LBE19923:
 465:/usr/include/boost/exception/exception.hpp ****                 {
 18554              		.loc 7 465 0
 18555 0455 488D3500 		leaq	24+_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_call
 18555      000000
 18556 045c 498B6D18 		movq	24(%r13), %rbp
 18557              	.LVL1563:
 18558              	.LBB19924:
 18559              	.LBB19629:
 18560              	.LBB19622:
 220:/usr/include/boost/exception/exception.hpp ****         {
 18561              		.loc 7 220 0
 18562 0460 498B4D20 		movq	32(%r13), %rcx
 18563 0464 498B5528 		movq	40(%r13), %rdx
 18564 0468 418B4530 		movl	48(%r13), %eax
 18565              	.LBE19622:
 18566              	.LBE19629:
 18567              	.LBE19924:
 465:/usr/include/boost/exception/exception.hpp ****                 {
 18568              		.loc 7 465 0
 18569 046c 488933   		movq	%rsi, (%rbx)
 18570 046f 488D3500 		leaq	80+_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_call
 18570      000000
 18571              	.LBB19925:
 18572              	.LBB19917:
 18573              	.LBB19907:
 438:/usr/include/boost/exception/exception.hpp ****                 data = d->clone();
 18574              		.loc 7 438 0
 18575 0476 4885ED   		testq	%rbp, %rbp
 18576              	.LBE19907:
 18577              	.LBE19917:
 18578              	.LBE19925:
 18579              	.LBB19926:
 18580              	.LBB19630:
GAS LISTING /tmp/ccvmoMuv.s 			page 790


 18581              	.LBB19623:
 220:/usr/include/boost/exception/exception.hpp ****         {
 18582              		.loc 7 220 0
 18583 0479 48894B20 		movq	%rcx, 32(%rbx)
 18584              	.LBE19623:
 18585              	.LBE19630:
 18586              	.LBE19926:
 465:/usr/include/boost/exception/exception.hpp ****                 {
 18587              		.loc 7 465 0
 18588 047d 48897310 		movq	%rsi, 16(%rbx)
 18589 0481 488D3500 		leaq	136+_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_cal
 18589      000000
 18590              	.LBB19927:
 18591              	.LBB19631:
 18592              	.LBB19624:
 220:/usr/include/boost/exception/exception.hpp ****         {
 18593              		.loc 7 220 0
 18594 0488 48895328 		movq	%rdx, 40(%rbx)
 18595 048c 894330   		movl	%eax, 48(%rbx)
 18596              	.LVL1564:
 18597              	.LBE19624:
 18598              	.LBE19631:
 18599              	.LBE19927:
 465:/usr/include/boost/exception/exception.hpp ****                 {
 18600              		.loc 7 465 0
 18601 048f 48897338 		movq	%rsi, 56(%rbx)
 18602              	.LVL1565:
 18603              	.LBB19928:
 18604              	.LBB19918:
 18605              	.LBB19908:
 438:/usr/include/boost/exception/exception.hpp ****                 data = d->clone();
 18606              		.loc 7 438 0
 18607 0493 0F8514FC 		jne	.L994
 18607      FFFF
 18608 0499 E9E8FDFF 		jmp	.L995
 18608      FF
 18609              	.LVL1566:
 18610 049e 6690     		.p2align 4,,10
 18611              		.p2align 3
 18612              	.L1072:
 18613 04a0 488B7838 		movq	56(%rax), %rdi
 18614              	.LBB19815:
 18615              	.LBB19771:
 18616              	.LBB19764:
 18617              	.LBB19729:
 18618              	.LBB19725:
 18619              	.LBB19717:
 18620              	.LBB19715:
 18621              	.LBB19714:
 18622              	.LBB19693:
 18623              	.LBB19694:
 18624              	.LBB19695:
 18625              	.LBB19696:
 18626              	.LBB19697:
 18627              	.LBB19698:
 18628              	.LBB19699:
 18629              	.LBB19700:
GAS LISTING /tmp/ccvmoMuv.s 			page 791


 152:/usr/include/c++/6/bits/basic_string.h **** #else
 18630              		.loc 10 152 0
 18631 04a4 488D5048 		leaq	72(%rax), %rdx
 18632              	.LBE19700:
 18633              	.LBE19699:
 18634              	.LBE19698:
 18635              	.LBE19697:
 18636              	.LBE19696:
 18637              	.LBE19695:
 104:/usr/include/boost/exception/info.hpp ****                 }
 18638              		.loc 3 104 0
 18639 04a8 488908   		movq	%rcx, (%rax)
 18640              	.LVL1567:
 18641              	.LBB19707:
 18642              	.LBB19706:
 18643              	.LBB19705:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 18644              		.loc 10 180 0
 18645 04ab 4839D7   		cmpq	%rdx, %rdi
 18646 04ae 740F     		je	.L1003
 18647 04b0 48894424 		movq	%rax, 8(%rsp)
 18647      08
 18648              	.LVL1568:
 18649              	.LBB19701:
 18650              	.LBB19702:
 18651              	.LBB19703:
 18652              	.LBB19704:
 18653              		.loc 12 110 0
 18654 04b5 E8000000 		call	_ZdlPv@PLT
 18654      00
 18655              	.LVL1569:
 18656 04ba 488B4424 		movq	8(%rsp), %rax
 18656      08
 18657              	.LVL1570:
 18658              	.L1003:
 18659              	.LBE19704:
 18660              	.LBE19703:
 18661              	.LBE19702:
 18662              	.LBE19701:
 18663              	.LBE19705:
 18664              	.LBE19706:
 18665              	.LBE19707:
 18666              	.LBB19708:
 18667              	.LBB19709:
 18668              	.LBB19710:
 18669              	.LBB19711:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 18670              		.loc 19 873 0
 18671 04bf 488B7018 		movq	24(%rax), %rsi
 18672              	.LBE19711:
 18673              	.LBE19710:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 18674              		.loc 36 96 0
 18675 04c3 488D7808 		leaq	8(%rax), %rdi
 18676              	.LVL1571:
 18677 04c7 48894424 		movq	%rax, 8(%rsp)
 18677      08
GAS LISTING /tmp/ccvmoMuv.s 			page 792


 18678              	.LBB19713:
 18679              	.LBB19712:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 18680              		.loc 19 873 0
 18681 04cc E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 18681      00
 18682              	.LVL1572:
 18683              	.LBE19712:
 18684              	.LBE19713:
 18685              	.LBE19709:
 18686              	.LBE19708:
 18687              	.LBE19694:
 18688              	.LBE19693:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 18689              		.loc 3 172 0
 18690 04d1 488B4424 		movq	8(%rsp), %rax
 18690      08
 18691 04d6 BE600000 		movl	$96, %esi
 18691      00
 18692 04db 4889C7   		movq	%rax, %rdi
 18693 04de E8000000 		call	_ZdlPvm@PLT
 18693      00
 18694              	.LVL1573:
 18695 04e3 498B0424 		movq	(%r12), %rax
 18696 04e7 488B4018 		movq	24(%rax), %rax
 18697              	.LVL1574:
 18698              	.L1004:
 18699 04eb 4C39F0   		cmpq	%r14, %rax
 18700              	.LBE19714:
 18701              	.LBE19715:
 18702              	.LBE19717:
 18703              	.LBE19725:
  54:/usr/include/boost/exception/exception.hpp ****                 add_ref();
 18704              		.loc 7 54 0
 18705 04ee 4C896424 		movq	%r12, 24(%rsp)
 18705      18
 18706              	.LVL1575:
 18707 04f3 0F8467FC 		je	.L1000
 18707      FFFF
 18708              	.LBB19726:
 18709              	.LBB19724:
  72:/usr/include/boost/exception/exception.hpp ****                 }
 18710              		.loc 7 72 0
 18711 04f9 4C89E7   		movq	%r12, %rdi
 18712              	.LEHB91:
 18713 04fc FFD0     		call	*%rax
 18714              	.LVL1576:
 18715              	.LEHE91:
 18716 04fe E963FCFF 		jmp	.L1006
 18716      FF
 18717              	.LVL1577:
 18718              		.p2align 4,,10
 18719 0503 0F1F4400 		.p2align 3
 18719      00
 18720              	.L1027:
 18721              	.LBE19724:
 18722              	.LBE19726:
GAS LISTING /tmp/ccvmoMuv.s 			page 793


 18723              	.LBE19729:
 18724              	.LBE19764:
 18725              	.LBE19771:
 18726              	.LBE19815:
 18727              	.LBE19908:
 18728              	.LBB19909:
 18729              	.LBB19871:
 18730              	.LBB19867:
 18731              	.LBB19863:
 18732              	.LBB19852:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 18733              		.loc 7 78 0
 18734 0508 4C89E7   		movq	%r12, %rdi
 18735              	.LEHB92:
 18736 050b FFD0     		call	*%rax
 18737              	.LVL1578:
 18738              	.LEHE92:
 18739 050d E9ACFDFF 		jmp	.L1026
 18739      FF
 18740              	.LVL1579:
 18741              		.p2align 4,,10
 18742 0512 660F1F44 		.p2align 3
 18742      0000
 18743              	.L1020:
 18744              	.LBE19852:
 18745              	.LBE19863:
 18746              	.LBE19867:
 18747              	.LBE19871:
 18748              	.LBE19909:
 18749              	.LBB19910:
 18750              	.LBB19816:
 18751              	.LBB19784:
 18752              	.LBB19783:
 18753              	.LBB19782:
 18754              	.LBB19781:
  72:/usr/include/boost/exception/exception.hpp ****                 }
 18755              		.loc 7 72 0
 18756 0518 4889EF   		movq	%rbp, %rdi
 18757              	.LEHB93:
 18758 051b FFD0     		call	*%rax
 18759              	.LVL1580:
 18760              	.LEHE93:
 18761 051d 4C8B6424 		movq	24(%rsp), %r12
 18761      18
 18762              	.LVL1581:
 18763              	.LBE19781:
 18764              	.LBE19782:
 18765              	.LBE19783:
 18766              	.LBE19784:
 18767              	.LBE19816:
 18768              	.LBB19817:
 18769              	.LBB19813:
 18770              	.LBB19811:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 18771              		.loc 7 78 0
 18772 0522 4D85E4   		testq	%r12, %r12
 18773 0525 0F844FFD 		je	.L1022
GAS LISTING /tmp/ccvmoMuv.s 			page 794


 18773      FFFF
 18774 052b E926FDFF 		jmp	.L1021
 18774      FF
 18775              		.p2align 4,,10
 18776              		.p2align 3
 18777              	.L1023:
 18778 0530 4C89E7   		movq	%r12, %rdi
 18779 0533 FFD0     		call	*%rax
 18780              	.LVL1582:
 18781 0535 E940FDFF 		jmp	.L1022
 18781      FF
 18782              	.LVL1583:
 18783 053a 660F1F44 		.p2align 4,,10
 18783      0000
 18784              		.p2align 3
 18785              	.L1001:
 18786              	.LBE19811:
 18787              	.LBE19813:
 18788              	.LBE19817:
 18789              	.LBB19818:
 18790              	.LBB19772:
 18791              	.LBB19765:
 18792              	.LBB19730:
 18793              	.LBB19727:
 18794              	.LBB19718:
 18795 0540 4889C7   		movq	%rax, %rdi
 18796              	.LEHB94:
 18797 0543 FFD2     		call	*%rdx
 18798              	.LVL1584:
 18799              	.LEHE94:
 18800 0545 498B0424 		movq	(%r12), %rax
 18801 0549 488B4018 		movq	24(%rax), %rax
 18802 054d EB9C     		jmp	.L1004
 18803              	.LVL1585:
 18804 054f 90       		.p2align 4,,10
 18805              		.p2align 3
 18806              	.L1009:
 18807              	.LBE19718:
 18808              	.LBE19727:
 18809              	.LBE19730:
 18810              	.LBE19765:
 18811              	.LBB19766:
 18812              	.LBB19762:
 18813              	.LBB19760:
 18814              	.LBB19758:
 18815              	.LBB19756:
 18816              	.LBB19753:
 18817              	.LBB19742:
 18818              	.LBB19741:
 390:/usr/include/c++/6/bits/stl_tree.h **** 	}
 18819              		.loc 19 390 0
 18820 0550 48C74424 		movq	$0, 40(%rsp)
 18820      28000000 
 18820      00
 18821 0559 E952FCFF 		jmp	.L1010
 18821      FF
 18822              	.LVL1586:
GAS LISTING /tmp/ccvmoMuv.s 			page 795


 18823              	.L1051:
 18824 055e 4989C4   		movq	%rax, %r12
 18825              	.LVL1587:
 18826              	.L1017:
 18827              	.LBE19741:
 18828              	.LBE19742:
 18829              	.LBE19753:
 18830              	.LBE19756:
 18831              	.LBE19758:
 18832              	.LBE19760:
 18833              	.LBE19762:
 18834              	.LBE19766:
 18835              	.LBE19772:
 18836              	.LBE19818:
 18837              	.LBE19910:
 18838              	.LBE19918:
 18839              	.LBE19928:
 465:/usr/include/boost/exception/exception.hpp ****                 {
 18840              		.loc 7 465 0
 18841 0561 4889DF   		movq	%rbx, %rdi
 18842 0564 E8000000 		call	_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED2Ev
 18842      00
 18843              	.LVL1588:
 18844              	.L997:
 18845              	.LBE19932:
 18846              	.LBE19935:
 488:/usr/include/boost/exception/exception.hpp ****                 }
 18847              		.loc 7 488 0 discriminator 3
 18848 0569 4889DF   		movq	%rbx, %rdi
 18849 056c BE400000 		movl	$64, %esi
 18849      00
 18850 0571 E8000000 		call	_ZdlPvm@PLT
 18850      00
 18851              	.LVL1589:
 18852 0576 4C89E7   		movq	%r12, %rdi
 18853              	.LEHB95:
 18854 0579 E8000000 		call	_Unwind_Resume@PLT
 18854      00
 18855              	.LVL1590:
 18856              	.LEHE95:
 18857              	.L1050:
 18858              	.LBB19936:
 18859              	.LBB19933:
 18860              	.LBB19929:
 18861              	.LBB19919:
 18862              	.LBB19911:
 18863              	.LBB19819:
 18864              	.LBB19773:
 18865              	.LBB19767:
 18866              	.LBB19763:
 18867              	.LBB19761:
 18868              	.LBB19759:
 18869              	.LBB19757:
 18870              	.LBB19754:
 18871              	.LBB19755:
 398:/usr/include/c++/6/bits/stl_tree.h **** 
 18872              		.loc 19 398 0
GAS LISTING /tmp/ccvmoMuv.s 			page 796


 18873 057e 488B7424 		movq	32(%rsp), %rsi
 18873      20
 18874 0583 488B7C24 		movq	48(%rsp), %rdi
 18874      30
 18875 0588 4989C4   		movq	%rax, %r12
 18876              	.LVL1591:
 18877 058b E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 18877      00
 18878              	.LVL1592:
 18879              	.L1015:
 18880              	.LBE19755:
 18881              	.LBE19754:
 18882              	.LBE19757:
 18883              	.LBE19759:
 18884              	.LBE19761:
 18885              	.LBE19763:
 18886              	.LBE19767:
 18887              	.LBB19768:
 18888              	.LBB19769:
 18889              	.LBB19770:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 18890              		.loc 7 78 0
 18891 0590 488B7C24 		movq	24(%rsp), %rdi
 18891      18
 18892 0595 4885FF   		testq	%rdi, %rdi
 18893 0598 74C7     		je	.L1017
 18894 059a 488B07   		movq	(%rdi), %rax
 18895 059d FF5020   		call	*32(%rax)
 18896              	.LVL1593:
 18897 05a0 EBBF     		jmp	.L1017
 18898              	.L1049:
 18899 05a2 4989C4   		movq	%rax, %r12
 18900 05a5 EBE9     		jmp	.L1015
 18901              	.LVL1594:
 18902              	.L1048:
 18903              	.LBE19770:
 18904              	.LBE19769:
 18905              	.LBE19768:
 18906              	.LBE19773:
 18907              	.LBE19819:
 18908              	.LBB19820:
 18909              	.LBB19821:
 18910              	.LBB19822:
 18911 05a7 488B7C24 		movq	24(%rsp), %rdi
 18911      18
 18912 05ac 4989C4   		movq	%rax, %r12
 18913              	.LVL1595:
 18914 05af 4885FF   		testq	%rdi, %rdi
 18915 05b2 7406     		je	.L1041
 18916 05b4 488B07   		movq	(%rdi), %rax
 18917 05b7 FF5020   		call	*32(%rax)
 18918              	.LVL1596:
 18919              	.L1041:
 18920              	.LBE19822:
 18921              	.LBE19821:
 18922              	.LBE19820:
 18923              	.LBE19911:
GAS LISTING /tmp/ccvmoMuv.s 			page 797


 18924              	.LBB19912:
 18925              	.LBB19913:
 18926              	.LBB19914:
 18927 05ba 488B4500 		movq	0(%rbp), %rax
 18928 05be 4889EF   		movq	%rbp, %rdi
 18929 05c1 FF5020   		call	*32(%rax)
 18930              	.LVL1597:
 18931 05c4 EB9B     		jmp	.L1017
 18932              	.LVL1598:
 18933              	.L1052:
 18934 05c6 4885ED   		testq	%rbp, %rbp
 18935 05c9 4989C4   		movq	%rax, %r12
 18936              	.LVL1599:
 18937 05cc 75EC     		jne	.L1041
 18938 05ce EB91     		jmp	.L1017
 18939              	.LVL1600:
 18940              	.L1047:
 18941 05d0 4889C5   		movq	%rax, %rbp
 18942              	.LVL1601:
 18943              	.LBE19914:
 18944              	.LBE19913:
 18945              	.LBE19912:
 18946              	.LBE19919:
 18947              	.LBE19929:
 18948              	.LBB19930:
 18949              	.LBB19632:
 18950              	.LBB19633:
 18951              		.loc 13 696 0
 18952 05d3 4889DF   		movq	%rbx, %rdi
 18953 05d6 4C8923   		movq	%r12, (%rbx)
 18954 05d9 E8000000 		call	_ZNSt13runtime_errorD2Ev@PLT
 18954      00
 18955              	.LVL1602:
 18956 05de 4989EC   		movq	%rbp, %r12
 18957 05e1 EB86     		jmp	.L997
 18958              	.LVL1603:
 18959              	.L1053:
 18960 05e3 4989C4   		movq	%rax, %r12
 18961 05e6 EBD2     		jmp	.L1041
 18962              	.LBE19633:
 18963              	.LBE19632:
 18964              	.LBE19930:
 18965              	.LBE19933:
 18966              	.LBE19936:
 18967              		.cfi_endproc
 18968              	.LFE15580:
 18969              		.section	.gcc_except_table
 18970              	.LLSDA15580:
 18971 01ca FF       		.byte	0xff
 18972 01cb FF       		.byte	0xff
 18973 01cc 01       		.byte	0x1
 18974 01cd 3F       		.uleb128 .LLSDACSE15580-.LLSDACSB15580
 18975              	.LLSDACSB15580:
 18976 01ce 1D       		.uleb128 .LEHB85-.LFB15580
 18977 01cf 05       		.uleb128 .LEHE85-.LEHB85
 18978 01d0 00       		.uleb128 0
 18979 01d1 00       		.uleb128 0
GAS LISTING /tmp/ccvmoMuv.s 			page 798


 18980 01d2 D301     		.uleb128 .LEHB86-.LFB15580
 18981 01d4 05       		.uleb128 .LEHE86-.LEHB86
 18982 01d5 A20B     		.uleb128 .L1049-.LFB15580
 18983 01d7 00       		.uleb128 0
 18984 01d8 DD03     		.uleb128 .LEHB87-.LFB15580
 18985 01da 05       		.uleb128 .LEHE87-.LEHB87
 18986 01db FE0A     		.uleb128 .L1050-.LFB15580
 18987 01dd 00       		.uleb128 0
 18988 01de A808     		.uleb128 .LEHB88-.LFB15580
 18989 01e0 02       		.uleb128 .LEHE88-.LEHB88
 18990 01e1 DE0A     		.uleb128 .L1051-.LFB15580
 18991 01e3 00       		.uleb128 0
 18992 01e4 C308     		.uleb128 .LEHB89-.LFB15580
 18993 01e6 02       		.uleb128 .LEHE89-.LEHB89
 18994 01e7 E30B     		.uleb128 .L1053-.LFB15580
 18995 01e9 00       		.uleb128 0
 18996 01ea D308     		.uleb128 .LEHB90-.LFB15580
 18997 01ec 02       		.uleb128 .LEHE90-.LEHB90
 18998 01ed D00B     		.uleb128 .L1047-.LFB15580
 18999 01ef 00       		.uleb128 0
 19000 01f0 FC09     		.uleb128 .LEHB91-.LFB15580
 19001 01f2 02       		.uleb128 .LEHE91-.LEHB91
 19002 01f3 A20B     		.uleb128 .L1049-.LFB15580
 19003 01f5 00       		.uleb128 0
 19004 01f6 8B0A     		.uleb128 .LEHB92-.LFB15580
 19005 01f8 02       		.uleb128 .LEHE92-.LEHB92
 19006 01f9 C60B     		.uleb128 .L1052-.LFB15580
 19007 01fb 00       		.uleb128 0
 19008 01fc 9B0A     		.uleb128 .LEHB93-.LFB15580
 19009 01fe 02       		.uleb128 .LEHE93-.LEHB93
 19010 01ff A70B     		.uleb128 .L1048-.LFB15580
 19011 0201 00       		.uleb128 0
 19012 0202 C30A     		.uleb128 .LEHB94-.LFB15580
 19013 0204 02       		.uleb128 .LEHE94-.LEHB94
 19014 0205 A20B     		.uleb128 .L1049-.LFB15580
 19015 0207 00       		.uleb128 0
 19016 0208 F90A     		.uleb128 .LEHB95-.LFB15580
 19017 020a 05       		.uleb128 .LEHE95-.LEHB95
 19018 020b 00       		.uleb128 0
 19019 020c 00       		.uleb128 0
 19020              	.LLSDACSE15580:
 19021              		.section	.text._ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_functio
 19023              		.set	.LTHUNK252,_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_functi
 19024 05e8 0F1F8400 		.p2align 4,,15
 19024      00000000 
 19025              		.weak	_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function
 19027              	_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEE
 19028              	.LFB16036:
 486:/usr/include/boost/exception/exception.hpp ****                 {
 19029              		.loc 7 486 0
 19030              		.cfi_startproc
 19031 05f0 4C8B17   		movq	(%rdi), %r10
 19032 05f3 49037AE8 		addq	-24(%r10), %rdi
 19033 05f7 E904FAFF 		jmp	.LTHUNK252
 19033      FF
 19034              		.cfi_endproc
 19035              	.LFE16036:
GAS LISTING /tmp/ccvmoMuv.s 			page 799


 19037              		.section	.text._ZN5boost15throw_exceptionINS_17bad_function_callEEEvRKT_,"axG",@progbits,_ZN5boost
 19038              		.p2align 4,,15
 19039              		.weak	_ZN5boost15throw_exceptionINS_17bad_function_callEEEvRKT_
 19041              	_ZN5boost15throw_exceptionINS_17bad_function_callEEEvRKT_:
 19042              	.LFB12724:
 19043              		.file 46 "/usr/include/boost/throw_exception.hpp"
   1:/usr/include/boost/throw_exception.hpp **** #ifndef UUID_AA15E74A856F11E08B8D93F24824019B
   2:/usr/include/boost/throw_exception.hpp **** #define UUID_AA15E74A856F11E08B8D93F24824019B
   3:/usr/include/boost/throw_exception.hpp **** #if (__GNUC__*100+__GNUC_MINOR__>301) && !defined(BOOST_EXCEPTION_ENABLE_WARNINGS)
   4:/usr/include/boost/throw_exception.hpp **** #pragma GCC system_header
   5:/usr/include/boost/throw_exception.hpp **** #endif
   6:/usr/include/boost/throw_exception.hpp **** #if defined(_MSC_VER) && !defined(BOOST_EXCEPTION_ENABLE_WARNINGS)
   7:/usr/include/boost/throw_exception.hpp **** #pragma warning(push,1)
   8:/usr/include/boost/throw_exception.hpp **** #endif
   9:/usr/include/boost/throw_exception.hpp **** 
  10:/usr/include/boost/throw_exception.hpp **** // MS compatible compilers support #pragma once
  11:/usr/include/boost/throw_exception.hpp **** 
  12:/usr/include/boost/throw_exception.hpp **** #if defined(_MSC_VER) && (_MSC_VER >= 1020)
  13:/usr/include/boost/throw_exception.hpp **** # pragma once
  14:/usr/include/boost/throw_exception.hpp **** #endif
  15:/usr/include/boost/throw_exception.hpp **** 
  16:/usr/include/boost/throw_exception.hpp **** //
  17:/usr/include/boost/throw_exception.hpp **** //  boost/throw_exception.hpp
  18:/usr/include/boost/throw_exception.hpp **** //
  19:/usr/include/boost/throw_exception.hpp **** //  Copyright (c) 2002 Peter Dimov and Multi Media Ltd.
  20:/usr/include/boost/throw_exception.hpp **** //  Copyright (c) 2008-2009 Emil Dotchevski and Reverge Studios, Inc.
  21:/usr/include/boost/throw_exception.hpp **** //
  22:/usr/include/boost/throw_exception.hpp **** //  Distributed under the Boost Software License, Version 1.0. (See
  23:/usr/include/boost/throw_exception.hpp **** //  accompanying file LICENSE_1_0.txt or copy at
  24:/usr/include/boost/throw_exception.hpp **** //  http://www.boost.org/LICENSE_1_0.txt)
  25:/usr/include/boost/throw_exception.hpp **** //
  26:/usr/include/boost/throw_exception.hpp **** //  http://www.boost.org/libs/utility/throw_exception.html
  27:/usr/include/boost/throw_exception.hpp **** //
  28:/usr/include/boost/throw_exception.hpp **** 
  29:/usr/include/boost/throw_exception.hpp **** #include <boost/detail/workaround.hpp>
  30:/usr/include/boost/throw_exception.hpp **** #include <boost/config.hpp>
  31:/usr/include/boost/throw_exception.hpp **** #include <exception>
  32:/usr/include/boost/throw_exception.hpp **** 
  33:/usr/include/boost/throw_exception.hpp **** #if !defined( BOOST_EXCEPTION_DISABLE ) && defined( __BORLANDC__ ) && BOOST_WORKAROUND( __BORLANDC_
  34:/usr/include/boost/throw_exception.hpp **** # define BOOST_EXCEPTION_DISABLE
  35:/usr/include/boost/throw_exception.hpp **** #endif
  36:/usr/include/boost/throw_exception.hpp **** 
  37:/usr/include/boost/throw_exception.hpp **** #if !defined( BOOST_EXCEPTION_DISABLE ) && defined( BOOST_MSVC ) && BOOST_WORKAROUND( BOOST_MSVC, <
  38:/usr/include/boost/throw_exception.hpp **** # define BOOST_EXCEPTION_DISABLE
  39:/usr/include/boost/throw_exception.hpp **** #endif
  40:/usr/include/boost/throw_exception.hpp **** 
  41:/usr/include/boost/throw_exception.hpp **** #if !defined( BOOST_EXCEPTION_DISABLE )
  42:/usr/include/boost/throw_exception.hpp **** # include <boost/exception/exception.hpp>
  43:/usr/include/boost/throw_exception.hpp **** #if !defined(BOOST_THROW_EXCEPTION_CURRENT_FUNCTION)
  44:/usr/include/boost/throw_exception.hpp **** # include <boost/current_function.hpp>
  45:/usr/include/boost/throw_exception.hpp **** # define BOOST_THROW_EXCEPTION_CURRENT_FUNCTION BOOST_CURRENT_FUNCTION
  46:/usr/include/boost/throw_exception.hpp **** #endif
  47:/usr/include/boost/throw_exception.hpp **** # define BOOST_THROW_EXCEPTION(x) ::boost::exception_detail::throw_exception_(x,BOOST_THROW_EXCEPTI
  48:/usr/include/boost/throw_exception.hpp **** #else
  49:/usr/include/boost/throw_exception.hpp **** # define BOOST_THROW_EXCEPTION(x) ::boost::throw_exception(x)
  50:/usr/include/boost/throw_exception.hpp **** #endif
  51:/usr/include/boost/throw_exception.hpp **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 800


  52:/usr/include/boost/throw_exception.hpp **** namespace boost
  53:/usr/include/boost/throw_exception.hpp **** {
  54:/usr/include/boost/throw_exception.hpp **** #ifdef BOOST_NO_EXCEPTIONS
  55:/usr/include/boost/throw_exception.hpp **** 
  56:/usr/include/boost/throw_exception.hpp **** void throw_exception( std::exception const & e ); // user defined
  57:/usr/include/boost/throw_exception.hpp **** 
  58:/usr/include/boost/throw_exception.hpp **** #else
  59:/usr/include/boost/throw_exception.hpp **** 
  60:/usr/include/boost/throw_exception.hpp **** inline void throw_exception_assert_compatibility( std::exception const & ) { }
  61:/usr/include/boost/throw_exception.hpp **** 
  62:/usr/include/boost/throw_exception.hpp **** template<class E> BOOST_NORETURN inline void throw_exception( E const & e )
 19044              		.loc 46 62 0
 19045              		.cfi_startproc
 19046              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 19047              		.cfi_lsda 0x1b,.LLSDA12724
 19048              	.LVL1604:
 19049 0000 4157     		pushq	%r15
 19050              		.cfi_def_cfa_offset 16
 19051              		.cfi_offset 15, -16
 19052 0002 4156     		pushq	%r14
 19053              		.cfi_def_cfa_offset 24
 19054              		.cfi_offset 14, -24
 19055 0004 4155     		pushq	%r13
 19056              		.cfi_def_cfa_offset 32
 19057              		.cfi_offset 13, -32
 19058 0006 4154     		pushq	%r12
 19059              		.cfi_def_cfa_offset 40
 19060              		.cfi_offset 12, -40
 19061 0008 55       		pushq	%rbp
 19062              		.cfi_def_cfa_offset 48
 19063              		.cfi_offset 6, -48
 19064 0009 53       		pushq	%rbx
 19065              		.cfi_def_cfa_offset 56
 19066              		.cfi_offset 3, -56
 19067 000a 4889FD   		movq	%rdi, %rbp
 19068              	.LVL1605:
  63:/usr/include/boost/throw_exception.hpp **** {
  64:/usr/include/boost/throw_exception.hpp ****     //All boost exceptions are required to derive from std::exception,
  65:/usr/include/boost/throw_exception.hpp ****     //to ensure compatibility with BOOST_NO_EXCEPTIONS.
  66:/usr/include/boost/throw_exception.hpp ****     throw_exception_assert_compatibility(e);
  67:/usr/include/boost/throw_exception.hpp **** 
  68:/usr/include/boost/throw_exception.hpp **** #ifndef BOOST_EXCEPTION_DISABLE
  69:/usr/include/boost/throw_exception.hpp ****     throw enable_current_exception(enable_error_info(e));
 19069              		.loc 46 69 0
 19070 000d BF400000 		movl	$64, %edi
 19070      00
 19071              	.LVL1606:
  62:/usr/include/boost/throw_exception.hpp **** {
 19072              		.loc 46 62 0
 19073 0012 4883EC78 		subq	$120, %rsp
 19074              		.cfi_def_cfa_offset 176
 19075              	.LBB20224:
 19076              	.LBB20225:
 19077              	.LBB20226:
 19078              	.LBB20227:
 19079              	.LBB20228:
 19080              	.LBB20229:
GAS LISTING /tmp/ccvmoMuv.s 			page 801


 19081              		.loc 13 696 0
 19082 0016 4C8D6C24 		leaq	48(%rsp), %r13
 19082      30
 19083              	.LBE20229:
 19084              	.LBE20228:
 19085              	.LBE20227:
 19086              	.LBE20226:
 19087              	.LBE20225:
 19088              	.LBE20224:
 19089              		.loc 46 69 0
 19090 001b E8000000 		call	__cxa_allocate_exception@PLT
 19090      00
 19091              	.LVL1607:
 19092              	.LBB20252:
 19093              	.LBB20248:
 19094              	.LBB20244:
 19095              	.LBB20240:
 19096              	.LBB20232:
 19097              	.LBB20230:
 19098              		.loc 13 696 0
 19099 0020 4889EE   		movq	%rbp, %rsi
 19100 0023 4C89EF   		movq	%r13, %rdi
 19101              	.LBE20230:
 19102              	.LBE20232:
 19103              	.LBE20240:
 19104              	.LBE20244:
 19105              	.LBE20248:
 19106              	.LBE20252:
 19107              		.loc 46 69 0
 19108 0026 4889C3   		movq	%rax, %rbx
 19109              	.LVL1608:
 19110              	.LBB20253:
 19111              	.LBB20249:
 19112              	.LBB20245:
 19113              	.LBB20241:
 19114              	.LBB20233:
 19115              	.LBB20231:
 19116              		.loc 13 696 0
 19117 0029 E8000000 		call	_ZNSt13runtime_errorC2ERKS_@PLT
 19117      00
 19118              	.LVL1609:
 19119              	.LBE20231:
 19120              	.LBE20233:
 349:/usr/include/boost/exception/exception.hpp ****                 {
 19121              		.loc 7 349 0
 19122 002e 488D0500 		leaq	16+_ZTVN5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE(%rip), %rax
 19122      000000
 19123              	.LBE20241:
 19124              	.LBE20245:
 19125              	.LBE20249:
 19126              	.LBE20253:
 19127              	.LBB20254:
 19128              	.LBB20255:
 19129              	.LBB20256:
 19130              	.LBB20257:
 19131              	.LBB20258:
 19132              	.LBB20259:
GAS LISTING /tmp/ccvmoMuv.s 			page 802


 19133              		.loc 13 696 0
 19134 0035 4C89EE   		movq	%r13, %rsi
 19135 0038 4889DF   		movq	%rbx, %rdi
 19136              	.LBE20259:
 19137              	.LBE20258:
 19138              	.LBE20257:
 19139              	.LBE20256:
 19140              	.LBE20255:
 19141              	.LBE20254:
 19142              	.LBB20600:
 19143              	.LBB20250:
 19144              	.LBB20246:
 19145              	.LBB20242:
 19146              	.LBB20234:
 19147              	.LBB20235:
 19148              	.LBB20236:
 19149              	.LBB20237:
  28:/usr/include/boost/exception/exception.hpp ****                 {
 19150              		.loc 7 28 0
 19151 003b 48C74424 		movq	$0, 72(%rsp)
 19151      48000000 
 19151      00
 19152              	.LVL1610:
 19153              	.LBE20237:
 19154              	.LBE20236:
 233:/usr/include/boost/exception/exception.hpp ****             {
 19155              		.loc 7 233 0
 19156 0044 48C74424 		movq	$0, 80(%rsp)
 19156      50000000 
 19156      00
 19157              	.LBE20235:
 19158              	.LBE20234:
 19159              	.LBE20242:
 19160              	.LBE20246:
 19161              	.LBE20250:
 19162              	.LBE20600:
 19163              	.LBB20601:
 19164              	.LBB20596:
 19165              	.LBB20592:
 19166              	.LBB20294:
 19167              	.LBB20263:
 19168              	.LBB20260:
 19169              		.loc 13 696 0
 19170 004d 488D2D00 		leaq	16+_ZTVN5boost17bad_function_callE(%rip), %rbp
 19170      000000
 19171              	.LVL1611:
 19172              	.LBE20260:
 19173              	.LBE20263:
 19174              	.LBE20294:
 19175              	.LBE20592:
 19176              	.LBE20596:
 19177              	.LBE20601:
 19178              	.LBB20602:
 19179              	.LBB20251:
 19180              	.LBB20247:
 19181              	.LBB20243:
 349:/usr/include/boost/exception/exception.hpp ****                 {
GAS LISTING /tmp/ccvmoMuv.s 			page 803


 19182              		.loc 7 349 0
 19183 0054 48894424 		movq	%rax, 48(%rsp)
 19183      30
 19184 0059 488D0500 		leaq	56+_ZTVN5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE(%rip), %rax
 19184      000000
 19185              	.LBB20239:
 19186              	.LBB20238:
 233:/usr/include/boost/exception/exception.hpp ****             {
 19187              		.loc 7 233 0
 19188 0060 48C74424 		movq	$0, 88(%rsp)
 19188      58000000 
 19188      00
 19189 0069 C7442460 		movl	$-1, 96(%rsp)
 19189      FFFFFFFF 
 19190              	.LVL1612:
 19191              	.LBE20238:
 19192              	.LBE20239:
 349:/usr/include/boost/exception/exception.hpp ****                 {
 19193              		.loc 7 349 0
 19194 0071 48894424 		movq	%rax, 64(%rsp)
 19194      40
 19195              	.LVL1613:
 19196              	.LBE20243:
 19197              	.LBE20247:
 19198              	.LBE20251:
 19199              	.LBE20602:
 19200              	.LBB20603:
 19201              	.LBB20597:
 19202              	.LBB20593:
 19203              	.LBB20295:
 19204              	.LBB20296:
 415:/usr/include/boost/exception/exception.hpp ****             {
 19205              		.loc 7 415 0
 19206 0076 488D0500 		leaq	16+_ZTVN5boost16exception_detail10clone_baseE(%rip), %rax
 19206      000000
 19207 007d 48894338 		movq	%rax, 56(%rbx)
 19208              	.LVL1614:
 19209              	.LBE20296:
 19210              	.LBE20295:
 19211              	.LBB20297:
 19212              	.LBB20264:
 19213              	.LBB20261:
 19214              		.loc 13 696 0
 19215 0081 E8000000 		call	_ZNSt13runtime_errorC2ERKS_@PLT
 19215      00
 19216              	.LVL1615:
 19217              	.LBE20261:
 19218              	.LBE20264:
 19219              	.LBB20265:
 19220              	.LBB20266:
 19221              	.LBB20267:
 19222              	.LBB20268:
  38:/usr/include/boost/exception/exception.hpp ****                 {
 19223              		.loc 7 38 0
 19224 0086 4C8B6424 		movq	72(%rsp), %r12
 19224      48
 19225              	.LBE20268:
GAS LISTING /tmp/ccvmoMuv.s 			page 804


 19226              	.LBE20267:
 220:/usr/include/boost/exception/exception.hpp ****         {
 19227              		.loc 7 220 0
 19228 008b 488D0500 		leaq	16+_ZTVN5boost9exceptionE(%rip), %rax
 19228      000000
 19229              	.LBE20266:
 19230              	.LBE20265:
 19231              	.LBB20286:
 19232              	.LBB20262:
 19233              		.loc 13 696 0
 19234 0092 48892B   		movq	%rbp, (%rbx)
 19235              	.LVL1616:
 19236              	.LBE20262:
 19237              	.LBE20286:
 19238              	.LBB20287:
 19239              	.LBB20281:
 220:/usr/include/boost/exception/exception.hpp ****         {
 19240              		.loc 7 220 0
 19241 0095 48894310 		movq	%rax, 16(%rbx)
 19242              	.LVL1617:
 19243              	.LBB20279:
 19244              	.LBB20277:
 19245              	.LBB20269:
 19246              	.LBB20270:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 19247              		.loc 7 71 0
 19248 0099 4D85E4   		testq	%r12, %r12
 19249              	.LBE20270:
 19250              	.LBE20269:
  38:/usr/include/boost/exception/exception.hpp ****                 {
 19251              		.loc 7 38 0
 19252 009c 4C896318 		movq	%r12, 24(%rbx)
 19253              	.LVL1618:
 19254              	.LBB20275:
 19255              	.LBB20273:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 19256              		.loc 7 71 0
 19257 00a0 741E     		je	.L1079
  72:/usr/include/boost/exception/exception.hpp ****                 }
 19258              		.loc 7 72 0
 19259 00a2 498B0424 		movq	(%r12), %rax
 19260 00a6 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7add_refEv(%rip), %rdx
 19260      000000
 19261 00ad 488B4018 		movq	24(%rax), %rax
 19262 00b1 4839D0   		cmpq	%rdx, %rax
 19263 00b4 0F85DA03 		jne	.L1080
 19263      0000
 19264              	.LVL1619:
 19265              	.LBB20271:
 19266              	.LBB20272:
 162:/usr/include/boost/exception/info.hpp ****                 }
 19267              		.loc 3 162 0
 19268 00ba 41834424 		addl	$1, 88(%r12)
 19268      5801
 19269              	.LVL1620:
 19270              	.L1079:
 19271              	.LBE20272:
GAS LISTING /tmp/ccvmoMuv.s 			page 805


 19272              	.LBE20271:
 19273              	.LBE20273:
 19274              	.LBE20275:
 19275              	.LBE20277:
 19276              	.LBE20279:
 19277              	.LBE20281:
 19278              	.LBE20287:
 19279              	.LBE20297:
 474:/usr/include/boost/exception/exception.hpp ****                 {
 19280              		.loc 7 474 0
 19281 00c0 488D3500 		leaq	24+_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_call
 19281      000000
 19282              	.LBB20298:
 19283              	.LBB20288:
 19284              	.LBB20282:
 220:/usr/include/boost/exception/exception.hpp ****         {
 19285              		.loc 7 220 0
 19286 00c7 488B4424 		movq	80(%rsp), %rax
 19286      50
 19287 00cc 488B4C24 		movq	88(%rsp), %rcx
 19287      58
 19288 00d1 8B542460 		movl	96(%rsp), %edx
 19289              	.LBE20282:
 19290              	.LBE20288:
 19291              	.LBE20298:
 19292              	.LBB20299:
 19293              	.LBB20300:
 19294              	.LBB20301:
 438:/usr/include/boost/exception/exception.hpp ****                 data = d->clone();
 19295              		.loc 7 438 0
 19296 00d5 4D85E4   		testq	%r12, %r12
 19297              	.LBB20302:
 19298              	.LBB20303:
  61:/usr/include/boost/exception/exception.hpp ****                 }
 19299              		.loc 7 61 0
 19300 00d8 4C89E5   		movq	%r12, %rbp
 19301              	.LBE20303:
 19302              	.LBE20302:
 19303              	.LBE20301:
 19304              	.LBE20300:
 19305              	.LBE20299:
 474:/usr/include/boost/exception/exception.hpp ****                 {
 19306              		.loc 7 474 0
 19307 00db 488933   		movq	%rsi, (%rbx)
 19308 00de 488D3500 		leaq	80+_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_call
 19308      000000
 19309              	.LBB20584:
 19310              	.LBB20289:
 19311              	.LBB20283:
 220:/usr/include/boost/exception/exception.hpp ****         {
 19312              		.loc 7 220 0
 19313 00e5 48894320 		movq	%rax, 32(%rbx)
 19314              	.LBE20283:
 19315              	.LBE20289:
 19316              	.LBE20584:
 474:/usr/include/boost/exception/exception.hpp ****                 {
 19317              		.loc 7 474 0
GAS LISTING /tmp/ccvmoMuv.s 			page 806


 19318 00e9 48897310 		movq	%rsi, 16(%rbx)
 19319 00ed 488D3500 		leaq	136+_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_cal
 19319      000000
 19320              	.LBB20585:
 19321              	.LBB20290:
 19322              	.LBB20284:
 220:/usr/include/boost/exception/exception.hpp ****         {
 19323              		.loc 7 220 0
 19324 00f4 48894B28 		movq	%rcx, 40(%rbx)
 19325 00f8 895330   		movl	%edx, 48(%rbx)
 19326              	.LVL1621:
 19327              	.LBE20284:
 19328              	.LBE20290:
 19329              	.LBE20585:
 474:/usr/include/boost/exception/exception.hpp ****                 {
 19330              		.loc 7 474 0
 19331 00fb 48897338 		movq	%rsi, 56(%rbx)
 19332              	.LVL1622:
 19333              	.LBB20586:
 19334              	.LBB20580:
 19335              	.LBB20489:
 438:/usr/include/boost/exception/exception.hpp ****                 data = d->clone();
 19336              		.loc 7 438 0
 19337 00ff 0F84E601 		je	.L1083
 19337      0000
 439:/usr/include/boost/exception/exception.hpp ****             a->throw_file_ = b->throw_file_;
 19338              		.loc 7 439 0
 19339 0105 498B0424 		movq	(%r12), %rax
 19340 0109 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl5cloneEv(%rip), %rdx
 19340      000000
 19341 0110 488B4028 		movq	40(%rax), %rax
 19342 0114 4839D0   		cmpq	%rdx, %rax
 19343 0117 0F856803 		jne	.L1086
 19343      0000
 19344              	.LVL1623:
 19345              	.LBB20304:
 19346              	.LBB20305:
 181:/usr/include/boost/exception/info.hpp ****                 p.adopt(c);
 19347              		.loc 3 181 0
 19348 011d BF600000 		movl	$96, %edi
 19348      00
 19349              	.LBB20306:
 19350              	.LBB20307:
  28:/usr/include/boost/exception/exception.hpp ****                 {
 19351              		.loc 7 28 0
 19352 0122 48C74424 		movq	$0, 8(%rsp)
 19352      08000000 
 19352      00
 19353              	.LVL1624:
 19354              	.LEHB96:
 19355              	.LBE20307:
 19356              	.LBE20306:
 181:/usr/include/boost/exception/info.hpp ****                 p.adopt(c);
 19357              		.loc 3 181 0
 19358 012b E8000000 		call	_Znwm@PLT
 19358      00
 19359              	.LVL1625:
GAS LISTING /tmp/ccvmoMuv.s 			page 807


 19360              	.LEHE96:
 19361              	.LBB20308:
 19362              	.LBB20309:
 19363              	.LBB20310:
 19364              	.LBB20311:
 19365              	.LBB20312:
 19366              	.LBB20313:
 19367              	.LBB20314:
 19368              	.LBB20315:
 632:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_right = &this->_M_header;
 19369              		.loc 19 632 0
 19370 0130 4C8D7010 		leaq	16(%rax), %r14
 19371              	.LBE20315:
 19372              	.LBE20314:
 19373              	.LBE20313:
 19374              	.LBE20312:
 19375              	.LBE20311:
 19376              	.LBE20310:
  99:/usr/include/boost/exception/info.hpp ****                 {
 19377              		.loc 3 99 0
 19378 0134 488D1500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rdx
 19378      000000
 19379              	.LBE20309:
 19380              	.LBE20308:
 19381              	.LBB20343:
 19382              	.LBB20344:
 19383              	.LBB20345:
 19384              	.LBB20346:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 19385              		.loc 7 78 0
 19386 013b 4C8B7C24 		movq	8(%rsp), %r15
 19386      08
 19387              	.LBE20346:
 19388              	.LBE20345:
 19389              	.LBE20344:
 19390              	.LBE20343:
 181:/usr/include/boost/exception/info.hpp ****                 p.adopt(c);
 19391              		.loc 3 181 0
 19392 0140 4889C5   		movq	%rax, %rbp
 19393              	.LVL1626:
 19394              	.LBB20392:
 19395              	.LBB20341:
 19396              	.LBB20327:
 19397              	.LBB20324:
 19398              	.LBB20321:
 19399              	.LBB20318:
 602:/usr/include/c++/6/bits/stl_tree.h **** 	  { _M_initialize(); }
 19400              		.loc 19 602 0
 19401 0143 C7401000 		movl	$0, 16(%rax)
 19401      000000
 19402 014a 48C74018 		movq	$0, 24(%rax)
 19402      00000000 
 19403              	.LBE20318:
 19404              	.LBE20321:
 19405              	.LBE20324:
 19406              	.LBE20327:
  99:/usr/include/boost/exception/info.hpp ****                 {
GAS LISTING /tmp/ccvmoMuv.s 			page 808


 19407              		.loc 3 99 0
 19408 0152 488910   		movq	%rdx, (%rax)
 19409              	.LVL1627:
 19410              	.LBB20328:
 19411              	.LBB20325:
 19412              	.LBB20322:
 19413              	.LBB20319:
 602:/usr/include/c++/6/bits/stl_tree.h **** 	  { _M_initialize(); }
 19414              		.loc 19 602 0
 19415 0155 48C74030 		movq	$0, 48(%rax)
 19415      00000000 
 19416              	.LVL1628:
 19417              	.LBE20319:
 19418              	.LBE20322:
 19419              	.LBE20325:
 19420              	.LBE20328:
 19421              	.LBB20329:
 19422              	.LBB20330:
 19423              	.LBB20331:
 142:/usr/include/c++/6/bits/basic_string.h **** #else
 19424              		.loc 10 142 0
 19425 015d 488D4048 		leaq	72(%rax), %rax
 19426              	.LVL1629:
 19427              	.LBE20331:
 19428              	.LBE20330:
 19429              	.LBE20329:
 19430              	.LBB20339:
 19431              	.LBB20326:
 19432              	.LBB20323:
 19433              	.LBB20320:
 19434              	.LBB20317:
 19435              	.LBB20316:
 632:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_right = &this->_M_header;
 19436              		.loc 19 632 0
 19437 0161 4C8970D8 		movq	%r14, -40(%rax)
 633:/usr/include/c++/6/bits/stl_tree.h **** 	  }	    
 19438              		.loc 19 633 0
 19439 0165 4C8970E0 		movq	%r14, -32(%rax)
 19440              	.LVL1630:
 19441              	.LBE20316:
 19442              	.LBE20317:
 19443              	.LBE20320:
 19444              	.LBE20323:
 19445              	.LBE20326:
 19446              	.LBE20339:
 19447              	.LBE20341:
 19448              	.LBE20392:
 19449              	.LBB20393:
 19450              	.LBB20388:
 19451              	.LBB20376:
 19452              	.LBB20372:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 19453              		.loc 7 78 0
 19454 0169 4D85FF   		testq	%r15, %r15
 19455              	.LBE20372:
 19456              	.LBE20376:
 19457              	.LBE20388:
GAS LISTING /tmp/ccvmoMuv.s 			page 809


 19458              	.LBE20393:
 19459              	.LBB20394:
 19460              	.LBB20342:
 19461              	.LBB20340:
 19462              	.LBB20333:
 19463              	.LBB20332:
 142:/usr/include/c++/6/bits/basic_string.h **** #else
 19464              		.loc 10 142 0
 19465 016c 48894538 		movq	%rax, 56(%rbp)
 19466              	.LVL1631:
 19467              	.LBE20332:
 19468              	.LBE20333:
 19469              	.LBB20334:
 19470              	.LBB20335:
 19471              	.LBB20336:
 132:/usr/include/c++/6/bits/basic_string.h **** 
 19472              		.loc 10 132 0
 19473 0170 48C74540 		movq	$0, 64(%rbp)
 19473      00000000 
 19474              	.LVL1632:
 19475              	.LBE20336:
 19476              	.LBE20335:
 19477              	.LBB20337:
 19478              	.LBB20338:
 243:/usr/include/c++/6/bits/char_traits.h **** 
 19479              		.loc 9 243 0
 19480 0178 C6454800 		movb	$0, 72(%rbp)
 19481              	.LVL1633:
 19482              	.LBE20338:
 19483              	.LBE20337:
 19484              	.LBE20334:
 19485              	.LBE20340:
  99:/usr/include/boost/exception/info.hpp ****                 {
 19486              		.loc 3 99 0
 19487 017c C7455800 		movl	$0, 88(%rbp)
 19487      000000
 19488              	.LVL1634:
 19489              	.LBE20342:
 19490              	.LBE20394:
 19491              	.LBB20395:
 19492              	.LBB20389:
 19493              	.LBB20377:
 19494              	.LBB20373:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 19495              		.loc 7 78 0
 19496 0183 7422     		je	.L1088
 19497 0185 498B07   		movq	(%r15), %rax
 19498 0188 488D0D00 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rcx
 19498      000000
 19499 018f 488B4020 		movq	32(%rax), %rax
 19500 0193 4839C8   		cmpq	%rcx, %rax
 19501 0196 0F854B03 		jne	.L1089
 19501      0000
 19502              	.LVL1635:
 19503              	.LBB20347:
 19504              	.LBB20348:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
GAS LISTING /tmp/ccvmoMuv.s 			page 810


 19505              		.loc 3 168 0
 19506 019c 41836F58 		subl	$1, 88(%r15)
 19506      01
 19507 01a1 0F84A002 		je	.L1161
 19507      0000
 19508              	.LVL1636:
 19509              	.L1088:
 19510              	.LBE20348:
 19511              	.LBE20347:
 19512              	.LBE20373:
 19513              	.LBE20377:
 19514              	.LBB20378:
 19515              	.LBB20379:
  72:/usr/include/boost/exception/exception.hpp ****                 }
 19516              		.loc 7 72 0
 19517 01a7 488B4500 		movq	0(%rbp), %rax
 19518 01ab 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7add_refEv(%rip), %rdx
 19518      000000
 19519              	.LBE20379:
 19520              	.LBE20378:
  54:/usr/include/boost/exception/exception.hpp ****                 add_ref();
 19521              		.loc 7 54 0
 19522 01b2 48896C24 		movq	%rbp, 8(%rsp)
 19522      08
 19523              	.LVL1637:
 19524              	.LBB20384:
 19525              	.LBB20382:
  72:/usr/include/boost/exception/exception.hpp ****                 }
 19526              		.loc 7 72 0
 19527 01b7 488B4018 		movq	24(%rax), %rax
 19528 01bb 4839D0   		cmpq	%rdx, %rax
 19529 01be 0F851903 		jne	.L1092
 19529      0000
 19530              	.LVL1638:
 19531              	.LBB20380:
 19532              	.LBB20381:
 162:/usr/include/boost/exception/info.hpp ****                 }
 19533              		.loc 3 162 0
 19534 01c4 83455801 		addl	$1, 88(%rbp)
 19535              	.LVL1639:
 19536              	.L1093:
 19537              	.LBE20381:
 19538              	.LBE20380:
 19539              	.LBE20382:
 19540              	.LBE20384:
 19541              	.LBE20389:
 19542              	.LBE20395:
 19543              	.LBB20396:
 19544              	.LBB20397:
 298:/usr/include/c++/6/bits/stl_map.h **** 	return *this;
 19545              		.loc 36 298 0
 19546 01c8 488D7D08 		leaq	8(%rbp), %rdi
 19547              	.LVL1640:
 19548 01cc 498D4424 		leaq	8(%r12), %rax
 19548      08
 19549              	.LVL1641:
 19550              	.LBB20398:
GAS LISTING /tmp/ccvmoMuv.s 			page 811


 19551              	.LBB20399:
1480:/usr/include/c++/6/bits/stl_tree.h **** 	{
 19552              		.loc 19 1480 0
 19553 01d1 4839C7   		cmpq	%rax, %rdi
 19554 01d4 0F84B600 		je	.L1095
 19554      0000
 19555              	.LVL1642:
 19556              	.LBB20400:
 19557              	.LBB20401:
 19558              	.LBB20402:
 19559              	.LBB20403:
 380:/usr/include/c++/6/bits/stl_tree.h **** 	{
 19560              		.loc 19 380 0
 19561 01da 488B4518 		movq	24(%rbp), %rax
 19562              	.LVL1643:
 19563 01de 488B5528 		movq	40(%rbp), %rdx
 19564 01e2 48897C24 		movq	%rdi, 32(%rsp)
 19564      20
 382:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 19565              		.loc 19 382 0
 19566 01e7 4885C0   		testq	%rax, %rax
 380:/usr/include/c++/6/bits/stl_tree.h **** 	{
 19567              		.loc 19 380 0
 19568 01ea 48894424 		movq	%rax, 16(%rsp)
 19568      10
 19569 01ef 48895424 		movq	%rdx, 24(%rsp)
 19569      18
 382:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 19570              		.loc 19 382 0
 19571 01f4 0F84F702 		je	.L1096
 19571      0000
 384:/usr/include/c++/6/bits/stl_tree.h **** 
 19572              		.loc 19 384 0
 19573 01fa 48C74008 		movq	$0, 8(%rax)
 19573      00000000 
 386:/usr/include/c++/6/bits/stl_tree.h **** 		_M_nodes = _M_nodes->_M_left;
 19574              		.loc 19 386 0
 19575 0202 488B4210 		movq	16(%rdx), %rax
 19576 0206 4885C0   		testq	%rax, %rax
 19577 0209 7405     		je	.L1097
 387:/usr/include/c++/6/bits/stl_tree.h **** 	    }
 19578              		.loc 19 387 0
 19579 020b 48894424 		movq	%rax, 24(%rsp)
 19579      18
 19580              	.L1097:
 19581              	.LVL1644:
 19582              	.LBE20403:
 19583              	.LBE20402:
 19584              	.LBE20401:
 19585              	.LBB20406:
 19586              	.LBB20407:
 620:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_left = &this->_M_header;
 19587              		.loc 19 620 0
 19588 0210 48C74518 		movq	$0, 24(%rbp)
 19588      00000000 
 621:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_header._M_right = &this->_M_header;
 19589              		.loc 19 621 0
GAS LISTING /tmp/ccvmoMuv.s 			page 812


 19590 0218 4C897520 		movq	%r14, 32(%rbp)
 622:/usr/include/c++/6/bits/stl_tree.h **** 	    this->_M_node_count = 0;
 19591              		.loc 19 622 0
 19592 021c 4C897528 		movq	%r14, 40(%rbp)
 19593 0220 498B7424 		movq	24(%r12), %rsi
 19593      18
 623:/usr/include/c++/6/bits/stl_tree.h **** 	  }
 19594              		.loc 19 623 0
 19595 0225 48C74530 		movq	$0, 48(%rbp)
 19595      00000000 
 19596              	.LVL1645:
 19597              	.LBE20407:
 19598              	.LBE20406:
1502:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 19599              		.loc 19 1502 0
 19600 022d 4885F6   		testq	%rsi, %rsi
 19601 0230 744F     		je	.L1098
 19602              	.LVL1646:
1504:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_leftmost() = _S_minimum(_M_root());
 19603              		.loc 19 1504 0
 19604 0232 488D4C24 		leaq	16(%rsp), %rcx
 19604      10
 19605 0237 4C89F2   		movq	%r14, %rdx
 19606              	.LEHB97:
 19607 023a E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 19607      00
 19608              	.LVL1647:
 19609              	.LEHE97:
 19610 023f 48894518 		movq	%rax, 24(%rbp)
 19611              	.LVL1648:
 19612 0243 4889C1   		movq	%rax, %rcx
 19613 0246 EB0B     		jmp	.L1099
 19614              	.LVL1649:
 19615 0248 0F1F8400 		.p2align 4,,10
 19615      00000000 
 19616              		.p2align 3
 19617              	.L1132:
 19618              	.LBB20408:
 19619              	.LBB20409:
 19620              	.LBB20410:
 111:/usr/include/c++/6/bits/stl_tree.h ****       return __x;
 19621              		.loc 19 111 0
 19622 0250 4889D1   		movq	%rdx, %rcx
 19623              	.LVL1650:
 19624              	.L1099:
 19625 0253 488B5110 		movq	16(%rcx), %rdx
 19626 0257 4885D2   		testq	%rdx, %rdx
 19627 025a 75F4     		jne	.L1132
 19628              	.LVL1651:
 19629              	.LBE20410:
 19630              	.LBE20409:
 19631              	.LBE20408:
1505:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_rightmost() = _S_maximum(_M_root());
 19632              		.loc 19 1505 0
 19633 025c 48894D20 		movq	%rcx, 32(%rbp)
 19634              	.LVL1652:
 19635 0260 EB09     		jmp	.L1100
GAS LISTING /tmp/ccvmoMuv.s 			page 813


 19636              	.LVL1653:
 19637              		.p2align 4,,10
 19638 0262 660F1F44 		.p2align 3
 19638      0000
 19639              	.L1133:
 19640              	.LBB20411:
 19641              	.LBB20412:
 19642              	.LBB20413:
 125:/usr/include/c++/6/bits/stl_tree.h ****       return __x;
 19643              		.loc 19 125 0
 19644 0268 4889D0   		movq	%rdx, %rax
 19645              	.LVL1654:
 19646              	.L1100:
 19647 026b 488B5018 		movq	24(%rax), %rdx
 19648 026f 4885D2   		testq	%rdx, %rdx
 19649 0272 75F4     		jne	.L1133
 19650              	.LVL1655:
 19651              	.LBE20413:
 19652              	.LBE20412:
 19653              	.LBE20411:
1506:/usr/include/c++/6/bits/stl_tree.h **** 	      _M_impl._M_node_count = __x._M_impl._M_node_count;
 19654              		.loc 19 1506 0
 19655 0274 48894528 		movq	%rax, 40(%rbp)
1507:/usr/include/c++/6/bits/stl_tree.h **** 	    }
 19656              		.loc 19 1507 0
 19657 0278 498B4424 		movq	48(%r12), %rax
 19657      30
 19658 027d 48894530 		movq	%rax, 48(%rbp)
 19659              	.LVL1656:
 19660              	.L1098:
 19661              	.LBB20414:
 19662              	.LBB20415:
 398:/usr/include/c++/6/bits/stl_tree.h **** 
 19663              		.loc 19 398 0
 19664 0281 488B7424 		movq	16(%rsp), %rsi
 19664      10
 19665 0286 488B7C24 		movq	32(%rsp), %rdi
 19665      20
 19666 028b E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 19666      00
 19667              	.LVL1657:
 19668              	.L1095:
 19669              	.LBE20415:
 19670              	.LBE20414:
 19671              	.LBE20400:
 19672              	.LBE20399:
 19673              	.LBE20398:
 19674              	.LBE20397:
 19675              	.LBE20396:
 19676              	.LBE20305:
 19677              	.LBE20304:
 19678              	.LBB20437:
 19679              	.LBB20438:
  46:/usr/include/boost/exception/exception.hpp ****                 return *this;
 19680              		.loc 7 46 0
 19681 0290 488B6C24 		movq	8(%rsp), %rbp
 19681      08
GAS LISTING /tmp/ccvmoMuv.s 			page 814


 19682              	.LVL1658:
 19683              	.LBB20439:
 19684              	.LBB20440:
 19685              	.LBB20441:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 19686              		.loc 7 71 0
 19687 0295 4885ED   		testq	%rbp, %rbp
 19688 0298 7443     		je	.L1158
  72:/usr/include/boost/exception/exception.hpp ****                 }
 19689              		.loc 7 72 0
 19690 029a 488B4500 		movq	0(%rbp), %rax
 19691 029e 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7add_refEv(%rip), %rdx
 19691      000000
 19692 02a5 488B4018 		movq	24(%rax), %rax
 19693 02a9 4839D0   		cmpq	%rdx, %rax
 19694 02ac 0F851302 		jne	.L1109
 19694      0000
 19695              	.LVL1659:
 19696              	.LBB20442:
 19697              	.LBB20443:
 162:/usr/include/boost/exception/info.hpp ****                 }
 19698              		.loc 3 162 0
 19699 02b2 83455801 		addl	$1, 88(%rbp)
 19700              	.LVL1660:
 19701              	.LBE20443:
 19702              	.LBE20442:
 19703              	.LBE20441:
 19704              	.LBE20440:
 19705              	.LBE20439:
 19706              	.LBE20438:
 19707              	.LBE20437:
 19708              	.LBB20448:
 19709              	.LBB20449:
 19710              	.LBB20450:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 19711              		.loc 7 78 0
 19712 02b6 4989EC   		movq	%rbp, %r12
 19713              	.LVL1661:
 19714              	.L1108:
 19715 02b9 498B0424 		movq	(%r12), %rax
 19716 02bd 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 19716      000000
 19717 02c4 488B4020 		movq	32(%rax), %rax
 19718 02c8 4839D0   		cmpq	%rdx, %rax
 19719 02cb 0F85AA01 		jne	.L1112
 19719      0000
 19720              	.LVL1662:
 19721              	.LBB20451:
 19722              	.LBB20452:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 19723              		.loc 3 168 0
 19724 02d1 41836C24 		subl	$1, 88(%r12)
 19724      5801
 19725 02d7 0F841C01 		je	.L1162
 19725      0000
 19726              	.LVL1663:
 19727              	.L1158:
GAS LISTING /tmp/ccvmoMuv.s 			page 815


 19728 02dd 488B4424 		movq	80(%rsp), %rax
 19728      50
 19729 02e2 488B4C24 		movq	88(%rsp), %rcx
 19729      58
 19730 02e7 8B542460 		movl	96(%rsp), %edx
 19731              	.LVL1664:
 19732              	.L1083:
 19733              	.LBE20452:
 19734              	.LBE20451:
 19735              	.LBE20450:
 19736              	.LBE20449:
 19737              	.LBE20448:
 19738              	.LBE20489:
 19739              	.LBB20490:
 19740              	.LBB20491:
 19741              	.LBB20492:
 19742              	.LBB20493:
 19743              	.LBB20494:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 19744              		.loc 7 78 0
 19745 02eb 4C8B6318 		movq	24(%rbx), %r12
 19746              	.LBE20494:
 19747              	.LBE20493:
 19748              	.LBE20492:
 19749              	.LBE20491:
 19750              	.LBE20490:
 440:/usr/include/boost/exception/exception.hpp ****             a->throw_line_ = b->throw_line_;
 19751              		.loc 7 440 0
 19752 02ef 48894B28 		movq	%rcx, 40(%rbx)
 441:/usr/include/boost/exception/exception.hpp ****             a->throw_function_ = b->throw_function_;
 19753              		.loc 7 441 0
 19754 02f3 895330   		movl	%edx, 48(%rbx)
 442:/usr/include/boost/exception/exception.hpp ****             a->data_ = data;
 19755              		.loc 7 442 0
 19756 02f6 48894320 		movq	%rax, 32(%rbx)
 19757              	.LVL1665:
 19758              	.LBB20539:
 19759              	.LBB20535:
 19760              	.LBB20531:
 19761              	.LBB20520:
 19762              	.LBB20517:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 19763              		.loc 7 78 0
 19764 02fa 4D85E4   		testq	%r12, %r12
 19765 02fd 7424     		je	.L1115
 19766 02ff 498B0424 		movq	(%r12), %rax
 19767 0303 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 19767      000000
 19768 030a 488B4020 		movq	32(%rax), %rax
 19769 030e 4839D0   		cmpq	%rdx, %rax
 19770 0311 0F85A401 		jne	.L1116
 19770      0000
 19771              	.LVL1666:
 19772              	.LBB20495:
 19773              	.LBB20496:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 19774              		.loc 3 168 0
GAS LISTING /tmp/ccvmoMuv.s 			page 816


 19775 0317 41836C24 		subl	$1, 88(%r12)
 19775      5801
 19776 031d 0F849600 		je	.L1163
 19776      0000
 19777              	.LVL1667:
 19778              	.L1115:
 19779              	.LBE20496:
 19780              	.LBE20495:
 19781              	.LBE20517:
 19782              	.LBE20520:
 19783              	.LBB20521:
 19784              	.LBB20522:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 19785              		.loc 7 71 0
 19786 0323 4885ED   		testq	%rbp, %rbp
 19787              	.LBE20522:
 19788              	.LBE20521:
  54:/usr/include/boost/exception/exception.hpp ****                 add_ref();
 19789              		.loc 7 54 0
 19790 0326 48896B18 		movq	%rbp, 24(%rbx)
 19791              	.LVL1668:
 19792              	.LBB20527:
 19793              	.LBB20525:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 19794              		.loc 7 71 0
 19795 032a 7436     		je	.L1122
  72:/usr/include/boost/exception/exception.hpp ****                 }
 19796              		.loc 7 72 0
 19797 032c 488B4500 		movq	0(%rbp), %rax
 19798 0330 488D0D00 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7add_refEv(%rip), %rcx
 19798      000000
 19799 0337 488B5018 		movq	24(%rax), %rdx
 19800 033b 4839CA   		cmpq	%rcx, %rdx
 19801 033e 0F855F01 		jne	.L1123
 19801      0000
 19802              	.LVL1669:
 19803              	.LBB20523:
 19804              	.LBB20524:
 162:/usr/include/boost/exception/info.hpp ****                 }
 19805              		.loc 3 162 0
 19806 0344 83455801 		addl	$1, 88(%rbp)
 19807              	.LVL1670:
 19808              	.L1124:
 19809              	.LBE20524:
 19810              	.LBE20523:
 19811              	.LBE20525:
 19812              	.LBE20527:
 19813              	.LBE20531:
 19814              	.LBE20535:
 19815              	.LBE20539:
 19816              	.LBB20540:
 19817              	.LBB20541:
 19818              	.LBB20542:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 19819              		.loc 7 78 0
 19820 0348 488B4020 		movq	32(%rax), %rax
 19821 034c 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
GAS LISTING /tmp/ccvmoMuv.s 			page 817


 19821      000000
 19822 0353 4839D0   		cmpq	%rdx, %rax
 19823 0356 0F855501 		jne	.L1164
 19823      0000
 19824              	.LVL1671:
 19825              	.LBB20543:
 19826              	.LBB20544:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 19827              		.loc 3 168 0
 19828 035c 836D5801 		subl	$1, 88(%rbp)
 19829 0360 741E     		je	.L1165
 19830              	.LVL1672:
 19831              	.L1122:
 19832              	.LBE20544:
 19833              	.LBE20543:
 19834              	.LBE20542:
 19835              	.LBE20541:
 19836              	.LBE20540:
 19837              	.LBE20580:
 19838              	.LBE20586:
 19839              	.LBE20593:
 19840              	.LBE20597:
 19841              	.LBE20603:
 19842              		.loc 46 69 0
 19843 0362 4C89EF   		movq	%r13, %rdi
 19844 0365 E8000000 		call	_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev
 19844      00
 19845              	.LVL1673:
 19846 036a 488D1500 		leaq	_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED
 19846      000000
 19847 0371 488D3500 		leaq	_ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEE
 19847      000000
 19848 0378 4889DF   		movq	%rbx, %rdi
 19849              	.LEHB98:
 19850 037b E8000000 		call	__cxa_throw@PLT
 19850      00
 19851              	.LVL1674:
 19852              	.LEHE98:
 19853              	.L1165:
 19854              	.LBB20604:
 19855              	.LBB20598:
 19856              	.LBB20594:
 19857              	.LBB20587:
 19858              	.LBB20581:
 19859              	.LBB20569:
 19860              	.LBB20567:
 19861              	.LBB20565:
 19862              	.LBB20564:
 19863              	.LBB20563:
 19864              	.LBB20545:
 19865              	.LBB20546:
 104:/usr/include/boost/exception/info.hpp ****                 }
 19866              		.loc 3 104 0
 19867 0380 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 19867      000000
 19868 0387 488B7D38 		movq	56(%rbp), %rdi
 19869 038b 48894500 		movq	%rax, 0(%rbp)
GAS LISTING /tmp/ccvmoMuv.s 			page 818


 19870              	.LVL1675:
 19871              	.LBB20547:
 19872              	.LBB20548:
 19873              	.LBB20549:
 19874              	.LBB20550:
 19875              	.LBB20551:
 19876              	.LBB20552:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 19877              		.loc 10 152 0
 19878 038f 488D4548 		leaq	72(%rbp), %rax
 19879              	.LBE20552:
 19880              	.LBE20551:
 19881              	.LBE20550:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 19882              		.loc 10 180 0
 19883 0393 4839C7   		cmpq	%rax, %rdi
 19884 0396 7405     		je	.L1126
 19885              	.LVL1676:
 19886              	.LBB20553:
 19887              	.LBB20554:
 19888              	.LBB20555:
 19889              	.LBB20556:
 19890              		.loc 12 110 0
 19891 0398 E8000000 		call	_ZdlPv@PLT
 19891      00
 19892              	.LVL1677:
 19893              	.L1126:
 19894              	.LBE20556:
 19895              	.LBE20555:
 19896              	.LBE20554:
 19897              	.LBE20553:
 19898              	.LBE20549:
 19899              	.LBE20548:
 19900              	.LBE20547:
 19901              	.LBB20557:
 19902              	.LBB20558:
 19903              	.LBB20559:
 19904              	.LBB20560:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 19905              		.loc 19 873 0
 19906 039d 488B7518 		movq	24(%rbp), %rsi
 19907              	.LBE20560:
 19908              	.LBE20559:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 19909              		.loc 36 96 0
 19910 03a1 488D7D08 		leaq	8(%rbp), %rdi
 19911              	.LVL1678:
 19912              	.LBB20562:
 19913              	.LBB20561:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 19914              		.loc 19 873 0
 19915 03a5 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 19915      00
 19916              	.LVL1679:
 19917              	.LBE20561:
 19918              	.LBE20562:
 19919              	.LBE20558:
GAS LISTING /tmp/ccvmoMuv.s 			page 819


 19920              	.LBE20557:
 19921              	.LBE20546:
 19922              	.LBE20545:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 19923              		.loc 3 172 0
 19924 03aa BE600000 		movl	$96, %esi
 19924      00
 19925 03af 4889EF   		movq	%rbp, %rdi
 19926 03b2 E8000000 		call	_ZdlPvm@PLT
 19926      00
 19927              	.LVL1680:
 19928 03b7 EBA9     		jmp	.L1122
 19929              	.LVL1681:
 19930              	.L1163:
 19931              	.LBE20563:
 19932              	.LBE20564:
 19933              	.LBE20565:
 19934              	.LBE20567:
 19935              	.LBE20569:
 19936              	.LBB20570:
 19937              	.LBB20536:
 19938              	.LBB20532:
 19939              	.LBB20528:
 19940              	.LBB20518:
 19941              	.LBB20516:
 19942              	.LBB20515:
 19943              	.LBB20497:
 19944              	.LBB20498:
 104:/usr/include/boost/exception/info.hpp ****                 }
 19945              		.loc 3 104 0
 19946 03b9 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 19946      000000
 19947 03c0 498B7C24 		movq	56(%r12), %rdi
 19947      38
 19948 03c5 49890424 		movq	%rax, (%r12)
 19949              	.LVL1682:
 19950              	.LBB20499:
 19951              	.LBB20500:
 19952              	.LBB20501:
 19953              	.LBB20502:
 19954              	.LBB20503:
 19955              	.LBB20504:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 19956              		.loc 10 152 0
 19957 03c9 498D4424 		leaq	72(%r12), %rax
 19957      48
 19958              	.LBE20504:
 19959              	.LBE20503:
 19960              	.LBE20502:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 19961              		.loc 10 180 0
 19962 03ce 4839C7   		cmpq	%rax, %rdi
 19963 03d1 7405     		je	.L1118
 19964              	.LVL1683:
 19965              	.LBB20505:
 19966              	.LBB20506:
 19967              	.LBB20507:
GAS LISTING /tmp/ccvmoMuv.s 			page 820


 19968              	.LBB20508:
 19969              		.loc 12 110 0
 19970 03d3 E8000000 		call	_ZdlPv@PLT
 19970      00
 19971              	.LVL1684:
 19972              	.L1118:
 19973              	.LBE20508:
 19974              	.LBE20507:
 19975              	.LBE20506:
 19976              	.LBE20505:
 19977              	.LBE20501:
 19978              	.LBE20500:
 19979              	.LBE20499:
 19980              	.LBB20509:
 19981              	.LBB20510:
 19982              	.LBB20511:
 19983              	.LBB20512:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 19984              		.loc 19 873 0
 19985 03d8 498B7424 		movq	24(%r12), %rsi
 19985      18
 19986              	.LBE20512:
 19987              	.LBE20511:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 19988              		.loc 36 96 0
 19989 03dd 498D7C24 		leaq	8(%r12), %rdi
 19989      08
 19990              	.LVL1685:
 19991              	.LBB20514:
 19992              	.LBB20513:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 19993              		.loc 19 873 0
 19994 03e2 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 19994      00
 19995              	.LVL1686:
 19996              	.LBE20513:
 19997              	.LBE20514:
 19998              	.LBE20510:
 19999              	.LBE20509:
 20000              	.LBE20498:
 20001              	.LBE20497:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 20002              		.loc 3 172 0
 20003 03e7 BE600000 		movl	$96, %esi
 20003      00
 20004 03ec 4C89E7   		movq	%r12, %rdi
 20005 03ef E8000000 		call	_ZdlPvm@PLT
 20005      00
 20006              	.LVL1687:
 20007 03f4 E92AFFFF 		jmp	.L1115
 20007      FF
 20008              	.LVL1688:
 20009              	.L1162:
 20010              	.LBE20515:
 20011              	.LBE20516:
 20012              	.LBE20518:
 20013              	.LBE20528:
GAS LISTING /tmp/ccvmoMuv.s 			page 821


 20014              	.LBE20532:
 20015              	.LBE20536:
 20016              	.LBE20570:
 20017              	.LBB20571:
 20018              	.LBB20479:
 20019              	.LBB20476:
 20020              	.LBB20473:
 20021              	.LBB20472:
 20022              	.LBB20471:
 20023              	.LBB20453:
 20024              	.LBB20454:
 104:/usr/include/boost/exception/info.hpp ****                 }
 20025              		.loc 3 104 0
 20026 03f9 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 20026      000000
 20027 0400 498B7C24 		movq	56(%r12), %rdi
 20027      38
 20028 0405 49890424 		movq	%rax, (%r12)
 20029              	.LVL1689:
 20030              	.LBB20455:
 20031              	.LBB20456:
 20032              	.LBB20457:
 20033              	.LBB20458:
 20034              	.LBB20459:
 20035              	.LBB20460:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 20036              		.loc 10 152 0
 20037 0409 498D4424 		leaq	72(%r12), %rax
 20037      48
 20038              	.LBE20460:
 20039              	.LBE20459:
 20040              	.LBE20458:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 20041              		.loc 10 180 0
 20042 040e 4839C7   		cmpq	%rax, %rdi
 20043 0411 7405     		je	.L1113
 20044              	.LVL1690:
 20045              	.LBB20461:
 20046              	.LBB20462:
 20047              	.LBB20463:
 20048              	.LBB20464:
 20049              		.loc 12 110 0
 20050 0413 E8000000 		call	_ZdlPv@PLT
 20050      00
 20051              	.LVL1691:
 20052              	.L1113:
 20053              	.LBE20464:
 20054              	.LBE20463:
 20055              	.LBE20462:
 20056              	.LBE20461:
 20057              	.LBE20457:
 20058              	.LBE20456:
 20059              	.LBE20455:
 20060              	.LBB20465:
 20061              	.LBB20466:
 20062              	.LBB20467:
 20063              	.LBB20468:
GAS LISTING /tmp/ccvmoMuv.s 			page 822


 873:/usr/include/c++/6/bits/stl_tree.h **** 
 20064              		.loc 19 873 0
 20065 0418 498B7424 		movq	24(%r12), %rsi
 20065      18
 20066              	.LBE20468:
 20067              	.LBE20467:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 20068              		.loc 36 96 0
 20069 041d 498D7C24 		leaq	8(%r12), %rdi
 20069      08
 20070              	.LVL1692:
 20071              	.LBB20470:
 20072              	.LBB20469:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 20073              		.loc 19 873 0
 20074 0422 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 20074      00
 20075              	.LVL1693:
 20076              	.LBE20469:
 20077              	.LBE20470:
 20078              	.LBE20466:
 20079              	.LBE20465:
 20080              	.LBE20454:
 20081              	.LBE20453:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 20082              		.loc 3 172 0
 20083 0427 BE600000 		movl	$96, %esi
 20083      00
 20084 042c 4C89E7   		movq	%r12, %rdi
 20085 042f E8000000 		call	_ZdlPvm@PLT
 20085      00
 20086              	.LVL1694:
 20087 0434 488B4424 		movq	80(%rsp), %rax
 20087      50
 20088 0439 488B4C24 		movq	88(%rsp), %rcx
 20088      58
 20089 043e 8B542460 		movl	96(%rsp), %edx
 20090 0442 E9A4FEFF 		jmp	.L1083
 20090      FF
 20091              	.LVL1695:
 20092              	.L1161:
 20093 0447 498B7F38 		movq	56(%r15), %rdi
 20094              	.LBE20471:
 20095              	.LBE20472:
 20096              	.LBE20473:
 20097              	.LBE20476:
 20098              	.LBE20479:
 20099              	.LBB20480:
 20100              	.LBB20434:
 20101              	.LBB20427:
 20102              	.LBB20390:
 20103              	.LBB20385:
 20104              	.LBB20374:
 20105              	.LBB20371:
 20106              	.LBB20370:
 20107              	.LBB20349:
 20108              	.LBB20350:
GAS LISTING /tmp/ccvmoMuv.s 			page 823


 20109              	.LBB20351:
 20110              	.LBB20352:
 20111              	.LBB20353:
 20112              	.LBB20354:
 20113              	.LBB20355:
 20114              	.LBB20356:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 20115              		.loc 10 152 0
 20116 044b 498D4748 		leaq	72(%r15), %rax
 20117              	.LBE20356:
 20118              	.LBE20355:
 20119              	.LBE20354:
 20120              	.LBE20353:
 20121              	.LBE20352:
 20122              	.LBE20351:
 104:/usr/include/boost/exception/info.hpp ****                 }
 20123              		.loc 3 104 0
 20124 044f 498917   		movq	%rdx, (%r15)
 20125              	.LVL1696:
 20126              	.LBB20363:
 20127              	.LBB20362:
 20128              	.LBB20361:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 20129              		.loc 10 180 0
 20130 0452 4839C7   		cmpq	%rax, %rdi
 20131 0455 7405     		je	.L1091
 20132              	.LVL1697:
 20133              	.LBB20357:
 20134              	.LBB20358:
 20135              	.LBB20359:
 20136              	.LBB20360:
 20137              		.loc 12 110 0
 20138 0457 E8000000 		call	_ZdlPv@PLT
 20138      00
 20139              	.LVL1698:
 20140              	.L1091:
 20141              	.LBE20360:
 20142              	.LBE20359:
 20143              	.LBE20358:
 20144              	.LBE20357:
 20145              	.LBE20361:
 20146              	.LBE20362:
 20147              	.LBE20363:
 20148              	.LBB20364:
 20149              	.LBB20365:
 20150              	.LBB20366:
 20151              	.LBB20367:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 20152              		.loc 19 873 0
 20153 045c 498B7718 		movq	24(%r15), %rsi
 20154              	.LBE20367:
 20155              	.LBE20366:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 20156              		.loc 36 96 0
 20157 0460 498D7F08 		leaq	8(%r15), %rdi
 20158              	.LVL1699:
 20159              	.LBB20369:
GAS LISTING /tmp/ccvmoMuv.s 			page 824


 20160              	.LBB20368:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 20161              		.loc 19 873 0
 20162 0464 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 20162      00
 20163              	.LVL1700:
 20164              	.LBE20368:
 20165              	.LBE20369:
 20166              	.LBE20365:
 20167              	.LBE20364:
 20168              	.LBE20350:
 20169              	.LBE20349:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 20170              		.loc 3 172 0
 20171 0469 BE600000 		movl	$96, %esi
 20171      00
 20172 046e 4C89FF   		movq	%r15, %rdi
 20173 0471 E8000000 		call	_ZdlPvm@PLT
 20173      00
 20174              	.LVL1701:
 20175 0476 E92CFDFF 		jmp	.L1088
 20175      FF
 20176              	.LVL1702:
 20177              	.L1112:
 20178              	.LBE20370:
 20179              	.LBE20371:
 20180              	.LBE20374:
 20181              	.LBE20385:
 20182              	.LBE20390:
 20183              	.LBE20427:
 20184              	.LBE20434:
 20185              	.LBE20480:
 20186              	.LBB20481:
 20187              	.LBB20477:
 20188              	.LBB20474:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 20189              		.loc 7 78 0
 20190 047b 4C89E7   		movq	%r12, %rdi
 20191 047e FFD0     		call	*%rax
 20192              	.LVL1703:
 20193 0480 E958FEFF 		jmp	.L1158
 20193      FF
 20194              	.LVL1704:
 20195              	.L1086:
 20196              	.LBE20474:
 20197              	.LBE20477:
 20198              	.LBE20481:
 439:/usr/include/boost/exception/exception.hpp ****             a->throw_file_ = b->throw_file_;
 20199              		.loc 7 439 0
 20200 0485 488D7C24 		leaq	8(%rsp), %rdi
 20200      08
 20201 048a 4C89E6   		movq	%r12, %rsi
 20202              	.LEHB99:
 20203 048d FFD0     		call	*%rax
 20204              	.LVL1705:
 20205              	.LEHE99:
 20206 048f E9FCFDFF 		jmp	.L1095
GAS LISTING /tmp/ccvmoMuv.s 			page 825


 20206      FF
 20207              	.LVL1706:
 20208              	.L1080:
 20209              	.LBE20571:
 20210              	.LBE20581:
 20211              	.LBE20587:
 20212              	.LBB20588:
 20213              	.LBB20291:
 20214              	.LBB20285:
 20215              	.LBB20280:
 20216              	.LBB20278:
 20217              	.LBB20276:
 20218              	.LBB20274:
  72:/usr/include/boost/exception/exception.hpp ****                 }
 20219              		.loc 7 72 0
 20220 0494 4C89E7   		movq	%r12, %rdi
 20221              	.LEHB100:
 20222 0497 FFD0     		call	*%rax
 20223              	.LVL1707:
 20224              	.LEHE100:
 20225 0499 4C8B6424 		movq	72(%rsp), %r12
 20225      48
 20226 049e E91DFCFF 		jmp	.L1079
 20226      FF
 20227              	.LVL1708:
 20228              	.L1123:
 20229              	.LBE20274:
 20230              	.LBE20276:
 20231              	.LBE20278:
 20232              	.LBE20280:
 20233              	.LBE20285:
 20234              	.LBE20291:
 20235              	.LBE20588:
 20236              	.LBB20589:
 20237              	.LBB20582:
 20238              	.LBB20572:
 20239              	.LBB20537:
 20240              	.LBB20533:
 20241              	.LBB20529:
 20242              	.LBB20526:
 20243 04a3 4889EF   		movq	%rbp, %rdi
 20244              	.LEHB101:
 20245 04a6 FFD2     		call	*%rdx
 20246              	.LVL1709:
 20247              	.LEHE101:
 20248 04a8 488B4500 		movq	0(%rbp), %rax
 20249 04ac E997FEFF 		jmp	.L1124
 20249      FF
 20250              	.LVL1710:
 20251              	.L1164:
 20252              	.LBE20526:
 20253              	.LBE20529:
 20254              	.LBE20533:
 20255              	.LBE20537:
 20256              	.LBE20572:
 20257              	.LBB20573:
 20258              	.LBB20568:
GAS LISTING /tmp/ccvmoMuv.s 			page 826


 20259              	.LBB20566:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 20260              		.loc 7 78 0
 20261 04b1 4889EF   		movq	%rbp, %rdi
 20262 04b4 FFD0     		call	*%rax
 20263              	.LVL1711:
 20264 04b6 E9A7FEFF 		jmp	.L1122
 20264      FF
 20265              	.LVL1712:
 20266              	.L1116:
 20267              	.LBE20566:
 20268              	.LBE20568:
 20269              	.LBE20573:
 20270              	.LBB20574:
 20271              	.LBB20538:
 20272              	.LBB20534:
 20273              	.LBB20530:
 20274              	.LBB20519:
 20275 04bb 4C89E7   		movq	%r12, %rdi
 20276              	.LEHB102:
 20277 04be FFD0     		call	*%rax
 20278              	.LVL1713:
 20279              	.LEHE102:
 20280 04c0 E95EFEFF 		jmp	.L1115
 20280      FF
 20281              	.LVL1714:
 20282              	.L1109:
 20283              	.LBE20519:
 20284              	.LBE20530:
 20285              	.LBE20534:
 20286              	.LBE20538:
 20287              	.LBE20574:
 20288              	.LBB20575:
 20289              	.LBB20482:
 20290              	.LBB20447:
 20291              	.LBB20446:
 20292              	.LBB20445:
 20293              	.LBB20444:
  72:/usr/include/boost/exception/exception.hpp ****                 }
 20294              		.loc 7 72 0
 20295 04c5 4889EF   		movq	%rbp, %rdi
 20296              	.LEHB103:
 20297 04c8 FFD0     		call	*%rax
 20298              	.LVL1715:
 20299              	.LEHE103:
 20300              	.LBE20444:
 20301              	.LBE20445:
 20302              	.LBE20446:
 20303              	.LBE20447:
 20304              	.LBE20482:
 20305              	.LBB20483:
 20306              	.LBB20478:
 20307              	.LBB20475:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 20308              		.loc 7 78 0
 20309 04ca 4C8B6424 		movq	8(%rsp), %r12
 20309      08
GAS LISTING /tmp/ccvmoMuv.s 			page 827


 20310 04cf 4D85E4   		testq	%r12, %r12
 20311 04d2 0F8405FE 		je	.L1158
 20311      FFFF
 20312 04d8 E9DCFDFF 		jmp	.L1108
 20312      FF
 20313              	.LVL1716:
 20314              	.L1092:
 20315              	.LBE20475:
 20316              	.LBE20478:
 20317              	.LBE20483:
 20318              	.LBB20484:
 20319              	.LBB20435:
 20320              	.LBB20428:
 20321              	.LBB20391:
 20322              	.LBB20386:
 20323              	.LBB20383:
  72:/usr/include/boost/exception/exception.hpp ****                 }
 20324              		.loc 7 72 0
 20325 04dd 4889EF   		movq	%rbp, %rdi
 20326              	.LEHB104:
 20327 04e0 FFD0     		call	*%rax
 20328              	.LVL1717:
 20329 04e2 E9E1FCFF 		jmp	.L1093
 20329      FF
 20330              	.LVL1718:
 20331              	.L1089:
 20332              	.LBE20383:
 20333              	.LBE20386:
 20334              	.LBB20387:
 20335              	.LBB20375:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 20336              		.loc 7 78 0
 20337 04e7 4C89FF   		movq	%r15, %rdi
 20338 04ea FFD0     		call	*%rax
 20339              	.LVL1719:
 20340              	.LEHE104:
 20341 04ec E9B6FCFF 		jmp	.L1088
 20341      FF
 20342              	.LVL1720:
 20343              	.L1096:
 20344              	.LBE20375:
 20345              	.LBE20387:
 20346              	.LBE20391:
 20347              	.LBE20428:
 20348              	.LBB20429:
 20349              	.LBB20425:
 20350              	.LBB20423:
 20351              	.LBB20421:
 20352              	.LBB20419:
 20353              	.LBB20416:
 20354              	.LBB20405:
 20355              	.LBB20404:
 390:/usr/include/c++/6/bits/stl_tree.h **** 	}
 20356              		.loc 19 390 0
 20357 04f1 48C74424 		movq	$0, 24(%rsp)
 20357      18000000 
 20357      00
GAS LISTING /tmp/ccvmoMuv.s 			page 828


 20358 04fa E911FDFF 		jmp	.L1097
 20358      FF
 20359              	.LVL1721:
 20360              	.L1138:
 20361 04ff 4989C4   		movq	%rax, %r12
 20362              	.LVL1722:
 20363              	.L1104:
 20364              	.LBE20404:
 20365              	.LBE20405:
 20366              	.LBE20416:
 20367              	.LBE20419:
 20368              	.LBE20421:
 20369              	.LBE20423:
 20370              	.LBE20425:
 20371              	.LBE20429:
 20372              	.LBE20435:
 20373              	.LBE20484:
 20374              	.LBE20575:
 20375              	.LBE20582:
 20376              	.LBE20589:
 474:/usr/include/boost/exception/exception.hpp ****                 {
 20377              		.loc 7 474 0
 20378 0502 4889DF   		movq	%rbx, %rdi
 20379 0505 E8000000 		call	_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED2Ev
 20379      00
 20380              	.LVL1723:
 20381              	.L1085:
 20382              	.LBE20594:
 20383              	.LBE20598:
 20384              	.LBE20604:
 20385              		.loc 46 69 0 discriminator 3
 20386 050a 4C89EF   		movq	%r13, %rdi
 20387 050d E8000000 		call	_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev
 20387      00
 20388              	.LVL1724:
 20389 0512 4889DF   		movq	%rbx, %rdi
 20390 0515 E8000000 		call	__cxa_free_exception@PLT
 20390      00
 20391              	.LVL1725:
 20392 051a 4C89E7   		movq	%r12, %rdi
 20393              	.LEHB105:
 20394 051d E8000000 		call	_Unwind_Resume@PLT
 20394      00
 20395              	.LVL1726:
 20396              	.LEHE105:
 20397              	.L1137:
 20398              	.LBB20605:
 20399              	.LBB20599:
 20400              	.LBB20595:
 20401              	.LBB20590:
 20402              	.LBB20583:
 20403              	.LBB20576:
 20404              	.LBB20485:
 20405              	.LBB20436:
 20406              	.LBB20430:
 20407              	.LBB20426:
 20408              	.LBB20424:
GAS LISTING /tmp/ccvmoMuv.s 			page 829


 20409              	.LBB20422:
 20410              	.LBB20420:
 20411              	.LBB20417:
 20412              	.LBB20418:
 398:/usr/include/c++/6/bits/stl_tree.h **** 
 20413              		.loc 19 398 0
 20414 0522 488B7424 		movq	16(%rsp), %rsi
 20414      10
 20415 0527 488B7C24 		movq	32(%rsp), %rdi
 20415      20
 20416 052c 4989C4   		movq	%rax, %r12
 20417              	.LVL1727:
 20418 052f E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 20418      00
 20419              	.LVL1728:
 20420              	.L1102:
 20421              	.LBE20418:
 20422              	.LBE20417:
 20423              	.LBE20420:
 20424              	.LBE20422:
 20425              	.LBE20424:
 20426              	.LBE20426:
 20427              	.LBE20430:
 20428              	.LBB20431:
 20429              	.LBB20432:
 20430              	.LBB20433:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 20431              		.loc 7 78 0
 20432 0534 488B7C24 		movq	8(%rsp), %rdi
 20432      08
 20433 0539 4885FF   		testq	%rdi, %rdi
 20434 053c 74C4     		je	.L1104
 20435 053e 488B07   		movq	(%rdi), %rax
 20436 0541 FF5020   		call	*32(%rax)
 20437              	.LVL1729:
 20438 0544 EBBC     		jmp	.L1104
 20439              	.LVL1730:
 20440              	.L1136:
 20441 0546 4989C4   		movq	%rax, %r12
 20442              	.LVL1731:
 20443 0549 EBE9     		jmp	.L1102
 20444              	.LVL1732:
 20445              	.L1135:
 20446              	.LBE20433:
 20447              	.LBE20432:
 20448              	.LBE20431:
 20449              	.LBE20436:
 20450              	.LBE20485:
 20451              	.LBB20486:
 20452              	.LBB20487:
 20453              	.LBB20488:
 20454 054b 488B7C24 		movq	8(%rsp), %rdi
 20454      08
 20455 0550 4989C4   		movq	%rax, %r12
 20456              	.LVL1733:
 20457 0553 4885FF   		testq	%rdi, %rdi
 20458 0556 7406     		je	.L1129
GAS LISTING /tmp/ccvmoMuv.s 			page 830


 20459 0558 488B07   		movq	(%rdi), %rax
 20460 055b FF5020   		call	*32(%rax)
 20461              	.LVL1734:
 20462              	.L1129:
 20463              	.LBE20488:
 20464              	.LBE20487:
 20465              	.LBE20486:
 20466              	.LBE20576:
 20467              	.LBB20577:
 20468              	.LBB20578:
 20469              	.LBB20579:
 20470 055e 488B4500 		movq	0(%rbp), %rax
 20471 0562 4889EF   		movq	%rbp, %rdi
 20472 0565 FF5020   		call	*32(%rax)
 20473              	.LVL1735:
 20474 0568 EB98     		jmp	.L1104
 20475              	.LVL1736:
 20476              	.L1139:
 20477 056a 4885ED   		testq	%rbp, %rbp
 20478 056d 4989C4   		movq	%rax, %r12
 20479              	.LVL1737:
 20480 0570 75EC     		jne	.L1129
 20481 0572 EB8E     		jmp	.L1104
 20482              	.LVL1738:
 20483              	.L1140:
 20484 0574 4989C4   		movq	%rax, %r12
 20485 0577 EBE5     		jmp	.L1129
 20486              	.LVL1739:
 20487              	.L1134:
 20488              	.LBE20579:
 20489              	.LBE20578:
 20490              	.LBE20577:
 20491              	.LBE20583:
 20492              	.LBE20590:
 20493              	.LBB20591:
 20494              	.LBB20292:
 20495              	.LBB20293:
 20496              		.loc 13 696 0
 20497 0579 4889DF   		movq	%rbx, %rdi
 20498 057c 4989C4   		movq	%rax, %r12
 20499              	.LVL1740:
 20500 057f 48892B   		movq	%rbp, (%rbx)
 20501 0582 E8000000 		call	_ZNSt13runtime_errorD2Ev@PLT
 20501      00
 20502              	.LVL1741:
 20503 0587 EB81     		jmp	.L1085
 20504              	.LBE20293:
 20505              	.LBE20292:
 20506              	.LBE20591:
 20507              	.LBE20595:
 20508              	.LBE20599:
 20509              	.LBE20605:
 20510              		.cfi_endproc
 20511              	.LFE12724:
 20512              		.section	.gcc_except_table
 20513              	.LLSDA12724:
 20514 020d FF       		.byte	0xff
GAS LISTING /tmp/ccvmoMuv.s 			page 831


 20515 020e FF       		.byte	0xff
 20516 020f 01       		.byte	0x1
 20517 0210 3A       		.uleb128 .LLSDACSE12724-.LLSDACSB12724
 20518              	.LLSDACSB12724:
 20519 0211 AB02     		.uleb128 .LEHB96-.LFB12724
 20520 0213 05       		.uleb128 .LEHE96-.LEHB96
 20521 0214 C60A     		.uleb128 .L1136-.LFB12724
 20522 0216 00       		.uleb128 0
 20523 0217 BA04     		.uleb128 .LEHB97-.LFB12724
 20524 0219 05       		.uleb128 .LEHE97-.LEHB97
 20525 021a A20A     		.uleb128 .L1137-.LFB12724
 20526 021c 00       		.uleb128 0
 20527 021d FB06     		.uleb128 .LEHB98-.LFB12724
 20528 021f 05       		.uleb128 .LEHE98-.LEHB98
 20529 0220 00       		.uleb128 0
 20530 0221 00       		.uleb128 0
 20531 0222 8D09     		.uleb128 .LEHB99-.LFB12724
 20532 0224 02       		.uleb128 .LEHE99-.LEHB99
 20533 0225 FF09     		.uleb128 .L1138-.LFB12724
 20534 0227 00       		.uleb128 0
 20535 0228 9709     		.uleb128 .LEHB100-.LFB12724
 20536 022a 02       		.uleb128 .LEHE100-.LEHB100
 20537 022b F90A     		.uleb128 .L1134-.LFB12724
 20538 022d 00       		.uleb128 0
 20539 022e A609     		.uleb128 .LEHB101-.LFB12724
 20540 0230 02       		.uleb128 .LEHE101-.LEHB101
 20541 0231 F40A     		.uleb128 .L1140-.LFB12724
 20542 0233 00       		.uleb128 0
 20543 0234 BE09     		.uleb128 .LEHB102-.LFB12724
 20544 0236 02       		.uleb128 .LEHE102-.LEHB102
 20545 0237 EA0A     		.uleb128 .L1139-.LFB12724
 20546 0239 00       		.uleb128 0
 20547 023a C809     		.uleb128 .LEHB103-.LFB12724
 20548 023c 02       		.uleb128 .LEHE103-.LEHB103
 20549 023d CB0A     		.uleb128 .L1135-.LFB12724
 20550 023f 00       		.uleb128 0
 20551 0240 E009     		.uleb128 .LEHB104-.LFB12724
 20552 0242 0C       		.uleb128 .LEHE104-.LEHB104
 20553 0243 C60A     		.uleb128 .L1136-.LFB12724
 20554 0245 00       		.uleb128 0
 20555 0246 9D0A     		.uleb128 .LEHB105-.LFB12724
 20556 0248 05       		.uleb128 .LEHE105-.LEHB105
 20557 0249 00       		.uleb128 0
 20558 024a 00       		.uleb128 0
 20559              	.LLSDACSE12724:
 20560              		.section	.text._ZN5boost15throw_exceptionINS_17bad_function_callEEEvRKT_,"axG",@progbits,_ZN5boost
 20562              		.section	.text._ZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_
 20563              		.p2align 4,,15
 20564              		.weak	_ZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_13excepti
 20566              	_ZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_13exception_ptrE
 20567              	.LFB12077:
 120:/usr/include/boost/exception/detail/exception_ptr.hpp ****             {
 20568              		.loc 29 120 0
 20569              		.cfi_startproc
 20570              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 20571              		.cfi_lsda 0x1b,.LLSDA12077
 20572              	.LVL1742:
GAS LISTING /tmp/ccvmoMuv.s 			page 832


 20573 0000 4157     		pushq	%r15
 20574              		.cfi_def_cfa_offset 16
 20575              		.cfi_offset 15, -16
 20576 0002 4156     		pushq	%r14
 20577              		.cfi_def_cfa_offset 24
 20578              		.cfi_offset 14, -24
 20579              	.LBB21082:
 20580              	.LBB21083:
 20581              	.LBB21084:
 474:/usr/include/boost/exception/exception.hpp ****                 {
 20582              		.loc 7 474 0
 20583 0004 488D0500 		leaq	72+_ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE(%rip), %rax
 20583      000000
 20584              	.LBE21084:
 20585              	.LBE21083:
 20586              	.LBE21082:
 120:/usr/include/boost/exception/detail/exception_ptr.hpp ****             {
 20587              		.loc 29 120 0
 20588 000b 4155     		pushq	%r13
 20589              		.cfi_def_cfa_offset 32
 20590              		.cfi_offset 13, -32
 20591 000d 4154     		pushq	%r12
 20592              		.cfi_def_cfa_offset 40
 20593              		.cfi_offset 12, -40
 20594              	.LBB21100:
 20595              	.LBB21096:
 20596              	.LBB21092:
 474:/usr/include/boost/exception/exception.hpp ****                 {
 20597              		.loc 7 474 0
 20598 000f 4C8D3D00 		leaq	24+_ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE(%rip), %r15
 20598      000000
 20599              	.LBE21092:
 20600              	.LBE21096:
 20601              	.LBE21100:
 120:/usr/include/boost/exception/detail/exception_ptr.hpp ****             {
 20602              		.loc 29 120 0
 20603 0016 55       		pushq	%rbp
 20604              		.cfi_def_cfa_offset 48
 20605              		.cfi_offset 6, -48
 20606 0017 53       		pushq	%rbx
 20607              		.cfi_def_cfa_offset 56
 20608              		.cfi_offset 3, -56
 20609              	.LBB21101:
 20610              	.LBB21102:
 111:/usr/include/boost/exception/detail/exception_ptr.hpp ****             boost::exception,
 20611              		.loc 29 111 0
 20612 0018 4C8D2500 		leaq	16+_ZTVN5boost16exception_detail14bad_exception_E(%rip), %r12
 20612      000000
 20613 001f 488D2D00 		leaq	48+_ZTVN5boost16exception_detail14bad_exception_E(%rip), %rbp
 20613      000000
 20614              	.LBE21102:
 20615              	.LBE21101:
 20616              	.LBB21114:
 20617              	.LBB21097:
 20618              	.LBB21093:
 474:/usr/include/boost/exception/exception.hpp ****                 {
 20619              		.loc 7 474 0
GAS LISTING /tmp/ccvmoMuv.s 			page 833


 20620 0026 4C8D3500 		leaq	136+_ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE(%rip), %r14
 20620      000000
 20621              	.LBE21093:
 20622              	.LBE21097:
 20623              	.LBE21114:
 120:/usr/include/boost/exception/detail/exception_ptr.hpp ****             {
 20624              		.loc 29 120 0
 20625 002d 4889FB   		movq	%rdi, %rbx
 20626 0030 4881EC88 		subq	$136, %rsp
 20626      000000
 20627              		.cfi_def_cfa_offset 192
 20628              	.LVL1743:
 20629 0037 4C8D2D00 		leaq	16+_ZTVN5boost9exceptionE(%rip), %r13
 20629      000000
 20630              	.LBB21115:
 20631              	.LBB21098:
 20632              	.LBB21094:
 474:/usr/include/boost/exception/exception.hpp ****                 {
 20633              		.loc 7 474 0
 20634 003e 48894424 		movq	%rax, 104(%rsp)
 20634      68
 20635              	.LBE21094:
 20636              	.LBE21098:
 20637              	.LBE21115:
 20638              	.LBB21116:
 20639              	.LBB21117:
 20640              	.LBB21118:
 20641              	.LBB21119:
 238:/usr/include/boost/exception/info.hpp **** 				return x;
 20642              		.loc 3 238 0
 20643 0043 488D0500 		leaq	_ZZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_13excepti
 20643      000000
 20644              	.LBE21119:
 20645              	.LBE21118:
 20646              	.LBE21117:
 20647              	.LBE21116:
 20648              	.LBB21123:
 20649              	.LBB21112:
 20650              	.LBB21103:
 20651              	.LBB21104:
 20652              	.LBB21105:
 20653              	.LBB21106:
 20654              	.LBB21107:
 20655              	.LBB21108:
  28:/usr/include/boost/exception/exception.hpp ****                 {
 20656              		.loc 7 28 0
 20657 004a 48C74424 		movq	$0, 24(%rsp)
 20657      18000000 
 20657      00
 20658              	.LVL1744:
 20659              	.LBE21108:
 20660              	.LBE21107:
 20661              	.LBE21106:
 233:/usr/include/boost/exception/exception.hpp ****             {
 20662              		.loc 7 233 0
 20663 0053 48C74424 		movq	$0, 32(%rsp)
 20663      20000000 
GAS LISTING /tmp/ccvmoMuv.s 			page 834


 20663      00
 20664 005c 48C74424 		movq	$0, 40(%rsp)
 20664      28000000 
 20664      00
 20665              	.LBE21105:
 20666              	.LBE21104:
 20667              	.LBE21103:
 20668              	.LBE21112:
 20669              	.LBE21123:
 20670              	.LBB21124:
 20671              	.LBB21122:
 20672              	.LBB21121:
 20673              	.LBB21120:
 238:/usr/include/boost/exception/info.hpp **** 				return x;
 20674              		.loc 3 238 0
 20675 0065 48894424 		movq	%rax, 80(%rsp)
 20675      50
 20676              	.LBE21120:
 20677              	.LBE21121:
 20678              	.LBE21122:
 20679              	.LBE21124:
 20680              	.LBB21125:
 20681              	.LBB21126:
 20682              	.LBB21127:
 20683              	.LBB21128:
 253:/usr/include/boost/exception/info.hpp **** 				return x;
 20684              		.loc 3 253 0
 20685 006a 488D0500 		leaq	.LC17(%rip), %rax
 20685      000000
 20686              	.LBE21128:
 20687              	.LBE21127:
 20688              	.LBE21126:
 20689              	.LBE21125:
 20690              	.LBB21132:
 20691              	.LBB21113:
 20692              	.LBB21111:
 20693              	.LBB21110:
 20694              	.LBB21109:
 233:/usr/include/boost/exception/exception.hpp ****             {
 20695              		.loc 7 233 0
 20696 0071 C7442430 		movl	$-1, 48(%rsp)
 20696      FFFFFFFF 
 20697              	.LVL1745:
 20698              	.LBE21109:
 20699              	.LBE21110:
 20700              	.LBE21111:
 111:/usr/include/boost/exception/detail/exception_ptr.hpp ****             boost::exception,
 20701              		.loc 29 111 0
 20702 0079 4C896424 		movq	%r12, 16(%rsp)
 20702      10
 20703 007e 48896C24 		movq	%rbp, 56(%rsp)
 20703      38
 20704              	.LVL1746:
 20705              	.LBE21113:
 20706              	.LBE21132:
 20707              	.LBB21133:
 20708              	.LBB21099:
GAS LISTING /tmp/ccvmoMuv.s 			page 835


 20709              	.LBB21095:
 20710              	.LBB21085:
 20711              	.LBB21086:
 20712              	.LBB21087:
 20713              	.LBB21088:
 20714              	.LBB21089:
 20715              	.LBB21090:
 20716              	.LBB21091:
  38:/usr/include/boost/exception/exception.hpp ****                 {
 20717              		.loc 7 38 0
 20718 0083 48C74424 		movq	$0, 72(%rsp)
 20718      48000000 
 20718      00
 20719              	.LVL1747:
 20720              	.LBE21091:
 20721              	.LBE21090:
 20722              	.LBE21089:
 20723              	.LBE21088:
 20724              	.LBE21087:
 20725              	.LBE21086:
 20726              	.LBE21085:
 474:/usr/include/boost/exception/exception.hpp ****                 {
 20727              		.loc 7 474 0
 20728 008c 4C897C24 		movq	%r15, 64(%rsp)
 20728      40
 20729 0091 4C897424 		movq	%r14, 112(%rsp)
 20729      70
 20730              	.LVL1748:
 20731              	.LBE21095:
 20732              	.LBE21099:
 20733              	.LBE21133:
 20734              	.LBB21134:
 20735              	.LBB21131:
 20736              	.LBB21130:
 20737              	.LBB21129:
 253:/usr/include/boost/exception/info.hpp **** 				return x;
 20738              		.loc 3 253 0
 20739 0096 48894424 		movq	%rax, 88(%rsp)
 20739      58
 20740              	.LVL1749:
 20741              	.LBE21129:
 20742              	.LBE21130:
 20743              	.LBE21131:
 20744              	.LBE21134:
 20745              	.LBB21135:
 20746              	.LBB21136:
 20747              	.LBB21137:
 20748              	.LBB21138:
 20749              		.loc 3 268 0
 20750 009b C7442460 		movl	$128, 96(%rsp)
 20750      80000000 
 20751              	.LVL1750:
 20752              	.LBE21138:
 20753              	.LBE21137:
 20754              	.LBE21136:
 20755              	.LBE21135:
 130:/usr/include/boost/exception/detail/exception_ptr.hpp ****             return ep;
GAS LISTING /tmp/ccvmoMuv.s 			page 836


 20756              		.loc 29 130 0
 20757 00a3 0FB60500 		movzbl	_ZGVZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_13exc
 20757      000000
 20758 00aa 84C0     		testb	%al, %al
 20759 00ac 0F843E01 		je	.L1204
 20759      0000
 20760              	.LVL1751:
 20761              	.L1168:
 20762              	.LBB21139:
 20763              	.LBB21140:
 20764              	.LBB21141:
 405:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 20765              		.loc 27 405 0
 20766 00b2 488B0500 		movq	_ZZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_13excepti
 20766      000000
 20767 00b9 488903   		movq	%rax, (%rbx)
 20768              	.LVL1752:
 20769              	.LBB21142:
 20770              	.LBB21143:
 479:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 20771              		.loc 28 479 0
 20772 00bc 488B0500 		movq	8+_ZZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_13excep
 20772      000000
 484:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 20773              		.loc 28 484 0
 20774 00c3 4885C0   		testq	%rax, %rax
 479:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 20775              		.loc 28 479 0
 20776 00c6 48894308 		movq	%rax, 8(%rbx)
 484:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 20777              		.loc 28 484 0
 20778 00ca 7404     		je	.L1180
 20779              	.LVL1753:
 20780              	.LBB21144:
 20781              	.LBB21145:
 20782              	.LBB21146:
 20783              	.LBB21147:
  66:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** }
 20784              		.loc 1 66 0
 20785              	#APP
 20786              	# 66 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 20787              		lock
 20788              		incl 8(%rax)
 20789              	# 0 "" 2
 20790              	.LVL1754:
 20791              	#NO_APP
 20792              	.L1180:
 20793              	.LBE21147:
 20794              	.LBE21146:
 20795              	.LBE21145:
 20796              	.LBE21144:
 20797              	.LBE21143:
 20798              	.LBE21142:
 20799              	.LBE21141:
 20800              	.LBE21140:
 20801              	.LBE21139:
 20802              	.LBB21148:
GAS LISTING /tmp/ccvmoMuv.s 			page 837


 20803              	.LBB21149:
 20804              	.LBB21150:
 20805              	.LBB21151:
 115:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 };
 20806              		.loc 29 115 0
 20807 00d0 488D7C24 		leaq	104(%rsp), %rdi
 20807      68
 20808              	.LBE21151:
 20809              	.LBE21150:
 481:/usr/include/boost/exception/exception.hpp **** 
 20810              		.loc 7 481 0
 20811 00d5 4C897424 		movq	%r14, 112(%rsp)
 20811      70
 20812              	.LVL1755:
 20813              	.LBB21195:
 20814              	.LBB21192:
 115:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 };
 20815              		.loc 29 115 0
 20816 00da 4C896424 		movq	%r12, 64(%rsp)
 20816      40
 20817 00df 48896C24 		movq	%rbp, 104(%rsp)
 20817      68
 20818 00e4 E8000000 		call	_ZNSt13bad_exceptionD2Ev@PLT
 20818      00
 20819              	.LVL1756:
 20820              	.LBB21152:
 20821              	.LBB21153:
 20822              	.LBB21154:
 20823              	.LBB21155:
 20824              	.LBB21156:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 20825              		.loc 7 78 0
 20826 00e9 4C8B7424 		movq	72(%rsp), %r14
 20826      48
 20827              	.LBE21156:
 20828              	.LBE21155:
 20829              	.LBE21154:
 299:/usr/include/boost/exception/exception.hpp ****         {
 20830              		.loc 7 299 0
 20831 00ee 4C896C24 		movq	%r13, 64(%rsp)
 20831      40
 20832              	.LVL1757:
 20833              	.LBB21185:
 20834              	.LBB21182:
 20835              	.LBB21179:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 20836              		.loc 7 78 0
 20837 00f3 4D85F6   		testq	%r14, %r14
 20838 00f6 7422     		je	.L1182
 20839 00f8 498B06   		movq	(%r14), %rax
 20840 00fb 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 20840      000000
 20841 0102 488B4020 		movq	32(%rax), %rax
 20842 0106 4839D0   		cmpq	%rdx, %rax
 20843 0109 0F852902 		jne	.L1183
 20843      0000
 20844              	.LVL1758:
GAS LISTING /tmp/ccvmoMuv.s 			page 838


 20845              	.LBB21157:
 20846              	.LBB21158:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 20847              		.loc 3 168 0
 20848 010f 41836E58 		subl	$1, 88(%r14)
 20848      01
 20849 0114 0F849600 		je	.L1205
 20849      0000
 20850              	.LVL1759:
 20851              	.L1182:
 20852              	.LBE21158:
 20853              	.LBE21157:
 20854              	.LBE21179:
 20855              	.LBE21182:
 20856              	.LBE21185:
 20857              	.LBE21153:
 20858              	.LBE21152:
 20859              	.LBE21192:
 20860              	.LBE21195:
 20861              	.LBE21149:
 20862              	.LBE21148:
 20863              	.LBB21200:
 20864              	.LBB21201:
 115:/usr/include/boost/exception/detail/exception_ptr.hpp ****                 };
 20865              		.loc 29 115 0
 20866 011a 488D7C24 		leaq	56(%rsp), %rdi
 20866      38
 20867 011f 48896C24 		movq	%rbp, 56(%rsp)
 20867      38
 20868 0124 4C896424 		movq	%r12, 16(%rsp)
 20868      10
 20869 0129 E8000000 		call	_ZNSt13bad_exceptionD2Ev@PLT
 20869      00
 20870              	.LVL1760:
 20871              	.LBB21202:
 20872              	.LBB21203:
 20873              	.LBB21204:
 20874              	.LBB21205:
 20875              	.LBB21206:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 20876              		.loc 7 78 0
 20877 012e 488B6C24 		movq	24(%rsp), %rbp
 20877      18
 20878              	.LBE21206:
 20879              	.LBE21205:
 20880              	.LBE21204:
 299:/usr/include/boost/exception/exception.hpp ****         {
 20881              		.loc 7 299 0
 20882 0133 4C896C24 		movq	%r13, 16(%rsp)
 20882      10
 20883              	.LVL1761:
 20884              	.LBB21235:
 20885              	.LBB21232:
 20886              	.LBB21229:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 20887              		.loc 7 78 0
 20888 0138 4885ED   		testq	%rbp, %rbp
GAS LISTING /tmp/ccvmoMuv.s 			page 839


 20889 013b 741E     		je	.L1166
 20890 013d 488B4500 		movq	0(%rbp), %rax
 20891 0141 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv(%rip), %rdx
 20891      000000
 20892 0148 488B4020 		movq	32(%rax), %rax
 20893 014c 4839D0   		cmpq	%rdx, %rax
 20894 014f 0F85F301 		jne	.L1188
 20894      0000
 20895              	.LVL1762:
 20896              	.LBB21207:
 20897              	.LBB21208:
 168:/usr/include/boost/exception/info.hpp ****                     return false;
 20898              		.loc 3 168 0
 20899 0155 836D5801 		subl	$1, 88(%rbp)
 20900 0159 7415     		je	.L1206
 20901              	.LVL1763:
 20902              	.L1166:
 20903              	.LBE21208:
 20904              	.LBE21207:
 20905              	.LBE21229:
 20906              	.LBE21232:
 20907              	.LBE21235:
 20908              	.LBE21203:
 20909              	.LBE21202:
 20910              	.LBE21201:
 20911              	.LBE21200:
 20912              		.loc 29 132 0
 20913 015b 4881C488 		addq	$136, %rsp
 20913      000000
 20914              		.cfi_remember_state
 20915              		.cfi_def_cfa_offset 56
 20916 0162 4889D8   		movq	%rbx, %rax
 20917 0165 5B       		popq	%rbx
 20918              		.cfi_def_cfa_offset 48
 20919              	.LVL1764:
 20920 0166 5D       		popq	%rbp
 20921              		.cfi_def_cfa_offset 40
 20922 0167 415C     		popq	%r12
 20923              		.cfi_def_cfa_offset 32
 20924 0169 415D     		popq	%r13
 20925              		.cfi_def_cfa_offset 24
 20926 016b 415E     		popq	%r14
 20927              		.cfi_def_cfa_offset 16
 20928 016d 415F     		popq	%r15
 20929              		.cfi_def_cfa_offset 8
 20930 016f C3       		ret
 20931              	.LVL1765:
 20932              		.p2align 4,,10
 20933              		.p2align 3
 20934              	.L1206:
 20935              		.cfi_restore_state
 20936              	.LBB21244:
 20937              	.LBB21242:
 20938              	.LBB21240:
 20939              	.LBB21238:
 20940              	.LBB21236:
 20941              	.LBB21233:
GAS LISTING /tmp/ccvmoMuv.s 			page 840


 20942              	.LBB21230:
 20943              	.LBB21228:
 20944              	.LBB21227:
 20945              	.LBB21209:
 20946              	.LBB21210:
 104:/usr/include/boost/exception/info.hpp ****                 }
 20947              		.loc 3 104 0
 20948 0170 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 20948      000000
 20949 0177 488B7D38 		movq	56(%rbp), %rdi
 20950 017b 48894500 		movq	%rax, 0(%rbp)
 20951              	.LVL1766:
 20952              	.LBB21211:
 20953              	.LBB21212:
 20954              	.LBB21213:
 20955              	.LBB21214:
 20956              	.LBB21215:
 20957              	.LBB21216:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 20958              		.loc 10 152 0
 20959 017f 488D4548 		leaq	72(%rbp), %rax
 20960              	.LBE21216:
 20961              	.LBE21215:
 20962              	.LBE21214:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 20963              		.loc 10 180 0
 20964 0183 4839C7   		cmpq	%rax, %rdi
 20965 0186 7405     		je	.L1190
 20966              	.LVL1767:
 20967              	.LBB21217:
 20968              	.LBB21218:
 20969              	.LBB21219:
 20970              	.LBB21220:
 20971              		.loc 12 110 0
 20972 0188 E8000000 		call	_ZdlPv@PLT
 20972      00
 20973              	.LVL1768:
 20974              	.L1190:
 20975              	.LBE21220:
 20976              	.LBE21219:
 20977              	.LBE21218:
 20978              	.LBE21217:
 20979              	.LBE21213:
 20980              	.LBE21212:
 20981              	.LBE21211:
 20982              	.LBB21221:
 20983              	.LBB21222:
 20984              	.LBB21223:
 20985              	.LBB21224:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 20986              		.loc 19 873 0
 20987 018d 488B7518 		movq	24(%rbp), %rsi
 20988              	.LBE21224:
 20989              	.LBE21223:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 20990              		.loc 36 96 0
 20991 0191 488D7D08 		leaq	8(%rbp), %rdi
GAS LISTING /tmp/ccvmoMuv.s 			page 841


 20992              	.LVL1769:
 20993              	.LBB21226:
 20994              	.LBB21225:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 20995              		.loc 19 873 0
 20996 0195 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 20996      00
 20997              	.LVL1770:
 20998              	.LBE21225:
 20999              	.LBE21226:
 21000              	.LBE21222:
 21001              	.LBE21221:
 21002              	.LBE21210:
 21003              	.LBE21209:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 21004              		.loc 3 172 0
 21005 019a BE600000 		movl	$96, %esi
 21005      00
 21006 019f 4889EF   		movq	%rbp, %rdi
 21007 01a2 E8000000 		call	_ZdlPvm@PLT
 21007      00
 21008              	.LVL1771:
 21009 01a7 EBB2     		jmp	.L1166
 21010              	.LVL1772:
 21011 01a9 0F1F8000 		.p2align 4,,10
 21011      000000
 21012              		.p2align 3
 21013              	.L1205:
 21014              	.LBE21227:
 21015              	.LBE21228:
 21016              	.LBE21230:
 21017              	.LBE21233:
 21018              	.LBE21236:
 21019              	.LBE21238:
 21020              	.LBE21240:
 21021              	.LBE21242:
 21022              	.LBE21244:
 21023              	.LBB21245:
 21024              	.LBB21198:
 21025              	.LBB21196:
 21026              	.LBB21193:
 21027              	.LBB21190:
 21028              	.LBB21188:
 21029              	.LBB21186:
 21030              	.LBB21183:
 21031              	.LBB21180:
 21032              	.LBB21178:
 21033              	.LBB21177:
 21034              	.LBB21159:
 21035              	.LBB21160:
 104:/usr/include/boost/exception/info.hpp ****                 }
 21036              		.loc 3 104 0
 21037 01b0 488D0500 		leaq	16+_ZTVN5boost16exception_detail25error_info_container_implE(%rip), %rax
 21037      000000
 21038 01b7 498B7E38 		movq	56(%r14), %rdi
 21039 01bb 498906   		movq	%rax, (%r14)
 21040              	.LVL1773:
GAS LISTING /tmp/ccvmoMuv.s 			page 842


 21041              	.LBB21161:
 21042              	.LBB21162:
 21043              	.LBB21163:
 21044              	.LBB21164:
 21045              	.LBB21165:
 21046              	.LBB21166:
 152:/usr/include/c++/6/bits/basic_string.h **** #else
 21047              		.loc 10 152 0
 21048 01be 498D4648 		leaq	72(%r14), %rax
 21049              	.LBE21166:
 21050              	.LBE21165:
 21051              	.LBE21164:
 180:/usr/include/c++/6/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 21052              		.loc 10 180 0
 21053 01c2 4839C7   		cmpq	%rax, %rdi
 21054 01c5 7405     		je	.L1185
 21055              	.LVL1774:
 21056              	.LBB21167:
 21057              	.LBB21168:
 21058              	.LBB21169:
 21059              	.LBB21170:
 21060              		.loc 12 110 0
 21061 01c7 E8000000 		call	_ZdlPv@PLT
 21061      00
 21062              	.LVL1775:
 21063              	.L1185:
 21064              	.LBE21170:
 21065              	.LBE21169:
 21066              	.LBE21168:
 21067              	.LBE21167:
 21068              	.LBE21163:
 21069              	.LBE21162:
 21070              	.LBE21161:
 21071              	.LBB21171:
 21072              	.LBB21172:
 21073              	.LBB21173:
 21074              	.LBB21174:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 21075              		.loc 19 873 0
 21076 01cc 498B7618 		movq	24(%r14), %rsi
 21077              	.LBE21174:
 21078              	.LBE21173:
  96:/usr/include/c++/6/bits/stl_map.h ****     {
 21079              		.loc 36 96 0
 21080 01d0 498D7E08 		leaq	8(%r14), %rdi
 21081              	.LVL1776:
 21082              	.LBB21176:
 21083              	.LBB21175:
 873:/usr/include/c++/6/bits/stl_tree.h **** 
 21084              		.loc 19 873 0
 21085 01d4 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 21085      00
 21086              	.LVL1777:
 21087              	.LBE21175:
 21088              	.LBE21176:
 21089              	.LBE21172:
 21090              	.LBE21171:
GAS LISTING /tmp/ccvmoMuv.s 			page 843


 21091              	.LBE21160:
 21092              	.LBE21159:
 172:/usr/include/boost/exception/info.hpp ****                     return true;
 21093              		.loc 3 172 0
 21094 01d9 BE600000 		movl	$96, %esi
 21094      00
 21095 01de 4C89F7   		movq	%r14, %rdi
 21096 01e1 E8000000 		call	_ZdlPvm@PLT
 21096      00
 21097              	.LVL1778:
 21098 01e6 E92FFFFF 		jmp	.L1182
 21098      FF
 21099              	.LVL1779:
 21100 01eb 0F1F4400 		.p2align 4,,10
 21100      00
 21101              		.p2align 3
 21102              	.L1204:
 21103              	.LBE21177:
 21104              	.LBE21178:
 21105              	.LBE21180:
 21106              	.LBE21183:
 21107              	.LBE21186:
 21108              	.LBE21188:
 21109              	.LBE21190:
 21110              	.LBE21193:
 21111              	.LBE21196:
 21112              	.LBE21198:
 21113              	.LBE21245:
 130:/usr/include/boost/exception/detail/exception_ptr.hpp ****             return ep;
 21114              		.loc 29 130 0 discriminator 1
 21115 01f0 488D3D00 		leaq	_ZGVZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_13excep
 21115      000000
 21116 01f7 4C8D2D00 		leaq	16+_ZTVN5boost9exceptionE(%rip), %r13
 21116      000000
 21117 01fe E8000000 		call	__cxa_guard_acquire@PLT
 21117      00
 21118              	.LVL1780:
 21119 0203 85C0     		testl	%eax, %eax
 21120 0205 0F84A7FE 		je	.L1168
 21120      FFFF
 130:/usr/include/boost/exception/detail/exception_ptr.hpp ****             return ep;
 21121              		.loc 29 130 0 is_stmt 0 discriminator 2
 21122 020b BF380000 		movl	$56, %edi
 21122      00
 21123              	.LEHB106:
 21124 0210 E8000000 		call	_Znwm@PLT
 21124      00
 21125              	.LVL1781:
 21126              	.LEHE106:
 21127              	.LBB21246:
 21128              	.LBB21247:
 21129              	.LBB21248:
 21130              	.LBB21249:
 21131              	.LBB21250:
 21132              	.LBB21251:
 21133              	.LBB21252:
  38:/usr/include/boost/exception/exception.hpp ****                 {
GAS LISTING /tmp/ccvmoMuv.s 			page 844


 21134              		.loc 7 38 0 is_stmt 1 discriminator 2
 21135 0215 488B7C24 		movq	72(%rsp), %rdi
 21135      48
 21136              	.LBE21252:
 21137              	.LBE21251:
 21138              	.LBE21250:
 21139              	.LBE21249:
 21140              	.LBE21248:
 21141              	.LBB21275:
 21142              	.LBB21276:
 415:/usr/include/boost/exception/exception.hpp ****             {
 21143              		.loc 7 415 0 discriminator 2
 21144 021a 488D3500 		leaq	16+_ZTVN5boost16exception_detail10clone_baseE(%rip), %rsi
 21144      000000
 21145              	.LBE21276:
 21146              	.LBE21275:
 21147              	.LBE21247:
 21148              	.LBE21246:
 130:/usr/include/boost/exception/detail/exception_ptr.hpp ****             return ep;
 21149              		.loc 29 130 0 discriminator 2
 21150 0221 48890424 		movq	%rax, (%rsp)
 21151              	.LVL1782:
 21152              	.LBB21287:
 21153              	.LBB21284:
 21154              	.LBB21278:
 21155              	.LBB21270:
 21156              	.LBB21265:
 220:/usr/include/boost/exception/exception.hpp ****         {
 21157              		.loc 7 220 0 discriminator 2
 21158 0225 4C8928   		movq	%r13, (%rax)
 21159              	.LBE21265:
 21160              	.LBE21270:
 21161              	.LBE21278:
 21162              	.LBB21279:
 21163              	.LBB21277:
 415:/usr/include/boost/exception/exception.hpp ****             {
 21164              		.loc 7 415 0 discriminator 2
 21165 0228 48897030 		movq	%rsi, 48(%rax)
 21166              	.LVL1783:
 21167              	.LBE21277:
 21168              	.LBE21279:
 21169              	.LBB21280:
 21170              	.LBB21271:
 21171              	.LBB21266:
 21172              	.LBB21263:
 21173              	.LBB21261:
 21174              	.LBB21253:
 21175              	.LBB21254:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 21176              		.loc 7 71 0 discriminator 2
 21177 022c 4885FF   		testq	%rdi, %rdi
 21178              	.LBE21254:
 21179              	.LBE21253:
  38:/usr/include/boost/exception/exception.hpp ****                 {
 21180              		.loc 7 38 0 discriminator 2
 21181 022f 48897808 		movq	%rdi, 8(%rax)
 21182              	.LVL1784:
GAS LISTING /tmp/ccvmoMuv.s 			page 845


 21183              	.LBB21259:
 21184              	.LBB21257:
  71:/usr/include/boost/exception/exception.hpp ****                     px_->add_ref();
 21185              		.loc 7 71 0 discriminator 2
 21186 0233 741B     		je	.L1171
  72:/usr/include/boost/exception/exception.hpp ****                 }
 21187              		.loc 7 72 0
 21188 0235 488B07   		movq	(%rdi), %rax
 21189              	.LVL1785:
 21190 0238 488D1500 		leaq	_ZNK5boost16exception_detail25error_info_container_impl7add_refEv(%rip), %rdx
 21190      000000
 21191 023f 488B4018 		movq	24(%rax), %rax
 21192 0243 4839D0   		cmpq	%rdx, %rax
 21193 0246 0F850C01 		jne	.L1172
 21193      0000
 21194              	.LVL1786:
 21195              	.LBB21255:
 21196              	.LBB21256:
 162:/usr/include/boost/exception/info.hpp ****                 }
 21197              		.loc 3 162 0
 21198 024c 83475801 		addl	$1, 88(%rdi)
 21199              	.LVL1787:
 21200              	.L1171:
 21201              	.LBE21256:
 21202              	.LBE21255:
 21203              	.LBE21257:
 21204              	.LBE21259:
 21205              	.LBE21261:
 21206              	.LBE21263:
 220:/usr/include/boost/exception/exception.hpp ****         {
 21207              		.loc 7 220 0
 21208 0250 488B0C24 		movq	(%rsp), %rcx
 21209 0254 488B4424 		movq	80(%rsp), %rax
 21209      50
 21210              	.LBE21266:
 21211              	.LBE21271:
 21212              	.LBE21280:
 21213              	.LBE21284:
 21214              	.LBE21287:
 21215              	.LBB21288:
 21216              	.LBB21289:
 21217              	.LBB21290:
 21218              	.LBB21291:
 21219              	.LBB21292:
 137:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 21220              		.loc 28 137 0
 21221 0259 BF180000 		movl	$24, %edi
 21221      00
 21222              	.LBE21292:
 21223              	.LBE21291:
 21224              	.LBE21290:
 21225              	.LBE21289:
 21226              	.LBE21288:
 21227              	.LBB21325:
 21228              	.LBB21285:
 21229              	.LBB21281:
 21230              	.LBB21272:
GAS LISTING /tmp/ccvmoMuv.s 			page 846


 21231              	.LBB21267:
 220:/usr/include/boost/exception/exception.hpp ****         {
 21232              		.loc 7 220 0
 21233 025e 48894110 		movq	%rax, 16(%rcx)
 21234 0262 488B4424 		movq	88(%rsp), %rax
 21234      58
 21235              	.LBE21267:
 21236              	.LBE21272:
 21237              	.LBE21281:
 459:/usr/include/boost/exception/exception.hpp ****             public T,
 21238              		.loc 7 459 0
 21239 0267 4C8939   		movq	%r15, (%rcx)
 21240 026a 4C897130 		movq	%r14, 48(%rcx)
 21241              	.LBB21282:
 21242              	.LBB21273:
 21243              	.LBB21268:
 220:/usr/include/boost/exception/exception.hpp ****         {
 21244              		.loc 7 220 0
 21245 026e 48894118 		movq	%rax, 24(%rcx)
 21246 0272 8B442460 		movl	96(%rsp), %eax
 21247 0276 894120   		movl	%eax, 32(%rcx)
 21248              	.LVL1788:
 21249              	.LBE21268:
 21250              	.LBE21273:
 21251              	.LBE21282:
 459:/usr/include/boost/exception/exception.hpp ****             public T,
 21252              		.loc 7 459 0
 21253 0279 488D0500 		leaq	72+_ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE(%rip), %rax
 21253      000000
 21254 0280 48894128 		movq	%rax, 40(%rcx)
 21255              	.LBE21285:
 21256              	.LBE21325:
 21257              	.LBB21326:
 21258              	.LBB21320:
 360:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 21259              		.loc 27 360 0
 21260 0284 488D4130 		leaq	48(%rcx), %rax
 21261 0288 48894424 		movq	%rax, 8(%rsp)
 21261      08
 21262              	.LEHB107:
 21263              	.LBB21315:
 21264              	.LBB21310:
 21265              	.LBB21305:
 137:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 21266              		.loc 28 137 0
 21267 028d E8000000 		call	_Znwm@PLT
 21267      00
 21268              	.LVL1789:
 21269              	.LEHE107:
 21270              	.LBB21293:
 21271              	.LBB21294:
  66:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     {
 21272              		.loc 6 66 0
 21273 0292 488B0C24 		movq	(%rsp), %rcx
 21274 0296 488D3500 		leaq	16+_ZTVN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exceptio
 21274      000000
 21275              	.LBE21294:
GAS LISTING /tmp/ccvmoMuv.s 			page 847


 21276              	.LBE21293:
 137:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 21277              		.loc 28 137 0
 21278 029d 4989C7   		movq	%rax, %r15
 21279              	.LVL1790:
 21280              	.LBB21300:
 21281              	.LBB21297:
 21282              	.LBB21295:
 21283              	.LBB21296:
 109:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     {
 21284              		.loc 1 109 0
 21285 02a0 C7400801 		movl	$1, 8(%rax)
 21285      000000
 21286 02a7 C7400C01 		movl	$1, 12(%rax)
 21286      000000
 21287              	.LVL1791:
 21288              	.LBE21296:
 21289              	.LBE21295:
 21290              	.LBE21297:
 21291              	.LBE21300:
 21292              	.LBE21305:
 21293              	.LBE21310:
 21294              	.LBE21315:
 21295              	.LBE21320:
 21296              	.LBE21326:
 130:/usr/include/boost/exception/detail/exception_ptr.hpp ****             return ep;
 21297              		.loc 29 130 0
 21298 02ae 488D3D00 		leaq	_ZGVZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_13excep
 21298      000000
 21299              	.LBB21327:
 21300              	.LBB21321:
 21301              	.LBB21316:
 21302              	.LBB21311:
 21303              	.LBB21306:
 21304              	.LBB21301:
 21305              	.LBB21298:
  66:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     {
 21306              		.loc 6 66 0
 21307 02b5 488930   		movq	%rsi, (%rax)
 21308              	.LBE21298:
 21309              	.LBE21301:
 21310              	.LBE21306:
 21311              	.LBE21311:
 21312              	.LBE21316:
 21313              	.LBE21321:
 21314              	.LBE21327:
 21315              	.LBB21328:
 21316              	.LBB21329:
 21317              	.LBB21330:
 21318              	.LBB21331:
 21319              	.LBB21332:
 21320              	.LBB21333:
 21321              	.LBB21334:
 479:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 21322              		.loc 28 479 0
 21323 02b8 4C893D00 		movq	%r15, 8+_ZZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_1
 21323      000000
GAS LISTING /tmp/ccvmoMuv.s 			page 848


 21324              	.LBE21334:
 21325              	.LBE21333:
 21326              	.LBE21332:
 21327              	.LBE21331:
 21328              	.LBE21330:
 21329              	.LBE21329:
 21330              	.LBE21328:
 21331              	.LBB21345:
 21332              	.LBB21322:
 21333              	.LBB21317:
 21334              	.LBB21312:
 21335              	.LBB21307:
 21336              	.LBB21302:
 21337              	.LBB21299:
  66:/usr/include/boost/smart_ptr/detail/sp_counted_impl.hpp ****     {
 21338              		.loc 6 66 0
 21339 02bf 48894810 		movq	%rcx, 16(%rax)
 21340              	.LVL1792:
 21341              	.LBE21299:
 21342              	.LBE21302:
 21343              	.LBE21307:
 21344              	.LBE21312:
 21345              	.LBE21317:
 21346              	.LBE21322:
 21347              	.LBE21345:
 21348              	.LBB21346:
 21349              	.LBB21344:
 21350              	.LBB21343:
 21351              	.LBB21342:
 405:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 21352              		.loc 27 405 0
 21353 02c3 488B4424 		movq	8(%rsp), %rax
 21353      08
 21354              	.LBB21341:
 21355              	.LBB21340:
 21356              	.LBB21339:
 21357              	.LBB21335:
 21358              	.LBB21336:
 21359              	.LBB21337:
 21360              	.LBB21338:
  66:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** }
 21361              		.loc 1 66 0
 21362              	#APP
 21363              	# 66 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 21364              		lock
 21365              		incl 8(%r15)
 21366              	# 0 "" 2
 21367              	#NO_APP
 21368              	.LBE21338:
 21369              	.LBE21337:
 21370              	.LBE21336:
 21371              	.LBE21335:
 21372              	.LBE21339:
 21373              	.LBE21340:
 21374              	.LBE21341:
 405:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 21375              		.loc 27 405 0
GAS LISTING /tmp/ccvmoMuv.s 			page 849


 21376 02cd 48890500 		movq	%rax, _ZZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_13e
 21376      000000
 21377              	.LVL1793:
 21378              	.LBE21342:
 21379              	.LBE21343:
 21380              	.LBE21344:
 21381              	.LBE21346:
 130:/usr/include/boost/exception/detail/exception_ptr.hpp ****             return ep;
 21382              		.loc 29 130 0
 21383 02d4 E8000000 		call	__cxa_guard_release@PLT
 21383      00
 21384              	.LVL1794:
 21385 02d9 488D1500 		leaq	__dso_handle(%rip), %rdx
 21385      000000
 21386 02e0 488D3500 		leaq	_ZZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_13excepti
 21386      000000
 21387 02e7 488D3D00 		leaq	_ZN5boost13exception_ptrD1Ev(%rip), %rdi
 21387      000000
 21388 02ee E8000000 		call	__cxa_atexit@PLT
 21388      00
 21389              	.LVL1795:
 21390              	.LBB21347:
 21391              	.LBB21348:
 21392              	.LBB21349:
 21393              	.LBB21350:
 21394              	.LBB21351:
 21395              	.LBB21352:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 21396              		.loc 1 50 0
 21397 02f3 BAFFFFFF 		movl	$-1, %edx
 21397      FF
 21398 02f8 89D0     		movl	%edx, %eax
 21399              	#APP
 21400              	# 50 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 21401              		lock
 21402              		xadd %eax, 8(%r15)
 21403              	# 0 "" 2
 21404              	.LVL1796:
 21405              	#NO_APP
 21406              	.LBE21352:
 21407              	.LBE21351:
 144:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
 21408              		.loc 1 144 0
 21409 0300 83F801   		cmpl	$1, %eax
 21410 0303 0F85A9FD 		jne	.L1168
 21410      FFFF
 21411              	.LBB21353:
 21412              	.LBB21354:
 146:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****             weak_release();
 21413              		.loc 1 146 0
 21414 0309 498B07   		movq	(%r15), %rax
 21415 030c 891424   		movl	%edx, (%rsp)
 21416              	.LVL1797:
 21417 030f 4C89FF   		movq	%r15, %rdi
 21418 0312 FF5010   		call	*16(%rax)
 21419              	.LVL1798:
 21420              	.LBB21355:
GAS LISTING /tmp/ccvmoMuv.s 			page 850


 21421              	.LBB21356:
 21422              	.LBB21357:
 21423              	.LBB21358:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 21424              		.loc 1 50 0
 21425 0315 8B1424   		movl	(%rsp), %edx
 21426              	#APP
 21427              	# 50 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 21428              		lock
 21429              		xadd %edx, 12(%r15)
 21430              	# 0 "" 2
 21431              	.LVL1799:
 21432              	#NO_APP
 21433              	.LBE21358:
 21434              	.LBE21357:
 158:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
 21435              		.loc 1 158 0
 21436 031e 83FA01   		cmpl	$1, %edx
 21437 0321 0F858BFD 		jne	.L1168
 21437      FFFF
 21438              		.loc 1 160 0
 21439 0327 498B07   		movq	(%r15), %rax
 21440 032a 4C89FF   		movq	%r15, %rdi
 21441 032d FF5018   		call	*24(%rax)
 21442              	.LVL1800:
 21443 0330 E97DFDFF 		jmp	.L1168
 21443      FF
 21444              	.LVL1801:
 21445              		.p2align 4,,10
 21446 0335 0F1F00   		.p2align 3
 21447              	.L1183:
 21448              	.LBE21356:
 21449              	.LBE21355:
 21450              	.LBE21354:
 21451              	.LBE21353:
 21452              	.LBE21350:
 21453              	.LBE21349:
 21454              	.LBE21348:
 21455              	.LBE21347:
 21456              	.LBB21359:
 21457              	.LBB21199:
 21458              	.LBB21197:
 21459              	.LBB21194:
 21460              	.LBB21191:
 21461              	.LBB21189:
 21462              	.LBB21187:
 21463              	.LBB21184:
 21464              	.LBB21181:
  78:/usr/include/boost/exception/exception.hpp ****                     px_=0;
 21465              		.loc 7 78 0
 21466 0338 4C89F7   		movq	%r14, %rdi
 21467 033b FFD0     		call	*%rax
 21468              	.LVL1802:
 21469 033d E9D8FDFF 		jmp	.L1182
 21469      FF
 21470              	.LVL1803:
 21471              		.p2align 4,,10
GAS LISTING /tmp/ccvmoMuv.s 			page 851


 21472 0342 660F1F44 		.p2align 3
 21472      0000
 21473              	.L1188:
 21474              	.LBE21181:
 21475              	.LBE21184:
 21476              	.LBE21187:
 21477              	.LBE21189:
 21478              	.LBE21191:
 21479              	.LBE21194:
 21480              	.LBE21197:
 21481              	.LBE21199:
 21482              	.LBE21359:
 21483              	.LBB21360:
 21484              	.LBB21243:
 21485              	.LBB21241:
 21486              	.LBB21239:
 21487              	.LBB21237:
 21488              	.LBB21234:
 21489              	.LBB21231:
 21490 0348 4889EF   		movq	%rbp, %rdi
 21491 034b FFD0     		call	*%rax
 21492              	.LVL1804:
 21493              	.LBE21231:
 21494              	.LBE21234:
 21495              	.LBE21237:
 21496              	.LBE21239:
 21497              	.LBE21241:
 21498              	.LBE21243:
 21499              	.LBE21360:
 131:/usr/include/boost/exception/detail/exception_ptr.hpp ****             }
 21500              		.loc 29 131 0
 21501 034d E909FEFF 		jmp	.L1166
 21501      FF
 21502              	.LVL1805:
 21503              		.p2align 4,,10
 21504 0352 660F1F44 		.p2align 3
 21504      0000
 21505              	.L1172:
 21506              	.LEHB108:
 21507              	.LBB21361:
 21508              	.LBB21286:
 21509              	.LBB21283:
 21510              	.LBB21274:
 21511              	.LBB21269:
 21512              	.LBB21264:
 21513              	.LBB21262:
 21514              	.LBB21260:
 21515              	.LBB21258:
  72:/usr/include/boost/exception/exception.hpp ****                 }
 21516              		.loc 7 72 0
 21517 0358 FFD0     		call	*%rax
 21518              	.LVL1806:
 21519              	.LEHE108:
 21520 035a E9F1FEFF 		jmp	.L1171
 21520      FF
 21521              	.LVL1807:
 21522              	.L1195:
GAS LISTING /tmp/ccvmoMuv.s 			page 852


 21523              	.LBE21258:
 21524              	.LBE21260:
 21525              	.LBE21262:
 21526              	.LBE21264:
 21527              	.LBE21269:
 21528              	.LBE21274:
 21529              	.LBE21283:
 21530              	.LBE21286:
 21531              	.LBE21361:
 21532              	.LBB21362:
 21533              	.LBB21323:
 21534              	.LBB21318:
 21535              	.LBB21313:
 21536              	.LBB21308:
 139:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         {
 21537              		.loc 28 139 0
 21538 035f 4889C7   		movq	%rax, %rdi
 21539 0362 E8000000 		call	__cxa_begin_catch@PLT
 21539      00
 21540              	.LVL1808:
 21541              	.LBB21303:
 21542              	.LBB21304:
 21543              		.loc 37 34 0
 21544 0367 488B3C24 		movq	(%rsp), %rdi
 21545 036b 488B07   		movq	(%rdi), %rax
 21546 036e FF5008   		call	*8(%rax)
 21547              	.LVL1809:
 21548              	.LEHB109:
 21549              	.LBE21304:
 21550              	.LBE21303:
 142:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         }
 21551              		.loc 28 142 0
 21552 0371 E8000000 		call	__cxa_rethrow@PLT
 21552      00
 21553              	.LVL1810:
 21554              	.LEHE109:
 21555              	.L1192:
 21556 0376 4889C3   		movq	%rax, %rbx
 21557              	.LVL1811:
 21558              	.L1178:
 21559              	.LBE21308:
 21560              	.LBE21313:
 21561              	.LBE21318:
 21562              	.LBE21323:
 21563              	.LBE21362:
 130:/usr/include/boost/exception/detail/exception_ptr.hpp ****             return ep;
 21564              		.loc 29 130 0 discriminator 7
 21565 0379 488D3D00 		leaq	_ZGVZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_13excep
 21565      000000
 21566 0380 E8000000 		call	__cxa_guard_abort@PLT
 21566      00
 21567              	.LVL1812:
 21568              	.LBB21363:
 21569              	.LBB21364:
 481:/usr/include/boost/exception/exception.hpp **** 
 21570              		.loc 7 481 0 discriminator 7
 21571 0385 488D0500 		leaq	72+_ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE(%rip), %rax
GAS LISTING /tmp/ccvmoMuv.s 			page 853


 21571      000000
 21572 038c 488D7C24 		leaq	64(%rsp), %rdi
 21572      40
 21573              	.LVL1813:
 21574 0391 4C897C24 		movq	%r15, 64(%rsp)
 21574      40
 21575 0396 4C897424 		movq	%r14, 112(%rsp)
 21575      70
 21576 039b 48894424 		movq	%rax, 104(%rsp)
 21576      68
 21577 03a0 E8000000 		call	_ZN5boost16exception_detail14bad_exception_D2Ev
 21577      00
 21578              	.LVL1814:
 21579              	.LBE21364:
 21580              	.LBE21363:
 122:/usr/include/boost/exception/detail/exception_ptr.hpp ****             exception_detail::clone_impl<Exception> c(ba);
 21581              		.loc 29 122 0 discriminator 7
 21582 03a5 488D7C24 		leaq	16(%rsp), %rdi
 21582      10
 21583 03aa E8000000 		call	_ZN5boost16exception_detail14bad_exception_D1Ev
 21583      00
 21584              	.LVL1815:
 21585 03af 4889DF   		movq	%rbx, %rdi
 21586              	.LEHB110:
 21587 03b2 E8000000 		call	_Unwind_Resume@PLT
 21587      00
 21588              	.LVL1816:
 21589              	.LEHE110:
 21590              	.L1193:
 130:/usr/include/boost/exception/detail/exception_ptr.hpp ****             return ep;
 21591              		.loc 29 130 0
 21592 03b7 488B3C24 		movq	(%rsp), %rdi
 21593 03bb BE380000 		movl	$56, %esi
 21593      00
 21594 03c0 4889C3   		movq	%rax, %rbx
 21595              	.LVL1817:
 21596 03c3 E8000000 		call	_ZdlPvm@PLT
 21596      00
 21597              	.LVL1818:
 21598 03c8 EBAF     		jmp	.L1178
 21599              	.LVL1819:
 21600              	.L1194:
 21601 03ca 4889C3   		movq	%rax, %rbx
 21602              	.LVL1820:
 21603              	.LBB21365:
 21604              	.LBB21324:
 21605              	.LBB21319:
 21606              	.LBB21314:
 21607              	.LBB21309:
 139:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         {
 21608              		.loc 28 139 0
 21609 03cd E8000000 		call	__cxa_end_catch@PLT
 21609      00
 21610              	.LVL1821:
 21611 03d2 EBA5     		jmp	.L1178
 21612              	.LBE21309:
 21613              	.LBE21314:
GAS LISTING /tmp/ccvmoMuv.s 			page 854


 21614              	.LBE21319:
 21615              	.LBE21324:
 21616              	.LBE21365:
 21617              		.cfi_endproc
 21618              	.LFE12077:
 21619              		.section	.gcc_except_table
 21620 024b 00       		.align 4
 21621              	.LLSDA12077:
 21622 024c FF       		.byte	0xff
 21623 024d 9B       		.byte	0x9b
 21624 024e 25       		.uleb128 .LLSDATT12077-.LLSDATTD12077
 21625              	.LLSDATTD12077:
 21626 024f 01       		.byte	0x1
 21627 0250 1D       		.uleb128 .LLSDACSE12077-.LLSDACSB12077
 21628              	.LLSDACSB12077:
 21629 0251 9004     		.uleb128 .LEHB106-.LFB12077
 21630 0253 05       		.uleb128 .LEHE106-.LEHB106
 21631 0254 F606     		.uleb128 .L1192-.LFB12077
 21632 0256 00       		.uleb128 0
 21633 0257 8D05     		.uleb128 .LEHB107-.LFB12077
 21634 0259 05       		.uleb128 .LEHE107-.LEHB107
 21635 025a DF06     		.uleb128 .L1195-.LFB12077
 21636 025c 01       		.uleb128 0x1
 21637 025d D806     		.uleb128 .LEHB108-.LFB12077
 21638 025f 02       		.uleb128 .LEHE108-.LEHB108
 21639 0260 B707     		.uleb128 .L1193-.LFB12077
 21640 0262 00       		.uleb128 0
 21641 0263 F106     		.uleb128 .LEHB109-.LFB12077
 21642 0265 05       		.uleb128 .LEHE109-.LEHB109
 21643 0266 CA07     		.uleb128 .L1194-.LFB12077
 21644 0268 00       		.uleb128 0
 21645 0269 B207     		.uleb128 .LEHB110-.LFB12077
 21646 026b 05       		.uleb128 .LEHE110-.LEHB110
 21647 026c 00       		.uleb128 0
 21648 026d 00       		.uleb128 0
 21649              	.LLSDACSE12077:
 21650 026e 01       		.byte	0x1
 21651 026f 00       		.byte	0
 21652              		.align 4
 21653 0270 00000000 		.long	0
 21654              	
 21655              	.LLSDATT12077:
 21656              		.section	.text._ZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_
 21658              		.section	.text._ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFv
 21659              		.align 2
 21660              		.p2align 4,,15
 21661              		.weak	_ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFvS4_EEEESt
 21663              	_ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFvS4_EEEESt10_Sele
 21664              	.LFB14426:
1826:/usr/include/c++/6/bits/stl_tree.h ****     _M_get_insert_unique_pos(const key_type& __k)
 21665              		.loc 19 1826 0
 21666              		.cfi_startproc
 21667              	.LVL1822:
 21668 0000 4155     		pushq	%r13
 21669              		.cfi_def_cfa_offset 16
 21670              		.cfi_offset 13, -16
 21671 0002 4154     		pushq	%r12
GAS LISTING /tmp/ccvmoMuv.s 			page 855


 21672              		.cfi_def_cfa_offset 24
 21673              		.cfi_offset 12, -24
 21674 0004 4989FD   		movq	%rdi, %r13
 21675 0007 55       		pushq	%rbp
 21676              		.cfi_def_cfa_offset 32
 21677              		.cfi_offset 6, -32
 21678 0008 53       		pushq	%rbx
 21679              		.cfi_def_cfa_offset 40
 21680              		.cfi_offset 3, -40
 21681 0009 4989F4   		movq	%rsi, %r12
 21682 000c 4883EC08 		subq	$8, %rsp
 21683              		.cfi_def_cfa_offset 48
 21684 0010 488B5F10 		movq	16(%rdi), %rbx
 21685              	.LVL1823:
1833:/usr/include/c++/6/bits/stl_tree.h **** 	{
 21686              		.loc 19 1833 0
 21687 0014 4885DB   		testq	%rbx, %rbx
 21688 0017 7522     		jne	.L1219
 21689 0019 E99A0000 		jmp	.L1222
 21689      00
 21690              	.LVL1824:
 21691 001e 6690     		.p2align 4,,10
 21692              		.p2align 3
 21693              	.L1223:
1837:/usr/include/c++/6/bits/stl_tree.h **** 	}
 21694              		.loc 19 1837 0
 21695 0020 498B0424 		movq	(%r12), %rax
 21696 0024 48394320 		cmpq	%rax, 32(%rbx)
 21697 0028 7324     		jnb	.L1212
 21698 002a 488B4310 		movq	16(%rbx), %rax
 21699              	.LVL1825:
 21700 002e BA010000 		movl	$1, %edx
 21700      00
 21701              	.LVL1826:
1833:/usr/include/c++/6/bits/stl_tree.h **** 	{
 21702              		.loc 19 1833 0 discriminator 1
 21703 0033 4885C0   		testq	%rax, %rax
 21704 0036 7421     		je	.L1210
 21705              	.LVL1827:
 21706              	.L1224:
 21707 0038 4889C3   		movq	%rax, %rbx
 21708              	.LVL1828:
 21709              	.L1219:
 21710              	.LBB21366:
 21711              	.LBB21367:
 21712              	.LBB21368:
 21713              		.loc 20 891 0
 21714 003b 488D6B20 		leaq	32(%rbx), %rbp
 21715              	.LVL1829:
 21716              	.LBE21368:
 21717              	.LBE21367:
 21718              	.LBE21366:
 21719              	.LBB21371:
 21720              	.LBB21372:
 21721              		.loc 21 907 0
 21722 003f 4C89E7   		movq	%r12, %rdi
 21723 0042 4889EE   		movq	%rbp, %rsi
GAS LISTING /tmp/ccvmoMuv.s 			page 856


 21724 0045 E8000000 		call	_ZN3pmt3eqvERKN5boost13intrusive_ptrINS_8pmt_baseEEES5_@PLT
 21724      00
 21725              	.LVL1830:
 21726 004a 84C0     		testb	%al, %al
 21727 004c 74D2     		je	.L1223
 21728              	.LVL1831:
 21729              	.L1212:
 21730 004e 488B4318 		movq	24(%rbx), %rax
 21731              	.LVL1832:
 21732              	.LBE21372:
 21733              	.LBE21371:
1837:/usr/include/c++/6/bits/stl_tree.h **** 	}
 21734              		.loc 19 1837 0 discriminator 2
 21735 0052 31D2     		xorl	%edx, %edx
 21736              	.LVL1833:
1833:/usr/include/c++/6/bits/stl_tree.h **** 	{
 21737              		.loc 19 1833 0 discriminator 2
 21738 0054 4885C0   		testq	%rax, %rax
 21739 0057 75DF     		jne	.L1224
 21740              	.LVL1834:
 21741              	.L1210:
1840:/usr/include/c++/6/bits/stl_tree.h **** 	{
 21742              		.loc 19 1840 0
 21743 0059 84D2     		testb	%dl, %dl
 21744 005b 7453     		je	.L1218
 21745              	.LVL1835:
 21746              	.L1209:
1842:/usr/include/c++/6/bits/stl_tree.h **** 	    return _Res(__x, __y);
 21747              		.loc 19 1842 0
 21748 005d 49395D18 		cmpq	%rbx, 24(%r13)
 21749 0061 7437     		je	.L1221
 21750              	.LVL1836:
 21751              	.LBB21373:
 21752              	.LBB21374:
 224:/usr/include/c++/6/bits/stl_tree.h **** 	return *this;
 21753              		.loc 19 224 0
 21754 0063 4889DF   		movq	%rbx, %rdi
 21755 0066 E8000000 		call	_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@PLT
 21755      00
 21756              	.LVL1837:
 21757 006b 488D7820 		leaq	32(%rax), %rdi
 21758 006f 4889C5   		movq	%rax, %rbp
 21759              	.LVL1838:
 21760              	.L1214:
 21761              	.LBE21374:
 21762              	.LBE21373:
 21763              	.LBB21375:
 21764              	.LBB21376:
 21765              		.loc 21 907 0
 21766 0072 4C89E6   		movq	%r12, %rsi
 21767 0075 E8000000 		call	_ZN3pmt3eqvERKN5boost13intrusive_ptrINS_8pmt_baseEEES5_@PLT
 21767      00
 21768              	.LVL1839:
 21769 007a 84C0     		testb	%al, %al
 21770 007c 7412     		je	.L1225
 21771              	.LVL1840:
 21772              	.L1217:
GAS LISTING /tmp/ccvmoMuv.s 			page 857


 21773              	.LBE21376:
 21774              	.LBE21375:
1850:/usr/include/c++/6/bits/stl_tree.h **** 
 21775              		.loc 19 1850 0
 21776 007e 4883C408 		addq	$8, %rsp
 21777              		.cfi_remember_state
 21778              		.cfi_def_cfa_offset 40
1849:/usr/include/c++/6/bits/stl_tree.h ****     }
 21779              		.loc 19 1849 0
 21780 0082 4889E8   		movq	%rbp, %rax
 21781 0085 31D2     		xorl	%edx, %edx
 21782              	.LVL1841:
1850:/usr/include/c++/6/bits/stl_tree.h **** 
 21783              		.loc 19 1850 0
 21784 0087 5B       		popq	%rbx
 21785              		.cfi_def_cfa_offset 32
 21786 0088 5D       		popq	%rbp
 21787              		.cfi_def_cfa_offset 24
 21788 0089 415C     		popq	%r12
 21789              		.cfi_def_cfa_offset 16
 21790              	.LVL1842:
 21791 008b 415D     		popq	%r13
 21792              		.cfi_def_cfa_offset 8
 21793              	.LVL1843:
 21794 008d C3       		ret
 21795              	.LVL1844:
 21796 008e 6690     		.p2align 4,,10
 21797              		.p2align 3
 21798              	.L1225:
 21799              		.cfi_restore_state
1847:/usr/include/c++/6/bits/stl_tree.h **** 	return _Res(__x, __y);
 21800              		.loc 19 1847 0
 21801 0090 498B0424 		movq	(%r12), %rax
 21802 0094 48394520 		cmpq	%rax, 32(%rbp)
 21803 0098 76E4     		jbe	.L1217
 21804              	.LVL1845:
 21805              	.L1221:
1850:/usr/include/c++/6/bits/stl_tree.h **** 
 21806              		.loc 19 1850 0
 21807 009a 4883C408 		addq	$8, %rsp
 21808              		.cfi_remember_state
 21809              		.cfi_def_cfa_offset 40
1848:/usr/include/c++/6/bits/stl_tree.h ****       return _Res(__j._M_node, 0);
 21810              		.loc 19 1848 0
 21811 009e 4889DA   		movq	%rbx, %rdx
 21812 00a1 31C0     		xorl	%eax, %eax
1850:/usr/include/c++/6/bits/stl_tree.h **** 
 21813              		.loc 19 1850 0
 21814 00a3 5B       		popq	%rbx
 21815              		.cfi_def_cfa_offset 32
 21816 00a4 5D       		popq	%rbp
 21817              		.cfi_def_cfa_offset 24
 21818 00a5 415C     		popq	%r12
 21819              		.cfi_def_cfa_offset 16
 21820              	.LVL1846:
 21821 00a7 415D     		popq	%r13
 21822              		.cfi_def_cfa_offset 8
GAS LISTING /tmp/ccvmoMuv.s 			page 858


 21823              	.LVL1847:
 21824 00a9 C3       		ret
 21825              	.LVL1848:
 21826 00aa 660F1F44 		.p2align 4,,10
 21826      0000
 21827              		.p2align 3
 21828              	.L1218:
 21829              		.cfi_restore_state
 21830              	.LBB21377:
 21831              	.LBB21370:
 21832              	.LBB21369:
 21833              		.loc 20 891 0
 21834 00b0 4889EF   		movq	%rbp, %rdi
 21835              	.LBE21369:
 21836              	.LBE21370:
 21837              	.LBE21377:
 21838 00b3 4889DD   		movq	%rbx, %rbp
 21839 00b6 EBBA     		jmp	.L1214
 21840              	.LVL1849:
 21841              	.L1222:
 21842              	.LBB21378:
 21843              	.LBB21379:
 677:/usr/include/c++/6/bits/stl_tree.h **** 
 21844              		.loc 19 677 0
 21845 00b8 488D5F08 		leaq	8(%rdi), %rbx
 21846              	.LVL1850:
 21847 00bc EB9F     		jmp	.L1209
 21848              	.LBE21379:
 21849              	.LBE21378:
 21850              		.cfi_endproc
 21851              	.LFE14426:
 21853              		.section	.text._ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFv
 21854              		.align 2
 21855              		.p2align 4,,15
 21856              		.weak	_ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFvS4_EEEESt
 21858              	_ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFvS4_EEEESt10_Sele
 21859              	.LFB13770:
1928:/usr/include/c++/6/bits/stl_tree.h ****     _M_get_insert_hint_unique_pos(const_iterator __position,
 21860              		.loc 19 1928 0
 21861              		.cfi_startproc
 21862              	.LVL1851:
 21863 0000 4155     		pushq	%r13
 21864              		.cfi_def_cfa_offset 16
 21865              		.cfi_offset 13, -16
 21866              	.LBB21380:
 21867              	.LBB21381:
 21868              	.LBB21382:
 677:/usr/include/c++/6/bits/stl_tree.h **** 
 21869              		.loc 19 677 0
 21870 0002 488D4708 		leaq	8(%rdi), %rax
 21871              	.LBE21382:
 21872              	.LBE21381:
 21873              	.LBE21380:
1928:/usr/include/c++/6/bits/stl_tree.h ****     _M_get_insert_hint_unique_pos(const_iterator __position,
 21874              		.loc 19 1928 0
 21875 0006 4154     		pushq	%r12
 21876              		.cfi_def_cfa_offset 24
GAS LISTING /tmp/ccvmoMuv.s 			page 859


 21877              		.cfi_offset 12, -24
 21878 0008 55       		pushq	%rbp
 21879              		.cfi_def_cfa_offset 32
 21880              		.cfi_offset 6, -32
 21881 0009 53       		pushq	%rbx
 21882              		.cfi_def_cfa_offset 40
 21883              		.cfi_offset 3, -40
 21884 000a 4989FC   		movq	%rdi, %r12
 21885              	.LVL1852:
 21886 000d 4989D5   		movq	%rdx, %r13
 21887 0010 4883EC08 		subq	$8, %rsp
 21888              		.cfi_def_cfa_offset 48
 21889              	.LBB21428:
1936:/usr/include/c++/6/bits/stl_tree.h **** 	{
 21890              		.loc 19 1936 0
 21891 0014 4839C6   		cmpq	%rax, %rsi
 21892 0017 0F84CB00 		je	.L1238
 21892      0000
 21893              	.LBB21383:
 21894              	.LBB21384:
 21895              	.LBB21385:
 21896              	.LBB21386:
 21897              		.loc 20 891 0
 21898 001d 488D6E20 		leaq	32(%rsi), %rbp
 21899 0021 4889F3   		movq	%rsi, %rbx
 21900              	.LVL1853:
 21901              	.LBE21386:
 21902              	.LBE21385:
 21903              	.LBE21384:
 21904              	.LBB21387:
 21905              	.LBB21388:
 21906              		.loc 21 907 0
 21907 0024 4889D7   		movq	%rdx, %rdi
 21908              	.LVL1854:
 21909 0027 4889EE   		movq	%rbp, %rsi
 21910              	.LVL1855:
 21911 002a E8000000 		call	_ZN3pmt3eqvERKN5boost13intrusive_ptrINS_8pmt_baseEEES5_@PLT
 21911      00
 21912              	.LVL1856:
 21913 002f 84C0     		testb	%al, %al
 21914 0031 754D     		jne	.L1230
 21915              	.LVL1857:
 21916              	.LBE21388:
 21917              	.LBE21387:
1944:/usr/include/c++/6/bits/stl_tree.h **** 	{
 21918              		.loc 19 1944 0
 21919 0033 498B4500 		movq	0(%r13), %rax
 21920 0037 48394320 		cmpq	%rax, 32(%rbx)
 21921 003b 7343     		jnb	.L1230
 21922              	.LVL1858:
 21923              	.LBB21389:
1948:/usr/include/c++/6/bits/stl_tree.h **** 	    return _Res(_M_leftmost(), _M_leftmost());
 21924              		.loc 19 1948 0
 21925 003d 498B4424 		movq	24(%r12), %rax
 21925      18
 21926 0042 4839D8   		cmpq	%rbx, %rax
1949:/usr/include/c++/6/bits/stl_tree.h **** 	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
GAS LISTING /tmp/ccvmoMuv.s 			page 860


 21927              		.loc 19 1949 0
 21928 0045 4889C2   		movq	%rax, %rdx
1948:/usr/include/c++/6/bits/stl_tree.h **** 	    return _Res(_M_leftmost(), _M_leftmost());
 21929              		.loc 19 1948 0
 21930 0048 742A     		je	.L1229
 21931              	.LVL1859:
 21932              	.LBB21390:
 21933              	.LBB21391:
 224:/usr/include/c++/6/bits/stl_tree.h **** 	return *this;
 21934              		.loc 19 224 0
 21935 004a 4889DF   		movq	%rbx, %rdi
 21936              	.LVL1860:
 21937 004d E8000000 		call	_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@PLT
 21937      00
 21938              	.LVL1861:
 21939              	.LBE21391:
 21940              	.LBE21390:
 21941              	.LBB21393:
 21942              	.LBB21394:
 21943              	.LBB21395:
 21944              		.loc 20 891 0
 21945 0052 488D7820 		leaq	32(%rax), %rdi
 21946              	.LBE21395:
 21947              	.LBE21394:
 21948              	.LBE21393:
 21949              	.LBB21396:
 21950              	.LBB21397:
 21951              		.loc 21 907 0
 21952 0056 4C89EE   		movq	%r13, %rsi
 21953              	.LBE21397:
 21954              	.LBE21396:
 21955              	.LBB21399:
 21956              	.LBB21392:
 224:/usr/include/c++/6/bits/stl_tree.h **** 	return *this;
 21957              		.loc 19 224 0
 21958 0059 4889C5   		movq	%rax, %rbp
 21959              	.LVL1862:
 21960              	.LBE21392:
 21961              	.LBE21399:
 21962              	.LBB21400:
 21963              	.LBB21398:
 21964              		.loc 21 907 0
 21965 005c E8000000 		call	_ZN3pmt3eqvERKN5boost13intrusive_ptrINS_8pmt_baseEEES5_@PLT
 21965      00
 21966              	.LVL1863:
 21967 0061 84C0     		testb	%al, %al
 21968 0063 0F84C700 		je	.L1239
 21968      0000
 21969              	.LVL1864:
 21970              	.L1228:
 21971              	.LBE21398:
 21972              	.LBE21400:
 21973              	.LBE21389:
 21974              	.LBE21383:
1942:/usr/include/c++/6/bits/stl_tree.h **** 	}
 21975              		.loc 19 1942 0
 21976 0069 4C89EE   		movq	%r13, %rsi
GAS LISTING /tmp/ccvmoMuv.s 			page 861


 21977 006c 4C89E7   		movq	%r12, %rdi
 21978 006f E8000000 		call	_ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFvS4_EEEESt1
 21978      00
 21979              	.LVL1865:
 21980              	.L1229:
 21981              	.LBE21428:
1979:/usr/include/c++/6/bits/stl_tree.h **** 
 21982              		.loc 19 1979 0 discriminator 1
 21983 0074 4883C408 		addq	$8, %rsp
 21984              		.cfi_remember_state
 21985              		.cfi_def_cfa_offset 40
 21986 0078 5B       		popq	%rbx
 21987              		.cfi_def_cfa_offset 32
 21988              	.LVL1866:
 21989 0079 5D       		popq	%rbp
 21990              		.cfi_def_cfa_offset 24
 21991 007a 415C     		popq	%r12
 21992              		.cfi_def_cfa_offset 16
 21993              	.LVL1867:
 21994 007c 415D     		popq	%r13
 21995              		.cfi_def_cfa_offset 8
 21996              	.LVL1868:
 21997 007e C3       		ret
 21998              	.LVL1869:
 21999 007f 90       		.p2align 4,,10
 22000              		.p2align 3
 22001              	.L1230:
 22002              		.cfi_restore_state
 22003              	.LBB21429:
 22004              	.LBB21418:
 22005              	.LBB21401:
 22006              	.LBB21402:
 22007              	.LBB21403:
 22008              		.loc 21 907 0
 22009 0080 4C89EE   		movq	%r13, %rsi
 22010 0083 4889EF   		movq	%rbp, %rdi
 22011 0086 E8000000 		call	_ZN3pmt3eqvERKN5boost13intrusive_ptrINS_8pmt_baseEEES5_@PLT
 22011      00
 22012              	.LVL1870:
 22013 008b 84C0     		testb	%al, %al
 22014 008d 0F85CD00 		jne	.L1233
 22014      0000
 22015              	.LVL1871:
 22016              	.LBE21403:
 22017              	.LBE21402:
1960:/usr/include/c++/6/bits/stl_tree.h **** 	{
 22018              		.loc 19 1960 0
 22019 0093 498B4500 		movq	0(%r13), %rax
 22020 0097 48394320 		cmpq	%rax, 32(%rbx)
 22021 009b 0F86BF00 		jbe	.L1233
 22021      0000
 22022              	.LVL1872:
 22023              	.LBB21404:
1964:/usr/include/c++/6/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
 22024              		.loc 19 1964 0
 22025 00a1 49395C24 		cmpq	%rbx, 32(%r12)
 22025      20
GAS LISTING /tmp/ccvmoMuv.s 			page 862


 22026 00a6 7432     		je	.L1237
 22027              	.LVL1873:
 22028              	.LBB21405:
 22029              	.LBB21406:
 209:/usr/include/c++/6/bits/stl_tree.h **** 	return *this;
 22030              		.loc 19 209 0
 22031 00a8 4889DF   		movq	%rbx, %rdi
 22032 00ab E8000000 		call	_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@PLT
 22032      00
 22033              	.LVL1874:
 22034              	.LBE21406:
 22035              	.LBE21405:
 22036              	.LBB21408:
 22037              	.LBB21409:
 22038              	.LBB21410:
 22039              		.loc 20 891 0
 22040 00b0 488D7020 		leaq	32(%rax), %rsi
 22041              	.LBE21410:
 22042              	.LBE21409:
 22043              	.LBE21408:
 22044              	.LBB21411:
 22045              	.LBB21412:
 22046              		.loc 21 907 0
 22047 00b4 4C89EF   		movq	%r13, %rdi
 22048              	.LBE21412:
 22049              	.LBE21411:
 22050              	.LBB21414:
 22051              	.LBB21407:
 209:/usr/include/c++/6/bits/stl_tree.h **** 	return *this;
 22052              		.loc 19 209 0
 22053 00b7 4889C5   		movq	%rax, %rbp
 22054              	.LVL1875:
 22055              	.LBE21407:
 22056              	.LBE21414:
 22057              	.LBB21415:
 22058              	.LBB21413:
 22059              		.loc 21 907 0
 22060 00ba E8000000 		call	_ZN3pmt3eqvERKN5boost13intrusive_ptrINS_8pmt_baseEEES5_@PLT
 22060      00
 22061              	.LVL1876:
 22062 00bf 84C0     		testb	%al, %al
 22063 00c1 75A6     		jne	.L1228
 22064              	.LVL1877:
 22065              	.LBE21413:
 22066              	.LBE21415:
1966:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 22067              		.loc 19 1966 0
 22068 00c3 488B4520 		movq	32(%rbp), %rax
 22069 00c7 49394500 		cmpq	%rax, 0(%r13)
 22070 00cb 769C     		jbe	.L1228
 22071              	.LVL1878:
1968:/usr/include/c++/6/bits/stl_tree.h **** 		return _Res(0, __pos._M_node);
 22072              		.loc 19 1968 0
 22073 00cd 48837B18 		cmpq	$0, 24(%rbx)
 22073      00
1971:/usr/include/c++/6/bits/stl_tree.h **** 	    }
 22074              		.loc 19 1971 0
GAS LISTING /tmp/ccvmoMuv.s 			page 863


 22075 00d2 4889E8   		movq	%rbp, %rax
 22076 00d5 4889EA   		movq	%rbp, %rdx
1968:/usr/include/c++/6/bits/stl_tree.h **** 		return _Res(0, __pos._M_node);
 22077              		.loc 19 1968 0
 22078 00d8 759A     		jne	.L1229
 22079              	.LVL1879:
 22080              	.L1237:
1969:/usr/include/c++/6/bits/stl_tree.h **** 	      else
 22081              		.loc 19 1969 0
 22082 00da 31C0     		xorl	%eax, %eax
 22083 00dc 4889DA   		movq	%rbx, %rdx
 22084 00df EB93     		jmp	.L1229
 22085              	.LVL1880:
 22086              		.p2align 4,,10
 22087 00e1 0F1F8000 		.p2align 3
 22087      000000
 22088              	.L1238:
 22089              	.LBE21404:
 22090              	.LBE21401:
 22091              	.LBE21418:
1939:/usr/include/c++/6/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
 22092              		.loc 19 1939 0
 22093 00e8 48837F28 		cmpq	$0, 40(%rdi)
 22093      00
 22094 00ed 0F8476FF 		je	.L1228
 22094      FFFF
 22095 00f3 488B5F20 		movq	32(%rdi), %rbx
 22096              	.LVL1881:
 22097              	.LBB21419:
 22098              	.LBB21420:
 22099              		.loc 21 907 0
 22100 00f7 4889D6   		movq	%rdx, %rsi
 22101              	.LVL1882:
 22102              	.LBE21420:
 22103              	.LBE21419:
 22104              	.LBB21422:
 22105              	.LBB21423:
 22106              	.LBB21424:
 22107              		.loc 20 891 0
 22108 00fa 488D7B20 		leaq	32(%rbx), %rdi
 22109              	.LVL1883:
 22110              	.LBE21424:
 22111              	.LBE21423:
 22112              	.LBE21422:
 22113              	.LBB21425:
 22114              	.LBB21421:
 22115              		.loc 21 907 0
 22116 00fe E8000000 		call	_ZN3pmt3eqvERKN5boost13intrusive_ptrINS_8pmt_baseEEES5_@PLT
 22116      00
 22117              	.LVL1884:
 22118 0103 84C0     		testb	%al, %al
 22119 0105 0F855EFF 		jne	.L1228
 22119      FFFF
 22120              	.LVL1885:
 22121              	.LBE21421:
 22122              	.LBE21425:
1939:/usr/include/c++/6/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
GAS LISTING /tmp/ccvmoMuv.s 			page 864


 22123              		.loc 19 1939 0
 22124 010b 488B4320 		movq	32(%rbx), %rax
 22125 010f 49394500 		cmpq	%rax, 0(%r13)
 22126 0113 0F8350FF 		jnb	.L1228
 22126      FFFF
1940:/usr/include/c++/6/bits/stl_tree.h **** 	  else
 22127              		.loc 19 1940 0
 22128 0119 498B5424 		movq	32(%r12), %rdx
 22128      20
 22129              	.LBE21429:
1979:/usr/include/c++/6/bits/stl_tree.h **** 
 22130              		.loc 19 1979 0
 22131 011e 4883C408 		addq	$8, %rsp
 22132              		.cfi_remember_state
 22133              		.cfi_def_cfa_offset 40
 22134              	.LBB21430:
1940:/usr/include/c++/6/bits/stl_tree.h **** 	  else
 22135              		.loc 19 1940 0
 22136 0122 31C0     		xorl	%eax, %eax
 22137              	.LBE21430:
1979:/usr/include/c++/6/bits/stl_tree.h **** 
 22138              		.loc 19 1979 0
 22139 0124 5B       		popq	%rbx
 22140              		.cfi_def_cfa_offset 32
 22141 0125 5D       		popq	%rbp
 22142              		.cfi_def_cfa_offset 24
 22143 0126 415C     		popq	%r12
 22144              		.cfi_def_cfa_offset 16
 22145              	.LVL1886:
 22146 0128 415D     		popq	%r13
 22147              		.cfi_def_cfa_offset 8
 22148              	.LVL1887:
 22149 012a C3       		ret
 22150              	.LVL1888:
 22151 012b 0F1F4400 		.p2align 4,,10
 22151      00
 22152              		.p2align 3
 22153              	.L1239:
 22154              		.cfi_restore_state
 22155              	.LBB21431:
 22156              	.LBB21426:
 22157              	.LBB21416:
1950:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 22158              		.loc 19 1950 0
 22159 0130 498B4500 		movq	0(%r13), %rax
 22160 0134 48394520 		cmpq	%rax, 32(%rbp)
 22161 0138 0F862BFF 		jbe	.L1228
 22161      FFFF
 22162              	.LVL1889:
1952:/usr/include/c++/6/bits/stl_tree.h **** 		return _Res(0, __before._M_node);
 22163              		.loc 19 1952 0
 22164 013e 48837D18 		cmpq	$0, 24(%rbp)
 22164      00
1955:/usr/include/c++/6/bits/stl_tree.h **** 	    }
 22165              		.loc 19 1955 0
 22166 0143 4889D8   		movq	%rbx, %rax
 22167 0146 4889DA   		movq	%rbx, %rdx
GAS LISTING /tmp/ccvmoMuv.s 			page 865


 22168              	.LVL1890:
1952:/usr/include/c++/6/bits/stl_tree.h **** 		return _Res(0, __before._M_node);
 22169              		.loc 19 1952 0
 22170 0149 0F8525FF 		jne	.L1229
 22170      FFFF
1953:/usr/include/c++/6/bits/stl_tree.h **** 	      else
 22171              		.loc 19 1953 0
 22172 014f 31C0     		xorl	%eax, %eax
 22173 0151 4889EA   		movq	%rbp, %rdx
 22174 0154 E91BFFFF 		jmp	.L1229
 22174      FF
 22175              	.LVL1891:
 22176 0159 0F1F8000 		.p2align 4,,10
 22176      000000
 22177              		.p2align 3
 22178              	.L1233:
 22179              	.LBE21416:
 22180              	.LBE21426:
 22181              	.LBE21431:
1979:/usr/include/c++/6/bits/stl_tree.h **** 
 22182              		.loc 19 1979 0
 22183 0160 4883C408 		addq	$8, %rsp
 22184              		.cfi_def_cfa_offset 40
 22185              	.LBB21432:
 22186              	.LBB21427:
 22187              	.LBB21417:
1978:/usr/include/c++/6/bits/stl_tree.h ****     }
 22188              		.loc 19 1978 0
 22189 0164 4889D8   		movq	%rbx, %rax
 22190 0167 31D2     		xorl	%edx, %edx
 22191              	.LVL1892:
 22192              	.LBE21417:
 22193              	.LBE21427:
 22194              	.LBE21432:
1979:/usr/include/c++/6/bits/stl_tree.h **** 
 22195              		.loc 19 1979 0
 22196 0169 5B       		popq	%rbx
 22197              		.cfi_def_cfa_offset 32
 22198              	.LVL1893:
 22199 016a 5D       		popq	%rbp
 22200              		.cfi_def_cfa_offset 24
 22201 016b 415C     		popq	%r12
 22202              		.cfi_def_cfa_offset 16
 22203              	.LVL1894:
 22204 016d 415D     		popq	%r13
 22205              		.cfi_def_cfa_offset 8
 22206              	.LVL1895:
 22207 016f C3       		ret
 22208              		.cfi_endproc
 22209              	.LFE13770:
 22211              		.section	.text._ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFv
 22212              		.align 2
 22213              		.p2align 4,,15
 22214              		.weak	_ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFvS4_EEEESt
 22216              	_ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFvS4_EEEESt10_Sele
 22217              	.LFB12716:
2193:/usr/include/c++/6/bits/stl_tree.h ****       _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
GAS LISTING /tmp/ccvmoMuv.s 			page 866


 22218              		.loc 19 2193 0
 22219              		.cfi_startproc
 22220              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 22221              		.cfi_lsda 0x1b,.LLSDA12716
 22222              	.LVL1896:
 22223 0000 4156     		pushq	%r14
 22224              		.cfi_def_cfa_offset 16
 22225              		.cfi_offset 14, -16
 22226 0002 4155     		pushq	%r13
 22227              		.cfi_def_cfa_offset 24
 22228              		.cfi_offset 13, -24
 22229 0004 4989CE   		movq	%rcx, %r14
 22230 0007 4154     		pushq	%r12
 22231              		.cfi_def_cfa_offset 32
 22232              		.cfi_offset 12, -32
 22233 0009 55       		pushq	%rbp
 22234              		.cfi_def_cfa_offset 40
 22235              		.cfi_offset 6, -40
 22236 000a 4889FD   		movq	%rdi, %rbp
 22237 000d 53       		pushq	%rbx
 22238              		.cfi_def_cfa_offset 48
 22239              		.cfi_offset 3, -48
 22240              	.LBB21556:
 22241              	.LBB21557:
 22242              	.LBB21558:
 22243              	.LBB21559:
 22244              	.LBB21560:
 22245              	.LBB21561:
 104:/usr/include/c++/6/ext/new_allocator.h ****       }
 22246              		.loc 12 104 0
 22247 000e BF480000 		movl	$72, %edi
 22247      00
 22248              	.LVL1897:
 22249              	.LBE21561:
 22250              	.LBE21560:
 22251              	.LBE21559:
 22252              	.LBE21558:
 22253              	.LBE21557:
 22254              	.LBE21556:
2193:/usr/include/c++/6/bits/stl_tree.h ****       _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
 22255              		.loc 19 2193 0
 22256 0013 4989F4   		movq	%rsi, %r12
 22257 0016 4883EC10 		subq	$16, %rsp
 22258              		.cfi_def_cfa_offset 64
 22259              	.LEHB111:
 22260              	.LBB21593:
 22261              	.LBB21590:
 22262              	.LBB21565:
 22263              	.LBB21564:
 22264              	.LBB21563:
 22265              	.LBB21562:
 104:/usr/include/c++/6/ext/new_allocator.h ****       }
 22266              		.loc 12 104 0
 22267 001a E8000000 		call	_Znwm@PLT
 22267      00
 22268              	.LVL1898:
 22269              	.LEHE111:
GAS LISTING /tmp/ccvmoMuv.s 			page 867


 22270 001f 4889C3   		movq	%rax, %rbx
 22271              	.LVL1899:
 22272              	.LBE21562:
 22273              	.LBE21563:
 22274              	.LBE21564:
 22275              	.LBE21565:
 22276              	.LBB21566:
 22277              	.LBB21567:
 22278              	.LBB21568:
 22279              	.LBB21569:
 22280              	.LBB21570:
 22281              	.LBB21571:
 22282              		.file 47 "/usr/include/c++/6/ext/aligned_buffer.h"
   1:/usr/include/c++/6/ext/aligned_buffer.h **** // Aligned memory buffer -*- C++ -*-
   2:/usr/include/c++/6/ext/aligned_buffer.h **** 
   3:/usr/include/c++/6/ext/aligned_buffer.h **** // Copyright (C) 2013-2016 Free Software Foundation, Inc.
   4:/usr/include/c++/6/ext/aligned_buffer.h **** //
   5:/usr/include/c++/6/ext/aligned_buffer.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/6/ext/aligned_buffer.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/6/ext/aligned_buffer.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/6/ext/aligned_buffer.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/6/ext/aligned_buffer.h **** // any later version.
  10:/usr/include/c++/6/ext/aligned_buffer.h **** 
  11:/usr/include/c++/6/ext/aligned_buffer.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/6/ext/aligned_buffer.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/6/ext/aligned_buffer.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/6/ext/aligned_buffer.h **** // GNU General Public License for more details.
  15:/usr/include/c++/6/ext/aligned_buffer.h **** 
  16:/usr/include/c++/6/ext/aligned_buffer.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/6/ext/aligned_buffer.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/6/ext/aligned_buffer.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/6/ext/aligned_buffer.h **** 
  20:/usr/include/c++/6/ext/aligned_buffer.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/6/ext/aligned_buffer.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/6/ext/aligned_buffer.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/6/ext/aligned_buffer.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/6/ext/aligned_buffer.h **** 
  25:/usr/include/c++/6/ext/aligned_buffer.h **** /** @file ext/aligned_buffer.h
  26:/usr/include/c++/6/ext/aligned_buffer.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/6/ext/aligned_buffer.h ****  */
  28:/usr/include/c++/6/ext/aligned_buffer.h **** 
  29:/usr/include/c++/6/ext/aligned_buffer.h **** #ifndef _ALIGNED_BUFFER_H
  30:/usr/include/c++/6/ext/aligned_buffer.h **** #define _ALIGNED_BUFFER_H 1
  31:/usr/include/c++/6/ext/aligned_buffer.h **** 
  32:/usr/include/c++/6/ext/aligned_buffer.h **** #pragma GCC system_header
  33:/usr/include/c++/6/ext/aligned_buffer.h **** 
  34:/usr/include/c++/6/ext/aligned_buffer.h **** #if __cplusplus >= 201103L
  35:/usr/include/c++/6/ext/aligned_buffer.h **** # include <type_traits>
  36:/usr/include/c++/6/ext/aligned_buffer.h **** #else
  37:/usr/include/c++/6/ext/aligned_buffer.h **** # include <bits/c++0x_warning.h>
  38:/usr/include/c++/6/ext/aligned_buffer.h **** #endif
  39:/usr/include/c++/6/ext/aligned_buffer.h **** 
  40:/usr/include/c++/6/ext/aligned_buffer.h **** namespace __gnu_cxx
  41:/usr/include/c++/6/ext/aligned_buffer.h **** {
  42:/usr/include/c++/6/ext/aligned_buffer.h ****   // A utility type containing a POD object that can hold an object of type
  43:/usr/include/c++/6/ext/aligned_buffer.h ****   // _Tp initialized via placement new or allocator_traits::construct.
  44:/usr/include/c++/6/ext/aligned_buffer.h ****   // Intended for use as a data member subobject, use __aligned_buffer for
GAS LISTING /tmp/ccvmoMuv.s 			page 868


  45:/usr/include/c++/6/ext/aligned_buffer.h ****   // complete objects.
  46:/usr/include/c++/6/ext/aligned_buffer.h ****   template<typename _Tp>
  47:/usr/include/c++/6/ext/aligned_buffer.h ****     struct __aligned_membuf
  48:/usr/include/c++/6/ext/aligned_buffer.h ****     {
  49:/usr/include/c++/6/ext/aligned_buffer.h ****       // Target macro ADJUST_FIELD_ALIGN can produce different alignment for
  50:/usr/include/c++/6/ext/aligned_buffer.h ****       // types when used as class members. __aligned_membuf is intended
  51:/usr/include/c++/6/ext/aligned_buffer.h ****       // for use as a class member, so align the buffer as for a class member.
  52:/usr/include/c++/6/ext/aligned_buffer.h ****       struct _Tp2 { _Tp _M_t; };
  53:/usr/include/c++/6/ext/aligned_buffer.h **** 
  54:/usr/include/c++/6/ext/aligned_buffer.h ****       alignas(__alignof__(_Tp2::_M_t)) unsigned char _M_storage[sizeof(_Tp)];
  55:/usr/include/c++/6/ext/aligned_buffer.h **** 
  56:/usr/include/c++/6/ext/aligned_buffer.h ****       __aligned_membuf() = default;
  57:/usr/include/c++/6/ext/aligned_buffer.h **** 
  58:/usr/include/c++/6/ext/aligned_buffer.h ****       // Can be used to avoid value-initialization zeroing _M_storage.
  59:/usr/include/c++/6/ext/aligned_buffer.h ****       __aligned_membuf(std::nullptr_t) { }
  60:/usr/include/c++/6/ext/aligned_buffer.h **** 
  61:/usr/include/c++/6/ext/aligned_buffer.h ****       void*
  62:/usr/include/c++/6/ext/aligned_buffer.h ****       _M_addr() noexcept
  63:/usr/include/c++/6/ext/aligned_buffer.h ****       { return static_cast<void*>(&_M_storage); }
 22283              		.loc 47 63 0
 22284 0022 4C8D6820 		leaq	32(%rax), %r13
 22285              	.LVL1900:
 22286              	.LBE21571:
 22287              	.LBE21570:
 22288              	.LBE21569:
 22289              	.LBE21568:
 22290              	.LBB21572:
 22291              	.LBB21573:
 22292              	.LBB21574:
 22293              	.LBB21575:
 22294              	.LBB21576:
 22295              	.LBB21577:
  90:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 22296              		.loc 34 90 0
 22297 0026 498B06   		movq	(%r14), %rax
 22298              	.LVL1901:
 22299 0029 488B38   		movq	(%rax), %rdi
  92:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 22300              		.loc 34 92 0
 22301 002c 4885FF   		testq	%rdi, %rdi
  90:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 22302              		.loc 34 90 0
 22303 002f 48897B20 		movq	%rdi, 32(%rbx)
  92:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 22304              		.loc 34 92 0
 22305 0033 7405     		je	.L1243
 22306              	.LEHB112:
 22307 0035 E8000000 		call	_ZN3pmt21intrusive_ptr_add_refEPNS_8pmt_baseE@PLT
 22307      00
 22308              	.LVL1902:
 22309              	.LEHE112:
 22310              	.L1243:
 22311              	.LBE21577:
 22312              	.LBE21576:
 22313              	.LBB21578:
 22314              	.LBB21579:
 22315              	.LBB21580:
GAS LISTING /tmp/ccvmoMuv.s 			page 869


 22316              	.LBB21581:
 598:/usr/include/boost/function/function_base.hpp **** 
 22317              		.loc 13 598 0
 22318 003a 48C74328 		movq	$0, 40(%rbx)
 22318      00000000 
 22319              	.LVL1903:
 22320              	.LBE21581:
 22321              	.LBE21580:
 22322              	.LBE21579:
 22323              	.LBE21578:
 22324              	.LBE21575:
 22325              	.LBE21574:
 22326              	.LBE21573:
 22327              	.LBE21572:
 22328              	.LBE21567:
 22329              	.LBE21566:
 22330              	.LBE21590:
 22331              	.LBE21593:
 22332              	.LBB21594:
2200:/usr/include/c++/6/bits/stl_tree.h **** 
 22333              		.loc 19 2200 0
 22334 0042 4C89EA   		movq	%r13, %rdx
 22335 0045 4C89E6   		movq	%r12, %rsi
 22336 0048 4889EF   		movq	%rbp, %rdi
 22337              	.LEHB113:
 22338 004b E8000000 		call	_ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFvS4_EEEESt1
 22338      00
 22339              	.LVL1904:
2202:/usr/include/c++/6/bits/stl_tree.h **** 	      return _M_insert_node(__res.first, __res.second, __z);
 22340              		.loc 19 2202 0
 22341 0050 4885D2   		testq	%rdx, %rdx
2200:/usr/include/c++/6/bits/stl_tree.h **** 
 22342              		.loc 19 2200 0
 22343 0053 4989D4   		movq	%rdx, %r12
 22344              	.LVL1905:
2202:/usr/include/c++/6/bits/stl_tree.h **** 	      return _M_insert_node(__res.first, __res.second, __z);
 22345              		.loc 19 2202 0
 22346 0056 7468     		je	.L1284
 22347              	.LVL1906:
 22348              	.LBB21595:
 22349              	.LBB21596:
2099:/usr/include/c++/6/bits/stl_tree.h **** 						      _S_key(__p)));
 22350              		.loc 19 2099 0
 22351 0058 4885C0   		testq	%rax, %rax
 22352 005b 4C8D7508 		leaq	8(%rbp), %r14
 22353              	.LVL1907:
 22354 005f 742F     		je	.L1247
 22355              	.L1249:
 22356              	.LBE21596:
 22357              	.LBE21595:
 22358              	.LBE21594:
2193:/usr/include/c++/6/bits/stl_tree.h ****       _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
 22359              		.loc 19 2193 0
 22360 0061 BF010000 		movl	$1, %edi
 22360      00
 22361              	.LVL1908:
 22362              	.L1248:
GAS LISTING /tmp/ccvmoMuv.s 			page 870


 22363              	.LBB21627:
 22364              	.LBB21604:
 22365              	.LBB21602:
2102:/usr/include/c++/6/bits/stl_tree.h **** 				    this->_M_impl._M_header);
 22366              		.loc 19 2102 0
 22367 0066 4C89F1   		movq	%r14, %rcx
 22368 0069 4C89E2   		movq	%r12, %rdx
 22369 006c 4889DE   		movq	%rbx, %rsi
 22370 006f E8000000 		call	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT
 22370      00
 22371              	.LVL1909:
2104:/usr/include/c++/6/bits/stl_tree.h ****       return iterator(__z);
 22372              		.loc 19 2104 0
 22373 0074 48834528 		addq	$1, 40(%rbp)
 22373      01
 22374              	.LBE21602:
 22375              	.LBE21604:
 22376              	.LBE21627:
2213:/usr/include/c++/6/bits/stl_tree.h **** 
 22377              		.loc 19 2213 0
 22378 0079 4883C410 		addq	$16, %rsp
 22379              		.cfi_remember_state
 22380              		.cfi_def_cfa_offset 48
 22381 007d 4889D8   		movq	%rbx, %rax
 22382 0080 5B       		popq	%rbx
 22383              		.cfi_def_cfa_offset 40
 22384              	.LVL1910:
 22385 0081 5D       		popq	%rbp
 22386              		.cfi_def_cfa_offset 32
 22387              	.LVL1911:
 22388 0082 415C     		popq	%r12
 22389              		.cfi_def_cfa_offset 24
 22390              	.LVL1912:
 22391 0084 415D     		popq	%r13
 22392              		.cfi_def_cfa_offset 16
 22393 0086 415E     		popq	%r14
 22394              		.cfi_def_cfa_offset 8
 22395              	.LVL1913:
 22396 0088 C3       		ret
 22397              	.LVL1914:
 22398 0089 0F1F8000 		.p2align 4,,10
 22398      000000
 22399              		.p2align 3
 22400              	.L1247:
 22401              		.cfi_restore_state
 22402              	.LBB21628:
 22403              	.LBB21605:
 22404              	.LBB21603:
2098:/usr/include/c++/6/bits/stl_tree.h **** 			    || _M_impl._M_key_compare(_S_key(__z),
 22405              		.loc 19 2098 0
 22406 0090 4C39F2   		cmpq	%r14, %rdx
 22407 0093 74CC     		je	.L1249
 22408              	.LVL1915:
 22409              	.LBB21597:
 22410              	.LBB21598:
 22411              	.LBB21599:
 22412              		.loc 20 891 0
GAS LISTING /tmp/ccvmoMuv.s 			page 871


 22413 0095 488D7220 		leaq	32(%rdx), %rsi
 22414              	.LVL1916:
 22415              	.LBE21599:
 22416              	.LBE21598:
 22417              	.LBE21597:
 22418              	.LBB21600:
 22419              	.LBB21601:
 22420              		.loc 21 907 0
 22421 0099 4C89EF   		movq	%r13, %rdi
 22422 009c E8000000 		call	_ZN3pmt3eqvERKN5boost13intrusive_ptrINS_8pmt_baseEEES5_@PLT
 22422      00
 22423              	.LVL1917:
 22424              	.LEHE113:
 22425 00a1 31FF     		xorl	%edi, %edi
 22426 00a3 84C0     		testb	%al, %al
 22427 00a5 75BF     		jne	.L1248
 22428              	.LVL1918:
 22429 00a7 31FF     		xorl	%edi, %edi
 22430 00a9 498B4424 		movq	32(%r12), %rax
 22430      20
 22431 00ae 48394320 		cmpq	%rax, 32(%rbx)
 22432 00b2 400F97C7 		seta	%dil
 22433 00b6 EBAE     		jmp	.L1248
 22434              	.LVL1919:
 22435 00b8 0F1F8400 		.p2align 4,,10
 22435      00000000 
 22436              		.p2align 3
 22437              	.L1284:
 22438              	.LBE21601:
 22439              	.LBE21600:
 22440              	.LBE21603:
 22441              	.LBE21605:
 22442              	.LBB21606:
 22443              	.LBB21607:
 22444              	.LBB21608:
 22445              	.LBB21609:
 22446              	.LBB21610:
 22447              	.LBB21611:
 22448              	.LBB21612:
 22449              	.LBB21613:
 22450              	.LBB21614:
 22451              		.file 48 "/usr/include/boost/function/function_template.hpp"
   1:/usr/include/boost/function/function_template.hpp **** // Boost.Function library
   2:/usr/include/boost/function/function_template.hpp **** 
   3:/usr/include/boost/function/function_template.hpp **** //  Copyright Douglas Gregor 2001-2006
   4:/usr/include/boost/function/function_template.hpp **** //  Copyright Emil Dotchevski 2007
   5:/usr/include/boost/function/function_template.hpp **** //  Use, modification and distribution is subject to the Boost Software License, Version 1.0.
   6:/usr/include/boost/function/function_template.hpp **** //  (See accompanying file LICENSE_1_0.txt or copy at
   7:/usr/include/boost/function/function_template.hpp **** //  http://www.boost.org/LICENSE_1_0.txt)
   8:/usr/include/boost/function/function_template.hpp **** 
   9:/usr/include/boost/function/function_template.hpp **** // For more information, see http://www.boost.org
  10:/usr/include/boost/function/function_template.hpp **** 
  11:/usr/include/boost/function/function_template.hpp **** // Note: this header is a header template and must NOT have multiple-inclusion
  12:/usr/include/boost/function/function_template.hpp **** // protection.
  13:/usr/include/boost/function/function_template.hpp **** #include <boost/function/detail/prologue.hpp>
  14:/usr/include/boost/function/function_template.hpp **** #include <boost/detail/no_exceptions_support.hpp>
  15:/usr/include/boost/function/function_template.hpp **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 872


  16:/usr/include/boost/function/function_template.hpp **** #if defined(BOOST_MSVC)
  17:/usr/include/boost/function/function_template.hpp **** #   pragma warning( push )
  18:/usr/include/boost/function/function_template.hpp **** #   pragma warning( disable : 4127 ) // "conditional expression is constant"
  19:/usr/include/boost/function/function_template.hpp **** #endif
  20:/usr/include/boost/function/function_template.hpp **** 
  21:/usr/include/boost/function/function_template.hpp **** #define BOOST_FUNCTION_TEMPLATE_PARMS BOOST_PP_ENUM_PARAMS(BOOST_FUNCTION_NUM_ARGS, typename T)
  22:/usr/include/boost/function/function_template.hpp **** 
  23:/usr/include/boost/function/function_template.hpp **** #define BOOST_FUNCTION_TEMPLATE_ARGS BOOST_PP_ENUM_PARAMS(BOOST_FUNCTION_NUM_ARGS, T)
  24:/usr/include/boost/function/function_template.hpp **** 
  25:/usr/include/boost/function/function_template.hpp **** #define BOOST_FUNCTION_PARM(J,I,D) BOOST_PP_CAT(T,I) BOOST_PP_CAT(a,I)
  26:/usr/include/boost/function/function_template.hpp **** 
  27:/usr/include/boost/function/function_template.hpp **** #define BOOST_FUNCTION_PARMS BOOST_PP_ENUM(BOOST_FUNCTION_NUM_ARGS,BOOST_FUNCTION_PARM,BOOST_PP_EMP
  28:/usr/include/boost/function/function_template.hpp **** 
  29:/usr/include/boost/function/function_template.hpp **** #ifdef BOOST_NO_CXX11_RVALUE_REFERENCES
  30:/usr/include/boost/function/function_template.hpp **** #   define BOOST_FUNCTION_ARGS BOOST_PP_ENUM_PARAMS(BOOST_FUNCTION_NUM_ARGS, a)
  31:/usr/include/boost/function/function_template.hpp **** #else
  32:/usr/include/boost/function/function_template.hpp **** #   include <boost/move/utility_core.hpp>
  33:/usr/include/boost/function/function_template.hpp **** #   define BOOST_FUNCTION_ARG(J,I,D) ::boost::forward< BOOST_PP_CAT(T,I) >(BOOST_PP_CAT(a,I))
  34:/usr/include/boost/function/function_template.hpp **** #   define BOOST_FUNCTION_ARGS BOOST_PP_ENUM(BOOST_FUNCTION_NUM_ARGS,BOOST_FUNCTION_ARG,BOOST_PP_EM
  35:/usr/include/boost/function/function_template.hpp **** #endif
  36:/usr/include/boost/function/function_template.hpp **** 
  37:/usr/include/boost/function/function_template.hpp **** #define BOOST_FUNCTION_ARG_TYPE(J,I,D) \
  38:/usr/include/boost/function/function_template.hpp ****   typedef BOOST_PP_CAT(T,I) BOOST_PP_CAT(BOOST_PP_CAT(arg, BOOST_PP_INC(I)),_type);
  39:/usr/include/boost/function/function_template.hpp **** 
  40:/usr/include/boost/function/function_template.hpp **** #define BOOST_FUNCTION_ARG_TYPES BOOST_PP_REPEAT(BOOST_FUNCTION_NUM_ARGS,BOOST_FUNCTION_ARG_TYPE,BO
  41:/usr/include/boost/function/function_template.hpp **** 
  42:/usr/include/boost/function/function_template.hpp **** // Comma if nonzero number of arguments
  43:/usr/include/boost/function/function_template.hpp **** #if BOOST_FUNCTION_NUM_ARGS == 0
  44:/usr/include/boost/function/function_template.hpp **** #  define BOOST_FUNCTION_COMMA
  45:/usr/include/boost/function/function_template.hpp **** #else
  46:/usr/include/boost/function/function_template.hpp **** #  define BOOST_FUNCTION_COMMA ,
  47:/usr/include/boost/function/function_template.hpp **** #endif // BOOST_FUNCTION_NUM_ARGS > 0
  48:/usr/include/boost/function/function_template.hpp **** 
  49:/usr/include/boost/function/function_template.hpp **** // Class names used in this version of the code
  50:/usr/include/boost/function/function_template.hpp **** #define BOOST_FUNCTION_FUNCTION BOOST_JOIN(function,BOOST_FUNCTION_NUM_ARGS)
  51:/usr/include/boost/function/function_template.hpp **** #define BOOST_FUNCTION_FUNCTION_INVOKER \
  52:/usr/include/boost/function/function_template.hpp ****   BOOST_JOIN(function_invoker,BOOST_FUNCTION_NUM_ARGS)
  53:/usr/include/boost/function/function_template.hpp **** #define BOOST_FUNCTION_VOID_FUNCTION_INVOKER \
  54:/usr/include/boost/function/function_template.hpp ****   BOOST_JOIN(void_function_invoker,BOOST_FUNCTION_NUM_ARGS)
  55:/usr/include/boost/function/function_template.hpp **** #define BOOST_FUNCTION_FUNCTION_OBJ_INVOKER \
  56:/usr/include/boost/function/function_template.hpp ****   BOOST_JOIN(function_obj_invoker,BOOST_FUNCTION_NUM_ARGS)
  57:/usr/include/boost/function/function_template.hpp **** #define BOOST_FUNCTION_VOID_FUNCTION_OBJ_INVOKER \
  58:/usr/include/boost/function/function_template.hpp ****   BOOST_JOIN(void_function_obj_invoker,BOOST_FUNCTION_NUM_ARGS)
  59:/usr/include/boost/function/function_template.hpp **** #define BOOST_FUNCTION_FUNCTION_REF_INVOKER \
  60:/usr/include/boost/function/function_template.hpp ****   BOOST_JOIN(function_ref_invoker,BOOST_FUNCTION_NUM_ARGS)
  61:/usr/include/boost/function/function_template.hpp **** #define BOOST_FUNCTION_VOID_FUNCTION_REF_INVOKER \
  62:/usr/include/boost/function/function_template.hpp ****   BOOST_JOIN(void_function_ref_invoker,BOOST_FUNCTION_NUM_ARGS)
  63:/usr/include/boost/function/function_template.hpp **** #define BOOST_FUNCTION_MEMBER_INVOKER \
  64:/usr/include/boost/function/function_template.hpp ****   BOOST_JOIN(function_mem_invoker,BOOST_FUNCTION_NUM_ARGS)
  65:/usr/include/boost/function/function_template.hpp **** #define BOOST_FUNCTION_VOID_MEMBER_INVOKER \
  66:/usr/include/boost/function/function_template.hpp ****   BOOST_JOIN(function_void_mem_invoker,BOOST_FUNCTION_NUM_ARGS)
  67:/usr/include/boost/function/function_template.hpp **** #define BOOST_FUNCTION_GET_FUNCTION_INVOKER \
  68:/usr/include/boost/function/function_template.hpp ****   BOOST_JOIN(get_function_invoker,BOOST_FUNCTION_NUM_ARGS)
  69:/usr/include/boost/function/function_template.hpp **** #define BOOST_FUNCTION_GET_FUNCTION_OBJ_INVOKER \
  70:/usr/include/boost/function/function_template.hpp ****   BOOST_JOIN(get_function_obj_invoker,BOOST_FUNCTION_NUM_ARGS)
  71:/usr/include/boost/function/function_template.hpp **** #define BOOST_FUNCTION_GET_FUNCTION_REF_INVOKER \
  72:/usr/include/boost/function/function_template.hpp ****   BOOST_JOIN(get_function_ref_invoker,BOOST_FUNCTION_NUM_ARGS)
GAS LISTING /tmp/ccvmoMuv.s 			page 873


  73:/usr/include/boost/function/function_template.hpp **** #define BOOST_FUNCTION_GET_MEMBER_INVOKER \
  74:/usr/include/boost/function/function_template.hpp ****   BOOST_JOIN(get_member_invoker,BOOST_FUNCTION_NUM_ARGS)
  75:/usr/include/boost/function/function_template.hpp **** #define BOOST_FUNCTION_GET_INVOKER \
  76:/usr/include/boost/function/function_template.hpp ****   BOOST_JOIN(get_invoker,BOOST_FUNCTION_NUM_ARGS)
  77:/usr/include/boost/function/function_template.hpp **** #define BOOST_FUNCTION_VTABLE BOOST_JOIN(basic_vtable,BOOST_FUNCTION_NUM_ARGS)
  78:/usr/include/boost/function/function_template.hpp **** 
  79:/usr/include/boost/function/function_template.hpp **** #ifndef BOOST_NO_VOID_RETURNS
  80:/usr/include/boost/function/function_template.hpp **** #  define BOOST_FUNCTION_VOID_RETURN_TYPE void
  81:/usr/include/boost/function/function_template.hpp **** #  define BOOST_FUNCTION_RETURN(X) X
  82:/usr/include/boost/function/function_template.hpp **** #else
  83:/usr/include/boost/function/function_template.hpp **** #  define BOOST_FUNCTION_VOID_RETURN_TYPE boost::detail::function::unusable
  84:/usr/include/boost/function/function_template.hpp **** #  define BOOST_FUNCTION_RETURN(X) X; return BOOST_FUNCTION_VOID_RETURN_TYPE ()
  85:/usr/include/boost/function/function_template.hpp **** #endif
  86:/usr/include/boost/function/function_template.hpp **** 
  87:/usr/include/boost/function/function_template.hpp **** namespace boost {
  88:/usr/include/boost/function/function_template.hpp ****   namespace detail {
  89:/usr/include/boost/function/function_template.hpp ****     namespace function {
  90:/usr/include/boost/function/function_template.hpp ****       template<
  91:/usr/include/boost/function/function_template.hpp ****         typename FunctionPtr,
  92:/usr/include/boost/function/function_template.hpp ****         typename R BOOST_FUNCTION_COMMA
  93:/usr/include/boost/function/function_template.hpp ****         BOOST_FUNCTION_TEMPLATE_PARMS
  94:/usr/include/boost/function/function_template.hpp ****         >
  95:/usr/include/boost/function/function_template.hpp ****       struct BOOST_FUNCTION_FUNCTION_INVOKER
  96:/usr/include/boost/function/function_template.hpp ****       {
  97:/usr/include/boost/function/function_template.hpp ****         static R invoke(function_buffer& function_ptr BOOST_FUNCTION_COMMA
  98:/usr/include/boost/function/function_template.hpp ****                         BOOST_FUNCTION_PARMS)
  99:/usr/include/boost/function/function_template.hpp ****         {
 100:/usr/include/boost/function/function_template.hpp ****           FunctionPtr f = reinterpret_cast<FunctionPtr>(function_ptr.members.func_ptr);
 101:/usr/include/boost/function/function_template.hpp ****           return f(BOOST_FUNCTION_ARGS);
 102:/usr/include/boost/function/function_template.hpp ****         }
 103:/usr/include/boost/function/function_template.hpp ****       };
 104:/usr/include/boost/function/function_template.hpp **** 
 105:/usr/include/boost/function/function_template.hpp ****       template<
 106:/usr/include/boost/function/function_template.hpp ****         typename FunctionPtr,
 107:/usr/include/boost/function/function_template.hpp ****         typename R BOOST_FUNCTION_COMMA
 108:/usr/include/boost/function/function_template.hpp ****         BOOST_FUNCTION_TEMPLATE_PARMS
 109:/usr/include/boost/function/function_template.hpp ****         >
 110:/usr/include/boost/function/function_template.hpp ****       struct BOOST_FUNCTION_VOID_FUNCTION_INVOKER
 111:/usr/include/boost/function/function_template.hpp ****       {
 112:/usr/include/boost/function/function_template.hpp ****         static BOOST_FUNCTION_VOID_RETURN_TYPE
 113:/usr/include/boost/function/function_template.hpp ****         invoke(function_buffer& function_ptr BOOST_FUNCTION_COMMA
 114:/usr/include/boost/function/function_template.hpp ****                BOOST_FUNCTION_PARMS)
 115:/usr/include/boost/function/function_template.hpp **** 
 116:/usr/include/boost/function/function_template.hpp ****         {
 117:/usr/include/boost/function/function_template.hpp ****           FunctionPtr f = reinterpret_cast<FunctionPtr>(function_ptr.members.func_ptr);
 118:/usr/include/boost/function/function_template.hpp ****           BOOST_FUNCTION_RETURN(f(BOOST_FUNCTION_ARGS));
 119:/usr/include/boost/function/function_template.hpp ****         }
 120:/usr/include/boost/function/function_template.hpp ****       };
 121:/usr/include/boost/function/function_template.hpp **** 
 122:/usr/include/boost/function/function_template.hpp ****       template<
 123:/usr/include/boost/function/function_template.hpp ****         typename FunctionObj,
 124:/usr/include/boost/function/function_template.hpp ****         typename R BOOST_FUNCTION_COMMA
 125:/usr/include/boost/function/function_template.hpp ****         BOOST_FUNCTION_TEMPLATE_PARMS
 126:/usr/include/boost/function/function_template.hpp ****       >
 127:/usr/include/boost/function/function_template.hpp ****       struct BOOST_FUNCTION_FUNCTION_OBJ_INVOKER
 128:/usr/include/boost/function/function_template.hpp ****       {
 129:/usr/include/boost/function/function_template.hpp ****         static R invoke(function_buffer& function_obj_ptr BOOST_FUNCTION_COMMA
GAS LISTING /tmp/ccvmoMuv.s 			page 874


 130:/usr/include/boost/function/function_template.hpp ****                         BOOST_FUNCTION_PARMS)
 131:/usr/include/boost/function/function_template.hpp **** 
 132:/usr/include/boost/function/function_template.hpp ****         {
 133:/usr/include/boost/function/function_template.hpp ****           FunctionObj* f;
 134:/usr/include/boost/function/function_template.hpp ****           if (function_allows_small_object_optimization<FunctionObj>::value)
 135:/usr/include/boost/function/function_template.hpp ****             f = reinterpret_cast<FunctionObj*>(function_obj_ptr.data);
 136:/usr/include/boost/function/function_template.hpp ****           else
 137:/usr/include/boost/function/function_template.hpp ****             f = reinterpret_cast<FunctionObj*>(function_obj_ptr.members.obj_ptr);
 138:/usr/include/boost/function/function_template.hpp ****           return (*f)(BOOST_FUNCTION_ARGS);
 139:/usr/include/boost/function/function_template.hpp ****         }
 140:/usr/include/boost/function/function_template.hpp ****       };
 141:/usr/include/boost/function/function_template.hpp **** 
 142:/usr/include/boost/function/function_template.hpp ****       template<
 143:/usr/include/boost/function/function_template.hpp ****         typename FunctionObj,
 144:/usr/include/boost/function/function_template.hpp ****         typename R BOOST_FUNCTION_COMMA
 145:/usr/include/boost/function/function_template.hpp ****         BOOST_FUNCTION_TEMPLATE_PARMS
 146:/usr/include/boost/function/function_template.hpp ****       >
 147:/usr/include/boost/function/function_template.hpp ****       struct BOOST_FUNCTION_VOID_FUNCTION_OBJ_INVOKER
 148:/usr/include/boost/function/function_template.hpp ****       {
 149:/usr/include/boost/function/function_template.hpp ****         static BOOST_FUNCTION_VOID_RETURN_TYPE
 150:/usr/include/boost/function/function_template.hpp ****         invoke(function_buffer& function_obj_ptr BOOST_FUNCTION_COMMA
 151:/usr/include/boost/function/function_template.hpp ****                BOOST_FUNCTION_PARMS)
 152:/usr/include/boost/function/function_template.hpp **** 
 153:/usr/include/boost/function/function_template.hpp ****         {
 154:/usr/include/boost/function/function_template.hpp ****           FunctionObj* f;
 155:/usr/include/boost/function/function_template.hpp ****           if (function_allows_small_object_optimization<FunctionObj>::value)
 156:/usr/include/boost/function/function_template.hpp ****             f = reinterpret_cast<FunctionObj*>(function_obj_ptr.data);
 157:/usr/include/boost/function/function_template.hpp ****           else
 158:/usr/include/boost/function/function_template.hpp ****             f = reinterpret_cast<FunctionObj*>(function_obj_ptr.members.obj_ptr);
 159:/usr/include/boost/function/function_template.hpp ****           BOOST_FUNCTION_RETURN((*f)(BOOST_FUNCTION_ARGS));
 160:/usr/include/boost/function/function_template.hpp ****         }
 161:/usr/include/boost/function/function_template.hpp ****       };
 162:/usr/include/boost/function/function_template.hpp **** 
 163:/usr/include/boost/function/function_template.hpp ****       template<
 164:/usr/include/boost/function/function_template.hpp ****         typename FunctionObj,
 165:/usr/include/boost/function/function_template.hpp ****         typename R BOOST_FUNCTION_COMMA
 166:/usr/include/boost/function/function_template.hpp ****         BOOST_FUNCTION_TEMPLATE_PARMS
 167:/usr/include/boost/function/function_template.hpp ****       >
 168:/usr/include/boost/function/function_template.hpp ****       struct BOOST_FUNCTION_FUNCTION_REF_INVOKER
 169:/usr/include/boost/function/function_template.hpp ****       {
 170:/usr/include/boost/function/function_template.hpp ****         static R invoke(function_buffer& function_obj_ptr BOOST_FUNCTION_COMMA
 171:/usr/include/boost/function/function_template.hpp ****                         BOOST_FUNCTION_PARMS)
 172:/usr/include/boost/function/function_template.hpp **** 
 173:/usr/include/boost/function/function_template.hpp ****         {
 174:/usr/include/boost/function/function_template.hpp ****           FunctionObj* f =
 175:/usr/include/boost/function/function_template.hpp ****             reinterpret_cast<FunctionObj*>(function_obj_ptr.members.obj_ptr);
 176:/usr/include/boost/function/function_template.hpp ****           return (*f)(BOOST_FUNCTION_ARGS);
 177:/usr/include/boost/function/function_template.hpp ****         }
 178:/usr/include/boost/function/function_template.hpp ****       };
 179:/usr/include/boost/function/function_template.hpp **** 
 180:/usr/include/boost/function/function_template.hpp ****       template<
 181:/usr/include/boost/function/function_template.hpp ****         typename FunctionObj,
 182:/usr/include/boost/function/function_template.hpp ****         typename R BOOST_FUNCTION_COMMA
 183:/usr/include/boost/function/function_template.hpp ****         BOOST_FUNCTION_TEMPLATE_PARMS
 184:/usr/include/boost/function/function_template.hpp ****       >
 185:/usr/include/boost/function/function_template.hpp ****       struct BOOST_FUNCTION_VOID_FUNCTION_REF_INVOKER
 186:/usr/include/boost/function/function_template.hpp ****       {
GAS LISTING /tmp/ccvmoMuv.s 			page 875


 187:/usr/include/boost/function/function_template.hpp ****         static BOOST_FUNCTION_VOID_RETURN_TYPE
 188:/usr/include/boost/function/function_template.hpp ****         invoke(function_buffer& function_obj_ptr BOOST_FUNCTION_COMMA
 189:/usr/include/boost/function/function_template.hpp ****                BOOST_FUNCTION_PARMS)
 190:/usr/include/boost/function/function_template.hpp **** 
 191:/usr/include/boost/function/function_template.hpp ****         {
 192:/usr/include/boost/function/function_template.hpp ****           FunctionObj* f =
 193:/usr/include/boost/function/function_template.hpp ****             reinterpret_cast<FunctionObj*>(function_obj_ptr.members.obj_ptr);
 194:/usr/include/boost/function/function_template.hpp ****           BOOST_FUNCTION_RETURN((*f)(BOOST_FUNCTION_ARGS));
 195:/usr/include/boost/function/function_template.hpp ****         }
 196:/usr/include/boost/function/function_template.hpp ****       };
 197:/usr/include/boost/function/function_template.hpp **** 
 198:/usr/include/boost/function/function_template.hpp **** #if BOOST_FUNCTION_NUM_ARGS > 0
 199:/usr/include/boost/function/function_template.hpp ****       /* Handle invocation of member pointers. */
 200:/usr/include/boost/function/function_template.hpp ****       template<
 201:/usr/include/boost/function/function_template.hpp ****         typename MemberPtr,
 202:/usr/include/boost/function/function_template.hpp ****         typename R BOOST_FUNCTION_COMMA
 203:/usr/include/boost/function/function_template.hpp ****         BOOST_FUNCTION_TEMPLATE_PARMS
 204:/usr/include/boost/function/function_template.hpp ****       >
 205:/usr/include/boost/function/function_template.hpp ****       struct BOOST_FUNCTION_MEMBER_INVOKER
 206:/usr/include/boost/function/function_template.hpp ****       {
 207:/usr/include/boost/function/function_template.hpp ****         static R invoke(function_buffer& function_obj_ptr BOOST_FUNCTION_COMMA
 208:/usr/include/boost/function/function_template.hpp ****                         BOOST_FUNCTION_PARMS)
 209:/usr/include/boost/function/function_template.hpp **** 
 210:/usr/include/boost/function/function_template.hpp ****         {
 211:/usr/include/boost/function/function_template.hpp ****           MemberPtr* f =
 212:/usr/include/boost/function/function_template.hpp ****             reinterpret_cast<MemberPtr*>(function_obj_ptr.data);
 213:/usr/include/boost/function/function_template.hpp ****           return boost::mem_fn(*f)(BOOST_FUNCTION_ARGS);
 214:/usr/include/boost/function/function_template.hpp ****         }
 215:/usr/include/boost/function/function_template.hpp ****       };
 216:/usr/include/boost/function/function_template.hpp **** 
 217:/usr/include/boost/function/function_template.hpp ****       template<
 218:/usr/include/boost/function/function_template.hpp ****         typename MemberPtr,
 219:/usr/include/boost/function/function_template.hpp ****         typename R BOOST_FUNCTION_COMMA
 220:/usr/include/boost/function/function_template.hpp ****         BOOST_FUNCTION_TEMPLATE_PARMS
 221:/usr/include/boost/function/function_template.hpp ****       >
 222:/usr/include/boost/function/function_template.hpp ****       struct BOOST_FUNCTION_VOID_MEMBER_INVOKER
 223:/usr/include/boost/function/function_template.hpp ****       {
 224:/usr/include/boost/function/function_template.hpp ****         static BOOST_FUNCTION_VOID_RETURN_TYPE
 225:/usr/include/boost/function/function_template.hpp ****         invoke(function_buffer& function_obj_ptr BOOST_FUNCTION_COMMA
 226:/usr/include/boost/function/function_template.hpp ****                BOOST_FUNCTION_PARMS)
 227:/usr/include/boost/function/function_template.hpp **** 
 228:/usr/include/boost/function/function_template.hpp ****         {
 229:/usr/include/boost/function/function_template.hpp ****           MemberPtr* f =
 230:/usr/include/boost/function/function_template.hpp ****             reinterpret_cast<MemberPtr*>(function_obj_ptr.data);
 231:/usr/include/boost/function/function_template.hpp ****           BOOST_FUNCTION_RETURN(boost::mem_fn(*f)(BOOST_FUNCTION_ARGS));
 232:/usr/include/boost/function/function_template.hpp ****         }
 233:/usr/include/boost/function/function_template.hpp ****       };
 234:/usr/include/boost/function/function_template.hpp **** #endif
 235:/usr/include/boost/function/function_template.hpp **** 
 236:/usr/include/boost/function/function_template.hpp ****       template<
 237:/usr/include/boost/function/function_template.hpp ****         typename FunctionPtr,
 238:/usr/include/boost/function/function_template.hpp ****         typename R BOOST_FUNCTION_COMMA
 239:/usr/include/boost/function/function_template.hpp ****         BOOST_FUNCTION_TEMPLATE_PARMS
 240:/usr/include/boost/function/function_template.hpp ****       >
 241:/usr/include/boost/function/function_template.hpp ****       struct BOOST_FUNCTION_GET_FUNCTION_INVOKER
 242:/usr/include/boost/function/function_template.hpp ****       {
 243:/usr/include/boost/function/function_template.hpp ****         typedef typename mpl::if_c<(is_void<R>::value),
GAS LISTING /tmp/ccvmoMuv.s 			page 876


 244:/usr/include/boost/function/function_template.hpp ****                             BOOST_FUNCTION_VOID_FUNCTION_INVOKER<
 245:/usr/include/boost/function/function_template.hpp ****                             FunctionPtr,
 246:/usr/include/boost/function/function_template.hpp ****                             R BOOST_FUNCTION_COMMA
 247:/usr/include/boost/function/function_template.hpp ****                             BOOST_FUNCTION_TEMPLATE_ARGS
 248:/usr/include/boost/function/function_template.hpp ****                           >,
 249:/usr/include/boost/function/function_template.hpp ****                           BOOST_FUNCTION_FUNCTION_INVOKER<
 250:/usr/include/boost/function/function_template.hpp ****                             FunctionPtr,
 251:/usr/include/boost/function/function_template.hpp ****                             R BOOST_FUNCTION_COMMA
 252:/usr/include/boost/function/function_template.hpp ****                             BOOST_FUNCTION_TEMPLATE_ARGS
 253:/usr/include/boost/function/function_template.hpp ****                           >
 254:/usr/include/boost/function/function_template.hpp ****                        >::type type;
 255:/usr/include/boost/function/function_template.hpp ****       };
 256:/usr/include/boost/function/function_template.hpp **** 
 257:/usr/include/boost/function/function_template.hpp ****       template<
 258:/usr/include/boost/function/function_template.hpp ****         typename FunctionObj,
 259:/usr/include/boost/function/function_template.hpp ****         typename R BOOST_FUNCTION_COMMA
 260:/usr/include/boost/function/function_template.hpp ****         BOOST_FUNCTION_TEMPLATE_PARMS
 261:/usr/include/boost/function/function_template.hpp ****        >
 262:/usr/include/boost/function/function_template.hpp ****       struct BOOST_FUNCTION_GET_FUNCTION_OBJ_INVOKER
 263:/usr/include/boost/function/function_template.hpp ****       {
 264:/usr/include/boost/function/function_template.hpp ****         typedef typename mpl::if_c<(is_void<R>::value),
 265:/usr/include/boost/function/function_template.hpp ****                             BOOST_FUNCTION_VOID_FUNCTION_OBJ_INVOKER<
 266:/usr/include/boost/function/function_template.hpp ****                             FunctionObj,
 267:/usr/include/boost/function/function_template.hpp ****                             R BOOST_FUNCTION_COMMA
 268:/usr/include/boost/function/function_template.hpp ****                             BOOST_FUNCTION_TEMPLATE_ARGS
 269:/usr/include/boost/function/function_template.hpp ****                           >,
 270:/usr/include/boost/function/function_template.hpp ****                           BOOST_FUNCTION_FUNCTION_OBJ_INVOKER<
 271:/usr/include/boost/function/function_template.hpp ****                             FunctionObj,
 272:/usr/include/boost/function/function_template.hpp ****                             R BOOST_FUNCTION_COMMA
 273:/usr/include/boost/function/function_template.hpp ****                             BOOST_FUNCTION_TEMPLATE_ARGS
 274:/usr/include/boost/function/function_template.hpp ****                           >
 275:/usr/include/boost/function/function_template.hpp ****                        >::type type;
 276:/usr/include/boost/function/function_template.hpp ****       };
 277:/usr/include/boost/function/function_template.hpp **** 
 278:/usr/include/boost/function/function_template.hpp ****       template<
 279:/usr/include/boost/function/function_template.hpp ****         typename FunctionObj,
 280:/usr/include/boost/function/function_template.hpp ****         typename R BOOST_FUNCTION_COMMA
 281:/usr/include/boost/function/function_template.hpp ****         BOOST_FUNCTION_TEMPLATE_PARMS
 282:/usr/include/boost/function/function_template.hpp ****        >
 283:/usr/include/boost/function/function_template.hpp ****       struct BOOST_FUNCTION_GET_FUNCTION_REF_INVOKER
 284:/usr/include/boost/function/function_template.hpp ****       {
 285:/usr/include/boost/function/function_template.hpp ****         typedef typename mpl::if_c<(is_void<R>::value),
 286:/usr/include/boost/function/function_template.hpp ****                             BOOST_FUNCTION_VOID_FUNCTION_REF_INVOKER<
 287:/usr/include/boost/function/function_template.hpp ****                             FunctionObj,
 288:/usr/include/boost/function/function_template.hpp ****                             R BOOST_FUNCTION_COMMA
 289:/usr/include/boost/function/function_template.hpp ****                             BOOST_FUNCTION_TEMPLATE_ARGS
 290:/usr/include/boost/function/function_template.hpp ****                           >,
 291:/usr/include/boost/function/function_template.hpp ****                           BOOST_FUNCTION_FUNCTION_REF_INVOKER<
 292:/usr/include/boost/function/function_template.hpp ****                             FunctionObj,
 293:/usr/include/boost/function/function_template.hpp ****                             R BOOST_FUNCTION_COMMA
 294:/usr/include/boost/function/function_template.hpp ****                             BOOST_FUNCTION_TEMPLATE_ARGS
 295:/usr/include/boost/function/function_template.hpp ****                           >
 296:/usr/include/boost/function/function_template.hpp ****                        >::type type;
 297:/usr/include/boost/function/function_template.hpp ****       };
 298:/usr/include/boost/function/function_template.hpp **** 
 299:/usr/include/boost/function/function_template.hpp **** #if BOOST_FUNCTION_NUM_ARGS > 0
 300:/usr/include/boost/function/function_template.hpp ****       /* Retrieve the appropriate invoker for a member pointer.  */
GAS LISTING /tmp/ccvmoMuv.s 			page 877


 301:/usr/include/boost/function/function_template.hpp ****       template<
 302:/usr/include/boost/function/function_template.hpp ****         typename MemberPtr,
 303:/usr/include/boost/function/function_template.hpp ****         typename R BOOST_FUNCTION_COMMA
 304:/usr/include/boost/function/function_template.hpp ****         BOOST_FUNCTION_TEMPLATE_PARMS
 305:/usr/include/boost/function/function_template.hpp ****        >
 306:/usr/include/boost/function/function_template.hpp ****       struct BOOST_FUNCTION_GET_MEMBER_INVOKER
 307:/usr/include/boost/function/function_template.hpp ****       {
 308:/usr/include/boost/function/function_template.hpp ****         typedef typename mpl::if_c<(is_void<R>::value),
 309:/usr/include/boost/function/function_template.hpp ****                             BOOST_FUNCTION_VOID_MEMBER_INVOKER<
 310:/usr/include/boost/function/function_template.hpp ****                             MemberPtr,
 311:/usr/include/boost/function/function_template.hpp ****                             R BOOST_FUNCTION_COMMA
 312:/usr/include/boost/function/function_template.hpp ****                             BOOST_FUNCTION_TEMPLATE_ARGS
 313:/usr/include/boost/function/function_template.hpp ****                           >,
 314:/usr/include/boost/function/function_template.hpp ****                           BOOST_FUNCTION_MEMBER_INVOKER<
 315:/usr/include/boost/function/function_template.hpp ****                             MemberPtr,
 316:/usr/include/boost/function/function_template.hpp ****                             R BOOST_FUNCTION_COMMA
 317:/usr/include/boost/function/function_template.hpp ****                             BOOST_FUNCTION_TEMPLATE_ARGS
 318:/usr/include/boost/function/function_template.hpp ****                           >
 319:/usr/include/boost/function/function_template.hpp ****                        >::type type;
 320:/usr/include/boost/function/function_template.hpp ****       };
 321:/usr/include/boost/function/function_template.hpp **** #endif
 322:/usr/include/boost/function/function_template.hpp **** 
 323:/usr/include/boost/function/function_template.hpp ****       /* Given the tag returned by get_function_tag, retrieve the
 324:/usr/include/boost/function/function_template.hpp ****          actual invoker that will be used for the given function
 325:/usr/include/boost/function/function_template.hpp ****          object.
 326:/usr/include/boost/function/function_template.hpp **** 
 327:/usr/include/boost/function/function_template.hpp ****          Each specialization contains an "apply" nested class template
 328:/usr/include/boost/function/function_template.hpp ****          that accepts the function object, return type, function
 329:/usr/include/boost/function/function_template.hpp ****          argument types, and allocator. The resulting "apply" class
 330:/usr/include/boost/function/function_template.hpp ****          contains two typedefs, "invoker_type" and "manager_type",
 331:/usr/include/boost/function/function_template.hpp ****          which correspond to the invoker and manager types. */
 332:/usr/include/boost/function/function_template.hpp ****       template<typename Tag>
 333:/usr/include/boost/function/function_template.hpp ****       struct BOOST_FUNCTION_GET_INVOKER { };
 334:/usr/include/boost/function/function_template.hpp **** 
 335:/usr/include/boost/function/function_template.hpp ****       /* Retrieve the invoker for a function pointer. */
 336:/usr/include/boost/function/function_template.hpp ****       template<>
 337:/usr/include/boost/function/function_template.hpp ****       struct BOOST_FUNCTION_GET_INVOKER<function_ptr_tag>
 338:/usr/include/boost/function/function_template.hpp ****       {
 339:/usr/include/boost/function/function_template.hpp ****         template<typename FunctionPtr,
 340:/usr/include/boost/function/function_template.hpp ****                  typename R BOOST_FUNCTION_COMMA BOOST_FUNCTION_TEMPLATE_PARMS>
 341:/usr/include/boost/function/function_template.hpp ****         struct apply
 342:/usr/include/boost/function/function_template.hpp ****         {
 343:/usr/include/boost/function/function_template.hpp ****           typedef typename BOOST_FUNCTION_GET_FUNCTION_INVOKER<
 344:/usr/include/boost/function/function_template.hpp ****                              FunctionPtr,
 345:/usr/include/boost/function/function_template.hpp ****                              R BOOST_FUNCTION_COMMA
 346:/usr/include/boost/function/function_template.hpp ****                              BOOST_FUNCTION_TEMPLATE_ARGS
 347:/usr/include/boost/function/function_template.hpp ****                            >::type
 348:/usr/include/boost/function/function_template.hpp ****             invoker_type;
 349:/usr/include/boost/function/function_template.hpp **** 
 350:/usr/include/boost/function/function_template.hpp ****           typedef functor_manager<FunctionPtr> manager_type;
 351:/usr/include/boost/function/function_template.hpp ****         };
 352:/usr/include/boost/function/function_template.hpp **** 
 353:/usr/include/boost/function/function_template.hpp ****         template<typename FunctionPtr,
 354:/usr/include/boost/function/function_template.hpp ****                  typename R BOOST_FUNCTION_COMMA BOOST_FUNCTION_TEMPLATE_PARMS,
 355:/usr/include/boost/function/function_template.hpp ****                  typename Allocator>
 356:/usr/include/boost/function/function_template.hpp ****         struct apply_a
 357:/usr/include/boost/function/function_template.hpp ****         {
GAS LISTING /tmp/ccvmoMuv.s 			page 878


 358:/usr/include/boost/function/function_template.hpp ****           typedef typename BOOST_FUNCTION_GET_FUNCTION_INVOKER<
 359:/usr/include/boost/function/function_template.hpp ****                              FunctionPtr,
 360:/usr/include/boost/function/function_template.hpp ****                              R BOOST_FUNCTION_COMMA
 361:/usr/include/boost/function/function_template.hpp ****                              BOOST_FUNCTION_TEMPLATE_ARGS
 362:/usr/include/boost/function/function_template.hpp ****                            >::type
 363:/usr/include/boost/function/function_template.hpp ****             invoker_type;
 364:/usr/include/boost/function/function_template.hpp **** 
 365:/usr/include/boost/function/function_template.hpp ****           typedef functor_manager<FunctionPtr> manager_type;
 366:/usr/include/boost/function/function_template.hpp ****         };
 367:/usr/include/boost/function/function_template.hpp ****       };
 368:/usr/include/boost/function/function_template.hpp **** 
 369:/usr/include/boost/function/function_template.hpp **** #if BOOST_FUNCTION_NUM_ARGS > 0
 370:/usr/include/boost/function/function_template.hpp ****       /* Retrieve the invoker for a member pointer. */
 371:/usr/include/boost/function/function_template.hpp ****       template<>
 372:/usr/include/boost/function/function_template.hpp ****       struct BOOST_FUNCTION_GET_INVOKER<member_ptr_tag>
 373:/usr/include/boost/function/function_template.hpp ****       {
 374:/usr/include/boost/function/function_template.hpp ****         template<typename MemberPtr,
 375:/usr/include/boost/function/function_template.hpp ****                  typename R BOOST_FUNCTION_COMMA BOOST_FUNCTION_TEMPLATE_PARMS>
 376:/usr/include/boost/function/function_template.hpp ****         struct apply
 377:/usr/include/boost/function/function_template.hpp ****         {
 378:/usr/include/boost/function/function_template.hpp ****           typedef typename BOOST_FUNCTION_GET_MEMBER_INVOKER<
 379:/usr/include/boost/function/function_template.hpp ****                              MemberPtr,
 380:/usr/include/boost/function/function_template.hpp ****                              R BOOST_FUNCTION_COMMA
 381:/usr/include/boost/function/function_template.hpp ****                              BOOST_FUNCTION_TEMPLATE_ARGS
 382:/usr/include/boost/function/function_template.hpp ****                            >::type
 383:/usr/include/boost/function/function_template.hpp ****             invoker_type;
 384:/usr/include/boost/function/function_template.hpp **** 
 385:/usr/include/boost/function/function_template.hpp ****           typedef functor_manager<MemberPtr> manager_type;
 386:/usr/include/boost/function/function_template.hpp ****         };
 387:/usr/include/boost/function/function_template.hpp **** 
 388:/usr/include/boost/function/function_template.hpp ****         template<typename MemberPtr,
 389:/usr/include/boost/function/function_template.hpp ****                  typename R BOOST_FUNCTION_COMMA BOOST_FUNCTION_TEMPLATE_PARMS,
 390:/usr/include/boost/function/function_template.hpp ****                  typename Allocator>
 391:/usr/include/boost/function/function_template.hpp ****         struct apply_a
 392:/usr/include/boost/function/function_template.hpp ****         {
 393:/usr/include/boost/function/function_template.hpp ****           typedef typename BOOST_FUNCTION_GET_MEMBER_INVOKER<
 394:/usr/include/boost/function/function_template.hpp ****                              MemberPtr,
 395:/usr/include/boost/function/function_template.hpp ****                              R BOOST_FUNCTION_COMMA
 396:/usr/include/boost/function/function_template.hpp ****                              BOOST_FUNCTION_TEMPLATE_ARGS
 397:/usr/include/boost/function/function_template.hpp ****                            >::type
 398:/usr/include/boost/function/function_template.hpp ****             invoker_type;
 399:/usr/include/boost/function/function_template.hpp **** 
 400:/usr/include/boost/function/function_template.hpp ****           typedef functor_manager<MemberPtr> manager_type;
 401:/usr/include/boost/function/function_template.hpp ****         };
 402:/usr/include/boost/function/function_template.hpp ****       };
 403:/usr/include/boost/function/function_template.hpp **** #endif
 404:/usr/include/boost/function/function_template.hpp **** 
 405:/usr/include/boost/function/function_template.hpp ****       /* Retrieve the invoker for a function object. */
 406:/usr/include/boost/function/function_template.hpp ****       template<>
 407:/usr/include/boost/function/function_template.hpp ****       struct BOOST_FUNCTION_GET_INVOKER<function_obj_tag>
 408:/usr/include/boost/function/function_template.hpp ****       {
 409:/usr/include/boost/function/function_template.hpp ****         template<typename FunctionObj,
 410:/usr/include/boost/function/function_template.hpp ****                  typename R BOOST_FUNCTION_COMMA BOOST_FUNCTION_TEMPLATE_PARMS>
 411:/usr/include/boost/function/function_template.hpp ****         struct apply
 412:/usr/include/boost/function/function_template.hpp ****         {
 413:/usr/include/boost/function/function_template.hpp ****           typedef typename BOOST_FUNCTION_GET_FUNCTION_OBJ_INVOKER<
 414:/usr/include/boost/function/function_template.hpp ****                              FunctionObj,
GAS LISTING /tmp/ccvmoMuv.s 			page 879


 415:/usr/include/boost/function/function_template.hpp ****                              R BOOST_FUNCTION_COMMA
 416:/usr/include/boost/function/function_template.hpp ****                              BOOST_FUNCTION_TEMPLATE_ARGS
 417:/usr/include/boost/function/function_template.hpp ****                            >::type
 418:/usr/include/boost/function/function_template.hpp ****             invoker_type;
 419:/usr/include/boost/function/function_template.hpp **** 
 420:/usr/include/boost/function/function_template.hpp ****           typedef functor_manager<FunctionObj> manager_type;
 421:/usr/include/boost/function/function_template.hpp ****         };
 422:/usr/include/boost/function/function_template.hpp **** 
 423:/usr/include/boost/function/function_template.hpp ****         template<typename FunctionObj,
 424:/usr/include/boost/function/function_template.hpp ****                  typename R BOOST_FUNCTION_COMMA BOOST_FUNCTION_TEMPLATE_PARMS,
 425:/usr/include/boost/function/function_template.hpp ****                  typename Allocator>
 426:/usr/include/boost/function/function_template.hpp ****         struct apply_a
 427:/usr/include/boost/function/function_template.hpp ****         {
 428:/usr/include/boost/function/function_template.hpp ****           typedef typename BOOST_FUNCTION_GET_FUNCTION_OBJ_INVOKER<
 429:/usr/include/boost/function/function_template.hpp ****                              FunctionObj,
 430:/usr/include/boost/function/function_template.hpp ****                              R BOOST_FUNCTION_COMMA
 431:/usr/include/boost/function/function_template.hpp ****                              BOOST_FUNCTION_TEMPLATE_ARGS
 432:/usr/include/boost/function/function_template.hpp ****                            >::type
 433:/usr/include/boost/function/function_template.hpp ****             invoker_type;
 434:/usr/include/boost/function/function_template.hpp **** 
 435:/usr/include/boost/function/function_template.hpp ****           typedef functor_manager_a<FunctionObj, Allocator> manager_type;
 436:/usr/include/boost/function/function_template.hpp ****         };
 437:/usr/include/boost/function/function_template.hpp ****       };
 438:/usr/include/boost/function/function_template.hpp **** 
 439:/usr/include/boost/function/function_template.hpp ****       /* Retrieve the invoker for a reference to a function object. */
 440:/usr/include/boost/function/function_template.hpp ****       template<>
 441:/usr/include/boost/function/function_template.hpp ****       struct BOOST_FUNCTION_GET_INVOKER<function_obj_ref_tag>
 442:/usr/include/boost/function/function_template.hpp ****       {
 443:/usr/include/boost/function/function_template.hpp ****         template<typename RefWrapper,
 444:/usr/include/boost/function/function_template.hpp ****                  typename R BOOST_FUNCTION_COMMA BOOST_FUNCTION_TEMPLATE_PARMS>
 445:/usr/include/boost/function/function_template.hpp ****         struct apply
 446:/usr/include/boost/function/function_template.hpp ****         {
 447:/usr/include/boost/function/function_template.hpp ****           typedef typename BOOST_FUNCTION_GET_FUNCTION_REF_INVOKER<
 448:/usr/include/boost/function/function_template.hpp ****                              typename RefWrapper::type,
 449:/usr/include/boost/function/function_template.hpp ****                              R BOOST_FUNCTION_COMMA
 450:/usr/include/boost/function/function_template.hpp ****                              BOOST_FUNCTION_TEMPLATE_ARGS
 451:/usr/include/boost/function/function_template.hpp ****                            >::type
 452:/usr/include/boost/function/function_template.hpp ****             invoker_type;
 453:/usr/include/boost/function/function_template.hpp **** 
 454:/usr/include/boost/function/function_template.hpp ****           typedef reference_manager<typename RefWrapper::type> manager_type;
 455:/usr/include/boost/function/function_template.hpp ****         };
 456:/usr/include/boost/function/function_template.hpp **** 
 457:/usr/include/boost/function/function_template.hpp ****         template<typename RefWrapper,
 458:/usr/include/boost/function/function_template.hpp ****                  typename R BOOST_FUNCTION_COMMA BOOST_FUNCTION_TEMPLATE_PARMS,
 459:/usr/include/boost/function/function_template.hpp ****                  typename Allocator>
 460:/usr/include/boost/function/function_template.hpp ****         struct apply_a
 461:/usr/include/boost/function/function_template.hpp ****         {
 462:/usr/include/boost/function/function_template.hpp ****           typedef typename BOOST_FUNCTION_GET_FUNCTION_REF_INVOKER<
 463:/usr/include/boost/function/function_template.hpp ****                              typename RefWrapper::type,
 464:/usr/include/boost/function/function_template.hpp ****                              R BOOST_FUNCTION_COMMA
 465:/usr/include/boost/function/function_template.hpp ****                              BOOST_FUNCTION_TEMPLATE_ARGS
 466:/usr/include/boost/function/function_template.hpp ****                            >::type
 467:/usr/include/boost/function/function_template.hpp ****             invoker_type;
 468:/usr/include/boost/function/function_template.hpp **** 
 469:/usr/include/boost/function/function_template.hpp ****           typedef reference_manager<typename RefWrapper::type> manager_type;
 470:/usr/include/boost/function/function_template.hpp ****         };
 471:/usr/include/boost/function/function_template.hpp ****       };
GAS LISTING /tmp/ccvmoMuv.s 			page 880


 472:/usr/include/boost/function/function_template.hpp **** 
 473:/usr/include/boost/function/function_template.hpp **** 
 474:/usr/include/boost/function/function_template.hpp ****       /**
 475:/usr/include/boost/function/function_template.hpp ****        * vtable for a specific boost::function instance. This
 476:/usr/include/boost/function/function_template.hpp ****        * structure must be an aggregate so that we can use static
 477:/usr/include/boost/function/function_template.hpp ****        * initialization in boost::function's assign_to and assign_to_a
 478:/usr/include/boost/function/function_template.hpp ****        * members. It therefore cannot have any constructors,
 479:/usr/include/boost/function/function_template.hpp ****        * destructors, base classes, etc.
 480:/usr/include/boost/function/function_template.hpp ****        */
 481:/usr/include/boost/function/function_template.hpp ****       template<typename R BOOST_FUNCTION_COMMA BOOST_FUNCTION_TEMPLATE_PARMS>
 482:/usr/include/boost/function/function_template.hpp ****       struct BOOST_FUNCTION_VTABLE
 483:/usr/include/boost/function/function_template.hpp ****       {
 484:/usr/include/boost/function/function_template.hpp **** #ifndef BOOST_NO_VOID_RETURNS
 485:/usr/include/boost/function/function_template.hpp ****         typedef R         result_type;
 486:/usr/include/boost/function/function_template.hpp **** #else
 487:/usr/include/boost/function/function_template.hpp ****         typedef typename function_return_type<R>::type result_type;
 488:/usr/include/boost/function/function_template.hpp **** #endif // BOOST_NO_VOID_RETURNS
 489:/usr/include/boost/function/function_template.hpp **** 
 490:/usr/include/boost/function/function_template.hpp ****         typedef result_type (*invoker_type)(function_buffer&
 491:/usr/include/boost/function/function_template.hpp ****                                             BOOST_FUNCTION_COMMA
 492:/usr/include/boost/function/function_template.hpp ****                                             BOOST_FUNCTION_TEMPLATE_ARGS);
 493:/usr/include/boost/function/function_template.hpp **** 
 494:/usr/include/boost/function/function_template.hpp ****         template<typename F>
 495:/usr/include/boost/function/function_template.hpp ****         bool assign_to(F f, function_buffer& functor) const
 496:/usr/include/boost/function/function_template.hpp ****         {
 497:/usr/include/boost/function/function_template.hpp ****           typedef typename get_function_tag<F>::type tag;
 498:/usr/include/boost/function/function_template.hpp ****           return assign_to(f, functor, tag());
 499:/usr/include/boost/function/function_template.hpp ****         }
 500:/usr/include/boost/function/function_template.hpp ****         template<typename F,typename Allocator>
 501:/usr/include/boost/function/function_template.hpp ****         bool assign_to_a(F f, function_buffer& functor, Allocator a) const
 502:/usr/include/boost/function/function_template.hpp ****         {
 503:/usr/include/boost/function/function_template.hpp ****           typedef typename get_function_tag<F>::type tag;
 504:/usr/include/boost/function/function_template.hpp ****           return assign_to_a(f, functor, a, tag());
 505:/usr/include/boost/function/function_template.hpp ****         }
 506:/usr/include/boost/function/function_template.hpp **** 
 507:/usr/include/boost/function/function_template.hpp ****         void clear(function_buffer& functor) const
 508:/usr/include/boost/function/function_template.hpp ****         {
 509:/usr/include/boost/function/function_template.hpp ****           if (base.manager)
 510:/usr/include/boost/function/function_template.hpp ****             base.manager(functor, functor, destroy_functor_tag);
 511:/usr/include/boost/function/function_template.hpp ****         }
 512:/usr/include/boost/function/function_template.hpp **** 
 513:/usr/include/boost/function/function_template.hpp ****       private:
 514:/usr/include/boost/function/function_template.hpp ****         // Function pointers
 515:/usr/include/boost/function/function_template.hpp ****         template<typename FunctionPtr>
 516:/usr/include/boost/function/function_template.hpp ****         bool
 517:/usr/include/boost/function/function_template.hpp ****         assign_to(FunctionPtr f, function_buffer& functor, function_ptr_tag) const
 518:/usr/include/boost/function/function_template.hpp ****         {
 519:/usr/include/boost/function/function_template.hpp ****           this->clear(functor);
 520:/usr/include/boost/function/function_template.hpp ****           if (f) {
 521:/usr/include/boost/function/function_template.hpp ****             // should be a reinterpret cast, but some compilers insist
 522:/usr/include/boost/function/function_template.hpp ****             // on giving cv-qualifiers to free functions
 523:/usr/include/boost/function/function_template.hpp ****             functor.members.func_ptr = reinterpret_cast<void (*)()>(f);
 524:/usr/include/boost/function/function_template.hpp ****             return true;
 525:/usr/include/boost/function/function_template.hpp ****           } else {
 526:/usr/include/boost/function/function_template.hpp ****             return false;
 527:/usr/include/boost/function/function_template.hpp ****           }
 528:/usr/include/boost/function/function_template.hpp ****         }
GAS LISTING /tmp/ccvmoMuv.s 			page 881


 529:/usr/include/boost/function/function_template.hpp ****         template<typename FunctionPtr,typename Allocator>
 530:/usr/include/boost/function/function_template.hpp ****         bool
 531:/usr/include/boost/function/function_template.hpp ****         assign_to_a(FunctionPtr f, function_buffer& functor, Allocator, function_ptr_tag) const
 532:/usr/include/boost/function/function_template.hpp ****         {
 533:/usr/include/boost/function/function_template.hpp ****           return assign_to(f,functor,function_ptr_tag());
 534:/usr/include/boost/function/function_template.hpp ****         }
 535:/usr/include/boost/function/function_template.hpp **** 
 536:/usr/include/boost/function/function_template.hpp ****         // Member pointers
 537:/usr/include/boost/function/function_template.hpp **** #if BOOST_FUNCTION_NUM_ARGS > 0
 538:/usr/include/boost/function/function_template.hpp ****         template<typename MemberPtr>
 539:/usr/include/boost/function/function_template.hpp ****         bool assign_to(MemberPtr f, function_buffer& functor, member_ptr_tag) const
 540:/usr/include/boost/function/function_template.hpp ****         {
 541:/usr/include/boost/function/function_template.hpp ****           // DPG TBD: Add explicit support for member function
 542:/usr/include/boost/function/function_template.hpp ****           // objects, so we invoke through mem_fn() but we retain the
 543:/usr/include/boost/function/function_template.hpp ****           // right target_type() values.
 544:/usr/include/boost/function/function_template.hpp ****           if (f) {
 545:/usr/include/boost/function/function_template.hpp ****             this->assign_to(boost::mem_fn(f), functor);
 546:/usr/include/boost/function/function_template.hpp ****             return true;
 547:/usr/include/boost/function/function_template.hpp ****           } else {
 548:/usr/include/boost/function/function_template.hpp ****             return false;
 549:/usr/include/boost/function/function_template.hpp ****           }
 550:/usr/include/boost/function/function_template.hpp ****         }
 551:/usr/include/boost/function/function_template.hpp ****         template<typename MemberPtr,typename Allocator>
 552:/usr/include/boost/function/function_template.hpp ****         bool assign_to_a(MemberPtr f, function_buffer& functor, Allocator a, member_ptr_tag) const
 553:/usr/include/boost/function/function_template.hpp ****         {
 554:/usr/include/boost/function/function_template.hpp ****           // DPG TBD: Add explicit support for member function
 555:/usr/include/boost/function/function_template.hpp ****           // objects, so we invoke through mem_fn() but we retain the
 556:/usr/include/boost/function/function_template.hpp ****           // right target_type() values.
 557:/usr/include/boost/function/function_template.hpp ****           if (f) {
 558:/usr/include/boost/function/function_template.hpp ****             this->assign_to_a(boost::mem_fn(f), functor, a);
 559:/usr/include/boost/function/function_template.hpp ****             return true;
 560:/usr/include/boost/function/function_template.hpp ****           } else {
 561:/usr/include/boost/function/function_template.hpp ****             return false;
 562:/usr/include/boost/function/function_template.hpp ****           }
 563:/usr/include/boost/function/function_template.hpp ****         }
 564:/usr/include/boost/function/function_template.hpp **** #endif // BOOST_FUNCTION_NUM_ARGS > 0
 565:/usr/include/boost/function/function_template.hpp **** 
 566:/usr/include/boost/function/function_template.hpp ****         // Function objects
 567:/usr/include/boost/function/function_template.hpp ****         // Assign to a function object using the small object optimization
 568:/usr/include/boost/function/function_template.hpp ****         template<typename FunctionObj>
 569:/usr/include/boost/function/function_template.hpp ****         void
 570:/usr/include/boost/function/function_template.hpp ****         assign_functor(FunctionObj f, function_buffer& functor, mpl::true_) const
 571:/usr/include/boost/function/function_template.hpp ****         {
 572:/usr/include/boost/function/function_template.hpp ****           new (reinterpret_cast<void*>(functor.data)) FunctionObj(f);
 573:/usr/include/boost/function/function_template.hpp ****         }
 574:/usr/include/boost/function/function_template.hpp ****         template<typename FunctionObj,typename Allocator>
 575:/usr/include/boost/function/function_template.hpp ****         void
 576:/usr/include/boost/function/function_template.hpp ****         assign_functor_a(FunctionObj f, function_buffer& functor, Allocator, mpl::true_) const
 577:/usr/include/boost/function/function_template.hpp ****         {
 578:/usr/include/boost/function/function_template.hpp ****           assign_functor(f,functor,mpl::true_());
 579:/usr/include/boost/function/function_template.hpp ****         }
 580:/usr/include/boost/function/function_template.hpp **** 
 581:/usr/include/boost/function/function_template.hpp ****         // Assign to a function object allocated on the heap.
 582:/usr/include/boost/function/function_template.hpp ****         template<typename FunctionObj>
 583:/usr/include/boost/function/function_template.hpp ****         void
 584:/usr/include/boost/function/function_template.hpp ****         assign_functor(FunctionObj f, function_buffer& functor, mpl::false_) const
 585:/usr/include/boost/function/function_template.hpp ****         {
GAS LISTING /tmp/ccvmoMuv.s 			page 882


 586:/usr/include/boost/function/function_template.hpp ****           functor.members.obj_ptr = new FunctionObj(f);
 587:/usr/include/boost/function/function_template.hpp ****         }
 588:/usr/include/boost/function/function_template.hpp ****         template<typename FunctionObj,typename Allocator>
 589:/usr/include/boost/function/function_template.hpp ****         void
 590:/usr/include/boost/function/function_template.hpp ****         assign_functor_a(FunctionObj f, function_buffer& functor, Allocator a, mpl::false_) const
 591:/usr/include/boost/function/function_template.hpp ****         {
 592:/usr/include/boost/function/function_template.hpp ****           typedef functor_wrapper<FunctionObj,Allocator> functor_wrapper_type;
 593:/usr/include/boost/function/function_template.hpp ****           typedef typename Allocator::template rebind<functor_wrapper_type>::other
 594:/usr/include/boost/function/function_template.hpp ****             wrapper_allocator_type;
 595:/usr/include/boost/function/function_template.hpp ****           typedef typename wrapper_allocator_type::pointer wrapper_allocator_pointer_type;
 596:/usr/include/boost/function/function_template.hpp ****           wrapper_allocator_type wrapper_allocator(a);
 597:/usr/include/boost/function/function_template.hpp ****           wrapper_allocator_pointer_type copy = wrapper_allocator.allocate(1);
 598:/usr/include/boost/function/function_template.hpp ****           wrapper_allocator.construct(copy, functor_wrapper_type(f,a));
 599:/usr/include/boost/function/function_template.hpp ****           functor_wrapper_type* new_f = static_cast<functor_wrapper_type*>(copy);
 600:/usr/include/boost/function/function_template.hpp ****           functor.members.obj_ptr = new_f;
 601:/usr/include/boost/function/function_template.hpp ****         }
 602:/usr/include/boost/function/function_template.hpp **** 
 603:/usr/include/boost/function/function_template.hpp ****         template<typename FunctionObj>
 604:/usr/include/boost/function/function_template.hpp ****         bool
 605:/usr/include/boost/function/function_template.hpp ****         assign_to(FunctionObj f, function_buffer& functor, function_obj_tag) const
 606:/usr/include/boost/function/function_template.hpp ****         {
 607:/usr/include/boost/function/function_template.hpp ****           if (!boost::detail::function::has_empty_target(boost::addressof(f))) {
 608:/usr/include/boost/function/function_template.hpp ****             assign_functor(f, functor,
 609:/usr/include/boost/function/function_template.hpp ****                            mpl::bool_<(function_allows_small_object_optimization<FunctionObj>::valu
 610:/usr/include/boost/function/function_template.hpp ****             return true;
 611:/usr/include/boost/function/function_template.hpp ****           } else {
 612:/usr/include/boost/function/function_template.hpp ****             return false;
 613:/usr/include/boost/function/function_template.hpp ****           }
 614:/usr/include/boost/function/function_template.hpp ****         }
 615:/usr/include/boost/function/function_template.hpp ****         template<typename FunctionObj,typename Allocator>
 616:/usr/include/boost/function/function_template.hpp ****         bool
 617:/usr/include/boost/function/function_template.hpp ****         assign_to_a(FunctionObj f, function_buffer& functor, Allocator a, function_obj_tag) const
 618:/usr/include/boost/function/function_template.hpp ****         {
 619:/usr/include/boost/function/function_template.hpp ****           if (!boost::detail::function::has_empty_target(boost::addressof(f))) {
 620:/usr/include/boost/function/function_template.hpp ****             assign_functor_a(f, functor, a,
 621:/usr/include/boost/function/function_template.hpp ****                            mpl::bool_<(function_allows_small_object_optimization<FunctionObj>::valu
 622:/usr/include/boost/function/function_template.hpp ****             return true;
 623:/usr/include/boost/function/function_template.hpp ****           } else {
 624:/usr/include/boost/function/function_template.hpp ****             return false;
 625:/usr/include/boost/function/function_template.hpp ****           }
 626:/usr/include/boost/function/function_template.hpp ****         }
 627:/usr/include/boost/function/function_template.hpp **** 
 628:/usr/include/boost/function/function_template.hpp ****         // Reference to a function object
 629:/usr/include/boost/function/function_template.hpp ****         template<typename FunctionObj>
 630:/usr/include/boost/function/function_template.hpp ****         bool
 631:/usr/include/boost/function/function_template.hpp ****         assign_to(const reference_wrapper<FunctionObj>& f,
 632:/usr/include/boost/function/function_template.hpp ****                   function_buffer& functor, function_obj_ref_tag) const
 633:/usr/include/boost/function/function_template.hpp ****         {
 634:/usr/include/boost/function/function_template.hpp ****           functor.members.obj_ref.obj_ptr = (void *)(f.get_pointer());
 635:/usr/include/boost/function/function_template.hpp ****           functor.members.obj_ref.is_const_qualified = is_const<FunctionObj>::value;
 636:/usr/include/boost/function/function_template.hpp ****           functor.members.obj_ref.is_volatile_qualified = is_volatile<FunctionObj>::value;
 637:/usr/include/boost/function/function_template.hpp ****           return true;
 638:/usr/include/boost/function/function_template.hpp ****         }
 639:/usr/include/boost/function/function_template.hpp ****         template<typename FunctionObj,typename Allocator>
 640:/usr/include/boost/function/function_template.hpp ****         bool
 641:/usr/include/boost/function/function_template.hpp ****         assign_to_a(const reference_wrapper<FunctionObj>& f,
 642:/usr/include/boost/function/function_template.hpp ****                   function_buffer& functor, Allocator, function_obj_ref_tag) const
GAS LISTING /tmp/ccvmoMuv.s 			page 883


 643:/usr/include/boost/function/function_template.hpp ****         {
 644:/usr/include/boost/function/function_template.hpp ****           return assign_to(f,functor,function_obj_ref_tag());
 645:/usr/include/boost/function/function_template.hpp ****         }
 646:/usr/include/boost/function/function_template.hpp **** 
 647:/usr/include/boost/function/function_template.hpp ****       public:
 648:/usr/include/boost/function/function_template.hpp ****         vtable_base base;
 649:/usr/include/boost/function/function_template.hpp ****         invoker_type invoker;
 650:/usr/include/boost/function/function_template.hpp ****       };
 651:/usr/include/boost/function/function_template.hpp ****     } // end namespace function
 652:/usr/include/boost/function/function_template.hpp ****   } // end namespace detail
 653:/usr/include/boost/function/function_template.hpp **** 
 654:/usr/include/boost/function/function_template.hpp ****   template<
 655:/usr/include/boost/function/function_template.hpp ****     typename R BOOST_FUNCTION_COMMA
 656:/usr/include/boost/function/function_template.hpp ****     BOOST_FUNCTION_TEMPLATE_PARMS
 657:/usr/include/boost/function/function_template.hpp ****   >
 658:/usr/include/boost/function/function_template.hpp ****   class BOOST_FUNCTION_FUNCTION : public function_base
 659:/usr/include/boost/function/function_template.hpp **** 
 660:/usr/include/boost/function/function_template.hpp **** #if BOOST_FUNCTION_NUM_ARGS == 1
 661:/usr/include/boost/function/function_template.hpp **** 
 662:/usr/include/boost/function/function_template.hpp ****     , public std::unary_function<T0,R>
 663:/usr/include/boost/function/function_template.hpp **** 
 664:/usr/include/boost/function/function_template.hpp **** #elif BOOST_FUNCTION_NUM_ARGS == 2
 665:/usr/include/boost/function/function_template.hpp **** 
 666:/usr/include/boost/function/function_template.hpp ****     , public std::binary_function<T0,T1,R>
 667:/usr/include/boost/function/function_template.hpp **** 
 668:/usr/include/boost/function/function_template.hpp **** #endif
 669:/usr/include/boost/function/function_template.hpp **** 
 670:/usr/include/boost/function/function_template.hpp ****   {
 671:/usr/include/boost/function/function_template.hpp ****   public:
 672:/usr/include/boost/function/function_template.hpp **** #ifndef BOOST_NO_VOID_RETURNS
 673:/usr/include/boost/function/function_template.hpp ****     typedef R         result_type;
 674:/usr/include/boost/function/function_template.hpp **** #else
 675:/usr/include/boost/function/function_template.hpp ****     typedef  typename boost::detail::function::function_return_type<R>::type
 676:/usr/include/boost/function/function_template.hpp ****       result_type;
 677:/usr/include/boost/function/function_template.hpp **** #endif // BOOST_NO_VOID_RETURNS
 678:/usr/include/boost/function/function_template.hpp **** 
 679:/usr/include/boost/function/function_template.hpp ****   private:
 680:/usr/include/boost/function/function_template.hpp ****     typedef boost::detail::function::BOOST_FUNCTION_VTABLE<
 681:/usr/include/boost/function/function_template.hpp ****               R BOOST_FUNCTION_COMMA BOOST_FUNCTION_TEMPLATE_ARGS>
 682:/usr/include/boost/function/function_template.hpp ****       vtable_type;
 683:/usr/include/boost/function/function_template.hpp **** 
 684:/usr/include/boost/function/function_template.hpp ****     vtable_type* get_vtable() const {
 685:/usr/include/boost/function/function_template.hpp ****       return reinterpret_cast<vtable_type*>(
 686:/usr/include/boost/function/function_template.hpp ****                reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
 687:/usr/include/boost/function/function_template.hpp ****     }
 688:/usr/include/boost/function/function_template.hpp **** 
 689:/usr/include/boost/function/function_template.hpp ****     struct clear_type {};
 690:/usr/include/boost/function/function_template.hpp **** 
 691:/usr/include/boost/function/function_template.hpp ****   public:
 692:/usr/include/boost/function/function_template.hpp ****     BOOST_STATIC_CONSTANT(int, args = BOOST_FUNCTION_NUM_ARGS);
 693:/usr/include/boost/function/function_template.hpp **** 
 694:/usr/include/boost/function/function_template.hpp ****     // add signature for boost::lambda
 695:/usr/include/boost/function/function_template.hpp ****     template<typename Args>
 696:/usr/include/boost/function/function_template.hpp ****     struct sig
 697:/usr/include/boost/function/function_template.hpp ****     {
 698:/usr/include/boost/function/function_template.hpp ****       typedef result_type type;
 699:/usr/include/boost/function/function_template.hpp ****     };
GAS LISTING /tmp/ccvmoMuv.s 			page 884


 700:/usr/include/boost/function/function_template.hpp **** 
 701:/usr/include/boost/function/function_template.hpp **** #if BOOST_FUNCTION_NUM_ARGS == 1
 702:/usr/include/boost/function/function_template.hpp ****     typedef T0 argument_type;
 703:/usr/include/boost/function/function_template.hpp **** #elif BOOST_FUNCTION_NUM_ARGS == 2
 704:/usr/include/boost/function/function_template.hpp ****     typedef T0 first_argument_type;
 705:/usr/include/boost/function/function_template.hpp ****     typedef T1 second_argument_type;
 706:/usr/include/boost/function/function_template.hpp **** #endif
 707:/usr/include/boost/function/function_template.hpp **** 
 708:/usr/include/boost/function/function_template.hpp ****     BOOST_STATIC_CONSTANT(int, arity = BOOST_FUNCTION_NUM_ARGS);
 709:/usr/include/boost/function/function_template.hpp ****     BOOST_FUNCTION_ARG_TYPES
 710:/usr/include/boost/function/function_template.hpp **** 
 711:/usr/include/boost/function/function_template.hpp ****     typedef BOOST_FUNCTION_FUNCTION self_type;
 712:/usr/include/boost/function/function_template.hpp **** 
 713:/usr/include/boost/function/function_template.hpp ****     BOOST_FUNCTION_FUNCTION() : function_base() { }
 714:/usr/include/boost/function/function_template.hpp **** 
 715:/usr/include/boost/function/function_template.hpp ****     // MSVC chokes if the following two constructors are collapsed into
 716:/usr/include/boost/function/function_template.hpp ****     // one with a default parameter.
 717:/usr/include/boost/function/function_template.hpp ****     template<typename Functor>
 718:/usr/include/boost/function/function_template.hpp ****     BOOST_FUNCTION_FUNCTION(Functor BOOST_FUNCTION_TARGET_FIX(const &) f
 719:/usr/include/boost/function/function_template.hpp **** #ifndef BOOST_NO_SFINAE
 720:/usr/include/boost/function/function_template.hpp ****                             ,typename boost::enable_if_c<
 721:/usr/include/boost/function/function_template.hpp ****                              !(is_integral<Functor>::value),
 722:/usr/include/boost/function/function_template.hpp ****                                         int>::type = 0
 723:/usr/include/boost/function/function_template.hpp **** #endif // BOOST_NO_SFINAE
 724:/usr/include/boost/function/function_template.hpp ****                             ) :
 725:/usr/include/boost/function/function_template.hpp ****       function_base()
 726:/usr/include/boost/function/function_template.hpp ****     {
 727:/usr/include/boost/function/function_template.hpp ****       this->assign_to(f);
 728:/usr/include/boost/function/function_template.hpp ****     }
 729:/usr/include/boost/function/function_template.hpp ****     template<typename Functor,typename Allocator>
 730:/usr/include/boost/function/function_template.hpp ****     BOOST_FUNCTION_FUNCTION(Functor BOOST_FUNCTION_TARGET_FIX(const &) f, Allocator a
 731:/usr/include/boost/function/function_template.hpp **** #ifndef BOOST_NO_SFINAE
 732:/usr/include/boost/function/function_template.hpp ****                             ,typename boost::enable_if_c<
 733:/usr/include/boost/function/function_template.hpp ****                               !(is_integral<Functor>::value),
 734:/usr/include/boost/function/function_template.hpp ****                                         int>::type = 0
 735:/usr/include/boost/function/function_template.hpp **** #endif // BOOST_NO_SFINAE
 736:/usr/include/boost/function/function_template.hpp ****                             ) :
 737:/usr/include/boost/function/function_template.hpp ****       function_base()
 738:/usr/include/boost/function/function_template.hpp ****     {
 739:/usr/include/boost/function/function_template.hpp ****       this->assign_to_a(f,a);
 740:/usr/include/boost/function/function_template.hpp ****     }
 741:/usr/include/boost/function/function_template.hpp **** 
 742:/usr/include/boost/function/function_template.hpp **** #ifndef BOOST_NO_SFINAE
 743:/usr/include/boost/function/function_template.hpp ****     BOOST_FUNCTION_FUNCTION(clear_type*) : function_base() { }
 744:/usr/include/boost/function/function_template.hpp **** #else
 745:/usr/include/boost/function/function_template.hpp ****     BOOST_FUNCTION_FUNCTION(int zero) : function_base()
 746:/usr/include/boost/function/function_template.hpp ****     {
 747:/usr/include/boost/function/function_template.hpp ****       BOOST_ASSERT(zero == 0);
 748:/usr/include/boost/function/function_template.hpp ****     }
 749:/usr/include/boost/function/function_template.hpp **** #endif
 750:/usr/include/boost/function/function_template.hpp **** 
 751:/usr/include/boost/function/function_template.hpp ****     BOOST_FUNCTION_FUNCTION(const BOOST_FUNCTION_FUNCTION& f) : function_base()
 752:/usr/include/boost/function/function_template.hpp ****     {
 753:/usr/include/boost/function/function_template.hpp ****       this->assign_to_own(f);
 754:/usr/include/boost/function/function_template.hpp ****     }
 755:/usr/include/boost/function/function_template.hpp **** 
 756:/usr/include/boost/function/function_template.hpp **** #ifndef BOOST_NO_CXX11_RVALUE_REFERENCES
GAS LISTING /tmp/ccvmoMuv.s 			page 885


 757:/usr/include/boost/function/function_template.hpp ****     BOOST_FUNCTION_FUNCTION(BOOST_FUNCTION_FUNCTION&& f) : function_base()
 758:/usr/include/boost/function/function_template.hpp ****     {
 759:/usr/include/boost/function/function_template.hpp ****       this->move_assign(f);
 760:/usr/include/boost/function/function_template.hpp ****     }
 761:/usr/include/boost/function/function_template.hpp **** #endif
 762:/usr/include/boost/function/function_template.hpp **** 
 763:/usr/include/boost/function/function_template.hpp ****     ~BOOST_FUNCTION_FUNCTION() { clear(); }
 764:/usr/include/boost/function/function_template.hpp **** 
 765:/usr/include/boost/function/function_template.hpp ****     result_type operator()(BOOST_FUNCTION_PARMS) const
 766:/usr/include/boost/function/function_template.hpp ****     {
 767:/usr/include/boost/function/function_template.hpp ****       if (this->empty())
 768:/usr/include/boost/function/function_template.hpp ****         boost::throw_exception(bad_function_call());
 769:/usr/include/boost/function/function_template.hpp **** 
 770:/usr/include/boost/function/function_template.hpp ****       return get_vtable()->invoker
 771:/usr/include/boost/function/function_template.hpp ****                (this->functor BOOST_FUNCTION_COMMA BOOST_FUNCTION_ARGS);
 772:/usr/include/boost/function/function_template.hpp ****     }
 773:/usr/include/boost/function/function_template.hpp **** 
 774:/usr/include/boost/function/function_template.hpp ****     // The distinction between when to use BOOST_FUNCTION_FUNCTION and
 775:/usr/include/boost/function/function_template.hpp ****     // when to use self_type is obnoxious. MSVC cannot handle self_type as
 776:/usr/include/boost/function/function_template.hpp ****     // the return type of these assignment operators, but Borland C++ cannot
 777:/usr/include/boost/function/function_template.hpp ****     // handle BOOST_FUNCTION_FUNCTION as the type of the temporary to
 778:/usr/include/boost/function/function_template.hpp ****     // construct.
 779:/usr/include/boost/function/function_template.hpp ****     template<typename Functor>
 780:/usr/include/boost/function/function_template.hpp **** #ifndef BOOST_NO_SFINAE
 781:/usr/include/boost/function/function_template.hpp ****     typename boost::enable_if_c<
 782:/usr/include/boost/function/function_template.hpp ****                   !(is_integral<Functor>::value),
 783:/usr/include/boost/function/function_template.hpp ****                BOOST_FUNCTION_FUNCTION&>::type
 784:/usr/include/boost/function/function_template.hpp **** #else
 785:/usr/include/boost/function/function_template.hpp ****     BOOST_FUNCTION_FUNCTION&
 786:/usr/include/boost/function/function_template.hpp **** #endif
 787:/usr/include/boost/function/function_template.hpp ****     operator=(Functor BOOST_FUNCTION_TARGET_FIX(const &) f)
 788:/usr/include/boost/function/function_template.hpp ****     {
 789:/usr/include/boost/function/function_template.hpp ****       this->clear();
 790:/usr/include/boost/function/function_template.hpp ****       BOOST_TRY  {
 791:/usr/include/boost/function/function_template.hpp ****         this->assign_to(f);
 792:/usr/include/boost/function/function_template.hpp ****       } BOOST_CATCH (...) {
 793:/usr/include/boost/function/function_template.hpp ****         vtable = 0;
 794:/usr/include/boost/function/function_template.hpp ****         BOOST_RETHROW;
 795:/usr/include/boost/function/function_template.hpp ****       }
 796:/usr/include/boost/function/function_template.hpp ****       BOOST_CATCH_END
 797:/usr/include/boost/function/function_template.hpp ****       return *this;
 798:/usr/include/boost/function/function_template.hpp ****     }
 799:/usr/include/boost/function/function_template.hpp ****     template<typename Functor,typename Allocator>
 800:/usr/include/boost/function/function_template.hpp ****     void assign(Functor BOOST_FUNCTION_TARGET_FIX(const &) f, Allocator a)
 801:/usr/include/boost/function/function_template.hpp ****     {
 802:/usr/include/boost/function/function_template.hpp ****       this->clear();
 803:/usr/include/boost/function/function_template.hpp ****       BOOST_TRY{
 804:/usr/include/boost/function/function_template.hpp ****         this->assign_to_a(f,a);
 805:/usr/include/boost/function/function_template.hpp ****       } BOOST_CATCH (...) {
 806:/usr/include/boost/function/function_template.hpp ****         vtable = 0;
 807:/usr/include/boost/function/function_template.hpp ****         BOOST_RETHROW;
 808:/usr/include/boost/function/function_template.hpp ****       }
 809:/usr/include/boost/function/function_template.hpp ****       BOOST_CATCH_END
 810:/usr/include/boost/function/function_template.hpp ****     }
 811:/usr/include/boost/function/function_template.hpp **** 
 812:/usr/include/boost/function/function_template.hpp **** #ifndef BOOST_NO_SFINAE
 813:/usr/include/boost/function/function_template.hpp ****     BOOST_FUNCTION_FUNCTION& operator=(clear_type*)
GAS LISTING /tmp/ccvmoMuv.s 			page 886


 814:/usr/include/boost/function/function_template.hpp ****     {
 815:/usr/include/boost/function/function_template.hpp ****       this->clear();
 816:/usr/include/boost/function/function_template.hpp ****       return *this;
 817:/usr/include/boost/function/function_template.hpp ****     }
 818:/usr/include/boost/function/function_template.hpp **** #else
 819:/usr/include/boost/function/function_template.hpp ****     BOOST_FUNCTION_FUNCTION& operator=(int zero)
 820:/usr/include/boost/function/function_template.hpp ****     {
 821:/usr/include/boost/function/function_template.hpp ****       BOOST_ASSERT(zero == 0);
 822:/usr/include/boost/function/function_template.hpp ****       this->clear();
 823:/usr/include/boost/function/function_template.hpp ****       return *this;
 824:/usr/include/boost/function/function_template.hpp ****     }
 825:/usr/include/boost/function/function_template.hpp **** #endif
 826:/usr/include/boost/function/function_template.hpp **** 
 827:/usr/include/boost/function/function_template.hpp ****     // Assignment from another BOOST_FUNCTION_FUNCTION
 828:/usr/include/boost/function/function_template.hpp ****     BOOST_FUNCTION_FUNCTION& operator=(const BOOST_FUNCTION_FUNCTION& f)
 829:/usr/include/boost/function/function_template.hpp ****     {
 830:/usr/include/boost/function/function_template.hpp ****       if (&f == this)
 831:/usr/include/boost/function/function_template.hpp ****         return *this;
 832:/usr/include/boost/function/function_template.hpp **** 
 833:/usr/include/boost/function/function_template.hpp ****       this->clear();
 834:/usr/include/boost/function/function_template.hpp ****       BOOST_TRY {
 835:/usr/include/boost/function/function_template.hpp ****         this->assign_to_own(f);
 836:/usr/include/boost/function/function_template.hpp ****       } BOOST_CATCH (...) {
 837:/usr/include/boost/function/function_template.hpp ****         vtable = 0;
 838:/usr/include/boost/function/function_template.hpp ****         BOOST_RETHROW;
 839:/usr/include/boost/function/function_template.hpp ****       }
 840:/usr/include/boost/function/function_template.hpp ****       BOOST_CATCH_END
 841:/usr/include/boost/function/function_template.hpp ****       return *this;
 842:/usr/include/boost/function/function_template.hpp ****     }
 843:/usr/include/boost/function/function_template.hpp **** 
 844:/usr/include/boost/function/function_template.hpp **** #ifndef BOOST_NO_CXX11_RVALUE_REFERENCES
 845:/usr/include/boost/function/function_template.hpp ****     // Move assignment from another BOOST_FUNCTION_FUNCTION
 846:/usr/include/boost/function/function_template.hpp ****     BOOST_FUNCTION_FUNCTION& operator=(BOOST_FUNCTION_FUNCTION&& f)
 847:/usr/include/boost/function/function_template.hpp ****     {
 848:/usr/include/boost/function/function_template.hpp ****       if (&f == this)
 849:/usr/include/boost/function/function_template.hpp ****         return *this;
 850:/usr/include/boost/function/function_template.hpp **** 
 851:/usr/include/boost/function/function_template.hpp ****       this->clear();
 852:/usr/include/boost/function/function_template.hpp ****       BOOST_TRY {
 853:/usr/include/boost/function/function_template.hpp ****         this->move_assign(f);
 854:/usr/include/boost/function/function_template.hpp ****       } BOOST_CATCH (...) {
 855:/usr/include/boost/function/function_template.hpp ****         vtable = 0;
 856:/usr/include/boost/function/function_template.hpp ****         BOOST_RETHROW;
 857:/usr/include/boost/function/function_template.hpp ****       }
 858:/usr/include/boost/function/function_template.hpp ****       BOOST_CATCH_END
 859:/usr/include/boost/function/function_template.hpp ****       return *this;
 860:/usr/include/boost/function/function_template.hpp ****     }
 861:/usr/include/boost/function/function_template.hpp **** #endif
 862:/usr/include/boost/function/function_template.hpp **** 
 863:/usr/include/boost/function/function_template.hpp ****     void swap(BOOST_FUNCTION_FUNCTION& other)
 864:/usr/include/boost/function/function_template.hpp ****     {
 865:/usr/include/boost/function/function_template.hpp ****       if (&other == this)
 866:/usr/include/boost/function/function_template.hpp ****         return;
 867:/usr/include/boost/function/function_template.hpp **** 
 868:/usr/include/boost/function/function_template.hpp ****       BOOST_FUNCTION_FUNCTION tmp;
 869:/usr/include/boost/function/function_template.hpp ****       tmp.move_assign(*this);
 870:/usr/include/boost/function/function_template.hpp ****       this->move_assign(other);
GAS LISTING /tmp/ccvmoMuv.s 			page 887


 871:/usr/include/boost/function/function_template.hpp ****       other.move_assign(tmp);
 872:/usr/include/boost/function/function_template.hpp ****     }
 873:/usr/include/boost/function/function_template.hpp **** 
 874:/usr/include/boost/function/function_template.hpp ****     // Clear out a target, if there is one
 875:/usr/include/boost/function/function_template.hpp ****     void clear()
 876:/usr/include/boost/function/function_template.hpp ****     {
 877:/usr/include/boost/function/function_template.hpp ****       if (vtable) {
 22452              		.loc 48 877 0
 22453 00c0 488B5328 		movq	40(%rbx), %rdx
 22454              	.LVL1920:
 22455 00c4 4885D2   		testq	%rdx, %rdx
 22456 00c7 7429     		je	.L1251
 22457              	.LVL1921:
 878:/usr/include/boost/function/function_template.hpp ****         if (!this->has_trivial_copy_and_destroy())
 22458              		.loc 48 878 0
 22459 00c9 F6C201   		testb	$1, %dl
 22460 00cc 7524     		jne	.L1251
 22461              	.LVL1922:
 22462              	.LBB21615:
 22463              	.LBB21616:
 686:/usr/include/boost/function/function_template.hpp ****     }
 22464              		.loc 48 686 0
 22465 00ce 4883E2FE 		andq	$-2, %rdx
 22466 00d2 488B0A   		movq	(%rdx), %rcx
 22467              	.LVL1923:
 22468              	.LBE21616:
 22469              	.LBE21615:
 22470              	.LBB21617:
 22471              	.LBB21618:
 509:/usr/include/boost/function/function_template.hpp ****             base.manager(functor, functor, destroy_functor_tag);
 22472              		.loc 48 509 0
 22473 00d5 4885C9   		testq	%rcx, %rcx
 22474 00d8 7418     		je	.L1251
 22475              	.LBE21618:
 22476              	.LBE21617:
 879:/usr/include/boost/function/function_template.hpp ****           get_vtable()->clear(this->functor);
 22477              		.loc 48 879 0
 22478 00da 488D7B30 		leaq	48(%rbx), %rdi
 22479              	.LVL1924:
 22480 00de 48894424 		movq	%rax, 8(%rsp)
 22480      08
 22481              	.LBB21620:
 22482              	.LBB21619:
 510:/usr/include/boost/function/function_template.hpp ****         }
 22483              		.loc 48 510 0
 22484 00e3 BA020000 		movl	$2, %edx
 22484      00
 22485 00e8 4889FE   		movq	%rdi, %rsi
 22486 00eb FFD1     		call	*%rcx
 22487              	.LVL1925:
 22488 00ed 488B4424 		movq	8(%rsp), %rax
 22488      08
 22489              	.LVL1926:
 22490              	.L1251:
 22491              	.LBE21619:
 22492              	.LBE21620:
 22493              	.LBE21614:
GAS LISTING /tmp/ccvmoMuv.s 			page 888


 22494              	.LBE21613:
 22495              	.LBE21612:
 22496              	.LBE21611:
 22497              	.LBB21621:
 22498              	.LBB21622:
  97:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 22499              		.loc 34 97 0
 22500 00f2 488B7B20 		movq	32(%rbx), %rdi
 22501 00f6 4885FF   		testq	%rdi, %rdi
 22502 00f9 740F     		je	.L1252
 22503 00fb 48894424 		movq	%rax, 8(%rsp)
 22503      08
 22504 0100 E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 22504      00
 22505              	.LVL1927:
 22506 0105 488B4424 		movq	8(%rsp), %rax
 22506      08
 22507              	.L1252:
 22508              	.LBE21622:
 22509              	.LBE21621:
 22510              	.LBE21610:
 22511              	.LBE21609:
 22512              	.LBE21608:
 22513              	.LBE21607:
 22514              	.LBB21623:
 22515              	.LBB21624:
 22516              	.LBB21625:
 22517              	.LBB21626:
 22518              		.loc 12 110 0
 22519 010a 4889DF   		movq	%rbx, %rdi
 22520 010d 48894424 		movq	%rax, 8(%rsp)
 22520      08
 22521              	.LVL1928:
 22522 0112 E8000000 		call	_ZdlPv@PLT
 22522      00
 22523              	.LVL1929:
 22524              	.LBE21626:
 22525              	.LBE21625:
 22526              	.LBE21624:
 22527              	.LBE21623:
 22528              	.LBE21606:
2206:/usr/include/c++/6/bits/stl_tree.h **** 	  }
 22529              		.loc 19 2206 0
 22530 0117 488B4424 		movq	8(%rsp), %rax
 22530      08
 22531              	.LVL1930:
 22532              	.LBE21628:
2213:/usr/include/c++/6/bits/stl_tree.h **** 
 22533              		.loc 19 2213 0
 22534 011c 4883C410 		addq	$16, %rsp
 22535              		.cfi_remember_state
 22536              		.cfi_def_cfa_offset 48
 22537 0120 5B       		popq	%rbx
 22538              		.cfi_def_cfa_offset 40
 22539              	.LVL1931:
 22540 0121 5D       		popq	%rbp
 22541              		.cfi_def_cfa_offset 32
GAS LISTING /tmp/ccvmoMuv.s 			page 889


 22542              	.LVL1932:
 22543 0122 415C     		popq	%r12
 22544              		.cfi_def_cfa_offset 24
 22545 0124 415D     		popq	%r13
 22546              		.cfi_def_cfa_offset 16
 22547              	.LVL1933:
 22548 0126 415E     		popq	%r14
 22549              		.cfi_def_cfa_offset 8
 22550              	.LVL1934:
 22551 0128 C3       		ret
 22552              	.LVL1935:
 22553              	.L1258:
 22554              		.cfi_restore_state
2208:/usr/include/c++/6/bits/stl_tree.h **** 	  {
 22555              		.loc 19 2208 0
 22556 0129 4889C7   		movq	%rax, %rdi
 22557 012c E8000000 		call	__cxa_begin_catch@PLT
 22557      00
 22558              	.LVL1936:
 22559              	.LBB21629:
 22560              	.LBB21630:
 22561              	.LBB21631:
 22562              	.LBB21632:
 22563              	.LBB21633:
 22564              	.LBB21634:
 22565              	.LBB21635:
 22566              	.LBB21636:
 22567              	.LBB21637:
 877:/usr/include/boost/function/function_template.hpp ****         if (!this->has_trivial_copy_and_destroy())
 22568              		.loc 48 877 0
 22569 0131 488B4328 		movq	40(%rbx), %rax
 22570 0135 4885C0   		testq	%rax, %rax
 22571 0138 741E     		je	.L1254
 22572              	.LVL1937:
 878:/usr/include/boost/function/function_template.hpp ****           get_vtable()->clear(this->functor);
 22573              		.loc 48 878 0
 22574 013a A801     		testb	$1, %al
 22575 013c 751A     		jne	.L1254
 22576              	.LBB21638:
 22577              	.LBB21639:
 686:/usr/include/boost/function/function_template.hpp ****     }
 22578              		.loc 48 686 0
 22579 013e 4883E0FE 		andq	$-2, %rax
 22580              	.LBE21639:
 22581              	.LBE21638:
 22582              		.loc 48 879 0
 22583 0142 488D7B30 		leaq	48(%rbx), %rdi
 22584              	.LVL1938:
 22585 0146 488B00   		movq	(%rax), %rax
 22586              	.LVL1939:
 22587              	.LBB21640:
 22588              	.LBB21641:
 509:/usr/include/boost/function/function_template.hpp ****             base.manager(functor, functor, destroy_functor_tag);
 22589              		.loc 48 509 0
 22590 0149 4885C0   		testq	%rax, %rax
 22591 014c 740A     		je	.L1254
 510:/usr/include/boost/function/function_template.hpp ****         }
GAS LISTING /tmp/ccvmoMuv.s 			page 890


 22592              		.loc 48 510 0
 22593 014e BA020000 		movl	$2, %edx
 22593      00
 22594 0153 4889FE   		movq	%rdi, %rsi
 22595 0156 FFD0     		call	*%rax
 22596              	.LVL1940:
 22597              	.L1254:
 22598              	.LBE21641:
 22599              	.LBE21640:
 22600              	.LBE21637:
 22601              	.LBE21636:
 22602              	.LBE21635:
 22603              	.LBE21634:
 22604              	.LBB21642:
 22605              	.LBB21643:
  97:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 22606              		.loc 34 97 0
 22607 0158 488B7B20 		movq	32(%rbx), %rdi
 22608 015c 4885FF   		testq	%rdi, %rdi
 22609 015f 7405     		je	.L1255
 22610 0161 E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 22610      00
 22611              	.LVL1941:
 22612              	.L1255:
 22613              	.LBE21643:
 22614              	.LBE21642:
 22615              	.LBE21633:
 22616              	.LBE21632:
 22617              	.LBE21631:
 22618              	.LBE21630:
 22619              	.LBB21644:
 22620              	.LBB21645:
 22621              	.LBB21646:
 22622              	.LBB21647:
 22623              		.loc 12 110 0
 22624 0166 4889DF   		movq	%rbx, %rdi
 22625 0169 E8000000 		call	_ZdlPv@PLT
 22625      00
 22626              	.LVL1942:
 22627              	.LEHB114:
 22628              	.LBE21647:
 22629              	.LBE21646:
 22630              	.LBE21645:
 22631              	.LBE21644:
 22632              	.LBE21629:
2211:/usr/include/c++/6/bits/stl_tree.h **** 	  }
 22633              		.loc 19 2211 0
 22634 016e E8000000 		call	__cxa_rethrow@PLT
 22634      00
 22635              	.LVL1943:
 22636              	.LEHE114:
 22637              	.L1260:
 22638              	.LBB21648:
 22639              	.LBB21591:
 22640              	.LBB21588:
 22641              	.LBB21586:
 547:/usr/include/c++/6/bits/stl_tree.h **** 	    {
GAS LISTING /tmp/ccvmoMuv.s 			page 891


 22642              		.loc 19 547 0
 22643 0173 4889C7   		movq	%rax, %rdi
 22644 0176 E8000000 		call	__cxa_begin_catch@PLT
 22644      00
 22645              	.LVL1944:
 22646              	.LBB21582:
 22647              	.LBB21583:
 22648              	.LBB21584:
 22649              	.LBB21585:
 22650              		.loc 12 110 0
 22651 017b 4889DF   		movq	%rbx, %rdi
 22652 017e E8000000 		call	_ZdlPv@PLT
 22652      00
 22653              	.LVL1945:
 22654              	.LEHB115:
 22655              	.LBE21585:
 22656              	.LBE21584:
 22657              	.LBE21583:
 22658              	.LBE21582:
 551:/usr/include/c++/6/bits/stl_tree.h **** 	    }
 22659              		.loc 19 551 0
 22660 0183 E8000000 		call	__cxa_rethrow@PLT
 22660      00
 22661              	.LVL1946:
 22662              	.LEHE115:
 22663              	.L1259:
 22664 0188 4889C3   		movq	%rax, %rbx
 22665              	.LVL1947:
 22666              	.LBE21586:
 22667              	.LBE21588:
 22668              	.LBE21591:
 22669              	.LBE21648:
2208:/usr/include/c++/6/bits/stl_tree.h **** 	  {
 22670              		.loc 19 2208 0
 22671 018b E8000000 		call	__cxa_end_catch@PLT
 22671      00
 22672              	.LVL1948:
 22673 0190 4889DF   		movq	%rbx, %rdi
 22674              	.LEHB116:
 22675 0193 E8000000 		call	_Unwind_Resume@PLT
 22675      00
 22676              	.LVL1949:
 22677              	.LEHE116:
 22678              	.L1261:
 22679 0198 4889C3   		movq	%rax, %rbx
 22680              	.LVL1950:
 22681              	.LBB21649:
 22682              	.LBB21592:
 22683              	.LBB21589:
 22684              	.LBB21587:
 547:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 22685              		.loc 19 547 0
 22686 019b E8000000 		call	__cxa_end_catch@PLT
 22686      00
 22687              	.LVL1951:
 22688 01a0 4889DF   		movq	%rbx, %rdi
 22689              	.LEHB117:
GAS LISTING /tmp/ccvmoMuv.s 			page 892


 22690 01a3 E8000000 		call	_Unwind_Resume@PLT
 22690      00
 22691              	.LVL1952:
 22692              	.LEHE117:
 22693              	.LBE21587:
 22694              	.LBE21589:
 22695              	.LBE21592:
 22696              	.LBE21649:
 22697              		.cfi_endproc
 22698              	.LFE12716:
 22699              		.section	.gcc_except_table
 22700              		.align 4
 22701              	.LLSDA12716:
 22702 0274 FF       		.byte	0xff
 22703 0275 9B       		.byte	0x9b
 22704 0276 2D       		.uleb128 .LLSDATT12716-.LLSDATTD12716
 22705              	.LLSDATTD12716:
 22706 0277 01       		.byte	0x1
 22707 0278 24       		.uleb128 .LLSDACSE12716-.LLSDACSB12716
 22708              	.LLSDACSB12716:
 22709 0279 1A       		.uleb128 .LEHB111-.LFB12716
 22710 027a 05       		.uleb128 .LEHE111-.LEHB111
 22711 027b 00       		.uleb128 0
 22712 027c 00       		.uleb128 0
 22713 027d 35       		.uleb128 .LEHB112-.LFB12716
 22714 027e 05       		.uleb128 .LEHE112-.LEHB112
 22715 027f F302     		.uleb128 .L1260-.LFB12716
 22716 0281 01       		.uleb128 0x1
 22717 0282 4B       		.uleb128 .LEHB113-.LFB12716
 22718 0283 56       		.uleb128 .LEHE113-.LEHB113
 22719 0284 A902     		.uleb128 .L1258-.LFB12716
 22720 0286 01       		.uleb128 0x1
 22721 0287 EE02     		.uleb128 .LEHB114-.LFB12716
 22722 0289 05       		.uleb128 .LEHE114-.LEHB114
 22723 028a 8803     		.uleb128 .L1259-.LFB12716
 22724 028c 00       		.uleb128 0
 22725 028d 8303     		.uleb128 .LEHB115-.LFB12716
 22726 028f 05       		.uleb128 .LEHE115-.LEHB115
 22727 0290 9803     		.uleb128 .L1261-.LFB12716
 22728 0292 00       		.uleb128 0
 22729 0293 9303     		.uleb128 .LEHB116-.LFB12716
 22730 0295 05       		.uleb128 .LEHE116-.LEHB116
 22731 0296 00       		.uleb128 0
 22732 0297 00       		.uleb128 0
 22733 0298 A303     		.uleb128 .LEHB117-.LFB12716
 22734 029a 05       		.uleb128 .LEHE117-.LEHB117
 22735 029b 00       		.uleb128 0
 22736 029c 00       		.uleb128 0
 22737              	.LLSDACSE12716:
 22738 029d 01       		.byte	0x1
 22739 029e 00       		.byte	0
 22740 029f 00       		.align 4
 22741 02a0 00000000 		.long	0
 22742              	
 22743              	.LLSDATT12716:
 22744              		.section	.text._ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFv
 22746              		.section	.rodata._ZN2gr11basic_block12dispatch_msgEN5boost13intrusive_ptrIN3pmt8pmt_baseEEES5_.str
GAS LISTING /tmp/ccvmoMuv.s 			page 893


 22747              	.LC18:
 22748 0000 63616C6C 		.string	"call to empty boost::function"
 22748      20746F20 
 22748      656D7074 
 22748      7920626F 
 22748      6F73743A 
 22749              		.section	.text._ZN2gr11basic_block12dispatch_msgEN5boost13intrusive_ptrIN3pmt8pmt_baseEEES5_,"axG"
 22750              		.align 2
 22751              		.p2align 4,,15
 22752              		.weak	_ZN2gr11basic_block12dispatch_msgEN5boost13intrusive_ptrIN3pmt8pmt_baseEEES5_
 22754              	_ZN2gr11basic_block12dispatch_msgEN5boost13intrusive_ptrIN3pmt8pmt_baseEEES5_:
 22755              	.LFB8680:
 130:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****     {
 22756              		.loc 2 130 0
 22757              		.cfi_startproc
 22758              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 22759              		.cfi_lsda 0x1b,.LLSDA8680
 22760              	.LVL1953:
 22761 0000 4157     		pushq	%r15
 22762              		.cfi_def_cfa_offset 16
 22763              		.cfi_offset 15, -16
 22764 0002 4156     		pushq	%r14
 22765              		.cfi_def_cfa_offset 24
 22766              		.cfi_offset 14, -24
 22767 0004 4989F6   		movq	%rsi, %r14
 22768 0007 4155     		pushq	%r13
 22769              		.cfi_def_cfa_offset 32
 22770              		.cfi_offset 13, -32
 22771 0009 4154     		pushq	%r12
 22772              		.cfi_def_cfa_offset 40
 22773              		.cfi_offset 12, -40
 22774 000b 55       		pushq	%rbp
 22775              		.cfi_def_cfa_offset 48
 22776              		.cfi_offset 6, -48
 22777 000c 53       		pushq	%rbx
 22778              		.cfi_def_cfa_offset 56
 22779              		.cfi_offset 3, -56
 22780 000d 4889FB   		movq	%rdi, %rbx
 22781 0010 4889D5   		movq	%rdx, %rbp
 22782 0013 4883EC28 		subq	$40, %rsp
 22783              		.cfi_def_cfa_offset 96
 133:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****         d_msg_handlers[which_port](msg); // Yes, invoke it.
 22784              		.loc 2 133 0
 22785 0017 488B07   		movq	(%rdi), %rax
 22786              	.LBB21714:
 22787              	.LBB21715:
 22788              	.LBB21716:
  90:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 22789              		.loc 34 90 0
 22790 001a 488B3E   		movq	(%rsi), %rdi
 22791              	.LVL1954:
  92:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 22792              		.loc 34 92 0
 22793 001d 4885FF   		testq	%rdi, %rdi
 22794              	.LBE21716:
 22795              	.LBE21715:
 22796              	.LBE21714:
GAS LISTING /tmp/ccvmoMuv.s 			page 894


 133:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****         d_msg_handlers[which_port](msg); // Yes, invoke it.
 22797              		.loc 2 133 0
 22798 0020 4C8B6818 		movq	24(%rax), %r13
 22799              	.LVL1955:
 22800              	.LBB21719:
 22801              	.LBB21718:
 22802              	.LBB21717:
  90:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 22803              		.loc 34 90 0
 22804 0024 48897C24 		movq	%rdi, 16(%rsp)
 22804      10
  92:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 22805              		.loc 34 92 0
 22806 0029 7405     		je	.L1286
 22807              	.LEHB118:
 22808 002b E8000000 		call	_ZN3pmt21intrusive_ptr_add_refEPNS_8pmt_baseE@PLT
 22808      00
 22809              	.LVL1956:
 22810              	.LEHE118:
 22811              	.L1286:
 22812 0030 488D0500 		leaq	_ZN2gr11basic_block15has_msg_handlerEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE(%rip), %rax
 22812      000000
 22813 0037 4939C5   		cmpq	%rax, %r13
 22814 003a 0F85E800 		jne	.L1287
 22814      0000
 22815              	.LVL1957:
 22816              	.LBE21717:
 22817              	.LBE21718:
 22818              	.LBE21719:
 22819              	.LBB21720:
 22820              	.LBB21721:
 22821              	.LBB21722:
 22822              		.loc 36 1080 0
 22823 0040 4C8D6424 		leaq	16(%rsp), %r12
 22823      10
 22824              	.LVL1958:
 22825              	.LBE21722:
 22826              	.LBE21721:
 22827              	.LBB21724:
 22828              	.LBB21725:
 22829              	.LBB21726:
 893:/usr/include/c++/6/bits/stl_tree.h **** 
 22830              		.loc 19 893 0
 22831 0045 488D7B18 		leaq	24(%rbx), %rdi
 22832              	.LVL1959:
 22833 0049 4C8D6B20 		leaq	32(%rbx), %r13
 22834              	.LVL1960:
 22835              	.LBE21726:
 22836              	.LBE21725:
 22837              	.LBE21724:
 22838              	.LBB21727:
 22839              	.LBB21723:
 22840              		.loc 36 1080 0
 22841 004d 4C89E6   		movq	%r12, %rsi
 22842              	.LEHB119:
 22843 0050 E8000000 		call	_ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFvS4_EEEESt1
 22843      00
GAS LISTING /tmp/ccvmoMuv.s 			page 895


 22844              	.LVL1961:
 22845              	.LEHE119:
 22846              	.LBE21723:
 22847              	.LBE21727:
 22848              	.LBB21728:
 22849              	.LBB21729:
 242:/usr/include/c++/6/bits/stl_tree.h **** 
 22850              		.loc 19 242 0
 22851 0055 4939C5   		cmpq	%rax, %r13
 22852 0058 410F95C5 		setne	%r13b
 22853              	.LVL1962:
 22854              	.L1288:
 22855              	.LBE21729:
 22856              	.LBE21728:
 22857              	.LBE21720:
 22858              	.LBB21730:
 22859              	.LBB21731:
  97:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 22860              		.loc 34 97 0
 22861 005c 488B7C24 		movq	16(%rsp), %rdi
 22861      10
 22862 0061 4885FF   		testq	%rdi, %rdi
 22863 0064 7405     		je	.L1289
 22864 0066 E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 22864      00
 22865              	.LVL1963:
 22866              	.L1289:
 22867              	.LBE21731:
 22868              	.LBE21730:
 133:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****         d_msg_handlers[which_port](msg); // Yes, invoke it.
 22869              		.loc 2 133 0
 22870 006b 4584ED   		testb	%r13b, %r13b
 22871 006e 0F849500 		je	.L1285
 22871      0000
 22872              	.LVL1964:
 22873              	.LBB21732:
 22874              	.LBB21733:
  90:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 22875              		.loc 34 90 0
 22876 0074 4C8B6D00 		movq	0(%rbp), %r13
  92:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 22877              		.loc 34 92 0
 22878 0078 4D85ED   		testq	%r13, %r13
 22879 007b 7408     		je	.L1291
 22880 007d 4C89EF   		movq	%r13, %rdi
 22881              	.LEHB120:
 22882 0080 E8000000 		call	_ZN3pmt21intrusive_ptr_add_refEPNS_8pmt_baseE@PLT
 22882      00
 22883              	.LVL1965:
 22884              	.LEHE120:
 22885              	.L1291:
 22886              	.LBE21733:
 22887              	.LBE21732:
 22888              	.LBB21734:
 22889              	.LBB21735:
 22890              	.LBB21736:
 22891              	.LBB21737:
GAS LISTING /tmp/ccvmoMuv.s 			page 896


 22892              	.LBB21738:
 22893              	.LBB21739:
 22894              	.LBB21740:
 677:/usr/include/c++/6/bits/stl_tree.h **** 
 22895              		.loc 19 677 0
 22896 0085 4C8D7B20 		leaq	32(%rbx), %r15
 22897              	.LVL1966:
 22898              	.LBE21740:
 22899              	.LBE21739:
1103:/usr/include/c++/6/bits/stl_tree.h **** 
 22900              		.loc 19 1103 0
 22901 0089 488B7B28 		movq	40(%rbx), %rdi
 22902 008d 4C89F2   		movq	%r14, %rdx
 22903 0090 4C89FE   		movq	%r15, %rsi
 22904              	.LEHB121:
 22905 0093 E8000000 		call	_ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFvS4_EEEESt1
 22905      00
 22906              	.LVL1967:
 22907              	.LBE21738:
 22908              	.LBE21737:
 22909              	.LBE21736:
 481:/usr/include/c++/6/bits/stl_map.h **** #if __cplusplus >= 201103L
 22910              		.loc 36 481 0
 22911 0098 4939C7   		cmpq	%rax, %r15
 22912              	.LBB21743:
 22913              	.LBB21742:
 22914              	.LBB21741:
1103:/usr/include/c++/6/bits/stl_tree.h **** 
 22915              		.loc 19 1103 0
 22916 009b 4889C5   		movq	%rax, %rbp
 22917              	.LVL1968:
 22918              	.LBE21741:
 22919              	.LBE21742:
 22920              	.LBE21743:
 481:/usr/include/c++/6/bits/stl_map.h **** #if __cplusplus >= 201103L
 22921              		.loc 36 481 0
 22922 009e 7419     		je	.L1292
 22923              	.LVL1969:
 22924 00a0 488D7020 		leaq	32(%rax), %rsi
 22925              	.LVL1970:
 22926              	.LBB21744:
 22927              	.LBB21745:
 22928              		.loc 21 907 0
 22929 00a4 4C89F7   		movq	%r14, %rdi
 22930 00a7 E8000000 		call	_ZN3pmt3eqvERKN5boost13intrusive_ptrINS_8pmt_baseEEES5_@PLT
 22930      00
 22931              	.LVL1971:
 22932 00ac 84C0     		testb	%al, %al
 22933 00ae 7570     		jne	.L1304
 22934              	.LVL1972:
 22935              	.LBE21745:
 22936              	.LBE21744:
 481:/usr/include/c++/6/bits/stl_map.h **** #if __cplusplus >= 201103L
 22937              		.loc 36 481 0
 22938 00b0 488B4520 		movq	32(%rbp), %rax
 22939 00b4 493906   		cmpq	%rax, (%r14)
 22940 00b7 7667     		jbe	.L1304
GAS LISTING /tmp/ccvmoMuv.s 			page 897


 22941              	.LVL1973:
 22942              	.L1292:
 483:/usr/include/c++/6/bits/stl_map.h **** 					    std::tuple<const key_type&>(__k),
 22943              		.loc 36 483 0
 22944 00b9 488D4C24 		leaq	8(%rsp), %rcx
 22944      08
 22945              	.LVL1974:
 22946 00be 488D7B18 		leaq	24(%rbx), %rdi
 22947 00c2 4C8D4424 		leaq	7(%rsp), %r8
 22947      07
 22948 00c7 488D1500 		leaq	_ZStL19piecewise_construct(%rip), %rdx
 22948      000000
 22949 00ce 4889EE   		movq	%rbp, %rsi
 22950              	.LBB21747:
 22951              	.LBB21748:
 22952              	.LBB21749:
 22953              	.LBB21750:
 22954              	.LBB21751:
 22955              		.file 49 "/usr/include/c++/6/tuple"
   1:/usr/include/c++/6/tuple **** // <tuple> -*- C++ -*-
   2:/usr/include/c++/6/tuple **** 
   3:/usr/include/c++/6/tuple **** // Copyright (C) 2007-2016 Free Software Foundation, Inc.
   4:/usr/include/c++/6/tuple **** //
   5:/usr/include/c++/6/tuple **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/6/tuple **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/6/tuple **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/6/tuple **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/6/tuple **** // any later version.
  10:/usr/include/c++/6/tuple **** 
  11:/usr/include/c++/6/tuple **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/6/tuple **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/6/tuple **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/6/tuple **** // GNU General Public License for more details.
  15:/usr/include/c++/6/tuple **** 
  16:/usr/include/c++/6/tuple **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/6/tuple **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/6/tuple **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/6/tuple **** 
  20:/usr/include/c++/6/tuple **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/6/tuple **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/6/tuple **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/6/tuple **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/6/tuple **** 
  25:/usr/include/c++/6/tuple **** /** @file include/tuple
  26:/usr/include/c++/6/tuple ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/6/tuple ****  */
  28:/usr/include/c++/6/tuple **** 
  29:/usr/include/c++/6/tuple **** #ifndef _GLIBCXX_TUPLE
  30:/usr/include/c++/6/tuple **** #define _GLIBCXX_TUPLE 1
  31:/usr/include/c++/6/tuple **** 
  32:/usr/include/c++/6/tuple **** #pragma GCC system_header
  33:/usr/include/c++/6/tuple **** 
  34:/usr/include/c++/6/tuple **** #if __cplusplus < 201103L
  35:/usr/include/c++/6/tuple **** # include <bits/c++0x_warning.h>
  36:/usr/include/c++/6/tuple **** #else
  37:/usr/include/c++/6/tuple **** 
  38:/usr/include/c++/6/tuple **** #include <utility>
GAS LISTING /tmp/ccvmoMuv.s 			page 898


  39:/usr/include/c++/6/tuple **** #include <array>
  40:/usr/include/c++/6/tuple **** #include <bits/uses_allocator.h>
  41:/usr/include/c++/6/tuple **** 
  42:/usr/include/c++/6/tuple **** namespace std _GLIBCXX_VISIBILITY(default)
  43:/usr/include/c++/6/tuple **** {
  44:/usr/include/c++/6/tuple **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  45:/usr/include/c++/6/tuple **** 
  46:/usr/include/c++/6/tuple ****   /**
  47:/usr/include/c++/6/tuple ****    *  @addtogroup utilities
  48:/usr/include/c++/6/tuple ****    *  @{
  49:/usr/include/c++/6/tuple ****    */
  50:/usr/include/c++/6/tuple **** 
  51:/usr/include/c++/6/tuple ****   template<std::size_t _Idx, typename _Head, bool _IsEmptyNotFinal>
  52:/usr/include/c++/6/tuple ****     struct _Head_base;
  53:/usr/include/c++/6/tuple **** 
  54:/usr/include/c++/6/tuple ****   template<std::size_t _Idx, typename _Head>
  55:/usr/include/c++/6/tuple ****     struct _Head_base<_Idx, _Head, true>
  56:/usr/include/c++/6/tuple ****     : public _Head
  57:/usr/include/c++/6/tuple ****     {
  58:/usr/include/c++/6/tuple ****       constexpr _Head_base()
  59:/usr/include/c++/6/tuple ****       : _Head() { }
  60:/usr/include/c++/6/tuple **** 
  61:/usr/include/c++/6/tuple ****       constexpr _Head_base(const _Head& __h)
  62:/usr/include/c++/6/tuple ****       : _Head(__h) { }
  63:/usr/include/c++/6/tuple **** 
  64:/usr/include/c++/6/tuple ****       constexpr _Head_base(const _Head_base&) = default;
  65:/usr/include/c++/6/tuple ****       constexpr _Head_base(_Head_base&&) = default;
  66:/usr/include/c++/6/tuple **** 
  67:/usr/include/c++/6/tuple ****       template<typename _UHead>
  68:/usr/include/c++/6/tuple ****         constexpr _Head_base(_UHead&& __h)
  69:/usr/include/c++/6/tuple **** 	: _Head(std::forward<_UHead>(__h)) { }
  70:/usr/include/c++/6/tuple **** 
  71:/usr/include/c++/6/tuple ****       _Head_base(allocator_arg_t, __uses_alloc0)
  72:/usr/include/c++/6/tuple ****       : _Head() { }
  73:/usr/include/c++/6/tuple **** 
  74:/usr/include/c++/6/tuple ****       template<typename _Alloc>
  75:/usr/include/c++/6/tuple **** 	_Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
  76:/usr/include/c++/6/tuple **** 	: _Head(allocator_arg, *__a._M_a) { }
  77:/usr/include/c++/6/tuple **** 
  78:/usr/include/c++/6/tuple ****       template<typename _Alloc>
  79:/usr/include/c++/6/tuple **** 	_Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
  80:/usr/include/c++/6/tuple **** 	: _Head(*__a._M_a) { }
  81:/usr/include/c++/6/tuple **** 
  82:/usr/include/c++/6/tuple ****       template<typename _UHead>
  83:/usr/include/c++/6/tuple **** 	_Head_base(__uses_alloc0, _UHead&& __uhead)
  84:/usr/include/c++/6/tuple **** 	: _Head(std::forward<_UHead>(__uhead)) { }
  85:/usr/include/c++/6/tuple **** 
  86:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename _UHead>
  87:/usr/include/c++/6/tuple **** 	_Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
  88:/usr/include/c++/6/tuple **** 	: _Head(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead)) { }
  89:/usr/include/c++/6/tuple **** 
  90:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename _UHead>
  91:/usr/include/c++/6/tuple **** 	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
  92:/usr/include/c++/6/tuple **** 	: _Head(std::forward<_UHead>(__uhead), *__a._M_a) { }
  93:/usr/include/c++/6/tuple **** 
  94:/usr/include/c++/6/tuple ****       static constexpr _Head&
  95:/usr/include/c++/6/tuple ****       _M_head(_Head_base& __b) noexcept { return __b; }
GAS LISTING /tmp/ccvmoMuv.s 			page 899


  96:/usr/include/c++/6/tuple **** 
  97:/usr/include/c++/6/tuple ****       static constexpr const _Head&
  98:/usr/include/c++/6/tuple ****       _M_head(const _Head_base& __b) noexcept { return __b; }
  99:/usr/include/c++/6/tuple ****     };
 100:/usr/include/c++/6/tuple **** 
 101:/usr/include/c++/6/tuple ****   template<std::size_t _Idx, typename _Head>
 102:/usr/include/c++/6/tuple ****     struct _Head_base<_Idx, _Head, false>
 103:/usr/include/c++/6/tuple ****     {
 104:/usr/include/c++/6/tuple ****       constexpr _Head_base()
 105:/usr/include/c++/6/tuple ****       : _M_head_impl() { }
 106:/usr/include/c++/6/tuple **** 
 107:/usr/include/c++/6/tuple ****       constexpr _Head_base(const _Head& __h)
 108:/usr/include/c++/6/tuple ****       : _M_head_impl(__h) { }
 22956              		.loc 49 108 0
 22957 00d1 4C897424 		movq	%r14, 8(%rsp)
 22957      08
 22958              	.LVL1975:
 22959              	.LBE21751:
 22960              	.LBE21750:
 22961              	.LBE21749:
 22962              	.LBE21748:
 22963              	.LBE21747:
 483:/usr/include/c++/6/bits/stl_map.h **** 					    std::tuple<const key_type&>(__k),
 22964              		.loc 36 483 0
 22965 00d6 E8000000 		call	_ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFvS4_EEEESt1
 22965      00
 22966              	.LVL1976:
 22967              	.LEHE121:
 22968              	.L1293:
 22969 00db 488B5028 		movq	40(%rax), %rdx
 22970              	.LVL1977:
 22971              	.LBE21735:
 22972              	.LBE21734:
 22973              	.LBB21754:
 22974              	.LBB21755:
 767:/usr/include/boost/function/function_template.hpp ****         boost::throw_exception(bad_function_call());
 22975              		.loc 48 767 0
 22976 00df 4885D2   		testq	%rdx, %rdx
 22977 00e2 745A     		je	.L1334
 22978              	.LVL1978:
 22979              	.LBB21756:
 22980              	.LBB21757:
 686:/usr/include/boost/function/function_template.hpp ****     }
 22981              		.loc 48 686 0
 22982 00e4 4883E2FE 		andq	$-2, %rdx
 22983              	.LBE21757:
 22984              	.LBE21756:
 770:/usr/include/boost/function/function_template.hpp ****                (this->functor BOOST_FUNCTION_COMMA BOOST_FUNCTION_ARGS);
 22985              		.loc 48 770 0
 22986 00e8 488D7830 		leaq	48(%rax), %rdi
 771:/usr/include/boost/function/function_template.hpp ****     }
 22987              		.loc 48 771 0
 22988 00ec 4C89E6   		movq	%r12, %rsi
 770:/usr/include/boost/function/function_template.hpp ****                (this->functor BOOST_FUNCTION_COMMA BOOST_FUNCTION_ARGS);
 22989              		.loc 48 770 0
 22990 00ef 488B5208 		movq	8(%rdx), %rdx
 22991              	.LVL1979:
GAS LISTING /tmp/ccvmoMuv.s 			page 900


 22992              	.LBB21758:
 22993              	.LBB21759:
 22994              	.LBB21760:
 114:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     {
 22995              		.loc 34 114 0
 22996 00f3 4C896C24 		movq	%r13, 16(%rsp)
 22996      10
 22997              	.LVL1980:
 22998              	.LEHB122:
 22999              	.LBE21760:
 23000              	.LBE21759:
 23001              	.LBE21758:
 771:/usr/include/boost/function/function_template.hpp ****     }
 23002              		.loc 48 771 0
 23003 00f8 FFD2     		call	*%rdx
 23004              	.LVL1981:
 23005              	.LEHE122:
 23006              	.LBB21761:
 23007              	.LBB21762:
  97:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 23008              		.loc 34 97 0
 23009 00fa 488B7C24 		movq	16(%rsp), %rdi
 23009      10
 23010 00ff 4885FF   		testq	%rdi, %rdi
 23011 0102 7405     		je	.L1285
 23012 0104 E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 23012      00
 23013              	.LVL1982:
 23014              	.L1285:
 23015              	.LBE21762:
 23016              	.LBE21761:
 23017              	.LBE21755:
 23018              	.LBE21754:
 136:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h **** 
 23019              		.loc 2 136 0
 23020 0109 4883C428 		addq	$40, %rsp
 23021              		.cfi_remember_state
 23022              		.cfi_def_cfa_offset 56
 23023 010d 5B       		popq	%rbx
 23024              		.cfi_def_cfa_offset 48
 23025              	.LVL1983:
 23026 010e 5D       		popq	%rbp
 23027              		.cfi_def_cfa_offset 40
 23028 010f 415C     		popq	%r12
 23029              		.cfi_def_cfa_offset 32
 23030 0111 415D     		popq	%r13
 23031              		.cfi_def_cfa_offset 24
 23032 0113 415E     		popq	%r14
 23033              		.cfi_def_cfa_offset 16
 23034              	.LVL1984:
 23035 0115 415F     		popq	%r15
 23036              		.cfi_def_cfa_offset 8
 23037 0117 C3       		ret
 23038              	.LVL1985:
 23039 0118 0F1F8400 		.p2align 4,,10
 23039      00000000 
 23040              		.p2align 3
GAS LISTING /tmp/ccvmoMuv.s 			page 901


 23041              	.L1304:
 23042              		.cfi_restore_state
 23043              	.LBB21775:
 23044              	.LBB21753:
 23045              	.LBB21752:
 23046              	.LBB21746:
 23047              		.loc 21 907 0
 23048 0120 4889E8   		movq	%rbp, %rax
 23049 0123 EBB6     		jmp	.L1293
 23050              	.LVL1986:
 23051              		.p2align 4,,10
 23052 0125 0F1F00   		.p2align 3
 23053              	.L1287:
 23054              	.LBE21746:
 23055              	.LBE21752:
 23056              	.LBE21753:
 23057              	.LBE21775:
 133:/home/mpiscopo/gnuradio/include/gnuradio/basic_block.h ****         d_msg_handlers[which_port](msg); // Yes, invoke it.
 23058              		.loc 2 133 0
 23059 0128 4C8D6424 		leaq	16(%rsp), %r12
 23059      10
 23060 012d 4889DF   		movq	%rbx, %rdi
 23061 0130 4C89E6   		movq	%r12, %rsi
 23062              	.LEHB123:
 23063 0133 41FFD5   		call	*%r13
 23064              	.LVL1987:
 23065              	.LEHE123:
 23066 0136 4189C5   		movl	%eax, %r13d
 23067 0139 E91EFFFF 		jmp	.L1288
 23067      FF
 23068              	.LVL1988:
 23069              	.L1334:
 23070              	.LBB21776:
 23071              	.LBB21773:
 23072              	.LBB21763:
 23073              	.LBB21764:
 23074              	.LBB21765:
 697:/usr/include/boost/function/function_base.hpp **** {
 698:/usr/include/boost/function/function_base.hpp **** public:
 699:/usr/include/boost/function/function_base.hpp ****   bad_function_call() : std::runtime_error("call to empty boost::function") {}
 23075              		.loc 13 699 0
 23076 013e 488D3500 		leaq	.LC18(%rip), %rsi
 23076      000000
 23077 0145 4C89E7   		movq	%r12, %rdi
 23078              	.LEHB124:
 23079 0148 E8000000 		call	_ZNSt13runtime_errorC2EPKc@PLT
 23079      00
 23080              	.LVL1989:
 23081              	.LEHE124:
 23082 014d 488D2D00 		leaq	16+_ZTVN5boost17bad_function_callE(%rip), %rbp
 23082      000000
 23083              	.LBE21765:
 23084              	.LBE21764:
 23085              	.LBE21763:
 768:/usr/include/boost/function/function_template.hpp **** 
 23086              		.loc 48 768 0
 23087 0154 4C89E7   		movq	%r12, %rdi
GAS LISTING /tmp/ccvmoMuv.s 			page 902


 23088              	.LBB21768:
 23089              	.LBB21767:
 23090              	.LBB21766:
 23091              		.loc 13 699 0
 23092 0157 48896C24 		movq	%rbp, 16(%rsp)
 23092      10
 23093              	.LVL1990:
 23094              	.LEHB125:
 23095              	.LBE21766:
 23096              	.LBE21767:
 23097              	.LBE21768:
 768:/usr/include/boost/function/function_template.hpp **** 
 23098              		.loc 48 768 0
 23099 015c E8000000 		call	_ZN5boost15throw_exceptionINS_17bad_function_callEEEvRKT_
 23099      00
 23100              	.LVL1991:
 23101              	.LEHE125:
 23102              	.L1308:
 23103              	.LBB21769:
 23104              	.LBB21770:
 696:/usr/include/boost/function/function_base.hpp **** {
 23105              		.loc 13 696 0
 23106 0161 4C89E7   		movq	%r12, %rdi
 23107 0164 4889C3   		movq	%rax, %rbx
 23108              	.LVL1992:
 23109 0167 48896C24 		movq	%rbp, 16(%rsp)
 23109      10
 23110 016c E8000000 		call	_ZNSt13runtime_errorD2Ev@PLT
 23110      00
 23111              	.LVL1993:
 23112              	.L1297:
 23113              	.LBE21770:
 23114              	.LBE21769:
 23115              	.LBE21773:
 23116              	.LBE21776:
 23117              	.LBB21777:
 23118              	.LBB21778:
  97:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 23119              		.loc 34 97 0 discriminator 3
 23120 0171 4D85ED   		testq	%r13, %r13
 23121 0174 7408     		je	.L1302
  97:/usr/include/boost/smart_ptr/intrusive_ptr.hpp ****     }
 23122              		.loc 34 97 0 is_stmt 0
 23123 0176 4C89EF   		movq	%r13, %rdi
 23124 0179 E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 23124      00
 23125              	.LVL1994:
 23126              	.L1302:
 23127 017e 4889DF   		movq	%rbx, %rdi
 23128              	.LEHB126:
 23129 0181 E8000000 		call	_Unwind_Resume@PLT
 23129      00
 23130              	.LVL1995:
 23131              	.LEHE126:
 23132              	.L1307:
 23133              	.LBE21778:
 23134              	.LBE21777:
GAS LISTING /tmp/ccvmoMuv.s 			page 903


 23135              	.LBB21779:
 23136              	.LBB21774:
 23137              	.LBB21771:
 23138              	.LBB21772:
 23139 0186 488B7C24 		movq	16(%rsp), %rdi
 23139      10
 23140 018b 4889C3   		movq	%rax, %rbx
 23141              	.LVL1996:
 23142 018e 4885FF   		testq	%rdi, %rdi
 23143 0191 74EB     		je	.L1302
 23144 0193 E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 23144      00
 23145              	.LVL1997:
 23146 0198 EBE4     		jmp	.L1302
 23147              	.LVL1998:
 23148              	.L1306:
 23149 019a 4889C3   		movq	%rax, %rbx
 23150              	.LVL1999:
 23151 019d EBD2     		jmp	.L1297
 23152              	.LVL2000:
 23153              	.L1305:
 23154              	.LBE21772:
 23155              	.LBE21771:
 23156              	.LBE21774:
 23157              	.LBE21779:
 23158              	.LBB21780:
 23159              	.LBB21781:
 23160 019f 488B7C24 		movq	16(%rsp), %rdi
 23160      10
 23161 01a4 4889C3   		movq	%rax, %rbx
 23162              	.LVL2001:
 23163 01a7 4885FF   		testq	%rdi, %rdi
 23164 01aa 74D2     		je	.L1302
 23165 01ac E8000000 		call	_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE@PLT
 23165      00
 23166              	.LVL2002:
 23167 01b1 EBCB     		jmp	.L1302
 23168              	.LBE21781:
 23169              	.LBE21780:
 23170              		.cfi_endproc
 23171              	.LFE8680:
 23172              		.section	.gcc_except_table
 23173              	.LLSDA8680:
 23174 02a4 FF       		.byte	0xff
 23175 02a5 FF       		.byte	0xff
 23176 02a6 01       		.byte	0x1
 23177 02a7 31       		.uleb128 .LLSDACSE8680-.LLSDACSB8680
 23178              	.LLSDACSB8680:
 23179 02a8 2B       		.uleb128 .LEHB118-.LFB8680
 23180 02a9 05       		.uleb128 .LEHE118-.LEHB118
 23181 02aa 00       		.uleb128 0
 23182 02ab 00       		.uleb128 0
 23183 02ac 50       		.uleb128 .LEHB119-.LFB8680
 23184 02ad 05       		.uleb128 .LEHE119-.LEHB119
 23185 02ae 9F03     		.uleb128 .L1305-.LFB8680
 23186 02b0 00       		.uleb128 0
 23187 02b1 8001     		.uleb128 .LEHB120-.LFB8680
GAS LISTING /tmp/ccvmoMuv.s 			page 904


 23188 02b3 05       		.uleb128 .LEHE120-.LEHB120
 23189 02b4 00       		.uleb128 0
 23190 02b5 00       		.uleb128 0
 23191 02b6 9301     		.uleb128 .LEHB121-.LFB8680
 23192 02b8 48       		.uleb128 .LEHE121-.LEHB121
 23193 02b9 9A03     		.uleb128 .L1306-.LFB8680
 23194 02bb 00       		.uleb128 0
 23195 02bc F801     		.uleb128 .LEHB122-.LFB8680
 23196 02be 02       		.uleb128 .LEHE122-.LEHB122
 23197 02bf 8603     		.uleb128 .L1307-.LFB8680
 23198 02c1 00       		.uleb128 0
 23199 02c2 B302     		.uleb128 .LEHB123-.LFB8680
 23200 02c4 03       		.uleb128 .LEHE123-.LEHB123
 23201 02c5 9F03     		.uleb128 .L1305-.LFB8680
 23202 02c7 00       		.uleb128 0
 23203 02c8 C802     		.uleb128 .LEHB124-.LFB8680
 23204 02ca 05       		.uleb128 .LEHE124-.LEHB124
 23205 02cb 9A03     		.uleb128 .L1306-.LFB8680
 23206 02cd 00       		.uleb128 0
 23207 02ce DC02     		.uleb128 .LEHB125-.LFB8680
 23208 02d0 05       		.uleb128 .LEHE125-.LEHB125
 23209 02d1 E102     		.uleb128 .L1308-.LFB8680
 23210 02d3 00       		.uleb128 0
 23211 02d4 8103     		.uleb128 .LEHB126-.LFB8680
 23212 02d6 05       		.uleb128 .LEHE126-.LEHB126
 23213 02d7 00       		.uleb128 0
 23214 02d8 00       		.uleb128 0
 23215              	.LLSDACSE8680:
 23216              		.section	.text._ZN2gr11basic_block12dispatch_msgEN5boost13intrusive_ptrIN3pmt8pmt_baseEEES5_,"axG"
 23218              		.section	.text._ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrIN
 23219              		.align 2
 23220              		.p2align 4,,15
 23221              		.weak	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15erro
 23223              	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error_info_
 23224              	.LFB14595:
1826:/usr/include/c++/6/bits/stl_tree.h ****     _M_get_insert_unique_pos(const key_type& __k)
 23225              		.loc 19 1826 0 is_stmt 1
 23226              		.cfi_startproc
 23227              	.LVL2003:
 23228 0000 4157     		pushq	%r15
 23229              		.cfi_def_cfa_offset 16
 23230              		.cfi_offset 15, -16
 23231 0002 4156     		pushq	%r14
 23232              		.cfi_def_cfa_offset 24
 23233              		.cfi_offset 14, -24
 23234 0004 4155     		pushq	%r13
 23235              		.cfi_def_cfa_offset 32
 23236              		.cfi_offset 13, -32
 23237 0006 4154     		pushq	%r12
 23238              		.cfi_def_cfa_offset 40
 23239              		.cfi_offset 12, -40
 23240 0008 4989F5   		movq	%rsi, %r13
 23241 000b 55       		pushq	%rbp
 23242              		.cfi_def_cfa_offset 48
 23243              		.cfi_offset 6, -48
 23244 000c 53       		pushq	%rbx
 23245              		.cfi_def_cfa_offset 56
GAS LISTING /tmp/ccvmoMuv.s 			page 905


 23246              		.cfi_offset 3, -56
 23247 000d 4989FC   		movq	%rdi, %r12
 23248 0010 4883EC08 		subq	$8, %rsp
 23249              		.cfi_def_cfa_offset 64
 23250 0014 4C8B7710 		movq	16(%rdi), %r14
 23251              	.LVL2004:
1833:/usr/include/c++/6/bits/stl_tree.h **** 	{
 23252              		.loc 19 1833 0
 23253 0018 4D85F6   		testq	%r14, %r14
 23254 001b 0F848D00 		je	.L1353
 23254      0000
 23255 0021 488B06   		movq	(%rsi), %rax
 23256 0024 488B5808 		movq	8(%rax), %rbx
 23257 0028 0FB62B   		movzbl	(%rbx), %ebp
 23258 002b EB0F     		jmp	.L1338
 23259              	.LVL2005:
 23260 002d 0F1F00   		.p2align 4,,10
 23261              		.p2align 3
 23262              	.L1355:
 23263 0030 498B5610 		movq	16(%r14), %rdx
 23264              	.LVL2006:
1833:/usr/include/c++/6/bits/stl_tree.h **** 	{
 23265              		.loc 19 1833 0 is_stmt 0 discriminator 1
 23266 0034 4885D2   		testq	%rdx, %rdx
 23267 0037 742C     		je	.L1339
 23268              	.LVL2007:
 23269              	.L1356:
 23270 0039 4989D6   		movq	%rdx, %r14
 23271              	.LVL2008:
 23272              	.L1338:
 23273 003c 498B4620 		movq	32(%r14), %rax
 23274              	.LBB21816:
 23275              	.LBB21817:
 23276              	.LBB21818:
 23277              	.LBB21819:
 23278              	.LBB21820:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 23279              		.loc 26 117 0 is_stmt 1
 23280 0040 4080FD2A 		cmpb	$42, %bpl
 23281 0044 4C8B7808 		movq	8(%rax), %r15
 23282              	.LVL2009:
 23283 0048 7456     		je	.L1354
 23284              	.LVL2010:
 23285              	.L1340:
 118:/usr/include/c++/6/typeinfo **** 
 23286              		.loc 26 118 0
 23287 004a 4C89FE   		movq	%r15, %rsi
 23288 004d 4889DF   		movq	%rbx, %rdi
 23289 0050 E8000000 		call	strcmp@PLT
 23289      00
 23290              	.LVL2011:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 23291              		.loc 26 117 0
 23292 0055 C1E81F   		shrl	$31, %eax
 23293              	.L1341:
 23294              	.LVL2012:
 23295              	.LBE21820:
GAS LISTING /tmp/ccvmoMuv.s 			page 906


 23296              	.LBE21819:
 23297              	.LBE21818:
 23298              	.LBE21817:
 23299              	.LBE21816:
1837:/usr/include/c++/6/bits/stl_tree.h **** 	}
 23300              		.loc 19 1837 0
 23301 0058 84C0     		testb	%al, %al
 23302 005a 75D4     		jne	.L1355
 23303 005c 498B5618 		movq	24(%r14), %rdx
 23304              	.LVL2013:
1833:/usr/include/c++/6/bits/stl_tree.h **** 	{
 23305              		.loc 19 1833 0 discriminator 2
 23306 0060 4885D2   		testq	%rdx, %rdx
 23307 0063 75D4     		jne	.L1356
 23308              	.LVL2014:
 23309              	.L1339:
1840:/usr/include/c++/6/bits/stl_tree.h **** 	{
 23310              		.loc 19 1840 0
 23311 0065 84C0     		testb	%al, %al
 23312 0067 4C89F5   		movq	%r14, %rbp
 23313 006a 754C     		jne	.L1337
 23314              	.LVL2015:
 23315              	.LBB21825:
 23316              	.LBB21826:
 23317              	.LBB21827:
 23318              	.LBB21828:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 23319              		.loc 26 117 0
 23320 006c 41803F2A 		cmpb	$42, (%r15)
 23321 0070 7473     		je	.L1357
 23322              	.LVL2016:
 23323              	.L1347:
 118:/usr/include/c++/6/typeinfo **** 
 23324              		.loc 26 118 0
 23325 0072 4889DE   		movq	%rbx, %rsi
 23326 0075 4C89FF   		movq	%r15, %rdi
 23327 0078 E8000000 		call	strcmp@PLT
 23327      00
 23328              	.LVL2017:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 23329              		.loc 26 117 0
 23330 007d C1E81F   		shrl	$31, %eax
 23331 0080 89C1     		movl	%eax, %ecx
 23332              	.L1348:
 23333              	.LVL2018:
 23334              	.LBE21828:
 23335              	.LBE21827:
 23336              	.LBE21826:
 23337              	.LBE21825:
1848:/usr/include/c++/6/bits/stl_tree.h ****       return _Res(__j._M_node, 0);
 23338              		.loc 19 1848 0
 23339 0082 31D2     		xorl	%edx, %edx
 23340 0084 4889E8   		movq	%rbp, %rax
 23341 0087 84C9     		testb	%cl, %cl
 23342 0089 480F45C2 		cmovne	%rdx, %rax
 23343 008d 490F45D6 		cmovne	%r14, %rdx
 23344              	.LVL2019:
GAS LISTING /tmp/ccvmoMuv.s 			page 907


 23345              	.L1346:
1850:/usr/include/c++/6/bits/stl_tree.h **** 
 23346              		.loc 19 1850 0
 23347 0091 4883C408 		addq	$8, %rsp
 23348              		.cfi_remember_state
 23349              		.cfi_def_cfa_offset 56
 23350 0095 5B       		popq	%rbx
 23351              		.cfi_def_cfa_offset 48
 23352 0096 5D       		popq	%rbp
 23353              		.cfi_def_cfa_offset 40
 23354 0097 415C     		popq	%r12
 23355              		.cfi_def_cfa_offset 32
 23356              	.LVL2020:
 23357 0099 415D     		popq	%r13
 23358              		.cfi_def_cfa_offset 24
 23359              	.LVL2021:
 23360 009b 415E     		popq	%r14
 23361              		.cfi_def_cfa_offset 16
 23362 009d 415F     		popq	%r15
 23363              		.cfi_def_cfa_offset 8
 23364 009f C3       		ret
 23365              	.LVL2022:
 23366              		.p2align 4,,10
 23367              		.p2align 3
 23368              	.L1354:
 23369              		.cfi_restore_state
 23370              	.LBB21832:
 23371              	.LBB21824:
 23372              	.LBB21823:
 23373              	.LBB21822:
 23374              	.LBB21821:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 23375              		.loc 26 117 0
 23376 00a0 4C39FB   		cmpq	%r15, %rbx
 23377 00a3 0F92C0   		setb	%al
 23378              	.LVL2023:
 116:/usr/include/c++/6/typeinfo **** 	? __name < __arg.__name
 23379              		.loc 26 116 0
 23380 00a6 41803F2A 		cmpb	$42, (%r15)
 23381 00aa 759E     		jne	.L1340
 23382 00ac EBAA     		jmp	.L1341
 23383              	.LVL2024:
 23384              	.L1353:
 23385              	.LBE21821:
 23386              	.LBE21822:
 23387              	.LBE21823:
 23388              	.LBE21824:
 23389              	.LBE21832:
 23390              	.LBB21833:
 23391              	.LBB21834:
 677:/usr/include/c++/6/bits/stl_tree.h **** 
 23392              		.loc 19 677 0
 23393 00ae 4C8D7708 		leaq	8(%rdi), %r14
 23394              	.LVL2025:
 23395              		.p2align 4,,10
 23396 00b2 660F1F44 		.p2align 3
 23396      0000
GAS LISTING /tmp/ccvmoMuv.s 			page 908


 23397              	.L1337:
 23398              	.LBE21834:
 23399              	.LBE21833:
1843:/usr/include/c++/6/bits/stl_tree.h **** 	  else
 23400              		.loc 19 1843 0
 23401 00b8 31C0     		xorl	%eax, %eax
1842:/usr/include/c++/6/bits/stl_tree.h **** 	    return _Res(__x, __y);
 23402              		.loc 19 1842 0
 23403 00ba 4D3B7424 		cmpq	24(%r12), %r14
 23403      18
1843:/usr/include/c++/6/bits/stl_tree.h **** 	  else
 23404              		.loc 19 1843 0
 23405 00bf 4C89F2   		movq	%r14, %rdx
1842:/usr/include/c++/6/bits/stl_tree.h **** 	    return _Res(__x, __y);
 23406              		.loc 19 1842 0
 23407 00c2 74CD     		je	.L1346
 23408              	.LVL2026:
 23409              	.LBB21835:
 23410              	.LBB21836:
 224:/usr/include/c++/6/bits/stl_tree.h **** 	return *this;
 23411              		.loc 19 224 0
 23412 00c4 4C89F7   		movq	%r14, %rdi
 23413 00c7 E8000000 		call	_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@PLT
 23413      00
 23414              	.LVL2027:
 23415 00cc 4889C5   		movq	%rax, %rbp
 23416              	.LVL2028:
 23417 00cf 498B4500 		movq	0(%r13), %rax
 23418              	.LVL2029:
 23419 00d3 488B5808 		movq	8(%rax), %rbx
 23420 00d7 488B4520 		movq	32(%rbp), %rax
 23421 00db 4C8B7808 		movq	8(%rax), %r15
 23422              	.LVL2030:
 23423              	.LBE21836:
 23424              	.LBE21835:
 23425              	.LBB21837:
 23426              	.LBB21831:
 23427              	.LBB21830:
 23428              	.LBB21829:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 23429              		.loc 26 117 0
 23430 00df 41803F2A 		cmpb	$42, (%r15)
 23431 00e3 758D     		jne	.L1347
 23432              	.LVL2031:
 23433              	.L1357:
 23434 00e5 4C39FB   		cmpq	%r15, %rbx
 23435 00e8 0F97C1   		seta	%cl
 116:/usr/include/c++/6/typeinfo **** 	? __name < __arg.__name
 23436              		.loc 26 116 0
 23437 00eb 803B2A   		cmpb	$42, (%rbx)
 23438 00ee 7582     		jne	.L1347
 23439 00f0 EB90     		jmp	.L1348
 23440              	.LBE21829:
 23441              	.LBE21830:
 23442              	.LBE21831:
 23443              	.LBE21837:
 23444              		.cfi_endproc
GAS LISTING /tmp/ccvmoMuv.s 			page 909


 23445              	.LFE14595:
 23447              		.section	.text._ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrIN
 23448              		.align 2
 23449              		.p2align 4,,15
 23450              		.weak	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15erro
 23452              	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error_info_
 23453              	.LFB13973:
1928:/usr/include/c++/6/bits/stl_tree.h ****     _M_get_insert_hint_unique_pos(const_iterator __position,
 23454              		.loc 19 1928 0
 23455              		.cfi_startproc
 23456              	.LVL2032:
 23457 0000 4157     		pushq	%r15
 23458              		.cfi_def_cfa_offset 16
 23459              		.cfi_offset 15, -16
 23460              	.LBB21914:
 23461              	.LBB21915:
 23462              	.LBB21916:
 677:/usr/include/c++/6/bits/stl_tree.h **** 
 23463              		.loc 19 677 0
 23464 0002 488D4708 		leaq	8(%rdi), %rax
 23465              	.LBE21916:
 23466              	.LBE21915:
 23467              	.LBE21914:
1928:/usr/include/c++/6/bits/stl_tree.h ****     _M_get_insert_hint_unique_pos(const_iterator __position,
 23468              		.loc 19 1928 0
 23469 0006 4156     		pushq	%r14
 23470              		.cfi_def_cfa_offset 24
 23471              		.cfi_offset 14, -24
 23472 0008 4155     		pushq	%r13
 23473              		.cfi_def_cfa_offset 32
 23474              		.cfi_offset 13, -32
 23475 000a 4154     		pushq	%r12
 23476              		.cfi_def_cfa_offset 40
 23477              		.cfi_offset 12, -40
 23478 000c 4989FD   		movq	%rdi, %r13
 23479              	.LVL2033:
 23480 000f 55       		pushq	%rbp
 23481              		.cfi_def_cfa_offset 48
 23482              		.cfi_offset 6, -48
 23483 0010 53       		pushq	%rbx
 23484              		.cfi_def_cfa_offset 56
 23485              		.cfi_offset 3, -56
 23486 0011 4989D6   		movq	%rdx, %r14
 23487 0014 4883EC08 		subq	$8, %rsp
 23488              		.cfi_def_cfa_offset 64
 23489              	.LBB21979:
1936:/usr/include/c++/6/bits/stl_tree.h **** 	{
 23490              		.loc 19 1936 0
 23491 0018 4839C6   		cmpq	%rax, %rsi
 23492 001b 0F843701 		je	.L1398
 23492      0000
 23493 0021 488B02   		movq	(%rdx), %rax
 23494 0024 4889F3   		movq	%rsi, %rbx
 23495              	.LVL2034:
 23496 0027 488B6808 		movq	8(%rax), %rbp
 23497 002b 488B4620 		movq	32(%rsi), %rax
 23498              	.LBB21917:
GAS LISTING /tmp/ccvmoMuv.s 			page 910


 23499              	.LBB21918:
 23500              	.LBB21919:
 23501              	.LBB21920:
 23502              	.LBB21921:
 23503              	.LBB21922:
 116:/usr/include/c++/6/typeinfo **** 	? __name < __arg.__name
 23504              		.loc 26 116 0
 23505 002f 440FB67D 		movzbl	0(%rbp), %r15d
 23505      00
 23506 0034 4C8B6008 		movq	8(%rax), %r12
 23507              	.LVL2035:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 23508              		.loc 26 117 0
 23509 0038 4180FF2A 		cmpb	$42, %r15b
 23510 003c 0F84EE00 		je	.L1399
 23510      0000
 23511              	.L1364:
 118:/usr/include/c++/6/typeinfo **** 
 23512              		.loc 26 118 0
 23513 0042 4C89E6   		movq	%r12, %rsi
 23514              	.LVL2036:
 23515 0045 4889EF   		movq	%rbp, %rdi
 23516              	.LVL2037:
 23517 0048 E8000000 		call	strcmp@PLT
 23517      00
 23518              	.LVL2038:
 23519              	.LBE21922:
 23520              	.LBE21921:
 23521              	.LBE21920:
 23522              	.LBE21919:
 23523              	.LBE21918:
1944:/usr/include/c++/6/bits/stl_tree.h **** 	{
 23524              		.loc 19 1944 0
 23525 004d 85C0     		testl	%eax, %eax
 23526 004f 7967     		jns	.L1400
 23527              	.LVL2039:
 23528              	.L1377:
 23529              	.LBB21927:
1948:/usr/include/c++/6/bits/stl_tree.h **** 	    return _Res(_M_leftmost(), _M_leftmost());
 23530              		.loc 19 1948 0
 23531 0051 49395D18 		cmpq	%rbx, 24(%r13)
1949:/usr/include/c++/6/bits/stl_tree.h **** 	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 23532              		.loc 19 1949 0
 23533 0055 4889D8   		movq	%rbx, %rax
 23534 0058 4889DA   		movq	%rbx, %rdx
 23535              	.LVL2040:
1948:/usr/include/c++/6/bits/stl_tree.h **** 	    return _Res(_M_leftmost(), _M_leftmost());
 23536              		.loc 19 1948 0
 23537 005b 7449     		je	.L1389
 23538              	.LVL2041:
 23539              	.LBB21928:
 23540              	.LBB21929:
 224:/usr/include/c++/6/bits/stl_tree.h **** 	return *this;
 23541              		.loc 19 224 0
 23542 005d 4889DF   		movq	%rbx, %rdi
 23543 0060 E8000000 		call	_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@PLT
 23543      00
GAS LISTING /tmp/ccvmoMuv.s 			page 911


 23544              	.LVL2042:
 23545 0065 4989C4   		movq	%rax, %r12
 23546              	.LVL2043:
 23547 0068 488B4020 		movq	32(%rax), %rax
 23548              	.LVL2044:
 23549 006c 488B7808 		movq	8(%rax), %rdi
 23550              	.LVL2045:
 23551              	.LBE21929:
 23552              	.LBE21928:
 23553              	.LBB21930:
 23554              	.LBB21931:
 23555              	.LBB21932:
 23556              	.LBB21933:
 23557              	.LBB21934:
 116:/usr/include/c++/6/typeinfo **** 	? __name < __arg.__name
 23558              		.loc 26 116 0
 23559 0070 803F2A   		cmpb	$42, (%rdi)
 23560 0073 750C     		jne	.L1368
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 23561              		.loc 26 117 0
 23562 0075 4839FD   		cmpq	%rdi, %rbp
 23563 0078 0F97C0   		seta	%al
 23564              	.LVL2046:
 116:/usr/include/c++/6/typeinfo **** 	? __name < __arg.__name
 23565              		.loc 26 116 0
 23566 007b 4180FF2A 		cmpb	$42, %r15b
 23567 007f 740B     		je	.L1369
 23568              	.L1368:
 118:/usr/include/c++/6/typeinfo **** 
 23569              		.loc 26 118 0
 23570 0081 4889EE   		movq	%rbp, %rsi
 23571 0084 E8000000 		call	strcmp@PLT
 23571      00
 23572              	.LVL2047:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 23573              		.loc 26 117 0
 23574 0089 C1E81F   		shrl	$31, %eax
 23575              	.L1369:
 23576              	.LVL2048:
 23577              	.LBE21934:
 23578              	.LBE21933:
 23579              	.LBE21932:
 23580              	.LBE21931:
 23581              	.LBE21930:
1950:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 23582              		.loc 19 1950 0
 23583 008c 84C0     		testb	%al, %al
 23584 008e 0F84EF00 		je	.L1360
 23584      0000
 23585              	.LVL2049:
1952:/usr/include/c++/6/bits/stl_tree.h **** 		return _Res(0, __before._M_node);
 23586              		.loc 19 1952 0
 23587 0094 49837C24 		cmpq	$0, 24(%r12)
 23587      1800
1955:/usr/include/c++/6/bits/stl_tree.h **** 	    }
 23588              		.loc 19 1955 0
 23589 009a 4889D8   		movq	%rbx, %rax
GAS LISTING /tmp/ccvmoMuv.s 			page 912


 23590 009d 4889DA   		movq	%rbx, %rdx
 23591              	.LVL2050:
1952:/usr/include/c++/6/bits/stl_tree.h **** 		return _Res(0, __before._M_node);
 23592              		.loc 19 1952 0
 23593 00a0 0F842A01 		je	.L1401
 23593      0000
 23594              	.LVL2051:
 23595              	.L1389:
 23596              	.LBE21927:
 23597              	.LBE21917:
 23598              	.LBE21979:
1979:/usr/include/c++/6/bits/stl_tree.h **** 
 23599              		.loc 19 1979 0
 23600 00a6 4883C408 		addq	$8, %rsp
 23601              		.cfi_remember_state
 23602              		.cfi_def_cfa_offset 56
 23603 00aa 5B       		popq	%rbx
 23604              		.cfi_def_cfa_offset 48
 23605              	.LVL2052:
 23606 00ab 5D       		popq	%rbp
 23607              		.cfi_def_cfa_offset 40
 23608 00ac 415C     		popq	%r12
 23609              		.cfi_def_cfa_offset 32
 23610 00ae 415D     		popq	%r13
 23611              		.cfi_def_cfa_offset 24
 23612              	.LVL2053:
 23613 00b0 415E     		popq	%r14
 23614              		.cfi_def_cfa_offset 16
 23615              	.LVL2054:
 23616 00b2 415F     		popq	%r15
 23617              		.cfi_def_cfa_offset 8
 23618 00b4 C3       		ret
 23619              	.LVL2055:
 23620              		.p2align 4,,10
 23621 00b5 0F1F00   		.p2align 3
 23622              	.L1400:
 23623              		.cfi_restore_state
 23624              	.LBB21980:
 23625              	.LBB21964:
 23626              	.LBB21935:
 23627              	.LBB21936:
 23628              	.LBB21937:
 23629              	.LBB21938:
 23630              	.LBB21939:
 116:/usr/include/c++/6/typeinfo **** 	? __name < __arg.__name
 23631              		.loc 26 116 0
 23632 00b8 4180FF2A 		cmpb	$42, %r15b
 118:/usr/include/c++/6/typeinfo **** 
 23633              		.loc 26 118 0
 23634 00bc 4889EE   		movq	%rbp, %rsi
 23635 00bf 4C89E7   		movq	%r12, %rdi
 116:/usr/include/c++/6/typeinfo **** 	? __name < __arg.__name
 23636              		.loc 26 116 0
 23637 00c2 410F94C7 		sete	%r15b
 118:/usr/include/c++/6/typeinfo **** 
 23638              		.loc 26 118 0
 23639 00c6 E8000000 		call	strcmp@PLT
GAS LISTING /tmp/ccvmoMuv.s 			page 913


 23639      00
 23640              	.LVL2056:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 23641              		.loc 26 117 0
 23642 00cb C1E81F   		shrl	$31, %eax
 23643              	.L1376:
 23644              	.LVL2057:
 23645              	.LBE21939:
 23646              	.LBE21938:
 23647              	.LBE21937:
 23648              	.LBE21936:
1960:/usr/include/c++/6/bits/stl_tree.h **** 	{
 23649              		.loc 19 1960 0
 23650 00ce 84C0     		testb	%al, %al
 23651 00d0 0F84CA00 		je	.L1371
 23651      0000
 23652              	.LVL2058:
 23653              	.LBB21943:
1964:/usr/include/c++/6/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
 23654              		.loc 19 1964 0
 23655 00d6 49395D20 		cmpq	%rbx, 32(%r13)
 23656 00da 7438     		je	.L1363
 23657              	.LVL2059:
 23658              	.LBB21944:
 23659              	.LBB21945:
 209:/usr/include/c++/6/bits/stl_tree.h **** 	return *this;
 23660              		.loc 19 209 0
 23661 00dc 4889DF   		movq	%rbx, %rdi
 23662 00df E8000000 		call	_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@PLT
 23662      00
 23663              	.LVL2060:
 23664 00e4 4989C4   		movq	%rax, %r12
 23665              	.LVL2061:
 23666 00e7 488B4020 		movq	32(%rax), %rax
 23667              	.LVL2062:
 23668              	.LBE21945:
 23669              	.LBE21944:
 23670              	.LBB21946:
 23671              	.LBB21947:
 23672              	.LBB21948:
 23673              	.LBB21949:
 23674              	.LBB21950:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 23675              		.loc 26 117 0
 23676 00eb 4584FF   		testb	%r15b, %r15b
 23677 00ee 488B7008 		movq	8(%rax), %rsi
 23678              	.LVL2063:
 23679 00f2 0F85C000 		jne	.L1402
 23679      0000
 23680              	.LVL2064:
 23681              	.L1373:
 118:/usr/include/c++/6/typeinfo **** 
 23682              		.loc 26 118 0
 23683 00f8 4889EF   		movq	%rbp, %rdi
 23684 00fb E8000000 		call	strcmp@PLT
 23684      00
 23685              	.LVL2065:
GAS LISTING /tmp/ccvmoMuv.s 			page 914


 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 23686              		.loc 26 117 0
 23687 0100 C1E81F   		shrl	$31, %eax
 23688              	.L1374:
 23689              	.LVL2066:
 23690              	.LBE21950:
 23691              	.LBE21949:
 23692              	.LBE21948:
 23693              	.LBE21947:
 23694              	.LBE21946:
1966:/usr/include/c++/6/bits/stl_tree.h **** 	    {
 23695              		.loc 19 1966 0
 23696 0103 84C0     		testb	%al, %al
 23697 0105 747C     		je	.L1360
 23698              	.LVL2067:
1968:/usr/include/c++/6/bits/stl_tree.h **** 		return _Res(0, __pos._M_node);
 23699              		.loc 19 1968 0
 23700 0107 48837B18 		cmpq	$0, 24(%rbx)
 23700      00
1971:/usr/include/c++/6/bits/stl_tree.h **** 	    }
 23701              		.loc 19 1971 0
 23702 010c 4C89E0   		movq	%r12, %rax
 23703 010f 4C89E2   		movq	%r12, %rdx
1968:/usr/include/c++/6/bits/stl_tree.h **** 		return _Res(0, __pos._M_node);
 23704              		.loc 19 1968 0
 23705 0112 7592     		jne	.L1389
 23706              	.LVL2068:
 23707              	.L1363:
 23708              	.LBE21943:
 23709              	.LBE21935:
 23710              	.LBE21964:
 23711              	.LBE21980:
1979:/usr/include/c++/6/bits/stl_tree.h **** 
 23712              		.loc 19 1979 0
 23713 0114 4883C408 		addq	$8, %rsp
 23714              		.cfi_remember_state
 23715              		.cfi_def_cfa_offset 56
 23716              	.LBB21981:
1940:/usr/include/c++/6/bits/stl_tree.h **** 	  else
 23717              		.loc 19 1940 0
 23718 0118 4889DA   		movq	%rbx, %rdx
 23719 011b 31C0     		xorl	%eax, %eax
 23720              	.LBE21981:
1979:/usr/include/c++/6/bits/stl_tree.h **** 
 23721              		.loc 19 1979 0
 23722 011d 5B       		popq	%rbx
 23723              		.cfi_def_cfa_offset 48
 23724              	.LVL2069:
 23725 011e 5D       		popq	%rbp
 23726              		.cfi_def_cfa_offset 40
 23727 011f 415C     		popq	%r12
 23728              		.cfi_def_cfa_offset 32
 23729 0121 415D     		popq	%r13
 23730              		.cfi_def_cfa_offset 24
 23731              	.LVL2070:
 23732 0123 415E     		popq	%r14
 23733              		.cfi_def_cfa_offset 16
GAS LISTING /tmp/ccvmoMuv.s 			page 915


 23734              	.LVL2071:
 23735 0125 415F     		popq	%r15
 23736              		.cfi_def_cfa_offset 8
 23737 0127 C3       		ret
 23738              	.LVL2072:
 23739 0128 0F1F8400 		.p2align 4,,10
 23739      00000000 
 23740              		.p2align 3
 23741              	.L1399:
 23742              		.cfi_restore_state
 23743              	.LBB21982:
 23744              	.LBB21965:
 23745              	.LBB21958:
 23746              	.LBB21926:
 23747              	.LBB21925:
 23748              	.LBB21924:
 23749              	.LBB21923:
 116:/usr/include/c++/6/typeinfo **** 	? __name < __arg.__name
 23750              		.loc 26 116 0
 23751 0130 41803C24 		cmpb	$42, (%r12)
 23751      2A
 23752 0135 0F8507FF 		jne	.L1364
 23752      FFFF
 23753              	.LVL2073:
 23754              	.LBE21923:
 23755              	.LBE21924:
 23756              	.LBE21925:
 23757              	.LBE21926:
 23758              	.LBE21958:
1944:/usr/include/c++/6/bits/stl_tree.h **** 	{
 23759              		.loc 19 1944 0
 23760 013b 4C39E5   		cmpq	%r12, %rbp
 23761 013e 0F820DFF 		jb	.L1377
 23761      FFFF
 23762              	.LVL2074:
 23763              	.LBB21959:
 23764              	.LBB21956:
 23765              	.LBB21942:
 23766              	.LBB21941:
 23767              	.LBB21940:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 23768              		.loc 26 117 0
 23769 0144 0F97C0   		seta	%al
 23770              	.LVL2075:
 23771 0147 41BF0100 		movl	$1, %r15d
 23771      0000
 23772 014d E97CFFFF 		jmp	.L1376
 23772      FF
 23773              	.LVL2076:
 23774              		.p2align 4,,10
 23775 0152 660F1F44 		.p2align 3
 23775      0000
 23776              	.L1398:
 23777              	.LBE21940:
 23778              	.LBE21941:
 23779              	.LBE21942:
 23780              	.LBE21956:
GAS LISTING /tmp/ccvmoMuv.s 			page 916


 23781              	.LBE21959:
 23782              	.LBE21965:
1939:/usr/include/c++/6/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
 23783              		.loc 19 1939 0
 23784 0158 48837F28 		cmpq	$0, 40(%rdi)
 23784      00
 23785 015d 7424     		je	.L1360
 23786 015f 488B5F20 		movq	32(%rdi), %rbx
 23787              	.LVL2077:
 23788 0163 488B4320 		movq	32(%rbx), %rax
 23789 0167 488B7808 		movq	8(%rax), %rdi
 23790              	.LVL2078:
 23791 016b 488B02   		movq	(%rdx), %rax
 23792              	.LBB21966:
 23793              	.LBB21967:
 23794              	.LBB21968:
 23795              	.LBB21969:
 23796              	.LBB21970:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 23797              		.loc 26 117 0
 23798 016e 803F2A   		cmpb	$42, (%rdi)
 23799 0171 488B7008 		movq	8(%rax), %rsi
 23800              	.LVL2079:
 23801 0175 7469     		je	.L1403
 23802              	.LVL2080:
 23803              	.L1361:
 118:/usr/include/c++/6/typeinfo **** 
 23804              		.loc 26 118 0
 23805 0177 E8000000 		call	strcmp@PLT
 23805      00
 23806              	.LVL2081:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 23807              		.loc 26 117 0
 23808 017c C1E81F   		shrl	$31, %eax
 23809              	.L1362:
 23810              	.LVL2082:
 23811              	.LBE21970:
 23812              	.LBE21969:
 23813              	.LBE21968:
 23814              	.LBE21967:
 23815              	.LBE21966:
1939:/usr/include/c++/6/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
 23816              		.loc 19 1939 0
 23817 017f 84C0     		testb	%al, %al
 23818 0181 7591     		jne	.L1363
 23819              	.LVL2083:
 23820              	.L1360:
 23821              	.LBB21975:
 23822              	.LBB21960:
1958:/usr/include/c++/6/bits/stl_tree.h **** 	}
 23823              		.loc 19 1958 0
 23824 0183 4C89F6   		movq	%r14, %rsi
 23825              	.LVL2084:
 23826 0186 4C89EF   		movq	%r13, %rdi
 23827 0189 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 23827      00
 23828              	.LVL2085:
GAS LISTING /tmp/ccvmoMuv.s 			page 917


 23829              	.LBE21960:
 23830              	.LBE21975:
 23831              	.LBE21982:
1979:/usr/include/c++/6/bits/stl_tree.h **** 
 23832              		.loc 19 1979 0
 23833 018e 4883C408 		addq	$8, %rsp
 23834              		.cfi_remember_state
 23835              		.cfi_def_cfa_offset 56
 23836 0192 5B       		popq	%rbx
 23837              		.cfi_def_cfa_offset 48
 23838              	.LVL2086:
 23839 0193 5D       		popq	%rbp
 23840              		.cfi_def_cfa_offset 40
 23841 0194 415C     		popq	%r12
 23842              		.cfi_def_cfa_offset 32
 23843 0196 415D     		popq	%r13
 23844              		.cfi_def_cfa_offset 24
 23845              	.LVL2087:
 23846 0198 415E     		popq	%r14
 23847              		.cfi_def_cfa_offset 16
 23848              	.LVL2088:
 23849 019a 415F     		popq	%r15
 23850              		.cfi_def_cfa_offset 8
 23851 019c C3       		ret
 23852              	.LVL2089:
 23853 019d 0F1F00   		.p2align 4,,10
 23854              		.p2align 3
 23855              	.L1371:
 23856              		.cfi_restore_state
 23857 01a0 4883C408 		addq	$8, %rsp
 23858              		.cfi_remember_state
 23859              		.cfi_def_cfa_offset 56
 23860              	.LBB21983:
 23861              	.LBB21976:
 23862              	.LBB21961:
1978:/usr/include/c++/6/bits/stl_tree.h ****     }
 23863              		.loc 19 1978 0
 23864 01a4 4889D8   		movq	%rbx, %rax
 23865 01a7 31D2     		xorl	%edx, %edx
 23866              	.LBE21961:
 23867              	.LBE21976:
 23868              	.LBE21983:
1979:/usr/include/c++/6/bits/stl_tree.h **** 
 23869              		.loc 19 1979 0
 23870 01a9 5B       		popq	%rbx
 23871              		.cfi_def_cfa_offset 48
 23872              	.LVL2090:
 23873 01aa 5D       		popq	%rbp
 23874              		.cfi_def_cfa_offset 40
 23875 01ab 415C     		popq	%r12
 23876              		.cfi_def_cfa_offset 32
 23877 01ad 415D     		popq	%r13
 23878              		.cfi_def_cfa_offset 24
 23879              	.LVL2091:
 23880 01af 415E     		popq	%r14
 23881              		.cfi_def_cfa_offset 16
 23882              	.LVL2092:
GAS LISTING /tmp/ccvmoMuv.s 			page 918


 23883 01b1 415F     		popq	%r15
 23884              		.cfi_def_cfa_offset 8
 23885 01b3 C3       		ret
 23886              	.LVL2093:
 23887              		.p2align 4,,10
 23888 01b4 0F1F4000 		.p2align 3
 23889              	.L1402:
 23890              		.cfi_restore_state
 23891              	.LBB21984:
 23892              	.LBB21977:
 23893              	.LBB21962:
 23894              	.LBB21957:
 23895              	.LBB21955:
 23896              	.LBB21954:
 23897              	.LBB21953:
 23898              	.LBB21952:
 23899              	.LBB21951:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 23900              		.loc 26 117 0
 23901 01b8 4839F5   		cmpq	%rsi, %rbp
 23902 01bb 0F92C0   		setb	%al
 23903              	.LVL2094:
 116:/usr/include/c++/6/typeinfo **** 	? __name < __arg.__name
 23904              		.loc 26 116 0
 23905 01be 803E2A   		cmpb	$42, (%rsi)
 23906 01c1 0F8531FF 		jne	.L1373
 23906      FFFF
 23907 01c7 E937FFFF 		jmp	.L1374
 23907      FF
 23908              	.LVL2095:
 23909 01cc 0F1F4000 		.p2align 4,,10
 23910              		.p2align 3
 23911              	.L1401:
 23912              	.LBE21951:
 23913              	.LBE21952:
 23914              	.LBE21953:
 23915              	.LBE21954:
 23916              	.LBE21955:
 23917              	.LBE21957:
 23918              	.LBE21962:
 23919              	.LBB21963:
1953:/usr/include/c++/6/bits/stl_tree.h **** 	      else
 23920              		.loc 19 1953 0
 23921 01d0 31C0     		xorl	%eax, %eax
 23922 01d2 4C89E2   		movq	%r12, %rdx
 23923 01d5 E9CCFEFF 		jmp	.L1389
 23923      FF
 23924              	.LVL2096:
 23925 01da 660F1F44 		.p2align 4,,10
 23925      0000
 23926              		.p2align 3
 23927              	.L1403:
 23928              	.LBE21963:
 23929              	.LBE21977:
 23930              	.LBB21978:
 23931              	.LBB21974:
 23932              	.LBB21973:
GAS LISTING /tmp/ccvmoMuv.s 			page 919


 23933              	.LBB21972:
 23934              	.LBB21971:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 23935              		.loc 26 117 0
 23936 01e0 4839F7   		cmpq	%rsi, %rdi
 23937 01e3 0F92C0   		setb	%al
 23938              	.LVL2097:
 116:/usr/include/c++/6/typeinfo **** 	? __name < __arg.__name
 23939              		.loc 26 116 0
 23940 01e6 803E2A   		cmpb	$42, (%rsi)
 23941 01e9 758C     		jne	.L1361
 23942 01eb EB92     		jmp	.L1362
 23943              	.LBE21971:
 23944              	.LBE21972:
 23945              	.LBE21973:
 23946              	.LBE21974:
 23947              	.LBE21978:
 23948              	.LBE21984:
 23949              		.cfi_endproc
 23950              	.LFE13973:
 23952              		.section	.rodata._ZN5boost16exception_detail25error_info_container_impl3setERKNS_10shared_ptrINS0_
 23953              	.LC19:
 23954 0000 7800     		.string	"x"
 23955              		.section	.text._ZN5boost16exception_detail25error_info_container_impl3setERKNS_10shared_ptrINS0_15
 23956              		.align 2
 23957              		.p2align 4,,15
 23958              		.weak	_ZN5boost16exception_detail25error_info_container_impl3setERKNS_10shared_ptrINS0_15error_inf
 23960              	_ZN5boost16exception_detail25error_info_container_impl3setERKNS_10shared_ptrINS0_15error_info_baseE
 23961              	.LFB9846:
 108:/usr/include/boost/exception/info.hpp ****                 {
 23962              		.loc 3 108 0
 23963              		.cfi_startproc
 23964              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 23965              		.cfi_lsda 0x1b,.LLSDA9846
 23966              	.LVL2098:
 23967 0000 4157     		pushq	%r15
 23968              		.cfi_def_cfa_offset 16
 23969              		.cfi_offset 15, -16
 23970 0002 4156     		pushq	%r14
 23971              		.cfi_def_cfa_offset 24
 23972              		.cfi_offset 14, -24
 23973 0004 4155     		pushq	%r13
 23974              		.cfi_def_cfa_offset 32
 23975              		.cfi_offset 13, -32
 23976 0006 4154     		pushq	%r12
 23977              		.cfi_def_cfa_offset 40
 23978              		.cfi_offset 12, -40
 23979 0008 55       		pushq	%rbp
 23980              		.cfi_def_cfa_offset 48
 23981              		.cfi_offset 6, -48
 23982 0009 53       		pushq	%rbx
 23983              		.cfi_def_cfa_offset 56
 23984              		.cfi_offset 3, -56
 23985 000a 4883EC28 		subq	$40, %rsp
 23986              		.cfi_def_cfa_offset 96
 23987 000e 4C8B36   		movq	(%rsi), %r14
 23988              	.LVL2099:
GAS LISTING /tmp/ccvmoMuv.s 			page 920


 108:/usr/include/boost/exception/info.hpp ****                 {
 23989              		.loc 3 108 0
 23990 0011 48897424 		movq	%rsi, 8(%rsp)
 23990      08
 23991              	.LVL2100:
 110:/usr/include/boost/exception/info.hpp ****                 info_[typeid_] = x;
 23992              		.loc 3 110 0
 23993 0016 4D85F6   		testq	%r14, %r14
 23994 0019 0F849502 		je	.L1440
 23994      0000
 23995 001f 4989D7   		movq	%rdx, %r15
 23996              	.LVL2101:
 23997 0022 488B5718 		movq	24(%rdi), %rdx
 23998              	.LVL2102:
 23999              	.LBB22149:
 24000              	.LBB22150:
 24001              	.LBB22151:
 24002              	.LBB22152:
 24003              	.LBB22153:
 24004              	.LBB22154:
 24005              	.LBB22155:
 677:/usr/include/c++/6/bits/stl_tree.h **** 
 24006              		.loc 19 677 0
 24007 0026 488D4710 		leaq	16(%rdi), %rax
 24008 002a 4989FC   		movq	%rdi, %r12
 24009 002d 4889C5   		movq	%rax, %rbp
 24010 0030 48894424 		movq	%rax, 16(%rsp)
 24010      10
 24011              	.LVL2103:
 24012              	.LBE22155:
 24013              	.LBE22154:
 24014              	.LBB22157:
 24015              	.LBB22158:
1653:/usr/include/c++/6/bits/stl_tree.h **** 	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 24016              		.loc 19 1653 0
 24017 0035 4885D2   		testq	%rdx, %rdx
 24018 0038 0F84E600 		je	.L1431
 24018      0000
 24019 003e 498B07   		movq	(%r15), %rax
 24020              	.LVL2104:
 24021 0041 4989D5   		movq	%rdx, %r13
 24022 0044 488B5808 		movq	8(%rax), %rbx
 24023 0048 EB12     		jmp	.L1407
 24024              	.LVL2105:
 24025 004a 660F1F44 		.p2align 4,,10
 24025      0000
 24026              		.p2align 3
 24027              	.L1442:
1654:/usr/include/c++/6/bits/stl_tree.h **** 	  __y = __x, __x = _S_left(__x);
 24028              		.loc 19 1654 0
 24029 0050 4C89ED   		movq	%r13, %rbp
 24030              	.LVL2106:
1655:/usr/include/c++/6/bits/stl_tree.h **** 	else
 24031              		.loc 19 1655 0
 24032 0053 4D8B6D10 		movq	16(%r13), %r13
 24033              	.LVL2107:
1653:/usr/include/c++/6/bits/stl_tree.h **** 	if (!_M_impl._M_key_compare(_S_key(__x), __k))
GAS LISTING /tmp/ccvmoMuv.s 			page 921


 24034              		.loc 19 1653 0
 24035 0057 4D85ED   		testq	%r13, %r13
 24036 005a 7429     		je	.L1408
 24037              	.LVL2108:
 24038              	.L1407:
 24039 005c 498B4520 		movq	32(%r13), %rax
 24040 0060 488B7808 		movq	8(%rax), %rdi
 24041              	.LVL2109:
 24042              	.LBB22159:
 24043              	.LBB22160:
 24044              	.LBB22161:
 24045              	.LBB22162:
 24046              	.LBB22163:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 24047              		.loc 26 117 0
 24048 0064 803F2A   		cmpb	$42, (%rdi)
 24049 0067 0F84A300 		je	.L1441
 24049      0000
 24050              	.L1409:
 118:/usr/include/c++/6/typeinfo **** 
 24051              		.loc 26 118 0
 24052 006d 4889DE   		movq	%rbx, %rsi
 24053 0070 E8000000 		call	strcmp@PLT
 24053      00
 24054              	.LVL2110:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 24055              		.loc 26 117 0
 24056 0075 C1E81F   		shrl	$31, %eax
 24057              	.L1410:
 24058              	.LVL2111:
 24059              	.LBE22163:
 24060              	.LBE22162:
 24061              	.LBE22161:
 24062              	.LBE22160:
 24063              	.LBE22159:
1654:/usr/include/c++/6/bits/stl_tree.h **** 	  __y = __x, __x = _S_left(__x);
 24064              		.loc 19 1654 0
 24065 0078 84C0     		testb	%al, %al
 24066 007a 74D4     		je	.L1442
 24067 007c 4D8B6D18 		movq	24(%r13), %r13
 24068              	.LVL2112:
1653:/usr/include/c++/6/bits/stl_tree.h **** 	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 24069              		.loc 19 1653 0
 24070 0080 4D85ED   		testq	%r13, %r13
 24071 0083 75D7     		jne	.L1407
 24072              	.L1408:
 24073              	.LVL2113:
 24074              	.LBE22158:
 24075              	.LBE22157:
 24076              	.LBE22153:
 24077              	.LBE22152:
 24078              	.LBE22151:
 481:/usr/include/c++/6/bits/stl_map.h **** #if __cplusplus >= 201103L
 24079              		.loc 36 481 0
 24080 0085 48396C24 		cmpq	%rbp, 16(%rsp)
 24080      10
 24081 008a 0F84A000 		je	.L1406
GAS LISTING /tmp/ccvmoMuv.s 			page 922


 24081      0000
 24082              	.LVL2114:
 24083              	.LBB22175:
 24084              	.LBB22176:
 24085              	.LBB22177:
 24086              	.LBB22178:
 24087              	.LBB22179:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 24088              		.loc 26 117 0
 24089 0090 803B2A   		cmpb	$42, (%rbx)
 24090 0093 488B4520 		movq	32(%rbp), %rax
 24091 0097 488B7008 		movq	8(%rax), %rsi
 24092              	.LVL2115:
 24093 009b 0F842F01 		je	.L1443
 24093      0000
 24094              	.LVL2116:
 24095              	.L1413:
 118:/usr/include/c++/6/typeinfo **** 
 24096              		.loc 26 118 0
 24097 00a1 4889DF   		movq	%rbx, %rdi
 24098 00a4 E8000000 		call	strcmp@PLT
 24098      00
 24099              	.LVL2117:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 24100              		.loc 26 117 0
 24101 00a9 C1E81F   		shrl	$31, %eax
 24102              	.L1414:
 24103              	.LVL2118:
 24104              	.LBE22179:
 24105              	.LBE22178:
 24106              	.LBE22177:
 24107              	.LBE22176:
 24108              	.LBE22175:
 481:/usr/include/c++/6/bits/stl_map.h **** #if __cplusplus >= 201103L
 24109              		.loc 36 481 0
 24110 00ac 84C0     		testb	%al, %al
 24111 00ae 0F857C00 		jne	.L1406
 24111      0000
 24112              	.LVL2119:
 24113              	.L1415:
 24114              	.LBE22150:
 24115              	.LBE22149:
 24116              	.LBB22302:
 24117              	.LBB22303:
 24118              	.LBB22304:
 24119              	.LBB22305:
 479:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 24120              		.loc 28 479 0
 24121 00b4 488B4424 		movq	8(%rsp), %rax
 24121      08
 24122 00b9 488B4008 		movq	8(%rax), %rax
 484:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****     }
 24123              		.loc 28 484 0
 24124 00bd 4885C0   		testq	%rax, %rax
 24125 00c0 7404     		je	.L1424
 24126              	.LVL2120:
 24127              	.LBB22306:
GAS LISTING /tmp/ccvmoMuv.s 			page 923


 24128              	.LBB22307:
 24129              	.LBB22308:
 24130              	.LBB22309:
  66:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** }
 24131              		.loc 1 66 0
 24132              	#APP
 24133              	# 66 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 24134              		lock
 24135              		incl 8(%rax)
 24136              	# 0 "" 2
 24137              	.LVL2121:
 24138              	#NO_APP
 24139              	.L1424:
 24140              	.LBE22309:
 24141              	.LBE22308:
 24142              	.LBE22307:
 24143              	.LBE22306:
 24144              	.LBE22305:
 24145              	.LBE22304:
 24146              	.LBE22303:
 24147              	.LBB22310:
 24148              	.LBB22311:
 24149              	.LBB22312:
 518:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         r.pi_ = pi_;
 24150              		.loc 28 518 0
 24151 00c6 488B5D30 		movq	48(%rbp), %rbx
 24152              	.LBE22312:
 24153              	.LBE22311:
 24154              	.LBB22314:
 24155              	.LBB22315:
 24156              		.file 50 "/usr/include/c++/6/bits/move.h"
   1:/usr/include/c++/6/bits/move.h **** // Move, forward and identity for C++0x + swap -*- C++ -*-
   2:/usr/include/c++/6/bits/move.h **** 
   3:/usr/include/c++/6/bits/move.h **** // Copyright (C) 2007-2016 Free Software Foundation, Inc.
   4:/usr/include/c++/6/bits/move.h **** //
   5:/usr/include/c++/6/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/6/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/6/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/6/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/6/bits/move.h **** // any later version.
  10:/usr/include/c++/6/bits/move.h **** 
  11:/usr/include/c++/6/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/6/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/6/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/6/bits/move.h **** // GNU General Public License for more details.
  15:/usr/include/c++/6/bits/move.h **** 
  16:/usr/include/c++/6/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/6/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/6/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/6/bits/move.h **** 
  20:/usr/include/c++/6/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/6/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/6/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/6/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/6/bits/move.h **** 
  25:/usr/include/c++/6/bits/move.h **** /** @file bits/move.h
  26:/usr/include/c++/6/bits/move.h ****  *  This is an internal header file, included by other library headers.
GAS LISTING /tmp/ccvmoMuv.s 			page 924


  27:/usr/include/c++/6/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/usr/include/c++/6/bits/move.h ****  */
  29:/usr/include/c++/6/bits/move.h **** 
  30:/usr/include/c++/6/bits/move.h **** #ifndef _MOVE_H
  31:/usr/include/c++/6/bits/move.h **** #define _MOVE_H 1
  32:/usr/include/c++/6/bits/move.h **** 
  33:/usr/include/c++/6/bits/move.h **** #include <bits/c++config.h>
  34:/usr/include/c++/6/bits/move.h **** #include <bits/concept_check.h>
  35:/usr/include/c++/6/bits/move.h **** 
  36:/usr/include/c++/6/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  37:/usr/include/c++/6/bits/move.h **** {
  38:/usr/include/c++/6/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  39:/usr/include/c++/6/bits/move.h **** 
  40:/usr/include/c++/6/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  41:/usr/include/c++/6/bits/move.h ****   /**
  42:/usr/include/c++/6/bits/move.h ****    *  @brief Same as C++11 std::addressof
  43:/usr/include/c++/6/bits/move.h ****    *  @ingroup utilities
  44:/usr/include/c++/6/bits/move.h ****    */
  45:/usr/include/c++/6/bits/move.h ****   template<typename _Tp>
  46:/usr/include/c++/6/bits/move.h ****     inline _Tp*
  47:/usr/include/c++/6/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  48:/usr/include/c++/6/bits/move.h ****     {
  49:/usr/include/c++/6/bits/move.h ****       return reinterpret_cast<_Tp*>
  50:/usr/include/c++/6/bits/move.h **** 	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
  51:/usr/include/c++/6/bits/move.h ****     }
  52:/usr/include/c++/6/bits/move.h **** 
  53:/usr/include/c++/6/bits/move.h **** _GLIBCXX_END_NAMESPACE_VERSION
  54:/usr/include/c++/6/bits/move.h **** } // namespace
  55:/usr/include/c++/6/bits/move.h **** 
  56:/usr/include/c++/6/bits/move.h **** #if __cplusplus >= 201103L
  57:/usr/include/c++/6/bits/move.h **** #include <type_traits> // Brings in std::declval too.
  58:/usr/include/c++/6/bits/move.h **** 
  59:/usr/include/c++/6/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/usr/include/c++/6/bits/move.h **** {
  61:/usr/include/c++/6/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:/usr/include/c++/6/bits/move.h **** 
  63:/usr/include/c++/6/bits/move.h ****   /**
  64:/usr/include/c++/6/bits/move.h ****    *  @addtogroup utilities
  65:/usr/include/c++/6/bits/move.h ****    *  @{
  66:/usr/include/c++/6/bits/move.h ****    */
  67:/usr/include/c++/6/bits/move.h **** 
  68:/usr/include/c++/6/bits/move.h ****   /**
  69:/usr/include/c++/6/bits/move.h ****    *  @brief  Forward an lvalue.
  70:/usr/include/c++/6/bits/move.h ****    *  @return The parameter cast to the specified type.
  71:/usr/include/c++/6/bits/move.h ****    *
  72:/usr/include/c++/6/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  73:/usr/include/c++/6/bits/move.h ****    */
  74:/usr/include/c++/6/bits/move.h ****   template<typename _Tp>
  75:/usr/include/c++/6/bits/move.h ****     constexpr _Tp&&
  76:/usr/include/c++/6/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  77:/usr/include/c++/6/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
  78:/usr/include/c++/6/bits/move.h **** 
  79:/usr/include/c++/6/bits/move.h ****   /**
  80:/usr/include/c++/6/bits/move.h ****    *  @brief  Forward an rvalue.
  81:/usr/include/c++/6/bits/move.h ****    *  @return The parameter cast to the specified type.
  82:/usr/include/c++/6/bits/move.h ****    *
  83:/usr/include/c++/6/bits/move.h ****    *  This function is used to implement "perfect forwarding".
GAS LISTING /tmp/ccvmoMuv.s 			page 925


  84:/usr/include/c++/6/bits/move.h ****    */
  85:/usr/include/c++/6/bits/move.h ****   template<typename _Tp>
  86:/usr/include/c++/6/bits/move.h ****     constexpr _Tp&&
  87:/usr/include/c++/6/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
  88:/usr/include/c++/6/bits/move.h ****     {
  89:/usr/include/c++/6/bits/move.h ****       static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
  90:/usr/include/c++/6/bits/move.h **** 		    " substituting _Tp is an lvalue reference type");
  91:/usr/include/c++/6/bits/move.h ****       return static_cast<_Tp&&>(__t);
  92:/usr/include/c++/6/bits/move.h ****     }
  93:/usr/include/c++/6/bits/move.h **** 
  94:/usr/include/c++/6/bits/move.h ****   /**
  95:/usr/include/c++/6/bits/move.h ****    *  @brief  Convert a value to an rvalue.
  96:/usr/include/c++/6/bits/move.h ****    *  @param  __t  A thing of arbitrary type.
  97:/usr/include/c++/6/bits/move.h ****    *  @return The parameter cast to an rvalue-reference to allow moving it.
  98:/usr/include/c++/6/bits/move.h ****   */
  99:/usr/include/c++/6/bits/move.h ****   template<typename _Tp>
 100:/usr/include/c++/6/bits/move.h ****     constexpr typename std::remove_reference<_Tp>::type&&
 101:/usr/include/c++/6/bits/move.h ****     move(_Tp&& __t) noexcept
 102:/usr/include/c++/6/bits/move.h ****     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 103:/usr/include/c++/6/bits/move.h **** 
 104:/usr/include/c++/6/bits/move.h **** 
 105:/usr/include/c++/6/bits/move.h ****   template<typename _Tp>
 106:/usr/include/c++/6/bits/move.h ****     struct __move_if_noexcept_cond
 107:/usr/include/c++/6/bits/move.h ****     : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
 108:/usr/include/c++/6/bits/move.h ****                     is_copy_constructible<_Tp>>::type { };
 109:/usr/include/c++/6/bits/move.h **** 
 110:/usr/include/c++/6/bits/move.h ****   /**
 111:/usr/include/c++/6/bits/move.h ****    *  @brief  Conditionally convert a value to an rvalue.
 112:/usr/include/c++/6/bits/move.h ****    *  @param  __x  A thing of arbitrary type.
 113:/usr/include/c++/6/bits/move.h ****    *  @return The parameter, possibly cast to an rvalue-reference.
 114:/usr/include/c++/6/bits/move.h ****    *
 115:/usr/include/c++/6/bits/move.h ****    *  Same as std::move unless the type's move constructor could throw and the
 116:/usr/include/c++/6/bits/move.h ****    *  type is copyable, in which case an lvalue-reference is returned instead.
 117:/usr/include/c++/6/bits/move.h ****    */
 118:/usr/include/c++/6/bits/move.h ****   template<typename _Tp>
 119:/usr/include/c++/6/bits/move.h ****     constexpr typename
 120:/usr/include/c++/6/bits/move.h ****     conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
 121:/usr/include/c++/6/bits/move.h ****     move_if_noexcept(_Tp& __x) noexcept
 122:/usr/include/c++/6/bits/move.h ****     { return std::move(__x); }
 123:/usr/include/c++/6/bits/move.h **** 
 124:/usr/include/c++/6/bits/move.h ****   // declval, from type_traits.
 125:/usr/include/c++/6/bits/move.h **** 
 126:/usr/include/c++/6/bits/move.h ****   /**
 127:/usr/include/c++/6/bits/move.h ****    *  @brief Returns the actual address of the object or function
 128:/usr/include/c++/6/bits/move.h ****    *         referenced by r, even in the presence of an overloaded
 129:/usr/include/c++/6/bits/move.h ****    *         operator&.
 130:/usr/include/c++/6/bits/move.h ****    *  @param  __r  Reference to an object or function.
 131:/usr/include/c++/6/bits/move.h ****    *  @return   The actual address.
 132:/usr/include/c++/6/bits/move.h ****   */
 133:/usr/include/c++/6/bits/move.h ****   template<typename _Tp>
 134:/usr/include/c++/6/bits/move.h ****     inline _Tp*
 135:/usr/include/c++/6/bits/move.h ****     addressof(_Tp& __r) noexcept
 136:/usr/include/c++/6/bits/move.h ****     { return std::__addressof(__r); }
 137:/usr/include/c++/6/bits/move.h **** 
 138:/usr/include/c++/6/bits/move.h ****   // C++11 version of std::exchange for internal use.
 139:/usr/include/c++/6/bits/move.h ****   template <typename _Tp, typename _Up = _Tp>
 140:/usr/include/c++/6/bits/move.h ****     inline _Tp
GAS LISTING /tmp/ccvmoMuv.s 			page 926


 141:/usr/include/c++/6/bits/move.h ****     __exchange(_Tp& __obj, _Up&& __new_val)
 142:/usr/include/c++/6/bits/move.h ****     {
 143:/usr/include/c++/6/bits/move.h ****       _Tp __old_val = std::move(__obj);
 144:/usr/include/c++/6/bits/move.h ****       __obj = std::forward<_Up>(__new_val);
 145:/usr/include/c++/6/bits/move.h ****       return __old_val;
 146:/usr/include/c++/6/bits/move.h ****     }
 147:/usr/include/c++/6/bits/move.h **** 
 148:/usr/include/c++/6/bits/move.h ****   /// @} group utilities
 149:/usr/include/c++/6/bits/move.h **** _GLIBCXX_END_NAMESPACE_VERSION
 150:/usr/include/c++/6/bits/move.h **** } // namespace
 151:/usr/include/c++/6/bits/move.h **** 
 152:/usr/include/c++/6/bits/move.h **** #define _GLIBCXX_MOVE(__val) std::move(__val)
 153:/usr/include/c++/6/bits/move.h **** #define _GLIBCXX_FORWARD(_Tp, __val) std::forward<_Tp>(__val)
 154:/usr/include/c++/6/bits/move.h **** #else
 155:/usr/include/c++/6/bits/move.h **** #define _GLIBCXX_MOVE(__val) (__val)
 156:/usr/include/c++/6/bits/move.h **** #define _GLIBCXX_FORWARD(_Tp, __val) (__val)
 157:/usr/include/c++/6/bits/move.h **** #endif
 158:/usr/include/c++/6/bits/move.h **** 
 159:/usr/include/c++/6/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
 160:/usr/include/c++/6/bits/move.h **** {
 161:/usr/include/c++/6/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 162:/usr/include/c++/6/bits/move.h **** 
 163:/usr/include/c++/6/bits/move.h ****   /**
 164:/usr/include/c++/6/bits/move.h ****    *  @addtogroup utilities
 165:/usr/include/c++/6/bits/move.h ****    *  @{
 166:/usr/include/c++/6/bits/move.h ****    */
 167:/usr/include/c++/6/bits/move.h **** 
 168:/usr/include/c++/6/bits/move.h ****   /**
 169:/usr/include/c++/6/bits/move.h ****    *  @brief Swaps two values.
 170:/usr/include/c++/6/bits/move.h ****    *  @param  __a  A thing of arbitrary type.
 171:/usr/include/c++/6/bits/move.h ****    *  @param  __b  Another thing of arbitrary type.
 172:/usr/include/c++/6/bits/move.h ****    *  @return   Nothing.
 173:/usr/include/c++/6/bits/move.h ****   */
 174:/usr/include/c++/6/bits/move.h ****   template<typename _Tp>
 175:/usr/include/c++/6/bits/move.h ****     inline
 176:/usr/include/c++/6/bits/move.h **** #if __cplusplus >= 201103L
 177:/usr/include/c++/6/bits/move.h ****     typename enable_if<__and_<is_move_constructible<_Tp>,
 178:/usr/include/c++/6/bits/move.h **** 			      is_move_assignable<_Tp>>::value>::type
 179:/usr/include/c++/6/bits/move.h ****     swap(_Tp& __a, _Tp& __b)
 180:/usr/include/c++/6/bits/move.h ****     noexcept(__and_<is_nothrow_move_constructible<_Tp>,
 181:/usr/include/c++/6/bits/move.h **** 	            is_nothrow_move_assignable<_Tp>>::value)
 182:/usr/include/c++/6/bits/move.h **** #else
 183:/usr/include/c++/6/bits/move.h ****     void
 184:/usr/include/c++/6/bits/move.h ****     swap(_Tp& __a, _Tp& __b)
 185:/usr/include/c++/6/bits/move.h **** #endif
 186:/usr/include/c++/6/bits/move.h ****     {
 187:/usr/include/c++/6/bits/move.h ****       // concept requirements
 188:/usr/include/c++/6/bits/move.h ****       __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
 189:/usr/include/c++/6/bits/move.h **** 
 190:/usr/include/c++/6/bits/move.h ****       _Tp __tmp = _GLIBCXX_MOVE(__a);
 191:/usr/include/c++/6/bits/move.h ****       __a = _GLIBCXX_MOVE(__b);
 192:/usr/include/c++/6/bits/move.h ****       __b = _GLIBCXX_MOVE(__tmp);
 24157              		.loc 50 192 0
 24158 00ca 4C897528 		movq	%r14, 40(%rbp)
 24159              	.LVL2122:
 24160              	.LBE22315:
 24161              	.LBE22314:
GAS LISTING /tmp/ccvmoMuv.s 			page 927


 24162              	.LBB22316:
 24163              	.LBB22313:
 519:/usr/include/boost/smart_ptr/detail/shared_count.hpp ****         pi_ = tmp;
 24164              		.loc 28 519 0
 24165 00ce 48894530 		movq	%rax, 48(%rbp)
 24166              	.LVL2123:
 24167              	.LBE22313:
 24168              	.LBE22316:
 24169              	.LBE22310:
 24170              	.LBB22317:
 24171              	.LBB22318:
 24172              	.LBB22319:
 473:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 24173              		.loc 28 473 0
 24174 00d2 4885DB   		testq	%rbx, %rbx
 24175 00d5 7415     		je	.L1426
 24176              	.LVL2124:
 24177              	.LBB22320:
 24178              	.LBB22321:
 24179              	.LBB22322:
 24180              	.LBB22323:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 24181              		.loc 1 50 0
 24182 00d7 BDFFFFFF 		movl	$-1, %ebp
 24182      FF
 24183 00dc 89E8     		movl	%ebp, %eax
 24184              	#APP
 24185              	# 50 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 24186              		lock
 24187              		xadd %eax, 8(%rbx)
 24188              	# 0 "" 2
 24189              	.LVL2125:
 24190              	#NO_APP
 24191              	.LBE22323:
 24192              	.LBE22322:
 144:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
 24193              		.loc 1 144 0
 24194 00e3 83F801   		cmpl	$1, %eax
 24195 00e6 0F843401 		je	.L1444
 24195      0000
 24196              	.LVL2126:
 24197              	.L1426:
 24198 00ec 498B4424 		movq	56(%r12), %rax
 24198      38
 24199              	.LBE22321:
 24200              	.LBE22320:
 24201              	.LBE22319:
 24202              	.LBE22318:
 24203              	.LBE22317:
 24204              	.LBE22302:
 24205              	.LBB22348:
 24206              	.LBB22349:
 24207              	.LBB22350:
 24208              	.LBB22351:
 132:/usr/include/c++/6/bits/basic_string.h **** 
 24209              		.loc 10 132 0
 24210 00f1 49C74424 		movq	$0, 64(%r12)
GAS LISTING /tmp/ccvmoMuv.s 			page 928


 24210      40000000 
 24210      00
 24211              	.LVL2127:
 24212              	.LBE22351:
 24213              	.LBE22350:
 24214              	.LBB22352:
 24215              	.LBB22353:
 243:/usr/include/c++/6/bits/char_traits.h **** 
 24216              		.loc 9 243 0
 24217 00fa C60000   		movb	$0, (%rax)
 24218              	.LVL2128:
 24219              	.LBE22353:
 24220              	.LBE22352:
 24221              	.LBE22349:
 24222              	.LBE22348:
 113:/usr/include/boost/exception/info.hpp **** 
 24223              		.loc 3 113 0
 24224 00fd 4883C428 		addq	$40, %rsp
 24225              		.cfi_remember_state
 24226              		.cfi_def_cfa_offset 56
 24227 0101 5B       		popq	%rbx
 24228              		.cfi_def_cfa_offset 48
 24229 0102 5D       		popq	%rbp
 24230              		.cfi_def_cfa_offset 40
 24231 0103 415C     		popq	%r12
 24232              		.cfi_def_cfa_offset 32
 24233              	.LVL2129:
 24234 0105 415D     		popq	%r13
 24235              		.cfi_def_cfa_offset 24
 24236 0107 415E     		popq	%r14
 24237              		.cfi_def_cfa_offset 16
 24238 0109 415F     		popq	%r15
 24239              		.cfi_def_cfa_offset 8
 24240 010b C3       		ret
 24241              	.LVL2130:
 24242 010c 0F1F4000 		.p2align 4,,10
 24243              		.p2align 3
 24244              	.L1441:
 24245              		.cfi_restore_state
 24246              	.LBB22354:
 24247              	.LBB22299:
 24248              	.LBB22184:
 24249              	.LBB22173:
 24250              	.LBB22172:
 24251              	.LBB22170:
 24252              	.LBB22169:
 24253              	.LBB22168:
 24254              	.LBB22167:
 24255              	.LBB22166:
 24256              	.LBB22165:
 24257              	.LBB22164:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 24258              		.loc 26 117 0
 24259 0110 4839FB   		cmpq	%rdi, %rbx
 24260 0113 0F97C0   		seta	%al
 116:/usr/include/c++/6/typeinfo **** 	? __name < __arg.__name
 24261              		.loc 26 116 0
GAS LISTING /tmp/ccvmoMuv.s 			page 929


 24262 0116 803B2A   		cmpb	$42, (%rbx)
 24263 0119 0F854EFF 		jne	.L1409
 24263      FFFF
 24264 011f E954FFFF 		jmp	.L1410
 24264      FF
 24265              	.LVL2131:
 24266              	.L1431:
 24267              	.LBE22164:
 24268              	.LBE22165:
 24269              	.LBE22166:
 24270              	.LBE22167:
 24271              	.LBE22168:
 24272              	.LBE22169:
 24273              	.LBE22170:
 24274              	.LBB22171:
 24275              	.LBB22156:
 677:/usr/include/c++/6/bits/stl_tree.h **** 
 24276              		.loc 19 677 0
 24277 0124 488B6C24 		movq	16(%rsp), %rbp
 24277      10
 24278              	.LVL2132:
 24279 0129 0F1F8000 		.p2align 4,,10
 24279      000000
 24280              		.p2align 3
 24281              	.L1406:
 24282              	.LBE22156:
 24283              	.LBE22171:
 24284              	.LBE22172:
 24285              	.LBE22173:
 24286              	.LBE22184:
 24287              	.LBB22185:
 24288              	.LBB22186:
 24289              	.LBB22187:
 24290              	.LBB22188:
 24291              	.LBB22189:
 24292              	.LBB22190:
 24293              	.LBB22191:
 24294              	.LBB22192:
 104:/usr/include/c++/6/ext/new_allocator.h ****       }
 24295              		.loc 12 104 0
 24296 0130 BF380000 		movl	$56, %edi
 24296      00
 24297              	.LEHB127:
 24298 0135 E8000000 		call	_Znwm@PLT
 24298      00
 24299              	.LVL2133:
 24300              	.LEHE127:
 24301 013a 4889C3   		movq	%rax, %rbx
 24302              	.LVL2134:
 24303              	.LBE22192:
 24304              	.LBE22191:
 24305              	.LBE22190:
 24306              	.LBE22189:
 24307              	.LBB22193:
 24308              	.LBB22194:
 24309              	.LBB22195:
 24310              	.LBB22196:
GAS LISTING /tmp/ccvmoMuv.s 			page 930


 24311              	.LBB22197:
 24312              	.LBB22198:
 109:/usr/include/c++/6/tuple **** 
 110:/usr/include/c++/6/tuple ****       constexpr _Head_base(const _Head_base&) = default;
 111:/usr/include/c++/6/tuple ****       constexpr _Head_base(_Head_base&&) = default;
 112:/usr/include/c++/6/tuple **** 
 113:/usr/include/c++/6/tuple ****       template<typename _UHead>
 114:/usr/include/c++/6/tuple ****         constexpr _Head_base(_UHead&& __h)
 115:/usr/include/c++/6/tuple **** 	: _M_head_impl(std::forward<_UHead>(__h)) { }
 116:/usr/include/c++/6/tuple **** 
 117:/usr/include/c++/6/tuple ****       _Head_base(allocator_arg_t, __uses_alloc0)
 118:/usr/include/c++/6/tuple ****       : _M_head_impl() { }
 119:/usr/include/c++/6/tuple **** 
 120:/usr/include/c++/6/tuple ****       template<typename _Alloc>
 121:/usr/include/c++/6/tuple **** 	_Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 122:/usr/include/c++/6/tuple **** 	: _M_head_impl(allocator_arg, *__a._M_a) { }
 123:/usr/include/c++/6/tuple **** 
 124:/usr/include/c++/6/tuple ****       template<typename _Alloc>
 125:/usr/include/c++/6/tuple **** 	_Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 126:/usr/include/c++/6/tuple **** 	: _M_head_impl(*__a._M_a) { }
 127:/usr/include/c++/6/tuple **** 
 128:/usr/include/c++/6/tuple ****       template<typename _UHead>
 129:/usr/include/c++/6/tuple **** 	_Head_base(__uses_alloc0, _UHead&& __uhead)
 130:/usr/include/c++/6/tuple **** 	: _M_head_impl(std::forward<_UHead>(__uhead)) { }
 131:/usr/include/c++/6/tuple **** 
 132:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename _UHead>
 133:/usr/include/c++/6/tuple **** 	_Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 134:/usr/include/c++/6/tuple **** 	: _M_head_impl(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead))
 135:/usr/include/c++/6/tuple **** 	{ }
 136:/usr/include/c++/6/tuple **** 
 137:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename _UHead>
 138:/usr/include/c++/6/tuple **** 	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 139:/usr/include/c++/6/tuple **** 	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }
 140:/usr/include/c++/6/tuple **** 
 141:/usr/include/c++/6/tuple ****       static constexpr _Head&
 142:/usr/include/c++/6/tuple ****       _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 143:/usr/include/c++/6/tuple **** 
 144:/usr/include/c++/6/tuple ****       static constexpr const _Head&
 145:/usr/include/c++/6/tuple ****       _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 146:/usr/include/c++/6/tuple **** 
 147:/usr/include/c++/6/tuple ****       _Head _M_head_impl;
 148:/usr/include/c++/6/tuple ****     };
 149:/usr/include/c++/6/tuple **** 
 150:/usr/include/c++/6/tuple ****   /**
 151:/usr/include/c++/6/tuple ****    * Contains the actual implementation of the @c tuple template, stored
 152:/usr/include/c++/6/tuple ****    * as a recursive inheritance hierarchy from the first element (most
 153:/usr/include/c++/6/tuple ****    * derived class) to the last (least derived class). The @c Idx
 154:/usr/include/c++/6/tuple ****    * parameter gives the 0-based index of the element stored at this
 155:/usr/include/c++/6/tuple ****    * point in the hierarchy; we use it to implement a constant-time
 156:/usr/include/c++/6/tuple ****    * get() operation.
 157:/usr/include/c++/6/tuple ****    */
 158:/usr/include/c++/6/tuple ****   template<std::size_t _Idx, typename... _Elements>
 159:/usr/include/c++/6/tuple ****     struct _Tuple_impl; 
 160:/usr/include/c++/6/tuple **** 
 161:/usr/include/c++/6/tuple ****   template<typename _Tp>
 162:/usr/include/c++/6/tuple ****     struct __is_empty_non_tuple : is_empty<_Tp> { };
 163:/usr/include/c++/6/tuple **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 931


 164:/usr/include/c++/6/tuple ****   // Using EBO for elements that are tuples causes ambiguous base errors.
 165:/usr/include/c++/6/tuple ****   template<typename _El0, typename... _El>
 166:/usr/include/c++/6/tuple ****     struct __is_empty_non_tuple<tuple<_El0, _El...>> : false_type { };
 167:/usr/include/c++/6/tuple **** 
 168:/usr/include/c++/6/tuple ****   // Use the Empty Base-class Optimization for empty, non-final types.
 169:/usr/include/c++/6/tuple ****   template<typename _Tp>
 170:/usr/include/c++/6/tuple ****     using __empty_not_final
 171:/usr/include/c++/6/tuple ****     = typename conditional<__is_final(_Tp), false_type,
 172:/usr/include/c++/6/tuple **** 			   __is_empty_non_tuple<_Tp>>::type;
 173:/usr/include/c++/6/tuple **** 
 174:/usr/include/c++/6/tuple ****   /**
 175:/usr/include/c++/6/tuple ****    * Recursive tuple implementation. Here we store the @c Head element
 176:/usr/include/c++/6/tuple ****    * and derive from a @c Tuple_impl containing the remaining elements
 177:/usr/include/c++/6/tuple ****    * (which contains the @c Tail).
 178:/usr/include/c++/6/tuple ****    */
 179:/usr/include/c++/6/tuple ****   template<std::size_t _Idx, typename _Head, typename... _Tail>
 180:/usr/include/c++/6/tuple ****     struct _Tuple_impl<_Idx, _Head, _Tail...>
 181:/usr/include/c++/6/tuple ****     : public _Tuple_impl<_Idx + 1, _Tail...>,
 182:/usr/include/c++/6/tuple ****       private _Head_base<_Idx, _Head, __empty_not_final<_Head>::value>
 183:/usr/include/c++/6/tuple ****     {
 184:/usr/include/c++/6/tuple ****       template<std::size_t, typename...> friend class _Tuple_impl;
 185:/usr/include/c++/6/tuple **** 
 186:/usr/include/c++/6/tuple ****       typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
 187:/usr/include/c++/6/tuple ****       typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;
 188:/usr/include/c++/6/tuple **** 
 189:/usr/include/c++/6/tuple ****       static constexpr _Head&  
 190:/usr/include/c++/6/tuple ****       _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 191:/usr/include/c++/6/tuple **** 
 192:/usr/include/c++/6/tuple ****       static constexpr const _Head&
 193:/usr/include/c++/6/tuple ****       _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 194:/usr/include/c++/6/tuple **** 
 195:/usr/include/c++/6/tuple ****       static constexpr _Inherited&
 196:/usr/include/c++/6/tuple ****       _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 197:/usr/include/c++/6/tuple **** 
 198:/usr/include/c++/6/tuple ****       static constexpr const _Inherited&
 199:/usr/include/c++/6/tuple ****       _M_tail(const _Tuple_impl& __t) noexcept { return __t; }
 200:/usr/include/c++/6/tuple **** 
 201:/usr/include/c++/6/tuple ****       constexpr _Tuple_impl()
 202:/usr/include/c++/6/tuple ****       : _Inherited(), _Base() { }
 203:/usr/include/c++/6/tuple **** 
 204:/usr/include/c++/6/tuple ****       explicit 
 205:/usr/include/c++/6/tuple ****       constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 206:/usr/include/c++/6/tuple ****       : _Inherited(__tail...), _Base(__head) { }
 207:/usr/include/c++/6/tuple **** 
 208:/usr/include/c++/6/tuple ****       template<typename _UHead, typename... _UTail, typename = typename
 209:/usr/include/c++/6/tuple ****                enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> 
 210:/usr/include/c++/6/tuple ****         explicit
 211:/usr/include/c++/6/tuple ****         constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 212:/usr/include/c++/6/tuple **** 	: _Inherited(std::forward<_UTail>(__tail)...),
 213:/usr/include/c++/6/tuple **** 	  _Base(std::forward<_UHead>(__head)) { }
 214:/usr/include/c++/6/tuple **** 
 215:/usr/include/c++/6/tuple ****       constexpr _Tuple_impl(const _Tuple_impl&) = default;
 216:/usr/include/c++/6/tuple **** 
 217:/usr/include/c++/6/tuple ****       constexpr
 218:/usr/include/c++/6/tuple ****       _Tuple_impl(_Tuple_impl&& __in)
 219:/usr/include/c++/6/tuple ****       noexcept(__and_<is_nothrow_move_constructible<_Head>,
 220:/usr/include/c++/6/tuple **** 	              is_nothrow_move_constructible<_Inherited>>::value)
GAS LISTING /tmp/ccvmoMuv.s 			page 932


 221:/usr/include/c++/6/tuple ****       : _Inherited(std::move(_M_tail(__in))), 
 222:/usr/include/c++/6/tuple **** 	_Base(std::forward<_Head>(_M_head(__in))) { }
 223:/usr/include/c++/6/tuple **** 
 224:/usr/include/c++/6/tuple ****       template<typename... _UElements>
 225:/usr/include/c++/6/tuple ****         constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)
 226:/usr/include/c++/6/tuple **** 	: _Inherited(_Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
 227:/usr/include/c++/6/tuple **** 	  _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }
 228:/usr/include/c++/6/tuple **** 
 229:/usr/include/c++/6/tuple ****       template<typename _UHead, typename... _UTails>
 230:/usr/include/c++/6/tuple ****         constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 231:/usr/include/c++/6/tuple **** 	: _Inherited(std::move
 232:/usr/include/c++/6/tuple **** 		     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
 233:/usr/include/c++/6/tuple **** 	  _Base(std::forward<_UHead>
 234:/usr/include/c++/6/tuple **** 		(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }
 235:/usr/include/c++/6/tuple **** 
 236:/usr/include/c++/6/tuple ****       template<typename _Alloc>
 237:/usr/include/c++/6/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 238:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a),
 239:/usr/include/c++/6/tuple ****           _Base(__tag, __use_alloc<_Head>(__a)) { }
 240:/usr/include/c++/6/tuple **** 
 241:/usr/include/c++/6/tuple ****       template<typename _Alloc>
 242:/usr/include/c++/6/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 243:/usr/include/c++/6/tuple **** 		    const _Head& __head, const _Tail&... __tail)
 244:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a, __tail...),
 245:/usr/include/c++/6/tuple ****           _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }
 246:/usr/include/c++/6/tuple **** 
 247:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename _UHead, typename... _UTail,
 248:/usr/include/c++/6/tuple ****                typename = typename enable_if<sizeof...(_Tail)
 249:/usr/include/c++/6/tuple **** 					     == sizeof...(_UTail)>::type>
 250:/usr/include/c++/6/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 251:/usr/include/c++/6/tuple **** 	            _UHead&& __head, _UTail&&... __tail)
 252:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a, std::forward<_UTail>(__tail)...),
 253:/usr/include/c++/6/tuple ****           _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
 254:/usr/include/c++/6/tuple **** 	        std::forward<_UHead>(__head)) { }
 255:/usr/include/c++/6/tuple **** 
 256:/usr/include/c++/6/tuple ****       template<typename _Alloc>
 257:/usr/include/c++/6/tuple ****         _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 258:/usr/include/c++/6/tuple **** 	            const _Tuple_impl& __in)
 259:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a, _M_tail(__in)), 
 260:/usr/include/c++/6/tuple ****           _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }
 261:/usr/include/c++/6/tuple **** 
 262:/usr/include/c++/6/tuple ****       template<typename _Alloc>
 263:/usr/include/c++/6/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 264:/usr/include/c++/6/tuple **** 	            _Tuple_impl&& __in)
 265:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a, std::move(_M_tail(__in))), 
 266:/usr/include/c++/6/tuple **** 	  _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
 267:/usr/include/c++/6/tuple **** 	        std::forward<_Head>(_M_head(__in))) { }
 268:/usr/include/c++/6/tuple **** 
 269:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename... _UElements>
 270:/usr/include/c++/6/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 271:/usr/include/c++/6/tuple **** 	            const _Tuple_impl<_Idx, _UElements...>& __in)
 272:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a,
 273:/usr/include/c++/6/tuple **** 		     _Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
 274:/usr/include/c++/6/tuple **** 	  _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
 275:/usr/include/c++/6/tuple **** 		_Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }
 276:/usr/include/c++/6/tuple **** 
 277:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename _UHead, typename... _UTails>
GAS LISTING /tmp/ccvmoMuv.s 			page 933


 278:/usr/include/c++/6/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 279:/usr/include/c++/6/tuple **** 	            _Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 280:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a, std::move
 281:/usr/include/c++/6/tuple **** 		     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
 282:/usr/include/c++/6/tuple **** 	  _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
 283:/usr/include/c++/6/tuple ****                 std::forward<_UHead>
 284:/usr/include/c++/6/tuple **** 		(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }
 285:/usr/include/c++/6/tuple **** 
 286:/usr/include/c++/6/tuple ****       _Tuple_impl&
 287:/usr/include/c++/6/tuple ****       operator=(const _Tuple_impl& __in)
 288:/usr/include/c++/6/tuple ****       {
 289:/usr/include/c++/6/tuple **** 	_M_head(*this) = _M_head(__in);
 290:/usr/include/c++/6/tuple **** 	_M_tail(*this) = _M_tail(__in);
 291:/usr/include/c++/6/tuple **** 	return *this;
 292:/usr/include/c++/6/tuple ****       }
 293:/usr/include/c++/6/tuple **** 
 294:/usr/include/c++/6/tuple ****       _Tuple_impl&
 295:/usr/include/c++/6/tuple ****       operator=(_Tuple_impl&& __in)
 296:/usr/include/c++/6/tuple ****       noexcept(__and_<is_nothrow_move_assignable<_Head>,
 297:/usr/include/c++/6/tuple **** 	              is_nothrow_move_assignable<_Inherited>>::value)
 298:/usr/include/c++/6/tuple ****       {
 299:/usr/include/c++/6/tuple **** 	_M_head(*this) = std::forward<_Head>(_M_head(__in));
 300:/usr/include/c++/6/tuple **** 	_M_tail(*this) = std::move(_M_tail(__in));
 301:/usr/include/c++/6/tuple **** 	return *this;
 302:/usr/include/c++/6/tuple ****       }
 303:/usr/include/c++/6/tuple **** 
 304:/usr/include/c++/6/tuple ****       template<typename... _UElements>
 305:/usr/include/c++/6/tuple ****         _Tuple_impl&
 306:/usr/include/c++/6/tuple ****         operator=(const _Tuple_impl<_Idx, _UElements...>& __in)
 307:/usr/include/c++/6/tuple ****         {
 308:/usr/include/c++/6/tuple **** 	  _M_head(*this) = _Tuple_impl<_Idx, _UElements...>::_M_head(__in);
 309:/usr/include/c++/6/tuple **** 	  _M_tail(*this) = _Tuple_impl<_Idx, _UElements...>::_M_tail(__in);
 310:/usr/include/c++/6/tuple **** 	  return *this;
 311:/usr/include/c++/6/tuple **** 	}
 312:/usr/include/c++/6/tuple **** 
 313:/usr/include/c++/6/tuple ****       template<typename _UHead, typename... _UTails>
 314:/usr/include/c++/6/tuple ****         _Tuple_impl&
 315:/usr/include/c++/6/tuple ****         operator=(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 316:/usr/include/c++/6/tuple ****         {
 317:/usr/include/c++/6/tuple **** 	  _M_head(*this) = std::forward<_UHead>
 318:/usr/include/c++/6/tuple **** 	    (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in));
 319:/usr/include/c++/6/tuple **** 	  _M_tail(*this) = std::move
 320:/usr/include/c++/6/tuple **** 	    (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in));
 321:/usr/include/c++/6/tuple **** 	  return *this;
 322:/usr/include/c++/6/tuple **** 	}
 323:/usr/include/c++/6/tuple **** 
 324:/usr/include/c++/6/tuple ****     protected:
 325:/usr/include/c++/6/tuple ****       void
 326:/usr/include/c++/6/tuple ****       _M_swap(_Tuple_impl& __in)
 327:/usr/include/c++/6/tuple ****       noexcept(__is_nothrow_swappable<_Head>::value
 328:/usr/include/c++/6/tuple ****                && noexcept(_M_tail(__in)._M_swap(_M_tail(__in))))
 329:/usr/include/c++/6/tuple ****       {
 330:/usr/include/c++/6/tuple **** 	using std::swap;
 331:/usr/include/c++/6/tuple **** 	swap(_M_head(*this), _M_head(__in));
 332:/usr/include/c++/6/tuple **** 	_Inherited::_M_swap(_M_tail(__in));
 333:/usr/include/c++/6/tuple ****       }
 334:/usr/include/c++/6/tuple ****     };
GAS LISTING /tmp/ccvmoMuv.s 			page 934


 335:/usr/include/c++/6/tuple **** 
 336:/usr/include/c++/6/tuple ****   // Basis case of inheritance recursion.
 337:/usr/include/c++/6/tuple ****   template<std::size_t _Idx, typename _Head>
 338:/usr/include/c++/6/tuple ****     struct _Tuple_impl<_Idx, _Head>
 339:/usr/include/c++/6/tuple ****     : private _Head_base<_Idx, _Head, __empty_not_final<_Head>::value>
 340:/usr/include/c++/6/tuple ****     {
 341:/usr/include/c++/6/tuple ****       template<std::size_t, typename...> friend class _Tuple_impl;
 342:/usr/include/c++/6/tuple **** 
 343:/usr/include/c++/6/tuple ****       typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;
 344:/usr/include/c++/6/tuple **** 
 345:/usr/include/c++/6/tuple ****       static constexpr _Head&
 346:/usr/include/c++/6/tuple ****       _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 347:/usr/include/c++/6/tuple **** 
 348:/usr/include/c++/6/tuple ****       static constexpr const _Head&
 349:/usr/include/c++/6/tuple ****       _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 350:/usr/include/c++/6/tuple **** 
 351:/usr/include/c++/6/tuple ****       constexpr _Tuple_impl()
 352:/usr/include/c++/6/tuple ****       : _Base() { }
 353:/usr/include/c++/6/tuple **** 
 354:/usr/include/c++/6/tuple ****       explicit
 355:/usr/include/c++/6/tuple ****       constexpr _Tuple_impl(const _Head& __head)
 356:/usr/include/c++/6/tuple ****       : _Base(__head) { }
 357:/usr/include/c++/6/tuple **** 
 358:/usr/include/c++/6/tuple ****       template<typename _UHead>
 359:/usr/include/c++/6/tuple ****         explicit
 360:/usr/include/c++/6/tuple ****         constexpr _Tuple_impl(_UHead&& __head)
 361:/usr/include/c++/6/tuple **** 	: _Base(std::forward<_UHead>(__head)) { }
 362:/usr/include/c++/6/tuple **** 
 363:/usr/include/c++/6/tuple ****       constexpr _Tuple_impl(const _Tuple_impl&) = default;
 364:/usr/include/c++/6/tuple **** 
 365:/usr/include/c++/6/tuple ****       constexpr
 366:/usr/include/c++/6/tuple ****       _Tuple_impl(_Tuple_impl&& __in)
 367:/usr/include/c++/6/tuple ****       noexcept(is_nothrow_move_constructible<_Head>::value)
 368:/usr/include/c++/6/tuple ****       : _Base(std::forward<_Head>(_M_head(__in))) { }
 369:/usr/include/c++/6/tuple **** 
 370:/usr/include/c++/6/tuple ****       template<typename _UHead>
 371:/usr/include/c++/6/tuple ****         constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UHead>& __in)
 372:/usr/include/c++/6/tuple **** 	: _Base(_Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }
 373:/usr/include/c++/6/tuple **** 
 374:/usr/include/c++/6/tuple ****       template<typename _UHead>
 375:/usr/include/c++/6/tuple ****         constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead>&& __in)
 376:/usr/include/c++/6/tuple **** 	: _Base(std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 377:/usr/include/c++/6/tuple **** 	{ }
 378:/usr/include/c++/6/tuple **** 
 379:/usr/include/c++/6/tuple ****       template<typename _Alloc>
 380:/usr/include/c++/6/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 381:/usr/include/c++/6/tuple **** 	: _Base(__tag, __use_alloc<_Head>(__a)) { }
 382:/usr/include/c++/6/tuple **** 
 383:/usr/include/c++/6/tuple ****       template<typename _Alloc>
 384:/usr/include/c++/6/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 385:/usr/include/c++/6/tuple **** 		    const _Head& __head)
 386:/usr/include/c++/6/tuple **** 	: _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }
 387:/usr/include/c++/6/tuple **** 
 388:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename _UHead>
 389:/usr/include/c++/6/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 390:/usr/include/c++/6/tuple **** 	            _UHead&& __head)
 391:/usr/include/c++/6/tuple **** 	: _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
GAS LISTING /tmp/ccvmoMuv.s 			page 935


 392:/usr/include/c++/6/tuple **** 	        std::forward<_UHead>(__head)) { }
 393:/usr/include/c++/6/tuple **** 
 394:/usr/include/c++/6/tuple ****       template<typename _Alloc>
 395:/usr/include/c++/6/tuple ****         _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 396:/usr/include/c++/6/tuple **** 	            const _Tuple_impl& __in)
 397:/usr/include/c++/6/tuple **** 	: _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }
 398:/usr/include/c++/6/tuple **** 
 399:/usr/include/c++/6/tuple ****       template<typename _Alloc>
 400:/usr/include/c++/6/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 401:/usr/include/c++/6/tuple **** 	            _Tuple_impl&& __in)
 402:/usr/include/c++/6/tuple **** 	: _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
 403:/usr/include/c++/6/tuple **** 	        std::forward<_Head>(_M_head(__in))) { }
 404:/usr/include/c++/6/tuple **** 
 405:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename _UHead>
 406:/usr/include/c++/6/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 407:/usr/include/c++/6/tuple **** 	            const _Tuple_impl<_Idx, _UHead>& __in)
 408:/usr/include/c++/6/tuple **** 	: _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
 409:/usr/include/c++/6/tuple **** 		_Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }
 410:/usr/include/c++/6/tuple **** 
 411:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename _UHead>
 412:/usr/include/c++/6/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 413:/usr/include/c++/6/tuple **** 	            _Tuple_impl<_Idx, _UHead>&& __in)
 414:/usr/include/c++/6/tuple **** 	: _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
 415:/usr/include/c++/6/tuple ****                 std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 416:/usr/include/c++/6/tuple **** 	{ }
 417:/usr/include/c++/6/tuple **** 
 418:/usr/include/c++/6/tuple ****       _Tuple_impl&
 419:/usr/include/c++/6/tuple ****       operator=(const _Tuple_impl& __in)
 420:/usr/include/c++/6/tuple ****       {
 421:/usr/include/c++/6/tuple **** 	_M_head(*this) = _M_head(__in);
 422:/usr/include/c++/6/tuple **** 	return *this;
 423:/usr/include/c++/6/tuple ****       }
 424:/usr/include/c++/6/tuple **** 
 425:/usr/include/c++/6/tuple ****       _Tuple_impl&
 426:/usr/include/c++/6/tuple ****       operator=(_Tuple_impl&& __in)
 427:/usr/include/c++/6/tuple ****       noexcept(is_nothrow_move_assignable<_Head>::value)
 428:/usr/include/c++/6/tuple ****       {
 429:/usr/include/c++/6/tuple **** 	_M_head(*this) = std::forward<_Head>(_M_head(__in));
 430:/usr/include/c++/6/tuple **** 	return *this;
 431:/usr/include/c++/6/tuple ****       }
 432:/usr/include/c++/6/tuple **** 
 433:/usr/include/c++/6/tuple ****       template<typename _UHead>
 434:/usr/include/c++/6/tuple ****         _Tuple_impl&
 435:/usr/include/c++/6/tuple ****         operator=(const _Tuple_impl<_Idx, _UHead>& __in)
 436:/usr/include/c++/6/tuple ****         {
 437:/usr/include/c++/6/tuple **** 	  _M_head(*this) = _Tuple_impl<_Idx, _UHead>::_M_head(__in);
 438:/usr/include/c++/6/tuple **** 	  return *this;
 439:/usr/include/c++/6/tuple **** 	}
 440:/usr/include/c++/6/tuple **** 
 441:/usr/include/c++/6/tuple ****       template<typename _UHead>
 442:/usr/include/c++/6/tuple ****         _Tuple_impl&
 443:/usr/include/c++/6/tuple ****         operator=(_Tuple_impl<_Idx, _UHead>&& __in)
 444:/usr/include/c++/6/tuple ****         {
 445:/usr/include/c++/6/tuple **** 	  _M_head(*this)
 446:/usr/include/c++/6/tuple **** 	    = std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in));
 447:/usr/include/c++/6/tuple **** 	  return *this;
 448:/usr/include/c++/6/tuple **** 	}
GAS LISTING /tmp/ccvmoMuv.s 			page 936


 449:/usr/include/c++/6/tuple **** 
 450:/usr/include/c++/6/tuple ****     protected:
 451:/usr/include/c++/6/tuple ****       void
 452:/usr/include/c++/6/tuple ****       _M_swap(_Tuple_impl& __in)
 453:/usr/include/c++/6/tuple ****       noexcept(__is_nothrow_swappable<_Head>::value)
 454:/usr/include/c++/6/tuple ****       {
 455:/usr/include/c++/6/tuple **** 	using std::swap;
 456:/usr/include/c++/6/tuple **** 	swap(_M_head(*this), _M_head(__in));
 457:/usr/include/c++/6/tuple ****       }
 458:/usr/include/c++/6/tuple ****     };
 459:/usr/include/c++/6/tuple **** 
 460:/usr/include/c++/6/tuple ****   template<typename... _Elements>
 461:/usr/include/c++/6/tuple ****     class tuple;
 462:/usr/include/c++/6/tuple **** 
 463:/usr/include/c++/6/tuple ****   // Concept utility functions, reused in conditionally-explicit
 464:/usr/include/c++/6/tuple ****   // constructors.
 465:/usr/include/c++/6/tuple ****   template<bool, typename... _Elements>
 466:/usr/include/c++/6/tuple ****   struct _TC
 467:/usr/include/c++/6/tuple ****   {
 468:/usr/include/c++/6/tuple ****     template<typename... _UElements>
 469:/usr/include/c++/6/tuple ****     static constexpr bool _ConstructibleTuple()
 470:/usr/include/c++/6/tuple ****     {
 471:/usr/include/c++/6/tuple ****       return __and_<is_constructible<_Elements, const _UElements&>...>::value;
 472:/usr/include/c++/6/tuple ****     }
 473:/usr/include/c++/6/tuple **** 
 474:/usr/include/c++/6/tuple ****     template<typename... _UElements>
 475:/usr/include/c++/6/tuple ****     static constexpr bool _ImplicitlyConvertibleTuple()
 476:/usr/include/c++/6/tuple ****     {
 477:/usr/include/c++/6/tuple ****       return __and_<is_convertible<const _UElements&, _Elements>...>::value;
 478:/usr/include/c++/6/tuple ****     }
 479:/usr/include/c++/6/tuple **** 
 480:/usr/include/c++/6/tuple ****     template<typename... _UElements>
 481:/usr/include/c++/6/tuple ****     static constexpr bool _MoveConstructibleTuple()
 482:/usr/include/c++/6/tuple ****     {
 483:/usr/include/c++/6/tuple ****       return __and_<is_constructible<_Elements, _UElements&&>...>::value;
 484:/usr/include/c++/6/tuple ****     }
 485:/usr/include/c++/6/tuple **** 
 486:/usr/include/c++/6/tuple ****     template<typename... _UElements>
 487:/usr/include/c++/6/tuple ****     static constexpr bool _ImplicitlyMoveConvertibleTuple()
 488:/usr/include/c++/6/tuple ****     {
 489:/usr/include/c++/6/tuple ****       return __and_<is_convertible<_UElements&&, _Elements>...>::value;
 490:/usr/include/c++/6/tuple ****     }
 491:/usr/include/c++/6/tuple **** 
 492:/usr/include/c++/6/tuple ****     template<typename _SrcTuple>
 493:/usr/include/c++/6/tuple ****     static constexpr bool _NonNestedTuple()
 494:/usr/include/c++/6/tuple ****     {
 495:/usr/include/c++/6/tuple ****       return  __and_<__not_<is_same<tuple<_Elements...>,
 496:/usr/include/c++/6/tuple ****                                    typename remove_cv<
 497:/usr/include/c++/6/tuple ****                                      typename remove_reference<_SrcTuple>::type
 498:/usr/include/c++/6/tuple ****                                    >::type>>,
 499:/usr/include/c++/6/tuple ****                      __not_<is_convertible<_SrcTuple, _Elements...>>,
 500:/usr/include/c++/6/tuple ****                      __not_<is_constructible<_Elements..., _SrcTuple>>
 501:/usr/include/c++/6/tuple ****               >::value;
 502:/usr/include/c++/6/tuple ****     }
 503:/usr/include/c++/6/tuple ****     template<typename... _UElements>
 504:/usr/include/c++/6/tuple ****     static constexpr bool _NotSameTuple()
 505:/usr/include/c++/6/tuple ****     {
GAS LISTING /tmp/ccvmoMuv.s 			page 937


 506:/usr/include/c++/6/tuple ****       return  __not_<is_same<tuple<_Elements...>,
 507:/usr/include/c++/6/tuple **** 			     typename remove_const<
 508:/usr/include/c++/6/tuple **** 			       typename remove_reference<_UElements...>::type
 509:/usr/include/c++/6/tuple **** 			       >::type>>::value;
 510:/usr/include/c++/6/tuple ****     }
 511:/usr/include/c++/6/tuple ****   };
 512:/usr/include/c++/6/tuple **** 
 513:/usr/include/c++/6/tuple ****   template<typename... _Elements>
 514:/usr/include/c++/6/tuple ****   struct _TC<false, _Elements...>
 515:/usr/include/c++/6/tuple ****   {
 516:/usr/include/c++/6/tuple ****     template<typename... _UElements>
 517:/usr/include/c++/6/tuple ****     static constexpr bool _ConstructibleTuple()
 518:/usr/include/c++/6/tuple ****     {
 519:/usr/include/c++/6/tuple ****       return false;
 520:/usr/include/c++/6/tuple ****     }
 521:/usr/include/c++/6/tuple **** 
 522:/usr/include/c++/6/tuple ****     template<typename... _UElements>
 523:/usr/include/c++/6/tuple ****     static constexpr bool _ImplicitlyConvertibleTuple()
 524:/usr/include/c++/6/tuple ****     {
 525:/usr/include/c++/6/tuple ****       return false;
 526:/usr/include/c++/6/tuple ****     }
 527:/usr/include/c++/6/tuple **** 
 528:/usr/include/c++/6/tuple ****     template<typename... _UElements>
 529:/usr/include/c++/6/tuple ****     static constexpr bool _MoveConstructibleTuple()
 530:/usr/include/c++/6/tuple ****     {
 531:/usr/include/c++/6/tuple ****       return false;
 532:/usr/include/c++/6/tuple ****     }
 533:/usr/include/c++/6/tuple **** 
 534:/usr/include/c++/6/tuple ****     template<typename... _UElements>
 535:/usr/include/c++/6/tuple ****     static constexpr bool _ImplicitlyMoveConvertibleTuple()
 536:/usr/include/c++/6/tuple ****     {
 537:/usr/include/c++/6/tuple ****       return false;
 538:/usr/include/c++/6/tuple ****     }
 539:/usr/include/c++/6/tuple **** 
 540:/usr/include/c++/6/tuple ****     template<typename... _UElements>
 541:/usr/include/c++/6/tuple ****     static constexpr bool _NonNestedTuple()
 542:/usr/include/c++/6/tuple ****     {
 543:/usr/include/c++/6/tuple ****       return true;
 544:/usr/include/c++/6/tuple ****     }
 545:/usr/include/c++/6/tuple ****     template<typename... _UElements>
 546:/usr/include/c++/6/tuple ****     static constexpr bool _NotSameTuple()
 547:/usr/include/c++/6/tuple ****     {
 548:/usr/include/c++/6/tuple ****       return  true;
 549:/usr/include/c++/6/tuple ****     }
 550:/usr/include/c++/6/tuple ****   };
 551:/usr/include/c++/6/tuple **** 
 552:/usr/include/c++/6/tuple ****   /// Primary class template, tuple
 553:/usr/include/c++/6/tuple ****   template<typename... _Elements> 
 554:/usr/include/c++/6/tuple ****     class tuple : public _Tuple_impl<0, _Elements...>
 555:/usr/include/c++/6/tuple ****     {
 556:/usr/include/c++/6/tuple ****       typedef _Tuple_impl<0, _Elements...> _Inherited;
 557:/usr/include/c++/6/tuple **** 
 558:/usr/include/c++/6/tuple ****       // Used for constraining the default constructor so
 559:/usr/include/c++/6/tuple ****       // that it becomes dependent on the constraints.
 560:/usr/include/c++/6/tuple ****       template<typename _Dummy>
 561:/usr/include/c++/6/tuple ****       struct _TC2
 562:/usr/include/c++/6/tuple ****       {
GAS LISTING /tmp/ccvmoMuv.s 			page 938


 563:/usr/include/c++/6/tuple ****         static constexpr bool _DefaultConstructibleTuple()
 564:/usr/include/c++/6/tuple ****         {
 565:/usr/include/c++/6/tuple ****           return __and_<is_default_constructible<_Elements>...>::value;
 566:/usr/include/c++/6/tuple ****         }
 567:/usr/include/c++/6/tuple ****         static constexpr bool _ImplicitlyDefaultConstructibleTuple()
 568:/usr/include/c++/6/tuple ****         {
 569:/usr/include/c++/6/tuple ****           return __and_<__is_implicitly_default_constructible<_Elements>...>
 570:/usr/include/c++/6/tuple ****             ::value;
 571:/usr/include/c++/6/tuple ****         }
 572:/usr/include/c++/6/tuple ****       };
 573:/usr/include/c++/6/tuple **** 
 574:/usr/include/c++/6/tuple ****     public:
 575:/usr/include/c++/6/tuple ****       template<typename _Dummy = void,
 576:/usr/include/c++/6/tuple ****                typename enable_if<_TC2<_Dummy>::
 577:/usr/include/c++/6/tuple ****                                     _ImplicitlyDefaultConstructibleTuple(),
 578:/usr/include/c++/6/tuple ****                                   bool>::type = true>
 579:/usr/include/c++/6/tuple ****       constexpr tuple()
 580:/usr/include/c++/6/tuple ****       : _Inherited() { }
 581:/usr/include/c++/6/tuple **** 
 582:/usr/include/c++/6/tuple ****       template<typename _Dummy = void,
 583:/usr/include/c++/6/tuple ****                typename enable_if<_TC2<_Dummy>::
 584:/usr/include/c++/6/tuple ****                                     _DefaultConstructibleTuple()
 585:/usr/include/c++/6/tuple ****                                   &&
 586:/usr/include/c++/6/tuple ****                                   !_TC2<_Dummy>::
 587:/usr/include/c++/6/tuple ****                                     _ImplicitlyDefaultConstructibleTuple(),
 588:/usr/include/c++/6/tuple ****                                   bool>::type = false>
 589:/usr/include/c++/6/tuple ****       explicit constexpr tuple()
 590:/usr/include/c++/6/tuple ****       : _Inherited() { }
 591:/usr/include/c++/6/tuple **** 
 592:/usr/include/c++/6/tuple ****       // Shortcut for the cases where constructors taking _Elements...
 593:/usr/include/c++/6/tuple ****       // need to be constrained.
 594:/usr/include/c++/6/tuple ****       template<typename _Dummy> using _TCC =
 595:/usr/include/c++/6/tuple ****         _TC<is_same<_Dummy, void>::value,
 596:/usr/include/c++/6/tuple ****             _Elements...>;
 597:/usr/include/c++/6/tuple **** 
 598:/usr/include/c++/6/tuple ****       template<typename _Dummy = void,
 599:/usr/include/c++/6/tuple ****                typename enable_if<
 600:/usr/include/c++/6/tuple ****                  _TCC<_Dummy>::template
 601:/usr/include/c++/6/tuple ****                    _ConstructibleTuple<_Elements...>()
 602:/usr/include/c++/6/tuple ****                  && _TCC<_Dummy>::template
 603:/usr/include/c++/6/tuple ****                    _ImplicitlyConvertibleTuple<_Elements...>()
 604:/usr/include/c++/6/tuple ****                  && (sizeof...(_Elements) >= 1),
 605:/usr/include/c++/6/tuple ****                bool>::type=true>
 606:/usr/include/c++/6/tuple ****         constexpr tuple(const _Elements&... __elements)
 607:/usr/include/c++/6/tuple ****       : _Inherited(__elements...) { }
 608:/usr/include/c++/6/tuple **** 
 609:/usr/include/c++/6/tuple ****       template<typename _Dummy = void,
 610:/usr/include/c++/6/tuple ****                typename enable_if<
 611:/usr/include/c++/6/tuple ****                  _TCC<_Dummy>::template
 612:/usr/include/c++/6/tuple ****                    _ConstructibleTuple<_Elements...>()
 613:/usr/include/c++/6/tuple ****                  && !_TCC<_Dummy>::template
 614:/usr/include/c++/6/tuple ****                    _ImplicitlyConvertibleTuple<_Elements...>()
 615:/usr/include/c++/6/tuple ****                  && (sizeof...(_Elements) >= 1),
 616:/usr/include/c++/6/tuple ****                bool>::type=false>
 617:/usr/include/c++/6/tuple ****       explicit constexpr tuple(const _Elements&... __elements)
 618:/usr/include/c++/6/tuple ****       : _Inherited(__elements...) { }
 619:/usr/include/c++/6/tuple **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 939


 620:/usr/include/c++/6/tuple ****       // Shortcut for the cases where constructors taking _UElements...
 621:/usr/include/c++/6/tuple ****       // need to be constrained.
 622:/usr/include/c++/6/tuple ****       template<typename... _UElements> using _TMC =
 623:/usr/include/c++/6/tuple ****                   _TC<(sizeof...(_Elements) == sizeof...(_UElements)),
 624:/usr/include/c++/6/tuple ****                       _Elements...>;
 625:/usr/include/c++/6/tuple **** 
 626:/usr/include/c++/6/tuple ****       template<typename... _UElements, typename
 627:/usr/include/c++/6/tuple **** 	       enable_if<
 628:/usr/include/c++/6/tuple **** 		  _TC<sizeof...(_UElements) == 1, _Elements...>::template
 629:/usr/include/c++/6/tuple **** 		    _NotSameTuple<_UElements...>()
 630:/usr/include/c++/6/tuple **** 		  && _TMC<_UElements...>::template
 631:/usr/include/c++/6/tuple ****                     _MoveConstructibleTuple<_UElements...>()
 632:/usr/include/c++/6/tuple ****                   && _TMC<_UElements...>::template
 633:/usr/include/c++/6/tuple ****                     _ImplicitlyMoveConvertibleTuple<_UElements...>()
 634:/usr/include/c++/6/tuple ****                   && (sizeof...(_Elements) >= 1),
 635:/usr/include/c++/6/tuple ****         bool>::type=true>
 636:/usr/include/c++/6/tuple ****         constexpr tuple(_UElements&&... __elements)
 637:/usr/include/c++/6/tuple ****         : _Inherited(std::forward<_UElements>(__elements)...) { }
 638:/usr/include/c++/6/tuple **** 
 639:/usr/include/c++/6/tuple ****       template<typename... _UElements, typename
 640:/usr/include/c++/6/tuple ****         enable_if<
 641:/usr/include/c++/6/tuple **** 		  _TC<sizeof...(_UElements) == 1, _Elements...>::template
 642:/usr/include/c++/6/tuple **** 		    _NotSameTuple<_UElements...>()
 643:/usr/include/c++/6/tuple **** 		  && _TMC<_UElements...>::template
 644:/usr/include/c++/6/tuple ****                     _MoveConstructibleTuple<_UElements...>()
 645:/usr/include/c++/6/tuple ****                   && !_TMC<_UElements...>::template
 646:/usr/include/c++/6/tuple ****                     _ImplicitlyMoveConvertibleTuple<_UElements...>()
 647:/usr/include/c++/6/tuple ****                   && (sizeof...(_Elements) >= 1),
 648:/usr/include/c++/6/tuple ****         bool>::type=false>
 649:/usr/include/c++/6/tuple ****         explicit constexpr tuple(_UElements&&... __elements)
 650:/usr/include/c++/6/tuple **** 	: _Inherited(std::forward<_UElements>(__elements)...) {	}
 651:/usr/include/c++/6/tuple **** 
 652:/usr/include/c++/6/tuple ****       constexpr tuple(const tuple&) = default;
 653:/usr/include/c++/6/tuple **** 
 654:/usr/include/c++/6/tuple ****       constexpr tuple(tuple&&) = default; 
 655:/usr/include/c++/6/tuple **** 
 656:/usr/include/c++/6/tuple ****       // Shortcut for the cases where constructors taking tuples
 657:/usr/include/c++/6/tuple ****       // must avoid creating temporaries.
 658:/usr/include/c++/6/tuple ****       template<typename _Dummy> using _TNTC =
 659:/usr/include/c++/6/tuple ****         _TC<is_same<_Dummy, void>::value && sizeof...(_Elements) == 1,
 660:/usr/include/c++/6/tuple ****             _Elements...>;
 661:/usr/include/c++/6/tuple **** 
 662:/usr/include/c++/6/tuple ****       template<typename... _UElements, typename _Dummy = void, typename
 663:/usr/include/c++/6/tuple ****         enable_if<_TMC<_UElements...>::template
 664:/usr/include/c++/6/tuple ****                     _ConstructibleTuple<_UElements...>()
 665:/usr/include/c++/6/tuple ****                   && _TMC<_UElements...>::template
 666:/usr/include/c++/6/tuple ****                     _ImplicitlyConvertibleTuple<_UElements...>()
 667:/usr/include/c++/6/tuple ****                   && _TNTC<_Dummy>::template
 668:/usr/include/c++/6/tuple ****                     _NonNestedTuple<const tuple<_UElements...>&>(),
 669:/usr/include/c++/6/tuple ****         bool>::type=true>
 670:/usr/include/c++/6/tuple ****         constexpr tuple(const tuple<_UElements...>& __in)
 671:/usr/include/c++/6/tuple ****         : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 672:/usr/include/c++/6/tuple ****         { }
 673:/usr/include/c++/6/tuple **** 
 674:/usr/include/c++/6/tuple ****       template<typename... _UElements, typename _Dummy = void, typename
 675:/usr/include/c++/6/tuple ****         enable_if<_TMC<_UElements...>::template
 676:/usr/include/c++/6/tuple ****                     _ConstructibleTuple<_UElements...>()
GAS LISTING /tmp/ccvmoMuv.s 			page 940


 677:/usr/include/c++/6/tuple ****                   && !_TMC<_UElements...>::template
 678:/usr/include/c++/6/tuple ****                     _ImplicitlyConvertibleTuple<_UElements...>()
 679:/usr/include/c++/6/tuple ****                   && _TNTC<_Dummy>::template
 680:/usr/include/c++/6/tuple ****                     _NonNestedTuple<const tuple<_UElements...>&>(),
 681:/usr/include/c++/6/tuple ****         bool>::type=false>
 682:/usr/include/c++/6/tuple ****         explicit constexpr tuple(const tuple<_UElements...>& __in)
 683:/usr/include/c++/6/tuple ****         : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 684:/usr/include/c++/6/tuple ****         { }
 685:/usr/include/c++/6/tuple **** 
 686:/usr/include/c++/6/tuple ****       template<typename... _UElements, typename _Dummy = void, typename
 687:/usr/include/c++/6/tuple ****         enable_if<_TMC<_UElements...>::template
 688:/usr/include/c++/6/tuple ****                     _MoveConstructibleTuple<_UElements...>()
 689:/usr/include/c++/6/tuple ****                   && _TMC<_UElements...>::template
 690:/usr/include/c++/6/tuple ****                     _ImplicitlyMoveConvertibleTuple<_UElements...>()
 691:/usr/include/c++/6/tuple ****                   && _TNTC<_Dummy>::template
 692:/usr/include/c++/6/tuple ****                     _NonNestedTuple<tuple<_UElements...>&&>(),
 693:/usr/include/c++/6/tuple ****         bool>::type=true>
 694:/usr/include/c++/6/tuple ****         constexpr tuple(tuple<_UElements...>&& __in)
 695:/usr/include/c++/6/tuple ****         : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }
 696:/usr/include/c++/6/tuple **** 
 697:/usr/include/c++/6/tuple ****       template<typename... _UElements, typename _Dummy = void, typename
 698:/usr/include/c++/6/tuple ****         enable_if<_TMC<_UElements...>::template
 699:/usr/include/c++/6/tuple ****                     _MoveConstructibleTuple<_UElements...>()
 700:/usr/include/c++/6/tuple ****                   && !_TMC<_UElements...>::template
 701:/usr/include/c++/6/tuple ****                     _ImplicitlyMoveConvertibleTuple<_UElements...>()
 702:/usr/include/c++/6/tuple ****                   && _TNTC<_Dummy>::template
 703:/usr/include/c++/6/tuple ****                     _NonNestedTuple<tuple<_UElements...>&&>(),
 704:/usr/include/c++/6/tuple ****         bool>::type=false>
 705:/usr/include/c++/6/tuple ****         explicit constexpr tuple(tuple<_UElements...>&& __in)
 706:/usr/include/c++/6/tuple ****         : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }
 707:/usr/include/c++/6/tuple **** 
 708:/usr/include/c++/6/tuple ****       // Allocator-extended constructors.
 709:/usr/include/c++/6/tuple **** 
 710:/usr/include/c++/6/tuple ****       template<typename _Alloc>
 711:/usr/include/c++/6/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a)
 712:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a) { }
 713:/usr/include/c++/6/tuple **** 
 714:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename _Dummy = void,
 715:/usr/include/c++/6/tuple ****                typename enable_if<
 716:/usr/include/c++/6/tuple ****                  _TCC<_Dummy>::template
 717:/usr/include/c++/6/tuple ****                    _ConstructibleTuple<_Elements...>()
 718:/usr/include/c++/6/tuple ****                  && _TCC<_Dummy>::template
 719:/usr/include/c++/6/tuple ****                    _ImplicitlyConvertibleTuple<_Elements...>(),
 720:/usr/include/c++/6/tuple ****                bool>::type=true>
 721:/usr/include/c++/6/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a,
 722:/usr/include/c++/6/tuple **** 	      const _Elements&... __elements)
 723:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a, __elements...) { }
 724:/usr/include/c++/6/tuple **** 
 725:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename _Dummy = void,
 726:/usr/include/c++/6/tuple ****                typename enable_if<
 727:/usr/include/c++/6/tuple ****                  _TCC<_Dummy>::template
 728:/usr/include/c++/6/tuple ****                    _ConstructibleTuple<_Elements...>()
 729:/usr/include/c++/6/tuple ****                  && !_TCC<_Dummy>::template
 730:/usr/include/c++/6/tuple ****                    _ImplicitlyConvertibleTuple<_Elements...>(),
 731:/usr/include/c++/6/tuple ****                bool>::type=false>
 732:/usr/include/c++/6/tuple **** 	explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
 733:/usr/include/c++/6/tuple ****                        const _Elements&... __elements)
GAS LISTING /tmp/ccvmoMuv.s 			page 941


 734:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a, __elements...) { }
 735:/usr/include/c++/6/tuple **** 
 736:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename... _UElements, typename
 737:/usr/include/c++/6/tuple ****         enable_if<_TMC<_UElements...>::template
 738:/usr/include/c++/6/tuple ****                     _MoveConstructibleTuple<_UElements...>()
 739:/usr/include/c++/6/tuple ****                   && _TMC<_UElements...>::template
 740:/usr/include/c++/6/tuple ****                     _ImplicitlyMoveConvertibleTuple<_UElements...>(),
 741:/usr/include/c++/6/tuple ****         bool>::type=true>
 742:/usr/include/c++/6/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a,
 743:/usr/include/c++/6/tuple **** 	      _UElements&&... __elements)
 744:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
 745:/usr/include/c++/6/tuple ****        	{ }
 746:/usr/include/c++/6/tuple **** 
 747:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename... _UElements, typename
 748:/usr/include/c++/6/tuple ****         enable_if<_TMC<_UElements...>::template
 749:/usr/include/c++/6/tuple ****                     _MoveConstructibleTuple<_UElements...>()
 750:/usr/include/c++/6/tuple ****                   && !_TMC<_UElements...>::template
 751:/usr/include/c++/6/tuple ****                     _ImplicitlyMoveConvertibleTuple<_UElements...>(),
 752:/usr/include/c++/6/tuple ****         bool>::type=false>
 753:/usr/include/c++/6/tuple **** 	explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
 754:/usr/include/c++/6/tuple **** 	      _UElements&&... __elements)
 755:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
 756:/usr/include/c++/6/tuple ****         { }
 757:/usr/include/c++/6/tuple **** 
 758:/usr/include/c++/6/tuple ****       template<typename _Alloc>
 759:/usr/include/c++/6/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
 760:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }
 761:/usr/include/c++/6/tuple **** 
 762:/usr/include/c++/6/tuple ****       template<typename _Alloc>
 763:/usr/include/c++/6/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
 764:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }
 765:/usr/include/c++/6/tuple **** 
 766:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename... _UElements, typename
 767:/usr/include/c++/6/tuple ****         enable_if<_TMC<_UElements...>::template
 768:/usr/include/c++/6/tuple ****                     _ConstructibleTuple<_UElements...>()
 769:/usr/include/c++/6/tuple ****                   && _TMC<_UElements...>::template
 770:/usr/include/c++/6/tuple ****                     _ImplicitlyConvertibleTuple<_UElements...>(),
 771:/usr/include/c++/6/tuple ****         bool>::type=true>
 772:/usr/include/c++/6/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a,
 773:/usr/include/c++/6/tuple **** 	      const tuple<_UElements...>& __in)
 774:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a,
 775:/usr/include/c++/6/tuple **** 	             static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 776:/usr/include/c++/6/tuple **** 	{ }
 777:/usr/include/c++/6/tuple **** 
 778:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename... _UElements, typename
 779:/usr/include/c++/6/tuple ****         enable_if<_TMC<_UElements...>::template
 780:/usr/include/c++/6/tuple ****                     _ConstructibleTuple<_UElements...>()
 781:/usr/include/c++/6/tuple ****                   && !_TMC<_UElements...>::template
 782:/usr/include/c++/6/tuple ****                     _ImplicitlyConvertibleTuple<_UElements...>(),
 783:/usr/include/c++/6/tuple ****         bool>::type=false>
 784:/usr/include/c++/6/tuple **** 	explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
 785:/usr/include/c++/6/tuple **** 	      const tuple<_UElements...>& __in)
 786:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a,
 787:/usr/include/c++/6/tuple **** 	             static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 788:/usr/include/c++/6/tuple **** 	{ }
 789:/usr/include/c++/6/tuple **** 
 790:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename... _UElements, typename
GAS LISTING /tmp/ccvmoMuv.s 			page 942


 791:/usr/include/c++/6/tuple ****         enable_if<_TMC<_UElements...>::template
 792:/usr/include/c++/6/tuple ****                     _MoveConstructibleTuple<_UElements...>()
 793:/usr/include/c++/6/tuple ****                   && _TMC<_UElements...>::template
 794:/usr/include/c++/6/tuple ****                     _ImplicitlyMoveConvertibleTuple<_UElements...>(),
 795:/usr/include/c++/6/tuple ****         bool>::type=true>
 796:/usr/include/c++/6/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a,
 797:/usr/include/c++/6/tuple **** 	      tuple<_UElements...>&& __in)
 798:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a,
 799:/usr/include/c++/6/tuple **** 	             static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 800:/usr/include/c++/6/tuple **** 	{ }
 801:/usr/include/c++/6/tuple **** 
 802:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename... _UElements, typename
 803:/usr/include/c++/6/tuple ****         enable_if<_TMC<_UElements...>::template
 804:/usr/include/c++/6/tuple ****                     _MoveConstructibleTuple<_UElements...>()
 805:/usr/include/c++/6/tuple ****                   && !_TMC<_UElements...>::template
 806:/usr/include/c++/6/tuple ****                     _ImplicitlyMoveConvertibleTuple<_UElements...>(),
 807:/usr/include/c++/6/tuple ****         bool>::type=false>
 808:/usr/include/c++/6/tuple **** 	explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
 809:/usr/include/c++/6/tuple **** 	      tuple<_UElements...>&& __in)
 810:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a,
 811:/usr/include/c++/6/tuple **** 	             static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 812:/usr/include/c++/6/tuple **** 	{ }
 813:/usr/include/c++/6/tuple **** 
 814:/usr/include/c++/6/tuple ****       tuple&
 815:/usr/include/c++/6/tuple ****       operator=(const tuple& __in)
 816:/usr/include/c++/6/tuple ****       {
 817:/usr/include/c++/6/tuple **** 	static_cast<_Inherited&>(*this) = __in;
 818:/usr/include/c++/6/tuple **** 	return *this;
 819:/usr/include/c++/6/tuple ****       }
 820:/usr/include/c++/6/tuple **** 
 821:/usr/include/c++/6/tuple ****       tuple&
 822:/usr/include/c++/6/tuple ****       operator=(tuple&& __in)
 823:/usr/include/c++/6/tuple ****       noexcept(is_nothrow_move_assignable<_Inherited>::value)
 824:/usr/include/c++/6/tuple ****       {
 825:/usr/include/c++/6/tuple **** 	static_cast<_Inherited&>(*this) = std::move(__in);
 826:/usr/include/c++/6/tuple **** 	return *this;
 827:/usr/include/c++/6/tuple ****       }
 828:/usr/include/c++/6/tuple **** 
 829:/usr/include/c++/6/tuple ****       template<typename... _UElements, typename = typename
 830:/usr/include/c++/6/tuple **** 	       enable_if<sizeof...(_UElements)
 831:/usr/include/c++/6/tuple **** 			 == sizeof...(_Elements)>::type>
 832:/usr/include/c++/6/tuple ****         tuple&
 833:/usr/include/c++/6/tuple ****         operator=(const tuple<_UElements...>& __in)
 834:/usr/include/c++/6/tuple ****         {
 835:/usr/include/c++/6/tuple **** 	  static_cast<_Inherited&>(*this) = __in;
 836:/usr/include/c++/6/tuple **** 	  return *this;
 837:/usr/include/c++/6/tuple **** 	}
 838:/usr/include/c++/6/tuple **** 
 839:/usr/include/c++/6/tuple ****       template<typename... _UElements, typename = typename
 840:/usr/include/c++/6/tuple **** 	       enable_if<sizeof...(_UElements)
 841:/usr/include/c++/6/tuple **** 			 == sizeof...(_Elements)>::type>
 842:/usr/include/c++/6/tuple ****         tuple&
 843:/usr/include/c++/6/tuple ****         operator=(tuple<_UElements...>&& __in)
 844:/usr/include/c++/6/tuple ****         {
 845:/usr/include/c++/6/tuple **** 	  static_cast<_Inherited&>(*this) = std::move(__in);
 846:/usr/include/c++/6/tuple **** 	  return *this;
 847:/usr/include/c++/6/tuple **** 	}
GAS LISTING /tmp/ccvmoMuv.s 			page 943


 848:/usr/include/c++/6/tuple **** 
 849:/usr/include/c++/6/tuple ****       void
 850:/usr/include/c++/6/tuple ****       swap(tuple& __in)
 851:/usr/include/c++/6/tuple ****       noexcept(noexcept(__in._M_swap(__in)))
 852:/usr/include/c++/6/tuple ****       { _Inherited::_M_swap(__in); }
 853:/usr/include/c++/6/tuple ****     };
 854:/usr/include/c++/6/tuple **** 
 855:/usr/include/c++/6/tuple ****   // Explicit specialization, zero-element tuple.
 856:/usr/include/c++/6/tuple ****   template<>
 857:/usr/include/c++/6/tuple ****     class tuple<>
 858:/usr/include/c++/6/tuple ****     {
 859:/usr/include/c++/6/tuple ****     public:
 860:/usr/include/c++/6/tuple ****       void swap(tuple&) noexcept { /* no-op */ }
 861:/usr/include/c++/6/tuple ****     };
 862:/usr/include/c++/6/tuple **** 
 863:/usr/include/c++/6/tuple ****   /// Partial specialization, 2-element tuple.
 864:/usr/include/c++/6/tuple ****   /// Includes construction and assignment from a pair.
 865:/usr/include/c++/6/tuple ****   template<typename _T1, typename _T2>
 866:/usr/include/c++/6/tuple ****     class tuple<_T1, _T2> : public _Tuple_impl<0, _T1, _T2>
 867:/usr/include/c++/6/tuple ****     {
 868:/usr/include/c++/6/tuple ****       typedef _Tuple_impl<0, _T1, _T2> _Inherited;
 869:/usr/include/c++/6/tuple **** 
 870:/usr/include/c++/6/tuple ****     public:
 871:/usr/include/c++/6/tuple ****       template <typename _U1 = _T1,
 872:/usr/include/c++/6/tuple ****                 typename _U2 = _T2,
 873:/usr/include/c++/6/tuple ****                 typename enable_if<__and_<
 874:/usr/include/c++/6/tuple ****                                      __is_implicitly_default_constructible<_U1>,
 875:/usr/include/c++/6/tuple ****                                      __is_implicitly_default_constructible<_U2>>
 876:/usr/include/c++/6/tuple ****                                    ::value, bool>::type = true>
 877:/usr/include/c++/6/tuple **** 
 878:/usr/include/c++/6/tuple ****       constexpr tuple()
 879:/usr/include/c++/6/tuple ****       : _Inherited() { }
 880:/usr/include/c++/6/tuple **** 
 881:/usr/include/c++/6/tuple ****       template <typename _U1 = _T1,
 882:/usr/include/c++/6/tuple ****                 typename _U2 = _T2,
 883:/usr/include/c++/6/tuple ****                 typename enable_if<
 884:/usr/include/c++/6/tuple ****                   __and_<
 885:/usr/include/c++/6/tuple ****                     is_default_constructible<_U1>,
 886:/usr/include/c++/6/tuple ****                     is_default_constructible<_U2>,
 887:/usr/include/c++/6/tuple ****                     __not_<
 888:/usr/include/c++/6/tuple ****                       __and_<__is_implicitly_default_constructible<_U1>,
 889:/usr/include/c++/6/tuple ****                              __is_implicitly_default_constructible<_U2>>>>
 890:/usr/include/c++/6/tuple ****                   ::value, bool>::type = false>
 891:/usr/include/c++/6/tuple **** 
 892:/usr/include/c++/6/tuple ****       explicit constexpr tuple()
 893:/usr/include/c++/6/tuple ****       : _Inherited() { }
 894:/usr/include/c++/6/tuple **** 
 895:/usr/include/c++/6/tuple ****       // Shortcut for the cases where constructors taking _T1, _T2
 896:/usr/include/c++/6/tuple ****       // need to be constrained.
 897:/usr/include/c++/6/tuple ****       template<typename _Dummy> using _TCC =
 898:/usr/include/c++/6/tuple ****         _TC<is_same<_Dummy, void>::value, _T1, _T2>;
 899:/usr/include/c++/6/tuple **** 
 900:/usr/include/c++/6/tuple ****       template<typename _Dummy = void, typename
 901:/usr/include/c++/6/tuple ****                enable_if<_TCC<_Dummy>::template
 902:/usr/include/c++/6/tuple ****                            _ConstructibleTuple<_T1, _T2>()
 903:/usr/include/c++/6/tuple ****                          && _TCC<_Dummy>::template
 904:/usr/include/c++/6/tuple ****                            _ImplicitlyConvertibleTuple<_T1, _T2>(),
GAS LISTING /tmp/ccvmoMuv.s 			page 944


 905:/usr/include/c++/6/tuple **** 	bool>::type = true>
 906:/usr/include/c++/6/tuple ****         constexpr tuple(const _T1& __a1, const _T2& __a2)
 907:/usr/include/c++/6/tuple ****         : _Inherited(__a1, __a2) { }
 908:/usr/include/c++/6/tuple **** 
 909:/usr/include/c++/6/tuple ****       template<typename _Dummy = void, typename
 910:/usr/include/c++/6/tuple ****                enable_if<_TCC<_Dummy>::template
 911:/usr/include/c++/6/tuple ****                            _ConstructibleTuple<_T1, _T2>()
 912:/usr/include/c++/6/tuple ****                          && !_TCC<_Dummy>::template
 913:/usr/include/c++/6/tuple ****                            _ImplicitlyConvertibleTuple<_T1, _T2>(),
 914:/usr/include/c++/6/tuple **** 	bool>::type = false>
 915:/usr/include/c++/6/tuple ****         explicit constexpr tuple(const _T1& __a1, const _T2& __a2)
 916:/usr/include/c++/6/tuple ****         : _Inherited(__a1, __a2) { }
 917:/usr/include/c++/6/tuple **** 
 918:/usr/include/c++/6/tuple ****       // Shortcut for the cases where constructors taking _U1, _U2
 919:/usr/include/c++/6/tuple ****       // need to be constrained.
 920:/usr/include/c++/6/tuple ****       using _TMC = _TC<true, _T1, _T2>;
 921:/usr/include/c++/6/tuple **** 
 922:/usr/include/c++/6/tuple ****       template<typename _U1, typename _U2, typename
 923:/usr/include/c++/6/tuple ****         enable_if<_TMC::template
 924:/usr/include/c++/6/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
 925:/usr/include/c++/6/tuple ****                   && _TMC::template
 926:/usr/include/c++/6/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>()
 927:/usr/include/c++/6/tuple **** 	          && !is_same<typename decay<_U1>::type,
 928:/usr/include/c++/6/tuple **** 			      allocator_arg_t>::value,
 929:/usr/include/c++/6/tuple **** 	bool>::type = true>
 930:/usr/include/c++/6/tuple ****         constexpr tuple(_U1&& __a1, _U2&& __a2)
 931:/usr/include/c++/6/tuple **** 	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 932:/usr/include/c++/6/tuple **** 
 933:/usr/include/c++/6/tuple ****       template<typename _U1, typename _U2, typename
 934:/usr/include/c++/6/tuple ****         enable_if<_TMC::template
 935:/usr/include/c++/6/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
 936:/usr/include/c++/6/tuple ****                   && !_TMC::template
 937:/usr/include/c++/6/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>()
 938:/usr/include/c++/6/tuple **** 	          && !is_same<typename decay<_U1>::type,
 939:/usr/include/c++/6/tuple **** 			      allocator_arg_t>::value,
 940:/usr/include/c++/6/tuple **** 	bool>::type = false>
 941:/usr/include/c++/6/tuple ****         explicit constexpr tuple(_U1&& __a1, _U2&& __a2)
 942:/usr/include/c++/6/tuple **** 	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 943:/usr/include/c++/6/tuple **** 
 944:/usr/include/c++/6/tuple ****       constexpr tuple(const tuple&) = default;
 945:/usr/include/c++/6/tuple **** 
 946:/usr/include/c++/6/tuple ****       constexpr tuple(tuple&&) = default;
 947:/usr/include/c++/6/tuple **** 
 948:/usr/include/c++/6/tuple ****       template<typename _U1, typename _U2, typename
 949:/usr/include/c++/6/tuple ****         enable_if<_TMC::template
 950:/usr/include/c++/6/tuple ****                     _ConstructibleTuple<_U1, _U2>()
 951:/usr/include/c++/6/tuple ****                   && _TMC::template
 952:/usr/include/c++/6/tuple ****                     _ImplicitlyConvertibleTuple<_U1, _U2>(),
 953:/usr/include/c++/6/tuple **** 	bool>::type = true>
 954:/usr/include/c++/6/tuple ****         constexpr tuple(const tuple<_U1, _U2>& __in)
 955:/usr/include/c++/6/tuple **** 	: _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }
 956:/usr/include/c++/6/tuple **** 
 957:/usr/include/c++/6/tuple ****       template<typename _U1, typename _U2, typename
 958:/usr/include/c++/6/tuple ****         enable_if<_TMC::template
 959:/usr/include/c++/6/tuple ****                     _ConstructibleTuple<_U1, _U2>()
 960:/usr/include/c++/6/tuple ****                   && !_TMC::template
 961:/usr/include/c++/6/tuple ****                     _ImplicitlyConvertibleTuple<_U1, _U2>(),
GAS LISTING /tmp/ccvmoMuv.s 			page 945


 962:/usr/include/c++/6/tuple **** 	bool>::type = false>
 963:/usr/include/c++/6/tuple ****         explicit constexpr tuple(const tuple<_U1, _U2>& __in)
 964:/usr/include/c++/6/tuple **** 	: _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }
 965:/usr/include/c++/6/tuple **** 
 966:/usr/include/c++/6/tuple ****       template<typename _U1, typename _U2, typename
 967:/usr/include/c++/6/tuple ****         enable_if<_TMC::template
 968:/usr/include/c++/6/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
 969:/usr/include/c++/6/tuple ****                   && _TMC::template
 970:/usr/include/c++/6/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 971:/usr/include/c++/6/tuple **** 	bool>::type = true>
 972:/usr/include/c++/6/tuple ****         constexpr tuple(tuple<_U1, _U2>&& __in)
 973:/usr/include/c++/6/tuple **** 	: _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }
 974:/usr/include/c++/6/tuple **** 
 975:/usr/include/c++/6/tuple ****       template<typename _U1, typename _U2, typename
 976:/usr/include/c++/6/tuple ****         enable_if<_TMC::template
 977:/usr/include/c++/6/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
 978:/usr/include/c++/6/tuple ****                   && !_TMC::template
 979:/usr/include/c++/6/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 980:/usr/include/c++/6/tuple **** 	bool>::type = false>
 981:/usr/include/c++/6/tuple ****         explicit constexpr tuple(tuple<_U1, _U2>&& __in)
 982:/usr/include/c++/6/tuple **** 	: _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }
 983:/usr/include/c++/6/tuple **** 
 984:/usr/include/c++/6/tuple ****       template<typename _U1, typename _U2, typename
 985:/usr/include/c++/6/tuple ****         enable_if<_TMC::template
 986:/usr/include/c++/6/tuple ****                     _ConstructibleTuple<_U1, _U2>()
 987:/usr/include/c++/6/tuple ****                   && _TMC::template
 988:/usr/include/c++/6/tuple ****                     _ImplicitlyConvertibleTuple<_U1, _U2>(),
 989:/usr/include/c++/6/tuple **** 	bool>::type = true>
 990:/usr/include/c++/6/tuple ****         constexpr tuple(const pair<_U1, _U2>& __in)
 991:/usr/include/c++/6/tuple **** 	: _Inherited(__in.first, __in.second) { }
 992:/usr/include/c++/6/tuple **** 
 993:/usr/include/c++/6/tuple ****       template<typename _U1, typename _U2, typename
 994:/usr/include/c++/6/tuple ****         enable_if<_TMC::template
 995:/usr/include/c++/6/tuple ****                     _ConstructibleTuple<_U1, _U2>()
 996:/usr/include/c++/6/tuple ****                   && !_TMC::template
 997:/usr/include/c++/6/tuple ****                     _ImplicitlyConvertibleTuple<_U1, _U2>(),
 998:/usr/include/c++/6/tuple **** 	bool>::type = false>
 999:/usr/include/c++/6/tuple ****         explicit constexpr tuple(const pair<_U1, _U2>& __in)
1000:/usr/include/c++/6/tuple **** 	: _Inherited(__in.first, __in.second) { }
1001:/usr/include/c++/6/tuple **** 
1002:/usr/include/c++/6/tuple ****       template<typename _U1, typename _U2, typename
1003:/usr/include/c++/6/tuple ****         enable_if<_TMC::template
1004:/usr/include/c++/6/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1005:/usr/include/c++/6/tuple ****                   && _TMC::template
1006:/usr/include/c++/6/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1007:/usr/include/c++/6/tuple **** 	bool>::type = true>
1008:/usr/include/c++/6/tuple ****         constexpr tuple(pair<_U1, _U2>&& __in)
1009:/usr/include/c++/6/tuple **** 	: _Inherited(std::forward<_U1>(__in.first),
1010:/usr/include/c++/6/tuple **** 		     std::forward<_U2>(__in.second)) { }
1011:/usr/include/c++/6/tuple **** 
1012:/usr/include/c++/6/tuple ****       template<typename _U1, typename _U2, typename
1013:/usr/include/c++/6/tuple ****         enable_if<_TMC::template
1014:/usr/include/c++/6/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1015:/usr/include/c++/6/tuple ****                   && !_TMC::template
1016:/usr/include/c++/6/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1017:/usr/include/c++/6/tuple **** 	bool>::type = false>
1018:/usr/include/c++/6/tuple ****         explicit constexpr tuple(pair<_U1, _U2>&& __in)
GAS LISTING /tmp/ccvmoMuv.s 			page 946


1019:/usr/include/c++/6/tuple **** 	: _Inherited(std::forward<_U1>(__in.first),
1020:/usr/include/c++/6/tuple **** 		     std::forward<_U2>(__in.second)) { }
1021:/usr/include/c++/6/tuple **** 
1022:/usr/include/c++/6/tuple ****       // Allocator-extended constructors.
1023:/usr/include/c++/6/tuple **** 
1024:/usr/include/c++/6/tuple ****       template<typename _Alloc>
1025:/usr/include/c++/6/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a)
1026:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a) { }
1027:/usr/include/c++/6/tuple **** 
1028:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename _Dummy = void,
1029:/usr/include/c++/6/tuple ****                typename enable_if<
1030:/usr/include/c++/6/tuple ****                  _TCC<_Dummy>::template
1031:/usr/include/c++/6/tuple ****                    _ConstructibleTuple<_T1, _T2>()
1032:/usr/include/c++/6/tuple ****                  && _TCC<_Dummy>::template
1033:/usr/include/c++/6/tuple ****                    _ImplicitlyConvertibleTuple<_T1, _T2>(),
1034:/usr/include/c++/6/tuple ****                bool>::type=true>
1035:/usr/include/c++/6/tuple **** 
1036:/usr/include/c++/6/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a,
1037:/usr/include/c++/6/tuple **** 	      const _T1& __a1, const _T2& __a2)
1038:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a, __a1, __a2) { }
1039:/usr/include/c++/6/tuple **** 
1040:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename _Dummy = void,
1041:/usr/include/c++/6/tuple ****                typename enable_if<
1042:/usr/include/c++/6/tuple ****                  _TCC<_Dummy>::template
1043:/usr/include/c++/6/tuple ****                    _ConstructibleTuple<_T1, _T2>()
1044:/usr/include/c++/6/tuple ****                  && !_TCC<_Dummy>::template
1045:/usr/include/c++/6/tuple ****                    _ImplicitlyConvertibleTuple<_T1, _T2>(),
1046:/usr/include/c++/6/tuple ****                bool>::type=false>
1047:/usr/include/c++/6/tuple **** 
1048:/usr/include/c++/6/tuple **** 	explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
1049:/usr/include/c++/6/tuple **** 	      const _T1& __a1, const _T2& __a2)
1050:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a, __a1, __a2) { }
1051:/usr/include/c++/6/tuple **** 
1052:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1053:/usr/include/c++/6/tuple ****         enable_if<_TMC::template
1054:/usr/include/c++/6/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1055:/usr/include/c++/6/tuple ****                   && _TMC::template
1056:/usr/include/c++/6/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1057:/usr/include/c++/6/tuple **** 	bool>::type = true>
1058:/usr/include/c++/6/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a, _U1&& __a1, _U2&& __a2)
1059:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a, std::forward<_U1>(__a1),
1060:/usr/include/c++/6/tuple **** 	             std::forward<_U2>(__a2)) { }
1061:/usr/include/c++/6/tuple **** 
1062:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1063:/usr/include/c++/6/tuple ****         enable_if<_TMC::template
1064:/usr/include/c++/6/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1065:/usr/include/c++/6/tuple ****                   && !_TMC::template
1066:/usr/include/c++/6/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1067:/usr/include/c++/6/tuple **** 	bool>::type = false>
1068:/usr/include/c++/6/tuple **** 	explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
1069:/usr/include/c++/6/tuple ****                        _U1&& __a1, _U2&& __a2)
1070:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a, std::forward<_U1>(__a1),
1071:/usr/include/c++/6/tuple **** 	             std::forward<_U2>(__a2)) { }
1072:/usr/include/c++/6/tuple **** 
1073:/usr/include/c++/6/tuple ****       template<typename _Alloc>
1074:/usr/include/c++/6/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
1075:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }
GAS LISTING /tmp/ccvmoMuv.s 			page 947


1076:/usr/include/c++/6/tuple **** 
1077:/usr/include/c++/6/tuple ****       template<typename _Alloc>
1078:/usr/include/c++/6/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
1079:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }
1080:/usr/include/c++/6/tuple **** 
1081:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1082:/usr/include/c++/6/tuple ****         enable_if<_TMC::template
1083:/usr/include/c++/6/tuple ****                     _ConstructibleTuple<_U1, _U2>()
1084:/usr/include/c++/6/tuple ****                   && _TMC::template
1085:/usr/include/c++/6/tuple ****                     _ImplicitlyConvertibleTuple<_U1, _U2>(),
1086:/usr/include/c++/6/tuple **** 	bool>::type = true>
1087:/usr/include/c++/6/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a,
1088:/usr/include/c++/6/tuple **** 	      const tuple<_U1, _U2>& __in)
1089:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a,
1090:/usr/include/c++/6/tuple **** 	             static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
1091:/usr/include/c++/6/tuple **** 	{ }
1092:/usr/include/c++/6/tuple **** 
1093:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1094:/usr/include/c++/6/tuple ****         enable_if<_TMC::template
1095:/usr/include/c++/6/tuple ****                     _ConstructibleTuple<_U1, _U2>()
1096:/usr/include/c++/6/tuple ****                   && !_TMC::template
1097:/usr/include/c++/6/tuple ****                     _ImplicitlyConvertibleTuple<_U1, _U2>(),
1098:/usr/include/c++/6/tuple **** 	bool>::type = false>
1099:/usr/include/c++/6/tuple **** 	explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
1100:/usr/include/c++/6/tuple **** 	      const tuple<_U1, _U2>& __in)
1101:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a,
1102:/usr/include/c++/6/tuple **** 	             static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
1103:/usr/include/c++/6/tuple **** 	{ }
1104:/usr/include/c++/6/tuple **** 
1105:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1106:/usr/include/c++/6/tuple ****         enable_if<_TMC::template
1107:/usr/include/c++/6/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1108:/usr/include/c++/6/tuple ****                   && _TMC::template
1109:/usr/include/c++/6/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1110:/usr/include/c++/6/tuple **** 	bool>::type = true>
1111:/usr/include/c++/6/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)
1112:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
1113:/usr/include/c++/6/tuple **** 	{ }
1114:/usr/include/c++/6/tuple **** 
1115:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1116:/usr/include/c++/6/tuple ****         enable_if<_TMC::template
1117:/usr/include/c++/6/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1118:/usr/include/c++/6/tuple ****                   && !_TMC::template
1119:/usr/include/c++/6/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1120:/usr/include/c++/6/tuple **** 	bool>::type = false>
1121:/usr/include/c++/6/tuple **** 	explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
1122:/usr/include/c++/6/tuple ****                        tuple<_U1, _U2>&& __in)
1123:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
1124:/usr/include/c++/6/tuple **** 	{ }
1125:/usr/include/c++/6/tuple **** 
1126:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1127:/usr/include/c++/6/tuple ****         enable_if<_TMC::template
1128:/usr/include/c++/6/tuple ****                     _ConstructibleTuple<_U1, _U2>()
1129:/usr/include/c++/6/tuple ****                   && _TMC::template
1130:/usr/include/c++/6/tuple ****                     _ImplicitlyConvertibleTuple<_U1, _U2>(),
1131:/usr/include/c++/6/tuple **** 	bool>::type = true>
1132:/usr/include/c++/6/tuple ****         tuple(allocator_arg_t __tag, const _Alloc& __a,
GAS LISTING /tmp/ccvmoMuv.s 			page 948


1133:/usr/include/c++/6/tuple **** 	      const pair<_U1, _U2>& __in)
1134:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a, __in.first, __in.second) { }
1135:/usr/include/c++/6/tuple **** 
1136:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1137:/usr/include/c++/6/tuple ****         enable_if<_TMC::template
1138:/usr/include/c++/6/tuple ****                     _ConstructibleTuple<_U1, _U2>()
1139:/usr/include/c++/6/tuple ****                   && !_TMC::template
1140:/usr/include/c++/6/tuple ****                     _ImplicitlyConvertibleTuple<_U1, _U2>(),
1141:/usr/include/c++/6/tuple **** 	bool>::type = false>
1142:/usr/include/c++/6/tuple ****         explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
1143:/usr/include/c++/6/tuple **** 	      const pair<_U1, _U2>& __in)
1144:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a, __in.first, __in.second) { }
1145:/usr/include/c++/6/tuple **** 
1146:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1147:/usr/include/c++/6/tuple ****         enable_if<_TMC::template
1148:/usr/include/c++/6/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1149:/usr/include/c++/6/tuple ****                   && _TMC::template
1150:/usr/include/c++/6/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1151:/usr/include/c++/6/tuple **** 	bool>::type = true>
1152:/usr/include/c++/6/tuple ****         tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)
1153:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a, std::forward<_U1>(__in.first),
1154:/usr/include/c++/6/tuple **** 		     std::forward<_U2>(__in.second)) { }
1155:/usr/include/c++/6/tuple **** 
1156:/usr/include/c++/6/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1157:/usr/include/c++/6/tuple ****         enable_if<_TMC::template
1158:/usr/include/c++/6/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1159:/usr/include/c++/6/tuple ****                   && !_TMC::template
1160:/usr/include/c++/6/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1161:/usr/include/c++/6/tuple **** 	bool>::type = false>
1162:/usr/include/c++/6/tuple ****         explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
1163:/usr/include/c++/6/tuple ****                        pair<_U1, _U2>&& __in)
1164:/usr/include/c++/6/tuple **** 	: _Inherited(__tag, __a, std::forward<_U1>(__in.first),
1165:/usr/include/c++/6/tuple **** 		     std::forward<_U2>(__in.second)) { }
1166:/usr/include/c++/6/tuple **** 
1167:/usr/include/c++/6/tuple ****       tuple&
1168:/usr/include/c++/6/tuple ****       operator=(const tuple& __in)
1169:/usr/include/c++/6/tuple ****       {
1170:/usr/include/c++/6/tuple **** 	static_cast<_Inherited&>(*this) = __in;
1171:/usr/include/c++/6/tuple **** 	return *this;
1172:/usr/include/c++/6/tuple ****       }
1173:/usr/include/c++/6/tuple **** 
1174:/usr/include/c++/6/tuple ****       tuple&
1175:/usr/include/c++/6/tuple ****       operator=(tuple&& __in)
1176:/usr/include/c++/6/tuple ****       noexcept(is_nothrow_move_assignable<_Inherited>::value)
1177:/usr/include/c++/6/tuple ****       {
1178:/usr/include/c++/6/tuple **** 	static_cast<_Inherited&>(*this) = std::move(__in);
1179:/usr/include/c++/6/tuple **** 	return *this;
1180:/usr/include/c++/6/tuple ****       }
1181:/usr/include/c++/6/tuple **** 
1182:/usr/include/c++/6/tuple ****       template<typename _U1, typename _U2>
1183:/usr/include/c++/6/tuple ****         tuple&
1184:/usr/include/c++/6/tuple ****         operator=(const tuple<_U1, _U2>& __in)
1185:/usr/include/c++/6/tuple ****         {
1186:/usr/include/c++/6/tuple **** 	  static_cast<_Inherited&>(*this) = __in;
1187:/usr/include/c++/6/tuple **** 	  return *this;
1188:/usr/include/c++/6/tuple **** 	}
1189:/usr/include/c++/6/tuple **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 949


1190:/usr/include/c++/6/tuple ****       template<typename _U1, typename _U2>
1191:/usr/include/c++/6/tuple ****         tuple&
1192:/usr/include/c++/6/tuple ****         operator=(tuple<_U1, _U2>&& __in)
1193:/usr/include/c++/6/tuple ****         {
1194:/usr/include/c++/6/tuple **** 	  static_cast<_Inherited&>(*this) = std::move(__in);
1195:/usr/include/c++/6/tuple **** 	  return *this;
1196:/usr/include/c++/6/tuple **** 	}
1197:/usr/include/c++/6/tuple **** 
1198:/usr/include/c++/6/tuple ****       template<typename _U1, typename _U2>
1199:/usr/include/c++/6/tuple ****         tuple&
1200:/usr/include/c++/6/tuple ****         operator=(const pair<_U1, _U2>& __in)
1201:/usr/include/c++/6/tuple ****         {
1202:/usr/include/c++/6/tuple **** 	  this->_M_head(*this) = __in.first;
1203:/usr/include/c++/6/tuple **** 	  this->_M_tail(*this)._M_head(*this) = __in.second;
1204:/usr/include/c++/6/tuple **** 	  return *this;
1205:/usr/include/c++/6/tuple **** 	}
1206:/usr/include/c++/6/tuple **** 
1207:/usr/include/c++/6/tuple ****       template<typename _U1, typename _U2>
1208:/usr/include/c++/6/tuple ****         tuple&
1209:/usr/include/c++/6/tuple ****         operator=(pair<_U1, _U2>&& __in)
1210:/usr/include/c++/6/tuple ****         {
1211:/usr/include/c++/6/tuple **** 	  this->_M_head(*this) = std::forward<_U1>(__in.first);
1212:/usr/include/c++/6/tuple **** 	  this->_M_tail(*this)._M_head(*this) = std::forward<_U2>(__in.second);
1213:/usr/include/c++/6/tuple **** 	  return *this;
1214:/usr/include/c++/6/tuple **** 	}
1215:/usr/include/c++/6/tuple **** 
1216:/usr/include/c++/6/tuple ****       void
1217:/usr/include/c++/6/tuple ****       swap(tuple& __in)
1218:/usr/include/c++/6/tuple ****       noexcept(noexcept(__in._M_swap(__in)))
1219:/usr/include/c++/6/tuple ****       { _Inherited::_M_swap(__in); }
1220:/usr/include/c++/6/tuple ****     };
1221:/usr/include/c++/6/tuple **** 
1222:/usr/include/c++/6/tuple **** 
1223:/usr/include/c++/6/tuple ****   /**
1224:/usr/include/c++/6/tuple ****    * Recursive case for tuple_element: strip off the first element in
1225:/usr/include/c++/6/tuple ****    * the tuple and retrieve the (i-1)th element of the remaining tuple.
1226:/usr/include/c++/6/tuple ****    */
1227:/usr/include/c++/6/tuple ****   template<std::size_t __i, typename _Head, typename... _Tail>
1228:/usr/include/c++/6/tuple ****     struct tuple_element<__i, tuple<_Head, _Tail...> >
1229:/usr/include/c++/6/tuple ****     : tuple_element<__i - 1, tuple<_Tail...> > { };
1230:/usr/include/c++/6/tuple **** 
1231:/usr/include/c++/6/tuple ****   /**
1232:/usr/include/c++/6/tuple ****    * Basis case for tuple_element: The first element is the one we're seeking.
1233:/usr/include/c++/6/tuple ****    */
1234:/usr/include/c++/6/tuple ****   template<typename _Head, typename... _Tail>
1235:/usr/include/c++/6/tuple ****     struct tuple_element<0, tuple<_Head, _Tail...> >
1236:/usr/include/c++/6/tuple ****     {
1237:/usr/include/c++/6/tuple ****       typedef _Head type;
1238:/usr/include/c++/6/tuple ****     };
1239:/usr/include/c++/6/tuple **** 
1240:/usr/include/c++/6/tuple ****   /// class tuple_size
1241:/usr/include/c++/6/tuple ****   template<typename... _Elements>
1242:/usr/include/c++/6/tuple ****     struct tuple_size<tuple<_Elements...>>
1243:/usr/include/c++/6/tuple ****     : public integral_constant<std::size_t, sizeof...(_Elements)> { };
1244:/usr/include/c++/6/tuple **** 
1245:/usr/include/c++/6/tuple ****   template<std::size_t __i, typename _Head, typename... _Tail>
1246:/usr/include/c++/6/tuple ****     constexpr _Head&
GAS LISTING /tmp/ccvmoMuv.s 			page 950


1247:/usr/include/c++/6/tuple ****     __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
1248:/usr/include/c++/6/tuple ****     { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
1249:/usr/include/c++/6/tuple **** 
1250:/usr/include/c++/6/tuple ****   template<std::size_t __i, typename _Head, typename... _Tail>
1251:/usr/include/c++/6/tuple ****     constexpr const _Head&
1252:/usr/include/c++/6/tuple ****     __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
1253:/usr/include/c++/6/tuple ****     { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
1254:/usr/include/c++/6/tuple **** 
1255:/usr/include/c++/6/tuple ****   /// Return a reference to the ith element of a tuple.
1256:/usr/include/c++/6/tuple ****   template<std::size_t __i, typename... _Elements>
1257:/usr/include/c++/6/tuple ****     constexpr __tuple_element_t<__i, tuple<_Elements...>>&
1258:/usr/include/c++/6/tuple ****     get(tuple<_Elements...>& __t) noexcept
1259:/usr/include/c++/6/tuple ****     { return std::__get_helper<__i>(__t); }
1260:/usr/include/c++/6/tuple **** 
1261:/usr/include/c++/6/tuple ****   /// Return a const reference to the ith element of a const tuple.
1262:/usr/include/c++/6/tuple ****   template<std::size_t __i, typename... _Elements>
1263:/usr/include/c++/6/tuple ****     constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
1264:/usr/include/c++/6/tuple ****     get(const tuple<_Elements...>& __t) noexcept
1265:/usr/include/c++/6/tuple ****     { return std::__get_helper<__i>(__t); }
1266:/usr/include/c++/6/tuple **** 
1267:/usr/include/c++/6/tuple ****   /// Return an rvalue reference to the ith element of a tuple rvalue.
1268:/usr/include/c++/6/tuple ****   template<std::size_t __i, typename... _Elements>
1269:/usr/include/c++/6/tuple ****     constexpr __tuple_element_t<__i, tuple<_Elements...>>&&
1270:/usr/include/c++/6/tuple ****     get(tuple<_Elements...>&& __t) noexcept
1271:/usr/include/c++/6/tuple ****     {
1272:/usr/include/c++/6/tuple ****       typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
1273:/usr/include/c++/6/tuple ****       return std::forward<__element_type&&>(std::get<__i>(__t));
1274:/usr/include/c++/6/tuple ****     }
1275:/usr/include/c++/6/tuple **** 
1276:/usr/include/c++/6/tuple **** #if __cplusplus > 201103L
1277:/usr/include/c++/6/tuple **** 
1278:/usr/include/c++/6/tuple **** #define __cpp_lib_tuples_by_type 201304
1279:/usr/include/c++/6/tuple **** 
1280:/usr/include/c++/6/tuple ****   template<typename _Head, size_t __i, typename... _Tail>
1281:/usr/include/c++/6/tuple ****     constexpr _Head&
1282:/usr/include/c++/6/tuple ****     __get_helper2(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
1283:/usr/include/c++/6/tuple ****     { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
1284:/usr/include/c++/6/tuple **** 
1285:/usr/include/c++/6/tuple ****   template<typename _Head, size_t __i, typename... _Tail>
1286:/usr/include/c++/6/tuple ****     constexpr const _Head&
1287:/usr/include/c++/6/tuple ****     __get_helper2(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
1288:/usr/include/c++/6/tuple ****     { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
1289:/usr/include/c++/6/tuple **** 
1290:/usr/include/c++/6/tuple ****   /// Return a reference to the unique element of type _Tp of a tuple.
1291:/usr/include/c++/6/tuple ****   template <typename _Tp, typename... _Types>
1292:/usr/include/c++/6/tuple ****     constexpr _Tp&
1293:/usr/include/c++/6/tuple ****     get(tuple<_Types...>& __t) noexcept
1294:/usr/include/c++/6/tuple ****     { return std::__get_helper2<_Tp>(__t); }
1295:/usr/include/c++/6/tuple **** 
1296:/usr/include/c++/6/tuple ****   /// Return a reference to the unique element of type _Tp of a tuple rvalue.
1297:/usr/include/c++/6/tuple ****   template <typename _Tp, typename... _Types>
1298:/usr/include/c++/6/tuple ****     constexpr _Tp&&
1299:/usr/include/c++/6/tuple ****     get(tuple<_Types...>&& __t) noexcept
1300:/usr/include/c++/6/tuple ****     { return std::forward<_Tp&&>(std::__get_helper2<_Tp>(__t)); }
1301:/usr/include/c++/6/tuple **** 
1302:/usr/include/c++/6/tuple ****   /// Return a const reference to the unique element of type _Tp of a tuple.
1303:/usr/include/c++/6/tuple ****   template <typename _Tp, typename... _Types>
GAS LISTING /tmp/ccvmoMuv.s 			page 951


1304:/usr/include/c++/6/tuple ****     constexpr const _Tp&
1305:/usr/include/c++/6/tuple ****     get(const tuple<_Types...>& __t) noexcept
1306:/usr/include/c++/6/tuple ****     { return std::__get_helper2<_Tp>(__t); }
1307:/usr/include/c++/6/tuple **** #endif
1308:/usr/include/c++/6/tuple **** 
1309:/usr/include/c++/6/tuple ****   // This class performs the comparison operations on tuples
1310:/usr/include/c++/6/tuple ****   template<typename _Tp, typename _Up, size_t __i, size_t __size>
1311:/usr/include/c++/6/tuple ****     struct __tuple_compare
1312:/usr/include/c++/6/tuple ****     {
1313:/usr/include/c++/6/tuple ****       static constexpr bool
1314:/usr/include/c++/6/tuple ****       __eq(const _Tp& __t, const _Up& __u)
1315:/usr/include/c++/6/tuple ****       {
1316:/usr/include/c++/6/tuple **** 	return bool(std::get<__i>(__t) == std::get<__i>(__u))
1317:/usr/include/c++/6/tuple **** 	  && __tuple_compare<_Tp, _Up, __i + 1, __size>::__eq(__t, __u);
1318:/usr/include/c++/6/tuple ****       }
1319:/usr/include/c++/6/tuple ****    
1320:/usr/include/c++/6/tuple ****       static constexpr bool
1321:/usr/include/c++/6/tuple ****       __less(const _Tp& __t, const _Up& __u)
1322:/usr/include/c++/6/tuple ****       {
1323:/usr/include/c++/6/tuple **** 	return bool(std::get<__i>(__t) < std::get<__i>(__u))
1324:/usr/include/c++/6/tuple **** 	  || (!bool(std::get<__i>(__u) < std::get<__i>(__t))
1325:/usr/include/c++/6/tuple **** 	      && __tuple_compare<_Tp, _Up, __i + 1, __size>::__less(__t, __u));
1326:/usr/include/c++/6/tuple ****       }
1327:/usr/include/c++/6/tuple ****     };
1328:/usr/include/c++/6/tuple **** 
1329:/usr/include/c++/6/tuple ****   template<typename _Tp, typename _Up, size_t __size>
1330:/usr/include/c++/6/tuple ****     struct __tuple_compare<_Tp, _Up, __size, __size>
1331:/usr/include/c++/6/tuple ****     {
1332:/usr/include/c++/6/tuple ****       static constexpr bool
1333:/usr/include/c++/6/tuple ****       __eq(const _Tp&, const _Up&) { return true; }
1334:/usr/include/c++/6/tuple ****    
1335:/usr/include/c++/6/tuple ****       static constexpr bool
1336:/usr/include/c++/6/tuple ****       __less(const _Tp&, const _Up&) { return false; }
1337:/usr/include/c++/6/tuple ****     };
1338:/usr/include/c++/6/tuple **** 
1339:/usr/include/c++/6/tuple ****   template<typename... _TElements, typename... _UElements>
1340:/usr/include/c++/6/tuple ****     constexpr bool
1341:/usr/include/c++/6/tuple ****     operator==(const tuple<_TElements...>& __t,
1342:/usr/include/c++/6/tuple **** 	       const tuple<_UElements...>& __u)
1343:/usr/include/c++/6/tuple ****     {
1344:/usr/include/c++/6/tuple ****       static_assert(sizeof...(_TElements) == sizeof...(_UElements),
1345:/usr/include/c++/6/tuple **** 	  "tuple objects can only be compared if they have equal sizes.");
1346:/usr/include/c++/6/tuple ****       using __compare = __tuple_compare<tuple<_TElements...>,
1347:/usr/include/c++/6/tuple **** 					tuple<_UElements...>,
1348:/usr/include/c++/6/tuple **** 					0, sizeof...(_TElements)>;
1349:/usr/include/c++/6/tuple ****       return __compare::__eq(__t, __u);
1350:/usr/include/c++/6/tuple ****     }
1351:/usr/include/c++/6/tuple **** 
1352:/usr/include/c++/6/tuple ****   template<typename... _TElements, typename... _UElements>
1353:/usr/include/c++/6/tuple ****     constexpr bool
1354:/usr/include/c++/6/tuple ****     operator<(const tuple<_TElements...>& __t,
1355:/usr/include/c++/6/tuple **** 	      const tuple<_UElements...>& __u)
1356:/usr/include/c++/6/tuple ****     {
1357:/usr/include/c++/6/tuple ****       static_assert(sizeof...(_TElements) == sizeof...(_UElements),
1358:/usr/include/c++/6/tuple **** 	  "tuple objects can only be compared if they have equal sizes.");
1359:/usr/include/c++/6/tuple ****       using __compare = __tuple_compare<tuple<_TElements...>,
1360:/usr/include/c++/6/tuple **** 					tuple<_UElements...>,
GAS LISTING /tmp/ccvmoMuv.s 			page 952


1361:/usr/include/c++/6/tuple **** 					0, sizeof...(_TElements)>;
1362:/usr/include/c++/6/tuple ****       return __compare::__less(__t, __u);
1363:/usr/include/c++/6/tuple ****     }
1364:/usr/include/c++/6/tuple **** 
1365:/usr/include/c++/6/tuple ****   template<typename... _TElements, typename... _UElements>
1366:/usr/include/c++/6/tuple ****     constexpr bool
1367:/usr/include/c++/6/tuple ****     operator!=(const tuple<_TElements...>& __t,
1368:/usr/include/c++/6/tuple **** 	       const tuple<_UElements...>& __u)
1369:/usr/include/c++/6/tuple ****     { return !(__t == __u); }
1370:/usr/include/c++/6/tuple **** 
1371:/usr/include/c++/6/tuple ****   template<typename... _TElements, typename... _UElements>
1372:/usr/include/c++/6/tuple ****     constexpr bool
1373:/usr/include/c++/6/tuple ****     operator>(const tuple<_TElements...>& __t,
1374:/usr/include/c++/6/tuple **** 	      const tuple<_UElements...>& __u)
1375:/usr/include/c++/6/tuple ****     { return __u < __t; }
1376:/usr/include/c++/6/tuple **** 
1377:/usr/include/c++/6/tuple ****   template<typename... _TElements, typename... _UElements>
1378:/usr/include/c++/6/tuple ****     constexpr bool
1379:/usr/include/c++/6/tuple ****     operator<=(const tuple<_TElements...>& __t,
1380:/usr/include/c++/6/tuple **** 	       const tuple<_UElements...>& __u)
1381:/usr/include/c++/6/tuple ****     { return !(__u < __t); }
1382:/usr/include/c++/6/tuple **** 
1383:/usr/include/c++/6/tuple ****   template<typename... _TElements, typename... _UElements>
1384:/usr/include/c++/6/tuple ****     constexpr bool
1385:/usr/include/c++/6/tuple ****     operator>=(const tuple<_TElements...>& __t,
1386:/usr/include/c++/6/tuple **** 	       const tuple<_UElements...>& __u)
1387:/usr/include/c++/6/tuple ****     { return !(__t < __u); }
1388:/usr/include/c++/6/tuple **** 
1389:/usr/include/c++/6/tuple ****   // NB: DR 705.
1390:/usr/include/c++/6/tuple ****   template<typename... _Elements>
1391:/usr/include/c++/6/tuple ****     constexpr tuple<typename __decay_and_strip<_Elements>::__type...>
1392:/usr/include/c++/6/tuple ****     make_tuple(_Elements&&... __args)
1393:/usr/include/c++/6/tuple ****     {
1394:/usr/include/c++/6/tuple ****       typedef tuple<typename __decay_and_strip<_Elements>::__type...>
1395:/usr/include/c++/6/tuple **** 	__result_type;
1396:/usr/include/c++/6/tuple ****       return __result_type(std::forward<_Elements>(__args)...);
1397:/usr/include/c++/6/tuple ****     }
1398:/usr/include/c++/6/tuple **** 
1399:/usr/include/c++/6/tuple ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1400:/usr/include/c++/6/tuple ****   // 2275. Why is forward_as_tuple not constexpr?
1401:/usr/include/c++/6/tuple ****   template<typename... _Elements>
1402:/usr/include/c++/6/tuple ****     constexpr tuple<_Elements&&...>
1403:/usr/include/c++/6/tuple ****     forward_as_tuple(_Elements&&... __args) noexcept
1404:/usr/include/c++/6/tuple ****     { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
1405:/usr/include/c++/6/tuple **** 
1406:/usr/include/c++/6/tuple ****   template<typename... _Tps>
1407:/usr/include/c++/6/tuple ****     struct __is_tuple_like_impl<tuple<_Tps...>> : true_type
1408:/usr/include/c++/6/tuple ****     { };
1409:/usr/include/c++/6/tuple **** 
1410:/usr/include/c++/6/tuple ****   // Internal type trait that allows us to sfinae-protect tuple_cat.
1411:/usr/include/c++/6/tuple ****   template<typename _Tp>
1412:/usr/include/c++/6/tuple ****     struct __is_tuple_like
1413:/usr/include/c++/6/tuple ****     : public __is_tuple_like_impl<typename std::remove_cv
1414:/usr/include/c++/6/tuple ****             <typename std::remove_reference<_Tp>::type>::type>::type
1415:/usr/include/c++/6/tuple ****     { };
1416:/usr/include/c++/6/tuple **** 
1417:/usr/include/c++/6/tuple ****   template<size_t, typename, typename, size_t>
GAS LISTING /tmp/ccvmoMuv.s 			page 953


1418:/usr/include/c++/6/tuple ****     struct __make_tuple_impl;
1419:/usr/include/c++/6/tuple **** 
1420:/usr/include/c++/6/tuple ****   template<size_t _Idx, typename _Tuple, typename... _Tp, size_t _Nm>
1421:/usr/include/c++/6/tuple ****     struct __make_tuple_impl<_Idx, tuple<_Tp...>, _Tuple, _Nm>
1422:/usr/include/c++/6/tuple ****     : __make_tuple_impl<_Idx + 1,
1423:/usr/include/c++/6/tuple **** 			tuple<_Tp..., __tuple_element_t<_Idx, _Tuple>>,
1424:/usr/include/c++/6/tuple **** 			_Tuple, _Nm>
1425:/usr/include/c++/6/tuple ****     { };
1426:/usr/include/c++/6/tuple **** 
1427:/usr/include/c++/6/tuple ****   template<std::size_t _Nm, typename _Tuple, typename... _Tp>
1428:/usr/include/c++/6/tuple ****     struct __make_tuple_impl<_Nm, tuple<_Tp...>, _Tuple, _Nm>
1429:/usr/include/c++/6/tuple ****     {
1430:/usr/include/c++/6/tuple ****       typedef tuple<_Tp...> __type;
1431:/usr/include/c++/6/tuple ****     };
1432:/usr/include/c++/6/tuple **** 
1433:/usr/include/c++/6/tuple ****   template<typename _Tuple>
1434:/usr/include/c++/6/tuple ****     struct __do_make_tuple
1435:/usr/include/c++/6/tuple ****     : __make_tuple_impl<0, tuple<>, _Tuple, std::tuple_size<_Tuple>::value>
1436:/usr/include/c++/6/tuple ****     { };
1437:/usr/include/c++/6/tuple **** 
1438:/usr/include/c++/6/tuple ****   // Returns the std::tuple equivalent of a tuple-like type.
1439:/usr/include/c++/6/tuple ****   template<typename _Tuple>
1440:/usr/include/c++/6/tuple ****     struct __make_tuple
1441:/usr/include/c++/6/tuple ****     : public __do_make_tuple<typename std::remove_cv
1442:/usr/include/c++/6/tuple ****             <typename std::remove_reference<_Tuple>::type>::type>
1443:/usr/include/c++/6/tuple ****     { };
1444:/usr/include/c++/6/tuple **** 
1445:/usr/include/c++/6/tuple ****   // Combines several std::tuple's into a single one.
1446:/usr/include/c++/6/tuple ****   template<typename...>
1447:/usr/include/c++/6/tuple ****     struct __combine_tuples;
1448:/usr/include/c++/6/tuple **** 
1449:/usr/include/c++/6/tuple ****   template<>
1450:/usr/include/c++/6/tuple ****     struct __combine_tuples<>
1451:/usr/include/c++/6/tuple ****     {
1452:/usr/include/c++/6/tuple ****       typedef tuple<> __type;
1453:/usr/include/c++/6/tuple ****     };
1454:/usr/include/c++/6/tuple **** 
1455:/usr/include/c++/6/tuple ****   template<typename... _Ts>
1456:/usr/include/c++/6/tuple ****     struct __combine_tuples<tuple<_Ts...>>
1457:/usr/include/c++/6/tuple ****     {
1458:/usr/include/c++/6/tuple ****       typedef tuple<_Ts...> __type;
1459:/usr/include/c++/6/tuple ****     };
1460:/usr/include/c++/6/tuple **** 
1461:/usr/include/c++/6/tuple ****   template<typename... _T1s, typename... _T2s, typename... _Rem>
1462:/usr/include/c++/6/tuple ****     struct __combine_tuples<tuple<_T1s...>, tuple<_T2s...>, _Rem...>
1463:/usr/include/c++/6/tuple ****     {
1464:/usr/include/c++/6/tuple ****       typedef typename __combine_tuples<tuple<_T1s..., _T2s...>,
1465:/usr/include/c++/6/tuple **** 					_Rem...>::__type __type;
1466:/usr/include/c++/6/tuple ****     };
1467:/usr/include/c++/6/tuple **** 
1468:/usr/include/c++/6/tuple ****   // Computes the result type of tuple_cat given a set of tuple-like types.
1469:/usr/include/c++/6/tuple ****   template<typename... _Tpls>
1470:/usr/include/c++/6/tuple ****     struct __tuple_cat_result
1471:/usr/include/c++/6/tuple ****     {
1472:/usr/include/c++/6/tuple ****       typedef typename __combine_tuples
1473:/usr/include/c++/6/tuple ****         <typename __make_tuple<_Tpls>::__type...>::__type __type;
1474:/usr/include/c++/6/tuple ****     };
GAS LISTING /tmp/ccvmoMuv.s 			page 954


1475:/usr/include/c++/6/tuple **** 
1476:/usr/include/c++/6/tuple ****   // Helper to determine the index set for the first tuple-like
1477:/usr/include/c++/6/tuple ****   // type of a given set.
1478:/usr/include/c++/6/tuple ****   template<typename...>
1479:/usr/include/c++/6/tuple ****     struct __make_1st_indices;
1480:/usr/include/c++/6/tuple **** 
1481:/usr/include/c++/6/tuple ****   template<>
1482:/usr/include/c++/6/tuple ****     struct __make_1st_indices<>
1483:/usr/include/c++/6/tuple ****     {
1484:/usr/include/c++/6/tuple ****       typedef std::_Index_tuple<> __type;
1485:/usr/include/c++/6/tuple ****     };
1486:/usr/include/c++/6/tuple **** 
1487:/usr/include/c++/6/tuple ****   template<typename _Tp, typename... _Tpls>
1488:/usr/include/c++/6/tuple ****     struct __make_1st_indices<_Tp, _Tpls...>
1489:/usr/include/c++/6/tuple ****     {
1490:/usr/include/c++/6/tuple ****       typedef typename std::_Build_index_tuple<std::tuple_size<
1491:/usr/include/c++/6/tuple **** 	typename std::remove_reference<_Tp>::type>::value>::__type __type;
1492:/usr/include/c++/6/tuple ****     };
1493:/usr/include/c++/6/tuple **** 
1494:/usr/include/c++/6/tuple ****   // Performs the actual concatenation by step-wise expanding tuple-like
1495:/usr/include/c++/6/tuple ****   // objects into the elements,  which are finally forwarded into the
1496:/usr/include/c++/6/tuple ****   // result tuple.
1497:/usr/include/c++/6/tuple ****   template<typename _Ret, typename _Indices, typename... _Tpls>
1498:/usr/include/c++/6/tuple ****     struct __tuple_concater;
1499:/usr/include/c++/6/tuple **** 
1500:/usr/include/c++/6/tuple ****   template<typename _Ret, std::size_t... _Is, typename _Tp, typename... _Tpls>
1501:/usr/include/c++/6/tuple ****     struct __tuple_concater<_Ret, std::_Index_tuple<_Is...>, _Tp, _Tpls...>
1502:/usr/include/c++/6/tuple ****     {
1503:/usr/include/c++/6/tuple ****       template<typename... _Us>
1504:/usr/include/c++/6/tuple ****         static constexpr _Ret
1505:/usr/include/c++/6/tuple ****         _S_do(_Tp&& __tp, _Tpls&&... __tps, _Us&&... __us)
1506:/usr/include/c++/6/tuple ****         {
1507:/usr/include/c++/6/tuple **** 	  typedef typename __make_1st_indices<_Tpls...>::__type __idx;
1508:/usr/include/c++/6/tuple **** 	  typedef __tuple_concater<_Ret, __idx, _Tpls...>      __next;
1509:/usr/include/c++/6/tuple **** 	  return __next::_S_do(std::forward<_Tpls>(__tps)...,
1510:/usr/include/c++/6/tuple **** 			       std::forward<_Us>(__us)...,
1511:/usr/include/c++/6/tuple **** 			       std::get<_Is>(std::forward<_Tp>(__tp))...);
1512:/usr/include/c++/6/tuple **** 	}
1513:/usr/include/c++/6/tuple ****     };
1514:/usr/include/c++/6/tuple **** 
1515:/usr/include/c++/6/tuple ****   template<typename _Ret>
1516:/usr/include/c++/6/tuple ****     struct __tuple_concater<_Ret, std::_Index_tuple<>>
1517:/usr/include/c++/6/tuple ****     {
1518:/usr/include/c++/6/tuple ****       template<typename... _Us>
1519:/usr/include/c++/6/tuple **** 	static constexpr _Ret
1520:/usr/include/c++/6/tuple **** 	_S_do(_Us&&... __us)
1521:/usr/include/c++/6/tuple ****         {
1522:/usr/include/c++/6/tuple **** 	  return _Ret(std::forward<_Us>(__us)...);
1523:/usr/include/c++/6/tuple **** 	}
1524:/usr/include/c++/6/tuple ****     };
1525:/usr/include/c++/6/tuple **** 
1526:/usr/include/c++/6/tuple ****   /// tuple_cat
1527:/usr/include/c++/6/tuple ****   template<typename... _Tpls, typename = typename
1528:/usr/include/c++/6/tuple ****            enable_if<__and_<__is_tuple_like<_Tpls>...>::value>::type>
1529:/usr/include/c++/6/tuple ****     constexpr auto
1530:/usr/include/c++/6/tuple ****     tuple_cat(_Tpls&&... __tpls)
1531:/usr/include/c++/6/tuple ****     -> typename __tuple_cat_result<_Tpls...>::__type
GAS LISTING /tmp/ccvmoMuv.s 			page 955


1532:/usr/include/c++/6/tuple ****     {
1533:/usr/include/c++/6/tuple ****       typedef typename __tuple_cat_result<_Tpls...>::__type __ret;
1534:/usr/include/c++/6/tuple ****       typedef typename __make_1st_indices<_Tpls...>::__type __idx;
1535:/usr/include/c++/6/tuple ****       typedef __tuple_concater<__ret, __idx, _Tpls...> __concater;
1536:/usr/include/c++/6/tuple ****       return __concater::_S_do(std::forward<_Tpls>(__tpls)...);
1537:/usr/include/c++/6/tuple ****     }
1538:/usr/include/c++/6/tuple **** 
1539:/usr/include/c++/6/tuple ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1540:/usr/include/c++/6/tuple ****   // 2301. Why is tie not constexpr?
1541:/usr/include/c++/6/tuple ****   /// tie
1542:/usr/include/c++/6/tuple ****   template<typename... _Elements>
1543:/usr/include/c++/6/tuple ****     constexpr tuple<_Elements&...>
1544:/usr/include/c++/6/tuple ****     tie(_Elements&... __args) noexcept
1545:/usr/include/c++/6/tuple ****     { return tuple<_Elements&...>(__args...); }
1546:/usr/include/c++/6/tuple **** 
1547:/usr/include/c++/6/tuple ****   /// swap
1548:/usr/include/c++/6/tuple ****   template<typename... _Elements>
1549:/usr/include/c++/6/tuple ****     inline void 
1550:/usr/include/c++/6/tuple ****     swap(tuple<_Elements...>& __x, tuple<_Elements...>& __y)
1551:/usr/include/c++/6/tuple ****     noexcept(noexcept(__x.swap(__y)))
1552:/usr/include/c++/6/tuple ****     { __x.swap(__y); }
1553:/usr/include/c++/6/tuple **** 
1554:/usr/include/c++/6/tuple ****   // A class (and instance) which can be used in 'tie' when an element
1555:/usr/include/c++/6/tuple ****   // of a tuple is not required
1556:/usr/include/c++/6/tuple ****   struct _Swallow_assign
1557:/usr/include/c++/6/tuple ****   {
1558:/usr/include/c++/6/tuple ****     template<class _Tp>
1559:/usr/include/c++/6/tuple ****       const _Swallow_assign&
1560:/usr/include/c++/6/tuple ****       operator=(const _Tp&) const
1561:/usr/include/c++/6/tuple ****       { return *this; }
1562:/usr/include/c++/6/tuple ****   };
1563:/usr/include/c++/6/tuple **** 
1564:/usr/include/c++/6/tuple ****   const _Swallow_assign ignore{};
1565:/usr/include/c++/6/tuple **** 
1566:/usr/include/c++/6/tuple ****   /// Partial specialization for tuples
1567:/usr/include/c++/6/tuple ****   template<typename... _Types, typename _Alloc>
1568:/usr/include/c++/6/tuple ****     struct uses_allocator<tuple<_Types...>, _Alloc> : true_type { };
1569:/usr/include/c++/6/tuple **** 
1570:/usr/include/c++/6/tuple ****   // See stl_pair.h...
1571:/usr/include/c++/6/tuple ****   template<class _T1, class _T2>
1572:/usr/include/c++/6/tuple ****     template<typename... _Args1, typename... _Args2>
1573:/usr/include/c++/6/tuple ****       inline
1574:/usr/include/c++/6/tuple ****       pair<_T1, _T2>::
1575:/usr/include/c++/6/tuple ****       pair(piecewise_construct_t,
1576:/usr/include/c++/6/tuple **** 	   tuple<_Args1...> __first, tuple<_Args2...> __second)
1577:/usr/include/c++/6/tuple ****       : pair(__first, __second,
1578:/usr/include/c++/6/tuple **** 	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
1579:/usr/include/c++/6/tuple **** 	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
1580:/usr/include/c++/6/tuple ****       { }
1581:/usr/include/c++/6/tuple **** 
1582:/usr/include/c++/6/tuple ****   template<class _T1, class _T2>
1583:/usr/include/c++/6/tuple ****     template<typename... _Args1, std::size_t... _Indexes1,
1584:/usr/include/c++/6/tuple ****              typename... _Args2, std::size_t... _Indexes2>
1585:/usr/include/c++/6/tuple ****       inline
1586:/usr/include/c++/6/tuple ****       pair<_T1, _T2>::
1587:/usr/include/c++/6/tuple ****       pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
1588:/usr/include/c++/6/tuple **** 	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
GAS LISTING /tmp/ccvmoMuv.s 			page 956


1589:/usr/include/c++/6/tuple ****       : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
1590:/usr/include/c++/6/tuple ****         second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 24313              		.loc 49 1590 0
 24314 013d 498B07   		movq	(%r15), %rax
 24315              	.LVL2135:
 24316              	.LBE22198:
 24317              	.LBE22197:
 24318              	.LBE22196:
 24319              	.LBE22195:
 24320              	.LBE22194:
 24321              	.LBE22193:
 24322              	.LBE22188:
 24323              	.LBE22187:
 24324              	.LBE22186:
 24325              	.LBE22185:
 24326              	.LBB22293:
 24327              	.LBB22174:
1081:/usr/include/c++/6/bits/stl_map.h **** 
1082:/usr/include/c++/6/bits/stl_map.h **** #if __cplusplus > 201103L
1083:/usr/include/c++/6/bits/stl_map.h ****       template<typename _Kt>
1084:/usr/include/c++/6/bits/stl_map.h **** 	auto
1085:/usr/include/c++/6/bits/stl_map.h **** 	find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))
1086:/usr/include/c++/6/bits/stl_map.h **** 	{ return _M_t._M_find_tr(__x); }
1087:/usr/include/c++/6/bits/stl_map.h **** #endif
1088:/usr/include/c++/6/bits/stl_map.h ****       //@}
1089:/usr/include/c++/6/bits/stl_map.h **** 
1090:/usr/include/c++/6/bits/stl_map.h ****       //@{
1091:/usr/include/c++/6/bits/stl_map.h ****       /**
1092:/usr/include/c++/6/bits/stl_map.h ****        *  @brief Tries to locate an element in a %map.
1093:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __x  Key of (key, value) %pair to be located.
1094:/usr/include/c++/6/bits/stl_map.h ****        *  @return  Read-only (constant) iterator pointing to sought-after
1095:/usr/include/c++/6/bits/stl_map.h ****        *           element, or end() if not found.
1096:/usr/include/c++/6/bits/stl_map.h ****        *
1097:/usr/include/c++/6/bits/stl_map.h ****        *  This function takes a key and tries to locate the element with which
1098:/usr/include/c++/6/bits/stl_map.h ****        *  the key matches.  If successful the function returns a constant
1099:/usr/include/c++/6/bits/stl_map.h ****        *  iterator pointing to the sought after %pair. If unsuccessful it
1100:/usr/include/c++/6/bits/stl_map.h ****        *  returns the past-the-end ( @c end() ) iterator.
1101:/usr/include/c++/6/bits/stl_map.h ****        */
1102:/usr/include/c++/6/bits/stl_map.h **** 
1103:/usr/include/c++/6/bits/stl_map.h ****       const_iterator
1104:/usr/include/c++/6/bits/stl_map.h ****       find(const key_type& __x) const
1105:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t.find(__x); }
1106:/usr/include/c++/6/bits/stl_map.h **** 
1107:/usr/include/c++/6/bits/stl_map.h **** #if __cplusplus > 201103L
1108:/usr/include/c++/6/bits/stl_map.h ****       template<typename _Kt>
1109:/usr/include/c++/6/bits/stl_map.h **** 	auto
1110:/usr/include/c++/6/bits/stl_map.h **** 	find(const _Kt& __x) const -> decltype(_M_t._M_find_tr(__x))
1111:/usr/include/c++/6/bits/stl_map.h **** 	{ return _M_t._M_find_tr(__x); }
1112:/usr/include/c++/6/bits/stl_map.h **** #endif
1113:/usr/include/c++/6/bits/stl_map.h ****       //@}
1114:/usr/include/c++/6/bits/stl_map.h **** 
1115:/usr/include/c++/6/bits/stl_map.h ****       //@{
1116:/usr/include/c++/6/bits/stl_map.h ****       /**
1117:/usr/include/c++/6/bits/stl_map.h ****        *  @brief  Finds the number of elements with given key.
1118:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __x  Key of (key, value) pairs to be located.
1119:/usr/include/c++/6/bits/stl_map.h ****        *  @return  Number of elements with specified key.
1120:/usr/include/c++/6/bits/stl_map.h ****        *
GAS LISTING /tmp/ccvmoMuv.s 			page 957


1121:/usr/include/c++/6/bits/stl_map.h ****        *  This function only makes sense for multimaps; for map the result will
1122:/usr/include/c++/6/bits/stl_map.h ****        *  either be 0 (not present) or 1 (present).
1123:/usr/include/c++/6/bits/stl_map.h ****        */
1124:/usr/include/c++/6/bits/stl_map.h ****       size_type
1125:/usr/include/c++/6/bits/stl_map.h ****       count(const key_type& __x) const
1126:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
1127:/usr/include/c++/6/bits/stl_map.h **** 
1128:/usr/include/c++/6/bits/stl_map.h **** #if __cplusplus > 201103L
1129:/usr/include/c++/6/bits/stl_map.h ****       template<typename _Kt>
1130:/usr/include/c++/6/bits/stl_map.h **** 	auto
1131:/usr/include/c++/6/bits/stl_map.h **** 	count(const _Kt& __x) const -> decltype(_M_t._M_count_tr(__x))
1132:/usr/include/c++/6/bits/stl_map.h **** 	{ return _M_t._M_count_tr(__x); }
1133:/usr/include/c++/6/bits/stl_map.h **** #endif
1134:/usr/include/c++/6/bits/stl_map.h ****       //@}
1135:/usr/include/c++/6/bits/stl_map.h **** 
1136:/usr/include/c++/6/bits/stl_map.h ****       //@{
1137:/usr/include/c++/6/bits/stl_map.h ****       /**
1138:/usr/include/c++/6/bits/stl_map.h ****        *  @brief Finds the beginning of a subsequence matching given key.
1139:/usr/include/c++/6/bits/stl_map.h ****        *  @param  __x  Key of (key, value) pair to be located.
1140:/usr/include/c++/6/bits/stl_map.h ****        *  @return  Iterator pointing to first element equal to or greater
1141:/usr/include/c++/6/bits/stl_map.h ****        *           than key, or end().
1142:/usr/include/c++/6/bits/stl_map.h ****        *
1143:/usr/include/c++/6/bits/stl_map.h ****        *  This function returns the first element of a subsequence of elements
1144:/usr/include/c++/6/bits/stl_map.h ****        *  that matches the given key.  If unsuccessful it returns an iterator
1145:/usr/include/c++/6/bits/stl_map.h ****        *  pointing to the first element that has a greater value than given key
1146:/usr/include/c++/6/bits/stl_map.h ****        *  or end() if no such element exists.
1147:/usr/include/c++/6/bits/stl_map.h ****        */
1148:/usr/include/c++/6/bits/stl_map.h ****       iterator
1149:/usr/include/c++/6/bits/stl_map.h ****       lower_bound(const key_type& __x)
1150:/usr/include/c++/6/bits/stl_map.h ****       { return _M_t.lower_bound(__x); }
 24328              		.loc 36 1150 0
 24329 0140 498D7C24 		leaq	8(%r12), %rdi
 24329      08
 24330              	.LBE22174:
 24331              	.LBE22293:
 24332              	.LBB22294:
 24333              	.LBB22289:
 24334              	.LBB22216:
 24335              	.LBB22214:
 24336              	.LBB22212:
 24337              	.LBB22207:
 24338              	.LBB22208:
 24339              	.LBB22209:
 24340              	.LBB22210:
 24341              		.loc 47 63 0
 24342 0145 488D5320 		leaq	32(%rbx), %rdx
 24343              	.LBE22210:
 24344              	.LBE22209:
 24345              	.LBE22208:
 24346              	.LBE22207:
 24347              	.LBE22212:
 24348              	.LBE22214:
 24349              	.LBE22216:
 24350              	.LBB22217:
2200:/usr/include/c++/6/bits/stl_tree.h **** 
 24351              		.loc 19 2200 0
 24352 0149 4889EE   		movq	%rbp, %rsi
GAS LISTING /tmp/ccvmoMuv.s 			page 958


 24353              	.LBE22217:
 24354              	.LBB22284:
 24355              	.LBB22215:
 24356              	.LBB22213:
 24357              	.LBB22211:
 24358              	.LBB22206:
 24359              	.LBB22205:
 24360              	.LBB22204:
 24361              	.LBB22203:
 24362              	.LBB22199:
 24363              	.LBB22200:
 347:/usr/include/boost/smart_ptr/shared_ptr.hpp ****     {
 24364              		.loc 27 347 0
 24365 014c 48C74328 		movq	$0, 40(%rbx)
 24365      00000000 
 24366              	.LBB22201:
 24367              	.LBB22202:
 121:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 24368              		.loc 28 121 0
 24369 0154 48C74330 		movq	$0, 48(%rbx)
 24369      00000000 
 24370              	.LBE22202:
 24371              	.LBE22201:
 24372              	.LBE22200:
 24373              	.LBE22199:
 24374              		.loc 49 1590 0
 24375 015c 48894320 		movq	%rax, 32(%rbx)
 24376              	.LVL2136:
 24377              	.LBE22203:
 24378              	.LBE22204:
 24379              	.LBE22205:
 24380              	.LBE22206:
 24381              	.LBE22211:
 24382              	.LBE22213:
 24383              	.LBE22215:
 24384              	.LBE22284:
 24385              	.LBB22285:
2200:/usr/include/c++/6/bits/stl_tree.h **** 
 24386              		.loc 19 2200 0
 24387 0160 E8000000 		call	_ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error
 24387      00
 24388              	.LVL2137:
2202:/usr/include/c++/6/bits/stl_tree.h **** 	      return _M_insert_node(__res.first, __res.second, __z);
 24389              		.loc 19 2202 0
 24390 0165 4885D2   		testq	%rdx, %rdx
 24391              	.LVL2138:
2200:/usr/include/c++/6/bits/stl_tree.h **** 
 24392              		.loc 19 2200 0
 24393 0168 4889C5   		movq	%rax, %rbp
 24394              	.LVL2139:
2202:/usr/include/c++/6/bits/stl_tree.h **** 	      return _M_insert_node(__res.first, __res.second, __z);
 24395              		.loc 19 2202 0
 24396 016b 747B     		je	.L1445
 24397              	.LVL2140:
 24398              	.LBB22218:
 24399              	.LBB22219:
2098:/usr/include/c++/6/bits/stl_tree.h **** 			    || _M_impl._M_key_compare(_S_key(__z),
GAS LISTING /tmp/ccvmoMuv.s 			page 959


 24400              		.loc 19 2098 0
 24401 016d 48395424 		cmpq	%rdx, 16(%rsp)
 24401      10
 24402 0172 0F842B01 		je	.L1432
 24402      0000
 24403 0178 4885C0   		testq	%rax, %rax
 24404 017b 0F852201 		jne	.L1432
 24404      0000
 24405              	.LVL2141:
 24406 0181 488B4320 		movq	32(%rbx), %rax
 24407              	.LVL2142:
 24408 0185 488B7808 		movq	8(%rax), %rdi
 24409 0189 488B4220 		movq	32(%rdx), %rax
 24410              	.LBB22220:
 24411              	.LBB22221:
 24412              	.LBB22222:
 24413              	.LBB22223:
 24414              	.LBB22224:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 24415              		.loc 26 117 0
 24416 018d 803F2A   		cmpb	$42, (%rdi)
 24417 0190 488B7008 		movq	8(%rax), %rsi
 24418              	.LVL2143:
 24419 0194 0F84BB00 		je	.L1446
 24419      0000
 24420              	.LVL2144:
 24421              	.L1417:
 24422 019a 48895424 		movq	%rdx, 24(%rsp)
 24422      18
 118:/usr/include/c++/6/typeinfo **** 
 24423              		.loc 26 118 0
 24424 019f E8000000 		call	strcmp@PLT
 24424      00
 24425              	.LVL2145:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 24426              		.loc 26 117 0
 24427 01a4 488B5424 		movq	24(%rsp), %rdx
 24427      18
 24428 01a9 C1E81F   		shrl	$31, %eax
 24429              	.LVL2146:
 24430              	.L1418:
 24431 01ac 0FB6F8   		movzbl	%al, %edi
 24432              	.LVL2147:
 24433              	.L1416:
 24434              	.LBE22224:
 24435              	.LBE22223:
 24436              	.LBE22222:
 24437              	.LBE22221:
 24438              	.LBE22220:
2102:/usr/include/c++/6/bits/stl_tree.h **** 				    this->_M_impl._M_header);
 24439              		.loc 19 2102 0
 24440 01af 488B4C24 		movq	16(%rsp), %rcx
 24440      10
 24441 01b4 4889DE   		movq	%rbx, %rsi
2104:/usr/include/c++/6/bits/stl_tree.h ****       return iterator(__z);
 24442              		.loc 19 2104 0
 24443 01b7 4889DD   		movq	%rbx, %rbp
GAS LISTING /tmp/ccvmoMuv.s 			page 960


 24444              	.LVL2148:
2102:/usr/include/c++/6/bits/stl_tree.h **** 				    this->_M_impl._M_header);
 24445              		.loc 19 2102 0
 24446 01ba E8000000 		call	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT
 24446      00
 24447              	.LVL2149:
2104:/usr/include/c++/6/bits/stl_tree.h ****       return iterator(__z);
 24448              		.loc 19 2104 0
 24449 01bf 49834424 		addq	$1, 48(%r12)
 24449      3001
 24450 01c5 EB46     		jmp	.L1419
 24451              	.LVL2150:
 24452 01c7 660F1F84 		.p2align 4,,10
 24452      00000000 
 24452      00
 24453              		.p2align 3
 24454              	.L1443:
 24455              	.LBE22219:
 24456              	.LBE22218:
 24457              	.LBE22285:
 24458              	.LBE22289:
 24459              	.LBE22294:
 24460              	.LBB22295:
 24461              	.LBB22183:
 24462              	.LBB22182:
 24463              	.LBB22181:
 24464              	.LBB22180:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 24465              		.loc 26 117 0
 24466 01d0 4839F3   		cmpq	%rsi, %rbx
 24467 01d3 0F92C0   		setb	%al
 24468              	.LVL2151:
 116:/usr/include/c++/6/typeinfo **** 	? __name < __arg.__name
 24469              		.loc 26 116 0
 24470 01d6 803E2A   		cmpb	$42, (%rsi)
 24471 01d9 0F85C2FE 		jne	.L1413
 24471      FFFF
 24472 01df E9C8FEFF 		jmp	.L1414
 24472      FF
 24473              	.LVL2152:
 24474              		.p2align 4,,10
 24475 01e4 0F1F4000 		.p2align 3
 24476              	.L1445:
 24477              	.LBE22180:
 24478              	.LBE22181:
 24479              	.LBE22182:
 24480              	.LBE22183:
 24481              	.LBE22295:
 24482              	.LBB22296:
 24483              	.LBB22290:
 24484              	.LBB22286:
 24485              	.LBB22232:
 24486              	.LBB22233:
 24487              	.LBB22234:
 24488              	.LBB22235:
 24489              	.LBB22236:
 24490              	.LBB22237:
GAS LISTING /tmp/ccvmoMuv.s 			page 961


 24491              	.LBB22238:
 24492              	.LBB22239:
 473:/usr/include/boost/smart_ptr/detail/shared_count.hpp **** #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
 24493              		.loc 28 473 0
 24494 01e8 4C8B7330 		movq	48(%rbx), %r14
 24495 01ec 4D85F6   		testq	%r14, %r14
 24496 01ef 7414     		je	.L1421
 24497              	.LVL2153:
 24498              	.LBB22240:
 24499              	.LBB22241:
 24500              	.LBB22242:
 24501              	.LBB22243:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 24502              		.loc 1 50 0
 24503 01f1 41BFFFFF 		movl	$-1, %r15d
 24503      FFFF
 24504              	.LVL2154:
 24505 01f7 4489F8   		movl	%r15d, %eax
 24506              	.LVL2155:
 24507              	#APP
 24508              	# 50 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 24509              		lock
 24510              		xadd %eax, 8(%r14)
 24511              	# 0 "" 2
 24512              	.LVL2156:
 24513              	#NO_APP
 24514              	.LBE22243:
 24515              	.LBE22242:
 144:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
 24516              		.loc 1 144 0
 24517 0200 83F801   		cmpl	$1, %eax
 24518 0203 7464     		je	.L1447
 24519              	.LVL2157:
 24520              	.L1421:
 24521              	.LBE22241:
 24522              	.LBE22240:
 24523              	.LBE22239:
 24524              	.LBE22238:
 24525              	.LBE22237:
 24526              	.LBE22236:
 24527              	.LBE22235:
 24528              	.LBE22234:
 24529              	.LBE22233:
 24530              	.LBB22274:
 24531              	.LBB22275:
 24532              	.LBB22276:
 24533              	.LBB22277:
 24534              		.loc 12 110 0
 24535 0205 4889DF   		movq	%rbx, %rdi
 24536 0208 E8000000 		call	_ZdlPv@PLT
 24536      00
 24537              	.LVL2158:
 24538              	.L1419:
 24539 020d 488B4424 		movq	8(%rsp), %rax
 24539      08
 24540 0212 4C8B30   		movq	(%rax), %r14
 24541 0215 E99AFEFF 		jmp	.L1415
GAS LISTING /tmp/ccvmoMuv.s 			page 962


 24541      FF
 24542              	.LVL2159:
 24543 021a 660F1F44 		.p2align 4,,10
 24543      0000
 24544              		.p2align 3
 24545              	.L1444:
 24546              	.LBE22277:
 24547              	.LBE22276:
 24548              	.LBE22275:
 24549              	.LBE22274:
 24550              	.LBE22232:
 24551              	.LBE22286:
 24552              	.LBE22290:
 24553              	.LBE22296:
 24554              	.LBE22299:
 24555              	.LBE22354:
 24556              	.LBB22355:
 24557              	.LBB22346:
 24558              	.LBB22344:
 24559              	.LBB22342:
 24560              	.LBB22340:
 24561              	.LBB22338:
 24562              	.LBB22324:
 24563              	.LBB22325:
 146:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****             weak_release();
 24564              		.loc 1 146 0
 24565 0220 488B03   		movq	(%rbx), %rax
 24566 0223 4889DF   		movq	%rbx, %rdi
 24567 0226 FF5010   		call	*16(%rax)
 24568              	.LVL2160:
 24569              	.LBB22326:
 24570              	.LBB22327:
 24571              	.LBB22328:
 24572              	.LBB22329:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 24573              		.loc 1 50 0
 24574              	#APP
 24575              	# 50 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 24576              		lock
 24577              		xadd %ebp, 12(%rbx)
 24578              	# 0 "" 2
 24579              	.LVL2161:
 24580              	#NO_APP
 24581              	.LBE22329:
 24582              	.LBE22328:
 158:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
 24583              		.loc 1 158 0
 24584 022e 83FD01   		cmpl	$1, %ebp
 24585 0231 0F85B5FE 		jne	.L1426
 24585      FFFF
 24586              		.loc 1 160 0
 24587 0237 488B03   		movq	(%rbx), %rax
 24588 023a 488D0D00 		leaq	_ZN5boost6detail15sp_counted_base7destroyEv(%rip), %rcx
 24588      000000
 24589              	.LBB22330:
 24590              	.LBB22331:
 126:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     }
GAS LISTING /tmp/ccvmoMuv.s 			page 963


 24591              		.loc 1 126 0
 24592 0241 4889DF   		movq	%rbx, %rdi
 24593              	.LBE22331:
 24594              	.LBE22330:
 24595              		.loc 1 160 0
 24596 0244 488B5018 		movq	24(%rax), %rdx
 24597 0248 4839CA   		cmpq	%rcx, %rdx
 24598 024b 754F     		jne	.L1428
 24599              	.LBB22333:
 24600              	.LBB22332:
 126:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     }
 24601              		.loc 1 126 0
 24602 024d FF5008   		call	*8(%rax)
 24603              	.LVL2162:
 24604 0250 E997FEFF 		jmp	.L1426
 24604      FF
 24605              	.LVL2163:
 24606              	.L1446:
 24607              	.LBE22332:
 24608              	.LBE22333:
 24609              	.LBE22327:
 24610              	.LBE22326:
 24611              	.LBE22325:
 24612              	.LBE22324:
 24613              	.LBE22338:
 24614              	.LBE22340:
 24615              	.LBE22342:
 24616              	.LBE22344:
 24617              	.LBE22346:
 24618              	.LBE22355:
 24619              	.LBB22356:
 24620              	.LBB22300:
 24621              	.LBB22297:
 24622              	.LBB22291:
 24623              	.LBB22287:
 24624              	.LBB22280:
 24625              	.LBB22230:
 24626              	.LBB22229:
 24627              	.LBB22228:
 24628              	.LBB22227:
 24629              	.LBB22226:
 24630              	.LBB22225:
 117:/usr/include/c++/6/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 24631              		.loc 26 117 0
 24632 0255 4839F7   		cmpq	%rsi, %rdi
 24633 0258 0F92C0   		setb	%al
 24634              	.LVL2164:
 116:/usr/include/c++/6/typeinfo **** 	? __name < __arg.__name
 24635              		.loc 26 116 0
 24636 025b 803E2A   		cmpb	$42, (%rsi)
 24637 025e 0F8536FF 		jne	.L1417
 24637      FFFF
 24638 0264 E943FFFF 		jmp	.L1418
 24638      FF
 24639              	.LVL2165:
 24640              	.L1447:
 24641              	.LBE22225:
GAS LISTING /tmp/ccvmoMuv.s 			page 964


 24642              	.LBE22226:
 24643              	.LBE22227:
 24644              	.LBE22228:
 24645              	.LBE22229:
 24646              	.LBE22230:
 24647              	.LBE22280:
 24648              	.LBB22281:
 24649              	.LBB22278:
 24650              	.LBB22272:
 24651              	.LBB22270:
 24652              	.LBB22268:
 24653              	.LBB22266:
 24654              	.LBB22264:
 24655              	.LBB22262:
 24656              	.LBB22260:
 24657              	.LBB22258:
 24658              	.LBB22244:
 24659              	.LBB22245:
 146:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****             weak_release();
 24660              		.loc 1 146 0
 24661 0269 498B06   		movq	(%r14), %rax
 24662 026c 4C89F7   		movq	%r14, %rdi
 24663 026f FF5010   		call	*16(%rax)
 24664              	.LVL2166:
 24665              	.LBB22246:
 24666              	.LBB22247:
 24667              	.LBB22248:
 24668              	.LBB22249:
  50:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp **** 
 24669              		.loc 1 50 0
 24670              	#APP
 24671              	# 50 "/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp" 1
 24672              		lock
 24673              		xadd %r15d, 12(%r14)
 24674              	# 0 "" 2
 24675              	.LVL2167:
 24676              	#NO_APP
 24677              	.LBE22249:
 24678              	.LBE22248:
 158:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****         {
 24679              		.loc 1 158 0
 24680 0278 4183FF01 		cmpl	$1, %r15d
 24681 027c 7587     		jne	.L1421
 24682              		.loc 1 160 0
 24683 027e 498B16   		movq	(%r14), %rdx
 24684 0281 488D0D00 		leaq	_ZN5boost6detail15sp_counted_base7destroyEv(%rip), %rcx
 24684      000000
 24685              	.LBB22250:
 24686              	.LBB22251:
 126:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     }
 24687              		.loc 1 126 0
 24688 0288 4C89F7   		movq	%r14, %rdi
 24689              	.LBE22251:
 24690              	.LBE22250:
 24691              		.loc 1 160 0
 24692 028b 488B4218 		movq	24(%rdx), %rax
 24693 028f 4839C8   		cmpq	%rcx, %rax
GAS LISTING /tmp/ccvmoMuv.s 			page 965


 24694 0292 7519     		jne	.L1423
 24695              	.LVL2168:
 24696              	.LBB22253:
 24697              	.LBB22252:
 126:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp ****     }
 24698              		.loc 1 126 0
 24699 0294 FF5208   		call	*8(%rdx)
 24700              	.LVL2169:
 24701 0297 E969FFFF 		jmp	.L1421
 24701      FF
 24702              	.LVL2170:
 24703              	.L1428:
 24704              	.LBE22252:
 24705              	.LBE22253:
 24706              	.LBE22247:
 24707              	.LBE22246:
 24708              	.LBE22245:
 24709              	.LBE22244:
 24710              	.LBE22258:
 24711              	.LBE22260:
 24712              	.LBE22262:
 24713              	.LBE22264:
 24714              	.LBE22266:
 24715              	.LBE22268:
 24716              	.LBE22270:
 24717              	.LBE22272:
 24718              	.LBE22278:
 24719              	.LBE22281:
 24720              	.LBE22287:
 24721              	.LBE22291:
 24722              	.LBE22297:
 24723              	.LBE22300:
 24724              	.LBE22356:
 24725              	.LBB22357:
 24726              	.LBB22347:
 24727              	.LBB22345:
 24728              	.LBB22343:
 24729              	.LBB22341:
 24730              	.LBB22339:
 24731              	.LBB22337:
 24732              	.LBB22336:
 24733              	.LBB22335:
 24734              	.LBB22334:
 24735              		.loc 1 160 0
 24736 029c FFD2     		call	*%rdx
 24737              	.LVL2171:
 24738 029e E949FEFF 		jmp	.L1426
 24738      FF
 24739              	.LVL2172:
 24740              	.L1432:
 24741              	.LBE22334:
 24742              	.LBE22335:
 24743              	.LBE22336:
 24744              	.LBE22337:
 24745              	.LBE22339:
 24746              	.LBE22341:
 24747              	.LBE22343:
GAS LISTING /tmp/ccvmoMuv.s 			page 966


 24748              	.LBE22345:
 24749              	.LBE22347:
 24750              	.LBE22357:
 24751              	.LBB22358:
 24752              	.LBB22301:
 24753              	.LBB22298:
 24754              	.LBB22292:
 24755              	.LBB22288:
 24756              	.LBB22282:
 24757              	.LBB22231:
2098:/usr/include/c++/6/bits/stl_tree.h **** 			    || _M_impl._M_key_compare(_S_key(__z),
 24758              		.loc 19 2098 0
 24759 02a3 BF010000 		movl	$1, %edi
 24759      00
 24760 02a8 E902FFFF 		jmp	.L1416
 24760      FF
 24761              	.LVL2173:
 24762              	.L1423:
 24763              	.LBE22231:
 24764              	.LBE22282:
 24765              	.LBB22283:
 24766              	.LBB22279:
 24767              	.LBB22273:
 24768              	.LBB22271:
 24769              	.LBB22269:
 24770              	.LBB22267:
 24771              	.LBB22265:
 24772              	.LBB22263:
 24773              	.LBB22261:
 24774              	.LBB22259:
 24775              	.LBB22257:
 24776              	.LBB22256:
 24777              	.LBB22255:
 24778              	.LBB22254:
 24779              		.loc 1 160 0
 24780 02ad FFD0     		call	*%rax
 24781              	.LVL2174:
 24782 02af E951FFFF 		jmp	.L1421
 24782      FF
 24783              	.LVL2175:
 24784              	.L1440:
 24785              	.LBE22254:
 24786              	.LBE22255:
 24787              	.LBE22256:
 24788              	.LBE22257:
 24789              	.LBE22259:
 24790              	.LBE22261:
 24791              	.LBE22263:
 24792              	.LBE22265:
 24793              	.LBE22267:
 24794              	.LBE22269:
 24795              	.LBE22271:
 24796              	.LBE22273:
 24797              	.LBE22279:
 24798              	.LBE22283:
 24799              	.LBE22288:
 24800              	.LBE22292:
GAS LISTING /tmp/ccvmoMuv.s 			page 967


 24801              	.LBE22298:
 24802              	.LBE22301:
 24803              	.LBE22358:
 110:/usr/include/boost/exception/info.hpp ****                 info_[typeid_] = x;
 24804              		.loc 3 110 0 discriminator 1
 24805 02b4 488D0D00 		leaq	_ZZN5boost16exception_detail25error_info_container_impl3setERKNS_10shared_ptrINS0_15error_inf
 24805      000000
 24806 02bb 488D3500 		leaq	.LC11(%rip), %rsi
 24806      000000
 24807              	.LVL2176:
 24808 02c2 488D3D00 		leaq	.LC19(%rip), %rdi
 24808      000000
 24809              	.LVL2177:
 24810 02c9 BA6E0000 		movl	$110, %edx
 24810      00
 24811              	.LVL2178:
 24812 02ce E8000000 		call	__assert_fail@PLT
 24812      00
 24813              	.LVL2179:
 24814              		.cfi_endproc
 24815              	.LFE9846:
 24816              		.section	.gcc_except_table
 24817              	.LLSDA9846:
 24818 02d9 FF       		.byte	0xff
 24819 02da FF       		.byte	0xff
 24820 02db 01       		.byte	0x1
 24821 02dc 05       		.uleb128 .LLSDACSE9846-.LLSDACSB9846
 24822              	.LLSDACSB9846:
 24823 02dd B502     		.uleb128 .LEHB127-.LFB9846
 24824 02df 05       		.uleb128 .LEHE127-.LEHB127
 24825 02e0 00       		.uleb128 0
 24826 02e1 00       		.uleb128 0
 24827              	.LLSDACSE9846:
 24828              		.section	.text._ZN5boost16exception_detail25error_info_container_impl3setERKNS_10shared_ptrINS0_15
 24830              		.section	.text.startup,"ax",@progbits
 24831              		.p2align 4,,15
 24833              	_GLOBAL__sub_I__ZN2gr5lfast7costas24makeEfi:
 24834              	.LFB15740:
 404:costas2_impl.cc **** #ifdef GR_CTRLPORT
 405:costas2_impl.cc ****       // Getters
 406:costas2_impl.cc ****         rpcbasic_sptr(new rpcbasic_register_get<costas2_cc, float>(
 407:costas2_impl.cc **** 	      alias(), "error",
 408:costas2_impl.cc **** 	      &costas_loop_cc::error,
 409:costas2_impl.cc **** 	      pmt::mp(-2.0f), pmt::mp(2.0f), pmt::mp(0.0f),
 410:costas2_impl.cc **** 	      "", "Error signal of loop", RPC_PRIVLVL_MIN,
 411:costas2_impl.cc ****             DISPTIME | DISPOPTSTRIP)));
 412:costas2_impl.cc ****       add_rpc_variable(
 413:costas2_impl.cc ****           rpcbasic_sptr(new rpcbasic_register_get<control_loop, float>(
 414:costas2_impl.cc **** 	      alias(), "loop_bw",
 415:costas2_impl.cc **** 	      &control_loop::get_loop_bandwidth,
 416:costas2_impl.cc **** 	      pmt::mp(0.0f), pmt::mp(2.0f), pmt::mp(0.0f),
 417:costas2_impl.cc **** 	      "", "Loop bandwidth", RPC_PRIVLVL_MIN,
 418:costas2_impl.cc ****               DISPTIME | DISPOPTSTRIP)));
 419:costas2_impl.cc **** 
 420:costas2_impl.cc ****       // Setters
 421:costas2_impl.cc ****       add_rpc_variable(
 422:costas2_impl.cc ****           rpcbasic_sptr(new rpcbasic_register_set<control_loop, float>(
GAS LISTING /tmp/ccvmoMuv.s 			page 968


 423:costas2_impl.cc **** 	      alias(), "loop_bw",
 424:costas2_impl.cc **** 	      &control_loop::set_loop_bandwidth,
 425:costas2_impl.cc **** 	      pmt::mp(0.0f), pmt::mp(1.0f), pmt::mp(0.0f),
 426:costas2_impl.cc **** 	      "", "Loop bandwidth",
 427:costas2_impl.cc **** 	      RPC_PRIVLVL_MIN, DISPNULL)));
 428:costas2_impl.cc **** #endif /* GR_CTRLPORT */
 429:costas2_impl.cc ****     }
 430:costas2_impl.cc **** 
 431:costas2_impl.cc ****   } /* namespace lfast */
 432:costas2_impl.cc **** } /* namespace gr */
 24835              		.loc 5 432 0
 24836              		.cfi_startproc
 24837              	.LVL2180:
 24838 0000 4883EC08 		subq	$8, %rsp
 24839              		.cfi_def_cfa_offset 16
 24840              	.LBB22362:
 24841              	.LBB22363:
 221:/usr/include/boost/system/error_code.hpp ****     static const error_category &  errno_ecat     = generic_category();
 24842              		.loc 11 221 0
 24843 0004 E8000000 		call	_ZN5boost6system16generic_categoryEv@PLT
 24843      00
 24844              	.LVL2181:
 222:/usr/include/boost/system/error_code.hpp ****     static const error_category &  native_ecat    = system_category();
 24845              		.loc 11 222 0
 24846 0009 E8000000 		call	_ZN5boost6system16generic_categoryEv@PLT
 24846      00
 24847              	.LVL2182:
 223:/usr/include/boost/system/error_code.hpp **** # endif
 24848              		.loc 11 223 0
 24849 000e E8000000 		call	_ZN5boost6system15system_categoryEv@PLT
 24849      00
 24850              	.LVL2183:
 24851              		.file 51 "/usr/include/c++/6/iostream"
   1:/usr/include/c++/6/iostream **** // Standard iostream objects -*- C++ -*-
   2:/usr/include/c++/6/iostream **** 
   3:/usr/include/c++/6/iostream **** // Copyright (C) 1997-2016 Free Software Foundation, Inc.
   4:/usr/include/c++/6/iostream **** //
   5:/usr/include/c++/6/iostream **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/6/iostream **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/6/iostream **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/6/iostream **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/6/iostream **** // any later version.
  10:/usr/include/c++/6/iostream **** 
  11:/usr/include/c++/6/iostream **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/6/iostream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/6/iostream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/6/iostream **** // GNU General Public License for more details.
  15:/usr/include/c++/6/iostream **** 
  16:/usr/include/c++/6/iostream **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/6/iostream **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/6/iostream **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/6/iostream **** 
  20:/usr/include/c++/6/iostream **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/6/iostream **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/6/iostream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/6/iostream **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/6/iostream **** 
GAS LISTING /tmp/ccvmoMuv.s 			page 969


  25:/usr/include/c++/6/iostream **** /** @file include/iostream
  26:/usr/include/c++/6/iostream ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/6/iostream ****  */
  28:/usr/include/c++/6/iostream **** 
  29:/usr/include/c++/6/iostream **** //
  30:/usr/include/c++/6/iostream **** // ISO C++ 14882: 27.3  Standard iostream objects
  31:/usr/include/c++/6/iostream **** //
  32:/usr/include/c++/6/iostream **** 
  33:/usr/include/c++/6/iostream **** #ifndef _GLIBCXX_IOSTREAM
  34:/usr/include/c++/6/iostream **** #define _GLIBCXX_IOSTREAM 1
  35:/usr/include/c++/6/iostream **** 
  36:/usr/include/c++/6/iostream **** #pragma GCC system_header
  37:/usr/include/c++/6/iostream **** 
  38:/usr/include/c++/6/iostream **** #include <bits/c++config.h>
  39:/usr/include/c++/6/iostream **** #include <ostream>
  40:/usr/include/c++/6/iostream **** #include <istream>
  41:/usr/include/c++/6/iostream **** 
  42:/usr/include/c++/6/iostream **** namespace std _GLIBCXX_VISIBILITY(default)
  43:/usr/include/c++/6/iostream **** {
  44:/usr/include/c++/6/iostream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  45:/usr/include/c++/6/iostream **** 
  46:/usr/include/c++/6/iostream ****   /**
  47:/usr/include/c++/6/iostream ****    *  @name Standard Stream Objects
  48:/usr/include/c++/6/iostream ****    *
  49:/usr/include/c++/6/iostream ****    *  The &lt;iostream&gt; header declares the eight <em>standard stream
  50:/usr/include/c++/6/iostream ****    *  objects</em>.  For other declarations, see
  51:/usr/include/c++/6/iostream ****    *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/io.html
  52:/usr/include/c++/6/iostream ****    *  and the @link iosfwd I/O forward declarations @endlink
  53:/usr/include/c++/6/iostream ****    *
  54:/usr/include/c++/6/iostream ****    *  They are required by default to cooperate with the global C
  55:/usr/include/c++/6/iostream ****    *  library's @c FILE streams, and to be available during program
  56:/usr/include/c++/6/iostream ****    *  startup and termination. For more information, see the section of the
  57:/usr/include/c++/6/iostream ****    *  manual linked to above.
  58:/usr/include/c++/6/iostream ****   */
  59:/usr/include/c++/6/iostream ****   //@{
  60:/usr/include/c++/6/iostream ****   extern istream cin;		/// Linked to standard input
  61:/usr/include/c++/6/iostream ****   extern ostream cout;		/// Linked to standard output
  62:/usr/include/c++/6/iostream ****   extern ostream cerr;		/// Linked to standard error (unbuffered)
  63:/usr/include/c++/6/iostream ****   extern ostream clog;		/// Linked to standard error (buffered)
  64:/usr/include/c++/6/iostream **** 
  65:/usr/include/c++/6/iostream **** #ifdef _GLIBCXX_USE_WCHAR_T
  66:/usr/include/c++/6/iostream ****   extern wistream wcin;		/// Linked to standard input
  67:/usr/include/c++/6/iostream ****   extern wostream wcout;	/// Linked to standard output
  68:/usr/include/c++/6/iostream ****   extern wostream wcerr;	/// Linked to standard error (unbuffered)
  69:/usr/include/c++/6/iostream ****   extern wostream wclog;	/// Linked to standard error (buffered)
  70:/usr/include/c++/6/iostream **** #endif
  71:/usr/include/c++/6/iostream ****   //@}
  72:/usr/include/c++/6/iostream **** 
  73:/usr/include/c++/6/iostream ****   // For construction of filebuffers for cout, cin, cerr, clog et. al.
  74:/usr/include/c++/6/iostream ****   static ios_base::Init __ioinit;
 24852              		.loc 51 74 0
 24853 0013 488D3D00 		leaq	_ZStL8__ioinit(%rip), %rdi
 24853      000000
 24854 001a E8000000 		call	_ZNSt8ios_base4InitC1Ev@PLT
 24854      00
 24855              	.LVL2184:
 24856 001f 488B3D00 		movq	_ZNSt8ios_base4InitD1Ev@GOTPCREL(%rip), %rdi
GAS LISTING /tmp/ccvmoMuv.s 			page 970


 24856      000000
 24857 0026 488D1500 		leaq	__dso_handle(%rip), %rdx
 24857      000000
 24858 002d 488D3500 		leaq	_ZStL8__ioinit(%rip), %rsi
 24858      000000
 24859 0034 E8000000 		call	__cxa_atexit@PLT
 24859      00
 24860              	.LVL2185:
 133:/usr/include/boost/exception/detail/exception_ptr.hpp **** 
 134:/usr/include/boost/exception/detail/exception_ptr.hpp ****         template <class Exception>
 135:/usr/include/boost/exception/detail/exception_ptr.hpp ****         struct
 136:/usr/include/boost/exception/detail/exception_ptr.hpp ****         exception_ptr_static_exception_object
 137:/usr/include/boost/exception/detail/exception_ptr.hpp ****             {
 138:/usr/include/boost/exception/detail/exception_ptr.hpp ****             static exception_ptr const e;
 139:/usr/include/boost/exception/detail/exception_ptr.hpp ****             };
 140:/usr/include/boost/exception/detail/exception_ptr.hpp **** 
 141:/usr/include/boost/exception/detail/exception_ptr.hpp ****         template <class Exception>
 142:/usr/include/boost/exception/detail/exception_ptr.hpp ****         exception_ptr const
 143:/usr/include/boost/exception/detail/exception_ptr.hpp ****         exception_ptr_static_exception_object<Exception>::
 24861              		.loc 29 143 0
 24862 0039 803D0000 		cmpb	$0, _ZGVN5boost16exception_detail37exception_ptr_static_exception_objectINS0_10bad_alloc_EE1e
 24862      000000
 24863 0040 740E     		je	.L1452
 24864              	.L1449:
 24865 0042 803D0000 		cmpb	$0, _ZGVN5boost16exception_detail37exception_ptr_static_exception_objectINS0_14bad_exception_
 24865      000000
 24866 0049 7434     		je	.L1453
 24867              	.LBE22363:
 24868              	.LBE22362:
 24869              		.loc 5 432 0
 24870 004b 4883C408 		addq	$8, %rsp
 24871              		.cfi_remember_state
 24872              		.cfi_def_cfa_offset 8
 24873 004f C3       		ret
 24874              	.L1452:
 24875              		.cfi_restore_state
 24876              	.LBB22366:
 24877              	.LBB22364:
 24878              		.loc 29 143 0
 24879 0050 488D3D00 		leaq	_ZN5boost16exception_detail37exception_ptr_static_exception_objectINS0_10bad_alloc_EE1eE(%rip
 24879      000000
 24880 0057 C6050000 		movb	$1, _ZGVN5boost16exception_detail37exception_ptr_static_exception_objectINS0_10bad_alloc_EE1e
 24880      000001
 24881 005e E8000000 		call	_ZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13exception_pt
 24881      00
 24882              	.LVL2186:
 24883 0063 488D1500 		leaq	__dso_handle(%rip), %rdx
 24883      000000
 24884 006a 488D3500 		leaq	_ZN5boost16exception_detail37exception_ptr_static_exception_objectINS0_10bad_alloc_EE1eE(%rip
 24884      000000
 24885 0071 488D3D00 		leaq	_ZN5boost13exception_ptrD1Ev(%rip), %rdi
 24885      000000
 24886 0078 E8000000 		call	__cxa_atexit@PLT
 24886      00
 24887              	.LVL2187:
 24888 007d EBC3     		jmp	.L1449
 24889              	.L1453:
GAS LISTING /tmp/ccvmoMuv.s 			page 971


 24890 007f 488D3D00 		leaq	_ZN5boost16exception_detail37exception_ptr_static_exception_objectINS0_14bad_exception_EE1eE(
 24890      000000
 24891 0086 C6050000 		movb	$1, _ZGVN5boost16exception_detail37exception_ptr_static_exception_objectINS0_14bad_exception_
 24891      000001
 24892 008d E8000000 		call	_ZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_13exceptio
 24892      00
 24893              	.LVL2188:
 24894              	.LBE22364:
 24895              	.LBE22366:
 24896              		.loc 5 432 0
 24897 0092 58       		popq	%rax
 24898              		.cfi_def_cfa_offset 8
 24899              	.LBB22367:
 24900              	.LBB22365:
 24901              		.loc 29 143 0
 24902 0093 488D1500 		leaq	__dso_handle(%rip), %rdx
 24902      000000
 24903 009a 488D3500 		leaq	_ZN5boost16exception_detail37exception_ptr_static_exception_objectINS0_14bad_exception_EE1eE(
 24903      000000
 24904 00a1 488D3D00 		leaq	_ZN5boost13exception_ptrD1Ev(%rip), %rdi
 24904      000000
 24905 00a8 E9000000 		jmp	__cxa_atexit@PLT
 24905      00
 24906              	.LVL2189:
 24907              	.LBE22365:
 24908              	.LBE22367:
 24909              		.cfi_endproc
 24910              	.LFE15740:
 24912              		.section	.init_array,"aw"
 24913              		.align 8
 24914 0000 00000000 		.quad	_GLOBAL__sub_I__ZN2gr5lfast7costas24makeEfi
 24914      00000000 
 24915              		.section	.rodata
 24916              		.align 32
 24919              	_ZZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_13exception_ptr
 24920 0000 626F6F73 		.string	"boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Excepti
 24920      743A3A65 
 24920      78636570 
 24920      74696F6E 
 24920      5F707472 
 24921 0087 00000000 		.align 32
 24921      00000000 
 24921      00000000 
 24921      00000000 
 24921      00000000 
 24924              	_ZZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13exception_ptrEvE1
 24925 00a0 626F6F73 		.string	"boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Excepti
 24925      743A3A65 
 24925      78636570 
 24925      74696F6E 
 24925      5F707472 
 24926 0123 00000000 		.align 32
 24926      00000000 
 24926      00000000 
 24926      00000000 
 24926      00000000 
 24929              	_ZZNK5boost10shared_ptrINS_16exception_detail15error_info_baseEEdeEvE19__PRETTY_FUNCTION__:
GAS LISTING /tmp/ccvmoMuv.s 			page 972


 24930 0140 74797065 		.string	"typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [
 24930      6E616D65 
 24930      20626F6F 
 24930      73743A3A 
 24930      64657461 
 24931 0229 00000000 		.align 32
 24931      00000000 
 24931      00000000 
 24931      00000000 
 24931      00000000 
 24934              	_ZZNK5boost16exception_detail25error_info_container_impl3getERKNS0_10type_info_EE19__PRETTY_FUNCTIO
 24935 0240 76697274 		.string	"virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_deta
 24935      75616C20 
 24935      626F6F73 
 24935      743A3A73 
 24935      68617265 
 24936 02ee 00000000 		.align 32
 24936      00000000 
 24936      00000000 
 24936      00000000 
 24936      0000
 24939              	_ZZN5boost16exception_detail25error_info_container_impl3setERKNS_10shared_ptrINS0_15error_info_base
 24940 0300 76697274 		.string	"virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_
 24940      75616C20 
 24940      766F6964 
 24940      20626F6F 
 24940      73743A3A 
 24941              		.weak	_ZGVN5boost16exception_detail37exception_ptr_static_exception_objectINS0_14bad_exception_EE1
 24942              		.section	.bss._ZGVN5boost16exception_detail37exception_ptr_static_exception_objectINS0_14bad_excep
 24943              		.align 8
 24946              	_ZGVN5boost16exception_detail37exception_ptr_static_exception_objectINS0_14bad_exception_EE1eE:
 24947 0000 00000000 		.zero	8
 24947      00000000 
 24948              		.weak	_ZGVN5boost16exception_detail37exception_ptr_static_exception_objectINS0_10bad_alloc_EE1eE
 24949              		.section	.bss._ZGVN5boost16exception_detail37exception_ptr_static_exception_objectINS0_10bad_alloc
 24950              		.align 8
 24953              	_ZGVN5boost16exception_detail37exception_ptr_static_exception_objectINS0_10bad_alloc_EE1eE:
 24954 0000 00000000 		.zero	8
 24954      00000000 
 24955              		.weak	_ZN5boost16exception_detail37exception_ptr_static_exception_objectINS0_14bad_exception_EE1eE
 24956              		.section	.bss._ZN5boost16exception_detail37exception_ptr_static_exception_objectINS0_14bad_excepti
 24957              		.align 16
 24960              	_ZN5boost16exception_detail37exception_ptr_static_exception_objectINS0_14bad_exception_EE1eE:
 24961 0000 00000000 		.zero	16
 24961      00000000 
 24961      00000000 
 24961      00000000 
 24962              		.weak	_ZN5boost16exception_detail37exception_ptr_static_exception_objectINS0_10bad_alloc_EE1eE
 24963              		.section	.bss._ZN5boost16exception_detail37exception_ptr_static_exception_objectINS0_10bad_alloc_E
 24964              		.align 16
 24967              	_ZN5boost16exception_detail37exception_ptr_static_exception_objectINS0_10bad_alloc_EE1eE:
 24968 0000 00000000 		.zero	16
 24968      00000000 
 24968      00000000 
 24968      00000000 
 24969              		.weak	_ZTSN5boost16exception_detail20error_info_containerE
 24970              		.section	.rodata._ZTSN5boost16exception_detail20error_info_containerE,"aG",@progbits,_ZTSN5boost16
GAS LISTING /tmp/ccvmoMuv.s 			page 973


 24971              		.align 32
 24974              	_ZTSN5boost16exception_detail20error_info_containerE:
 24975 0000 4E35626F 		.string	"N5boost16exception_detail20error_info_containerE"
 24975      6F737431 
 24975      36657863 
 24975      65707469 
 24975      6F6E5F64 
 24976              		.weak	_ZTIN5boost16exception_detail20error_info_containerE
 24977              		.section	.data.rel.ro._ZTIN5boost16exception_detail20error_info_containerE,"awG",@progbits,_ZTIN5b
 24978              		.align 8
 24981              	_ZTIN5boost16exception_detail20error_info_containerE:
 24982 0000 00000000 		.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
 24982      00000000 
 24983 0008 00000000 		.quad	_ZTSN5boost16exception_detail20error_info_containerE
 24983      00000000 
 24984              		.weak	_ZTSN5boost9exceptionE
 24985              		.section	.rodata._ZTSN5boost9exceptionE,"aG",@progbits,_ZTSN5boost9exceptionE,comdat
 24986              		.align 16
 24989              	_ZTSN5boost9exceptionE:
 24990 0000 4E35626F 		.string	"N5boost9exceptionE"
 24990      6F737439 
 24990      65786365 
 24990      7074696F 
 24990      6E4500
 24991              		.weak	_ZTIN5boost9exceptionE
 24992              		.section	.data.rel.ro._ZTIN5boost9exceptionE,"awG",@progbits,_ZTIN5boost9exceptionE,comdat
 24993              		.align 8
 24996              	_ZTIN5boost9exceptionE:
 24997 0000 00000000 		.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
 24997      00000000 
 24998 0008 00000000 		.quad	_ZTSN5boost9exceptionE
 24998      00000000 
 24999              		.weak	_ZTSN5boost16exception_detail10clone_baseE
 25000              		.section	.rodata._ZTSN5boost16exception_detail10clone_baseE,"aG",@progbits,_ZTSN5boost16exception_
 25001              		.align 32
 25004              	_ZTSN5boost16exception_detail10clone_baseE:
 25005 0000 4E35626F 		.string	"N5boost16exception_detail10clone_baseE"
 25005      6F737431 
 25005      36657863 
 25005      65707469 
 25005      6F6E5F64 
 25006              		.weak	_ZTIN5boost16exception_detail10clone_baseE
 25007              		.section	.data.rel.ro._ZTIN5boost16exception_detail10clone_baseE,"awG",@progbits,_ZTIN5boost16exce
 25008              		.align 8
 25011              	_ZTIN5boost16exception_detail10clone_baseE:
 25012 0000 00000000 		.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
 25012      00000000 
 25013 0008 00000000 		.quad	_ZTSN5boost16exception_detail10clone_baseE
 25013      00000000 
 25014              		.weak	_ZTSN5boost6detail15sp_counted_baseE
 25015              		.section	.rodata._ZTSN5boost6detail15sp_counted_baseE,"aG",@progbits,_ZTSN5boost6detail15sp_counte
 25016              		.align 32
 25019              	_ZTSN5boost6detail15sp_counted_baseE:
 25020 0000 4E35626F 		.string	"N5boost6detail15sp_counted_baseE"
 25020      6F737436 
 25020      64657461 
 25020      696C3135 
GAS LISTING /tmp/ccvmoMuv.s 			page 974


 25020      73705F63 
 25021              		.weak	_ZTIN5boost6detail15sp_counted_baseE
 25022              		.section	.data.rel.ro._ZTIN5boost6detail15sp_counted_baseE,"awG",@progbits,_ZTIN5boost6detail15sp_
 25023              		.align 8
 25026              	_ZTIN5boost6detail15sp_counted_baseE:
 25027 0000 00000000 		.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
 25027      00000000 
 25028 0008 00000000 		.quad	_ZTSN5boost6detail15sp_counted_baseE
 25028      00000000 
 25029              		.weak	_ZTSN5boost6system12system_errorE
 25030              		.section	.rodata._ZTSN5boost6system12system_errorE,"aG",@progbits,_ZTSN5boost6system12system_error
 25031              		.align 16
 25034              	_ZTSN5boost6system12system_errorE:
 25035 0000 4E35626F 		.string	"N5boost6system12system_errorE"
 25035      6F737436 
 25035      73797374 
 25035      656D3132 
 25035      73797374 
 25036              		.weak	_ZTIN5boost6system12system_errorE
 25037              		.section	.data.rel.ro._ZTIN5boost6system12system_errorE,"awG",@progbits,_ZTIN5boost6system12system
 25038              		.align 8
 25041              	_ZTIN5boost6system12system_errorE:
 25042 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 25042      00000000 
 25043 0008 00000000 		.quad	_ZTSN5boost6system12system_errorE
 25043      00000000 
 25044 0010 00000000 		.quad	_ZTISt13runtime_error
 25044      00000000 
 25045              		.weak	_ZTSN5boost17bad_function_callE
 25046              		.section	.rodata._ZTSN5boost17bad_function_callE,"aG",@progbits,_ZTSN5boost17bad_function_callE,co
 25047              		.align 16
 25050              	_ZTSN5boost17bad_function_callE:
 25051 0000 4E35626F 		.string	"N5boost17bad_function_callE"
 25051      6F737431 
 25051      37626164 
 25051      5F66756E 
 25051      6374696F 
 25052              		.weak	_ZTIN5boost17bad_function_callE
 25053              		.section	.data.rel.ro._ZTIN5boost17bad_function_callE,"awG",@progbits,_ZTIN5boost17bad_function_ca
 25054              		.align 8
 25057              	_ZTIN5boost17bad_function_callE:
 25058 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 25058      00000000 
 25059 0008 00000000 		.quad	_ZTSN5boost17bad_function_callE
 25059      00000000 
 25060 0010 00000000 		.quad	_ZTISt13runtime_error
 25060      00000000 
 25061              		.weak	_ZTSN5boost16exception_detail25error_info_container_implE
 25062              		.section	.rodata._ZTSN5boost16exception_detail25error_info_container_implE,"aG",@progbits,_ZTSN5bo
 25063              		.align 32
 25066              	_ZTSN5boost16exception_detail25error_info_container_implE:
 25067 0000 4E35626F 		.string	"N5boost16exception_detail25error_info_container_implE"
 25067      6F737431 
 25067      36657863 
 25067      65707469 
 25067      6F6E5F64 
 25068              		.weak	_ZTIN5boost16exception_detail25error_info_container_implE
GAS LISTING /tmp/ccvmoMuv.s 			page 975


 25069              		.section	.data.rel.ro._ZTIN5boost16exception_detail25error_info_container_implE,"awG",@progbits,_Z
 25070              		.align 8
 25073              	_ZTIN5boost16exception_detail25error_info_container_implE:
 25074 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 25074      00000000 
 25075 0008 00000000 		.quad	_ZTSN5boost16exception_detail25error_info_container_implE
 25075      00000000 
 25076 0010 00000000 		.quad	_ZTIN5boost16exception_detail20error_info_containerE
 25076      00000000 
 25077              		.weak	_ZTSN5boost16exception_detail10bad_alloc_E
 25078              		.section	.rodata._ZTSN5boost16exception_detail10bad_alloc_E,"aG",@progbits,_ZTSN5boost16exception_
 25079              		.align 32
 25082              	_ZTSN5boost16exception_detail10bad_alloc_E:
 25083 0000 4E35626F 		.string	"N5boost16exception_detail10bad_alloc_E"
 25083      6F737431 
 25083      36657863 
 25083      65707469 
 25083      6F6E5F64 
 25084              		.weak	_ZTIN5boost16exception_detail10bad_alloc_E
 25085              		.section	.data.rel.ro._ZTIN5boost16exception_detail10bad_alloc_E,"awG",@progbits,_ZTIN5boost16exce
 25086              		.align 8
 25089              	_ZTIN5boost16exception_detail10bad_alloc_E:
 25090 0000 00000000 		.quad	_ZTVN10__cxxabiv121__vmi_class_type_infoE+16
 25090      00000000 
 25091 0008 00000000 		.quad	_ZTSN5boost16exception_detail10bad_alloc_E
 25091      00000000 
 25092 0010 00000000 		.long	0
 25093 0014 02000000 		.long	2
 25094 0018 00000000 		.quad	_ZTIN5boost9exceptionE
 25094      00000000 
 25095 0020 02000000 		.quad	2
 25095      00000000 
 25096 0028 00000000 		.quad	_ZTISt9bad_alloc
 25096      00000000 
 25097 0030 02280000 		.quad	10242
 25097      00000000 
 25098              		.weak	_ZTSN5boost16exception_detail14bad_exception_E
 25099              		.section	.rodata._ZTSN5boost16exception_detail14bad_exception_E,"aG",@progbits,_ZTSN5boost16except
 25100              		.align 32
 25103              	_ZTSN5boost16exception_detail14bad_exception_E:
 25104 0000 4E35626F 		.string	"N5boost16exception_detail14bad_exception_E"
 25104      6F737431 
 25104      36657863 
 25104      65707469 
 25104      6F6E5F64 
 25105              		.weak	_ZTIN5boost16exception_detail14bad_exception_E
 25106              		.section	.data.rel.ro._ZTIN5boost16exception_detail14bad_exception_E,"awG",@progbits,_ZTIN5boost16
 25107              		.align 8
 25110              	_ZTIN5boost16exception_detail14bad_exception_E:
 25111 0000 00000000 		.quad	_ZTVN10__cxxabiv121__vmi_class_type_infoE+16
 25111      00000000 
 25112 0008 00000000 		.quad	_ZTSN5boost16exception_detail14bad_exception_E
 25112      00000000 
 25113 0010 00000000 		.long	0
 25114 0014 02000000 		.long	2
 25115 0018 00000000 		.quad	_ZTIN5boost9exceptionE
 25115      00000000 
GAS LISTING /tmp/ccvmoMuv.s 			page 976


 25116 0020 02000000 		.quad	2
 25116      00000000 
 25117 0028 00000000 		.quad	_ZTISt13bad_exception
 25117      00000000 
 25118 0030 02280000 		.quad	10242
 25118      00000000 
 25119              		.weak	_ZTSN2gr5lfast7costas2E
 25120              		.section	.rodata._ZTSN2gr5lfast7costas2E,"aG",@progbits,_ZTSN2gr5lfast7costas2E,comdat
 25121              		.align 16
 25124              	_ZTSN2gr5lfast7costas2E:
 25125 0000 4E326772 		.string	"N2gr5lfast7costas2E"
 25125      356C6661 
 25125      73743763 
 25125      6F737461 
 25125      73324500 
 25126              		.weak	_ZTIN2gr5lfast7costas2E
 25127              		.section	.data.rel.ro._ZTIN2gr5lfast7costas2E,"awG",@progbits,_ZTIN2gr5lfast7costas2E,comdat
 25128              		.align 8
 25131              	_ZTIN2gr5lfast7costas2E:
 25132 0000 00000000 		.quad	_ZTVN10__cxxabiv121__vmi_class_type_infoE+16
 25132      00000000 
 25133 0008 00000000 		.quad	_ZTSN2gr5lfast7costas2E
 25133      00000000 
 25134 0010 00000000 		.long	0
 25135 0014 02000000 		.long	2
 25136 0018 00000000 		.quad	_ZTIN2gr10sync_blockE
 25136      00000000 
 25137 0020 03E8FFFF 		.quad	-6141
 25137      FFFFFFFF 
 25138 0028 00000000 		.quad	_ZTIN2gr6blocks12control_loopE
 25138      00000000 
 25139 0030 03E0FFFF 		.quad	-8189
 25139      FFFFFFFF 
 25140              		.weak	_ZTSN2gr5lfast12costas2_implE
 25141              		.section	.rodata._ZTSN2gr5lfast12costas2_implE,"aG",@progbits,_ZTSN2gr5lfast12costas2_implE,comdat
 25142              		.align 16
 25145              	_ZTSN2gr5lfast12costas2_implE:
 25146 0000 4E326772 		.string	"N2gr5lfast12costas2_implE"
 25146      356C6661 
 25146      73743132 
 25146      636F7374 
 25146      6173325F 
 25147              		.weak	_ZTIN2gr5lfast12costas2_implE
 25148              		.section	.data.rel.ro._ZTIN2gr5lfast12costas2_implE,"awG",@progbits,_ZTIN2gr5lfast12costas2_implE,
 25149              		.align 8
 25152              	_ZTIN2gr5lfast12costas2_implE:
 25153 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 25153      00000000 
 25154 0008 00000000 		.quad	_ZTSN2gr5lfast12costas2_implE
 25154      00000000 
 25155 0010 00000000 		.quad	_ZTIN2gr5lfast7costas2E
 25155      00000000 
 25156              		.weak	_ZTSN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE
 25157              		.section	.rodata._ZTSN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE,"aG",@progbits,_ZTS
 25158              		.align 32
 25161              	_ZTSN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE:
 25162 0000 4E35626F 		.string	"N5boost16exception_detail10clone_implINS0_10bad_alloc_EEE"
GAS LISTING /tmp/ccvmoMuv.s 			page 977


 25162      6F737431 
 25162      36657863 
 25162      65707469 
 25162      6F6E5F64 
 25163              		.weak	_ZTIN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE
 25164              		.section	.data.rel.ro._ZTIN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE,"awG",@progbit
 25165              		.align 8
 25168              	_ZTIN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE:
 25169 0000 00000000 		.quad	_ZTVN10__cxxabiv121__vmi_class_type_infoE+16
 25169      00000000 
 25170 0008 00000000 		.quad	_ZTSN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE
 25170      00000000 
 25171 0010 00000000 		.long	0
 25172 0014 02000000 		.long	2
 25173 0018 00000000 		.quad	_ZTIN5boost16exception_detail10bad_alloc_E
 25173      00000000 
 25174 0020 02000000 		.quad	2
 25174      00000000 
 25175 0028 00000000 		.quad	_ZTIN5boost16exception_detail10clone_baseE
 25175      00000000 
 25176 0030 03E8FFFF 		.quad	-6141
 25176      FFFFFFFF 
 25177              		.weak	_ZTSN5boost16exception_detail10clone_implINS0_14bad_exception_EEE
 25178              		.section	.rodata._ZTSN5boost16exception_detail10clone_implINS0_14bad_exception_EEE,"aG",@progbits,
 25179              		.align 32
 25182              	_ZTSN5boost16exception_detail10clone_implINS0_14bad_exception_EEE:
 25183 0000 4E35626F 		.string	"N5boost16exception_detail10clone_implINS0_14bad_exception_EEE"
 25183      6F737431 
 25183      36657863 
 25183      65707469 
 25183      6F6E5F64 
 25184              		.weak	_ZTIN5boost16exception_detail10clone_implINS0_14bad_exception_EEE
 25185              		.section	.data.rel.ro._ZTIN5boost16exception_detail10clone_implINS0_14bad_exception_EEE,"awG",@pro
 25186              		.align 8
 25189              	_ZTIN5boost16exception_detail10clone_implINS0_14bad_exception_EEE:
 25190 0000 00000000 		.quad	_ZTVN10__cxxabiv121__vmi_class_type_infoE+16
 25190      00000000 
 25191 0008 00000000 		.quad	_ZTSN5boost16exception_detail10clone_implINS0_14bad_exception_EEE
 25191      00000000 
 25192 0010 00000000 		.long	0
 25193 0014 02000000 		.long	2
 25194 0018 00000000 		.quad	_ZTIN5boost16exception_detail14bad_exception_E
 25194      00000000 
 25195 0020 02000000 		.quad	2
 25195      00000000 
 25196 0028 00000000 		.quad	_ZTIN5boost16exception_detail10clone_baseE
 25196      00000000 
 25197 0030 03E8FFFF 		.quad	-6141
 25197      FFFFFFFF 
 25198              		.weak	_ZTSN5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE
 25199              		.section	.rodata._ZTSN5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE,"aG"
 25200              		.align 32
 25203              	_ZTSN5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE:
 25204 0000 4E35626F 		.string	"N5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE"
 25204      6F737431 
 25204      36657863 
 25204      65707469 
GAS LISTING /tmp/ccvmoMuv.s 			page 978


 25204      6F6E5F64 
 25205              		.weak	_ZTIN5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE
 25206              		.section	.data.rel.ro._ZTIN5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE
 25207              		.align 8
 25210              	_ZTIN5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE:
 25211 0000 00000000 		.quad	_ZTVN10__cxxabiv121__vmi_class_type_infoE+16
 25211      00000000 
 25212 0008 00000000 		.quad	_ZTSN5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE
 25212      00000000 
 25213 0010 00000000 		.long	0
 25214 0014 02000000 		.long	2
 25215 0018 00000000 		.quad	_ZTIN5boost17bad_function_callE
 25215      00000000 
 25216 0020 02000000 		.quad	2
 25216      00000000 
 25217 0028 00000000 		.quad	_ZTIN5boost9exceptionE
 25217      00000000 
 25218 0030 02100000 		.quad	4098
 25218      00000000 
 25219              		.weak	_ZTSN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEE
 25220              		.section	.rodata._ZTSN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_func
 25221              		.align 32
 25224              	_ZTSN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEEE:
 25225 0000 4E35626F 		.string	"N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEE
 25225      6F737431 
 25225      36657863 
 25225      65707469 
 25225      6F6E5F64 
 25226              		.weak	_ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEE
 25227              		.section	.data.rel.ro._ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad
 25228              		.align 8
 25231              	_ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEEE:
 25232 0000 00000000 		.quad	_ZTVN10__cxxabiv121__vmi_class_type_infoE+16
 25232      00000000 
 25233 0008 00000000 		.quad	_ZTSN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEE
 25233      00000000 
 25234 0010 00000000 		.long	0
 25235 0014 02000000 		.long	2
 25236 0018 00000000 		.quad	_ZTIN5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE
 25236      00000000 
 25237 0020 02000000 		.quad	2
 25237      00000000 
 25238 0028 00000000 		.quad	_ZTIN5boost16exception_detail10clone_baseE
 25238      00000000 
 25239 0030 03E8FFFF 		.quad	-6141
 25239      FFFFFFFF 
 25240              		.weak	_ZTSN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEE
 25241              		.section	.rodata._ZTSN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad
 25242              		.align 32
 25245              	_ZTSN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEEE:
 25246 0000 4E35626F 		.string	"N5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEEE
 25246      6F737436 
 25246      64657461 
 25246      696C3137 
 25246      73705F63 
 25247              		.weak	_ZTIN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEE
 25248              		.section	.data.rel.ro._ZTIN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_
GAS LISTING /tmp/ccvmoMuv.s 			page 979


 25249              		.align 8
 25252              	_ZTIN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEEE:
 25253 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 25253      00000000 
 25254 0008 00000000 		.quad	_ZTSN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEE
 25254      00000000 
 25255 0010 00000000 		.quad	_ZTIN5boost6detail15sp_counted_baseE
 25255      00000000 
 25256              		.weak	_ZTSN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_
 25257              		.section	.rodata._ZTSN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad
 25258              		.align 32
 25261              	_ZTSN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEEE:
 25262 0000 4E35626F 		.string	"N5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_E
 25262      6F737436 
 25262      64657461 
 25262      696C3137 
 25262      73705F63 
 25263              		.weak	_ZTIN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_
 25264              		.section	.data.rel.ro._ZTIN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_
 25265              		.align 8
 25268              	_ZTIN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEEE:
 25269 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 25269      00000000 
 25270 0008 00000000 		.quad	_ZTSN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_
 25270      00000000 
 25271 0010 00000000 		.quad	_ZTIN5boost6detail15sp_counted_baseE
 25271      00000000 
 25272              		.weak	_ZTVN5boost9exceptionE
 25273              		.section	.data.rel.ro._ZTVN5boost9exceptionE,"awG",@progbits,_ZTVN5boost9exceptionE,comdat
 25274              		.align 8
 25277              	_ZTVN5boost9exceptionE:
 25278 0000 00000000 		.quad	0
 25278      00000000 
 25279 0008 00000000 		.quad	_ZTIN5boost9exceptionE
 25279      00000000 
 25280 0010 00000000 		.quad	__cxa_pure_virtual
 25280      00000000 
 25281 0018 00000000 		.quad	__cxa_pure_virtual
 25281      00000000 
 25282              		.weak	_ZTVN5boost16exception_detail10clone_baseE
 25283              		.section	.data.rel.ro._ZTVN5boost16exception_detail10clone_baseE,"awG",@progbits,_ZTVN5boost16exce
 25284              		.align 8
 25287              	_ZTVN5boost16exception_detail10clone_baseE:
 25288 0000 00000000 		.quad	0
 25288      00000000 
 25289 0008 00000000 		.quad	_ZTIN5boost16exception_detail10clone_baseE
 25289      00000000 
 25290 0010 00000000 		.quad	__cxa_pure_virtual
 25290      00000000 
 25291 0018 00000000 		.quad	__cxa_pure_virtual
 25291      00000000 
 25292 0020 00000000 		.quad	0
 25292      00000000 
 25293 0028 00000000 		.quad	0
 25293      00000000 
 25294              		.weak	_ZTVN5boost6system12system_errorE
 25295              		.section	.data.rel.ro.local._ZTVN5boost6system12system_errorE,"awG",@progbits,_ZTVN5boost6system12
GAS LISTING /tmp/ccvmoMuv.s 			page 980


 25296              		.align 8
 25299              	_ZTVN5boost6system12system_errorE:
 25300 0000 00000000 		.quad	0
 25300      00000000 
 25301 0008 00000000 		.quad	_ZTIN5boost6system12system_errorE
 25301      00000000 
 25302 0010 00000000 		.quad	_ZN5boost6system12system_errorD1Ev
 25302      00000000 
 25303 0018 00000000 		.quad	_ZN5boost6system12system_errorD0Ev
 25303      00000000 
 25304 0020 00000000 		.quad	_ZNK5boost6system12system_error4whatEv
 25304      00000000 
 25305              		.weak	_ZTVN5boost17bad_function_callE
 25306              		.section	.data.rel.ro._ZTVN5boost17bad_function_callE,"awG",@progbits,_ZTVN5boost17bad_function_ca
 25307              		.align 8
 25310              	_ZTVN5boost17bad_function_callE:
 25311 0000 00000000 		.quad	0
 25311      00000000 
 25312 0008 00000000 		.quad	_ZTIN5boost17bad_function_callE
 25312      00000000 
 25313 0010 00000000 		.quad	_ZN5boost17bad_function_callD1Ev
 25313      00000000 
 25314 0018 00000000 		.quad	_ZN5boost17bad_function_callD0Ev
 25314      00000000 
 25315 0020 00000000 		.quad	_ZNKSt13runtime_error4whatEv
 25315      00000000 
 25316              		.weak	_ZTVN5boost16exception_detail25error_info_container_implE
 25317              		.section	.data.rel.ro.local._ZTVN5boost16exception_detail25error_info_container_implE,"awG",@progb
 25318              		.align 8
 25321              	_ZTVN5boost16exception_detail25error_info_container_implE:
 25322 0000 00000000 		.quad	0
 25322      00000000 
 25323 0008 00000000 		.quad	_ZTIN5boost16exception_detail25error_info_container_implE
 25323      00000000 
 25324 0010 00000000 		.quad	_ZNK5boost16exception_detail25error_info_container_impl22diagnostic_informationEPKc
 25324      00000000 
 25325 0018 00000000 		.quad	_ZNK5boost16exception_detail25error_info_container_impl3getERKNS0_10type_info_E
 25325      00000000 
 25326 0020 00000000 		.quad	_ZN5boost16exception_detail25error_info_container_impl3setERKNS_10shared_ptrINS0_15error_inf
 25326      00000000 
 25327 0028 00000000 		.quad	_ZNK5boost16exception_detail25error_info_container_impl7add_refEv
 25327      00000000 
 25328 0030 00000000 		.quad	_ZNK5boost16exception_detail25error_info_container_impl7releaseEv
 25328      00000000 
 25329 0038 00000000 		.quad	_ZNK5boost16exception_detail25error_info_container_impl5cloneEv
 25329      00000000 
 25330              		.weak	_ZTVN5boost16exception_detail10bad_alloc_E
 25331              		.section	.data.rel.ro._ZTVN5boost16exception_detail10bad_alloc_E,"awG",@progbits,_ZTVN5boost16exce
 25332              		.align 8
 25335              	_ZTVN5boost16exception_detail10bad_alloc_E:
 25336 0000 00000000 		.quad	0
 25336      00000000 
 25337 0008 00000000 		.quad	_ZTIN5boost16exception_detail10bad_alloc_E
 25337      00000000 
 25338 0010 00000000 		.quad	_ZN5boost16exception_detail10bad_alloc_D1Ev
 25338      00000000 
 25339 0018 00000000 		.quad	_ZN5boost16exception_detail10bad_alloc_D0Ev
GAS LISTING /tmp/ccvmoMuv.s 			page 981


 25339      00000000 
 25340 0020 D8FFFFFF 		.quad	-40
 25340      FFFFFFFF 
 25341 0028 00000000 		.quad	_ZTIN5boost16exception_detail10bad_alloc_E
 25341      00000000 
 25342 0030 00000000 		.quad	_ZThn40_N5boost16exception_detail10bad_alloc_D1Ev
 25342      00000000 
 25343 0038 00000000 		.quad	_ZThn40_N5boost16exception_detail10bad_alloc_D0Ev
 25343      00000000 
 25344 0040 00000000 		.quad	_ZNKSt9bad_alloc4whatEv
 25344      00000000 
 25345              		.weak	_ZTVN5boost16exception_detail14bad_exception_E
 25346              		.section	.data.rel.ro._ZTVN5boost16exception_detail14bad_exception_E,"awG",@progbits,_ZTVN5boost16
 25347              		.align 8
 25350              	_ZTVN5boost16exception_detail14bad_exception_E:
 25351 0000 00000000 		.quad	0
 25351      00000000 
 25352 0008 00000000 		.quad	_ZTIN5boost16exception_detail14bad_exception_E
 25352      00000000 
 25353 0010 00000000 		.quad	_ZN5boost16exception_detail14bad_exception_D1Ev
 25353      00000000 
 25354 0018 00000000 		.quad	_ZN5boost16exception_detail14bad_exception_D0Ev
 25354      00000000 
 25355 0020 D8FFFFFF 		.quad	-40
 25355      FFFFFFFF 
 25356 0028 00000000 		.quad	_ZTIN5boost16exception_detail14bad_exception_E
 25356      00000000 
 25357 0030 00000000 		.quad	_ZThn40_N5boost16exception_detail14bad_exception_D1Ev
 25357      00000000 
 25358 0038 00000000 		.quad	_ZThn40_N5boost16exception_detail14bad_exception_D0Ev
 25358      00000000 
 25359 0040 00000000 		.quad	_ZNKSt13bad_exception4whatEv
 25359      00000000 
 25360              		.hidden	_ZTCN2gr5lfast12costas2_implE0_NS0_7costas2E
 25361              		.weak	_ZTCN2gr5lfast12costas2_implE0_NS0_7costas2E
 25362              		.section	.data.rel.ro._ZTCN2gr5lfast12costas2_implE0_NS0_7costas2E,"awG",@progbits,_ZTVN2gr5lfast1
 25363              		.align 8
 25366              	_ZTCN2gr5lfast12costas2_implE0_NS0_7costas2E:
 25367 0000 78020000 		.quad	632
 25367      00000000 
 25368 0008 28000000 		.quad	40
 25368      00000000 
 25369 0010 00000000 		.quad	0
 25369      00000000 
 25370 0018 00000000 		.quad	_ZTIN2gr5lfast7costas2E
 25370      00000000 
 25371 0020 00000000 		.quad	__cxa_pure_virtual
 25371      00000000 
 25372 0028 00000000 		.quad	0
 25372      00000000 
 25373 0030 00000000 		.quad	0
 25373      00000000 
 25374 0038 00000000 		.quad	0
 25374      00000000 
 25375 0040 00000000 		.quad	0
 25375      00000000 
 25376 0048 00000000 		.quad	0
GAS LISTING /tmp/ccvmoMuv.s 			page 982


 25376      00000000 
 25377 0050 00000000 		.quad	0
 25377      00000000 
 25378 0058 00000000 		.quad	0
 25378      00000000 
 25379 0060 00000000 		.quad	0
 25379      00000000 
 25380 0068 00000000 		.quad	0
 25380      00000000 
 25381 0070 00000000 		.quad	0
 25381      00000000 
 25382 0078 00000000 		.quad	0
 25382      00000000 
 25383 0080 00000000 		.quad	0
 25383      00000000 
 25384 0088 00000000 		.quad	0
 25384      00000000 
 25385 0090 00000000 		.quad	0
 25385      00000000 
 25386 0098 00000000 		.quad	0
 25386      00000000 
 25387 00a0 00000000 		.quad	0
 25387      00000000 
 25388 00a8 00000000 		.quad	0
 25388      00000000 
 25389 00b0 00000000 		.quad	0
 25389      00000000 
 25390 00b8 00000000 		.quad	0
 25390      00000000 
 25391 00c0 00000000 		.quad	0
 25391      00000000 
 25392 00c8 00000000 		.quad	0
 25392      00000000 
 25393 00d0 D8FFFFFF 		.quad	-40
 25393      FFFFFFFF 
 25394 00d8 D8FFFFFF 		.quad	-40
 25394      FFFFFFFF 
 25395 00e0 00000000 		.quad	_ZTIN2gr5lfast7costas2E
 25395      00000000 
 25396 00e8 00000000 		.quad	0
 25396      00000000 
 25397 00f0 00000000 		.quad	0
 25397      00000000 
 25398 00f8 00000000 		.quad	_ZN2gr12msg_accepter4postEN5boost13intrusive_ptrIN3pmt8pmt_baseEEES5_
 25398      00000000 
 25399 0100 00000000 		.quad	_ZN2gr11basic_block15has_msg_handlerEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE
 25399      00000000 
 25400 0108 00000000 		.quad	_ZN2gr11basic_block12dispatch_msgEN5boost13intrusive_ptrIN3pmt8pmt_baseEEES5_
 25400      00000000 
 25401 0110 00000000 		.quad	_ZN2gr11basic_block20message_port_is_hierEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE
 25401      00000000 
 25402 0118 00000000 		.quad	_ZN2gr11basic_block23message_port_is_hier_inEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE
 25402      00000000 
 25403 0120 00000000 		.quad	_ZN2gr11basic_block24message_port_is_hier_outEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE
 25403      00000000 
 25404 0128 00000000 		.quad	_ZN2gr11basic_block12has_msg_portEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE
 25404      00000000 
GAS LISTING /tmp/ccvmoMuv.s 			page 983


 25405 0130 00000000 		.quad	_ZN2gr11basic_block9setup_rpcEv
 25405      00000000 
 25406 0138 00000000 		.quad	_ZN2gr11basic_block14check_topologyEii
 25406      00000000 
 25407 0140 00000000 		.quad	_ZN2gr5block22set_processor_affinityERKSt6vectorIiSaIiEE
 25407      00000000 
 25408 0148 00000000 		.quad	_ZN2gr5block24unset_processor_affinityEv
 25408      00000000 
 25409 0150 00000000 		.quad	_ZN2gr5block18processor_affinityEv
 25409      00000000 
 25410 0158 00000000 		.quad	_ZN2gr10sync_block8forecastEiRSt6vectorIiSaIiEE
 25410      00000000 
 25411 0160 00000000 		.quad	_ZN2gr10sync_block12general_workEiRSt6vectorIiSaIiEERS1_IPKvSaIS6_EERS1_IPvSaISA_EE
 25411      00000000 
 25412 0168 00000000 		.quad	_ZN2gr5block5startEv
 25412      00000000 
 25413 0170 00000000 		.quad	_ZN2gr5block4stopEv
 25413      00000000 
 25414 0178 00000000 		.quad	_ZN2gr10sync_block28fixed_rate_ninput_to_noutputEi
 25414      00000000 
 25415 0180 00000000 		.quad	_ZN2gr10sync_block28fixed_rate_noutput_to_ninputEi
 25415      00000000 
 25416 0188 00000000 		.quad	__cxa_pure_virtual
 25416      00000000 
 25417 0190 00000000 		.quad	0
 25417      00000000 
 25418 0198 88FDFFFF 		.quad	-632
 25418      FFFFFFFF 
 25419 01a0 88FDFFFF 		.quad	-632
 25419      FFFFFFFF 
 25420 01a8 00000000 		.quad	_ZTIN2gr5lfast7costas2E
 25420      00000000 
 25421 01b0 00000000 		.quad	0
 25421      00000000 
 25422 01b8 00000000 		.quad	0
 25422      00000000 
 25423 01c0 00000000 		.quad	_ZN2gr6blocks12control_loop18set_loop_bandwidthEf
 25423      00000000 
 25424              		.weak	_ZTTN2gr5lfast12costas2_implE
 25425              		.section	.data.rel.ro.local._ZTTN2gr5lfast12costas2_implE,"awG",@progbits,_ZTVN2gr5lfast12costas2_
 25426              		.align 8
 25429              	_ZTTN2gr5lfast12costas2_implE:
 25430 0000 00000000 		.quad	_ZTVN2gr5lfast12costas2_implE+32
 25430      00000000 
 25431 0008 00000000 		.quad	_ZTCN2gr5lfast12costas2_implE0_NS0_7costas2E+32
 25431      00000000 
 25432 0010 00000000 		.quad	_ZTCN2gr5lfast12costas2_implE0_NS0_7costas2E+232
 25432      00000000 
 25433 0018 00000000 		.quad	_ZTCN2gr5lfast12costas2_implE0_NS0_7costas2E+432
 25433      00000000 
 25434 0020 00000000 		.quad	_ZTVN2gr5lfast12costas2_implE+248
 25434      00000000 
 25435 0028 00000000 		.quad	_ZTVN2gr5lfast12costas2_implE+448
 25435      00000000 
 25436              		.weak	_ZTVN2gr5lfast12costas2_implE
 25437              		.section	.data.rel.ro._ZTVN2gr5lfast12costas2_implE,"awG",@progbits,_ZTVN2gr5lfast12costas2_implE,
 25438              		.align 8
GAS LISTING /tmp/ccvmoMuv.s 			page 984


 25441              	_ZTVN2gr5lfast12costas2_implE:
 25442 0000 78020000 		.quad	632
 25442      00000000 
 25443 0008 28000000 		.quad	40
 25443      00000000 
 25444 0010 00000000 		.quad	0
 25444      00000000 
 25445 0018 00000000 		.quad	_ZTIN2gr5lfast12costas2_implE
 25445      00000000 
 25446 0020 00000000 		.quad	_ZNK2gr5lfast12costas2_impl5errorEv
 25446      00000000 
 25447 0028 00000000 		.quad	_ZN2gr5lfast12costas2_implD1Ev
 25447      00000000 
 25448 0030 00000000 		.quad	_ZN2gr5lfast12costas2_implD0Ev
 25448      00000000 
 25449 0038 00000000 		.quad	_ZN2gr5lfast12costas2_impl9setup_rpcEv
 25449      00000000 
 25450 0040 00000000 		.quad	_ZN2gr5lfast12costas2_impl4workEiRSt6vectorIPKvSaIS4_EERS2_IPvSaIS8_EE
 25450      00000000 
 25451 0048 D8FFFFFF 		.quad	-40
 25451      FFFFFFFF 
 25452 0050 00000000 		.quad	0
 25452      00000000 
 25453 0058 00000000 		.quad	0
 25453      00000000 
 25454 0060 00000000 		.quad	0
 25454      00000000 
 25455 0068 00000000 		.quad	0
 25455      00000000 
 25456 0070 00000000 		.quad	0
 25456      00000000 
 25457 0078 00000000 		.quad	0
 25457      00000000 
 25458 0080 00000000 		.quad	0
 25458      00000000 
 25459 0088 00000000 		.quad	0
 25459      00000000 
 25460 0090 00000000 		.quad	0
 25460      00000000 
 25461 0098 00000000 		.quad	0
 25461      00000000 
 25462 00a0 D8FFFFFF 		.quad	-40
 25462      FFFFFFFF 
 25463 00a8 00000000 		.quad	0
 25463      00000000 
 25464 00b0 00000000 		.quad	0
 25464      00000000 
 25465 00b8 00000000 		.quad	0
 25465      00000000 
 25466 00c0 00000000 		.quad	0
 25466      00000000 
 25467 00c8 00000000 		.quad	0
 25467      00000000 
 25468 00d0 00000000 		.quad	0
 25468      00000000 
 25469 00d8 00000000 		.quad	0
 25469      00000000 
GAS LISTING /tmp/ccvmoMuv.s 			page 985


 25470 00e0 D8FFFFFF 		.quad	-40
 25470      FFFFFFFF 
 25471 00e8 D8FFFFFF 		.quad	-40
 25471      FFFFFFFF 
 25472 00f0 00000000 		.quad	_ZTIN2gr5lfast12costas2_implE
 25472      00000000 
 25473 00f8 00000000 		.quad	_ZTv0_n24_N2gr5lfast12costas2_implD1Ev
 25473      00000000 
 25474 0100 00000000 		.quad	_ZTv0_n24_N2gr5lfast12costas2_implD0Ev
 25474      00000000 
 25475 0108 00000000 		.quad	_ZN2gr12msg_accepter4postEN5boost13intrusive_ptrIN3pmt8pmt_baseEEES5_
 25475      00000000 
 25476 0110 00000000 		.quad	_ZN2gr11basic_block15has_msg_handlerEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE
 25476      00000000 
 25477 0118 00000000 		.quad	_ZN2gr11basic_block12dispatch_msgEN5boost13intrusive_ptrIN3pmt8pmt_baseEEES5_
 25477      00000000 
 25478 0120 00000000 		.quad	_ZN2gr11basic_block20message_port_is_hierEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE
 25478      00000000 
 25479 0128 00000000 		.quad	_ZN2gr11basic_block23message_port_is_hier_inEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE
 25479      00000000 
 25480 0130 00000000 		.quad	_ZN2gr11basic_block24message_port_is_hier_outEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE
 25480      00000000 
 25481 0138 00000000 		.quad	_ZN2gr11basic_block12has_msg_portEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE
 25481      00000000 
 25482 0140 00000000 		.quad	_ZTv0_n88_N2gr5lfast12costas2_impl9setup_rpcEv
 25482      00000000 
 25483 0148 00000000 		.quad	_ZN2gr11basic_block14check_topologyEii
 25483      00000000 
 25484 0150 00000000 		.quad	_ZN2gr5block22set_processor_affinityERKSt6vectorIiSaIiEE
 25484      00000000 
 25485 0158 00000000 		.quad	_ZN2gr5block24unset_processor_affinityEv
 25485      00000000 
 25486 0160 00000000 		.quad	_ZN2gr5block18processor_affinityEv
 25486      00000000 
 25487 0168 00000000 		.quad	_ZN2gr10sync_block8forecastEiRSt6vectorIiSaIiEE
 25487      00000000 
 25488 0170 00000000 		.quad	_ZN2gr10sync_block12general_workEiRSt6vectorIiSaIiEERS1_IPKvSaIS6_EERS1_IPvSaISA_EE
 25488      00000000 
 25489 0178 00000000 		.quad	_ZN2gr5block5startEv
 25489      00000000 
 25490 0180 00000000 		.quad	_ZN2gr5block4stopEv
 25490      00000000 
 25491 0188 00000000 		.quad	_ZN2gr10sync_block28fixed_rate_ninput_to_noutputEi
 25491      00000000 
 25492 0190 00000000 		.quad	_ZN2gr10sync_block28fixed_rate_noutput_to_ninputEi
 25492      00000000 
 25493 0198 00000000 		.quad	_ZTv0_n176_N2gr5lfast12costas2_impl4workEiRSt6vectorIPKvSaIS4_EERS2_IPvSaIS8_EE
 25493      00000000 
 25494 01a0 00000000 		.quad	0
 25494      00000000 
 25495 01a8 88FDFFFF 		.quad	-632
 25495      FFFFFFFF 
 25496 01b0 88FDFFFF 		.quad	-632
 25496      FFFFFFFF 
 25497 01b8 00000000 		.quad	_ZTIN2gr5lfast12costas2_implE
 25497      00000000 
 25498 01c0 00000000 		.quad	_ZTv0_n24_N2gr5lfast12costas2_implD1Ev
GAS LISTING /tmp/ccvmoMuv.s 			page 986


 25498      00000000 
 25499 01c8 00000000 		.quad	_ZTv0_n24_N2gr5lfast12costas2_implD0Ev
 25499      00000000 
 25500 01d0 00000000 		.quad	_ZN2gr6blocks12control_loop18set_loop_bandwidthEf
 25500      00000000 
 25501              		.weak	_ZTTN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE
 25502              		.section	.data.rel.ro.local._ZTTN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE,"awG",@p
 25503              		.align 8
 25506              	_ZTTN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE:
 25507 0000 00000000 		.quad	_ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE+24
 25507      00000000 
 25508 0008 00000000 		.quad	_ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE+136
 25508      00000000 
 25509              		.weak	_ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE
 25510              		.section	.data.rel.ro._ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE,"awG",@progbit
 25511              		.align 8
 25514              	_ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE:
 25515 0000 30000000 		.quad	48
 25515      00000000 
 25516 0008 00000000 		.quad	0
 25516      00000000 
 25517 0010 00000000 		.quad	_ZTIN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE
 25517      00000000 
 25518 0018 00000000 		.quad	_ZN5boost16exception_detail10clone_implINS0_10bad_alloc_EED1Ev
 25518      00000000 
 25519 0020 00000000 		.quad	_ZN5boost16exception_detail10clone_implINS0_10bad_alloc_EED0Ev
 25519      00000000 
 25520 0028 00000000 		.quad	_ZNK5boost16exception_detail10clone_implINS0_10bad_alloc_EE5cloneEv
 25520      00000000 
 25521 0030 00000000 		.quad	_ZNK5boost16exception_detail10clone_implINS0_10bad_alloc_EE7rethrowEv
 25521      00000000 
 25522 0038 D8FFFFFF 		.quad	-40
 25522      FFFFFFFF 
 25523 0040 00000000 		.quad	_ZTIN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE
 25523      00000000 
 25524 0048 00000000 		.quad	_ZThn40_N5boost16exception_detail10clone_implINS0_10bad_alloc_EED1Ev
 25524      00000000 
 25525 0050 00000000 		.quad	_ZThn40_N5boost16exception_detail10clone_implINS0_10bad_alloc_EED0Ev
 25525      00000000 
 25526 0058 00000000 		.quad	_ZNKSt9bad_alloc4whatEv
 25526      00000000 
 25527 0060 D0FFFFFF 		.quad	-48
 25527      FFFFFFFF 
 25528 0068 D0FFFFFF 		.quad	-48
 25528      FFFFFFFF 
 25529 0070 D0FFFFFF 		.quad	-48
 25529      FFFFFFFF 
 25530 0078 D0FFFFFF 		.quad	-48
 25530      FFFFFFFF 
 25531 0080 00000000 		.quad	_ZTIN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE
 25531      00000000 
 25532 0088 00000000 		.quad	_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_10bad_alloc_EE5cloneEv
 25532      00000000 
 25533 0090 00000000 		.quad	_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_10bad_alloc_EE7rethrowEv
 25533      00000000 
 25534 0098 00000000 		.quad	_ZTv0_n40_N5boost16exception_detail10clone_implINS0_10bad_alloc_EED1Ev
 25534      00000000 
GAS LISTING /tmp/ccvmoMuv.s 			page 987


 25535 00a0 00000000 		.quad	_ZTv0_n40_N5boost16exception_detail10clone_implINS0_10bad_alloc_EED0Ev
 25535      00000000 
 25536              		.weak	_ZTTN5boost16exception_detail10clone_implINS0_14bad_exception_EEE
 25537              		.section	.data.rel.ro.local._ZTTN5boost16exception_detail10clone_implINS0_14bad_exception_EEE,"awG
 25538              		.align 8
 25541              	_ZTTN5boost16exception_detail10clone_implINS0_14bad_exception_EEE:
 25542 0000 00000000 		.quad	_ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE+24
 25542      00000000 
 25543 0008 00000000 		.quad	_ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE+136
 25543      00000000 
 25544              		.weak	_ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE
 25545              		.section	.data.rel.ro._ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE,"awG",@pro
 25546              		.align 8
 25549              	_ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE:
 25550 0000 30000000 		.quad	48
 25550      00000000 
 25551 0008 00000000 		.quad	0
 25551      00000000 
 25552 0010 00000000 		.quad	_ZTIN5boost16exception_detail10clone_implINS0_14bad_exception_EEE
 25552      00000000 
 25553 0018 00000000 		.quad	_ZN5boost16exception_detail10clone_implINS0_14bad_exception_EED1Ev
 25553      00000000 
 25554 0020 00000000 		.quad	_ZN5boost16exception_detail10clone_implINS0_14bad_exception_EED0Ev
 25554      00000000 
 25555 0028 00000000 		.quad	_ZNK5boost16exception_detail10clone_implINS0_14bad_exception_EE5cloneEv
 25555      00000000 
 25556 0030 00000000 		.quad	_ZNK5boost16exception_detail10clone_implINS0_14bad_exception_EE7rethrowEv
 25556      00000000 
 25557 0038 D8FFFFFF 		.quad	-40
 25557      FFFFFFFF 
 25558 0040 00000000 		.quad	_ZTIN5boost16exception_detail10clone_implINS0_14bad_exception_EEE
 25558      00000000 
 25559 0048 00000000 		.quad	_ZThn40_N5boost16exception_detail10clone_implINS0_14bad_exception_EED1Ev
 25559      00000000 
 25560 0050 00000000 		.quad	_ZThn40_N5boost16exception_detail10clone_implINS0_14bad_exception_EED0Ev
 25560      00000000 
 25561 0058 00000000 		.quad	_ZNKSt13bad_exception4whatEv
 25561      00000000 
 25562 0060 D0FFFFFF 		.quad	-48
 25562      FFFFFFFF 
 25563 0068 D0FFFFFF 		.quad	-48
 25563      FFFFFFFF 
 25564 0070 D0FFFFFF 		.quad	-48
 25564      FFFFFFFF 
 25565 0078 D0FFFFFF 		.quad	-48
 25565      FFFFFFFF 
 25566 0080 00000000 		.quad	_ZTIN5boost16exception_detail10clone_implINS0_14bad_exception_EEE
 25566      00000000 
 25567 0088 00000000 		.quad	_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_14bad_exception_EE5cloneEv
 25567      00000000 
 25568 0090 00000000 		.quad	_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_14bad_exception_EE7rethrowEv
 25568      00000000 
 25569 0098 00000000 		.quad	_ZTv0_n40_N5boost16exception_detail10clone_implINS0_14bad_exception_EED1Ev
 25569      00000000 
 25570 00a0 00000000 		.quad	_ZTv0_n40_N5boost16exception_detail10clone_implINS0_14bad_exception_EED0Ev
 25570      00000000 
 25571              		.weak	_ZTVN5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE
GAS LISTING /tmp/ccvmoMuv.s 			page 988


 25572              		.section	.data.rel.ro._ZTVN5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE
 25573              		.align 8
 25576              	_ZTVN5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE:
 25577 0000 00000000 		.quad	0
 25577      00000000 
 25578 0008 00000000 		.quad	_ZTIN5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE
 25578      00000000 
 25579 0010 00000000 		.quad	_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev
 25579      00000000 
 25580 0018 00000000 		.quad	_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev
 25580      00000000 
 25581 0020 00000000 		.quad	_ZNKSt13runtime_error4whatEv
 25581      00000000 
 25582 0028 F0FFFFFF 		.quad	-16
 25582      FFFFFFFF 
 25583 0030 00000000 		.quad	_ZTIN5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE
 25583      00000000 
 25584 0038 00000000 		.quad	_ZThn16_N5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev
 25584      00000000 
 25585 0040 00000000 		.quad	_ZThn16_N5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev
 25585      00000000 
 25586              		.weak	_ZTTN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEE
 25587              		.section	.data.rel.ro.local._ZTTN5boost16exception_detail10clone_implINS0_19error_info_injectorINS
 25588              		.align 8
 25591              	_ZTTN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEEE:
 25592 0000 00000000 		.quad	_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEE
 25592      00000000 
 25593 0008 00000000 		.quad	_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEE
 25593      00000000 
 25594              		.weak	_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEE
 25595              		.section	.data.rel.ro._ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad
 25596              		.align 8
 25599              	_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEEE:
 25600 0000 38000000 		.quad	56
 25600      00000000 
 25601 0008 00000000 		.quad	0
 25601      00000000 
 25602 0010 00000000 		.quad	_ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEE
 25602      00000000 
 25603 0018 00000000 		.quad	_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE
 25603      00000000 
 25604 0020 00000000 		.quad	_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE
 25604      00000000 
 25605 0028 00000000 		.quad	_ZNKSt13runtime_error4whatEv
 25605      00000000 
 25606 0030 00000000 		.quad	_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEE
 25606      00000000 
 25607 0038 00000000 		.quad	_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEE
 25607      00000000 
 25608 0040 F0FFFFFF 		.quad	-16
 25608      FFFFFFFF 
 25609 0048 00000000 		.quad	_ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEE
 25609      00000000 
 25610 0050 00000000 		.quad	_ZThn16_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_ca
 25610      00000000 
 25611 0058 00000000 		.quad	_ZThn16_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_ca
 25611      00000000 
GAS LISTING /tmp/ccvmoMuv.s 			page 989


 25612 0060 C8FFFFFF 		.quad	-56
 25612      FFFFFFFF 
 25613 0068 C8FFFFFF 		.quad	-56
 25613      FFFFFFFF 
 25614 0070 C8FFFFFF 		.quad	-56
 25614      FFFFFFFF 
 25615 0078 C8FFFFFF 		.quad	-56
 25615      FFFFFFFF 
 25616 0080 00000000 		.quad	_ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEE
 25616      00000000 
 25617 0088 00000000 		.quad	_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function
 25617      00000000 
 25618 0090 00000000 		.quad	_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function
 25618      00000000 
 25619 0098 00000000 		.quad	_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_
 25619      00000000 
 25620 00a0 00000000 		.quad	_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_
 25620      00000000 
 25621              		.weak	_ZTVN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEE
 25622              		.section	.data.rel.ro.local._ZTVN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_imp
 25623              		.align 8
 25626              	_ZTVN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEEE:
 25627 0000 00000000 		.quad	0
 25627      00000000 
 25628 0008 00000000 		.quad	_ZTIN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEE
 25628      00000000 
 25629 0010 00000000 		.quad	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEED1
 25629      00000000 
 25630 0018 00000000 		.quad	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEED0
 25630      00000000 
 25631 0020 00000000 		.quad	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEE7d
 25631      00000000 
 25632 0028 00000000 		.quad	_ZN5boost6detail15sp_counted_base7destroyEv
 25632      00000000 
 25633 0030 00000000 		.quad	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEE11
 25633      00000000 
 25634 0038 00000000 		.quad	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEE19
 25634      00000000 
 25635              		.weak	_ZTVN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_
 25636              		.section	.data.rel.ro.local._ZTVN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_imp
 25637              		.align 8
 25640              	_ZTVN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEEE:
 25641 0000 00000000 		.quad	0
 25641      00000000 
 25642 0008 00000000 		.quad	_ZTIN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_
 25642      00000000 
 25643 0010 00000000 		.quad	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EE
 25643      00000000 
 25644 0018 00000000 		.quad	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EE
 25644      00000000 
 25645 0020 00000000 		.quad	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EE
 25645      00000000 
 25646 0028 00000000 		.quad	_ZN5boost6detail15sp_counted_base7destroyEv
 25646      00000000 
 25647 0030 00000000 		.quad	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EE
 25647      00000000 
 25648 0038 00000000 		.quad	_ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EE
GAS LISTING /tmp/ccvmoMuv.s 			page 990


 25648      00000000 
 25649              		.weak	_ZGVZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_13exce
 25650              		.section	.bss._ZGVZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEEN
 25651              		.align 8
 25654              	_ZGVZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_13exception_p
 25655 0000 00000000 		.zero	8
 25655      00000000 
 25656              		.weak	_ZZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_13except
 25657              		.section	.bss._ZZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_
 25658              		.align 16
 25661              	_ZZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_13exception_ptr
 25662 0000 00000000 		.zero	16
 25662      00000000 
 25662      00000000 
 25662      00000000 
 25663              		.weak	_ZGVZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13exceptio
 25664              		.section	.bss._ZGVZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13
 25665              		.align 8
 25668              	_ZGVZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13exception_ptrEv
 25669 0000 00000000 		.zero	8
 25669      00000000 
 25670              		.weak	_ZZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13exception_
 25671              		.section	.bss._ZZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13ex
 25672              		.align 16
 25675              	_ZZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13exception_ptrEvE2
 25676 0000 00000000 		.zero	16
 25676      00000000 
 25676      00000000 
 25676      00000000 
 25677              		.local	_ZStL8__ioinit
 25678              		.comm	_ZStL8__ioinit,1,1
 25679              		.section	.rodata
 25682              	_ZStL19piecewise_construct:
 25683 03b5 00       		.zero	1
 25684              		.section	.rodata.cst16,"aM",@progbits,16
 25685              		.align 16
 25686              	.LC2:
 25687 0000 00000080 		.long	2147483648
 25688 0004 00000000 		.long	0
 25689 0008 00000000 		.long	0
 25690 000c 00000000 		.long	0
 25691              		.section	.rodata.cst4,"aM",@progbits,4
 25692              		.align 4
 25693              	.LC3:
 25694 0000 0000803F 		.long	1065353216
 25695              		.section	.rodata.cst16
 25696              		.align 16
 25697              	.LC4:
 25698 0010 FFFFFF7F 		.long	2147483647
 25699 0014 00000000 		.long	0
 25700 0018 00000000 		.long	0
 25701 001c 00000000 		.long	0
 25702              		.section	.rodata.cst4
 25703              		.align 4
 25704              	.LC5:
 25705 0004 0000003F 		.long	1056964608
 25706              		.section	.rodata.cst8,"aM",@progbits,8
GAS LISTING /tmp/ccvmoMuv.s 			page 991


 25707              		.align 8
 25708              	.LC6:
 25709 0000 182D4454 		.long	1413754136
 25710 0004 FB211940 		.long	1075388923
 25711              		.align 8
 25712              	.LC7:
 25713 0008 182D4454 		.long	1413754136
 25714 000c FB2119C0 		.long	-1072094725
 25715              		.section	.rodata.cst4
 25716              		.align 4
 25717              	.LC15:
 25718 0008 000080BF 		.long	3212836864
 25719              		.align 4
 25720              	.LC16:
 25721 000c 00002041 		.long	1092616192
 25722              		.text
 25723              	.Letext0:
 25724              		.file 52 "/usr/include/c++/6/bits/stringfwd.h"
 25725              		.file 53 "/usr/include/c++/6/bits/stl_list.h"
 25726              		.file 54 "/usr/include/c++/6/bits/list.tcc"
 25727              		.file 55 "/usr/include/c++/6/cstddef"
 25728              		.file 56 "/usr/include/c++/6/cstdlib"
 25729              		.file 57 "/usr/include/c++/6/type_traits"
 25730              		.file 58 "/usr/include/c++/6/bits/cpp_type_traits.h"
 25731              		.file 59 "/usr/include/c++/6/bits/stl_iterator_base_types.h"
 25732              		.file 60 "/usr/include/c++/6/debug/debug.h"
 25733              		.file 61 "/usr/include/x86_64-linux-gnu/c++/6/bits/c++config.h"
 25734              		.file 62 "/usr/include/c++/6/bits/exception_ptr.h"
 25735              		.file 63 "/usr/include/c++/6/new"
 25736              		.file 64 "/usr/include/c++/6/bits/allocator.h"
 25737              		.file 65 "/usr/include/c++/6/bits/stl_uninitialized.h"
 25738              		.file 66 "/usr/include/c++/6/cwchar"
 25739              		.file 67 "/usr/include/c++/6/bits/uses_allocator.h"
 25740              		.file 68 "/usr/include/c++/6/utility"
 25741              		.file 69 "/usr/include/c++/6/cstdint"
 25742              		.file 70 "/usr/include/c++/6/clocale"
 25743              		.file 71 "/usr/include/c++/6/cstdio"
 25744              		.file 72 "/usr/include/c++/6/bits/alloc_traits.h"
 25745              		.file 73 "/usr/include/c++/6/initializer_list"
 25746              		.file 74 "/usr/include/c++/6/functional"
 25747              		.file 75 "/usr/include/c++/6/bits/shared_ptr_base.h"
 25748              		.file 76 "/usr/include/c++/6/bits/algorithmfwd.h"
 25749              		.file 77 "/usr/include/c++/6/bits/stl_algo.h"
 25750              		.file 78 "/usr/include/c++/6/bits/locale_classes.h"
 25751              		.file 79 "/usr/include/c++/6/system_error"
 25752              		.file 80 "/usr/include/c++/6/bits/atomic_base.h"
 25753              		.file 81 "/usr/include/c++/6/bits/ios_base.h"
 25754              		.file 82 "/usr/include/c++/6/cwctype"
 25755              		.file 83 "/usr/include/c++/6/bits/locale_facets.h"
 25756              		.file 84 "/usr/include/c++/6/cstring"
 25757              		.file 85 "/usr/include/c++/6/ctime"
 25758              		.file 86 "/usr/include/c++/6/exception"
 25759              		.file 87 "/usr/include/c++/6/iosfwd"
 25760              		.file 88 "/usr/include/c++/6/bits/uniform_int_dist.h"
 25761              		.file 89 "/usr/include/c++/6/bits/postypes.h"
 25762              		.file 90 "/usr/include/c++/6/bits/stl_deque.h"
 25763              		.file 91 "/usr/include/c++/6/bits/deque.tcc"
GAS LISTING /tmp/ccvmoMuv.s 			page 992


 25764              		.file 92 "/usr/include/c++/6/bits/ptr_traits.h"
 25765              		.file 93 "/usr/include/c++/6/bits/stl_stack.h"
 25766              		.file 94 "/usr/include/c++/6/bits/shared_ptr.h"
 25767              		.file 95 "/usr/include/c++/6/iomanip"
 25768              		.file 96 "/usr/include/c++/6/memory"
 25769              		.file 97 "/usr/include/c++/6/cstdarg"
 25770              		.file 98 "/usr/include/c++/6/stdexcept"
 25771              		.file 99 "/usr/include/c++/6/bits/basic_ios.tcc"
 25772              		.file 100 "/usr/include/c++/6/bits/functexcept.h"
 25773              		.file 101 "/usr/include/c++/6/bits/ostream_insert.h"
 25774              		.file 102 "/usr/include/c++/6/bits/predefined_ops.h"
 25775              		.file 103 "/usr/include/c++/6/ext/numeric_traits.h"
 25776              		.file 104 "/usr/include/c++/6/ext/concurrence.h"
 25777              		.file 105 "/usr/include/c++/6/ext/alloc_traits.h"
 25778              		.file 106 "/usr/include/c++/6/ext/type_traits.h"
 25779              		.file 107 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h"
 25780              		.file 108 "/usr/include/x86_64-linux-gnu/bits/types.h"
 25781              		.file 109 "/usr/include/unistd.h"
 25782              		.file 110 "/usr/include/getopt.h"
 25783              		.file 111 "/usr/include/stdlib.h"
 25784              		.file 112 "/usr/include/time.h"
 25785              		.file 113 "/usr/include/x86_64-linux-gnu/sys/types.h"
 25786              		.file 114 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
 25787              		.file 115 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h"
 25788              		.file 116 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h"
 25789              		.file 117 "/usr/include/stdio.h"
 25790              		.file 118 "/usr/include/libio.h"
 25791              		.file 119 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stdarg.h"
 25792              		.file 120 "<built-in>"
 25793              		.file 121 "/usr/include/wchar.h"
 25794              		.file 122 "/usr/include/x86_64-linux-gnu/c++/6/bits/gthr-default.h"
 25795              		.file 123 "/usr/include/x86_64-linux-gnu/c++/6/bits/atomic_word.h"
 25796              		.file 124 "/usr/include/stdint.h"
 25797              		.file 125 "/usr/include/locale.h"
 25798              		.file 126 "/usr/include/_G_config.h"
 25799              		.file 127 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 25800              		.file 128 "/usr/include/x86_64-linux-gnu/bits/stdio.h"
 25801              		.file 129 "/usr/include/errno.h"
 25802              		.file 130 "/usr/include/boost/config/suffix.hpp"
 25803              		.file 131 "/usr/include/boost/exception/detail/type_info.hpp"
 25804              		.file 132 "/usr/include/boost/exception/detail/error_info_impl.hpp"
 25805              		.file 133 "/usr/include/boost/exception/detail/clone_current_exception.hpp"
 25806              		.file 134 "/usr/include/boost/exception/to_string_stub.hpp"
 25807              		.file 135 "/usr/include/boost/exception/detail/object_hex_dump.hpp"
 25808              		.file 136 "/usr/include/boost/core/typeinfo.hpp"
 25809              		.file 137 "/usr/include/boost/current_function.hpp"
 25810              		.file 138 "/usr/include/boost/detail/sp_typeinfo.hpp"
 25811              		.file 139 "/usr/include/boost/smart_ptr/detail/sp_convertible.hpp"
 25812              		.file 140 "/usr/include/boost/smart_ptr/detail/spinlock_sync.hpp"
 25813              		.file 141 "/usr/include/boost/smart_ptr/detail/sp_nullptr_t.hpp"
 25814              		.file 142 "/usr/include/boost/smart_ptr/detail/spinlock_pool.hpp"
 25815              		.file 143 "/usr/include/boost/integer_traits.hpp"
 25816              		.file 144 "/usr/include/boost/thread/pthread/thread_data.hpp"
 25817              		.file 145 "/usr/include/boost/thread/future.hpp"
 25818              		.file 146 "/usr/include/boost/integer/static_log2.hpp"
 25819              		.file 147 "/usr/include/boost/type_traits/detail/has_binary_operator.hpp"
 25820              		.file 148 "/usr/include/boost/detail/indirect_traits.hpp"
GAS LISTING /tmp/ccvmoMuv.s 			page 993


 25821              		.file 149 "/usr/include/boost/thread/detail/nullary_function.hpp"
 25822              		.file 150 "/usr/include/boost/thread/detail/thread.hpp"
 25823              		.file 151 "/usr/include/boost/smart_ptr/detail/operator_bool.hpp"
 25824              		.file 152 "/usr/include/boost/type_traits/integral_constant.hpp"
 25825              		.file 153 "/usr/include/boost/mpl/aux_/adl_barrier.hpp"
 25826              		.file 154 "/usr/include/boost/mpl/aux_/value_wknd.hpp"
 25827              		.file 155 "/usr/include/boost/mpl/void_fwd.hpp"
 25828              		.file 156 "/usr/include/boost/mpl/bool_fwd.hpp"
 25829              		.file 157 "/usr/include/boost/mpl/integral_c_tag.hpp"
 25830              		.file 158 "/usr/include/boost/mpl/aux_/na_fwd.hpp"
 25831              		.file 159 "/usr/include/boost/mpl/aux_/preprocessed/gcc/placeholders.hpp"
 25832              		.file 160 "/usr/include/boost/type_index/type_index_facade.hpp"
 25833              		.file 161 "/usr/include/boost/type_index/stl_type_index.hpp"
 25834              		.file 162 "/usr/include/boost/type_index.hpp"
 25835              		.file 163 "/usr/include/boost/cstdint.hpp"
 25836              		.file 164 "/usr/include/boost/core/noncopyable.hpp"
 25837              		.file 165 "/usr/include/boost/thread/futures/future_error_code.hpp"
 25838              		.file 166 "/usr/include/boost/type_traits/detail/is_function_ptr_helper.hpp"
 25839              		.file 167 "/usr/include/boost/type_traits/detail/yes_no_type.hpp"
 25840              		.file 168 "/usr/include/boost/type_traits/integral_promotion.hpp"
 25841              		.file 169 "/usr/include/boost/move/core.hpp"
 25842              		.file 170 "/usr/include/boost/move/detail/meta_utils.hpp"
 25843              		.file 171 "/usr/include/boost/thread/lock_options.hpp"
 25844              		.file 172 "/usr/include/boost/date_time/c_time.hpp"
 25845              		.file 173 "/usr/include/boost/date_time/time_defs.hpp"
 25846              		.file 174 "/usr/include/boost/date_time/special_defs.hpp"
 25847              		.file 175 "/usr/include/boost/date_time/time_resolution_traits.hpp"
 25848              		.file 176 "/usr/include/boost/date_time/int_adapter.hpp"
 25849              		.file 177 "/usr/include/boost/date_time/date_defs.hpp"
 25850              		.file 178 "/usr/include/boost/date_time/year_month_day.hpp"
 25851              		.file 179 "/usr/include/boost/date_time/gregorian_calendar.hpp"
 25852              		.file 180 "/usr/include/boost/date_time/gregorian_calendar.ipp"
 25853              		.file 181 "/usr/include/boost/date_time/date_duration.hpp"
 25854              		.file 182 "/usr/include/boost/date_time/date.hpp"
 25855              		.file 183 "/usr/include/boost/date_time/time_duration.hpp"
 25856              		.file 184 "/usr/include/boost/date_time/time_system_counted.hpp"
 25857              		.file 185 "/usr/include/boost/date_time/time.hpp"
 25858              		.file 186 "/usr/include/boost/operators.hpp"
 25859              		.file 187 "/usr/include/boost/date_time/constrained_value.hpp"
 25860              		.file 188 "/usr/include/boost/date_time/gregorian/greg_weekday.hpp"
 25861              		.file 189 "/usr/include/boost/date_time/gregorian/greg_day.hpp"
 25862              		.file 190 "/usr/include/boost/date_time/gregorian/greg_year.hpp"
 25863              		.file 191 "/usr/include/boost/date_time/gregorian/greg_month.hpp"
 25864              		.file 192 "/usr/include/boost/date_time/gregorian/greg_calendar.hpp"
 25865              		.file 193 "/usr/include/boost/date_time/gregorian/greg_day_of_year.hpp"
 25866              		.file 194 "/usr/include/boost/date_time/gregorian/greg_duration.hpp"
 25867              		.file 195 "/usr/include/boost/date_time/gregorian/greg_date.hpp"
 25868              		.file 196 "/usr/include/boost/date_time/posix_time/posix_time_config.hpp"
 25869              		.file 197 "/usr/include/boost/date_time/posix_time/ptime.hpp"
 25870              		.file 198 "/usr/include/boost/ratio/detail/overflow_helpers.hpp"
 25871              		.file 199 "/usr/include/boost/type_traits/add_rvalue_reference.hpp"
 25872              		.file 200 "/usr/include/boost/chrono/detail/is_evenly_divisible_by.hpp"
 25873              		.file 201 "/usr/include/boost/chrono/duration.hpp"
 25874              		.file 202 "/usr/include/boost/chrono/system_clocks.hpp"
 25875              		.file 203 "/usr/include/boost/chrono/time_point.hpp"
 25876              		.file 204 "/usr/include/boost/thread/xtime.hpp"
 25877              		.file 205 "/usr/include/boost/thread/thread_time.hpp"
GAS LISTING /tmp/ccvmoMuv.s 			page 994


 25878              		.file 206 "/usr/include/boost/ratio/ratio.hpp"
 25879              		.file 207 "/usr/include/boost/thread/pthread/pthread_mutex_scoped_lock.hpp"
 25880              		.file 208 "/usr/include/boost/thread/pthread/mutex.hpp"
 25881              		.file 209 "/usr/include/boost/thread/lock_types.hpp"
 25882              		.file 210 "/usr/include/boost/thread/pthread/condition_variable_fwd.hpp"
 25883              		.file 211 "/usr/include/boost/thread/lock_guard.hpp"
 25884              		.file 212 "/usr/include/boost/thread/detail/move.hpp"
 25885              		.file 213 "/usr/include/boost/bind/storage.hpp"
 25886              		.file 214 "/usr/include/boost/bind/arg.hpp"
 25887              		.file 215 "/usr/include/boost/bind/placeholders.hpp"
 25888              		.file 216 "/usr/include/boost/io_fwd.hpp"
 25889              		.file 217 "/usr/include/boost/io/detail/quoted_manip.hpp"
 25890              		.file 218 "/usr/include/boost/format/exceptions.hpp"
 25891              		.file 219 "/usr/include/boost/integer_fwd.hpp"
 25892              		.file 220 "/usr/include/boost/functional/hash/detail/float_functions.hpp"
 25893              		.file 221 "/usr/include/boost/thread/pthread/condition_variable.hpp"
 25894              		.file 222 "/usr/include/boost/move/detail/unique_ptr_meta_utils.hpp"
 25895              		.file 223 "/usr/include/boost/move/default_delete.hpp"
 25896              		.file 224 "/usr/include/boost/range/detail/sfinae.hpp"
 25897              		.file 225 "/usr/include/boost/range/end.hpp"
 25898              		.file 226 "/usr/include/boost/range/begin.hpp"
 25899              		.file 227 "/usr/include/boost/iterator/iterator_traits.hpp"
 25900              		.file 228 "/usr/include/boost/iterator/iterator_categories.hpp"
 25901              		.file 229 "/usr/include/boost/iterator/iterator_facade.hpp"
 25902              		.file 230 "/usr/include/boost/iterator/iterator_adaptor.hpp"
 25903              		.file 231 "/usr/include/boost/foreach.hpp"
 25904              		.file 232 "/usr/include/boost/foreach_fwd.hpp"
 25905              		.file 233 "/usr/include/boost/filesystem/path_traits.hpp"
 25906              		.file 234 "/usr/include/boost/filesystem/path.hpp"
 25907              		.file 235 "/usr/include/boost/filesystem/operations.hpp"
 25908              		.file 236 "/usr/include/boost/memory_order.hpp"
 25909              		.file 237 "/usr/include/boost/atomic/detail/storage_type.hpp"
 25910              		.file 238 "/usr/include/boost/atomic/detail/ops_gcc_atomic.hpp"
 25911              		.file 239 "/usr/include/boost/atomic/fences.hpp"
 25912              		.file 240 "/usr/include/boost/atomic/detail/atomic_flag.hpp"
 25913              		.file 241 "/usr/include/boost/atomic/detail/atomic_template.hpp"
 25914              		.file 242 "/usr/include/boost/atomic/atomic_flag.hpp"
 25915              		.file 243 "/usr/include/boost/atomic/atomic.hpp"
 25916              		.file 244 "/usr/include/boost/thread/lockable_traits.hpp"
 25917              		.file 245 "/usr/include/boost/thread/csbl/memory/unique_ptr.hpp"
 25918              		.file 246 "/usr/include/boost/thread/csbl/memory/allocator_arg.hpp"
 25919              		.file 247 "/usr/include/boost/tuple/detail/tuple_basic.hpp"
 25920              		.file 248 "/usr/include/boost/exception/detail/is_output_streamable.hpp"
 25921              		.file 249 "/usr/include/boost/exception/to_string.hpp"
 25922              		.file 250 "/usr/include/boost/core/enable_if.hpp"
 25923              		.file 251 "/usr/include/boost/thread/exceptional_ptr.hpp"
 25924              		.file 252 "/usr/include/boost/thread/cv_status.hpp"
 25925              		.file 253 "/usr/include/boost/thread/futures/future_status.hpp"
 25926              		.file 254 "/usr/include/boost/thread/futures/launch.hpp"
 25927              		.file 255 "/usr/include/boost/thread/executors/work.hpp"
 25928              		.file 256 "/usr/include/boost/thread/executors/executor.hpp"
 25929              		.file 257 "/usr/include/boost/thread/executors/generic_executor_ref.hpp"
 25930              		.file 258 "/usr/include/boost/type_traits/type_with_alignment.hpp"
 25931              		.file 259 "/usr/include/boost/none_t.hpp"
 25932              		.file 260 "/usr/include/boost/none.hpp"
 25933              		.file 261 "/usr/include/boost/optional/detail/optional_aligned_storage.hpp"
 25934              		.file 262 "/usr/include/boost/align/detail/align_cxx11.hpp"
GAS LISTING /tmp/ccvmoMuv.s 			page 995


 25935              		.file 263 "/usr/include/boost/smart_ptr/weak_ptr.hpp"
 25936              		.file 264 "/usr/include/boost/smart_ptr/enable_shared_from_this.hpp"
 25937              		.file 265 "/usr/include/boost/thread/futures/future_error.hpp"
 25938              		.file 266 "/usr/include/boost/thread/exceptions.hpp"
 25939              		.file 267 "/usr/include/boost/smart_ptr/bad_weak_ptr.hpp"
 25940              		.file 268 "/usr/include/boost/move/utility_core.hpp"
 25941              		.file 269 "/usr/include/boost/core/scoped_enum.hpp"
 25942              		.file 270 "/usr/include/x86_64-linux-gnu/bits/mathdef.h"
 25943              		.file 271 "/usr/include/math.h"
 25944              		.file 272 "/usr/include/wctype.h"
 25945              		.file 273 "/home/mpiscopo/gnuradio/include/gnuradio/gr_complex.h"
 25946              		.file 274 "/home/mpiscopo/gnuradio/include/gnuradio/types.h"
 25947              		.file 275 "/home/mpiscopo/gnuradio/include/gnuradio/runtime_types.h"
 25948              		.file 276 "/home/mpiscopo/gnuradio/include/gnuradio/io_signature.h"
 25949              		.file 277 "/home/mpiscopo/gnuradio/include/gnuradio/blocks/control_loop.h"
 25950              		.file 278 "/home/mpiscopo/gnuradio/include/gnuradio/sincos.h"
 25951              		.file 279 "/usr/include/string.h"
 25952              		.file 280 "/usr/include/boost/mpl/bool.hpp"
 25953              		.file 281 "/usr/include/boost/mpl/void.hpp"
 25954              		.file 282 "/usr/include/boost/mpl/aux_/integral_wrapper.hpp"
 25955              		.file 283 "/usr/include/boost/mpl/aux_/preprocessed/gcc/arg.hpp"
 25956              		.file 284 "/usr/include/x86_64-linux-gnu/sys/time.h"
 25957              		.file 285 "/usr/include/boost/bind.hpp"
 25958              		.file 286 "/usr/include/c++/6/stdlib.h"
 25959              		.file 287 "/usr/include/log4cpp/Priority.hh"
 25960              		.file 288 "/usr/include/log4cpp/threading/PThreads.hh"
 25961              		.file 289 "clSComplex.h"
 25962              		.file 290 "/usr/include/c++/6/cxxabi.h"
 25963              		.file 291 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h"
 25964              		.file 292 "/usr/include/assert.h"
 232544              		.align 8
 232547              	DW.ref.__gxx_personality_v0:
 232548 0000 00000000 		.quad	__gxx_personality_v0
 232548      00000000 
 232549              		.hidden	__dso_handle
 232550              		.ident	"GCC: (Debian 6.3.0-12) 6.3.0 20170406"
 232551              		.section	.note.GNU-stack,"",@progbits
GAS LISTING /tmp/ccvmoMuv.s 			page 996


DEFINED SYMBOLS
                            *ABS*:0000000000000000 costas2_impl.cc
     /tmp/ccvmoMuv.s:9      .text._ZN5boost6detail15sp_counted_base7destroyEv:0000000000000000 _ZN5boost6detail15sp_counted_base7destroyEv
     /tmp/ccvmoMuv.s:27     .text._ZN2gr11basic_block20message_port_is_hierEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE:0000000000000000 _ZN2gr11basic_block20message_port_is_hierEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE
     /tmp/ccvmoMuv.s:44     .text._ZN2gr11basic_block23message_port_is_hier_inEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE:0000000000000000 _ZN2gr11basic_block23message_port_is_hier_inEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE
     /tmp/ccvmoMuv.s:60     .text._ZN2gr11basic_block24message_port_is_hier_outEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE:0000000000000000 _ZN2gr11basic_block24message_port_is_hier_outEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE
     /tmp/ccvmoMuv.s:76     .text._ZN2gr11basic_block9setup_rpcEv:0000000000000000 _ZN2gr11basic_block9setup_rpcEv
     /tmp/ccvmoMuv.s:90     .text._ZN2gr11basic_block14check_topologyEii:0000000000000000 _ZN2gr11basic_block14check_topologyEii
     /tmp/ccvmoMuv.s:106    .text._ZNK5boost16exception_detail25error_info_container_impl7add_refEv:0000000000000000 _ZNK5boost16exception_detail25error_info_container_impl7add_refEv
     /tmp/ccvmoMuv.s:123    .text._ZNK2gr5lfast12costas2_impl16phase_detector_2ESt7complexIfE:0000000000000000 _ZNK2gr5lfast12costas2_impl16phase_detector_2ESt7complexIfE
     /tmp/ccvmoMuv.s:145    .text:0000000000000000 _ZNK2gr5lfast12costas2_impl5errorEv
     /tmp/ccvmoMuv.s:162    .text:0000000000000010 _ZN2gr5lfast12costas2_impl9setup_rpcEv
     /tmp/ccvmoMuv.s:175    .text:0000000000000020 _ZTv0_n88_N2gr5lfast12costas2_impl9setup_rpcEv
     /tmp/ccvmoMuv.s:191    .text._ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEED2Ev:0000000000000000 _ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEED2Ev
     /tmp/ccvmoMuv.s:191    .text._ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEED2Ev:0000000000000000 _ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEED1Ev
     /tmp/ccvmoMuv.s:208    .text._ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEED2Ev:0000000000000000 _ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEED2Ev
     /tmp/ccvmoMuv.s:208    .text._ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEED2Ev:0000000000000000 _ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEED1Ev
     /tmp/ccvmoMuv.s:224    .text._ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEE11get_deleterERKSt9type_info:0000000000000000 _ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEE11get_deleterERKSt9type_info
     /tmp/ccvmoMuv.s:240    .text._ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEE19get_untyped_deleterEv:0000000000000000 _ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEE19get_untyped_deleterEv
     /tmp/ccvmoMuv.s:256    .text._ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEE11get_deleterERKSt9type_info:0000000000000000 _ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEE11get_deleterERKSt9type_info
     /tmp/ccvmoMuv.s:272    .text._ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEE19get_untyped_deleterEv:0000000000000000 _ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEE19get_untyped_deleterEv
     /tmp/ccvmoMuv.s:288    .text._ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEED0Ev:0000000000000000 _ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEED0Ev
     /tmp/ccvmoMuv.s:305    .text._ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEED0Ev:0000000000000000 _ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEED0Ev
     /tmp/ccvmoMuv.s:322    .text._ZNK5boost16exception_detail10clone_implINS0_14bad_exception_EE7rethrowEv:0000000000000000 _ZNK5boost16exception_detail10clone_implINS0_14bad_exception_EE7rethrowEv
     /tmp/ccvmoMuv.s:232547  .data.DW.ref.__gxx_personality_v0:0000000000000000 DW.ref.__gxx_personality_v0
     /tmp/ccvmoMuv.s:25287  .data.rel.ro._ZTVN5boost16exception_detail10clone_baseE:0000000000000000 _ZTVN5boost16exception_detail10clone_baseE
     /tmp/ccvmoMuv.s:25277  .data.rel.ro._ZTVN5boost9exceptionE:0000000000000000 _ZTVN5boost9exceptionE
     /tmp/ccvmoMuv.s:8415   .text._ZN5boost16exception_detail10clone_implINS0_14bad_exception_EED1Ev:0000000000000000 _ZN5boost16exception_detail10clone_implINS0_14bad_exception_EED1Ev
     /tmp/ccvmoMuv.s:25189  .data.rel.ro._ZTIN5boost16exception_detail10clone_implINS0_14bad_exception_EEE:0000000000000000 _ZTIN5boost16exception_detail10clone_implINS0_14bad_exception_EEE
     /tmp/ccvmoMuv.s:25549  .data.rel.ro._ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE:0000000000000000 _ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE
     /tmp/ccvmoMuv.s:488    .text._ZNK5boost16exception_detail10clone_implINS0_14bad_exception_EE7rethrowEv:00000000000000a0 _ZTv0_n32_NK5boost16exception_detail10clone_implINS0_14bad_exception_EE7rethrowEv
     /tmp/ccvmoMuv.s:503    .text._ZNK5boost16exception_detail10clone_implINS0_10bad_alloc_EE7rethrowEv:0000000000000000 _ZNK5boost16exception_detail10clone_implINS0_10bad_alloc_EE7rethrowEv
     /tmp/ccvmoMuv.s:9113   .text._ZN5boost16exception_detail10clone_implINS0_10bad_alloc_EED1Ev:0000000000000000 _ZN5boost16exception_detail10clone_implINS0_10bad_alloc_EED1Ev
     /tmp/ccvmoMuv.s:25168  .data.rel.ro._ZTIN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE:0000000000000000 _ZTIN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE
     /tmp/ccvmoMuv.s:25514  .data.rel.ro._ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE:0000000000000000 _ZTVN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE
     /tmp/ccvmoMuv.s:667    .text._ZNK5boost16exception_detail10clone_implINS0_10bad_alloc_EE7rethrowEv:00000000000000a0 _ZTv0_n32_NK5boost16exception_detail10clone_implINS0_10bad_alloc_EE7rethrowEv
     /tmp/ccvmoMuv.s:687    .text._ZNK5boost6system12system_error4whatEv:0000000000000000 _ZNK5boost6system12system_error4whatEv
     /tmp/ccvmoMuv.s:995    .text._ZN5boost17bad_function_callD2Ev:0000000000000000 _ZN5boost17bad_function_callD2Ev
     /tmp/ccvmoMuv.s:25310  .data.rel.ro._ZTVN5boost17bad_function_callE:0000000000000000 _ZTVN5boost17bad_function_callE
     /tmp/ccvmoMuv.s:995    .text._ZN5boost17bad_function_callD2Ev:0000000000000000 _ZN5boost17bad_function_callD1Ev
     /tmp/ccvmoMuv.s:1018   .text._ZN5boost17bad_function_callD0Ev:0000000000000000 _ZN5boost17bad_function_callD0Ev
     /tmp/ccvmoMuv.s:1055   .text._ZN5boost6system12system_errorD2Ev:0000000000000000 _ZN5boost6system12system_errorD2Ev
     /tmp/ccvmoMuv.s:25299  .data.rel.ro.local._ZTVN5boost6system12system_errorE:0000000000000000 _ZTVN5boost6system12system_errorE
     /tmp/ccvmoMuv.s:1055   .text._ZN5boost6system12system_errorD2Ev:0000000000000000 _ZN5boost6system12system_errorD1Ev
     /tmp/ccvmoMuv.s:1123   .text:0000000000000030 _ZN2gr5lfast12costas2_implD1Ev
     /tmp/ccvmoMuv.s:25366  .data.rel.ro._ZTCN2gr5lfast12costas2_implE0_NS0_7costas2E:0000000000000000 _ZTCN2gr5lfast12costas2_implE0_NS0_7costas2E
     /tmp/ccvmoMuv.s:1190   .text:0000000000000080 _ZTv0_n24_N2gr5lfast12costas2_implD1Ev
     /tmp/ccvmoMuv.s:1204   .text:0000000000000090 _ZN2gr5lfast12costas2_implD0Ev
     /tmp/ccvmoMuv.s:1270   .text:00000000000000f0 _ZTv0_n24_N2gr5lfast12costas2_implD0Ev
     /tmp/ccvmoMuv.s:1284   .text:0000000000000100 _ZN2gr5lfast12costas2_impl4workEiRSt6vectorIPKvSaIS4_EERS2_IPvSaIS8_EE
     /tmp/ccvmoMuv.s:1284   .text:0000000000000100 _ZN2gr5lfast12costas2_impl9work_testEiRSt6vectorIPKvSaIS4_EERS2_IPvSaIS8_EE
     /tmp/ccvmoMuv.s:1540   .text:0000000000000350 _ZTv0_n176_N2gr5lfast12costas2_impl4workEiRSt6vectorIPKvSaIS4_EERS2_IPvSaIS8_EE
     /tmp/ccvmoMuv.s:1553   .text.unlikely:0000000000000000 _ZN5boost6detail15sp_counted_base7releaseEv.part.17
     /tmp/ccvmoMuv.s:1622   .text:0000000000000360 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.isra.152
     /tmp/ccvmoMuv.s:1622   .text:0000000000000360 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.144
     /tmp/ccvmoMuv.s:1798   .text:0000000000000410 _ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFvS4_EEEESt10_Select1stISA_ENS2_10comparatorESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS6_.isra.169
     /tmp/ccvmoMuv.s:1887   .text._ZN2gr11basic_block12has_msg_portEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE:0000000000000000 _ZN2gr11basic_block12has_msg_portEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE
GAS LISTING /tmp/ccvmoMuv.s 			page 997


     /tmp/ccvmoMuv.s:2077   .text._ZN2gr5block18processor_affinityEv:0000000000000000 _ZN2gr5block18processor_affinityEv
     /tmp/ccvmoMuv.s:2313   .text._ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE7rethrowEv:0000000000000000 _ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE7rethrowEv
     /tmp/ccvmoMuv.s:7675   .text._ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev:0000000000000000 _ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev
     /tmp/ccvmoMuv.s:25231  .data.rel.ro._ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEEE:0000000000000000 _ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEEE
     /tmp/ccvmoMuv.s:25599  .data.rel.ro._ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEEE:0000000000000000 _ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEEE
     /tmp/ccvmoMuv.s:2556   .text._ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE7rethrowEv:00000000000000e0 _ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE7rethrowEv
     /tmp/ccvmoMuv.s:2571   .text._ZN5boost6system12system_errorD0Ev:0000000000000000 _ZN5boost6system12system_errorD0Ev
     /tmp/ccvmoMuv.s:2643   .text._ZNK5boost10error_infoINS_27tag_original_exception_typeEPKSt9type_infoE17name_value_stringB5cxx11Ev:0000000000000000 _ZNK5boost10error_infoINS_27tag_original_exception_typeEPKSt9type_infoE17name_value_stringB5cxx11Ev
     /tmp/ccvmoMuv.s:2937   .text._ZNK5boost16exception_detail25error_info_container_impl3getERKNS0_10type_info_E:0000000000000000 _ZNK5boost16exception_detail25error_info_container_impl3getERKNS0_10type_info_E
     /tmp/ccvmoMuv.s:24934  .rodata:0000000000000240 _ZZNK5boost16exception_detail25error_info_container_impl3getERKNS0_10type_info_EE19__PRETTY_FUNCTION__
     /tmp/ccvmoMuv.s:24929  .rodata:0000000000000140 _ZZNK5boost10shared_ptrINS_16exception_detail15error_info_baseEEdeEvE19__PRETTY_FUNCTION__
     /tmp/ccvmoMuv.s:3292   .text._ZN5boost13exception_ptrD2Ev:0000000000000000 _ZN5boost13exception_ptrD2Ev
     /tmp/ccvmoMuv.s:3292   .text._ZN5boost13exception_ptrD2Ev:0000000000000000 _ZN5boost13exception_ptrD1Ev
     /tmp/ccvmoMuv.s:3538   .text._ZNK5boost16exception_detail25error_info_container_impl22diagnostic_informationEPKc:0000000000000000 _ZNK5boost16exception_detail25error_info_container_impl22diagnostic_informationEPKc
     /tmp/ccvmoMuv.s:5129   .text:0000000000000460 _ZN2gr5lfast12costas2_implC2Efi
     /tmp/ccvmoMuv.s:5180   .text:00000000000004d0 _ZN2gr5lfast12costas2_implC1Efi
     /tmp/ccvmoMuv.s:25441  .data.rel.ro._ZTVN2gr5lfast12costas2_implE:0000000000000000 _ZTVN2gr5lfast12costas2_implE
     /tmp/ccvmoMuv.s:5799   .text:0000000000000740 _ZN2gr5lfast12costas2_implD2Ev
     /tmp/ccvmoMuv.s:5838   .text:0000000000000780 _ZN2gr5lfast12costas2_impl16handle_set_noiseEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE
     /tmp/ccvmoMuv.s:6059   .text._ZN8gnuradio16get_initial_sptrIN2gr5lfast12costas2_implEEEN5boost10shared_ptrIT_EEPS6_:0000000000000000 _ZN8gnuradio16get_initial_sptrIN2gr5lfast12costas2_implEEEN5boost10shared_ptrIT_EEPS6_
     /tmp/ccvmoMuv.s:25152  .data.rel.ro._ZTIN2gr5lfast12costas2_implE:0000000000000000 _ZTIN2gr5lfast12costas2_implE
     /tmp/ccvmoMuv.s:6343   .text:0000000000000860 _ZN2gr5lfast7costas24makeEfi
     /tmp/ccvmoMuv.s:6461   .text._ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFvS4_EEEESt10_Select1stISA_ENS2_10comparatorESaISA_EE4findERS6_:0000000000000000 _ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFvS4_EEEESt10_Select1stISA_ENS2_10comparatorESaISA_EE4findERS6_
     /tmp/ccvmoMuv.s:6563   .text._ZN2gr11basic_block15has_msg_handlerEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE:0000000000000000 _ZN2gr11basic_block15has_msg_handlerEN5boost13intrusive_ptrIN3pmt8pmt_baseEEE
     /tmp/ccvmoMuv.s:6617   .text._ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error_info_baseEEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E:0000000000000000 _ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error_info_baseEEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E
     /tmp/ccvmoMuv.s:6887   .text._ZNK5boost16exception_detail25error_info_container_impl7releaseEv:0000000000000000 _ZNK5boost16exception_detail25error_info_container_impl7releaseEv
     /tmp/ccvmoMuv.s:25321  .data.rel.ro.local._ZTVN5boost16exception_detail25error_info_container_implE:0000000000000000 _ZTVN5boost16exception_detail25error_info_container_implE
     /tmp/ccvmoMuv.s:6995   .text._ZN5boost16exception_detail14bad_exception_D2Ev:0000000000000000 _ZN5boost16exception_detail14bad_exception_D2Ev
     /tmp/ccvmoMuv.s:25350  .data.rel.ro._ZTVN5boost16exception_detail14bad_exception_E:0000000000000000 _ZTVN5boost16exception_detail14bad_exception_E
     /tmp/ccvmoMuv.s:7205   .text._ZN5boost16exception_detail14bad_exception_D2Ev:00000000000000a0 _ZThn40_N5boost16exception_detail14bad_exception_D1Ev
     /tmp/ccvmoMuv.s:6995   .text._ZN5boost16exception_detail14bad_exception_D2Ev:0000000000000000 _ZN5boost16exception_detail14bad_exception_D1Ev
     /tmp/ccvmoMuv.s:7221   .text._ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED2Ev:0000000000000000 _ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED2Ev
     /tmp/ccvmoMuv.s:25576  .data.rel.ro._ZTVN5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE:0000000000000000 _ZTVN5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE
     /tmp/ccvmoMuv.s:7221   .text._ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED2Ev:0000000000000000 _ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev
     /tmp/ccvmoMuv.s:7435   .text._ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED2Ev:00000000000000b0 _ZThn16_N5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev
     /tmp/ccvmoMuv.s:7449   .text._ZN5boost16exception_detail10bad_alloc_D2Ev:0000000000000000 _ZN5boost16exception_detail10bad_alloc_D2Ev
     /tmp/ccvmoMuv.s:25335  .data.rel.ro._ZTVN5boost16exception_detail10bad_alloc_E:0000000000000000 _ZTVN5boost16exception_detail10bad_alloc_E
     /tmp/ccvmoMuv.s:7659   .text._ZN5boost16exception_detail10bad_alloc_D2Ev:00000000000000a0 _ZThn40_N5boost16exception_detail10bad_alloc_D1Ev
     /tmp/ccvmoMuv.s:7449   .text._ZN5boost16exception_detail10bad_alloc_D2Ev:0000000000000000 _ZN5boost16exception_detail10bad_alloc_D1Ev
     /tmp/ccvmoMuv.s:7899   .text._ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev:00000000000000b0 _ZThn16_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev
     /tmp/ccvmoMuv.s:7912   .text._ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev:00000000000000c0 _ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev
     /tmp/ccvmoMuv.s:7927   .text._ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev:0000000000000000 _ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev
     /tmp/ccvmoMuv.s:8144   .text._ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev:00000000000000c0 _ZThn16_N5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev
     /tmp/ccvmoMuv.s:8158   .text._ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev:0000000000000000 _ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev
     /tmp/ccvmoMuv.s:8387   .text._ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev:00000000000000c0 _ZThn16_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev
     /tmp/ccvmoMuv.s:8400   .text._ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev:00000000000000d0 _ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev
     /tmp/ccvmoMuv.s:8653   .text._ZN5boost16exception_detail10clone_implINS0_14bad_exception_EED1Ev:00000000000000b0 _ZThn40_N5boost16exception_detail10clone_implINS0_14bad_exception_EED1Ev
     /tmp/ccvmoMuv.s:8666   .text._ZN5boost16exception_detail10clone_implINS0_14bad_exception_EED1Ev:00000000000000c0 _ZTv0_n40_N5boost16exception_detail10clone_implINS0_14bad_exception_EED1Ev
     /tmp/ccvmoMuv.s:8681   .text._ZN5boost16exception_detail14bad_exception_D0Ev:0000000000000000 _ZN5boost16exception_detail14bad_exception_D0Ev
     /tmp/ccvmoMuv.s:8883   .text._ZN5boost16exception_detail14bad_exception_D0Ev:00000000000000c0 _ZThn40_N5boost16exception_detail14bad_exception_D0Ev
     /tmp/ccvmoMuv.s:8897   .text._ZN5boost16exception_detail10bad_alloc_D0Ev:0000000000000000 _ZN5boost16exception_detail10bad_alloc_D0Ev
     /tmp/ccvmoMuv.s:9099   .text._ZN5boost16exception_detail10bad_alloc_D0Ev:00000000000000c0 _ZThn40_N5boost16exception_detail10bad_alloc_D0Ev
     /tmp/ccvmoMuv.s:9351   .text._ZN5boost16exception_detail10clone_implINS0_10bad_alloc_EED1Ev:00000000000000b0 _ZThn40_N5boost16exception_detail10clone_implINS0_10bad_alloc_EED1Ev
     /tmp/ccvmoMuv.s:9364   .text._ZN5boost16exception_detail10clone_implINS0_10bad_alloc_EED1Ev:00000000000000c0 _ZTv0_n40_N5boost16exception_detail10clone_implINS0_10bad_alloc_EED1Ev
     /tmp/ccvmoMuv.s:9379   .text._ZN5boost16exception_detail10clone_implINS0_14bad_exception_EED0Ev:0000000000000000 _ZN5boost16exception_detail10clone_implINS0_14bad_exception_EED0Ev
     /tmp/ccvmoMuv.s:9601   .text._ZN5boost16exception_detail10clone_implINS0_14bad_exception_EED0Ev:00000000000000c0 _ZThn40_N5boost16exception_detail10clone_implINS0_14bad_exception_EED0Ev
     /tmp/ccvmoMuv.s:9614   .text._ZN5boost16exception_detail10clone_implINS0_14bad_exception_EED0Ev:00000000000000d0 _ZTv0_n40_N5boost16exception_detail10clone_implINS0_14bad_exception_EED0Ev
GAS LISTING /tmp/ccvmoMuv.s 			page 998


     /tmp/ccvmoMuv.s:9629   .text._ZN5boost16exception_detail10clone_implINS0_10bad_alloc_EED0Ev:0000000000000000 _ZN5boost16exception_detail10clone_implINS0_10bad_alloc_EED0Ev
     /tmp/ccvmoMuv.s:9851   .text._ZN5boost16exception_detail10clone_implINS0_10bad_alloc_EED0Ev:00000000000000c0 _ZThn40_N5boost16exception_detail10clone_implINS0_10bad_alloc_EED0Ev
     /tmp/ccvmoMuv.s:9864   .text._ZN5boost16exception_detail10clone_implINS0_10bad_alloc_EED0Ev:00000000000000d0 _ZTv0_n40_N5boost16exception_detail10clone_implINS0_10bad_alloc_EED0Ev
     /tmp/ccvmoMuv.s:9879   .text._ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEE7disposeEv:0000000000000000 _ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEE7disposeEv
     /tmp/ccvmoMuv.s:10204  .text._ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEE7disposeEv:0000000000000000 _ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEE7disposeEv
     /tmp/ccvmoMuv.s:10528  .text._ZNSt6vectorIN2gr5tag_tESaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE:0000000000000000 _ZNSt6vectorIN2gr5tag_tESaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE
     /tmp/ccvmoMuv.s:10877  .text:00000000000008e0 _ZN2gr5lfast12costas2_impl13work_originalEiRSt6vectorIPKvSaIS4_EERS2_IPvSaIS8_EE
     /tmp/ccvmoMuv.s:11817  .text._ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error_info_baseEEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE7_M_copyINSE_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_:0000000000000000 _ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error_info_baseEEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE7_M_copyINSE_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_
     /tmp/ccvmoMuv.s:12870  .text._ZNK5boost16exception_detail25error_info_container_impl5cloneEv:0000000000000000 _ZNK5boost16exception_detail25error_info_container_impl5cloneEv
     /tmp/ccvmoMuv.s:13453  .text._ZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13exception_ptrEv:0000000000000000 _ZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13exception_ptrEv
     /tmp/ccvmoMuv.s:24924  .rodata:00000000000000a0 _ZZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13exception_ptrEvE19__PRETTY_FUNCTION__
     /tmp/ccvmoMuv.s:25668  .bss._ZGVZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13exception_ptrEvE2ep:0000000000000000 _ZGVZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13exception_ptrEvE2ep
     /tmp/ccvmoMuv.s:25675  .bss._ZZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13exception_ptrEvE2ep:0000000000000000 _ZZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13exception_ptrEvE2ep
     /tmp/ccvmoMuv.s:25626  .data.rel.ro.local._ZTVN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEEE:0000000000000000 _ZTVN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEEE
     /tmp/ccvmoMuv.s:14550  .text._ZNK5boost16exception_detail10clone_implINS0_14bad_exception_EE5cloneEv:0000000000000000 _ZNK5boost16exception_detail10clone_implINS0_14bad_exception_EE5cloneEv
     /tmp/ccvmoMuv.s:16017  .text._ZNK5boost16exception_detail10clone_implINS0_14bad_exception_EE5cloneEv:00000000000005e0 _ZTv0_n24_NK5boost16exception_detail10clone_implINS0_14bad_exception_EE5cloneEv
     /tmp/ccvmoMuv.s:16032  .text._ZNK5boost16exception_detail10clone_implINS0_10bad_alloc_EE5cloneEv:0000000000000000 _ZNK5boost16exception_detail10clone_implINS0_10bad_alloc_EE5cloneEv
     /tmp/ccvmoMuv.s:17499  .text._ZNK5boost16exception_detail10clone_implINS0_10bad_alloc_EE5cloneEv:00000000000005e0 _ZTv0_n24_NK5boost16exception_detail10clone_implINS0_10bad_alloc_EE5cloneEv
     /tmp/ccvmoMuv.s:17514  .text._ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE5cloneEv:0000000000000000 _ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE5cloneEv
     /tmp/ccvmoMuv.s:19027  .text._ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE5cloneEv:00000000000005f0 _ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE5cloneEv
     /tmp/ccvmoMuv.s:19041  .text._ZN5boost15throw_exceptionINS_17bad_function_callEEEvRKT_:0000000000000000 _ZN5boost15throw_exceptionINS_17bad_function_callEEEvRKT_
     /tmp/ccvmoMuv.s:20566  .text._ZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_13exception_ptrEv:0000000000000000 _ZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_13exception_ptrEv
     /tmp/ccvmoMuv.s:24919  .rodata:0000000000000000 _ZZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_13exception_ptrEvE19__PRETTY_FUNCTION__
     /tmp/ccvmoMuv.s:25654  .bss._ZGVZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_13exception_ptrEvE2ep:0000000000000000 _ZGVZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_13exception_ptrEvE2ep
     /tmp/ccvmoMuv.s:25661  .bss._ZZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_13exception_ptrEvE2ep:0000000000000000 _ZZN5boost16exception_detail27get_static_exception_objectINS0_14bad_exception_EEENS_13exception_ptrEvE2ep
     /tmp/ccvmoMuv.s:25640  .data.rel.ro.local._ZTVN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEEE:0000000000000000 _ZTVN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEEE
     /tmp/ccvmoMuv.s:21663  .text._ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFvS4_EEEESt10_Select1stISA_ENS2_10comparatorESaISA_EE24_M_get_insert_unique_posERS6_:0000000000000000 _ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFvS4_EEEESt10_Select1stISA_ENS2_10comparatorESaISA_EE24_M_get_insert_unique_posERS6_
     /tmp/ccvmoMuv.s:21858  .text._ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFvS4_EEEESt10_Select1stISA_ENS2_10comparatorESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS6_:0000000000000000 _ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFvS4_EEEESt10_Select1stISA_ENS2_10comparatorESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS6_
     /tmp/ccvmoMuv.s:22216  .text._ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFvS4_EEEESt10_Select1stISA_ENS2_10comparatorESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS6_EESK_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_:0000000000000000 _ZNSt8_Rb_treeIN5boost13intrusive_ptrIN3pmt8pmt_baseEEESt4pairIKS4_NS0_8functionIFvS4_EEEESt10_Select1stISA_ENS2_10comparatorESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS6_EESK_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_
     /tmp/ccvmoMuv.s:22754  .text._ZN2gr11basic_block12dispatch_msgEN5boost13intrusive_ptrIN3pmt8pmt_baseEEES5_:0000000000000000 _ZN2gr11basic_block12dispatch_msgEN5boost13intrusive_ptrIN3pmt8pmt_baseEEES5_
     /tmp/ccvmoMuv.s:25682  .rodata:00000000000003b5 _ZStL19piecewise_construct
     /tmp/ccvmoMuv.s:23223  .text._ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error_info_baseEEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS4_:0000000000000000 _ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error_info_baseEEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS4_
     /tmp/ccvmoMuv.s:23452  .text._ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error_info_baseEEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_:0000000000000000 _ZNSt8_Rb_treeIN5boost16exception_detail10type_info_ESt4pairIKS2_NS0_10shared_ptrINS1_15error_info_baseEEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS4_
     /tmp/ccvmoMuv.s:23960  .text._ZN5boost16exception_detail25error_info_container_impl3setERKNS_10shared_ptrINS0_15error_info_baseEEERKNS0_10type_info_E:0000000000000000 _ZN5boost16exception_detail25error_info_container_impl3setERKNS_10shared_ptrINS0_15error_info_baseEEERKNS0_10type_info_E
     /tmp/ccvmoMuv.s:24939  .rodata:0000000000000300 _ZZN5boost16exception_detail25error_info_container_impl3setERKNS_10shared_ptrINS0_15error_info_baseEEERKNS0_10type_info_EE19__PRETTY_FUNCTION__
     /tmp/ccvmoMuv.s:24833  .text.startup:0000000000000000 _GLOBAL__sub_I__ZN2gr5lfast7costas24makeEfi
                             .bss:0000000000000000 _ZStL8__ioinit
     /tmp/ccvmoMuv.s:24953  .bss._ZGVN5boost16exception_detail37exception_ptr_static_exception_objectINS0_10bad_alloc_EE1eE:0000000000000000 _ZGVN5boost16exception_detail37exception_ptr_static_exception_objectINS0_10bad_alloc_EE1eE
     /tmp/ccvmoMuv.s:24946  .bss._ZGVN5boost16exception_detail37exception_ptr_static_exception_objectINS0_14bad_exception_EE1eE:0000000000000000 _ZGVN5boost16exception_detail37exception_ptr_static_exception_objectINS0_14bad_exception_EE1eE
     /tmp/ccvmoMuv.s:24967  .bss._ZN5boost16exception_detail37exception_ptr_static_exception_objectINS0_10bad_alloc_EE1eE:0000000000000000 _ZN5boost16exception_detail37exception_ptr_static_exception_objectINS0_10bad_alloc_EE1eE
     /tmp/ccvmoMuv.s:24960  .bss._ZN5boost16exception_detail37exception_ptr_static_exception_objectINS0_14bad_exception_EE1eE:0000000000000000 _ZN5boost16exception_detail37exception_ptr_static_exception_objectINS0_14bad_exception_EE1eE
     /tmp/ccvmoMuv.s:24974  .rodata._ZTSN5boost16exception_detail20error_info_containerE:0000000000000000 _ZTSN5boost16exception_detail20error_info_containerE
     /tmp/ccvmoMuv.s:24981  .data.rel.ro._ZTIN5boost16exception_detail20error_info_containerE:0000000000000000 _ZTIN5boost16exception_detail20error_info_containerE
     /tmp/ccvmoMuv.s:24989  .rodata._ZTSN5boost9exceptionE:0000000000000000 _ZTSN5boost9exceptionE
     /tmp/ccvmoMuv.s:24996  .data.rel.ro._ZTIN5boost9exceptionE:0000000000000000 _ZTIN5boost9exceptionE
     /tmp/ccvmoMuv.s:25004  .rodata._ZTSN5boost16exception_detail10clone_baseE:0000000000000000 _ZTSN5boost16exception_detail10clone_baseE
     /tmp/ccvmoMuv.s:25011  .data.rel.ro._ZTIN5boost16exception_detail10clone_baseE:0000000000000000 _ZTIN5boost16exception_detail10clone_baseE
     /tmp/ccvmoMuv.s:25019  .rodata._ZTSN5boost6detail15sp_counted_baseE:0000000000000000 _ZTSN5boost6detail15sp_counted_baseE
     /tmp/ccvmoMuv.s:25026  .data.rel.ro._ZTIN5boost6detail15sp_counted_baseE:0000000000000000 _ZTIN5boost6detail15sp_counted_baseE
     /tmp/ccvmoMuv.s:25034  .rodata._ZTSN5boost6system12system_errorE:0000000000000000 _ZTSN5boost6system12system_errorE
     /tmp/ccvmoMuv.s:25041  .data.rel.ro._ZTIN5boost6system12system_errorE:0000000000000000 _ZTIN5boost6system12system_errorE
     /tmp/ccvmoMuv.s:25050  .rodata._ZTSN5boost17bad_function_callE:0000000000000000 _ZTSN5boost17bad_function_callE
     /tmp/ccvmoMuv.s:25057  .data.rel.ro._ZTIN5boost17bad_function_callE:0000000000000000 _ZTIN5boost17bad_function_callE
     /tmp/ccvmoMuv.s:25066  .rodata._ZTSN5boost16exception_detail25error_info_container_implE:0000000000000000 _ZTSN5boost16exception_detail25error_info_container_implE
     /tmp/ccvmoMuv.s:25073  .data.rel.ro._ZTIN5boost16exception_detail25error_info_container_implE:0000000000000000 _ZTIN5boost16exception_detail25error_info_container_implE
     /tmp/ccvmoMuv.s:25082  .rodata._ZTSN5boost16exception_detail10bad_alloc_E:0000000000000000 _ZTSN5boost16exception_detail10bad_alloc_E
     /tmp/ccvmoMuv.s:25089  .data.rel.ro._ZTIN5boost16exception_detail10bad_alloc_E:0000000000000000 _ZTIN5boost16exception_detail10bad_alloc_E
GAS LISTING /tmp/ccvmoMuv.s 			page 999


     /tmp/ccvmoMuv.s:25103  .rodata._ZTSN5boost16exception_detail14bad_exception_E:0000000000000000 _ZTSN5boost16exception_detail14bad_exception_E
     /tmp/ccvmoMuv.s:25110  .data.rel.ro._ZTIN5boost16exception_detail14bad_exception_E:0000000000000000 _ZTIN5boost16exception_detail14bad_exception_E
     /tmp/ccvmoMuv.s:25124  .rodata._ZTSN2gr5lfast7costas2E:0000000000000000 _ZTSN2gr5lfast7costas2E
     /tmp/ccvmoMuv.s:25131  .data.rel.ro._ZTIN2gr5lfast7costas2E:0000000000000000 _ZTIN2gr5lfast7costas2E
     /tmp/ccvmoMuv.s:25145  .rodata._ZTSN2gr5lfast12costas2_implE:0000000000000000 _ZTSN2gr5lfast12costas2_implE
     /tmp/ccvmoMuv.s:25161  .rodata._ZTSN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE:0000000000000000 _ZTSN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE
     /tmp/ccvmoMuv.s:25182  .rodata._ZTSN5boost16exception_detail10clone_implINS0_14bad_exception_EEE:0000000000000000 _ZTSN5boost16exception_detail10clone_implINS0_14bad_exception_EEE
     /tmp/ccvmoMuv.s:25203  .rodata._ZTSN5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE:0000000000000000 _ZTSN5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE
     /tmp/ccvmoMuv.s:25210  .data.rel.ro._ZTIN5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE:0000000000000000 _ZTIN5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE
     /tmp/ccvmoMuv.s:25224  .rodata._ZTSN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEEE:0000000000000000 _ZTSN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEEE
     /tmp/ccvmoMuv.s:25245  .rodata._ZTSN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEEE:0000000000000000 _ZTSN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEEE
     /tmp/ccvmoMuv.s:25252  .data.rel.ro._ZTIN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEEE:0000000000000000 _ZTIN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEEE
     /tmp/ccvmoMuv.s:25261  .rodata._ZTSN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEEE:0000000000000000 _ZTSN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEEE
     /tmp/ccvmoMuv.s:25268  .data.rel.ro._ZTIN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEEE:0000000000000000 _ZTIN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEEE
     /tmp/ccvmoMuv.s:25429  .data.rel.ro.local._ZTTN2gr5lfast12costas2_implE:0000000000000000 _ZTTN2gr5lfast12costas2_implE
     /tmp/ccvmoMuv.s:25506  .data.rel.ro.local._ZTTN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE:0000000000000000 _ZTTN5boost16exception_detail10clone_implINS0_10bad_alloc_EEE
     /tmp/ccvmoMuv.s:25541  .data.rel.ro.local._ZTTN5boost16exception_detail10clone_implINS0_14bad_exception_EEE:0000000000000000 _ZTTN5boost16exception_detail10clone_implINS0_14bad_exception_EEE
     /tmp/ccvmoMuv.s:25591  .data.rel.ro.local._ZTTN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEEE:0000000000000000 _ZTTN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEEE
     /tmp/ccvmoMuv.s:25708  .rodata.cst8:0000000000000000 .LC6
     /tmp/ccvmoMuv.s:25712  .rodata.cst8:0000000000000008 .LC7
     /tmp/ccvmoMuv.s:25686  .rodata.cst16:0000000000000000 .LC2
     /tmp/ccvmoMuv.s:25693  .rodata.cst4:0000000000000000 .LC3
     /tmp/ccvmoMuv.s:25697  .rodata.cst16:0000000000000010 .LC4
     /tmp/ccvmoMuv.s:25704  .rodata.cst4:0000000000000004 .LC5
     /tmp/ccvmoMuv.s:1616   .rodata.str1.8:0000000000000000 .LC8
     /tmp/ccvmoMuv.s:5173   .rodata.str1.1:0000000000000000 .LC14
     /tmp/ccvmoMuv.s:25717  .rodata.cst4:0000000000000008 .LC15
     /tmp/ccvmoMuv.s:25720  .rodata.cst4:000000000000000c .LC16
     /tmp/ccvmoMuv.s:680    .rodata._ZNK5boost6system12system_error4whatEv.str1.1:0000000000000015 .LC1
     /tmp/ccvmoMuv.s:678    .rodata._ZNK5boost6system12system_error4whatEv.str1.1:0000000000000000 .LC0
     /tmp/ccvmoMuv.s:2927   .rodata._ZNK5boost16exception_detail25error_info_container_impl3getERKNS0_10type_info_E.str1.8:0000000000000030 .LC11
     /tmp/ccvmoMuv.s:2930   .rodata._ZNK5boost16exception_detail25error_info_container_impl3getERKNS0_10type_info_E.str1.8:0000000000000058 .LC12
     /tmp/ccvmoMuv.s:2920   .rodata._ZNK5boost16exception_detail25error_info_container_impl3getERKNS0_10type_info_E.str1.8:0000000000000000 .LC9
     /tmp/ccvmoMuv.s:2923   .rodata._ZNK5boost16exception_detail25error_info_container_impl3getERKNS0_10type_info_E.str1.1:0000000000000000 .LC10
     /tmp/ccvmoMuv.s:13447  .rodata._ZN5boost16exception_detail27get_static_exception_objectINS0_10bad_alloc_EEENS_13exception_ptrEv.str1.8:0000000000000000 .LC17
     /tmp/ccvmoMuv.s:22747  .rodata._ZN2gr11basic_block12dispatch_msgEN5boost13intrusive_ptrIN3pmt8pmt_baseEEES5_.str1.1:0000000000000000 .LC18
     /tmp/ccvmoMuv.s:23953  .rodata._ZN5boost16exception_detail25error_info_container_impl3setERKNS_10shared_ptrINS0_15error_info_baseEEERKNS0_10type_info_E.str1.1:0000000000000000 .LC19
                           .group:0000000000000000 _ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEED5Ev
                           .group:0000000000000000 _ZN5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEED5Ev
                           .group:0000000000000000 _ZN5boost17bad_function_callD5Ev
                           .group:0000000000000000 _ZN5boost6system12system_errorD5Ev
                           .group:0000000000000000 _ZN5boost13exception_ptrD5Ev
                           .group:0000000000000000 _ZN5boost16exception_detail14bad_exception_D5Ev
                           .group:0000000000000000 _ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED5Ev
                           .group:0000000000000000 _ZN5boost16exception_detail10bad_alloc_D5Ev

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
_ZdlPvm
__cxa_allocate_exception
__cxa_throw
__cxa_free_exception
_Unwind_Resume
__gxx_personality_v0
_ZNKSt13runtime_error4whatEv
strlen
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm
GAS LISTING /tmp/ccvmoMuv.s 			page 1000


_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm
_ZdlPv
_ZSt20__throw_length_errorPKc
__cxa_begin_catch
__cxa_end_catch
__cxa_call_unexpected
_ZNSt13runtime_errorD2Ev
_ZN2gr6blocks12control_loopD2Ev
_ZTVN2gr10sync_blockE
_ZN2gr5blockD2Ev
sinf
cosf
_ZSt19__throw_logic_errorPKc
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm
memcpy
_ZN3pmt3eqvERKN5boost13intrusive_ptrINS_8pmt_baseEEES5_
_ZN3pmt12dict_has_keyERKN5boost13intrusive_ptrINS_8pmt_baseEEES5_
_Znwm
memmove
_ZSt17__throw_bad_allocv
_ZNSt13runtime_errorC2ERKS_
__cxa_demangle
free
strcmp
__assert_fail
_ZNSt8ios_baseC2Ev
_ZTVSt9basic_iosIcSt11char_traitsIcEE
_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E
_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
_ZTVSt15basic_streambufIcSt11char_traitsIcEE
_ZNSt6localeC1Ev
_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE
_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l
_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_
_ZNSt6localeD1Ev
_ZNSt8ios_baseD2Ev
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_
_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev
_ZN2gr12io_signature4makeEiii
_ZN2gr10sync_blockC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN5boost10shared_ptrINS_12io_signatureEEESC_
_ZN2gr6blocks12control_loopC2Efff
_ZN3pmt21intrusive_ptr_add_refEPNS_8pmt_baseE
_ZN3pmt7is_realEN5boost13intrusive_ptrINS_8pmt_baseEEE
_ZN3pmt21intrusive_ptr_releaseEPNS_8pmt_baseE
_ZN3pmt9to_doubleEN5boost13intrusive_ptrINS_8pmt_baseEEE
powf
_ZN8gnuradio6detail10sptr_magic18fetch_initial_sptrEPN2gr11basic_blockE
_ZTIN2gr11basic_blockE
__dynamic_cast
_ZNSt13bad_exceptionD2Ev
_ZNSt9bad_allocD2Ev
_ZN2gr7sincosfEfPfS0_
__mulsc3
_ZN2gr6blocks12control_loop12advance_loopEf
_ZN2gr6blocks12control_loop10phase_wrapEv
GAS LISTING /tmp/ccvmoMuv.s 			page 1001


_ZN2gr6blocks12control_loop15frequency_limitEv
_ZN2gr5block11nitems_readEj
__cxa_rethrow
__cxa_guard_acquire
__cxa_guard_release
__dso_handle
__cxa_atexit
__cxa_guard_abort
_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base
_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base
_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_
_ZNSt13runtime_errorC2EPKc
_ZN5boost6system16generic_categoryEv
_ZN5boost6system15system_categoryEv
_ZNSt8ios_base4InitC1Ev
_ZNSt8ios_base4InitD1Ev
_ZTVN10__cxxabiv117__class_type_infoE
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTISt13runtime_error
_ZTVN10__cxxabiv121__vmi_class_type_infoE
_ZTISt9bad_alloc
_ZTISt13bad_exception
_ZTIN2gr10sync_blockE
_ZTIN2gr6blocks12control_loopE
__cxa_pure_virtual
_ZNKSt9bad_alloc4whatEv
_ZNKSt13bad_exception4whatEv
_ZN2gr12msg_accepter4postEN5boost13intrusive_ptrIN3pmt8pmt_baseEEES5_
_ZN2gr5block22set_processor_affinityERKSt6vectorIiSaIiEE
_ZN2gr5block24unset_processor_affinityEv
_ZN2gr10sync_block8forecastEiRSt6vectorIiSaIiEE
_ZN2gr10sync_block12general_workEiRSt6vectorIiSaIiEERS1_IPKvSaIS6_EERS1_IPvSaISA_EE
_ZN2gr5block5startEv
_ZN2gr5block4stopEv
_ZN2gr10sync_block28fixed_rate_ninput_to_noutputEi
_ZN2gr10sync_block28fixed_rate_noutput_to_ninputEi
_ZN2gr6blocks12control_loop18set_loop_bandwidthEf
